
KASM_FilterTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b420  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800b6c0  0800b6c0  0000c6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b774  0800b774  0000c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b77c  0800b77c  0000c77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b780  0800b780  0000c780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b784  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000680  24000068  0800b7e8  0000d068  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240006e8  0800b7e8  0000d6e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c65d  00000000  00000000  0000d092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c28  00000000  00000000  000296ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c0  00000000  00000000  0002c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001201  00000000  00000000  0002d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039589  00000000  00000000  0002ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d303  00000000  00000000  00068162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b4c3  00000000  00000000  00085465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00200928  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006854  00000000  00000000  0020096c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  002071c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b6a8 	.word	0x0800b6a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800b6a8 	.word	0x0800b6a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <read_TIM1>:
static double ref=0;// reference (input) for control loop
static double sine_vals[SIN_PERIOD] = {0};

//Variables for UART Output
char message[64] = {'\0'};
uint16_t read_TIM1() {
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return TIM1->CNT;
 8000674:	4b03      	ldr	r3, [pc, #12]	@ (8000684 <read_TIM1+0x14>)
 8000676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000678:	b29b      	uxth	r3, r3
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40010000 	.word	0x40010000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068c:	f001 fa58 	bl	8001b40 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 f8d2 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f86a 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f001 f874 	bl	8001784 <MX_GPIO_Init>
  MX_TIM1_Init();
 800069c:	f000 fb16 	bl	8000ccc <MX_TIM1_Init>
  MX_TIM2_Init();
 80006a0:	f000 fbe4 	bl	8000e6c <MX_TIM2_Init>
  MX_TIM4_Init();
 80006a4:	f000 fc3c 	bl	8000f20 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a8:	f000 fcd2 	bl	8001050 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006ac:	f000 fd52 	bl	8001154 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006b0:	f000 fdde 	bl	8001270 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006b4:	f000 fe54 	bl	8001360 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b8:	f000 fea0 	bl	80013fc <MX_TIM14_Init>
  MX_TIM15_Init();
 80006bc:	f000 feec 	bl	8001498 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006c0:	f000 ff9a 	bl	80015f8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006c4:	f000 f900 	bl	80008c8 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c8:	f000 fad4 	bl	8000c74 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006cc:	f001 f80e 	bl	80016ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  //Timer 1
    HAL_TIM_Base_Start_IT(&htim1);
 80006d0:	481e      	ldr	r0, [pc, #120]	@ (800074c <main+0xc4>)
 80006d2:	f007 fb23 	bl	8007d1c <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006d6:	2100      	movs	r1, #0
 80006d8:	481c      	ldr	r0, [pc, #112]	@ (800074c <main+0xc4>)
 80006da:	f007 fbef 	bl	8007ebc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006de:	2104      	movs	r1, #4
 80006e0:	481a      	ldr	r0, [pc, #104]	@ (800074c <main+0xc4>)
 80006e2:	f007 fbeb 	bl	8007ebc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006e6:	2108      	movs	r1, #8
 80006e8:	4818      	ldr	r0, [pc, #96]	@ (800074c <main+0xc4>)
 80006ea:	f007 fbe7 	bl	8007ebc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006ee:	210c      	movs	r1, #12
 80006f0:	4816      	ldr	r0, [pc, #88]	@ (800074c <main+0xc4>)
 80006f2:	f007 fbe3 	bl	8007ebc <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006f6:	2201      	movs	r2, #1
 80006f8:	2101      	movs	r1, #1
 80006fa:	4815      	ldr	r0, [pc, #84]	@ (8000750 <main+0xc8>)
 80006fc:	f003 f9d6 	bl	8003aac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2102      	movs	r1, #2
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0xc8>)
 8000706:	f003 f9d1 	bl	8003aac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	4810      	ldr	r0, [pc, #64]	@ (8000750 <main+0xc8>)
 8000710:	f003 f9cc 	bl	8003aac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <main+0xc8>)
 800071a:	f003 f9c7 	bl	8003aac <HAL_GPIO_WritePin>
    //End Timer 1


    //HAL_UART_Transmit(&huart4, tx_buffer, 27, 10);
    sprintf(message, "Timer 1 Initialization Complete: %d \n\r", read_TIM1);
 800071e:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <main+0xcc>)
 8000720:	490d      	ldr	r1, [pc, #52]	@ (8000758 <main+0xd0>)
 8000722:	480e      	ldr	r0, [pc, #56]	@ (800075c <main+0xd4>)
 8000724:	f00a fb20 	bl	800ad68 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000728:	2364      	movs	r3, #100	@ 0x64
 800072a:	2240      	movs	r2, #64	@ 0x40
 800072c:	490b      	ldr	r1, [pc, #44]	@ (800075c <main+0xd4>)
 800072e:	480c      	ldr	r0, [pc, #48]	@ (8000760 <main+0xd8>)
 8000730:	f008 fdc8 	bl	80092c4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <main+0xdc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d1fb      	bne.n	8000734 <main+0xac>
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <main+0xe0>)
 800073e:	ed93 7b00 	vldr	d7, [r3]
 8000742:	eeb0 0b47 	vmov.f64	d0, d7
 8000746:	f001 f92f 	bl	80019a8 <control_update>
 800074a:	e7f3      	b.n	8000734 <main+0xac>
 800074c:	24000198 	.word	0x24000198
 8000750:	58021000 	.word	0x58021000
 8000754:	08000671 	.word	0x08000671
 8000758:	0800b6c0 	.word	0x0800b6c0
 800075c:	24000530 	.word	0x24000530
 8000760:	24000490 	.word	0x24000490
 8000764:	24000524 	.word	0x24000524
 8000768:	24000528 	.word	0x24000528

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09e      	sub	sp, #120	@ 0x78
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00a fb14 	bl	800ada8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2220      	movs	r2, #32
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f00a fb0d 	bl	800ada8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078e:	2002      	movs	r0, #2
 8000790:	f004 fc20 	bl	8004fd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b48      	ldr	r3, [pc, #288]	@ (80008bc <SystemClock_Config+0x150>)
 800079a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079c:	4a47      	ldr	r2, [pc, #284]	@ (80008bc <SystemClock_Config+0x150>)
 800079e:	f023 0301 	bic.w	r3, r3, #1
 80007a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007a4:	4b45      	ldr	r3, [pc, #276]	@ (80008bc <SystemClock_Config+0x150>)
 80007a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <SystemClock_Config+0x154>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a43      	ldr	r2, [pc, #268]	@ (80008c0 <SystemClock_Config+0x154>)
 80007b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <SystemClock_Config+0x154>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c6:	bf00      	nop
 80007c8:	4b3d      	ldr	r3, [pc, #244]	@ (80008c0 <SystemClock_Config+0x154>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d4:	d1f8      	bne.n	80007c8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <SystemClock_Config+0x158>)
 80007d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007dc:	4a39      	ldr	r2, [pc, #228]	@ (80008c4 <SystemClock_Config+0x158>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007e6:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <SystemClock_Config+0x158>)
 80007e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <SystemClock_Config+0x154>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a30      	ldr	r2, [pc, #192]	@ (80008c0 <SystemClock_Config+0x154>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <SystemClock_Config+0x154>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <SystemClock_Config+0x150>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <SystemClock_Config+0x150>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <SystemClock_Config+0x150>)
 800081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000826:	bf00      	nop
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <SystemClock_Config+0x154>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000834:	d1f8      	bne.n	8000828 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000836:	2301      	movs	r3, #1
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000844:	2302      	movs	r3, #2
 8000846:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800084c:	2350      	movs	r3, #80	@ 0x50
 800084e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085c:	230c      	movs	r3, #12
 800085e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000860:	2300      	movs	r3, #0
 8000862:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fbeb 	bl	8005048 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000878:	f001 f98e 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	233f      	movs	r3, #63	@ 0x3f
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000888:	2308      	movs	r3, #8
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2104      	movs	r1, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 f829 	bl	80058fc <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80008b0:	f001 f972 	bl	8001b98 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3778      	adds	r7, #120	@ 0x78
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024800 	.word	0x58024800
 80008c4:	58024400 	.word	0x58024400

080008c8 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0aa      	sub	sp, #168	@ 0xa8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80008ce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80008de:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80008ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008f0:	2254      	movs	r2, #84	@ 0x54
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00a fa57 	bl	800ada8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00a fa4b 	bl	800ada8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000912:	4bc4      	ldr	r3, [pc, #784]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000914:	4ac4      	ldr	r2, [pc, #784]	@ (8000c28 <MX_HRTIM_Init+0x360>)
 8000916:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000918:	4bc2      	ldr	r3, [pc, #776]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800091e:	4bc1      	ldr	r3, [pc, #772]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000924:	48bf      	ldr	r0, [pc, #764]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000926:	f003 f8db 	bl	8003ae0 <HAL_HRTIM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000930:	f001 f932 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	48bb      	ldr	r0, [pc, #748]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000938:	f003 f9f9 	bl	8003d2e <HAL_HRTIM_EventPrescalerConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000942:	f001 f929 	bl	8001b98 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000946:	2302      	movs	r3, #2
 8000948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000952:	2308      	movs	r3, #8
 8000954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 800095e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000962:	461a      	mov	r2, r3
 8000964:	2101      	movs	r1, #1
 8000966:	48af      	ldr	r0, [pc, #700]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000968:	f003 f9b2 	bl	8003cd0 <HAL_HRTIM_EventConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000972:	f001 f911 	bl	8001b98 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000976:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 800097a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000984:	2305      	movs	r3, #5
 8000986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800098a:	2308      	movs	r3, #8
 800098c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000990:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000994:	461a      	mov	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	48a2      	ldr	r0, [pc, #648]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 800099a:	f003 f971 	bl	8003c80 <HAL_HRTIM_TimeBaseConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 80009a4:	f001 f8f8 	bl	8001b98 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80009bc:	2300      	movs	r3, #0
 80009be:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80009cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009d0:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80009da:	2300      	movs	r3, #0
 80009dc:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80009de:	2300      	movs	r3, #0
 80009e0:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80009ea:	2300      	movs	r3, #0
 80009ec:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80009ee:	2300      	movs	r3, #0
 80009f0:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 80009f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80009fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000a00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000a04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4885      	ldr	r0, [pc, #532]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a0e:	f003 f9c7 	bl	8003da0 <HAL_HRTIM_WaveformTimerConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000a18:	f001 f8be 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000a1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a20:	461a      	mov	r2, r3
 8000a22:	2101      	movs	r1, #1
 8000a24:	487f      	ldr	r0, [pc, #508]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a26:	f003 f9bb 	bl	8003da0 <HAL_HRTIM_WaveformTimerConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000a30:	f001 f8b2 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000a34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4879      	ldr	r0, [pc, #484]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a3e:	f003 f9af 	bl	8003da0 <HAL_HRTIM_WaveformTimerConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000a48:	f001 f8a6 	bl	8001b98 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000a50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a54:	461a      	mov	r2, r3
 8000a56:	2103      	movs	r1, #3
 8000a58:	4872      	ldr	r0, [pc, #456]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a5a:	f003 f9a1 	bl	8003da0 <HAL_HRTIM_WaveformTimerConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000a64:	f001 f898 	bl	8001b98 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000a68:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	2201      	movs	r2, #1
 8000a74:	2100      	movs	r1, #0
 8000a76:	486b      	ldr	r0, [pc, #428]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a78:	f003 fa04 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000a82:	f001 f889 	bl	8001b98 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	2202      	movs	r2, #2
 8000a94:	2100      	movs	r1, #0
 8000a96:	4863      	ldr	r0, [pc, #396]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a98:	f003 f9f4 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000aa2:	f001 f879 	bl	8001b98 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	2202      	movs	r2, #2
 8000aac:	2101      	movs	r1, #1
 8000aae:	485d      	ldr	r0, [pc, #372]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000ab0:	f003 f9e8 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000aba:	f001 f86d 	bl	8001b98 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4857      	ldr	r0, [pc, #348]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000ac8:	f003 f9dc 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000ad2:	f001 f861 	bl	8001b98 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	2202      	movs	r2, #2
 8000adc:	2103      	movs	r1, #3
 8000ade:	4851      	ldr	r0, [pc, #324]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000ae0:	f003 f9d0 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000aea:	f001 f855 	bl	8001b98 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000af2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c2c <MX_HRTIM_Init+0x364>)
 8000af4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000af6:	2308      	movs	r3, #8
 8000af8:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2201      	movs	r2, #1
 8000b12:	2100      	movs	r1, #0
 8000b14:	4843      	ldr	r0, [pc, #268]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b16:	f003 fb23 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000b20:	f001 f83a 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2204      	movs	r2, #4
 8000b28:	2101      	movs	r1, #1
 8000b2a:	483e      	ldr	r0, [pc, #248]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b2c:	f003 fb18 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000b36:	f001 f82f 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4838      	ldr	r0, [pc, #224]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b42:	f003 fb0d 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000b4c:	f001 f824 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2240      	movs	r2, #64	@ 0x40
 8000b54:	2103      	movs	r1, #3
 8000b56:	4833      	ldr	r0, [pc, #204]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b58:	f003 fb02 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000b62:	f001 f819 	bl	8001b98 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000b66:	2310      	movs	r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	2100      	movs	r1, #0
 8000b70:	482c      	ldr	r0, [pc, #176]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b72:	f003 faf5 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000b7c:	f001 f80c 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2208      	movs	r2, #8
 8000b84:	2101      	movs	r1, #1
 8000b86:	4827      	ldr	r0, [pc, #156]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b88:	f003 faea 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000b92:	f001 f801 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4821      	ldr	r0, [pc, #132]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b9e:	f003 fadf 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000ba8:	f000 fff6 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000bb4:	f003 fad4 	bl	8004160 <HAL_HRTIM_WaveformOutputConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000bbe:	f000 ffeb 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000bc2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000bcc:	f003 f858 	bl	8003c80 <HAL_HRTIM_TimeBaseConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000bd6:	f000 ffdf 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	2201      	movs	r2, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000be4:	f003 f94e 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000bee:	f000 ffd3 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000bf2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000bfc:	f003 f840 	bl	8003c80 <HAL_HRTIM_TimeBaseConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000c06:	f000 ffc7 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000c14:	f003 f936 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d008      	beq.n	8000c30 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000c1e:	f000 ffbb 	bl	8001b98 <Error_Handler>
 8000c22:	e005      	b.n	8000c30 <MX_HRTIM_Init+0x368>
 8000c24:	24000084 	.word	0x24000084
 8000c28:	40017400 	.word	0x40017400
 8000c2c:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000c30:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c34:	461a      	mov	r2, r3
 8000c36:	2103      	movs	r1, #3
 8000c38:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_HRTIM_Init+0x3a8>)
 8000c3a:	f003 f821 	bl	8003c80 <HAL_HRTIM_TimeBaseConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000c44:	f000 ffa8 	bl	8001b98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2103      	movs	r1, #3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_HRTIM_Init+0x3a8>)
 8000c52:	f003 f917 	bl	8003e84 <HAL_HRTIM_WaveformCompareConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000c5c:	f000 ff9c 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_HRTIM_Init+0x3a8>)
 8000c62:	f000 fff3 	bl	8001c4c <HAL_HRTIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	37a8      	adds	r7, #168	@ 0xa8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000084 	.word	0x24000084

08000c74 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <MX_LPTIM1_Init+0x54>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c90:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000cb2:	f003 fffd 	bl	8004cb0 <HAL_LPTIM_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 ff6c 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24000160 	.word	0x24000160
 8000cc8:	40002400 	.word	0x40002400

08000ccc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09a      	sub	sp, #104	@ 0x68
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	222c      	movs	r2, #44	@ 0x2c
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00a f84e 	bl	800ada8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0c:	4b55      	ldr	r3, [pc, #340]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d0e:	4a56      	ldr	r2, [pc, #344]	@ (8000e68 <MX_TIM1_Init+0x19c>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d12:	4b54      	ldr	r3, [pc, #336]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b52      	ldr	r3, [pc, #328]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000d1e:	4b51      	ldr	r3, [pc, #324]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d20:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000d24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b4f      	ldr	r3, [pc, #316]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b4c      	ldr	r3, [pc, #304]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d38:	484a      	ldr	r0, [pc, #296]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d3a:	f006 ff97 	bl	8007c6c <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f000 ff28 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d52:	4619      	mov	r1, r3
 8000d54:	4843      	ldr	r0, [pc, #268]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d56:	f007 fbdb 	bl	8008510 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d60:	f000 ff1a 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d64:	483f      	ldr	r0, [pc, #252]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d66:	f007 f851 	bl	8007e0c <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d70:	f000 ff12 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d74:	2320      	movs	r3, #32
 8000d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4837      	ldr	r0, [pc, #220]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d88:	f008 f922 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d92:	f000 ff01 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d96:	2360      	movs	r3, #96	@ 0x60
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	482a      	ldr	r0, [pc, #168]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000dbc:	f007 fa94 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000dc6:	f000 fee7 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dce:	2204      	movs	r2, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4824      	ldr	r0, [pc, #144]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000dd4:	f007 fa88 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000dde:	f000 fedb 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de6:	2208      	movs	r2, #8
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000dec:	f007 fa7c 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000df6:	f000 fecf 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dfe:	220c      	movs	r2, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	4818      	ldr	r0, [pc, #96]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000e04:	f007 fa70 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000e0e:	f000 fec3 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000e48:	f008 f950 	bl	80090ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000e52:	f000 fea1 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e56:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000e58:	f001 f920 	bl	800209c <HAL_TIM_MspPostInit>

}
 8000e5c:	bf00      	nop
 8000e5e:	3768      	adds	r7, #104	@ 0x68
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000198 	.word	0x24000198
 8000e68:	40010000 	.word	0x40010000

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000ea6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eb8:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000eba:	f006 ffa7 	bl	8007e0c <HAL_TIM_PWM_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f000 fe68 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000ed8:	f008 f87a 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ee2:	f000 fe59 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	@ 0x60
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000efe:	f007 f9f3 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f08:	f000 fe46 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000f0e:	f001 f8c5 	bl	800209c <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	240001e4 	.word	0x240001e4

08000f20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	@ 0x38
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f54:	4a3d      	ldr	r2, [pc, #244]	@ (800104c <MX_TIM4_Init+0x12c>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8000f64:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f66:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b36      	ldr	r3, [pc, #216]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f78:	4833      	ldr	r0, [pc, #204]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f7a:	f006 fe77 	bl	8007c6c <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000f84:	f000 fe08 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f92:	4619      	mov	r1, r3
 8000f94:	482c      	ldr	r0, [pc, #176]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f96:	f007 fabb 	bl	8008510 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000fa0:	f000 fdfa 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fa4:	4828      	ldr	r0, [pc, #160]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000fa6:	f006 ff31 	bl	8007e0c <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000fb0:	f000 fdf2 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4821      	ldr	r0, [pc, #132]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000fc4:	f008 f804 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000fce:	f000 fde3 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd2:	2360      	movs	r3, #96	@ 0x60
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4817      	ldr	r0, [pc, #92]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000fea:	f007 f97d 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ff4:	f000 fdd0 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4812      	ldr	r0, [pc, #72]	@ (8001048 <MX_TIM4_Init+0x128>)
 8001000:	f007 f972 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800100a:	f000 fdc5 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2208      	movs	r2, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <MX_TIM4_Init+0x128>)
 8001016:	f007 f967 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001020:	f000 fdba 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	220c      	movs	r2, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	@ (8001048 <MX_TIM4_Init+0x128>)
 800102c:	f007 f95c 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001036:	f000 fdaf 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <MX_TIM4_Init+0x128>)
 800103c:	f001 f82e 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	@ 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000230 	.word	0x24000230
 800104c:	40000800 	.word	0x40000800

08001050 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001082:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001084:	4a32      	ldr	r2, [pc, #200]	@ (8001150 <MX_TIM5_Init+0x100>)
 8001086:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <MX_TIM5_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001096:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800109a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <MX_TIM5_Init+0xfc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010a8:	4828      	ldr	r0, [pc, #160]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010aa:	f006 fddf 	bl	8007c6c <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80010b4:	f000 fd70 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4821      	ldr	r0, [pc, #132]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010c6:	f007 fa23 	bl	8008510 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80010d0:	f000 fd62 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010d4:	481d      	ldr	r0, [pc, #116]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010d6:	f006 fe99 	bl	8007e0c <HAL_TIM_PWM_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80010e0:	f000 fd5a 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4816      	ldr	r0, [pc, #88]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010f4:	f007 ff6c 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80010fe:	f000 fd4b 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001102:	2360      	movs	r3, #96	@ 0x60
 8001104:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <MX_TIM5_Init+0xfc>)
 800111a:	f007 f8e5 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001124:	f000 fd38 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2208      	movs	r2, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001130:	f007 f8da 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800113a:	f000 fd2d 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001140:	f000 ffac 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	@ 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2400027c 	.word	0x2400027c
 8001150:	40000c00 	.word	0x40000c00

08001154 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	@ 0x58
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	222c      	movs	r2, #44	@ 0x2c
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f009 fe11 	bl	800ada8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <MX_TIM8_Init+0x114>)
 8001188:	4a38      	ldr	r2, [pc, #224]	@ (800126c <MX_TIM8_Init+0x118>)
 800118a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800118c:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <MX_TIM8_Init+0x114>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <MX_TIM8_Init+0x114>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <MX_TIM8_Init+0x114>)
 800119a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800119e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011ae:	2280      	movs	r2, #128	@ 0x80
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011b2:	482d      	ldr	r0, [pc, #180]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011b4:	f006 fe2a 	bl	8007e0c <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 fceb 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011d2:	4619      	mov	r1, r3
 80011d4:	4824      	ldr	r0, [pc, #144]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011d6:	f007 fefb 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80011e0:	f000 fcda 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	@ 0x60
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001200:	220c      	movs	r2, #12
 8001202:	4619      	mov	r1, r3
 8001204:	4818      	ldr	r0, [pc, #96]	@ (8001268 <MX_TIM8_Init+0x114>)
 8001206:	f007 f86f 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001210:	f000 fcc2 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	@ (8001268 <MX_TIM8_Init+0x114>)
 800124a:	f007 ff4f 	bl	80090ec <HAL_TIMEx_ConfigBreakDeadTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001254:	f000 fca0 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_TIM8_Init+0x114>)
 800125a:	f000 ff1f 	bl	800209c <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	@ 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	240002c8 	.word	0x240002c8
 800126c:	40010400 	.word	0x40010400

08001270 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	@ 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012a4:	4a2d      	ldr	r2, [pc, #180]	@ (800135c <MX_TIM12_Init+0xec>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012b6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80012ba:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c2:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80012c8:	4823      	ldr	r0, [pc, #140]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012ca:	f006 fccf 	bl	8007c6c <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80012d4:	f000 fc60 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481c      	ldr	r0, [pc, #112]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012e6:	f007 f913 	bl	8008510 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80012f0:	f000 fc52 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80012f4:	4818      	ldr	r0, [pc, #96]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012f6:	f006 fd89 	bl	8007e0c <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001300:	f000 fc4a 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4811      	ldr	r0, [pc, #68]	@ (8001358 <MX_TIM12_Init+0xe8>)
 8001314:	f007 fe5c 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800131e:	f000 fc3b 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	@ 0x60
 8001324:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	2204      	movs	r2, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	@ (8001358 <MX_TIM12_Init+0xe8>)
 800133a:	f006 ffd5 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001344:	f000 fc28 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <MX_TIM12_Init+0xe8>)
 800134a:	f000 fea7 	bl	800209c <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	@ 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	24000314 	.word	0x24000314
 800135c:	40001800 	.word	0x40001800

08001360 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]
 8001376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_TIM13_Init+0x94>)
 800137a:	4a1f      	ldr	r2, [pc, #124]	@ (80013f8 <MX_TIM13_Init+0x98>)
 800137c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_TIM13_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_TIM13_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_TIM13_Init+0x94>)
 800138c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001390:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_TIM13_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <MX_TIM13_Init+0x94>)
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800139e:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013a0:	f006 fc64 	bl	8007c6c <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80013aa:	f000 fbf5 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013b0:	f006 fd2c 	bl	8007e0c <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80013ba:	f000 fbed 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013be:	2360      	movs	r3, #96	@ 0x60
 80013c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013d6:	f006 ff87 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80013e0:	f000 fbda 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013e6:	f000 fe59 	bl	800209c <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000360 	.word	0x24000360
 80013f8:	40001c00 	.word	0x40001c00

080013fc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001416:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <MX_TIM14_Init+0x98>)
 8001418:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <MX_TIM14_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001428:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800142c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <MX_TIM14_Init+0x94>)
 800143c:	f006 fc16 	bl	8007c6c <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001446:	f000 fba7 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800144a:	4811      	ldr	r0, [pc, #68]	@ (8001490 <MX_TIM14_Init+0x94>)
 800144c:	f006 fcde 	bl	8007e0c <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001456:	f000 fb9f 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	@ 0x60
 800145c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001472:	f006 ff39 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800147c:	f000 fb8c 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001482:	f000 fe0b 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	240003ac 	.word	0x240003ac
 8001494:	40002000 	.word	0x40002000

08001498 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b09a      	sub	sp, #104	@ 0x68
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	222c      	movs	r2, #44	@ 0x2c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 fc68 	bl	800ada8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014d8:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014da:	4a46      	ldr	r2, [pc, #280]	@ (80015f4 <MX_TIM15_Init+0x15c>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 80014ea:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014ec:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80014f0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014f8:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001504:	483a      	ldr	r0, [pc, #232]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001506:	f006 fbb1 	bl	8007c6c <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001510:	f000 fb42 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001518:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800151e:	4619      	mov	r1, r3
 8001520:	4833      	ldr	r0, [pc, #204]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001522:	f006 fff5 	bl	8008510 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800152c:	f000 fb34 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001530:	482f      	ldr	r0, [pc, #188]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001532:	f006 fc6b 	bl	8007e0c <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800153c:	f000 fb2c 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001548:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800154c:	4619      	mov	r1, r3
 800154e:	4828      	ldr	r0, [pc, #160]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001550:	f007 fd3e 	bl	8008fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800155a:	f000 fb1d 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	@ 0x60
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156a:	2300      	movs	r3, #0
 800156c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	481b      	ldr	r0, [pc, #108]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001584:	f006 feb0 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800158e:	f000 fb03 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001592:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4815      	ldr	r0, [pc, #84]	@ (80015f0 <MX_TIM15_Init+0x158>)
 800159c:	f006 fea4 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80015a6:	f000 faf7 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80015d2:	f007 fd8b 	bl	80090ec <HAL_TIMEx_ConfigBreakDeadTime>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 80015dc:	f000 fadc 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80015e2:	f000 fd5b 	bl	800209c <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3768      	adds	r7, #104	@ 0x68
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	240003f8 	.word	0x240003f8
 80015f4:	40014000 	.word	0x40014000

080015f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b092      	sub	sp, #72	@ 0x48
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	222c      	movs	r2, #44	@ 0x2c
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f009 fbc5 	bl	800ada8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800161e:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001620:	4a31      	ldr	r2, [pc, #196]	@ (80016e8 <MX_TIM16_Init+0xf0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b2e      	ldr	r3, [pc, #184]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001630:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001632:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001636:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800163e:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800164a:	4826      	ldr	r0, [pc, #152]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800164c:	f006 fb0e 	bl	8007c6c <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001656:	f000 fa9f 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800165a:	4822      	ldr	r0, [pc, #136]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800165c:	f006 fbd6 	bl	8007e0c <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001666:	f000 fa97 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	@ 0x60
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001690:	f006 fe2a 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800169a:	f000 fa7d 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM16_Init+0xec>)
 80016c6:	f007 fd11 	bl	80090ec <HAL_TIMEx_ConfigBreakDeadTime>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80016d0:	f000 fa62 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM16_Init+0xec>)
 80016d6:	f000 fce1 	bl	800209c <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3748      	adds	r7, #72	@ 0x48
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000444 	.word	0x24000444
 80016e8:	40014400 	.word	0x40014400

080016ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016f0:	4b22      	ldr	r3, [pc, #136]	@ (800177c <MX_UART4_Init+0x90>)
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <MX_UART4_Init+0x94>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_UART4_Init+0x90>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <MX_UART4_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_UART4_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_UART4_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_UART4_Init+0x90>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_UART4_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_UART4_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_UART4_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_UART4_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_UART4_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_UART4_Init+0x90>)
 8001736:	f007 fd75 	bl	8009224 <HAL_UART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 fa2a 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_UART4_Init+0x90>)
 8001748:	f009 fa44 	bl	800abd4 <HAL_UARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 fa21 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <MX_UART4_Init+0x90>)
 800175a:	f009 fa79 	bl	800ac50 <HAL_UARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 fa18 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_UART4_Init+0x90>)
 800176a:	f009 f9fa 	bl	800ab62 <HAL_UARTEx_DisableFifoMode>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 fa10 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	24000490 	.word	0x24000490
 8001780:	40004c00 	.word	0x40004c00

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <MX_GPIO_Init+0x17c>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	4a57      	ldr	r2, [pc, #348]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017aa:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	4a48      	ldr	r2, [pc, #288]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e6:	4b46      	ldr	r3, [pc, #280]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b42      	ldr	r3, [pc, #264]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	4a41      	ldr	r2, [pc, #260]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001804:	4b3e      	ldr	r3, [pc, #248]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	4a39      	ldr	r2, [pc, #228]	@ (8001900 <MX_GPIO_Init+0x17c>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	4a32      	ldr	r2, [pc, #200]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001840:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 800184e:	2200      	movs	r2, #0
 8001850:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001854:	482b      	ldr	r0, [pc, #172]	@ (8001904 <MX_GPIO_Init+0x180>)
 8001856:	f002 f929 	bl	8003aac <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001860:	4829      	ldr	r0, [pc, #164]	@ (8001908 <MX_GPIO_Init+0x184>)
 8001862:	f002 f923 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800186c:	4827      	ldr	r0, [pc, #156]	@ (800190c <MX_GPIO_Init+0x188>)
 800186e:	f002 f91d 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001872:	2200      	movs	r2, #0
 8001874:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001878:	4825      	ldr	r0, [pc, #148]	@ (8001910 <MX_GPIO_Init+0x18c>)
 800187a:	f002 f917 	bl	8003aac <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 800187e:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001882:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	481b      	ldr	r0, [pc, #108]	@ (8001904 <MX_GPIO_Init+0x180>)
 8001898:	f001 ff58 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 800189c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4814      	ldr	r0, [pc, #80]	@ (8001908 <MX_GPIO_Init+0x184>)
 80018b6:	f001 ff49 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin SPI2_NSS_Pin QUADSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin;
 80018ba:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	480e      	ldr	r0, [pc, #56]	@ (800190c <MX_GPIO_Init+0x188>)
 80018d4:	f001 ff3a 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 80018d8:	f640 73f7 	movw	r3, #4087	@ 0xff7
 80018dc:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MX_GPIO_Init+0x18c>)
 80018f2:	f001 ff2b 	bl	800374c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	@ 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	58024400 	.word	0x58024400
 8001904:	58021000 	.word	0x58021000
 8001908:	58020800 	.word	0x58020800
 800190c:	58020400 	.word	0x58020400
 8001910:	58020c00 	.word	0x58020c00

08001914 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
		static int i=0;
		static int dir=1;
		static int phase = 1;
		const double step = 0.075;// reference (arbitrary units)
 800191c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001920:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001922:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (htim==&htim1){
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d128      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  i+=1;
 800192e:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001936:	6013      	str	r3, [r2, #0]
		  if(i%ONESEC == TRUE)
 8001938:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800193e:	fb83 1302 	smull	r1, r3, r3, r2
 8001942:	1319      	asrs	r1, r3, #12
 8001944:	17d3      	asrs	r3, r2, #31
 8001946:	1acb      	subs	r3, r1, r3
 8001948:	f242 7110 	movw	r1, #10000	@ 0x2710
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d104      	bne.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  {
			phase = -phase;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	425b      	negs	r3, r3
 800195c:	4a0f      	ldr	r2, [pc, #60]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800195e:	6013      	str	r3, [r2, #0]
		  }
		  ref = phase*step;
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800196c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001970:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001976:	ed83 7b00 	vstr	d7, [r3]
		  ctrl_tmr_expired = TRUE;
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
	  }

}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	3fb33333 	.word	0x3fb33333
 8001990:	24000198 	.word	0x24000198
 8001994:	24000570 	.word	0x24000570
 8001998:	68db8bad 	.word	0x68db8bad
 800199c:	24000000 	.word	0x24000000
 80019a0:	24000528 	.word	0x24000528
 80019a4:	24000524 	.word	0x24000524

080019a8 <control_update>:


static void control_update(double ref)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	ed87 0b00 	vstr	d0, [r7]
	  // output value of the lead filter
	  double out = 0;
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  // sign bit of the command fed to phase input on the h-bridge
	  int phase=0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
	  uint16_t dutycycle=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]

	  out = compute_out(ref) ;
 80019c6:	ed97 0b00 	vldr	d0, [r7]
 80019ca:	f000 f869 	bl	8001aa0 <compute_out>
 80019ce:	ed87 0b04 	vstr	d0, [r7, #16]

	  // set the sign of the move (phase)
	  if(out <0)
 80019d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80019d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d502      	bpl.n	80019e6 <control_update+0x3e>
	  {
		phase = GPIO_PIN_RESET; // reverse direction
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	e001      	b.n	80019ea <control_update+0x42>
	  } else {
		phase = GPIO_PIN_SET; //forward direction
 80019e6:	2301      	movs	r3, #1
 80019e8:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	2101      	movs	r1, #1
 80019f2:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <control_update+0x90>)
 80019f4:	f002 f85a 	bl	8003aac <HAL_GPIO_WritePin>

	  // calculate the dutycycle
	  out = fabs(out); // duty cycle must be positive
 80019f8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019fc:	eeb0 7bc7 	vabs.f64	d7, d7
 8001a00:	ed87 7b04 	vstr	d7, [r7, #16]
	  dutycycle = calc_dutycycle(out,VSS);
 8001a04:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001a30 <control_update+0x88>
 8001a08:	eeb0 1b47 	vmov.f64	d1, d7
 8001a0c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a10:	f000 f81a 	bl	8001a48 <calc_dutycycle>
 8001a14:	4603      	mov	r3, r0
 8001a16:	81fb      	strh	r3, [r7, #14]
	  TIM1->CCR1 = dutycycle; //set the new timer duty cycle
 8001a18:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <control_update+0x94>)
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	6353      	str	r3, [r2, #52]	@ 0x34


	  // reset timer flag
	  ctrl_tmr_expired = FALSE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <control_update+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	f3af 8000 	nop.w
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	3ffccccc 	.word	0x3ffccccc
 8001a38:	58021000 	.word	0x58021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	24000524 	.word	0x24000524
 8001a44:	00000000 	.word	0x00000000

08001a48 <calc_dutycycle>:
	ctrl_tmr_expired = FALSE;
}
*/

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a52:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001a56:	2300      	movs	r3, #0
 8001a58:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001a5a:	ed97 5b02 	vldr	d5, [r7, #8]
 8001a5e:	ed97 6b00 	vldr	d6, [r7]
 8001a62:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a66:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001a98 <calc_dutycycle+0x50>
 8001a6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d902      	bls.n	8001a88 <calc_dutycycle+0x40>
 8001a82:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8001a86:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001a88:	8afb      	ldrh	r3, [r7, #22]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40d76fc0 	.word	0x40d76fc0

08001aa0 <compute_out>:
		sine_vals[i] = sin(i*scale);
	}
}


double compute_out(double ref){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	ed87 0b00 	vstr	d0, [r7]
    const double a[2] = {1.00,-0.7181};
    // lead filter denominator coefficients
    const double b[2]={6.3462,-6.0651};
    double out;
    // compute filter output
    u[0] = ref;
 8001aaa:	4921      	ldr	r1, [pc, #132]	@ (8001b30 <compute_out+0x90>)
 8001aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab0:	e9c1 2300 	strd	r2, r3, [r1]
    y[0] = -a[1]*y[1] +  b[0]*u[0] + b[1]*u[1];
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <compute_out+0x94>)
 8001ab6:	ed93 7b02 	vldr	d7, [r3, #8]
 8001aba:	eeb1 6b47 	vneg.f64	d6, d7
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <compute_out+0x98>)
 8001ac0:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ac4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <compute_out+0x9c>)
 8001aca:	ed93 5b00 	vldr	d5, [r3]
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <compute_out+0x90>)
 8001ad0:	ed93 7b00 	vldr	d7, [r3]
 8001ad4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ad8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <compute_out+0x9c>)
 8001ade:	ed93 5b02 	vldr	d5, [r3, #8]
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <compute_out+0x90>)
 8001ae4:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ae8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <compute_out+0x98>)
 8001af2:	ed83 7b00 	vstr	d7, [r3]
    // update state
    y[1] = y[0];
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <compute_out+0x98>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	490e      	ldr	r1, [pc, #56]	@ (8001b38 <compute_out+0x98>)
 8001afe:	e9c1 2302 	strd	r2, r3, [r1, #8]
    u[1] = u[0];
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <compute_out+0x90>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	4909      	ldr	r1, [pc, #36]	@ (8001b30 <compute_out+0x90>)
 8001b0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    out=y[0];
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <compute_out+0x98>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return(out);
 8001b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b20:	eeb0 0b47 	vmov.f64	d0, d7
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	24000578 	.word	0x24000578
 8001b34:	0800b6e8 	.word	0x0800b6e8
 8001b38:	24000588 	.word	0x24000588
 8001b3c:	0800b6f8 	.word	0x0800b6f8

08001b40 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b46:	463b      	mov	r3, r7
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b52:	f001 f81f 	bl	8002b94 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b56:	2301      	movs	r3, #1
 8001b58:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b62:	231f      	movs	r3, #31
 8001b64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b66:	2387      	movs	r3, #135	@ 0x87
 8001b68:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b82:	463b      	mov	r3, r7
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f83d 	bl	8002c04 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f001 f81a 	bl	8002bc4 <HAL_MPU_Enable>

}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <Error_Handler+0x8>

08001ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_MspInit+0x30>)
 8001bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bb0:	4a08      	ldr	r2, [pc, #32]	@ (8001bd4 <HAL_MspInit+0x30>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_MspInit+0x30>)
 8001bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	58024400 	.word	0x58024400

08001bd8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0b4      	sub	sp, #208	@ 0xd0
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	22c0      	movs	r2, #192	@ 0xc0
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f009 f8dd 	bl	800ada8 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <HAL_HRTIM_MspInit+0x6c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d121      	bne.n	8001c3c <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fa00 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001c1a:	f7ff ffbd 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_HRTIM_MspInit+0x70>)
 8001c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c24:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <HAL_HRTIM_MspInit+0x70>)
 8001c26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_HRTIM_MspInit+0x70>)
 8001c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	37d0      	adds	r7, #208	@ 0xd0
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40017400 	.word	0x40017400
 8001c48:	58024400 	.word	0x58024400

08001c4c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <HAL_HRTIM_MspPostInit+0xac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d13f      	bne.n	8001cee <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_HRTIM_MspPostInit+0xb0>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c74:	4a21      	ldr	r2, [pc, #132]	@ (8001cfc <HAL_HRTIM_MspPostInit+0xb0>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_HRTIM_MspPostInit+0xb0>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_HRTIM_MspPostInit+0xb0>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c92:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_HRTIM_MspPostInit+0xb0>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_HRTIM_MspPostInit+0xb0>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001caa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480e      	ldr	r0, [pc, #56]	@ (8001d00 <HAL_HRTIM_MspPostInit+0xb4>)
 8001cc8:	f001 fd40 	bl	800374c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ccc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001cd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <HAL_HRTIM_MspPostInit+0xb8>)
 8001cea:	f001 fd2f 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	@ 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40017400 	.word	0x40017400
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58020800 	.word	0x58020800
 8001d04:	58020000 	.word	0x58020000

08001d08 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	22c0      	movs	r2, #192	@ 0xc0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f009 f83d 	bl	800ada8 <memset>
  if(hlptim->Instance==LPTIM1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <HAL_LPTIM_MspInit+0xd8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d14e      	bne.n	8001dd6 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001d38:	f04f 0220 	mov.w	r2, #32
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 f960 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001d5a:	f7ff ff1d 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <HAL_LPTIM_MspInit+0xdc>)
 8001d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d64:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <HAL_LPTIM_MspInit+0xdc>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_LPTIM_MspInit+0xdc>)
 8001d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_LPTIM_MspInit+0xdc>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	4a18      	ldr	r2, [pc, #96]	@ (8001de4 <HAL_LPTIM_MspInit+0xdc>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_LPTIM_MspInit+0xdc>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <HAL_LPTIM_MspInit+0xe0>)
 8001dc2:	f001 fcc3 	bl	800374c <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	205d      	movs	r0, #93	@ 0x5d
 8001dcc:	f000 fead 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001dd0:	205d      	movs	r0, #93	@ 0x5d
 8001dd2:	f000 fec4 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	37e8      	adds	r7, #232	@ 0xe8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40002400 	.word	0x40002400
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58020c00 	.word	0x58020c00

08001dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	@ 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a74      	ldr	r2, [pc, #464]	@ (8001fcc <HAL_TIM_Base_MspInit+0x1e0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d117      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dfe:	4b74      	ldr	r3, [pc, #464]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e04:	4a72      	ldr	r2, [pc, #456]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e0e:	4b70      	ldr	r3, [pc, #448]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2019      	movs	r0, #25
 8001e22:	f000 fe82 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e26:	2019      	movs	r0, #25
 8001e28:	f000 fe99 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e2c:	e0c9      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM4)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a68      	ldr	r2, [pc, #416]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x1e8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d117      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e38:	4b65      	ldr	r3, [pc, #404]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3e:	4a64      	ldr	r2, [pc, #400]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e48:	4b61      	ldr	r3, [pc, #388]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201e      	movs	r0, #30
 8001e5c:	f000 fe65 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e60:	201e      	movs	r0, #30
 8001e62:	f000 fe7c 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001e66:	e0ac      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM5)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x1ec>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d117      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e72:	4b57      	ldr	r3, [pc, #348]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e78:	4a55      	ldr	r2, [pc, #340]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e82:	4b53      	ldr	r3, [pc, #332]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2032      	movs	r0, #50	@ 0x32
 8001e96:	f000 fe48 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e9a:	2032      	movs	r0, #50	@ 0x32
 8001e9c:	f000 fe5f 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001ea0:	e08f      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8001fdc <HAL_TIM_Base_MspInit+0x1f0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d117      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001eac:	4b48      	ldr	r3, [pc, #288]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb2:	4a47      	ldr	r2, [pc, #284]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ebc:	4b44      	ldr	r3, [pc, #272]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	202b      	movs	r0, #43	@ 0x2b
 8001ed0:	f000 fe2b 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ed4:	202b      	movs	r0, #43	@ 0x2b
 8001ed6:	f000 fe42 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001eda:	e072      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d117      	bne.n	8001f16 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eec:	4a38      	ldr	r2, [pc, #224]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ef6:	4b36      	ldr	r3, [pc, #216]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	202c      	movs	r0, #44	@ 0x2c
 8001f0a:	f000 fe0e 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f0e:	202c      	movs	r0, #44	@ 0x2c
 8001f10:	f000 fe25 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001f14:	e055      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d117      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f20:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f26:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f30:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	202d      	movs	r0, #45	@ 0x2d
 8001f44:	f000 fdf1 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f48:	202d      	movs	r0, #45	@ 0x2d
 8001f4a:	f000 fe08 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001f4e:	e038      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM15)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x1fc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d117      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2074      	movs	r0, #116	@ 0x74
 8001f7e:	f000 fdd4 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001f82:	2074      	movs	r0, #116	@ 0x74
 8001f84:	f000 fdeb 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001f88:	e01b      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM16)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a17      	ldr	r2, [pc, #92]	@ (8001fec <HAL_TIM_Base_MspInit+0x200>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d116      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x1e4>)
 8001fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2075      	movs	r0, #117	@ 0x75
 8001fb8:	f000 fdb7 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001fbc:	2075      	movs	r0, #117	@ 0x75
 8001fbe:	f000 fdce 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	@ 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40000c00 	.word	0x40000c00
 8001fdc:	40001800 	.word	0x40001800
 8001fe0:	40001c00 	.word	0x40001c00
 8001fe4:	40002000 	.word	0x40002000
 8001fe8:	40014000 	.word	0x40014000
 8001fec:	40014400 	.word	0x40014400

08001ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d117      	bne.n	8002032 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002002:	4b24      	ldr	r3, [pc, #144]	@ (8002094 <HAL_TIM_PWM_MspInit+0xa4>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002008:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_TIM_PWM_MspInit+0xa4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_TIM_PWM_MspInit+0xa4>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	201c      	movs	r0, #28
 8002026:	f000 fd80 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800202a:	201c      	movs	r0, #28
 800202c:	f000 fd97 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002030:	e02b      	b.n	800208a <HAL_TIM_PWM_MspInit+0x9a>
  else if(htim_pwm->Instance==TIM8)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <HAL_TIM_PWM_MspInit+0xa8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d126      	bne.n	800208a <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_TIM_PWM_MspInit+0xa4>)
 800203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002042:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <HAL_TIM_PWM_MspInit+0xa4>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_TIM_PWM_MspInit+0xa4>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	202b      	movs	r0, #43	@ 0x2b
 8002060:	f000 fd63 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002064:	202b      	movs	r0, #43	@ 0x2b
 8002066:	f000 fd7a 	bl	8002b5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	202c      	movs	r0, #44	@ 0x2c
 8002070:	f000 fd5b 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002074:	202c      	movs	r0, #44	@ 0x2c
 8002076:	f000 fd72 	bl	8002b5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	202d      	movs	r0, #45	@ 0x2d
 8002080:	f000 fd53 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002084:	202d      	movs	r0, #45	@ 0x2d
 8002086:	f000 fd6a 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	58024400 	.word	0x58024400
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b092      	sub	sp, #72	@ 0x48
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4aa4      	ldr	r2, [pc, #656]	@ (800234c <HAL_TIM_MspPostInit+0x2b0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d120      	bne.n	8002100 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020be:	4ba4      	ldr	r3, [pc, #656]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c4:	4aa2      	ldr	r2, [pc, #648]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80020dc:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80020e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f6:	4619      	mov	r1, r3
 80020f8:	4896      	ldr	r0, [pc, #600]	@ (8002354 <HAL_TIM_MspPostInit+0x2b8>)
 80020fa:	f001 fb27 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80020fe:	e189      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002108:	d11f      	bne.n	800214a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b91      	ldr	r3, [pc, #580]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002110:	4a8f      	ldr	r2, [pc, #572]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800211a:	4b8d      	ldr	r3, [pc, #564]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002128:	2301      	movs	r3, #1
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002138:	2301      	movs	r3, #1
 800213a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002140:	4619      	mov	r1, r3
 8002142:	4885      	ldr	r0, [pc, #532]	@ (8002358 <HAL_TIM_MspPostInit+0x2bc>)
 8002144:	f001 fb02 	bl	800374c <HAL_GPIO_Init>
}
 8002148:	e164      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a83      	ldr	r2, [pc, #524]	@ (800235c <HAL_TIM_MspPostInit+0x2c0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d13f      	bne.n	80021d4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002154:	4b7e      	ldr	r3, [pc, #504]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215a:	4a7d      	ldr	r2, [pc, #500]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002164:	4b7a      	ldr	r3, [pc, #488]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b77      	ldr	r3, [pc, #476]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	4a75      	ldr	r2, [pc, #468]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002182:	4b73      	ldr	r3, [pc, #460]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8002190:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002194:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021a2:	2302      	movs	r3, #2
 80021a4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021aa:	4619      	mov	r1, r3
 80021ac:	486c      	ldr	r0, [pc, #432]	@ (8002360 <HAL_TIM_MspPostInit+0x2c4>)
 80021ae:	f001 facd 	bl	800374c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021c2:	2302      	movs	r3, #2
 80021c4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021ca:	4619      	mov	r1, r3
 80021cc:	4865      	ldr	r0, [pc, #404]	@ (8002364 <HAL_TIM_MspPostInit+0x2c8>)
 80021ce:	f001 fabd 	bl	800374c <HAL_GPIO_Init>
}
 80021d2:	e11f      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a63      	ldr	r2, [pc, #396]	@ (8002368 <HAL_TIM_MspPostInit+0x2cc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11f      	bne.n	800221e <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b5c      	ldr	r3, [pc, #368]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ee:	4b58      	ldr	r3, [pc, #352]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80021fc:	2306      	movs	r3, #6
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800220c:	2302      	movs	r3, #2
 800220e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002214:	4619      	mov	r1, r3
 8002216:	4850      	ldr	r0, [pc, #320]	@ (8002358 <HAL_TIM_MspPostInit+0x2bc>)
 8002218:	f001 fa98 	bl	800374c <HAL_GPIO_Init>
}
 800221c:	e0fa      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a52      	ldr	r2, [pc, #328]	@ (800236c <HAL_TIM_MspPostInit+0x2d0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d120      	bne.n	800226a <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002228:	4b49      	ldr	r3, [pc, #292]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222e:	4a48      	ldr	r2, [pc, #288]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002238:	4b45      	ldr	r3, [pc, #276]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800224a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002258:	2303      	movs	r3, #3
 800225a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002260:	4619      	mov	r1, r3
 8002262:	4843      	ldr	r0, [pc, #268]	@ (8002370 <HAL_TIM_MspPostInit+0x2d4>)
 8002264:	f001 fa72 	bl	800374c <HAL_GPIO_Init>
}
 8002268:	e0d4      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <HAL_TIM_MspPostInit+0x2d8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d120      	bne.n	80022b6 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227a:	4a35      	ldr	r2, [pc, #212]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002284:	4b32      	ldr	r3, [pc, #200]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80022a4:	2302      	movs	r3, #2
 80022a6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022ac:	4619      	mov	r1, r3
 80022ae:	482d      	ldr	r0, [pc, #180]	@ (8002364 <HAL_TIM_MspPostInit+0x2c8>)
 80022b0:	f001 fa4c 	bl	800374c <HAL_GPIO_Init>
}
 80022b4:	e0ae      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <HAL_TIM_MspPostInit+0x2dc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d11f      	bne.n	8002300 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c6:	4a22      	ldr	r2, [pc, #136]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022de:	2340      	movs	r3, #64	@ 0x40
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80022ee:	2309      	movs	r3, #9
 80022f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022f6:	4619      	mov	r1, r3
 80022f8:	4817      	ldr	r0, [pc, #92]	@ (8002358 <HAL_TIM_MspPostInit+0x2bc>)
 80022fa:	f001 fa27 	bl	800374c <HAL_GPIO_Init>
}
 80022fe:	e089      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_TIM_MspPostInit+0x2e0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d13a      	bne.n	8002380 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002310:	4a0f      	ldr	r2, [pc, #60]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800231a:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_TIM_MspPostInit+0x2b4>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002338:	2309      	movs	r3, #9
 800233a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_TIM_MspPostInit+0x2bc>)
 8002344:	f001 fa02 	bl	800374c <HAL_GPIO_Init>
}
 8002348:	e064      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	58024400 	.word	0x58024400
 8002354:	58021000 	.word	0x58021000
 8002358:	58020000 	.word	0x58020000
 800235c:	40000800 	.word	0x40000800
 8002360:	58020c00 	.word	0x58020c00
 8002364:	58020400 	.word	0x58020400
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40010400 	.word	0x40010400
 8002370:	58020800 	.word	0x58020800
 8002374:	40001800 	.word	0x40001800
 8002378:	40001c00 	.word	0x40001c00
 800237c:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a25      	ldr	r2, [pc, #148]	@ (800241c <HAL_TIM_MspPostInit+0x380>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11f      	bne.n	80023ca <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800238a:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_TIM_MspPostInit+0x384>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002390:	4a23      	ldr	r2, [pc, #140]	@ (8002420 <HAL_TIM_MspPostInit+0x384>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <HAL_TIM_MspPostInit+0x384>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023a8:	2360      	movs	r3, #96	@ 0x60
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80023b8:	2304      	movs	r3, #4
 80023ba:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023c0:	4619      	mov	r1, r3
 80023c2:	4818      	ldr	r0, [pc, #96]	@ (8002424 <HAL_TIM_MspPostInit+0x388>)
 80023c4:	f001 f9c2 	bl	800374c <HAL_GPIO_Init>
}
 80023c8:	e024      	b.n	8002414 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <HAL_TIM_MspPostInit+0x38c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d11f      	bne.n	8002414 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_TIM_MspPostInit+0x384>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023da:	4a11      	ldr	r2, [pc, #68]	@ (8002420 <HAL_TIM_MspPostInit+0x384>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_TIM_MspPostInit+0x384>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002404:	2301      	movs	r3, #1
 8002406:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800240c:	4619      	mov	r1, r3
 800240e:	4807      	ldr	r0, [pc, #28]	@ (800242c <HAL_TIM_MspPostInit+0x390>)
 8002410:	f001 f99c 	bl	800374c <HAL_GPIO_Init>
}
 8002414:	bf00      	nop
 8002416:	3748      	adds	r7, #72	@ 0x48
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40014000 	.word	0x40014000
 8002420:	58024400 	.word	0x58024400
 8002424:	58021000 	.word	0x58021000
 8002428:	40014400 	.word	0x40014400
 800242c:	58020400 	.word	0x58020400

08002430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0ba      	sub	sp, #232	@ 0xe8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	22c0      	movs	r2, #192	@ 0xc0
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f008 fca9 	bl	800ada8 <memset>
  if(huart->Instance==UART4)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2b      	ldr	r2, [pc, #172]	@ (8002508 <HAL_UART_MspInit+0xd8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d14e      	bne.n	80024fe <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002460:	f04f 0202 	mov.w	r2, #2
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fdcc 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002482:	f7ff fb89 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_UART_MspInit+0xdc>)
 8002488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800248c:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <HAL_UART_MspInit+0xdc>)
 800248e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002492:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_UART_MspInit+0xdc>)
 8002498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800249c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_UART_MspInit+0xdc>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	4a18      	ldr	r2, [pc, #96]	@ (800250c <HAL_UART_MspInit+0xdc>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b4:	4b15      	ldr	r3, [pc, #84]	@ (800250c <HAL_UART_MspInit+0xdc>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024dc:	2308      	movs	r3, #8
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4809      	ldr	r0, [pc, #36]	@ (8002510 <HAL_UART_MspInit+0xe0>)
 80024ea:	f001 f92f 	bl	800374c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2034      	movs	r0, #52	@ 0x34
 80024f4:	f000 fb19 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80024f8:	2034      	movs	r0, #52	@ 0x34
 80024fa:	f000 fb30 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	37e8      	adds	r7, #232	@ 0xe8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40004c00 	.word	0x40004c00
 800250c:	58024400 	.word	0x58024400
 8002510:	58020800 	.word	0x58020800

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <NMI_Handler+0x4>

0800251c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <MemManage_Handler+0x4>

0800252c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <UsageFault_Handler+0x4>

0800253c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256a:	f000 f9d7 	bl	800291c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <TIM1_UP_IRQHandler+0x10>)
 800257a:	f005 fdad 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	24000198 	.word	0x24000198

08002588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <TIM2_IRQHandler+0x10>)
 800258e:	f005 fda3 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	240001e4 	.word	0x240001e4

0800259c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <TIM4_IRQHandler+0x10>)
 80025a2:	f005 fd99 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	24000230 	.word	0x24000230

080025b0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025b4:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80025b6:	f005 fd8f 	bl	80080d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80025ba:	4803      	ldr	r0, [pc, #12]	@ (80025c8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80025bc:	f005 fd8c 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	240002c8 	.word	0x240002c8
 80025c8:	24000314 	.word	0x24000314

080025cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025d0:	4803      	ldr	r0, [pc, #12]	@ (80025e0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80025d2:	f005 fd81 	bl	80080d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80025d6:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80025d8:	f005 fd7e 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	240002c8 	.word	0x240002c8
 80025e4:	24000360 	.word	0x24000360

080025e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80025ee:	f005 fd73 	bl	80080d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80025f2:	4803      	ldr	r0, [pc, #12]	@ (8002600 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80025f4:	f005 fd70 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	240002c8 	.word	0x240002c8
 8002600:	240003ac 	.word	0x240003ac

08002604 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <TIM5_IRQHandler+0x10>)
 800260a:	f005 fd65 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2400027c 	.word	0x2400027c

08002618 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <UART4_IRQHandler+0x10>)
 800261e:	f006 fedf 	bl	80093e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24000490 	.word	0x24000490

0800262c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <LPTIM1_IRQHandler+0x10>)
 8002632:	f002 fbed 	bl	8004e10 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000160 	.word	0x24000160

08002640 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <TIM15_IRQHandler+0x10>)
 8002646:	f005 fd47 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	240003f8 	.word	0x240003f8

08002654 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <TIM16_IRQHandler+0x10>)
 800265a:	f005 fd3d 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	24000444 	.word	0x24000444

08002668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <_sbrk+0x5c>)
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <_sbrk+0x60>)
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800267c:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <_sbrk+0x64>)
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <_sbrk+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d207      	bcs.n	80026a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002698:	f008 fb8e 	bl	800adb8 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	e009      	b.n	80026bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <_sbrk+0x64>)
 80026b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	24080000 	.word	0x24080000
 80026c8:	00000400 	.word	0x00000400
 80026cc:	24000598 	.word	0x24000598
 80026d0:	240006e8 	.word	0x240006e8

080026d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026d8:	4b37      	ldr	r3, [pc, #220]	@ (80027b8 <SystemInit+0xe4>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	4a36      	ldr	r2, [pc, #216]	@ (80027b8 <SystemInit+0xe4>)
 80026e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026e8:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <SystemInit+0xe8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d807      	bhi.n	8002704 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <SystemInit+0xe8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 030f 	bic.w	r3, r3, #15
 80026fc:	4a2f      	ldr	r2, [pc, #188]	@ (80027bc <SystemInit+0xe8>)
 80026fe:	f043 0307 	orr.w	r3, r3, #7
 8002702:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <SystemInit+0xec>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <SystemInit+0xec>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <SystemInit+0xec>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002716:	4b2a      	ldr	r3, [pc, #168]	@ (80027c0 <SystemInit+0xec>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4929      	ldr	r1, [pc, #164]	@ (80027c0 <SystemInit+0xec>)
 800271c:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <SystemInit+0xf0>)
 800271e:	4013      	ands	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <SystemInit+0xe8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <SystemInit+0xe8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 030f 	bic.w	r3, r3, #15
 8002736:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <SystemInit+0xe8>)
 8002738:	f043 0307 	orr.w	r3, r3, #7
 800273c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <SystemInit+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002744:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <SystemInit+0xec>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <SystemInit+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <SystemInit+0xec>)
 8002752:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <SystemInit+0xf4>)
 8002754:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002756:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <SystemInit+0xec>)
 8002758:	4a1c      	ldr	r2, [pc, #112]	@ (80027cc <SystemInit+0xf8>)
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800275c:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <SystemInit+0xec>)
 800275e:	4a1c      	ldr	r2, [pc, #112]	@ (80027d0 <SystemInit+0xfc>)
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <SystemInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002768:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <SystemInit+0xec>)
 800276a:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <SystemInit+0xfc>)
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <SystemInit+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <SystemInit+0xec>)
 8002776:	4a16      	ldr	r2, [pc, #88]	@ (80027d0 <SystemInit+0xfc>)
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <SystemInit+0xec>)
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002780:	4b0f      	ldr	r3, [pc, #60]	@ (80027c0 <SystemInit+0xec>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0e      	ldr	r2, [pc, #56]	@ (80027c0 <SystemInit+0xec>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <SystemInit+0xec>)
 800278e:	2200      	movs	r2, #0
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <SystemInit+0x100>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <SystemInit+0x104>)
 8002798:	4013      	ands	r3, r2
 800279a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800279e:	d202      	bcs.n	80027a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <SystemInit+0x108>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <SystemInit+0x10c>)
 80027a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00
 80027bc:	52002000 	.word	0x52002000
 80027c0:	58024400 	.word	0x58024400
 80027c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80027c8:	02020200 	.word	0x02020200
 80027cc:	01ff0000 	.word	0x01ff0000
 80027d0:	01010280 	.word	0x01010280
 80027d4:	5c001000 	.word	0x5c001000
 80027d8:	ffff0000 	.word	0xffff0000
 80027dc:	51008108 	.word	0x51008108
 80027e0:	52004000 	.word	0x52004000

080027e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800281c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027e8:	f7ff ff74 	bl	80026d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ec:	480c      	ldr	r0, [pc, #48]	@ (8002820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ee:	490d      	ldr	r1, [pc, #52]	@ (8002824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002804:	4c0a      	ldr	r4, [pc, #40]	@ (8002830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002812:	f008 fad7 	bl	800adc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002816:	f7fd ff37 	bl	8000688 <main>
  bx  lr
 800281a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800281c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002820:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002824:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002828:	0800b784 	.word	0x0800b784
  ldr r2, =_sbss
 800282c:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002830:	240006e8 	.word	0x240006e8

08002834 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC3_IRQHandler>
	...

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283e:	2003      	movs	r0, #3
 8002840:	f000 f968 	bl	8002b14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002844:	f003 fa10 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <HAL_Init+0x68>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	4913      	ldr	r1, [pc, #76]	@ (80028a4 <HAL_Init+0x6c>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_Init+0x68>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	4a0e      	ldr	r2, [pc, #56]	@ (80028a4 <HAL_Init+0x6c>)
 800286c:	5cd3      	ldrb	r3, [r2, r3]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <HAL_Init+0x70>)
 800287a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800287c:	4a0b      	ldr	r2, [pc, #44]	@ (80028ac <HAL_Init+0x74>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002882:	200f      	movs	r0, #15
 8002884:	f000 f814 	bl	80028b0 <HAL_InitTick>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e002      	b.n	8002898 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002892:	f7ff f987 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	58024400 	.word	0x58024400
 80028a4:	0800b708 	.word	0x0800b708
 80028a8:	24000008 	.word	0x24000008
 80028ac:	24000004 	.word	0x24000004

080028b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_InitTick+0x60>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e021      	b.n	8002908 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <HAL_InitTick+0x64>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_InitTick+0x60>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f94d 	bl	8002b7a <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 f917 	bl	8002b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <HAL_InitTick+0x68>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	24000010 	.word	0x24000010
 8002914:	24000004 	.word	0x24000004
 8002918:	2400000c 	.word	0x2400000c

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	24000010 	.word	0x24000010
 8002940:	2400059c 	.word	0x2400059c

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	2400059c 	.word	0x2400059c

0800295c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <HAL_GetREVID+0x14>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0c1b      	lsrs	r3, r3, #16
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	5c001000 	.word	0x5c001000

08002974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <__NVIC_SetPriorityGrouping+0x40>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00
 80029b8:	05fa0000 	.word	0x05fa0000

080029bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <__NVIC_GetPriorityGrouping+0x18>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 0307 	and.w	r3, r3, #7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0b      	blt.n	8002a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4907      	ldr	r1, [pc, #28]	@ (8002a10 <__NVIC_EnableIRQ+0x38>)
 80029f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	@ (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	@ (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	@ 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f1c3 0307 	rsb	r3, r3, #7
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	bf28      	it	cs
 8002a86:	2304      	movcs	r3, #4
 8002a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d902      	bls.n	8002a98 <NVIC_EncodePriority+0x30>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b03      	subs	r3, #3
 8002a96:	e000      	b.n	8002a9a <NVIC_EncodePriority+0x32>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	4313      	orrs	r3, r2
         );
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae0:	d301      	bcc.n	8002ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b10 <SysTick_Config+0x40>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aee:	210f      	movs	r1, #15
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f7ff ff8e 	bl	8002a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <SysTick_Config+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afe:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <SysTick_Config+0x40>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010

08002b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ff29 	bl	8002974 <__NVIC_SetPriorityGrouping>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff40 	bl	80029bc <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff90 	bl	8002a68 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5f 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff33 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa4 	bl	8002ad0 <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b98:	f3bf 8f5f 	dmb	sy
}
 8002b9c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_MPU_Disable+0x28>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	4a06      	ldr	r2, [pc, #24]	@ (8002bbc <HAL_MPU_Disable+0x28>)
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_MPU_Disable+0x2c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	e000ed90 	.word	0xe000ed90

08002bc4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002bfc <HAL_MPU_Enable+0x38>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <HAL_MPU_Enable+0x3c>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_MPU_Enable+0x3c>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002be2:	f3bf 8f4f 	dsb	sy
}
 8002be6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002be8:	f3bf 8f6f 	isb	sy
}
 8002bec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed90 	.word	0xe000ed90
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	785a      	ldrb	r2, [r3, #1]
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_MPU_ConfigRegion+0x7c>)
 8002c12:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_MPU_ConfigRegion+0x7c>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_MPU_ConfigRegion+0x7c>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c20:	4a17      	ldr	r2, [pc, #92]	@ (8002c80 <HAL_MPU_ConfigRegion+0x7c>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7b1b      	ldrb	r3, [r3, #12]
 8002c2c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7adb      	ldrb	r3, [r3, #11]
 8002c32:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7a9b      	ldrb	r3, [r3, #10]
 8002c3a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7b5b      	ldrb	r3, [r3, #13]
 8002c42:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7b9b      	ldrb	r3, [r3, #14]
 8002c4a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7bdb      	ldrb	r3, [r3, #15]
 8002c52:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7a5b      	ldrb	r3, [r3, #9]
 8002c5a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7a1b      	ldrb	r3, [r3, #8]
 8002c62:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c64:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	7812      	ldrb	r2, [r2, #0]
 8002c6a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c6c:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c6e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c70:	6113      	str	r3, [r2, #16]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed90 	.word	0xe000ed90

08002c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c8c:	f7ff fe5a 	bl	8002944 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e2dc      	b.n	8003256 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d008      	beq.n	8002cba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2280      	movs	r2, #128	@ 0x80
 8002cac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e2cd      	b.n	8003256 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a76      	ldr	r2, [pc, #472]	@ (8002e98 <HAL_DMA_Abort+0x214>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04a      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a74      	ldr	r2, [pc, #464]	@ (8002e9c <HAL_DMA_Abort+0x218>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d045      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a73      	ldr	r2, [pc, #460]	@ (8002ea0 <HAL_DMA_Abort+0x21c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d040      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a71      	ldr	r2, [pc, #452]	@ (8002ea4 <HAL_DMA_Abort+0x220>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d03b      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a70      	ldr	r2, [pc, #448]	@ (8002ea8 <HAL_DMA_Abort+0x224>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d036      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8002eac <HAL_DMA_Abort+0x228>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6d      	ldr	r2, [pc, #436]	@ (8002eb0 <HAL_DMA_Abort+0x22c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d02c      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6b      	ldr	r2, [pc, #428]	@ (8002eb4 <HAL_DMA_Abort+0x230>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d027      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6a      	ldr	r2, [pc, #424]	@ (8002eb8 <HAL_DMA_Abort+0x234>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a68      	ldr	r2, [pc, #416]	@ (8002ebc <HAL_DMA_Abort+0x238>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01d      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a67      	ldr	r2, [pc, #412]	@ (8002ec0 <HAL_DMA_Abort+0x23c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a65      	ldr	r2, [pc, #404]	@ (8002ec4 <HAL_DMA_Abort+0x240>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a64      	ldr	r2, [pc, #400]	@ (8002ec8 <HAL_DMA_Abort+0x244>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a62      	ldr	r2, [pc, #392]	@ (8002ecc <HAL_DMA_Abort+0x248>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a61      	ldr	r2, [pc, #388]	@ (8002ed0 <HAL_DMA_Abort+0x24c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_DMA_Abort+0xd6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5f      	ldr	r2, [pc, #380]	@ (8002ed4 <HAL_DMA_Abort+0x250>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_DMA_Abort+0xda>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_Abort+0xdc>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 021e 	bic.w	r2, r2, #30
 8002d72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e00a      	b.n	8002da2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 020e 	bic.w	r2, r2, #14
 8002d9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3c      	ldr	r2, [pc, #240]	@ (8002e98 <HAL_DMA_Abort+0x214>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d072      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3a      	ldr	r2, [pc, #232]	@ (8002e9c <HAL_DMA_Abort+0x218>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d06d      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a39      	ldr	r2, [pc, #228]	@ (8002ea0 <HAL_DMA_Abort+0x21c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d068      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a37      	ldr	r2, [pc, #220]	@ (8002ea4 <HAL_DMA_Abort+0x220>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d063      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a36      	ldr	r2, [pc, #216]	@ (8002ea8 <HAL_DMA_Abort+0x224>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d05e      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a34      	ldr	r2, [pc, #208]	@ (8002eac <HAL_DMA_Abort+0x228>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d059      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a33      	ldr	r2, [pc, #204]	@ (8002eb0 <HAL_DMA_Abort+0x22c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d054      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a31      	ldr	r2, [pc, #196]	@ (8002eb4 <HAL_DMA_Abort+0x230>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d04f      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a30      	ldr	r2, [pc, #192]	@ (8002eb8 <HAL_DMA_Abort+0x234>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d04a      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2e      	ldr	r2, [pc, #184]	@ (8002ebc <HAL_DMA_Abort+0x238>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d045      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec0 <HAL_DMA_Abort+0x23c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d040      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <HAL_DMA_Abort+0x240>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d03b      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec8 <HAL_DMA_Abort+0x244>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d036      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a28      	ldr	r2, [pc, #160]	@ (8002ecc <HAL_DMA_Abort+0x248>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a27      	ldr	r2, [pc, #156]	@ (8002ed0 <HAL_DMA_Abort+0x24c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02c      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ed4 <HAL_DMA_Abort+0x250>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d027      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a24      	ldr	r2, [pc, #144]	@ (8002ed8 <HAL_DMA_Abort+0x254>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_DMA_Abort+0x258>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01d      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ee0 <HAL_DMA_Abort+0x25c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <HAL_DMA_Abort+0x260>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_DMA_Abort+0x264>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <HAL_DMA_Abort+0x268>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <HAL_DMA_Abort+0x26c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_DMA_Abort+0x20e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_DMA_Abort+0x270>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d132      	bne.n	8002ef8 <HAL_DMA_Abort+0x274>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e031      	b.n	8002efa <HAL_DMA_Abort+0x276>
 8002e96:	bf00      	nop
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
 8002ed8:	58025408 	.word	0x58025408
 8002edc:	5802541c 	.word	0x5802541c
 8002ee0:	58025430 	.word	0x58025430
 8002ee4:	58025444 	.word	0x58025444
 8002ee8:	58025458 	.word	0x58025458
 8002eec:	5802546c 	.word	0x5802546c
 8002ef0:	58025480 	.word	0x58025480
 8002ef4:	58025494 	.word	0x58025494
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6d      	ldr	r2, [pc, #436]	@ (80030c8 <HAL_DMA_Abort+0x444>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d04a      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80030cc <HAL_DMA_Abort+0x448>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d045      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6a      	ldr	r2, [pc, #424]	@ (80030d0 <HAL_DMA_Abort+0x44c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d040      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a68      	ldr	r2, [pc, #416]	@ (80030d4 <HAL_DMA_Abort+0x450>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d03b      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a67      	ldr	r2, [pc, #412]	@ (80030d8 <HAL_DMA_Abort+0x454>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d036      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_DMA_Abort+0x458>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d031      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a64      	ldr	r2, [pc, #400]	@ (80030e0 <HAL_DMA_Abort+0x45c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d02c      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a62      	ldr	r2, [pc, #392]	@ (80030e4 <HAL_DMA_Abort+0x460>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d027      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a61      	ldr	r2, [pc, #388]	@ (80030e8 <HAL_DMA_Abort+0x464>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80030ec <HAL_DMA_Abort+0x468>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01d      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5e      	ldr	r2, [pc, #376]	@ (80030f0 <HAL_DMA_Abort+0x46c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5c      	ldr	r2, [pc, #368]	@ (80030f4 <HAL_DMA_Abort+0x470>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80030f8 <HAL_DMA_Abort+0x474>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a59      	ldr	r2, [pc, #356]	@ (80030fc <HAL_DMA_Abort+0x478>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a58      	ldr	r2, [pc, #352]	@ (8003100 <HAL_DMA_Abort+0x47c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_DMA_Abort+0x32a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a56      	ldr	r2, [pc, #344]	@ (8003104 <HAL_DMA_Abort+0x480>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <HAL_DMA_Abort+0x33c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e007      	b.n	8002fd0 <HAL_DMA_Abort+0x34c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fd0:	e013      	b.n	8002ffa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd2:	f7ff fcb7 	bl	8002944 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d90c      	bls.n	8002ffa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e12d      	b.n	8003256 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2f      	ldr	r2, [pc, #188]	@ (80030c8 <HAL_DMA_Abort+0x444>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2d      	ldr	r2, [pc, #180]	@ (80030cc <HAL_DMA_Abort+0x448>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2c      	ldr	r2, [pc, #176]	@ (80030d0 <HAL_DMA_Abort+0x44c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2a      	ldr	r2, [pc, #168]	@ (80030d4 <HAL_DMA_Abort+0x450>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a29      	ldr	r2, [pc, #164]	@ (80030d8 <HAL_DMA_Abort+0x454>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a27      	ldr	r2, [pc, #156]	@ (80030dc <HAL_DMA_Abort+0x458>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a26      	ldr	r2, [pc, #152]	@ (80030e0 <HAL_DMA_Abort+0x45c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a24      	ldr	r2, [pc, #144]	@ (80030e4 <HAL_DMA_Abort+0x460>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a23      	ldr	r2, [pc, #140]	@ (80030e8 <HAL_DMA_Abort+0x464>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <HAL_DMA_Abort+0x468>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <HAL_DMA_Abort+0x46c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1e      	ldr	r2, [pc, #120]	@ (80030f4 <HAL_DMA_Abort+0x470>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <HAL_DMA_Abort+0x474>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1b      	ldr	r2, [pc, #108]	@ (80030fc <HAL_DMA_Abort+0x478>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1a      	ldr	r2, [pc, #104]	@ (8003100 <HAL_DMA_Abort+0x47c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_Abort+0x422>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a18      	ldr	r2, [pc, #96]	@ (8003104 <HAL_DMA_Abort+0x480>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Abort+0x426>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_DMA_Abort+0x428>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02b      	beq.n	8003108 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	223f      	movs	r2, #63	@ 0x3f
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	e02a      	b.n	800311e <HAL_DMA_Abort+0x49a>
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2201      	movs	r2, #1
 8003118:	409a      	lsls	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a4f      	ldr	r2, [pc, #316]	@ (8003260 <HAL_DMA_Abort+0x5dc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d072      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a4d      	ldr	r2, [pc, #308]	@ (8003264 <HAL_DMA_Abort+0x5e0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d06d      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a4c      	ldr	r2, [pc, #304]	@ (8003268 <HAL_DMA_Abort+0x5e4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d068      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a4a      	ldr	r2, [pc, #296]	@ (800326c <HAL_DMA_Abort+0x5e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d063      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a49      	ldr	r2, [pc, #292]	@ (8003270 <HAL_DMA_Abort+0x5ec>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d05e      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a47      	ldr	r2, [pc, #284]	@ (8003274 <HAL_DMA_Abort+0x5f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d059      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a46      	ldr	r2, [pc, #280]	@ (8003278 <HAL_DMA_Abort+0x5f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d054      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a44      	ldr	r2, [pc, #272]	@ (800327c <HAL_DMA_Abort+0x5f8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04f      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <HAL_DMA_Abort+0x5fc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d04a      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a41      	ldr	r2, [pc, #260]	@ (8003284 <HAL_DMA_Abort+0x600>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d045      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a40      	ldr	r2, [pc, #256]	@ (8003288 <HAL_DMA_Abort+0x604>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d040      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a3e      	ldr	r2, [pc, #248]	@ (800328c <HAL_DMA_Abort+0x608>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d03b      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3d      	ldr	r2, [pc, #244]	@ (8003290 <HAL_DMA_Abort+0x60c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d036      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003294 <HAL_DMA_Abort+0x610>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003298 <HAL_DMA_Abort+0x614>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d02c      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a38      	ldr	r2, [pc, #224]	@ (800329c <HAL_DMA_Abort+0x618>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d027      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <HAL_DMA_Abort+0x61c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <HAL_DMA_Abort+0x620>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <HAL_DMA_Abort+0x624>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <HAL_DMA_Abort+0x628>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a31      	ldr	r2, [pc, #196]	@ (80032b0 <HAL_DMA_Abort+0x62c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <HAL_DMA_Abort+0x630>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2e      	ldr	r2, [pc, #184]	@ (80032b8 <HAL_DMA_Abort+0x634>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Abort+0x58a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <HAL_DMA_Abort+0x638>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Abort+0x58e>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_DMA_Abort+0x590>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003220:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003234:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003238:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003242:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40020010 	.word	0x40020010
 8003264:	40020028 	.word	0x40020028
 8003268:	40020040 	.word	0x40020040
 800326c:	40020058 	.word	0x40020058
 8003270:	40020070 	.word	0x40020070
 8003274:	40020088 	.word	0x40020088
 8003278:	400200a0 	.word	0x400200a0
 800327c:	400200b8 	.word	0x400200b8
 8003280:	40020410 	.word	0x40020410
 8003284:	40020428 	.word	0x40020428
 8003288:	40020440 	.word	0x40020440
 800328c:	40020458 	.word	0x40020458
 8003290:	40020470 	.word	0x40020470
 8003294:	40020488 	.word	0x40020488
 8003298:	400204a0 	.word	0x400204a0
 800329c:	400204b8 	.word	0x400204b8
 80032a0:	58025408 	.word	0x58025408
 80032a4:	5802541c 	.word	0x5802541c
 80032a8:	58025430 	.word	0x58025430
 80032ac:	58025444 	.word	0x58025444
 80032b0:	58025458 	.word	0x58025458
 80032b4:	5802546c 	.word	0x5802546c
 80032b8:	58025480 	.word	0x58025480
 80032bc:	58025494 	.word	0x58025494

080032c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e237      	b.n	8003742 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d004      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2280      	movs	r2, #128	@ 0x80
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e22c      	b.n	8003742 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003460 <HAL_DMA_Abort_IT+0x1a0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04a      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003464 <HAL_DMA_Abort_IT+0x1a4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d045      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a59      	ldr	r2, [pc, #356]	@ (8003468 <HAL_DMA_Abort_IT+0x1a8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d040      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_DMA_Abort_IT+0x1ac>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d03b      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a56      	ldr	r2, [pc, #344]	@ (8003470 <HAL_DMA_Abort_IT+0x1b0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d036      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a55      	ldr	r2, [pc, #340]	@ (8003474 <HAL_DMA_Abort_IT+0x1b4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d031      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a53      	ldr	r2, [pc, #332]	@ (8003478 <HAL_DMA_Abort_IT+0x1b8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02c      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a52      	ldr	r2, [pc, #328]	@ (800347c <HAL_DMA_Abort_IT+0x1bc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d027      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a50      	ldr	r2, [pc, #320]	@ (8003480 <HAL_DMA_Abort_IT+0x1c0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4f      	ldr	r2, [pc, #316]	@ (8003484 <HAL_DMA_Abort_IT+0x1c4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d01d      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a4d      	ldr	r2, [pc, #308]	@ (8003488 <HAL_DMA_Abort_IT+0x1c8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a4c      	ldr	r2, [pc, #304]	@ (800348c <HAL_DMA_Abort_IT+0x1cc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4a      	ldr	r2, [pc, #296]	@ (8003490 <HAL_DMA_Abort_IT+0x1d0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_DMA_Abort_IT+0x1d4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a47      	ldr	r2, [pc, #284]	@ (8003498 <HAL_DMA_Abort_IT+0x1d8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_Abort_IT+0xc8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a46      	ldr	r2, [pc, #280]	@ (800349c <HAL_DMA_Abort_IT+0x1dc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_DMA_Abort_IT+0xcc>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_DMA_Abort_IT+0xce>
 800338c:	2300      	movs	r3, #0
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8086 	beq.w	80034a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2204      	movs	r2, #4
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003460 <HAL_DMA_Abort_IT+0x1a0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04a      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003464 <HAL_DMA_Abort_IT+0x1a4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d045      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003468 <HAL_DMA_Abort_IT+0x1a8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d040      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2b      	ldr	r2, [pc, #172]	@ (800346c <HAL_DMA_Abort_IT+0x1ac>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d03b      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a29      	ldr	r2, [pc, #164]	@ (8003470 <HAL_DMA_Abort_IT+0x1b0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d036      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <HAL_DMA_Abort_IT+0x1b4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d031      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_DMA_Abort_IT+0x1b8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02c      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a25      	ldr	r2, [pc, #148]	@ (800347c <HAL_DMA_Abort_IT+0x1bc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d027      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a23      	ldr	r2, [pc, #140]	@ (8003480 <HAL_DMA_Abort_IT+0x1c0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_DMA_Abort_IT+0x1c4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01d      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a20      	ldr	r2, [pc, #128]	@ (8003488 <HAL_DMA_Abort_IT+0x1c8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_DMA_Abort_IT+0x1cc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <HAL_DMA_Abort_IT+0x1d0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_DMA_Abort_IT+0x1d4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <HAL_DMA_Abort_IT+0x1d8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_DMA_Abort_IT+0x17c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_DMA_Abort_IT+0x1dc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d108      	bne.n	800344e <HAL_DMA_Abort_IT+0x18e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e178      	b.n	8003740 <HAL_DMA_Abort_IT+0x480>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e16f      	b.n	8003740 <HAL_DMA_Abort_IT+0x480>
 8003460:	40020010 	.word	0x40020010
 8003464:	40020028 	.word	0x40020028
 8003468:	40020040 	.word	0x40020040
 800346c:	40020058 	.word	0x40020058
 8003470:	40020070 	.word	0x40020070
 8003474:	40020088 	.word	0x40020088
 8003478:	400200a0 	.word	0x400200a0
 800347c:	400200b8 	.word	0x400200b8
 8003480:	40020410 	.word	0x40020410
 8003484:	40020428 	.word	0x40020428
 8003488:	40020440 	.word	0x40020440
 800348c:	40020458 	.word	0x40020458
 8003490:	40020470 	.word	0x40020470
 8003494:	40020488 	.word	0x40020488
 8003498:	400204a0 	.word	0x400204a0
 800349c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 020e 	bic.w	r2, r2, #14
 80034ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6c      	ldr	r2, [pc, #432]	@ (8003668 <HAL_DMA_Abort_IT+0x3a8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d04a      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6b      	ldr	r2, [pc, #428]	@ (800366c <HAL_DMA_Abort_IT+0x3ac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d045      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a69      	ldr	r2, [pc, #420]	@ (8003670 <HAL_DMA_Abort_IT+0x3b0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d040      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a68      	ldr	r2, [pc, #416]	@ (8003674 <HAL_DMA_Abort_IT+0x3b4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d03b      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a66      	ldr	r2, [pc, #408]	@ (8003678 <HAL_DMA_Abort_IT+0x3b8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d036      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a65      	ldr	r2, [pc, #404]	@ (800367c <HAL_DMA_Abort_IT+0x3bc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d031      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a63      	ldr	r2, [pc, #396]	@ (8003680 <HAL_DMA_Abort_IT+0x3c0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d02c      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a62      	ldr	r2, [pc, #392]	@ (8003684 <HAL_DMA_Abort_IT+0x3c4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d027      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a60      	ldr	r2, [pc, #384]	@ (8003688 <HAL_DMA_Abort_IT+0x3c8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5f      	ldr	r2, [pc, #380]	@ (800368c <HAL_DMA_Abort_IT+0x3cc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01d      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a5d      	ldr	r2, [pc, #372]	@ (8003690 <HAL_DMA_Abort_IT+0x3d0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a5c      	ldr	r2, [pc, #368]	@ (8003694 <HAL_DMA_Abort_IT+0x3d4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a5a      	ldr	r2, [pc, #360]	@ (8003698 <HAL_DMA_Abort_IT+0x3d8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a59      	ldr	r2, [pc, #356]	@ (800369c <HAL_DMA_Abort_IT+0x3dc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a57      	ldr	r2, [pc, #348]	@ (80036a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_DMA_Abort_IT+0x290>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a56      	ldr	r2, [pc, #344]	@ (80036a4 <HAL_DMA_Abort_IT+0x3e4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d108      	bne.n	8003562 <HAL_DMA_Abort_IT+0x2a2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e007      	b.n	8003572 <HAL_DMA_Abort_IT+0x2b2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a3c      	ldr	r2, [pc, #240]	@ (8003668 <HAL_DMA_Abort_IT+0x3a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d072      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a3a      	ldr	r2, [pc, #232]	@ (800366c <HAL_DMA_Abort_IT+0x3ac>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d06d      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a39      	ldr	r2, [pc, #228]	@ (8003670 <HAL_DMA_Abort_IT+0x3b0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d068      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a37      	ldr	r2, [pc, #220]	@ (8003674 <HAL_DMA_Abort_IT+0x3b4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d063      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a36      	ldr	r2, [pc, #216]	@ (8003678 <HAL_DMA_Abort_IT+0x3b8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d05e      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a34      	ldr	r2, [pc, #208]	@ (800367c <HAL_DMA_Abort_IT+0x3bc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d059      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a33      	ldr	r2, [pc, #204]	@ (8003680 <HAL_DMA_Abort_IT+0x3c0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d054      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a31      	ldr	r2, [pc, #196]	@ (8003684 <HAL_DMA_Abort_IT+0x3c4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04f      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a30      	ldr	r2, [pc, #192]	@ (8003688 <HAL_DMA_Abort_IT+0x3c8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d04a      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2e      	ldr	r2, [pc, #184]	@ (800368c <HAL_DMA_Abort_IT+0x3cc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d045      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2d      	ldr	r2, [pc, #180]	@ (8003690 <HAL_DMA_Abort_IT+0x3d0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d040      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003694 <HAL_DMA_Abort_IT+0x3d4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d03b      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003698 <HAL_DMA_Abort_IT+0x3d8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d036      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a28      	ldr	r2, [pc, #160]	@ (800369c <HAL_DMA_Abort_IT+0x3dc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d031      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d02c      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a25      	ldr	r2, [pc, #148]	@ (80036a4 <HAL_DMA_Abort_IT+0x3e4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d027      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a24      	ldr	r2, [pc, #144]	@ (80036a8 <HAL_DMA_Abort_IT+0x3e8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a22      	ldr	r2, [pc, #136]	@ (80036ac <HAL_DMA_Abort_IT+0x3ec>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01d      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a21      	ldr	r2, [pc, #132]	@ (80036b0 <HAL_DMA_Abort_IT+0x3f0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d018      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1f      	ldr	r2, [pc, #124]	@ (80036b4 <HAL_DMA_Abort_IT+0x3f4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1e      	ldr	r2, [pc, #120]	@ (80036b8 <HAL_DMA_Abort_IT+0x3f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1c      	ldr	r2, [pc, #112]	@ (80036bc <HAL_DMA_Abort_IT+0x3fc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1b      	ldr	r2, [pc, #108]	@ (80036c0 <HAL_DMA_Abort_IT+0x400>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_DMA_Abort_IT+0x3a2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <HAL_DMA_Abort_IT+0x404>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d132      	bne.n	80036c8 <HAL_DMA_Abort_IT+0x408>
 8003662:	2301      	movs	r3, #1
 8003664:	e031      	b.n	80036ca <HAL_DMA_Abort_IT+0x40a>
 8003666:	bf00      	nop
 8003668:	40020010 	.word	0x40020010
 800366c:	40020028 	.word	0x40020028
 8003670:	40020040 	.word	0x40020040
 8003674:	40020058 	.word	0x40020058
 8003678:	40020070 	.word	0x40020070
 800367c:	40020088 	.word	0x40020088
 8003680:	400200a0 	.word	0x400200a0
 8003684:	400200b8 	.word	0x400200b8
 8003688:	40020410 	.word	0x40020410
 800368c:	40020428 	.word	0x40020428
 8003690:	40020440 	.word	0x40020440
 8003694:	40020458 	.word	0x40020458
 8003698:	40020470 	.word	0x40020470
 800369c:	40020488 	.word	0x40020488
 80036a0:	400204a0 	.word	0x400204a0
 80036a4:	400204b8 	.word	0x400204b8
 80036a8:	58025408 	.word	0x58025408
 80036ac:	5802541c 	.word	0x5802541c
 80036b0:	58025430 	.word	0x58025430
 80036b4:	58025444 	.word	0x58025444
 80036b8:	58025458 	.word	0x58025458
 80036bc:	5802546c 	.word	0x5802546c
 80036c0:	58025480 	.word	0x58025480
 80036c4:	58025494 	.word	0x58025494
 80036c8:	2300      	movs	r3, #0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d028      	beq.n	8003720 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2201      	movs	r2, #1
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003714:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800371e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	@ 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800375a:	4b89      	ldr	r3, [pc, #548]	@ (8003980 <HAL_GPIO_Init+0x234>)
 800375c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800375e:	e194      	b.n	8003a8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8186 	beq.w	8003a84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d005      	beq.n	8003790 <HAL_GPIO_Init+0x44>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d130      	bne.n	80037f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c6:	2201      	movs	r2, #1
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 0201 	and.w	r2, r3, #1
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d017      	beq.n	800382e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d123      	bne.n	8003882 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	08da      	lsrs	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3208      	adds	r2, #8
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0203 	and.w	r2, r3, #3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80e0 	beq.w	8003a84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003984 <HAL_GPIO_Init+0x238>)
 80038c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003984 <HAL_GPIO_Init+0x238>)
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80038d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003984 <HAL_GPIO_Init+0x238>)
 80038d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e2:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <HAL_GPIO_Init+0x23c>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a20      	ldr	r2, [pc, #128]	@ (800398c <HAL_GPIO_Init+0x240>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d052      	beq.n	80039b4 <HAL_GPIO_Init+0x268>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <HAL_GPIO_Init+0x244>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_GPIO_Init+0x22e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <HAL_GPIO_Init+0x248>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02b      	beq.n	8003976 <HAL_GPIO_Init+0x22a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_GPIO_Init+0x24c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d025      	beq.n	8003972 <HAL_GPIO_Init+0x226>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <HAL_GPIO_Init+0x250>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <HAL_GPIO_Init+0x222>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	@ (80039a0 <HAL_GPIO_Init+0x254>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d019      	beq.n	800396a <HAL_GPIO_Init+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_GPIO_Init+0x258>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_GPIO_Init+0x21a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <HAL_GPIO_Init+0x25c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00d      	beq.n	8003962 <HAL_GPIO_Init+0x216>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <HAL_GPIO_Init+0x260>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <HAL_GPIO_Init+0x212>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a17      	ldr	r2, [pc, #92]	@ (80039b0 <HAL_GPIO_Init+0x264>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_GPIO_Init+0x20e>
 8003956:	2309      	movs	r3, #9
 8003958:	e02d      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800395a:	230a      	movs	r3, #10
 800395c:	e02b      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800395e:	2308      	movs	r3, #8
 8003960:	e029      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003962:	2307      	movs	r3, #7
 8003964:	e027      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003966:	2306      	movs	r3, #6
 8003968:	e025      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800396a:	2305      	movs	r3, #5
 800396c:	e023      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800396e:	2304      	movs	r3, #4
 8003970:	e021      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003972:	2303      	movs	r3, #3
 8003974:	e01f      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003976:	2302      	movs	r3, #2
 8003978:	e01d      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800397a:	2301      	movs	r3, #1
 800397c:	e01b      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800397e:	bf00      	nop
 8003980:	58000080 	.word	0x58000080
 8003984:	58024400 	.word	0x58024400
 8003988:	58000400 	.word	0x58000400
 800398c:	58020000 	.word	0x58020000
 8003990:	58020400 	.word	0x58020400
 8003994:	58020800 	.word	0x58020800
 8003998:	58020c00 	.word	0x58020c00
 800399c:	58021000 	.word	0x58021000
 80039a0:	58021400 	.word	0x58021400
 80039a4:	58021800 	.word	0x58021800
 80039a8:	58021c00 	.word	0x58021c00
 80039ac:	58022000 	.word	0x58022000
 80039b0:	58022400 	.word	0x58022400
 80039b4:	2300      	movs	r3, #0
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	f002 0203 	and.w	r2, r2, #3
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	4093      	lsls	r3, r2
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c6:	4938      	ldr	r1, [pc, #224]	@ (8003aa8 <HAL_GPIO_Init+0x35c>)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f ae63 	bne.w	8003760 <HAL_GPIO_Init+0x14>
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	@ 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	58000400 	.word	0x58000400

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ac8:	e003      	b.n	8003ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	041a      	lsls	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0bd      	b.n	8003c6e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d031      	beq.n	8003b9a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8003c78 <HAL_HRTIM_Init+0x198>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10e      	bne.n	8003b5e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003b40:	4b4e      	ldr	r3, [pc, #312]	@ (8003c7c <HAL_HRTIM_Init+0x19c>)
 8003b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b46:	4a4d      	ldr	r2, [pc, #308]	@ (8003c7c <HAL_HRTIM_Init+0x19c>)
 8003b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b50:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_HRTIM_Init+0x19c>)
 8003b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003b6c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b82:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe f81c 	bl	8001bd8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d012      	beq.n	8003bd2 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bba:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
 8003be6:	e03e      	b.n	8003c66 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003be8:	7dfa      	ldrb	r2, [r7, #23]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003bfc:	7dfa      	ldrb	r2, [r7, #23]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	331c      	adds	r3, #28
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003c10:	7dfa      	ldrb	r2, [r7, #23]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3320      	adds	r3, #32
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003c24:	7dfa      	ldrb	r2, [r7, #23]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	3324      	adds	r3, #36	@ 0x24
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003c38:	7dfa      	ldrb	r2, [r7, #23]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	3328      	adds	r3, #40	@ 0x28
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003c4c:	7dfa      	ldrb	r2, [r7, #23]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3330      	adds	r3, #48	@ 0x30
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	3301      	adds	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d9bd      	bls.n	8003be8 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40017400 	.word	0x40017400
 8003c7c:	58024400 	.word	0x58024400

08003c80 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d101      	bne.n	8003c9c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e015      	b.n	8003cc8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d104      	bne.n	8003cb4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa88 	bl	80041c2 <HRTIM_MasterBase_Config>
 8003cb2:	e004      	b.n	8003cbe <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fab1 	bl	8004220 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d101      	bne.n	8003cec <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e01c      	b.n	8003d26 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_HRTIM_EventConfig+0x2a>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e015      	b.n	8003d26 <HAL_HRTIM_EventConfig+0x56>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fd44 	bl	800479c <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d101      	bne.n	8003d48 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
 8003d46:	e025      	b.n	8003d94 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_HRTIM_EventPrescalerConfig+0x28>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e01e      	b.n	8003d94 <HAL_HRTIM_EventPrescalerConfig+0x66>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8003d6e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d101      	bne.n	8003dbc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
 8003dba:	e05f      	b.n	8003e7c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e058      	b.n	8003e7c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d104      	bne.n	8003dea <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fa5c 	bl	80042a0 <HRTIM_MasterWaveform_Config>
 8003de8:	e004      	b.n	8003df4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fabc 	bl	800436c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4403      	add	r3, r0
 8003e06:	3320      	adds	r3, #32
 8003e08:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4403      	add	r3, r0
 8003e1c:	3324      	adds	r3, #36	@ 0x24
 8003e1e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6899      	ldr	r1, [r3, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4403      	add	r3, r0
 8003e32:	3328      	adds	r3, #40	@ 0x28
 8003e34:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4403      	add	r3, r0
 8003e48:	332c      	adds	r3, #44	@ 0x2c
 8003e4a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6919      	ldr	r1, [r3, #16]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4403      	add	r3, r0
 8003e5e:	3330      	adds	r3, #48	@ 0x30
 8003e60:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fec1 	bl	8004bec <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e157      	b.n	8004152 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e150      	b.n	8004152 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d140      	bne.n	8003f48 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	2b07      	cmp	r3, #7
 8003ecc:	d82a      	bhi.n	8003f24 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003ece:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f25 	.word	0x08003f25
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f25 	.word	0x08003f25
 8003ee8:	08003f25 	.word	0x08003f25
 8003eec:	08003f25 	.word	0x08003f25
 8003ef0:	08003f19 	.word	0x08003f19
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	61da      	str	r2, [r3, #28]
        break;
 8003efe:	e01a      	b.n	8003f36 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8003f0a:	e014      	b.n	8003f36 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8003f16:	e00e      	b.n	8003f36 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003f22:	e008      	b.n	8003f36 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2207      	movs	r2, #7
 8003f28:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8003f34:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b07      	cmp	r3, #7
 8003f40:	f040 80fe 	bne.w	8004140 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e104      	b.n	8004152 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	2b07      	cmp	r3, #7
 8003f4e:	f200 80e3 	bhi.w	8004118 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f79 	.word	0x08003f79
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08004119 	.word	0x08004119
 8003f64:	08004049 	.word	0x08004049
 8003f68:	08004119 	.word	0x08004119
 8003f6c:	08004119 	.word	0x08004119
 8003f70:	08004119 	.word	0x08004119
 8003f74:	0800405d 	.word	0x0800405d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	01db      	lsls	r3, r3, #7
 8003f84:	440b      	add	r3, r1
 8003f86:	339c      	adds	r3, #156	@ 0x9c
 8003f88:	601a      	str	r2, [r3, #0]
        break;
 8003f8a:	e0d1      	b.n	8004130 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	440b      	add	r3, r1
 8003f9a:	33a4      	adds	r3, #164	@ 0xa4
 8003f9c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d03f      	beq.n	8004026 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3301      	adds	r3, #1
 8003fae:	01db      	lsls	r3, r3, #7
 8003fb0:	4413      	add	r3, r2
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	6811      	ldr	r1, [r2, #0]
 8003fb8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	01db      	lsls	r3, r3, #7
 8003fc2:	440b      	add	r3, r1
 8003fc4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	01db      	lsls	r3, r3, #7
 8003fd0:	4413      	add	r3, r2
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	6809      	ldr	r1, [r1, #0]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	440b      	add	r3, r1
 8003fe6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff0:	d109      	bne.n	8004006 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	01db      	lsls	r3, r3, #7
 8003ffe:	440b      	add	r3, r1
 8004000:	339c      	adds	r3, #156	@ 0x9c
 8004002:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8004004:	e091      	b.n	800412a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800400e:	f040 808c 	bne.w	800412a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	01db      	lsls	r3, r3, #7
 800401e:	440b      	add	r3, r1
 8004020:	33a8      	adds	r3, #168	@ 0xa8
 8004022:	601a      	str	r2, [r3, #0]
         break;
 8004024:	e081      	b.n	800412a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3301      	adds	r3, #1
 800402e:	01db      	lsls	r3, r3, #7
 8004030:	4413      	add	r3, r2
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	6811      	ldr	r1, [r2, #0]
 8004038:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3301      	adds	r3, #1
 8004040:	01db      	lsls	r3, r3, #7
 8004042:	440b      	add	r3, r1
 8004044:	601a      	str	r2, [r3, #0]
         break;
 8004046:	e070      	b.n	800412a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	01db      	lsls	r3, r3, #7
 8004054:	440b      	add	r3, r1
 8004056:	33a8      	adds	r3, #168	@ 0xa8
 8004058:	601a      	str	r2, [r3, #0]
        break;
 800405a:	e069      	b.n	8004130 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	01db      	lsls	r3, r3, #7
 8004068:	440b      	add	r3, r1
 800406a:	33ac      	adds	r3, #172	@ 0xac
 800406c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03f      	beq.n	80040f6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	01db      	lsls	r3, r3, #7
 8004080:	4413      	add	r3, r2
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3301      	adds	r3, #1
 8004090:	01db      	lsls	r3, r3, #7
 8004092:	440b      	add	r3, r1
 8004094:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3301      	adds	r3, #1
 800409e:	01db      	lsls	r3, r3, #7
 80040a0:	4413      	add	r3, r2
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	6809      	ldr	r1, [r1, #0]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3301      	adds	r3, #1
 80040b4:	01db      	lsls	r3, r3, #7
 80040b6:	440b      	add	r3, r1
 80040b8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c2:	d109      	bne.n	80040d8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	01db      	lsls	r3, r3, #7
 80040d0:	440b      	add	r3, r1
 80040d2:	339c      	adds	r3, #156	@ 0x9c
 80040d4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80040d6:	e02a      	b.n	800412e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040e0:	d125      	bne.n	800412e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	440b      	add	r3, r1
 80040f0:	33a8      	adds	r3, #168	@ 0xa8
 80040f2:	601a      	str	r2, [r3, #0]
         break;
 80040f4:	e01b      	b.n	800412e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3301      	adds	r3, #1
 80040fe:	01db      	lsls	r3, r3, #7
 8004100:	4413      	add	r3, r2
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	440b      	add	r3, r1
 8004114:	601a      	str	r2, [r3, #0]
         break;
 8004116:	e00a      	b.n	800412e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2207      	movs	r2, #7
 800411c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8004128:	e002      	b.n	8004130 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800412a:	bf00      	nop
 800412c:	e000      	b.n	8004130 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800412e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b07      	cmp	r3, #7
 800413a:	d101      	bne.n	8004140 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e008      	b.n	8004152 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d101      	bne.n	800417e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
 800417c:	e01d      	b.n	80041ba <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004188:	2302      	movs	r3, #2
 800418a:	e016      	b.n	80041ba <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fa22 	bl	80045ec <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f023 0318 	bic.w	r3, r3, #24
 80041ec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	6852      	ldr	r2, [r2, #4]
 8004212:	619a      	str	r2, [r3, #24]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3301      	adds	r3, #1
 8004234:	01db      	lsls	r3, r3, #7
 8004236:	4413      	add	r3, r2
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0318 	bic.w	r3, r3, #24
 8004254:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3301      	adds	r3, #1
 8004268:	01db      	lsls	r3, r3, #7
 800426a:	4413      	add	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	440b      	add	r3, r1
 800427e:	3394      	adds	r3, #148	@ 0x94
 8004280:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	01db      	lsls	r3, r3, #7
 800428e:	440b      	add	r3, r1
 8004290:	3398      	adds	r3, #152	@ 0x98
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0320 	bic.w	r3, r3, #32
 80042c2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042d4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042e6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042f8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800430a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800431c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004330:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004342:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4313      	orrs	r3, r2
 800434c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800436c:	b480      	push	{r7}
 800436e:	b08b      	sub	sp, #44	@ 0x2c
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3301      	adds	r3, #1
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	6811      	ldr	r1, [r2, #0]
 800438a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	01db      	lsls	r3, r3, #7
 8004394:	440b      	add	r3, r1
 8004396:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	3301      	adds	r3, #1
 80043a0:	01db      	lsls	r3, r3, #7
 80043a2:	4413      	add	r3, r2
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	01db      	lsls	r3, r3, #7
 80043b0:	4413      	add	r3, r2
 80043b2:	33e8      	adds	r3, #232	@ 0xe8
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	4413      	add	r3, r2
 80043c2:	33e4      	adds	r3, #228	@ 0xe4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80043d0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	f023 0320 	bic.w	r3, r3, #32
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e0:	4313      	orrs	r3, r2
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f2:	4313      	orrs	r3, r2
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004404:	4313      	orrs	r3, r2
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	4313      	orrs	r3, r2
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	4313      	orrs	r3, r2
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443a:	4313      	orrs	r3, r2
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444e:	d103      	bne.n	8004458 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004466:	4313      	orrs	r3, r2
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004478:	4313      	orrs	r3, r2
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448a:	4313      	orrs	r3, r2
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f023 031f 	bic.w	r3, r3, #31
 8004494:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044aa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d4:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80044d8:	d004      	beq.n	80044e4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044de:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80044e2:	d103      	bne.n	80044ec <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d108      	bne.n	80044fe <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80044f2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004502:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d843      	bhi.n	8004592 <HRTIM_TimingUnitWaveform_Config+0x226>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004525 	.word	0x08004525
 8004514:	0800453b 	.word	0x0800453b
 8004518:	08004551 	.word	0x08004551
 800451c:	08004567 	.word	0x08004567
 8004520:	0800457d 	.word	0x0800457d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800452a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
      break;
 8004538:	e02c      	b.n	8004594 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004540:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	4313      	orrs	r3, r2
 800454c:	61fb      	str	r3, [r7, #28]
      break;
 800454e:	e021      	b.n	8004594 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004556:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	4313      	orrs	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]
      break;
 8004564:	e016      	b.n	8004594 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800456c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	61fb      	str	r3, [r7, #28]
      break;
 800457a:	e00b      	b.n	8004594 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004582:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	015b      	lsls	r3, r3, #5
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	4313      	orrs	r3, r2
 800458e:	61fb      	str	r3, [r7, #28]
      break;
 8004590:	e000      	b.n	8004594 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004592:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3301      	adds	r3, #1
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	4413      	add	r3, r2
 80045a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	01db      	lsls	r3, r3, #7
 80045ac:	4413      	add	r3, r2
 80045ae:	33e8      	adds	r3, #232	@ 0xe8
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	01db      	lsls	r3, r3, #7
 80045bc:	4413      	add	r3, r2
 80045be:	33e4      	adds	r3, #228	@ 0xe4
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	01db      	lsls	r3, r3, #7
 80045cc:	4413      	add	r3, r2
 80045ce:	33d4      	adds	r3, #212	@ 0xd4
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80045de:	bf00      	nop
 80045e0:	372c      	adds	r7, #44	@ 0x2c
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop

080045ec <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	@ 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	01db      	lsls	r3, r3, #7
 8004606:	4413      	add	r3, r2
 8004608:	33e4      	adds	r3, #228	@ 0xe4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	01db      	lsls	r3, r3, #7
 8004616:	4413      	add	r3, r2
 8004618:	33b8      	adds	r3, #184	@ 0xb8
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004624:	d04d      	beq.n	80046c2 <HRTIM_OutputConfig+0xd6>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462c:	d85e      	bhi.n	80046ec <HRTIM_OutputConfig+0x100>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004634:	d032      	beq.n	800469c <HRTIM_OutputConfig+0xb0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463c:	d856      	bhi.n	80046ec <HRTIM_OutputConfig+0x100>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b80      	cmp	r3, #128	@ 0x80
 8004642:	d03e      	beq.n	80046c2 <HRTIM_OutputConfig+0xd6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b80      	cmp	r3, #128	@ 0x80
 8004648:	d850      	bhi.n	80046ec <HRTIM_OutputConfig+0x100>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b40      	cmp	r3, #64	@ 0x40
 800464e:	d025      	beq.n	800469c <HRTIM_OutputConfig+0xb0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b40      	cmp	r3, #64	@ 0x40
 8004654:	d84a      	bhi.n	80046ec <HRTIM_OutputConfig+0x100>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d01f      	beq.n	800469c <HRTIM_OutputConfig+0xb0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d044      	beq.n	80046ec <HRTIM_OutputConfig+0x100>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b20      	cmp	r3, #32
 8004666:	d841      	bhi.n	80046ec <HRTIM_OutputConfig+0x100>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d33e      	bcc.n	80046ec <HRTIM_OutputConfig+0x100>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3b02      	subs	r3, #2
 8004672:	2201      	movs	r2, #1
 8004674:	409a      	lsls	r2, r3
 8004676:	4b48      	ldr	r3, [pc, #288]	@ (8004798 <HRTIM_OutputConfig+0x1ac>)
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2300      	moveq	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11c      	bne.n	80046c2 <HRTIM_OutputConfig+0xd6>
 8004688:	f244 0304 	movw	r3, #16388	@ 0x4004
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d027      	beq.n	80046ec <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	440b      	add	r3, r1
 80046aa:	33bc      	adds	r3, #188	@ 0xbc
 80046ac:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	01db      	lsls	r3, r3, #7
 80046ba:	440b      	add	r3, r1
 80046bc:	33c0      	adds	r3, #192	@ 0xc0
 80046be:	601a      	str	r2, [r3, #0]
      break;
 80046c0:	e015      	b.n	80046ee <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	01db      	lsls	r3, r3, #7
 80046ce:	440b      	add	r3, r1
 80046d0:	33c4      	adds	r3, #196	@ 0xc4
 80046d2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	440b      	add	r3, r1
 80046e2:	33c8      	adds	r3, #200	@ 0xc8
 80046e4:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80046e6:	2310      	movs	r3, #16
 80046e8:	61bb      	str	r3, [r7, #24]
      break;
 80046ea:	e000      	b.n	80046ee <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 80046ec:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80046ee:	22fe      	movs	r2, #254	@ 0xfe
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	4313      	orrs	r3, r2
 800470c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	4313      	orrs	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	4313      	orrs	r3, r2
 800472c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	4313      	orrs	r3, r2
 800473c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	4313      	orrs	r3, r2
 800474c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d111      	bne.n	800477a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	33e4      	adds	r3, #228	@ 0xe4
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	@ 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40000041 	.word	0x40000041

0800479c <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	@ 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80047b0:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 80047ba:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 80047c4:	617b      	str	r3, [r7, #20]

  switch (Event)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b0a      	cmp	r3, #10
 80047ca:	f200 8208 	bhi.w	8004bde <HRTIM_EventConfig+0x442>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <HRTIM_EventConfig+0x38>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004801 	.word	0x08004801
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004877 	.word	0x08004877
 80047e0:	080048d3 	.word	0x080048d3
 80047e4:	08004931 	.word	0x08004931
 80047e8:	0800498f 	.word	0x0800498f
 80047ec:	080049ed 	.word	0x080049ed
 80047f0:	08004a4b 	.word	0x08004a4b
 80047f4:	08004aaf 	.word	0x08004aaf
 80047f8:	08004b13 	.word	0x08004b13
 80047fc:	08004b79 	.word	0x08004b79
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2200      	movs	r2, #0
 8004806:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800481e:	e1df      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004826:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	4313      	orrs	r3, r2
 8004834:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0318 	and.w	r3, r3, #24
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	4313      	orrs	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	4313      	orrs	r3, r2
 8004868:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004874:	e1b4      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 800487c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	019b      	lsls	r3, r3, #6
 8004884:	b2db      	uxtb	r3, r3
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	4313      	orrs	r3, r2
 800488a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	4313      	orrs	r3, r2
 800489a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	019b      	lsls	r3, r3, #6
 80048bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80048d0:	e186      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048d8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	031b      	lsls	r3, r3, #12
 80048e0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	031b      	lsls	r3, r3, #12
 80048f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	031b      	lsls	r3, r3, #12
 8004900:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	4313      	orrs	r3, r2
 8004908:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800492e:	e157      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8004936:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	049b      	lsls	r3, r3, #18
 800493e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	4313      	orrs	r3, r2
 8004946:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	049b      	lsls	r3, r3, #18
 800494e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	049b      	lsls	r3, r3, #18
 800495e:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	4313      	orrs	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	049b      	lsls	r3, r3, #18
 8004978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	4313      	orrs	r3, r2
 8004980:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800498c:	e128      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004994:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	061b      	lsls	r3, r3, #24
 80049ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80049ea:	e0f9      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f023 031f 	bic.w	r3, r3, #31
 80049f2:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0318 	and.w	r3, r3, #24
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 030f 	bic.w	r3, r3, #15
 8004a24:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004a48:	e0ca      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8004a50:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	019b      	lsls	r3, r3, #6
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8004a86:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004aac:	e098      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8004ab4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	031b      	lsls	r3, r3, #12
 8004abc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	031b      	lsls	r3, r3, #12
 8004acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	031b      	lsls	r3, r3, #12
 8004adc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aec:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	031b      	lsls	r3, r3, #12
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004b10:	e066      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8004b18:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	049b      	lsls	r3, r3, #18
 8004b20:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	049b      	lsls	r3, r3, #18
 8004b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	049b      	lsls	r3, r3, #18
 8004b40:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8004b50:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	049b      	lsls	r3, r3, #18
 8004b58:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004b76:	e033      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8004b7e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004bb6:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004bdc:	e000      	b.n	8004be0 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8004bde:	bf00      	nop
  }
}
 8004be0:	bf00      	nop
 8004be2:	3724      	adds	r7, #36	@ 0x24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	d851      	bhi.n	8004ca0 <HRTIM_ForceRegistersUpdate+0xb4>
 8004bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004c04 <HRTIM_ForceRegistersUpdate+0x18>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c49 	.word	0x08004c49
 8004c0c:	08004c5f 	.word	0x08004c5f
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004c8b 	.word	0x08004c8b
 8004c18:	08004c1d 	.word	0x08004c1d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c30:	e037      	b.n	8004ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0202 	orr.w	r2, r2, #2
 8004c42:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c46:	e02c      	b.n	8004ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0204 	orr.w	r2, r2, #4
 8004c58:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c5c:	e021      	b.n	8004ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c72:	e016      	b.n	8004ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0210 	orr.w	r2, r2, #16
 8004c84:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c88:	e00b      	b.n	8004ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0220 	orr.w	r2, r2, #32
 8004c9a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c9e:	e000      	b.n	8004ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004ca0:	bf00      	nop
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e097      	b.n	8004df2 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fd f813 	bl	8001d08 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d004      	beq.n	8004d04 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d02:	d103      	bne.n	8004d0c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 031e 	bic.w	r3, r3, #30
 8004d0a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4b38      	ldr	r3, [pc, #224]	@ (8004dfc <HAL_LPTIM_Init+0x14c>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4b37      	ldr	r3, [pc, #220]	@ (8004e00 <HAL_LPTIM_Init+0x150>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d30:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004d36:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004d3c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004d42:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d004      	beq.n	8004d74 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d72:	d107      	bne.n	8004d84 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00a      	beq.n	8004da6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d98:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004d9e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <HAL_LPTIM_Init+0x154>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_LPTIM_Init+0x112>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a12      	ldr	r2, [pc, #72]	@ (8004e08 <HAL_LPTIM_Init+0x158>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dd2:	e009      	b.n	8004de8 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004e0c <HAL_LPTIM_Init+0x15c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d104      	bne.n	8004de8 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	ffff1f3f 	.word	0xffff1f3f
 8004e00:	ff19f1fe 	.word	0xff19f1fe
 8004e04:	40002400 	.word	0x40002400
 8004e08:	58002400 	.word	0x58002400
 8004e0c:	58002800 	.word	0x58002800

08004e10 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10d      	bne.n	8004e42 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f882 	bl	8004f46 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d10d      	bne.n	8004e6c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d106      	bne.n	8004e6c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2202      	movs	r2, #2
 8004e64:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f877 	bl	8004f5a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d10d      	bne.n	8004e96 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d106      	bne.n	8004e96 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f86c 	bl	8004f6e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d106      	bne.n	8004ec0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f861 	bl	8004f82 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d10d      	bne.n	8004eea <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d106      	bne.n	8004eea <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f856 	bl	8004f96 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d10d      	bne.n	8004f14 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d106      	bne.n	8004f14 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f84b 	bl	8004faa <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d10d      	bne.n	8004f3e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b40      	cmp	r3, #64	@ 0x40
 8004f2e:	d106      	bne.n	8004f3e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2240      	movs	r2, #64	@ 0x40
 8004f36:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f840 	bl	8004fbe <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004fdc:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <HAL_PWREx_ConfigSupply+0x70>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d00a      	beq.n	8004ffe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fe8:	4b16      	ldr	r3, [pc, #88]	@ (8005044 <HAL_PWREx_ConfigSupply+0x70>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01f      	b.n	800503a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e01d      	b.n	800503a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_PWREx_ConfigSupply+0x70>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 0207 	bic.w	r2, r3, #7
 8005006:	490f      	ldr	r1, [pc, #60]	@ (8005044 <HAL_PWREx_ConfigSupply+0x70>)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4313      	orrs	r3, r2
 800500c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800500e:	f7fd fc99 	bl	8002944 <HAL_GetTick>
 8005012:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005014:	e009      	b.n	800502a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005016:	f7fd fc95 	bl	8002944 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005024:	d901      	bls.n	800502a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e007      	b.n	800503a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_PWREx_ConfigSupply+0x70>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005036:	d1ee      	bne.n	8005016 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	58024800 	.word	0x58024800

08005048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	@ 0x30
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f000 bc48 	b.w	80058ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8088 	beq.w	800517a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800506a:	4b99      	ldr	r3, [pc, #612]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005074:	4b96      	ldr	r3, [pc, #600]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	2b10      	cmp	r3, #16
 800507e:	d007      	beq.n	8005090 <HAL_RCC_OscConfig+0x48>
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	2b18      	cmp	r3, #24
 8005084:	d111      	bne.n	80050aa <HAL_RCC_OscConfig+0x62>
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d10c      	bne.n	80050aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	4b8f      	ldr	r3, [pc, #572]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d06d      	beq.n	8005178 <HAL_RCC_OscConfig+0x130>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d169      	bne.n	8005178 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f000 bc21 	b.w	80058ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_OscConfig+0x7a>
 80050b4:	4b86      	ldr	r3, [pc, #536]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a85      	ldr	r2, [pc, #532]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e02e      	b.n	8005120 <HAL_RCC_OscConfig+0xd8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x9c>
 80050ca:	4b81      	ldr	r3, [pc, #516]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a80      	ldr	r2, [pc, #512]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	4b7e      	ldr	r3, [pc, #504]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a7d      	ldr	r2, [pc, #500]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e01d      	b.n	8005120 <HAL_RCC_OscConfig+0xd8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0xc0>
 80050ee:	4b78      	ldr	r3, [pc, #480]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a77      	ldr	r2, [pc, #476]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b75      	ldr	r3, [pc, #468]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a74      	ldr	r2, [pc, #464]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0xd8>
 8005108:	4b71      	ldr	r3, [pc, #452]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a70      	ldr	r2, [pc, #448]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800510e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	4b6e      	ldr	r3, [pc, #440]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6d      	ldr	r2, [pc, #436]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800511a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800511e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d013      	beq.n	8005150 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd fc0c 	bl	8002944 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fd fc08 	bl	8002944 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	@ 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e3d4      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005142:	4b63      	ldr	r3, [pc, #396]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0xe8>
 800514e:	e014      	b.n	800517a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd fbf8 	bl	8002944 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005158:	f7fd fbf4 	bl	8002944 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	@ 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e3c0      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800516a:	4b59      	ldr	r3, [pc, #356]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x110>
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80ca 	beq.w	800531c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005188:	4b51      	ldr	r3, [pc, #324]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005190:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005192:	4b4f      	ldr	r3, [pc, #316]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005196:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <HAL_RCC_OscConfig+0x166>
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b18      	cmp	r3, #24
 80051a2:	d156      	bne.n	8005252 <HAL_RCC_OscConfig+0x20a>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d151      	bne.n	8005252 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ae:	4b48      	ldr	r3, [pc, #288]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCC_OscConfig+0x17e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e392      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051c6:	4b42      	ldr	r3, [pc, #264]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 0219 	bic.w	r2, r3, #25
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	493f      	ldr	r1, [pc, #252]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fd fbb4 	bl	8002944 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fd fbb0 	bl	8002944 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e37c      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f2:	4b37      	ldr	r3, [pc, #220]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	f7fd fbad 	bl	800295c <HAL_GetREVID>
 8005202:	4603      	mov	r3, r0
 8005204:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005208:	4293      	cmp	r3, r2
 800520a:	d817      	bhi.n	800523c <HAL_RCC_OscConfig+0x1f4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b40      	cmp	r3, #64	@ 0x40
 8005212:	d108      	bne.n	8005226 <HAL_RCC_OscConfig+0x1de>
 8005214:	4b2e      	ldr	r3, [pc, #184]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800521c:	4a2c      	ldr	r2, [pc, #176]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800521e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005222:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005224:	e07a      	b.n	800531c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005226:	4b2a      	ldr	r3, [pc, #168]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	031b      	lsls	r3, r3, #12
 8005234:	4926      	ldr	r1, [pc, #152]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523a:	e06f      	b.n	800531c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	4921      	ldr	r1, [pc, #132]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	e064      	b.n	800531c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d047      	beq.n	80052ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800525a:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0219 	bic.w	r2, r3, #25
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	491a      	ldr	r1, [pc, #104]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fd fb6a 	bl	8002944 <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005274:	f7fd fb66 	bl	8002944 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e332      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005286:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005292:	f7fd fb63 	bl	800295c <HAL_GetREVID>
 8005296:	4603      	mov	r3, r0
 8005298:	f241 0203 	movw	r2, #4099	@ 0x1003
 800529c:	4293      	cmp	r3, r2
 800529e:	d819      	bhi.n	80052d4 <HAL_RCC_OscConfig+0x28c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d108      	bne.n	80052ba <HAL_RCC_OscConfig+0x272>
 80052a8:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80052b0:	4a07      	ldr	r2, [pc, #28]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b6:	6053      	str	r3, [r2, #4]
 80052b8:	e030      	b.n	800531c <HAL_RCC_OscConfig+0x2d4>
 80052ba:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	031b      	lsls	r3, r3, #12
 80052c8:	4901      	ldr	r1, [pc, #4]	@ (80052d0 <HAL_RCC_OscConfig+0x288>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
 80052ce:	e025      	b.n	800531c <HAL_RCC_OscConfig+0x2d4>
 80052d0:	58024400 	.word	0x58024400
 80052d4:	4b9a      	ldr	r3, [pc, #616]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	4997      	ldr	r1, [pc, #604]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	604b      	str	r3, [r1, #4]
 80052e8:	e018      	b.n	800531c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ea:	4b95      	ldr	r3, [pc, #596]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a94      	ldr	r2, [pc, #592]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fd fb25 	bl	8002944 <HAL_GetTick>
 80052fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052fe:	f7fd fb21 	bl	8002944 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e2ed      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005310:	4b8b      	ldr	r3, [pc, #556]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f0      	bne.n	80052fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80a9 	beq.w	800547c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532a:	4b85      	ldr	r3, [pc, #532]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005332:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005334:	4b82      	ldr	r3, [pc, #520]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b08      	cmp	r3, #8
 800533e:	d007      	beq.n	8005350 <HAL_RCC_OscConfig+0x308>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b18      	cmp	r3, #24
 8005344:	d13a      	bne.n	80053bc <HAL_RCC_OscConfig+0x374>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	2b01      	cmp	r3, #1
 800534e:	d135      	bne.n	80053bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005350:	4b7b      	ldr	r3, [pc, #492]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_RCC_OscConfig+0x320>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	2b80      	cmp	r3, #128	@ 0x80
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e2c1      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005368:	f7fd faf8 	bl	800295c <HAL_GetREVID>
 800536c:	4603      	mov	r3, r0
 800536e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005372:	4293      	cmp	r3, r2
 8005374:	d817      	bhi.n	80053a6 <HAL_RCC_OscConfig+0x35e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	2b20      	cmp	r3, #32
 800537c:	d108      	bne.n	8005390 <HAL_RCC_OscConfig+0x348>
 800537e:	4b70      	ldr	r3, [pc, #448]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005386:	4a6e      	ldr	r2, [pc, #440]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005388:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800538c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800538e:	e075      	b.n	800547c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005390:	4b6b      	ldr	r3, [pc, #428]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	069b      	lsls	r3, r3, #26
 800539e:	4968      	ldr	r1, [pc, #416]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053a4:	e06a      	b.n	800547c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053a6:	4b66      	ldr	r3, [pc, #408]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	4962      	ldr	r1, [pc, #392]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053ba:	e05f      	b.n	800547c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d042      	beq.n	800544a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd fab8 	bl	8002944 <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053d8:	f7fd fab4 	bl	8002944 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e280      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053ea:	4b55      	ldr	r3, [pc, #340]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053f6:	f7fd fab1 	bl	800295c <HAL_GetREVID>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005400:	4293      	cmp	r3, r2
 8005402:	d817      	bhi.n	8005434 <HAL_RCC_OscConfig+0x3ec>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	2b20      	cmp	r3, #32
 800540a:	d108      	bne.n	800541e <HAL_RCC_OscConfig+0x3d6>
 800540c:	4b4c      	ldr	r3, [pc, #304]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005414:	4a4a      	ldr	r2, [pc, #296]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005416:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	e02e      	b.n	800547c <HAL_RCC_OscConfig+0x434>
 800541e:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	069b      	lsls	r3, r3, #26
 800542c:	4944      	ldr	r1, [pc, #272]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
 8005432:	e023      	b.n	800547c <HAL_RCC_OscConfig+0x434>
 8005434:	4b42      	ldr	r3, [pc, #264]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	493f      	ldr	r1, [pc, #252]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005444:	4313      	orrs	r3, r2
 8005446:	60cb      	str	r3, [r1, #12]
 8005448:	e018      	b.n	800547c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800544a:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a3c      	ldr	r2, [pc, #240]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fd fa75 	bl	8002944 <HAL_GetTick>
 800545a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800545e:	f7fd fa71 	bl	8002944 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e23d      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005470:	4b33      	ldr	r3, [pc, #204]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d036      	beq.n	80054f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d019      	beq.n	80054c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005490:	4b2b      	ldr	r3, [pc, #172]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005494:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549c:	f7fd fa52 	bl	8002944 <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a4:	f7fd fa4e 	bl	8002944 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e21a      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054b6:	4b22      	ldr	r3, [pc, #136]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80054b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0x45c>
 80054c2:	e018      	b.n	80054f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80054c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fd fa38 	bl	8002944 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fd fa34 	bl	8002944 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e200      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d039      	beq.n	8005576 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01c      	beq.n	8005544 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a0c      	ldr	r2, [pc, #48]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005510:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005514:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005516:	f7fd fa15 	bl	8002944 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551e:	f7fd fa11 	bl	8002944 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e1dd      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005530:	4b03      	ldr	r3, [pc, #12]	@ (8005540 <HAL_RCC_OscConfig+0x4f8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x4d6>
 800553c:	e01b      	b.n	8005576 <HAL_RCC_OscConfig+0x52e>
 800553e:	bf00      	nop
 8005540:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005544:	4b9b      	ldr	r3, [pc, #620]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a9a      	ldr	r2, [pc, #616]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800554a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800554e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005550:	f7fd f9f8 	bl	8002944 <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005558:	f7fd f9f4 	bl	8002944 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e1c0      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800556a:	4b92      	ldr	r3, [pc, #584]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8081 	beq.w	8005686 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005584:	4b8c      	ldr	r3, [pc, #560]	@ (80057b8 <HAL_RCC_OscConfig+0x770>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a8b      	ldr	r2, [pc, #556]	@ (80057b8 <HAL_RCC_OscConfig+0x770>)
 800558a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800558e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005590:	f7fd f9d8 	bl	8002944 <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005598:	f7fd f9d4 	bl	8002944 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	@ 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e1a0      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055aa:	4b83      	ldr	r3, [pc, #524]	@ (80057b8 <HAL_RCC_OscConfig+0x770>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d106      	bne.n	80055cc <HAL_RCC_OscConfig+0x584>
 80055be:	4b7d      	ldr	r3, [pc, #500]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c2:	4a7c      	ldr	r2, [pc, #496]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ca:	e02d      	b.n	8005628 <HAL_RCC_OscConfig+0x5e0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10c      	bne.n	80055ee <HAL_RCC_OscConfig+0x5a6>
 80055d4:	4b77      	ldr	r3, [pc, #476]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d8:	4a76      	ldr	r2, [pc, #472]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e0:	4b74      	ldr	r3, [pc, #464]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e4:	4a73      	ldr	r2, [pc, #460]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055e6:	f023 0304 	bic.w	r3, r3, #4
 80055ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ec:	e01c      	b.n	8005628 <HAL_RCC_OscConfig+0x5e0>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b05      	cmp	r3, #5
 80055f4:	d10c      	bne.n	8005610 <HAL_RCC_OscConfig+0x5c8>
 80055f6:	4b6f      	ldr	r3, [pc, #444]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fa:	4a6e      	ldr	r2, [pc, #440]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80055fc:	f043 0304 	orr.w	r3, r3, #4
 8005600:	6713      	str	r3, [r2, #112]	@ 0x70
 8005602:	4b6c      	ldr	r3, [pc, #432]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	4a6b      	ldr	r2, [pc, #428]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	@ 0x70
 800560e:	e00b      	b.n	8005628 <HAL_RCC_OscConfig+0x5e0>
 8005610:	4b68      	ldr	r3, [pc, #416]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005614:	4a67      	ldr	r2, [pc, #412]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	6713      	str	r3, [r2, #112]	@ 0x70
 800561c:	4b65      	ldr	r3, [pc, #404]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005620:	4a64      	ldr	r2, [pc, #400]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005622:	f023 0304 	bic.w	r3, r3, #4
 8005626:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fd f988 	bl	8002944 <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005636:	e00a      	b.n	800564e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005638:	f7fd f984 	bl	8002944 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e14e      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800564e:	4b59      	ldr	r3, [pc, #356]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ee      	beq.n	8005638 <HAL_RCC_OscConfig+0x5f0>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fd f972 	bl	8002944 <HAL_GetTick>
 8005660:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005662:	e00a      	b.n	800567a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fd f96e 	bl	8002944 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e138      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800567a:	4b4e      	ldr	r3, [pc, #312]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ee      	bne.n	8005664 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 812d 	beq.w	80058ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005690:	4b48      	ldr	r3, [pc, #288]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005698:	2b18      	cmp	r3, #24
 800569a:	f000 80bd 	beq.w	8005818 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	f040 809e 	bne.w	80057e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	4b42      	ldr	r3, [pc, #264]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a41      	ldr	r2, [pc, #260]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80056ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fd f946 	bl	8002944 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056bc:	f7fd f942 	bl	8002944 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e10e      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ce:	4b39      	ldr	r3, [pc, #228]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056da:	4b36      	ldr	r3, [pc, #216]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80056dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056de:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <HAL_RCC_OscConfig+0x774>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056ea:	0112      	lsls	r2, r2, #4
 80056ec:	430a      	orrs	r2, r1
 80056ee:	4931      	ldr	r1, [pc, #196]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	3b01      	subs	r3, #1
 80056fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005702:	3b01      	subs	r3, #1
 8005704:	025b      	lsls	r3, r3, #9
 8005706:	b29b      	uxth	r3, r3
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	3b01      	subs	r3, #1
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571c:	3b01      	subs	r3, #1
 800571e:	061b      	lsls	r3, r3, #24
 8005720:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005724:	4923      	ldr	r1, [pc, #140]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800572a:	4b22      	ldr	r3, [pc, #136]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	4a21      	ldr	r2, [pc, #132]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005736:	4b1f      	ldr	r3, [pc, #124]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800573a:	4b21      	ldr	r3, [pc, #132]	@ (80057c0 <HAL_RCC_OscConfig+0x778>)
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005742:	00d2      	lsls	r2, r2, #3
 8005744:	491b      	ldr	r1, [pc, #108]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005746:	4313      	orrs	r3, r2
 8005748:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800574a:	4b1a      	ldr	r3, [pc, #104]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	f023 020c 	bic.w	r2, r3, #12
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	4917      	ldr	r1, [pc, #92]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005758:	4313      	orrs	r3, r2
 800575a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800575c:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	f023 0202 	bic.w	r2, r3, #2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005768:	4912      	ldr	r1, [pc, #72]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800576e:	4b11      	ldr	r3, [pc, #68]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4a10      	ldr	r2, [pc, #64]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800577a:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	4a0d      	ldr	r2, [pc, #52]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005784:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005786:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 800578c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005792:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	4a07      	ldr	r2, [pc, #28]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579e:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a04      	ldr	r2, [pc, #16]	@ (80057b4 <HAL_RCC_OscConfig+0x76c>)
 80057a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fd f8cb 	bl	8002944 <HAL_GetTick>
 80057ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057b0:	e011      	b.n	80057d6 <HAL_RCC_OscConfig+0x78e>
 80057b2:	bf00      	nop
 80057b4:	58024400 	.word	0x58024400
 80057b8:	58024800 	.word	0x58024800
 80057bc:	fffffc0c 	.word	0xfffffc0c
 80057c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fd f8be 	bl	8002944 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e08a      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x77c>
 80057e2:	e082      	b.n	80058ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e4:	4b43      	ldr	r3, [pc, #268]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a42      	ldr	r2, [pc, #264]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fd f8a8 	bl	8002944 <HAL_GetTick>
 80057f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fd f8a4 	bl	8002944 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e070      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800580a:	4b3a      	ldr	r3, [pc, #232]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x7b0>
 8005816:	e068      	b.n	80058ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005818:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800581e:	4b35      	ldr	r3, [pc, #212]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	2b01      	cmp	r3, #1
 800582a:	d031      	beq.n	8005890 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f003 0203 	and.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d12a      	bne.n	8005890 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d122      	bne.n	8005890 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d11a      	bne.n	8005890 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	0a5b      	lsrs	r3, r3, #9
 800585e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005866:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d111      	bne.n	8005890 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d108      	bne.n	8005890 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e02b      	b.n	80058ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005894:	4b17      	ldr	r3, [pc, #92]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 8005896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005898:	08db      	lsrs	r3, r3, #3
 800589a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800589e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d01f      	beq.n	80058ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058aa:	4b12      	ldr	r3, [pc, #72]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	4a11      	ldr	r2, [pc, #68]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058b6:	f7fd f845 	bl	8002944 <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058bc:	bf00      	nop
 80058be:	f7fd f841 	bl	8002944 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d0f9      	beq.n	80058be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058ca:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80058cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ce:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <HAL_RCC_OscConfig+0x8b0>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058d6:	00d2      	lsls	r2, r2, #3
 80058d8:	4906      	ldr	r1, [pc, #24]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80058de:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	4a04      	ldr	r2, [pc, #16]	@ (80058f4 <HAL_RCC_OscConfig+0x8ac>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3730      	adds	r7, #48	@ 0x30
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	58024400 	.word	0x58024400
 80058f8:	ffff0007 	.word	0xffff0007

080058fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e19c      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005910:	4b8a      	ldr	r3, [pc, #552]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d910      	bls.n	8005940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591e:	4b87      	ldr	r3, [pc, #540]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 020f 	bic.w	r2, r3, #15
 8005926:	4985      	ldr	r1, [pc, #532]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b83      	ldr	r3, [pc, #524]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e184      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d010      	beq.n	800596e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	4b7b      	ldr	r3, [pc, #492]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005958:	429a      	cmp	r2, r3
 800595a:	d908      	bls.n	800596e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800595c:	4b78      	ldr	r3, [pc, #480]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	4975      	ldr	r1, [pc, #468]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 800596a:	4313      	orrs	r3, r2
 800596c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d010      	beq.n	800599c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	4b70      	ldr	r3, [pc, #448]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005986:	429a      	cmp	r2, r3
 8005988:	d908      	bls.n	800599c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800598a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	496a      	ldr	r1, [pc, #424]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005998:	4313      	orrs	r3, r2
 800599a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	4b64      	ldr	r3, [pc, #400]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d908      	bls.n	80059ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059b8:	4b61      	ldr	r3, [pc, #388]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	495e      	ldr	r1, [pc, #376]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d010      	beq.n	80059f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	4b59      	ldr	r3, [pc, #356]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d908      	bls.n	80059f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059e6:	4b56      	ldr	r3, [pc, #344]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	4953      	ldr	r1, [pc, #332]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	4b4d      	ldr	r3, [pc, #308]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d908      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a14:	4b4a      	ldr	r3, [pc, #296]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f023 020f 	bic.w	r2, r3, #15
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4947      	ldr	r1, [pc, #284]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d055      	beq.n	8005ade <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a32:	4b43      	ldr	r3, [pc, #268]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	4940      	ldr	r1, [pc, #256]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d107      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d121      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0f6      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d107      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a64:	4b36      	ldr	r3, [pc, #216]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d115      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0ea      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d107      	bne.n	8005a8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a7c:	4b30      	ldr	r3, [pc, #192]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0de      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0d6      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9c:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f023 0207 	bic.w	r2, r3, #7
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4925      	ldr	r1, [pc, #148]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aae:	f7fc ff49 	bl	8002944 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab4:	e00a      	b.n	8005acc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab6:	f7fc ff45 	bl	8002944 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e0be      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005acc:	4b1c      	ldr	r3, [pc, #112]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d1eb      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d010      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d208      	bcs.n	8005b0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afa:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	490e      	ldr	r1, [pc, #56]	@ (8005b40 <HAL_RCC_ClockConfig+0x244>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d214      	bcs.n	8005b44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 020f 	bic.w	r2, r3, #15
 8005b22:	4906      	ldr	r1, [pc, #24]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b04      	ldr	r3, [pc, #16]	@ (8005b3c <HAL_RCC_ClockConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d005      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e086      	b.n	8005c4a <HAL_RCC_ClockConfig+0x34e>
 8005b3c:	52002000 	.word	0x52002000
 8005b40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	4b3f      	ldr	r3, [pc, #252]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d208      	bcs.n	8005b72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b60:	4b3c      	ldr	r3, [pc, #240]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4939      	ldr	r1, [pc, #228]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d010      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	4b34      	ldr	r3, [pc, #208]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d208      	bcs.n	8005ba0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b8e:	4b31      	ldr	r3, [pc, #196]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	492e      	ldr	r1, [pc, #184]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d010      	beq.n	8005bce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	4b28      	ldr	r3, [pc, #160]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d208      	bcs.n	8005bce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bbc:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	4922      	ldr	r1, [pc, #136]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d208      	bcs.n	8005bfc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bea:	4b1a      	ldr	r3, [pc, #104]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4917      	ldr	r1, [pc, #92]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bfc:	f000 f834 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005c00:	4602      	mov	r2, r0
 8005c02:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	4912      	ldr	r1, [pc, #72]	@ (8005c58 <HAL_RCC_ClockConfig+0x35c>)
 8005c0e:	5ccb      	ldrb	r3, [r1, r3]
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c54 <HAL_RCC_ClockConfig+0x358>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	4a0d      	ldr	r2, [pc, #52]	@ (8005c58 <HAL_RCC_ClockConfig+0x35c>)
 8005c24:	5cd3      	ldrb	r3, [r2, r3]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <HAL_RCC_ClockConfig+0x360>)
 8005c32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c34:	4a0a      	ldr	r2, [pc, #40]	@ (8005c60 <HAL_RCC_ClockConfig+0x364>)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <HAL_RCC_ClockConfig+0x368>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fc fe36 	bl	80028b0 <HAL_InitTick>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
 8005c58:	0800b708 	.word	0x0800b708
 8005c5c:	24000008 	.word	0x24000008
 8005c60:	24000004 	.word	0x24000004
 8005c64:	2400000c 	.word	0x2400000c

08005c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	@ 0x24
 8005c6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c6e:	4bb3      	ldr	r3, [pc, #716]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c76:	2b18      	cmp	r3, #24
 8005c78:	f200 8155 	bhi.w	8005f26 <HAL_RCC_GetSysClockFreq+0x2be>
 8005c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005f27 	.word	0x08005f27
 8005c8c:	08005f27 	.word	0x08005f27
 8005c90:	08005f27 	.word	0x08005f27
 8005c94:	08005f27 	.word	0x08005f27
 8005c98:	08005f27 	.word	0x08005f27
 8005c9c:	08005f27 	.word	0x08005f27
 8005ca0:	08005f27 	.word	0x08005f27
 8005ca4:	08005d0f 	.word	0x08005d0f
 8005ca8:	08005f27 	.word	0x08005f27
 8005cac:	08005f27 	.word	0x08005f27
 8005cb0:	08005f27 	.word	0x08005f27
 8005cb4:	08005f27 	.word	0x08005f27
 8005cb8:	08005f27 	.word	0x08005f27
 8005cbc:	08005f27 	.word	0x08005f27
 8005cc0:	08005f27 	.word	0x08005f27
 8005cc4:	08005d15 	.word	0x08005d15
 8005cc8:	08005f27 	.word	0x08005f27
 8005ccc:	08005f27 	.word	0x08005f27
 8005cd0:	08005f27 	.word	0x08005f27
 8005cd4:	08005f27 	.word	0x08005f27
 8005cd8:	08005f27 	.word	0x08005f27
 8005cdc:	08005f27 	.word	0x08005f27
 8005ce0:	08005f27 	.word	0x08005f27
 8005ce4:	08005d1b 	.word	0x08005d1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce8:	4b94      	ldr	r3, [pc, #592]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cf4:	4b91      	ldr	r3, [pc, #580]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	08db      	lsrs	r3, r3, #3
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	4a90      	ldr	r2, [pc, #576]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
 8005d04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d06:	e111      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d08:	4b8d      	ldr	r3, [pc, #564]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d0a:	61bb      	str	r3, [r7, #24]
      break;
 8005d0c:	e10e      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d10:	61bb      	str	r3, [r7, #24]
      break;
 8005d12:	e10b      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d14:	4b8c      	ldr	r3, [pc, #560]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d16:	61bb      	str	r3, [r7, #24]
      break;
 8005d18:	e108      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d1a:	4b88      	ldr	r3, [pc, #544]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d24:	4b85      	ldr	r3, [pc, #532]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d30:	4b82      	ldr	r3, [pc, #520]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d3a:	4b80      	ldr	r3, [pc, #512]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80e1 	beq.w	8005f20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f000 8083 	beq.w	8005e6c <HAL_RCC_GetSysClockFreq+0x204>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	f200 80a1 	bhi.w	8005eb0 <HAL_RCC_GetSysClockFreq+0x248>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x114>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d056      	beq.n	8005e28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d7a:	e099      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d02d      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d88:	4b6c      	ldr	r3, [pc, #432]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	4a6b      	ldr	r2, [pc, #428]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b62      	ldr	r3, [pc, #392]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005de2:	e087      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b51      	ldr	r3, [pc, #324]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e26:	e065      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b40      	ldr	r3, [pc, #256]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e6a:	e043      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e92:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eae:	e021      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ef2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef8:	0a5b      	lsrs	r3, r3, #9
 8005efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005efe:	3301      	adds	r3, #1
 8005f00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	ee07 3a90 	vmov	s15, r3
 8005f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f18:	ee17 3a90 	vmov	r3, s15
 8005f1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f1e:	e005      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
      break;
 8005f24:	e002      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f26:	4b07      	ldr	r3, [pc, #28]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f28:	61bb      	str	r3, [r7, #24]
      break;
 8005f2a:	bf00      	nop
  }

  return sysclockfreq;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3724      	adds	r7, #36	@ 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	03d09000 	.word	0x03d09000
 8005f44:	003d0900 	.word	0x003d0900
 8005f48:	016e3600 	.word	0x016e3600
 8005f4c:	46000000 	.word	0x46000000
 8005f50:	4c742400 	.word	0x4c742400
 8005f54:	4a742400 	.word	0x4a742400
 8005f58:	4bb71b00 	.word	0x4bb71b00

08005f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f62:	f7ff fe81 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005f66:	4602      	mov	r2, r0
 8005f68:	4b10      	ldr	r3, [pc, #64]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x50>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	0a1b      	lsrs	r3, r3, #8
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	490f      	ldr	r1, [pc, #60]	@ (8005fb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f74:	5ccb      	ldrb	r3, [r1, r3]
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f80:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x50>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f8a:	5cd3      	ldrb	r3, [r2, r3]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	fa22 f303 	lsr.w	r3, r2, r3
 8005f96:	4a07      	ldr	r2, [pc, #28]	@ (8005fb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f9a:	4a07      	ldr	r2, [pc, #28]	@ (8005fb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fa0:	4b04      	ldr	r3, [pc, #16]	@ (8005fb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	0800b708 	.word	0x0800b708
 8005fb4:	24000008 	.word	0x24000008
 8005fb8:	24000004 	.word	0x24000004

08005fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fc0:	f7ff ffcc 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	4904      	ldr	r1, [pc, #16]	@ (8005fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	0800b708 	.word	0x0800b708

08005fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fec:	f7ff ffb6 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b06      	ldr	r3, [pc, #24]	@ (800600c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4904      	ldr	r1, [pc, #16]	@ (8006010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	0800b708 	.word	0x0800b708

08006014 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006018:	b0ca      	sub	sp, #296	@ 0x128
 800601a:	af00      	add	r7, sp, #0
 800601c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006026:	2300      	movs	r3, #0
 8006028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006038:	2500      	movs	r5, #0
 800603a:	ea54 0305 	orrs.w	r3, r4, r5
 800603e:	d049      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006046:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800604a:	d02f      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800604c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006050:	d828      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006056:	d01a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006058:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800605c:	d822      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006066:	d007      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006068:	e01c      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800606a:	4bb8      	ldr	r3, [pc, #736]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4ab7      	ldr	r2, [pc, #732]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006076:	e01a      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	3308      	adds	r3, #8
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fc8f 	bl	80079a4 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800608c:	e00f      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	3328      	adds	r3, #40	@ 0x28
 8006094:	2102      	movs	r1, #2
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fd36 	bl	8007b08 <RCCEx_PLL3_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060a2:	e004      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060b6:	4ba5      	ldr	r3, [pc, #660]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060c4:	4aa1      	ldr	r2, [pc, #644]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c6:	430b      	orrs	r3, r1
 80060c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80060e0:	f04f 0900 	mov.w	r9, #0
 80060e4:	ea58 0309 	orrs.w	r3, r8, r9
 80060e8:	d047      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d82a      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060f4:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006111 	.word	0x08006111
 8006100:	0800611f 	.word	0x0800611f
 8006104:	08006135 	.word	0x08006135
 8006108:	08006153 	.word	0x08006153
 800610c:	08006153 	.word	0x08006153
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006110:	4b8e      	ldr	r3, [pc, #568]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	4a8d      	ldr	r2, [pc, #564]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800611c:	e01a      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	3308      	adds	r3, #8
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fc3c 	bl	80079a4 <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006132:	e00f      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	3328      	adds	r3, #40	@ 0x28
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f001 fce3 	bl	8007b08 <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006148:	e004      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800615c:	4b7b      	ldr	r3, [pc, #492]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800615e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006160:	f023 0107 	bic.w	r1, r3, #7
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616a:	4a78      	ldr	r2, [pc, #480]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006186:	f04f 0b00 	mov.w	fp, #0
 800618a:	ea5a 030b 	orrs.w	r3, sl, fp
 800618e:	d04c      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800619a:	d030      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800619c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a0:	d829      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a4:	d02d      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80061a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a8:	d825      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061aa:	2b80      	cmp	r3, #128	@ 0x80
 80061ac:	d018      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80061ae:	2b80      	cmp	r3, #128	@ 0x80
 80061b0:	d821      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80061b6:	2b40      	cmp	r3, #64	@ 0x40
 80061b8:	d007      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80061ba:	e01c      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061bc:	4b63      	ldr	r3, [pc, #396]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	4a62      	ldr	r2, [pc, #392]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061c8:	e01c      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	3308      	adds	r3, #8
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 fbe6 	bl	80079a4 <RCCEx_PLL2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061de:	e011      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	3328      	adds	r3, #40	@ 0x28
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fc8d 	bl	8007b08 <RCCEx_PLL3_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061f4:	e006      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fc:	e002      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061fe:	bf00      	nop
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800620c:	4b4f      	ldr	r3, [pc, #316]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800620e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006210:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621a:	4a4c      	ldr	r2, [pc, #304]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621c:	430b      	orrs	r3, r1
 800621e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006220:	e003      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006236:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800623a:	2300      	movs	r3, #0
 800623c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006240:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006244:	460b      	mov	r3, r1
 8006246:	4313      	orrs	r3, r2
 8006248:	d053      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006252:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006256:	d035      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006258:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800625c:	d82e      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800625e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006262:	d031      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006264:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006268:	d828      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800626a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800626e:	d01a      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006270:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006274:	d822      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800627a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800627e:	d007      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006280:	e01c      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006282:	4b32      	ldr	r3, [pc, #200]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	4a31      	ldr	r2, [pc, #196]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800628c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800628e:	e01c      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006294:	3308      	adds	r3, #8
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f001 fb83 	bl	80079a4 <RCCEx_PLL2_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062a4:	e011      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062aa:	3328      	adds	r3, #40	@ 0x28
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fc2a 	bl	8007b08 <RCCEx_PLL3_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062ba:	e006      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c2:	e002      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80062c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062d2:	4b1e      	ldr	r3, [pc, #120]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062e2:	4a1a      	ldr	r2, [pc, #104]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062e8:	e003      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006308:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800630c:	460b      	mov	r3, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	d056      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800631a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800631e:	d038      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006324:	d831      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006326:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800632a:	d034      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800632c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006330:	d82b      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006336:	d01d      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800633c:	d825      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d006      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006342:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006348:	e01f      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006350:	4ba2      	ldr	r3, [pc, #648]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	4aa1      	ldr	r2, [pc, #644]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800635c:	e01c      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	3308      	adds	r3, #8
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f001 fb1c 	bl	80079a4 <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006378:	3328      	adds	r3, #40	@ 0x28
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fbc3 	bl	8007b08 <RCCEx_PLL3_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063a0:	4b8e      	ldr	r3, [pc, #568]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063b0:	4a8a      	ldr	r2, [pc, #552]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b2:	430b      	orrs	r3, r1
 80063b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b6:	e003      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80063cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063da:	460b      	mov	r3, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	d03a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063e6:	2b30      	cmp	r3, #48	@ 0x30
 80063e8:	d01f      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063ea:	2b30      	cmp	r3, #48	@ 0x30
 80063ec:	d819      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d00c      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d815      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d019      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d111      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fe:	4b77      	ldr	r3, [pc, #476]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	4a76      	ldr	r2, [pc, #472]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800640a:	e011      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006410:	3308      	adds	r3, #8
 8006412:	2102      	movs	r1, #2
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fac5 	bl	80079a4 <RCCEx_PLL2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006420:	e006      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006428:	e002      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800642e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006438:	4b68      	ldr	r3, [pc, #416]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800643a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006446:	4a65      	ldr	r2, [pc, #404]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006448:	430b      	orrs	r3, r1
 800644a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800644c:	e003      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006462:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006466:	2300      	movs	r3, #0
 8006468:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800646c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006470:	460b      	mov	r3, r1
 8006472:	4313      	orrs	r3, r2
 8006474:	d051      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800647c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006480:	d035      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006486:	d82e      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006488:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800648c:	d031      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800648e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006492:	d828      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006498:	d01a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649e:	d822      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d007      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80064aa:	e01c      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ac:	4b4b      	ldr	r3, [pc, #300]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b0:	4a4a      	ldr	r2, [pc, #296]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064b8:	e01c      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	3308      	adds	r3, #8
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 fa6e 	bl	80079a4 <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064ce:	e011      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d4:	3328      	adds	r3, #40	@ 0x28
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 fb15 	bl	8007b08 <RCCEx_PLL3_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ec:	e002      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064ee:	bf00      	nop
 80064f0:	e000      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064fc:	4b37      	ldr	r3, [pc, #220]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006500:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800650a:	4a34      	ldr	r2, [pc, #208]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650c:	430b      	orrs	r3, r1
 800650e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006530:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d056      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006544:	d033      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006546:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800654a:	d82c      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800654c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006550:	d02f      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006552:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006556:	d826      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006558:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800655c:	d02b      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800655e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006562:	d820      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006568:	d012      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800656a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800656e:	d81a      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d022      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006578:	d115      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657e:	3308      	adds	r3, #8
 8006580:	2101      	movs	r1, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fa0e 	bl	80079a4 <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800658e:	e015      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006594:	3328      	adds	r3, #40	@ 0x28
 8006596:	2101      	movs	r1, #1
 8006598:	4618      	mov	r0, r3
 800659a:	f001 fab5 	bl	8007b08 <RCCEx_PLL3_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065a4:	e00a      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065ae:	bf00      	nop
 80065b0:	e004      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065b2:	bf00      	nop
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065b6:	bf00      	nop
 80065b8:	e000      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10d      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d2:	4a02      	ldr	r2, [pc, #8]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d8:	e006      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d055      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006614:	d033      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800661a:	d82c      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006620:	d02f      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006626:	d826      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006628:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800662c:	d02b      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800662e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006632:	d820      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006638:	d012      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800663a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800663e:	d81a      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d022      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006648:	d115      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	3308      	adds	r3, #8
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f9a6 	bl	80079a4 <RCCEx_PLL2_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800665e:	e015      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	3328      	adds	r3, #40	@ 0x28
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fa4d 	bl	8007b08 <RCCEx_PLL3_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006674:	e00a      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800667c:	e006      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800667e:	bf00      	nop
 8006680:	e004      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006682:	bf00      	nop
 8006684:	e002      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800668a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10b      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006694:	4ba3      	ldr	r3, [pc, #652]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006698:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066a4:	4a9f      	ldr	r2, [pc, #636]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066a6:	430b      	orrs	r3, r1
 80066a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80066c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d037      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066de:	d00e      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80066e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e4:	d816      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d018      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ee:	d111      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	4a8b      	ldr	r2, [pc, #556]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066fc:	e00f      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006702:	3308      	adds	r3, #8
 8006704:	2101      	movs	r1, #1
 8006706:	4618      	mov	r0, r3
 8006708:	f001 f94c 	bl	80079a4 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006712:	e004      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800671a:	e000      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800671c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006726:	4b7f      	ldr	r3, [pc, #508]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	4a7b      	ldr	r2, [pc, #492]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006736:	430b      	orrs	r3, r1
 8006738:	6513      	str	r3, [r2, #80]	@ 0x50
 800673a:	e003      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800675a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800675e:	460b      	mov	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	d039      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676a:	2b03      	cmp	r3, #3
 800676c:	d81c      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800676e:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	080067b1 	.word	0x080067b1
 8006778:	08006785 	.word	0x08006785
 800677c:	08006793 	.word	0x08006793
 8006780:	080067b1 	.word	0x080067b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006784:	4b67      	ldr	r3, [pc, #412]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4a66      	ldr	r2, [pc, #408]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800678a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800678e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006790:	e00f      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006796:	3308      	adds	r3, #8
 8006798:	2102      	movs	r1, #2
 800679a:	4618      	mov	r0, r3
 800679c:	f001 f902 	bl	80079a4 <RCCEx_PLL2_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067a6:	e004      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ae:	e000      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80067b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067ba:	4b5a      	ldr	r3, [pc, #360]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067be:	f023 0103 	bic.w	r1, r3, #3
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c8:	4a56      	ldr	r2, [pc, #344]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067ce:	e003      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067f2:	460b      	mov	r3, r1
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f000 809f 	beq.w	8006938 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006806:	f7fc f89d 	bl	8002944 <HAL_GetTick>
 800680a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800680e:	e00b      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006810:	f7fc f898 	bl	8002944 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b64      	cmp	r3, #100	@ 0x64
 800681e:	d903      	bls.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006826:	e005      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006828:	4b3f      	ldr	r3, [pc, #252]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0ed      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006838:	2b00      	cmp	r3, #0
 800683a:	d179      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800683c:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800683e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006848:	4053      	eors	r3, r2
 800684a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684e:	2b00      	cmp	r3, #0
 8006850:	d015      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006852:	4b34      	ldr	r3, [pc, #208]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800685e:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006862:	4a30      	ldr	r2, [pc, #192]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006868:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800686a:	4b2e      	ldr	r3, [pc, #184]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	4a2d      	ldr	r2, [pc, #180]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006870:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006874:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006876:	4a2b      	ldr	r2, [pc, #172]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800687c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800688a:	d118      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fc f85a 	bl	8002944 <HAL_GetTick>
 8006890:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006894:	e00d      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006896:	f7fc f855 	bl	8002944 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068a0:	1ad2      	subs	r2, r2, r3
 80068a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d903      	bls.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80068b0:	e005      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0eb      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d129      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068d6:	d10e      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80068d8:	4b12      	ldr	r3, [pc, #72]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068e8:	091a      	lsrs	r2, r3, #4
 80068ea:	4b10      	ldr	r3, [pc, #64]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6113      	str	r3, [r2, #16]
 80068f4:	e005      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006900:	6113      	str	r3, [r2, #16]
 8006902:	4b08      	ldr	r3, [pc, #32]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006904:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800690e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006912:	4a04      	ldr	r2, [pc, #16]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6713      	str	r3, [r2, #112]	@ 0x70
 8006918:	e00e      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006922:	e009      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006924:	58024400 	.word	0x58024400
 8006928:	58024800 	.word	0x58024800
 800692c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f002 0301 	and.w	r3, r2, #1
 8006944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800694e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	f000 8089 	beq.w	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006960:	2b28      	cmp	r3, #40	@ 0x28
 8006962:	d86b      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006964:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006a45 	.word	0x08006a45
 8006970:	08006a3d 	.word	0x08006a3d
 8006974:	08006a3d 	.word	0x08006a3d
 8006978:	08006a3d 	.word	0x08006a3d
 800697c:	08006a3d 	.word	0x08006a3d
 8006980:	08006a3d 	.word	0x08006a3d
 8006984:	08006a3d 	.word	0x08006a3d
 8006988:	08006a3d 	.word	0x08006a3d
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a3d 	.word	0x08006a3d
 8006994:	08006a3d 	.word	0x08006a3d
 8006998:	08006a3d 	.word	0x08006a3d
 800699c:	08006a3d 	.word	0x08006a3d
 80069a0:	08006a3d 	.word	0x08006a3d
 80069a4:	08006a3d 	.word	0x08006a3d
 80069a8:	08006a3d 	.word	0x08006a3d
 80069ac:	08006a27 	.word	0x08006a27
 80069b0:	08006a3d 	.word	0x08006a3d
 80069b4:	08006a3d 	.word	0x08006a3d
 80069b8:	08006a3d 	.word	0x08006a3d
 80069bc:	08006a3d 	.word	0x08006a3d
 80069c0:	08006a3d 	.word	0x08006a3d
 80069c4:	08006a3d 	.word	0x08006a3d
 80069c8:	08006a3d 	.word	0x08006a3d
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a3d 	.word	0x08006a3d
 80069d4:	08006a3d 	.word	0x08006a3d
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	08006a3d 	.word	0x08006a3d
 80069e0:	08006a3d 	.word	0x08006a3d
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	08006a45 	.word	0x08006a45
 80069f0:	08006a3d 	.word	0x08006a3d
 80069f4:	08006a3d 	.word	0x08006a3d
 80069f8:	08006a3d 	.word	0x08006a3d
 80069fc:	08006a3d 	.word	0x08006a3d
 8006a00:	08006a3d 	.word	0x08006a3d
 8006a04:	08006a3d 	.word	0x08006a3d
 8006a08:	08006a3d 	.word	0x08006a3d
 8006a0c:	08006a45 	.word	0x08006a45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	3308      	adds	r3, #8
 8006a16:	2101      	movs	r1, #1
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 ffc3 	bl	80079a4 <RCCEx_PLL2_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a24:	e00f      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	3328      	adds	r3, #40	@ 0x28
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f86a 	bl	8007b08 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a3a:	e004      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a4e:	4bbf      	ldr	r3, [pc, #764]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a52:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a5c:	4abb      	ldr	r2, [pc, #748]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a62:	e003      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f002 0302 	and.w	r3, r2, #2
 8006a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a86:	460b      	mov	r3, r1
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	d041      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d824      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006ae9 	.word	0x08006ae9
 8006aa0:	08006ab5 	.word	0x08006ab5
 8006aa4:	08006acb 	.word	0x08006acb
 8006aa8:	08006ae9 	.word	0x08006ae9
 8006aac:	08006ae9 	.word	0x08006ae9
 8006ab0:	08006ae9 	.word	0x08006ae9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	3308      	adds	r3, #8
 8006aba:	2101      	movs	r1, #1
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 ff71 	bl	80079a4 <RCCEx_PLL2_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ac8:	e00f      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ace:	3328      	adds	r3, #40	@ 0x28
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 f818 	bl	8007b08 <RCCEx_PLL3_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ade:	e004      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae6:	e000      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006af2:	4b96      	ldr	r3, [pc, #600]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af6:	f023 0107 	bic.w	r1, r3, #7
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b00:	4a92      	ldr	r2, [pc, #584]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b02:	430b      	orrs	r3, r1
 8006b04:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f002 0304 	and.w	r3, r2, #4
 8006b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b20:	2300      	movs	r3, #0
 8006b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d044      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d825      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b91 	.word	0x08006b91
 8006b48:	08006b5d 	.word	0x08006b5d
 8006b4c:	08006b73 	.word	0x08006b73
 8006b50:	08006b91 	.word	0x08006b91
 8006b54:	08006b91 	.word	0x08006b91
 8006b58:	08006b91 	.word	0x08006b91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	3308      	adds	r3, #8
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 ff1d 	bl	80079a4 <RCCEx_PLL2_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b70:	e00f      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	3328      	adds	r3, #40	@ 0x28
 8006b78:	2101      	movs	r1, #1
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 ffc4 	bl	8007b08 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b86:	e004      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b8e:	e000      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b9a:	4b6c      	ldr	r3, [pc, #432]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9e:	f023 0107 	bic.w	r1, r3, #7
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006baa:	4a68      	ldr	r2, [pc, #416]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f002 0320 	and.w	r3, r2, #32
 8006bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d055      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be6:	d033      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bec:	d82c      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf2:	d02f      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf8:	d826      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bfe:	d02b      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006c00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c04:	d820      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c0a:	d012      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c10:	d81a      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d022      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c1a:	d115      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	3308      	adds	r3, #8
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 febd 	bl	80079a4 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c30:	e015      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	3328      	adds	r3, #40	@ 0x28
 8006c38:	2102      	movs	r1, #2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 ff64 	bl	8007b08 <RCCEx_PLL3_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c46:	e00a      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c4e:	e006      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c50:	bf00      	nop
 8006c52:	e004      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c66:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c76:	4a35      	ldr	r2, [pc, #212]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c7c:	e003      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c96:	2300      	movs	r3, #0
 8006c98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d058      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cb2:	d033      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006cb4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cb8:	d82c      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cbe:	d02f      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc4:	d826      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cca:	d02b      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006ccc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cd0:	d820      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cd6:	d012      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cdc:	d81a      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d022      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce6:	d115      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	3308      	adds	r3, #8
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fe57 	bl	80079a4 <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e015      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d02:	3328      	adds	r3, #40	@ 0x28
 8006d04:	2102      	movs	r1, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fefe 	bl	8007b08 <RCCEx_PLL3_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d12:	e00a      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d1a:	e006      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e004      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d20:	bf00      	nop
 8006d22:	e002      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d24:	bf00      	nop
 8006d26:	e000      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10e      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d36:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d42:	4a02      	ldr	r2, [pc, #8]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d48:	e006      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d4a:	bf00      	nop
 8006d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d055      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d80:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d84:	d033      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d86:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d8a:	d82c      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d90:	d02f      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d96:	d826      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d98:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d9c:	d02b      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d9e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006da2:	d820      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da8:	d012      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dae:	d81a      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d022      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db8:	d115      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fdee 	bl	80079a4 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dce:	e015      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	3328      	adds	r3, #40	@ 0x28
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fe95 	bl	8007b08 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006de4:	e00a      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dec:	e006      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dee:	bf00      	nop
 8006df0:	e004      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006df2:	bf00      	nop
 8006df4:	e002      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e04:	4ba1      	ldr	r3, [pc, #644]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e08:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e14:	4a9d      	ldr	r2, [pc, #628]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e16:	430b      	orrs	r3, r1
 8006e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e1a:	e003      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f002 0308 	and.w	r3, r2, #8
 8006e30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d01e      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e50:	d10c      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	3328      	adds	r3, #40	@ 0x28
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fe54 	bl	8007b08 <RCCEx_PLL3_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e6c:	4b87      	ldr	r3, [pc, #540]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e7c:	4a83      	ldr	r2, [pc, #524]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f002 0310 	and.w	r3, r2, #16
 8006e8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e92:	2300      	movs	r3, #0
 8006e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d01e      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eae:	d10c      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	3328      	adds	r3, #40	@ 0x28
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fe25 	bl	8007b08 <RCCEx_PLL3_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eca:	4b70      	ldr	r3, [pc, #448]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ece:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eda:	4a6c      	ldr	r2, [pc, #432]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006eec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ef6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006efa:	460b      	mov	r3, r1
 8006efc:	4313      	orrs	r3, r2
 8006efe:	d03e      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d022      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d81b      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1c:	d00b      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006f1e:	e015      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	3308      	adds	r3, #8
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fd3b 	bl	80079a4 <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f34:	e00f      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	3328      	adds	r3, #40	@ 0x28
 8006f3c:	2102      	movs	r1, #2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fde2 	bl	8007b08 <RCCEx_PLL3_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f4a:	e004      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f6e:	4a47      	ldr	r2, [pc, #284]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f94:	460b      	mov	r3, r1
 8006f96:	4313      	orrs	r3, r2
 8006f98:	d03b      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fa6:	d01f      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006fa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fac:	d818      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fb2:	d003      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006fb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb8:	d007      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006fba:	e011      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fbc:	4b33      	ldr	r3, [pc, #204]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc0:	4a32      	ldr	r2, [pc, #200]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fc8:	e00f      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	3328      	adds	r3, #40	@ 0x28
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fd98 	bl	8007b08 <RCCEx_PLL3_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fde:	e004      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fe6:	e000      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ff2:	4b26      	ldr	r3, [pc, #152]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007002:	4a22      	ldr	r2, [pc, #136]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007004:	430b      	orrs	r3, r1
 8007006:	6553      	str	r3, [r2, #84]	@ 0x54
 8007008:	e003      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800701e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007020:	2300      	movs	r3, #0
 8007022:	677b      	str	r3, [r7, #116]	@ 0x74
 8007024:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007028:	460b      	mov	r3, r1
 800702a:	4313      	orrs	r3, r2
 800702c:	d034      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703c:	d007      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800703e:	e011      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4b12      	ldr	r3, [pc, #72]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	4a11      	ldr	r2, [pc, #68]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800704a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800704c:	e00e      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800704e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007052:	3308      	adds	r3, #8
 8007054:	2102      	movs	r1, #2
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fca4 	bl	80079a4 <RCCEx_PLL2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007062:	e003      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800706a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10d      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007074:	4b05      	ldr	r3, [pc, #20]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007078:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007082:	4a02      	ldr	r2, [pc, #8]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007084:	430b      	orrs	r3, r1
 8007086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007088:	e006      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800708a:	bf00      	nop
 800708c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80070a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070a6:	2300      	movs	r3, #0
 80070a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80070ae:	460b      	mov	r3, r1
 80070b0:	4313      	orrs	r3, r2
 80070b2:	d00c      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b8:	3328      	adds	r3, #40	@ 0x28
 80070ba:	2102      	movs	r1, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fd23 	bl	8007b08 <RCCEx_PLL3_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070da:	663b      	str	r3, [r7, #96]	@ 0x60
 80070dc:	2300      	movs	r3, #0
 80070de:	667b      	str	r3, [r7, #100]	@ 0x64
 80070e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d038      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f6:	d018      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070fc:	d811      	bhi.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007102:	d014      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007108:	d80b      	bhi.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d011      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800710e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007112:	d106      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007114:	4bc3      	ldr	r3, [pc, #780]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	4ac2      	ldr	r2, [pc, #776]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800711a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800711e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007120:	e008      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007128:	e004      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800713c:	4bb9      	ldr	r3, [pc, #740]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800713e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007140:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800714c:	4ab5      	ldr	r2, [pc, #724]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800714e:	430b      	orrs	r3, r1
 8007150:	6553      	str	r3, [r2, #84]	@ 0x54
 8007152:	e003      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800715c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007168:	65bb      	str	r3, [r7, #88]	@ 0x58
 800716a:	2300      	movs	r3, #0
 800716c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800716e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007172:	460b      	mov	r3, r1
 8007174:	4313      	orrs	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007178:	4baa      	ldr	r3, [pc, #680]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800717a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800717c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007186:	4aa7      	ldr	r2, [pc, #668]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007188:	430b      	orrs	r3, r1
 800718a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007198:	653b      	str	r3, [r7, #80]	@ 0x50
 800719a:	2300      	movs	r3, #0
 800719c:	657b      	str	r3, [r7, #84]	@ 0x54
 800719e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80071a2:	460b      	mov	r3, r1
 80071a4:	4313      	orrs	r3, r2
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80071a8:	4b9e      	ldr	r3, [pc, #632]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80071b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071b8:	4a9a      	ldr	r2, [pc, #616]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ba:	430b      	orrs	r3, r1
 80071bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80071ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071cc:	2300      	movs	r3, #0
 80071ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071d4:	460b      	mov	r3, r1
 80071d6:	4313      	orrs	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071da:	4b92      	ldr	r3, [pc, #584]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071e8:	4a8e      	ldr	r2, [pc, #568]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ea:	430b      	orrs	r3, r1
 80071ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80071fc:	2300      	movs	r3, #0
 80071fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007200:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007204:	460b      	mov	r3, r1
 8007206:	4313      	orrs	r3, r2
 8007208:	d00e      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800720a:	4b86      	ldr	r3, [pc, #536]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	4a85      	ldr	r2, [pc, #532]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007210:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007214:	6113      	str	r3, [r2, #16]
 8007216:	4b83      	ldr	r3, [pc, #524]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007218:	6919      	ldr	r1, [r3, #16]
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007222:	4a80      	ldr	r2, [pc, #512]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007224:	430b      	orrs	r3, r1
 8007226:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007234:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007236:	2300      	movs	r3, #0
 8007238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800723a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800723e:	460b      	mov	r3, r1
 8007240:	4313      	orrs	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007244:	4b77      	ldr	r3, [pc, #476]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007248:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007252:	4a74      	ldr	r2, [pc, #464]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007254:	430b      	orrs	r3, r1
 8007256:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007264:	633b      	str	r3, [r7, #48]	@ 0x30
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
 800726a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800726e:	460b      	mov	r3, r1
 8007270:	4313      	orrs	r3, r2
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007274:	4b6b      	ldr	r3, [pc, #428]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007278:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007284:	4a67      	ldr	r2, [pc, #412]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	2100      	movs	r1, #0
 8007294:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800729c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d011      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072aa:	3308      	adds	r3, #8
 80072ac:	2100      	movs	r1, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fb78 	bl	80079a4 <RCCEx_PLL2_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	2100      	movs	r1, #0
 80072d4:	6239      	str	r1, [r7, #32]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
 80072dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072e0:	460b      	mov	r3, r1
 80072e2:	4313      	orrs	r3, r2
 80072e4:	d011      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	3308      	adds	r3, #8
 80072ec:	2101      	movs	r1, #1
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fb58 	bl	80079a4 <RCCEx_PLL2_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	2100      	movs	r1, #0
 8007314:	61b9      	str	r1, [r7, #24]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007320:	460b      	mov	r3, r1
 8007322:	4313      	orrs	r3, r2
 8007324:	d011      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	3308      	adds	r3, #8
 800732c:	2102      	movs	r1, #2
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fb38 	bl	80079a4 <RCCEx_PLL2_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	2100      	movs	r1, #0
 8007354:	6139      	str	r1, [r7, #16]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007360:	460b      	mov	r3, r1
 8007362:	4313      	orrs	r3, r2
 8007364:	d011      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736a:	3328      	adds	r3, #40	@ 0x28
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fbca 	bl	8007b08 <RCCEx_PLL3_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	2100      	movs	r1, #0
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073a0:	460b      	mov	r3, r1
 80073a2:	4313      	orrs	r3, r2
 80073a4:	d011      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	3328      	adds	r3, #40	@ 0x28
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fbaa 	bl	8007b08 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	2100      	movs	r1, #0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	607b      	str	r3, [r7, #4]
 80073dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d011      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	3328      	adds	r3, #40	@ 0x28
 80073ec:	2102      	movs	r1, #2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fb8a 	bl	8007b08 <RCCEx_PLL3_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800740a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	e000      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
}
 8007418:	4618      	mov	r0, r3
 800741a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800741e:	46bd      	mov	sp, r7
 8007420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007424:	58024400 	.word	0x58024400

08007428 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800742c:	f7fe fd96 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4904      	ldr	r1, [pc, #16]	@ (8007450 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007448:	4618      	mov	r0, r3
 800744a:	bd80      	pop	{r7, pc}
 800744c:	58024400 	.word	0x58024400
 8007450:	0800b708 	.word	0x0800b708

08007454 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007454:	b480      	push	{r7}
 8007456:	b089      	sub	sp, #36	@ 0x24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800745c:	4ba1      	ldr	r3, [pc, #644]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007466:	4b9f      	ldr	r3, [pc, #636]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746a:	0b1b      	lsrs	r3, r3, #12
 800746c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007470:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007472:	4b9c      	ldr	r3, [pc, #624]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	091b      	lsrs	r3, r3, #4
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800747e:	4b99      	ldr	r3, [pc, #612]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	08db      	lsrs	r3, r3, #3
 8007484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8111 	beq.w	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	f000 8083 	beq.w	80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	f200 80a1 	bhi.w	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d056      	beq.n	800756c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074be:	e099      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c0:	4b88      	ldr	r3, [pc, #544]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02d      	beq.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074cc:	4b85      	ldr	r3, [pc, #532]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	08db      	lsrs	r3, r3, #3
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	4a84      	ldr	r2, [pc, #528]	@ (80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
 80074dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b7b      	ldr	r3, [pc, #492]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007526:	e087      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	4b6a      	ldr	r3, [pc, #424]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754a:	ed97 6a03 	vldr	s12, [r7, #12]
 800754e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800755e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756a:	e065      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800757a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757e:	4b59      	ldr	r3, [pc, #356]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007592:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ae:	e043      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c2:	4b48      	ldr	r3, [pc, #288]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f2:	e021      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007606:	4b37      	ldr	r3, [pc, #220]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007616:	ed97 6a03 	vldr	s12, [r7, #12]
 800761a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800761e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007636:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007638:	4b2a      	ldr	r3, [pc, #168]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	0a5b      	lsrs	r3, r3, #9
 800763e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800764e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007652:	edd7 6a07 	vldr	s13, [r7, #28]
 8007656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	ee17 2a90 	vmov	r2, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007666:	4b1f      	ldr	r3, [pc, #124]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800767c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007680:	edd7 6a07 	vldr	s13, [r7, #28]
 8007684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768c:	ee17 2a90 	vmov	r2, s15
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007694:	4b13      	ldr	r3, [pc, #76]	@ (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ba:	ee17 2a90 	vmov	r2, s15
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076c2:	e008      	b.n	80076d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
}
 80076d6:	bf00      	nop
 80076d8:	3724      	adds	r7, #36	@ 0x24
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	46000000 	.word	0x46000000
 80076f0:	4c742400 	.word	0x4c742400
 80076f4:	4a742400 	.word	0x4a742400
 80076f8:	4bb71b00 	.word	0x4bb71b00

080076fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	@ 0x24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007704:	4ba1      	ldr	r3, [pc, #644]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800770e:	4b9f      	ldr	r3, [pc, #636]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007712:	0d1b      	lsrs	r3, r3, #20
 8007714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007718:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800771a:	4b9c      	ldr	r3, [pc, #624]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007726:	4b99      	ldr	r3, [pc, #612]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772a:	08db      	lsrs	r3, r3, #3
 800772c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8111 	beq.w	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b02      	cmp	r3, #2
 800774e:	f000 8083 	beq.w	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b02      	cmp	r3, #2
 8007756:	f200 80a1 	bhi.w	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d056      	beq.n	8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007766:	e099      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007768:	4b88      	ldr	r3, [pc, #544]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d02d      	beq.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007774:	4b85      	ldr	r3, [pc, #532]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	4a84      	ldr	r2, [pc, #528]	@ (8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b7b      	ldr	r3, [pc, #492]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077ce:	e087      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007998 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e2:	4b6a      	ldr	r3, [pc, #424]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007812:	e065      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800799c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b59      	ldr	r3, [pc, #356]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a03 	vldr	s12, [r7, #12]
 800783a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007856:	e043      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80079a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b48      	ldr	r3, [pc, #288]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a03 	vldr	s12, [r7, #12]
 800787e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789a:	e021      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800799c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ae:	4b37      	ldr	r3, [pc, #220]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078be:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078e0:	4b2a      	ldr	r3, [pc, #168]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	0a5b      	lsrs	r3, r3, #9
 80078e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007906:	ee17 2a90 	vmov	r2, s15
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800790e:	4b1f      	ldr	r3, [pc, #124]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007920:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007928:	edd7 6a07 	vldr	s13, [r7, #28]
 800792c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007934:	ee17 2a90 	vmov	r2, s15
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800793c:	4b13      	ldr	r3, [pc, #76]	@ (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	0e1b      	lsrs	r3, r3, #24
 8007942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007956:	edd7 6a07 	vldr	s13, [r7, #28]
 800795a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007962:	ee17 2a90 	vmov	r2, s15
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800796a:	e008      	b.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
}
 800797e:	bf00      	nop
 8007980:	3724      	adds	r7, #36	@ 0x24
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	58024400 	.word	0x58024400
 8007990:	03d09000 	.word	0x03d09000
 8007994:	46000000 	.word	0x46000000
 8007998:	4c742400 	.word	0x4c742400
 800799c:	4a742400 	.word	0x4a742400
 80079a0:	4bb71b00 	.word	0x4bb71b00

080079a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079b2:	4b53      	ldr	r3, [pc, #332]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d101      	bne.n	80079c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e099      	b.n	8007af6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fa ffb9 	bl	8002944 <HAL_GetTick>
 80079d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079d6:	f7fa ffb5 	bl	8002944 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e086      	b.n	8007af6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079e8:	4b45      	ldr	r3, [pc, #276]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079f4:	4b42      	ldr	r3, [pc, #264]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	031b      	lsls	r3, r3, #12
 8007a02:	493f      	ldr	r1, [pc, #252]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	025b      	lsls	r3, r3, #9
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	041b      	lsls	r3, r3, #16
 8007a26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a38:	4931      	ldr	r1, [pc, #196]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a3e:	4b30      	ldr	r3, [pc, #192]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	492d      	ldr	r1, [pc, #180]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a50:	4b2b      	ldr	r3, [pc, #172]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	f023 0220 	bic.w	r2, r3, #32
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	4928      	ldr	r1, [pc, #160]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a62:	4b27      	ldr	r3, [pc, #156]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a66:	4a26      	ldr	r2, [pc, #152]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a6e:	4b24      	ldr	r3, [pc, #144]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a72:	4b24      	ldr	r3, [pc, #144]	@ (8007b04 <RCCEx_PLL2_Config+0x160>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	69d2      	ldr	r2, [r2, #28]
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	4920      	ldr	r1, [pc, #128]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a82:	4b1f      	ldr	r3, [pc, #124]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	4a1e      	ldr	r2, [pc, #120]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	f043 0310 	orr.w	r3, r3, #16
 8007a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a94:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	4a19      	ldr	r2, [pc, #100]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007aa0:	e00f      	b.n	8007ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007aa8:	4b15      	ldr	r3, [pc, #84]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	4a14      	ldr	r2, [pc, #80]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ab4:	e005      	b.n	8007ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ab6:	4b12      	ldr	r3, [pc, #72]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	4a11      	ldr	r2, [pc, #68]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007ac8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7fa ff39 	bl	8002944 <HAL_GetTick>
 8007ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ad4:	e008      	b.n	8007ae8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ad6:	f7fa ff35 	bl	8002944 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e006      	b.n	8007af6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ae8:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	58024400 	.word	0x58024400
 8007b04:	ffff0007 	.word	0xffff0007

08007b08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b16:	4b53      	ldr	r3, [pc, #332]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d101      	bne.n	8007b26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e099      	b.n	8007c5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b26:	4b4f      	ldr	r3, [pc, #316]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a4e      	ldr	r2, [pc, #312]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b32:	f7fa ff07 	bl	8002944 <HAL_GetTick>
 8007b36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b38:	e008      	b.n	8007b4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b3a:	f7fa ff03 	bl	8002944 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e086      	b.n	8007c5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b4c:	4b45      	ldr	r3, [pc, #276]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f0      	bne.n	8007b3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b58:	4b42      	ldr	r3, [pc, #264]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	051b      	lsls	r3, r3, #20
 8007b66:	493f      	ldr	r1, [pc, #252]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	025b      	lsls	r3, r3, #9
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	061b      	lsls	r3, r3, #24
 8007b98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b9c:	4931      	ldr	r1, [pc, #196]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ba2:	4b30      	ldr	r3, [pc, #192]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	492d      	ldr	r1, [pc, #180]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	4928      	ldr	r1, [pc, #160]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bc6:	4b27      	ldr	r3, [pc, #156]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	4a26      	ldr	r2, [pc, #152]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bd2:	4b24      	ldr	r3, [pc, #144]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd6:	4b24      	ldr	r3, [pc, #144]	@ (8007c68 <RCCEx_PLL3_Config+0x160>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	69d2      	ldr	r2, [r2, #28]
 8007bde:	00d2      	lsls	r2, r2, #3
 8007be0:	4920      	ldr	r1, [pc, #128]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007be6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bea:	4a1e      	ldr	r2, [pc, #120]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	4a19      	ldr	r2, [pc, #100]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c04:	e00f      	b.n	8007c26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d106      	bne.n	8007c1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c0c:	4b15      	ldr	r3, [pc, #84]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	4a14      	ldr	r2, [pc, #80]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c18:	e005      	b.n	8007c26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c1a:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	4a11      	ldr	r2, [pc, #68]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c26:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c32:	f7fa fe87 	bl	8002944 <HAL_GetTick>
 8007c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c38:	e008      	b.n	8007c4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c3a:	f7fa fe83 	bl	8002944 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e006      	b.n	8007c5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c4c:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400
 8007c68:	ffff0007 	.word	0xffff0007

08007c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e049      	b.n	8007d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7fa f8aa 	bl	8001dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f000 fd50 	bl	8008750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d001      	beq.n	8007d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e054      	b.n	8007dde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a26      	ldr	r2, [pc, #152]	@ (8007dec <HAL_TIM_Base_Start_IT+0xd0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d022      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5e:	d01d      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a22      	ldr	r2, [pc, #136]	@ (8007df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d018      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a21      	ldr	r2, [pc, #132]	@ (8007df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a1f      	ldr	r2, [pc, #124]	@ (8007df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00e      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1e      	ldr	r2, [pc, #120]	@ (8007dfc <HAL_TIM_Base_Start_IT+0xe0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d009      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e00 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d004      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1b      	ldr	r2, [pc, #108]	@ (8007e04 <HAL_TIM_Base_Start_IT+0xe8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d115      	bne.n	8007dc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	4b19      	ldr	r3, [pc, #100]	@ (8007e08 <HAL_TIM_Base_Start_IT+0xec>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b06      	cmp	r3, #6
 8007dac:	d015      	beq.n	8007dda <HAL_TIM_Base_Start_IT+0xbe>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db4:	d011      	beq.n	8007dda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0201 	orr.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc6:	e008      	b.n	8007dda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e000      	b.n	8007ddc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40001800 	.word	0x40001800
 8007e04:	40014000 	.word	0x40014000
 8007e08:	00010007 	.word	0x00010007

08007e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e049      	b.n	8007eb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7fa f8dc 	bl	8001ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f000 fc80 	bl	8008750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <HAL_TIM_PWM_Start+0x24>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	e03c      	b.n	8007f5a <HAL_TIM_PWM_Start+0x9e>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d109      	bne.n	8007efa <HAL_TIM_PWM_Start+0x3e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	e02f      	b.n	8007f5a <HAL_TIM_PWM_Start+0x9e>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d109      	bne.n	8007f14 <HAL_TIM_PWM_Start+0x58>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	e022      	b.n	8007f5a <HAL_TIM_PWM_Start+0x9e>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b0c      	cmp	r3, #12
 8007f18:	d109      	bne.n	8007f2e <HAL_TIM_PWM_Start+0x72>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	bf14      	ite	ne
 8007f26:	2301      	movne	r3, #1
 8007f28:	2300      	moveq	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	e015      	b.n	8007f5a <HAL_TIM_PWM_Start+0x9e>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b10      	cmp	r3, #16
 8007f32:	d109      	bne.n	8007f48 <HAL_TIM_PWM_Start+0x8c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	bf14      	ite	ne
 8007f40:	2301      	movne	r3, #1
 8007f42:	2300      	moveq	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	e008      	b.n	8007f5a <HAL_TIM_PWM_Start+0x9e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e0a1      	b.n	80080a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <HAL_TIM_PWM_Start+0xb6>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f70:	e023      	b.n	8007fba <HAL_TIM_PWM_Start+0xfe>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_PWM_Start+0xc6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f80:	e01b      	b.n	8007fba <HAL_TIM_PWM_Start+0xfe>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d104      	bne.n	8007f92 <HAL_TIM_PWM_Start+0xd6>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f90:	e013      	b.n	8007fba <HAL_TIM_PWM_Start+0xfe>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b0c      	cmp	r3, #12
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_PWM_Start+0xe6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fa0:	e00b      	b.n	8007fba <HAL_TIM_PWM_Start+0xfe>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d104      	bne.n	8007fb2 <HAL_TIM_PWM_Start+0xf6>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fb0:	e003      	b.n	8007fba <HAL_TIM_PWM_Start+0xfe>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 ffde 	bl	8008f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a38      	ldr	r2, [pc, #224]	@ (80080b0 <HAL_TIM_PWM_Start+0x1f4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <HAL_TIM_PWM_Start+0x13e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a37      	ldr	r2, [pc, #220]	@ (80080b4 <HAL_TIM_PWM_Start+0x1f8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00e      	beq.n	8007ffa <HAL_TIM_PWM_Start+0x13e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a35      	ldr	r2, [pc, #212]	@ (80080b8 <HAL_TIM_PWM_Start+0x1fc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d009      	beq.n	8007ffa <HAL_TIM_PWM_Start+0x13e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a34      	ldr	r2, [pc, #208]	@ (80080bc <HAL_TIM_PWM_Start+0x200>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d004      	beq.n	8007ffa <HAL_TIM_PWM_Start+0x13e>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a32      	ldr	r2, [pc, #200]	@ (80080c0 <HAL_TIM_PWM_Start+0x204>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d101      	bne.n	8007ffe <HAL_TIM_PWM_Start+0x142>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <HAL_TIM_PWM_Start+0x144>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a25      	ldr	r2, [pc, #148]	@ (80080b0 <HAL_TIM_PWM_Start+0x1f4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d022      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008026:	d01d      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a25      	ldr	r2, [pc, #148]	@ (80080c4 <HAL_TIM_PWM_Start+0x208>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d018      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a24      	ldr	r2, [pc, #144]	@ (80080c8 <HAL_TIM_PWM_Start+0x20c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d013      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a22      	ldr	r2, [pc, #136]	@ (80080cc <HAL_TIM_PWM_Start+0x210>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00e      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1a      	ldr	r2, [pc, #104]	@ (80080b4 <HAL_TIM_PWM_Start+0x1f8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d009      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1e      	ldr	r2, [pc, #120]	@ (80080d0 <HAL_TIM_PWM_Start+0x214>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_TIM_PWM_Start+0x1a8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a16      	ldr	r2, [pc, #88]	@ (80080b8 <HAL_TIM_PWM_Start+0x1fc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d115      	bne.n	8008090 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	4b1a      	ldr	r3, [pc, #104]	@ (80080d4 <HAL_TIM_PWM_Start+0x218>)
 800806c:	4013      	ands	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b06      	cmp	r3, #6
 8008074:	d015      	beq.n	80080a2 <HAL_TIM_PWM_Start+0x1e6>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800807c:	d011      	beq.n	80080a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808e:	e008      	b.n	80080a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40010400 	.word	0x40010400
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40014400 	.word	0x40014400
 80080c0:	40014800 	.word	0x40014800
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40001800 	.word	0x40001800
 80080d4:	00010007 	.word	0x00010007

080080d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d020      	beq.n	800813c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01b      	beq.n	800813c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0202 	mvn.w	r2, #2
 800810c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 faf6 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fae8 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 faf9 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d020      	beq.n	8008188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01b      	beq.n	8008188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0204 	mvn.w	r2, #4
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fad0 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fac2 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fad3 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d020      	beq.n	80081d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01b      	beq.n	80081d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0208 	mvn.w	r2, #8
 80081a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 faaa 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa9c 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 faad 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d020      	beq.n	8008220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01b      	beq.n	8008220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0210 	mvn.w	r2, #16
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2208      	movs	r2, #8
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa84 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa76 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fa87 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00c      	beq.n	8008244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0201 	mvn.w	r2, #1
 800823c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7f9 fb68 	bl	8001914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824a:	2b00      	cmp	r3, #0
 800824c:	d104      	bne.n	8008258 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00c      	beq.n	8008272 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800826a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 ffc5 	bl	80091fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800828e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 ffbd 	bl	8009210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fa41 	bl	800873c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0220 	mvn.w	r2, #32
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 ff85 	bl	80091e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008302:	2302      	movs	r3, #2
 8008304:	e0ff      	b.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b14      	cmp	r3, #20
 8008312:	f200 80f0 	bhi.w	80084f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008316:	a201      	add	r2, pc, #4	@ (adr r2, 800831c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008371 	.word	0x08008371
 8008320:	080084f7 	.word	0x080084f7
 8008324:	080084f7 	.word	0x080084f7
 8008328:	080084f7 	.word	0x080084f7
 800832c:	080083b1 	.word	0x080083b1
 8008330:	080084f7 	.word	0x080084f7
 8008334:	080084f7 	.word	0x080084f7
 8008338:	080084f7 	.word	0x080084f7
 800833c:	080083f3 	.word	0x080083f3
 8008340:	080084f7 	.word	0x080084f7
 8008344:	080084f7 	.word	0x080084f7
 8008348:	080084f7 	.word	0x080084f7
 800834c:	08008433 	.word	0x08008433
 8008350:	080084f7 	.word	0x080084f7
 8008354:	080084f7 	.word	0x080084f7
 8008358:	080084f7 	.word	0x080084f7
 800835c:	08008475 	.word	0x08008475
 8008360:	080084f7 	.word	0x080084f7
 8008364:	080084f7 	.word	0x080084f7
 8008368:	080084f7 	.word	0x080084f7
 800836c:	080084b5 	.word	0x080084b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fa90 	bl	800889c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0208 	orr.w	r2, r2, #8
 800838a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0204 	bic.w	r2, r2, #4
 800839a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6999      	ldr	r1, [r3, #24]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	691a      	ldr	r2, [r3, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	619a      	str	r2, [r3, #24]
      break;
 80083ae:	e0a5      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fb00 	bl	80089bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6999      	ldr	r1, [r3, #24]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	021a      	lsls	r2, r3, #8
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	619a      	str	r2, [r3, #24]
      break;
 80083f0:	e084      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fb69 	bl	8008ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69da      	ldr	r2, [r3, #28]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0208 	orr.w	r2, r2, #8
 800840c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0204 	bic.w	r2, r2, #4
 800841c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69d9      	ldr	r1, [r3, #28]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	61da      	str	r2, [r3, #28]
      break;
 8008430:	e064      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fbd1 	bl	8008be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800844c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69da      	ldr	r2, [r3, #28]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800845c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69d9      	ldr	r1, [r3, #28]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	021a      	lsls	r2, r3, #8
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	61da      	str	r2, [r3, #28]
      break;
 8008472:	e043      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fc1a 	bl	8008cb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0208 	orr.w	r2, r2, #8
 800848e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0204 	bic.w	r2, r2, #4
 800849e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084b2:	e023      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fc5e 	bl	8008d7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	021a      	lsls	r2, r3, #8
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084f4:	e002      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	75fb      	strb	r3, [r7, #23]
      break;
 80084fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_TIM_ConfigClockSource+0x1c>
 8008528:	2302      	movs	r3, #2
 800852a:	e0dc      	b.n	80086e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	4b6a      	ldr	r3, [pc, #424]	@ (80086f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008548:	4013      	ands	r3, r2
 800854a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a64      	ldr	r2, [pc, #400]	@ (80086f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	f000 80a9 	beq.w	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 8008568:	4a62      	ldr	r2, [pc, #392]	@ (80086f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800856a:	4293      	cmp	r3, r2
 800856c:	f200 80ae 	bhi.w	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 8008570:	4a61      	ldr	r2, [pc, #388]	@ (80086f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008572:	4293      	cmp	r3, r2
 8008574:	f000 80a1 	beq.w	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 8008578:	4a5f      	ldr	r2, [pc, #380]	@ (80086f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	f200 80a6 	bhi.w	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 8008580:	4a5e      	ldr	r2, [pc, #376]	@ (80086fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8008582:	4293      	cmp	r3, r2
 8008584:	f000 8099 	beq.w	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 8008588:	4a5c      	ldr	r2, [pc, #368]	@ (80086fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f200 809e 	bhi.w	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 8008590:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008594:	f000 8091 	beq.w	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 8008598:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800859c:	f200 8096 	bhi.w	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085a4:	f000 8089 	beq.w	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 80085a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ac:	f200 808e 	bhi.w	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b4:	d03e      	beq.n	8008634 <HAL_TIM_ConfigClockSource+0x124>
 80085b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ba:	f200 8087 	bhi.w	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c2:	f000 8086 	beq.w	80086d2 <HAL_TIM_ConfigClockSource+0x1c2>
 80085c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ca:	d87f      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085cc:	2b70      	cmp	r3, #112	@ 0x70
 80085ce:	d01a      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0xf6>
 80085d0:	2b70      	cmp	r3, #112	@ 0x70
 80085d2:	d87b      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085d4:	2b60      	cmp	r3, #96	@ 0x60
 80085d6:	d050      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x16a>
 80085d8:	2b60      	cmp	r3, #96	@ 0x60
 80085da:	d877      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085dc:	2b50      	cmp	r3, #80	@ 0x50
 80085de:	d03c      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x14a>
 80085e0:	2b50      	cmp	r3, #80	@ 0x50
 80085e2:	d873      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085e4:	2b40      	cmp	r3, #64	@ 0x40
 80085e6:	d058      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x18a>
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	d86f      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085ec:	2b30      	cmp	r3, #48	@ 0x30
 80085ee:	d064      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 80085f0:	2b30      	cmp	r3, #48	@ 0x30
 80085f2:	d86b      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d060      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d867      	bhi.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05c      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 8008600:	2b10      	cmp	r3, #16
 8008602:	d05a      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x1aa>
 8008604:	e062      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008616:	f000 fc95 	bl	8008f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	609a      	str	r2, [r3, #8]
      break;
 8008632:	e04f      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008644:	f000 fc7e 	bl	8008f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008656:	609a      	str	r2, [r3, #8]
      break;
 8008658:	e03c      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008666:	461a      	mov	r2, r3
 8008668:	f000 fbee 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2150      	movs	r1, #80	@ 0x50
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fc48 	bl	8008f08 <TIM_ITRx_SetConfig>
      break;
 8008678:	e02c      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008686:	461a      	mov	r2, r3
 8008688:	f000 fc0d 	bl	8008ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2160      	movs	r1, #96	@ 0x60
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fc38 	bl	8008f08 <TIM_ITRx_SetConfig>
      break;
 8008698:	e01c      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a6:	461a      	mov	r2, r3
 80086a8:	f000 fbce 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2140      	movs	r1, #64	@ 0x40
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fc28 	bl	8008f08 <TIM_ITRx_SetConfig>
      break;
 80086b8:	e00c      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f000 fc1f 	bl	8008f08 <TIM_ITRx_SetConfig>
      break;
 80086ca:	e003      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	73fb      	strb	r3, [r7, #15]
      break;
 80086d0:	e000      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80086d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	ffceff88 	.word	0xffceff88
 80086f4:	00100040 	.word	0x00100040
 80086f8:	00100030 	.word	0x00100030
 80086fc:	00100020 	.word	0x00100020

08008700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a46      	ldr	r2, [pc, #280]	@ (800887c <TIM_Base_SetConfig+0x12c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876e:	d00f      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a43      	ldr	r2, [pc, #268]	@ (8008880 <TIM_Base_SetConfig+0x130>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00b      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a42      	ldr	r2, [pc, #264]	@ (8008884 <TIM_Base_SetConfig+0x134>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a41      	ldr	r2, [pc, #260]	@ (8008888 <TIM_Base_SetConfig+0x138>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a40      	ldr	r2, [pc, #256]	@ (800888c <TIM_Base_SetConfig+0x13c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d108      	bne.n	80087a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a35      	ldr	r2, [pc, #212]	@ (800887c <TIM_Base_SetConfig+0x12c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01f      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b0:	d01b      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a32      	ldr	r2, [pc, #200]	@ (8008880 <TIM_Base_SetConfig+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d017      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a31      	ldr	r2, [pc, #196]	@ (8008884 <TIM_Base_SetConfig+0x134>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a30      	ldr	r2, [pc, #192]	@ (8008888 <TIM_Base_SetConfig+0x138>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00f      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2f      	ldr	r2, [pc, #188]	@ (800888c <TIM_Base_SetConfig+0x13c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00b      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008890 <TIM_Base_SetConfig+0x140>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d007      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008894 <TIM_Base_SetConfig+0x144>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d003      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008898 <TIM_Base_SetConfig+0x148>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d108      	bne.n	80087fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a16      	ldr	r2, [pc, #88]	@ (800887c <TIM_Base_SetConfig+0x12c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00f      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a18      	ldr	r2, [pc, #96]	@ (800888c <TIM_Base_SetConfig+0x13c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00b      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a17      	ldr	r2, [pc, #92]	@ (8008890 <TIM_Base_SetConfig+0x140>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d007      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a16      	ldr	r2, [pc, #88]	@ (8008894 <TIM_Base_SetConfig+0x144>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <TIM_Base_SetConfig+0x148>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d103      	bne.n	8008850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d105      	bne.n	800886e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f023 0201 	bic.w	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	611a      	str	r2, [r3, #16]
  }
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40010400 	.word	0x40010400
 8008890:	40014000 	.word	0x40014000
 8008894:	40014400 	.word	0x40014400
 8008898:	40014800 	.word	0x40014800

0800889c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	f023 0201 	bic.w	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4b37      	ldr	r3, [pc, #220]	@ (80089a4 <TIM_OC1_SetConfig+0x108>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 0302 	bic.w	r3, r3, #2
 80088e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a2d      	ldr	r2, [pc, #180]	@ (80089a8 <TIM_OC1_SetConfig+0x10c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00f      	beq.n	8008918 <TIM_OC1_SetConfig+0x7c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a2c      	ldr	r2, [pc, #176]	@ (80089ac <TIM_OC1_SetConfig+0x110>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00b      	beq.n	8008918 <TIM_OC1_SetConfig+0x7c>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a2b      	ldr	r2, [pc, #172]	@ (80089b0 <TIM_OC1_SetConfig+0x114>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d007      	beq.n	8008918 <TIM_OC1_SetConfig+0x7c>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a2a      	ldr	r2, [pc, #168]	@ (80089b4 <TIM_OC1_SetConfig+0x118>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC1_SetConfig+0x7c>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a29      	ldr	r2, [pc, #164]	@ (80089b8 <TIM_OC1_SetConfig+0x11c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d10c      	bne.n	8008932 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f023 0308 	bic.w	r3, r3, #8
 800891e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	4313      	orrs	r3, r2
 8008928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f023 0304 	bic.w	r3, r3, #4
 8008930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a1c      	ldr	r2, [pc, #112]	@ (80089a8 <TIM_OC1_SetConfig+0x10c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00f      	beq.n	800895a <TIM_OC1_SetConfig+0xbe>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a1b      	ldr	r2, [pc, #108]	@ (80089ac <TIM_OC1_SetConfig+0x110>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00b      	beq.n	800895a <TIM_OC1_SetConfig+0xbe>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a1a      	ldr	r2, [pc, #104]	@ (80089b0 <TIM_OC1_SetConfig+0x114>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d007      	beq.n	800895a <TIM_OC1_SetConfig+0xbe>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a19      	ldr	r2, [pc, #100]	@ (80089b4 <TIM_OC1_SetConfig+0x118>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_OC1_SetConfig+0xbe>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a18      	ldr	r2, [pc, #96]	@ (80089b8 <TIM_OC1_SetConfig+0x11c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d111      	bne.n	800897e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	621a      	str	r2, [r3, #32]
}
 8008998:	bf00      	nop
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	fffeff8f 	.word	0xfffeff8f
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40010400 	.word	0x40010400
 80089b0:	40014000 	.word	0x40014000
 80089b4:	40014400 	.word	0x40014400
 80089b8:	40014800 	.word	0x40014800

080089bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	f023 0210 	bic.w	r2, r3, #16
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4b34      	ldr	r3, [pc, #208]	@ (8008ab8 <TIM_OC2_SetConfig+0xfc>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f023 0320 	bic.w	r3, r3, #32
 8008a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a29      	ldr	r2, [pc, #164]	@ (8008abc <TIM_OC2_SetConfig+0x100>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_OC2_SetConfig+0x68>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a28      	ldr	r2, [pc, #160]	@ (8008ac0 <TIM_OC2_SetConfig+0x104>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d10d      	bne.n	8008a40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a1e      	ldr	r2, [pc, #120]	@ (8008abc <TIM_OC2_SetConfig+0x100>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d00f      	beq.n	8008a68 <TIM_OC2_SetConfig+0xac>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ac0 <TIM_OC2_SetConfig+0x104>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00b      	beq.n	8008a68 <TIM_OC2_SetConfig+0xac>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac4 <TIM_OC2_SetConfig+0x108>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d007      	beq.n	8008a68 <TIM_OC2_SetConfig+0xac>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac8 <TIM_OC2_SetConfig+0x10c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d003      	beq.n	8008a68 <TIM_OC2_SetConfig+0xac>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a1a      	ldr	r2, [pc, #104]	@ (8008acc <TIM_OC2_SetConfig+0x110>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d113      	bne.n	8008a90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	feff8fff 	.word	0xfeff8fff
 8008abc:	40010000 	.word	0x40010000
 8008ac0:	40010400 	.word	0x40010400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800

08008ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4b33      	ldr	r3, [pc, #204]	@ (8008bc8 <TIM_OC3_SetConfig+0xf8>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a28      	ldr	r2, [pc, #160]	@ (8008bcc <TIM_OC3_SetConfig+0xfc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d003      	beq.n	8008b36 <TIM_OC3_SetConfig+0x66>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a27      	ldr	r2, [pc, #156]	@ (8008bd0 <TIM_OC3_SetConfig+0x100>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d10d      	bne.n	8008b52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1d      	ldr	r2, [pc, #116]	@ (8008bcc <TIM_OC3_SetConfig+0xfc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00f      	beq.n	8008b7a <TIM_OC3_SetConfig+0xaa>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd0 <TIM_OC3_SetConfig+0x100>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00b      	beq.n	8008b7a <TIM_OC3_SetConfig+0xaa>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd4 <TIM_OC3_SetConfig+0x104>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d007      	beq.n	8008b7a <TIM_OC3_SetConfig+0xaa>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd8 <TIM_OC3_SetConfig+0x108>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d003      	beq.n	8008b7a <TIM_OC3_SetConfig+0xaa>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a19      	ldr	r2, [pc, #100]	@ (8008bdc <TIM_OC3_SetConfig+0x10c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d113      	bne.n	8008ba2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	621a      	str	r2, [r3, #32]
}
 8008bbc:	bf00      	nop
 8008bbe:	371c      	adds	r7, #28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	fffeff8f 	.word	0xfffeff8f
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40010400 	.word	0x40010400
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	40014400 	.word	0x40014400
 8008bdc:	40014800 	.word	0x40014800

08008be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4b24      	ldr	r3, [pc, #144]	@ (8008c9c <TIM_OC4_SetConfig+0xbc>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	031b      	lsls	r3, r3, #12
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a19      	ldr	r2, [pc, #100]	@ (8008ca0 <TIM_OC4_SetConfig+0xc0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00f      	beq.n	8008c60 <TIM_OC4_SetConfig+0x80>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a18      	ldr	r2, [pc, #96]	@ (8008ca4 <TIM_OC4_SetConfig+0xc4>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_OC4_SetConfig+0x80>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a17      	ldr	r2, [pc, #92]	@ (8008ca8 <TIM_OC4_SetConfig+0xc8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_OC4_SetConfig+0x80>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a16      	ldr	r2, [pc, #88]	@ (8008cac <TIM_OC4_SetConfig+0xcc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_OC4_SetConfig+0x80>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a15      	ldr	r2, [pc, #84]	@ (8008cb0 <TIM_OC4_SetConfig+0xd0>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d109      	bne.n	8008c74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	019b      	lsls	r3, r3, #6
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	feff8fff 	.word	0xfeff8fff
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40010400 	.word	0x40010400
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	40014400 	.word	0x40014400
 8008cb0:	40014800 	.word	0x40014800

08008cb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4b21      	ldr	r3, [pc, #132]	@ (8008d64 <TIM_OC5_SetConfig+0xb0>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008cf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	041b      	lsls	r3, r3, #16
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <TIM_OC5_SetConfig+0xb4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <TIM_OC5_SetConfig+0x76>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a17      	ldr	r2, [pc, #92]	@ (8008d6c <TIM_OC5_SetConfig+0xb8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00b      	beq.n	8008d2a <TIM_OC5_SetConfig+0x76>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a16      	ldr	r2, [pc, #88]	@ (8008d70 <TIM_OC5_SetConfig+0xbc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_OC5_SetConfig+0x76>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a15      	ldr	r2, [pc, #84]	@ (8008d74 <TIM_OC5_SetConfig+0xc0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC5_SetConfig+0x76>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a14      	ldr	r2, [pc, #80]	@ (8008d78 <TIM_OC5_SetConfig+0xc4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d109      	bne.n	8008d3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	621a      	str	r2, [r3, #32]
}
 8008d58:	bf00      	nop
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	fffeff8f 	.word	0xfffeff8f
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40010400 	.word	0x40010400
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40014400 	.word	0x40014400
 8008d78:	40014800 	.word	0x40014800

08008d7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4b22      	ldr	r3, [pc, #136]	@ (8008e30 <TIM_OC6_SetConfig+0xb4>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	051b      	lsls	r3, r3, #20
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a19      	ldr	r2, [pc, #100]	@ (8008e34 <TIM_OC6_SetConfig+0xb8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00f      	beq.n	8008df4 <TIM_OC6_SetConfig+0x78>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a18      	ldr	r2, [pc, #96]	@ (8008e38 <TIM_OC6_SetConfig+0xbc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00b      	beq.n	8008df4 <TIM_OC6_SetConfig+0x78>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a17      	ldr	r2, [pc, #92]	@ (8008e3c <TIM_OC6_SetConfig+0xc0>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d007      	beq.n	8008df4 <TIM_OC6_SetConfig+0x78>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a16      	ldr	r2, [pc, #88]	@ (8008e40 <TIM_OC6_SetConfig+0xc4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_OC6_SetConfig+0x78>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a15      	ldr	r2, [pc, #84]	@ (8008e44 <TIM_OC6_SetConfig+0xc8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d109      	bne.n	8008e08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	029b      	lsls	r3, r3, #10
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	feff8fff 	.word	0xfeff8fff
 8008e34:	40010000 	.word	0x40010000
 8008e38:	40010400 	.word	0x40010400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	40014400 	.word	0x40014400
 8008e44:	40014800 	.word	0x40014800

08008e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f023 0201 	bic.w	r2, r3, #1
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f023 030a 	bic.w	r3, r3, #10
 8008e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	621a      	str	r2, [r3, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b087      	sub	sp, #28
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f023 0210 	bic.w	r2, r3, #16
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	031b      	lsls	r3, r3, #12
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ee2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	621a      	str	r2, [r3, #32]
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4b09      	ldr	r3, [pc, #36]	@ (8008f40 <TIM_ITRx_SetConfig+0x38>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f043 0307 	orr.w	r3, r3, #7
 8008f2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	609a      	str	r2, [r3, #8]
}
 8008f32:	bf00      	nop
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	ffcfff8f 	.word	0xffcfff8f

08008f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	021a      	lsls	r2, r3, #8
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	431a      	orrs	r2, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	609a      	str	r2, [r3, #8]
}
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 031f 	and.w	r3, r3, #31
 8008f96:	2201      	movs	r2, #1
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a1a      	ldr	r2, [r3, #32]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	401a      	ands	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1a      	ldr	r2, [r3, #32]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
	...

08008fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e06d      	b.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a30      	ldr	r2, [pc, #192]	@ (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d004      	beq.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a2f      	ldr	r2, [pc, #188]	@ (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d108      	bne.n	800902e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009034:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a20      	ldr	r2, [pc, #128]	@ (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d022      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800905a:	d01d      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d018      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1c      	ldr	r2, [pc, #112]	@ (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d013      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1a      	ldr	r2, [pc, #104]	@ (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d00e      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a15      	ldr	r2, [pc, #84]	@ (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d009      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a16      	ldr	r2, [pc, #88]	@ (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d004      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a15      	ldr	r2, [pc, #84]	@ (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d10c      	bne.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800909e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	40010000 	.word	0x40010000
 80090d4:	40010400 	.word	0x40010400
 80090d8:	40000400 	.word	0x40000400
 80090dc:	40000800 	.word	0x40000800
 80090e0:	40000c00 	.word	0x40000c00
 80090e4:	40001800 	.word	0x40001800
 80090e8:	40014000 	.word	0x40014000

080090ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009104:	2302      	movs	r3, #2
 8009106:	e065      	b.n	80091d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	4313      	orrs	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4313      	orrs	r3, r2
 8009146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	4313      	orrs	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	041b      	lsls	r3, r3, #16
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a16      	ldr	r2, [pc, #88]	@ (80091e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d004      	beq.n	8009196 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a14      	ldr	r2, [pc, #80]	@ (80091e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d115      	bne.n	80091c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a0:	051b      	lsls	r3, r3, #20
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40010400 	.word	0x40010400

080091e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e042      	b.n	80092bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800923c:	2b00      	cmp	r3, #0
 800923e:	d106      	bne.n	800924e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7f9 f8f1 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2224      	movs	r2, #36	@ 0x24
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0201 	bic.w	r2, r2, #1
 8009264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f9f8 	bl	800a664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fc8d 	bl	8009b94 <UART_SetConfig>
 800927a:	4603      	mov	r3, r0
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e01b      	b.n	80092bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0201 	orr.w	r2, r2, #1
 80092b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 fa77 	bl	800a7a8 <UART_CheckIdleState>
 80092ba:	4603      	mov	r3, r0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	@ 0x28
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d17b      	bne.n	80093d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <HAL_UART_Transmit+0x26>
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e074      	b.n	80093d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2221      	movs	r2, #33	@ 0x21
 80092fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092fe:	f7f9 fb21 	bl	8002944 <HAL_GetTick>
 8009302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	88fa      	ldrh	r2, [r7, #6]
 8009310:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800931c:	d108      	bne.n	8009330 <HAL_UART_Transmit+0x6c>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	e003      	b.n	8009338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009334:	2300      	movs	r3, #0
 8009336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009338:	e030      	b.n	800939c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2200      	movs	r2, #0
 8009342:	2180      	movs	r1, #128	@ 0x80
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f001 fad9 	bl	800a8fc <UART_WaitOnFlagUntilTimeout>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2220      	movs	r2, #32
 8009354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e03d      	b.n	80093d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10b      	bne.n	800937a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009370:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	3302      	adds	r3, #2
 8009376:	61bb      	str	r3, [r7, #24]
 8009378:	e007      	b.n	800938a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	3301      	adds	r3, #1
 8009388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1c8      	bne.n	800933a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2200      	movs	r2, #0
 80093b0:	2140      	movs	r1, #64	@ 0x40
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f001 faa2 	bl	800a8fc <UART_WaitOnFlagUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e006      	b.n	80093d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	e000      	b.n	80093d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80093d6:	2302      	movs	r3, #2
  }
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3720      	adds	r7, #32
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b0ba      	sub	sp, #232	@ 0xe8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009406:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800940a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800940e:	4013      	ands	r3, r2
 8009410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d11b      	bne.n	8009454 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800941c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009420:	f003 0320 	and.w	r3, r3, #32
 8009424:	2b00      	cmp	r3, #0
 8009426:	d015      	beq.n	8009454 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800942c:	f003 0320 	and.w	r3, r3, #32
 8009430:	2b00      	cmp	r3, #0
 8009432:	d105      	bne.n	8009440 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8377 	beq.w	8009b38 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3
      }
      return;
 8009452:	e371      	b.n	8009b38 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8123 	beq.w	80096a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800945e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009462:	4b8d      	ldr	r3, [pc, #564]	@ (8009698 <HAL_UART_IRQHandler+0x2b8>)
 8009464:	4013      	ands	r3, r2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d106      	bne.n	8009478 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800946a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800946e:	4b8b      	ldr	r3, [pc, #556]	@ (800969c <HAL_UART_IRQHandler+0x2bc>)
 8009470:	4013      	ands	r3, r2
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 8116 	beq.w	80096a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d011      	beq.n	80094a8 <HAL_UART_IRQHandler+0xc8>
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2201      	movs	r2, #1
 8009496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949e:	f043 0201 	orr.w	r2, r3, #1
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d011      	beq.n	80094d8 <HAL_UART_IRQHandler+0xf8>
 80094b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2202      	movs	r2, #2
 80094c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ce:	f043 0204 	orr.w	r2, r3, #4
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d011      	beq.n	8009508 <HAL_UART_IRQHandler+0x128>
 80094e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2204      	movs	r2, #4
 80094f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094fe:	f043 0202 	orr.w	r2, r3, #2
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b00      	cmp	r3, #0
 8009512:	d017      	beq.n	8009544 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d105      	bne.n	800952c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009520:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009524:	4b5c      	ldr	r3, [pc, #368]	@ (8009698 <HAL_UART_IRQHandler+0x2b8>)
 8009526:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2208      	movs	r2, #8
 8009532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953a:	f043 0208 	orr.w	r2, r3, #8
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <HAL_UART_IRQHandler+0x196>
 8009550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00c      	beq.n	8009576 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	f043 0220 	orr.w	r2, r3, #32
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 82dd 	beq.w	8009b3c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009586:	f003 0320 	and.w	r3, r3, #32
 800958a:	2b00      	cmp	r3, #0
 800958c:	d013      	beq.n	80095b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800958e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800959a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800959e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ca:	2b40      	cmp	r3, #64	@ 0x40
 80095cc:	d005      	beq.n	80095da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d054      	beq.n	8009684 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 f9fc 	bl	800a9d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ea:	2b40      	cmp	r3, #64	@ 0x40
 80095ec:	d146      	bne.n	800967c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009604:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800960c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3308      	adds	r3, #8
 8009616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800961a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800961e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1d9      	bne.n	80095ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009640:	2b00      	cmp	r3, #0
 8009642:	d017      	beq.n	8009674 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964a:	4a15      	ldr	r2, [pc, #84]	@ (80096a0 <HAL_UART_IRQHandler+0x2c0>)
 800964c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009654:	4618      	mov	r0, r3
 8009656:	f7f9 fe33 	bl	80032c0 <HAL_DMA_Abort_IT>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d019      	beq.n	8009694 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800966e:	4610      	mov	r0, r2
 8009670:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009672:	e00f      	b.n	8009694 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa77 	bl	8009b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800967a:	e00b      	b.n	8009694 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fa73 	bl	8009b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009682:	e007      	b.n	8009694 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fa6f 	bl	8009b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009692:	e253      	b.n	8009b3c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009694:	bf00      	nop
    return;
 8009696:	e251      	b.n	8009b3c <HAL_UART_IRQHandler+0x75c>
 8009698:	10000001 	.word	0x10000001
 800969c:	04000120 	.word	0x04000120
 80096a0:	0800aaa5 	.word	0x0800aaa5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	f040 81e7 	bne.w	8009a7c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 81e0 	beq.w	8009a7c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 81d9 	beq.w	8009a7c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2210      	movs	r2, #16
 80096d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096dc:	2b40      	cmp	r3, #64	@ 0x40
 80096de:	f040 8151 	bne.w	8009984 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a96      	ldr	r2, [pc, #600]	@ (8009944 <HAL_UART_IRQHandler+0x564>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d068      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a93      	ldr	r2, [pc, #588]	@ (8009948 <HAL_UART_IRQHandler+0x568>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d061      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a91      	ldr	r2, [pc, #580]	@ (800994c <HAL_UART_IRQHandler+0x56c>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d05a      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a8e      	ldr	r2, [pc, #568]	@ (8009950 <HAL_UART_IRQHandler+0x570>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d053      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a8c      	ldr	r2, [pc, #560]	@ (8009954 <HAL_UART_IRQHandler+0x574>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d04c      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a89      	ldr	r2, [pc, #548]	@ (8009958 <HAL_UART_IRQHandler+0x578>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d045      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a87      	ldr	r2, [pc, #540]	@ (800995c <HAL_UART_IRQHandler+0x57c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d03e      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a84      	ldr	r2, [pc, #528]	@ (8009960 <HAL_UART_IRQHandler+0x580>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d037      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a82      	ldr	r2, [pc, #520]	@ (8009964 <HAL_UART_IRQHandler+0x584>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d030      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a7f      	ldr	r2, [pc, #508]	@ (8009968 <HAL_UART_IRQHandler+0x588>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d029      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a7d      	ldr	r2, [pc, #500]	@ (800996c <HAL_UART_IRQHandler+0x58c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d022      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a7a      	ldr	r2, [pc, #488]	@ (8009970 <HAL_UART_IRQHandler+0x590>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d01b      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a78      	ldr	r2, [pc, #480]	@ (8009974 <HAL_UART_IRQHandler+0x594>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d014      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a75      	ldr	r2, [pc, #468]	@ (8009978 <HAL_UART_IRQHandler+0x598>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00d      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a73      	ldr	r2, [pc, #460]	@ (800997c <HAL_UART_IRQHandler+0x59c>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d006      	beq.n	80097c2 <HAL_UART_IRQHandler+0x3e2>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a70      	ldr	r2, [pc, #448]	@ (8009980 <HAL_UART_IRQHandler+0x5a0>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d106      	bne.n	80097d0 <HAL_UART_IRQHandler+0x3f0>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	e005      	b.n	80097dc <HAL_UART_IRQHandler+0x3fc>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 81ab 	beq.w	8009b40 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097f4:	429a      	cmp	r2, r3
 80097f6:	f080 81a3 	bcs.w	8009b40 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009800:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009810:	f000 8087 	beq.w	8009922 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009828:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800982c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800983e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009842:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009846:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800984a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1da      	bne.n	8009814 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800986e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009870:	f023 0301 	bic.w	r3, r3, #1
 8009874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009882:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009886:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800988a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e1      	bne.n	800985e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3308      	adds	r3, #8
 80098ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1e3      	bne.n	800989a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098f0:	f023 0310 	bic.w	r3, r3, #16
 80098f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009902:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009904:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009908:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e4      	bne.n	80098e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800991c:	4618      	mov	r0, r3
 800991e:	f7f9 f9b1 	bl	8002c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2202      	movs	r2, #2
 8009926:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009934:	b29b      	uxth	r3, r3
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	b29b      	uxth	r3, r3
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f91d 	bl	8009b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009942:	e0fd      	b.n	8009b40 <HAL_UART_IRQHandler+0x760>
 8009944:	40020010 	.word	0x40020010
 8009948:	40020028 	.word	0x40020028
 800994c:	40020040 	.word	0x40020040
 8009950:	40020058 	.word	0x40020058
 8009954:	40020070 	.word	0x40020070
 8009958:	40020088 	.word	0x40020088
 800995c:	400200a0 	.word	0x400200a0
 8009960:	400200b8 	.word	0x400200b8
 8009964:	40020410 	.word	0x40020410
 8009968:	40020428 	.word	0x40020428
 800996c:	40020440 	.word	0x40020440
 8009970:	40020458 	.word	0x40020458
 8009974:	40020470 	.word	0x40020470
 8009978:	40020488 	.word	0x40020488
 800997c:	400204a0 	.word	0x400204a0
 8009980:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009990:	b29b      	uxth	r3, r3
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80cf 	beq.w	8009b44 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80099a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80ca 	beq.w	8009b44 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80099d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80099d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e4      	bne.n	80099b0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	623b      	str	r3, [r7, #32]
   return(result);
 80099f6:	6a3a      	ldr	r2, [r7, #32]
 80099f8:	4b55      	ldr	r3, [pc, #340]	@ (8009b50 <HAL_UART_IRQHandler+0x770>)
 80099fa:	4013      	ands	r3, r2
 80099fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e3      	bne.n	80099e6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	e853 3f00 	ldrex	r3, [r3]
 8009a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0310 	bic.w	r3, r3, #16
 8009a46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a54:	61fb      	str	r3, [r7, #28]
 8009a56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	69b9      	ldr	r1, [r7, #24]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	617b      	str	r3, [r7, #20]
   return(result);
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e4      	bne.n	8009a32 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f881 	bl	8009b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a7a:	e063      	b.n	8009b44 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00e      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x6c6>
 8009a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d008      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 f841 	bl	800ab26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009aa4:	e051      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d014      	beq.n	8009adc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d105      	bne.n	8009aca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d008      	beq.n	8009adc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d03a      	beq.n	8009b48 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
    }
    return;
 8009ada:	e035      	b.n	8009b48 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <HAL_UART_IRQHandler+0x71c>
 8009ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 ffeb 	bl	800aad0 <UART_EndTransmit_IT>
    return;
 8009afa:	e026      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d009      	beq.n	8009b1c <HAL_UART_IRQHandler+0x73c>
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f81a 	bl	800ab4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b1a:	e016      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d010      	beq.n	8009b4a <HAL_UART_IRQHandler+0x76a>
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da0c      	bge.n	8009b4a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 f802 	bl	800ab3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b36:	e008      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
      return;
 8009b38:	bf00      	nop
 8009b3a:	e006      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
    return;
 8009b3c:	bf00      	nop
 8009b3e:	e004      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
      return;
 8009b40:	bf00      	nop
 8009b42:	e002      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
      return;
 8009b44:	bf00      	nop
 8009b46:	e000      	b.n	8009b4a <HAL_UART_IRQHandler+0x76a>
    return;
 8009b48:	bf00      	nop
  }
}
 8009b4a:	37e8      	adds	r7, #232	@ 0xe8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	effffffe 	.word	0xeffffffe

08009b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b98:	b092      	sub	sp, #72	@ 0x48
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	431a      	orrs	r2, r3
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4bbe      	ldr	r3, [pc, #760]	@ (8009ebc <UART_SetConfig+0x328>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4ab3      	ldr	r2, [pc, #716]	@ (8009ec0 <UART_SetConfig+0x32c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d004      	beq.n	8009c00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	4baf      	ldr	r3, [pc, #700]	@ (8009ec4 <UART_SetConfig+0x330>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c10:	430b      	orrs	r3, r1
 8009c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1a:	f023 010f 	bic.w	r1, r3, #15
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4aa6      	ldr	r2, [pc, #664]	@ (8009ec8 <UART_SetConfig+0x334>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d177      	bne.n	8009d24 <UART_SetConfig+0x190>
 8009c34:	4ba5      	ldr	r3, [pc, #660]	@ (8009ecc <UART_SetConfig+0x338>)
 8009c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c3c:	2b28      	cmp	r3, #40	@ 0x28
 8009c3e:	d86d      	bhi.n	8009d1c <UART_SetConfig+0x188>
 8009c40:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <UART_SetConfig+0xb4>)
 8009c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c46:	bf00      	nop
 8009c48:	08009ced 	.word	0x08009ced
 8009c4c:	08009d1d 	.word	0x08009d1d
 8009c50:	08009d1d 	.word	0x08009d1d
 8009c54:	08009d1d 	.word	0x08009d1d
 8009c58:	08009d1d 	.word	0x08009d1d
 8009c5c:	08009d1d 	.word	0x08009d1d
 8009c60:	08009d1d 	.word	0x08009d1d
 8009c64:	08009d1d 	.word	0x08009d1d
 8009c68:	08009cf5 	.word	0x08009cf5
 8009c6c:	08009d1d 	.word	0x08009d1d
 8009c70:	08009d1d 	.word	0x08009d1d
 8009c74:	08009d1d 	.word	0x08009d1d
 8009c78:	08009d1d 	.word	0x08009d1d
 8009c7c:	08009d1d 	.word	0x08009d1d
 8009c80:	08009d1d 	.word	0x08009d1d
 8009c84:	08009d1d 	.word	0x08009d1d
 8009c88:	08009cfd 	.word	0x08009cfd
 8009c8c:	08009d1d 	.word	0x08009d1d
 8009c90:	08009d1d 	.word	0x08009d1d
 8009c94:	08009d1d 	.word	0x08009d1d
 8009c98:	08009d1d 	.word	0x08009d1d
 8009c9c:	08009d1d 	.word	0x08009d1d
 8009ca0:	08009d1d 	.word	0x08009d1d
 8009ca4:	08009d1d 	.word	0x08009d1d
 8009ca8:	08009d05 	.word	0x08009d05
 8009cac:	08009d1d 	.word	0x08009d1d
 8009cb0:	08009d1d 	.word	0x08009d1d
 8009cb4:	08009d1d 	.word	0x08009d1d
 8009cb8:	08009d1d 	.word	0x08009d1d
 8009cbc:	08009d1d 	.word	0x08009d1d
 8009cc0:	08009d1d 	.word	0x08009d1d
 8009cc4:	08009d1d 	.word	0x08009d1d
 8009cc8:	08009d0d 	.word	0x08009d0d
 8009ccc:	08009d1d 	.word	0x08009d1d
 8009cd0:	08009d1d 	.word	0x08009d1d
 8009cd4:	08009d1d 	.word	0x08009d1d
 8009cd8:	08009d1d 	.word	0x08009d1d
 8009cdc:	08009d1d 	.word	0x08009d1d
 8009ce0:	08009d1d 	.word	0x08009d1d
 8009ce4:	08009d1d 	.word	0x08009d1d
 8009ce8:	08009d15 	.word	0x08009d15
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf2:	e222      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfa:	e21e      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e21a      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d04:	2310      	movs	r3, #16
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e216      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d0c:	2320      	movs	r3, #32
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e212      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d14:	2340      	movs	r3, #64	@ 0x40
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e20e      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d1c:	2380      	movs	r3, #128	@ 0x80
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e20a      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a69      	ldr	r2, [pc, #420]	@ (8009ed0 <UART_SetConfig+0x33c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d130      	bne.n	8009d90 <UART_SetConfig+0x1fc>
 8009d2e:	4b67      	ldr	r3, [pc, #412]	@ (8009ecc <UART_SetConfig+0x338>)
 8009d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	d826      	bhi.n	8009d88 <UART_SetConfig+0x1f4>
 8009d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d40 <UART_SetConfig+0x1ac>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009d59 	.word	0x08009d59
 8009d44:	08009d61 	.word	0x08009d61
 8009d48:	08009d69 	.word	0x08009d69
 8009d4c:	08009d71 	.word	0x08009d71
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	08009d81 	.word	0x08009d81
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e1ec      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d60:	2304      	movs	r3, #4
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e1e8      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d68:	2308      	movs	r3, #8
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e1e4      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d70:	2310      	movs	r3, #16
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e1e0      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e1dc      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d80:	2340      	movs	r3, #64	@ 0x40
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e1d8      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d88:	2380      	movs	r3, #128	@ 0x80
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e1d4      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a4f      	ldr	r2, [pc, #316]	@ (8009ed4 <UART_SetConfig+0x340>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d130      	bne.n	8009dfc <UART_SetConfig+0x268>
 8009d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8009ecc <UART_SetConfig+0x338>)
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	d826      	bhi.n	8009df4 <UART_SetConfig+0x260>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <UART_SetConfig+0x218>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dc5 	.word	0x08009dc5
 8009db0:	08009dcd 	.word	0x08009dcd
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009de5 	.word	0x08009de5
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e1b6      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e1b2      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e1ae      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e1aa      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009de4:	2320      	movs	r3, #32
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e1a6      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009dec:	2340      	movs	r3, #64	@ 0x40
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e1a2      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009df4:	2380      	movs	r3, #128	@ 0x80
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e19e      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a35      	ldr	r2, [pc, #212]	@ (8009ed8 <UART_SetConfig+0x344>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d130      	bne.n	8009e68 <UART_SetConfig+0x2d4>
 8009e06:	4b31      	ldr	r3, [pc, #196]	@ (8009ecc <UART_SetConfig+0x338>)
 8009e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	d826      	bhi.n	8009e60 <UART_SetConfig+0x2cc>
 8009e12:	a201      	add	r2, pc, #4	@ (adr r2, 8009e18 <UART_SetConfig+0x284>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e31 	.word	0x08009e31
 8009e1c:	08009e39 	.word	0x08009e39
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009e49 	.word	0x08009e49
 8009e28:	08009e51 	.word	0x08009e51
 8009e2c:	08009e59 	.word	0x08009e59
 8009e30:	2300      	movs	r3, #0
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e180      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e17c      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e40:	2308      	movs	r3, #8
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e178      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e174      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e170      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e58:	2340      	movs	r3, #64	@ 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e16c      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e60:	2380      	movs	r3, #128	@ 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e168      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8009edc <UART_SetConfig+0x348>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d142      	bne.n	8009ef8 <UART_SetConfig+0x364>
 8009e72:	4b16      	ldr	r3, [pc, #88]	@ (8009ecc <UART_SetConfig+0x338>)
 8009e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	2b05      	cmp	r3, #5
 8009e7c:	d838      	bhi.n	8009ef0 <UART_SetConfig+0x35c>
 8009e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e84 <UART_SetConfig+0x2f0>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009e9d 	.word	0x08009e9d
 8009e88:	08009ea5 	.word	0x08009ea5
 8009e8c:	08009ead 	.word	0x08009ead
 8009e90:	08009eb5 	.word	0x08009eb5
 8009e94:	08009ee1 	.word	0x08009ee1
 8009e98:	08009ee9 	.word	0x08009ee9
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e14a      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e146      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009eac:	2308      	movs	r3, #8
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e142      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e13e      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ebc:	cfff69f3 	.word	0xcfff69f3
 8009ec0:	58000c00 	.word	0x58000c00
 8009ec4:	11fff4ff 	.word	0x11fff4ff
 8009ec8:	40011000 	.word	0x40011000
 8009ecc:	58024400 	.word	0x58024400
 8009ed0:	40004400 	.word	0x40004400
 8009ed4:	40004800 	.word	0x40004800
 8009ed8:	40004c00 	.word	0x40004c00
 8009edc:	40005000 	.word	0x40005000
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee6:	e128      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ee8:	2340      	movs	r3, #64	@ 0x40
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eee:	e124      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ef0:	2380      	movs	r3, #128	@ 0x80
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e120      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4acb      	ldr	r2, [pc, #812]	@ (800a22c <UART_SetConfig+0x698>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d176      	bne.n	8009ff0 <UART_SetConfig+0x45c>
 8009f02:	4bcb      	ldr	r3, [pc, #812]	@ (800a230 <UART_SetConfig+0x69c>)
 8009f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f0a:	2b28      	cmp	r3, #40	@ 0x28
 8009f0c:	d86c      	bhi.n	8009fe8 <UART_SetConfig+0x454>
 8009f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f14 <UART_SetConfig+0x380>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fe9 	.word	0x08009fe9
 8009f1c:	08009fe9 	.word	0x08009fe9
 8009f20:	08009fe9 	.word	0x08009fe9
 8009f24:	08009fe9 	.word	0x08009fe9
 8009f28:	08009fe9 	.word	0x08009fe9
 8009f2c:	08009fe9 	.word	0x08009fe9
 8009f30:	08009fe9 	.word	0x08009fe9
 8009f34:	08009fc1 	.word	0x08009fc1
 8009f38:	08009fe9 	.word	0x08009fe9
 8009f3c:	08009fe9 	.word	0x08009fe9
 8009f40:	08009fe9 	.word	0x08009fe9
 8009f44:	08009fe9 	.word	0x08009fe9
 8009f48:	08009fe9 	.word	0x08009fe9
 8009f4c:	08009fe9 	.word	0x08009fe9
 8009f50:	08009fe9 	.word	0x08009fe9
 8009f54:	08009fc9 	.word	0x08009fc9
 8009f58:	08009fe9 	.word	0x08009fe9
 8009f5c:	08009fe9 	.word	0x08009fe9
 8009f60:	08009fe9 	.word	0x08009fe9
 8009f64:	08009fe9 	.word	0x08009fe9
 8009f68:	08009fe9 	.word	0x08009fe9
 8009f6c:	08009fe9 	.word	0x08009fe9
 8009f70:	08009fe9 	.word	0x08009fe9
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fe9 	.word	0x08009fe9
 8009f7c:	08009fe9 	.word	0x08009fe9
 8009f80:	08009fe9 	.word	0x08009fe9
 8009f84:	08009fe9 	.word	0x08009fe9
 8009f88:	08009fe9 	.word	0x08009fe9
 8009f8c:	08009fe9 	.word	0x08009fe9
 8009f90:	08009fe9 	.word	0x08009fe9
 8009f94:	08009fd9 	.word	0x08009fd9
 8009f98:	08009fe9 	.word	0x08009fe9
 8009f9c:	08009fe9 	.word	0x08009fe9
 8009fa0:	08009fe9 	.word	0x08009fe9
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009fe9 	.word	0x08009fe9
 8009fac:	08009fe9 	.word	0x08009fe9
 8009fb0:	08009fe9 	.word	0x08009fe9
 8009fb4:	08009fe1 	.word	0x08009fe1
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fbe:	e0bc      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc6:	e0b8      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009fc8:	2308      	movs	r3, #8
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e0b4      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd6:	e0b0      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009fd8:	2320      	movs	r3, #32
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e0ac      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009fe0:	2340      	movs	r3, #64	@ 0x40
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e0a8      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009fe8:	2380      	movs	r3, #128	@ 0x80
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e0a4      	b.n	800a13a <UART_SetConfig+0x5a6>
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a8f      	ldr	r2, [pc, #572]	@ (800a234 <UART_SetConfig+0x6a0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d130      	bne.n	800a05c <UART_SetConfig+0x4c8>
 8009ffa:	4b8d      	ldr	r3, [pc, #564]	@ (800a230 <UART_SetConfig+0x69c>)
 8009ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	2b05      	cmp	r3, #5
 800a004:	d826      	bhi.n	800a054 <UART_SetConfig+0x4c0>
 800a006:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <UART_SetConfig+0x478>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a025 	.word	0x0800a025
 800a010:	0800a02d 	.word	0x0800a02d
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a03d 	.word	0x0800a03d
 800a01c:	0800a045 	.word	0x0800a045
 800a020:	0800a04d 	.word	0x0800a04d
 800a024:	2300      	movs	r3, #0
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02a:	e086      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a02c:	2304      	movs	r3, #4
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e082      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a034:	2308      	movs	r3, #8
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e07e      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a03c:	2310      	movs	r3, #16
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e07a      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a044:	2320      	movs	r3, #32
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e076      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a04c:	2340      	movs	r3, #64	@ 0x40
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e072      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a054:	2380      	movs	r3, #128	@ 0x80
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e06e      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a75      	ldr	r2, [pc, #468]	@ (800a238 <UART_SetConfig+0x6a4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d130      	bne.n	800a0c8 <UART_SetConfig+0x534>
 800a066:	4b72      	ldr	r3, [pc, #456]	@ (800a230 <UART_SetConfig+0x69c>)
 800a068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06a:	f003 0307 	and.w	r3, r3, #7
 800a06e:	2b05      	cmp	r3, #5
 800a070:	d826      	bhi.n	800a0c0 <UART_SetConfig+0x52c>
 800a072:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <UART_SetConfig+0x4e4>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a091 	.word	0x0800a091
 800a07c:	0800a099 	.word	0x0800a099
 800a080:	0800a0a1 	.word	0x0800a0a1
 800a084:	0800a0a9 	.word	0x0800a0a9
 800a088:	0800a0b1 	.word	0x0800a0b1
 800a08c:	0800a0b9 	.word	0x0800a0b9
 800a090:	2300      	movs	r3, #0
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a096:	e050      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a098:	2304      	movs	r3, #4
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e04c      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e048      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e044      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e040      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a0b8:	2340      	movs	r3, #64	@ 0x40
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e03c      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a0c0:	2380      	movs	r3, #128	@ 0x80
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c6:	e038      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a5b      	ldr	r2, [pc, #364]	@ (800a23c <UART_SetConfig+0x6a8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d130      	bne.n	800a134 <UART_SetConfig+0x5a0>
 800a0d2:	4b57      	ldr	r3, [pc, #348]	@ (800a230 <UART_SetConfig+0x69c>)
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	d826      	bhi.n	800a12c <UART_SetConfig+0x598>
 800a0de:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <UART_SetConfig+0x550>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a0fd 	.word	0x0800a0fd
 800a0e8:	0800a105 	.word	0x0800a105
 800a0ec:	0800a10d 	.word	0x0800a10d
 800a0f0:	0800a115 	.word	0x0800a115
 800a0f4:	0800a11d 	.word	0x0800a11d
 800a0f8:	0800a125 	.word	0x0800a125
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e01a      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a104:	2304      	movs	r3, #4
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e016      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a10c:	2308      	movs	r3, #8
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e012      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a114:	2310      	movs	r3, #16
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e00e      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a11c:	2320      	movs	r3, #32
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e00a      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a124:	2340      	movs	r3, #64	@ 0x40
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e006      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a12c:	2380      	movs	r3, #128	@ 0x80
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a132:	e002      	b.n	800a13a <UART_SetConfig+0x5a6>
 800a134:	2380      	movs	r3, #128	@ 0x80
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a3f      	ldr	r2, [pc, #252]	@ (800a23c <UART_SetConfig+0x6a8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	f040 80f8 	bne.w	800a336 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a146:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a14a:	2b20      	cmp	r3, #32
 800a14c:	dc46      	bgt.n	800a1dc <UART_SetConfig+0x648>
 800a14e:	2b02      	cmp	r3, #2
 800a150:	f2c0 8082 	blt.w	800a258 <UART_SetConfig+0x6c4>
 800a154:	3b02      	subs	r3, #2
 800a156:	2b1e      	cmp	r3, #30
 800a158:	d87e      	bhi.n	800a258 <UART_SetConfig+0x6c4>
 800a15a:	a201      	add	r2, pc, #4	@ (adr r2, 800a160 <UART_SetConfig+0x5cc>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a1e3 	.word	0x0800a1e3
 800a164:	0800a259 	.word	0x0800a259
 800a168:	0800a1eb 	.word	0x0800a1eb
 800a16c:	0800a259 	.word	0x0800a259
 800a170:	0800a259 	.word	0x0800a259
 800a174:	0800a259 	.word	0x0800a259
 800a178:	0800a1fb 	.word	0x0800a1fb
 800a17c:	0800a259 	.word	0x0800a259
 800a180:	0800a259 	.word	0x0800a259
 800a184:	0800a259 	.word	0x0800a259
 800a188:	0800a259 	.word	0x0800a259
 800a18c:	0800a259 	.word	0x0800a259
 800a190:	0800a259 	.word	0x0800a259
 800a194:	0800a259 	.word	0x0800a259
 800a198:	0800a20b 	.word	0x0800a20b
 800a19c:	0800a259 	.word	0x0800a259
 800a1a0:	0800a259 	.word	0x0800a259
 800a1a4:	0800a259 	.word	0x0800a259
 800a1a8:	0800a259 	.word	0x0800a259
 800a1ac:	0800a259 	.word	0x0800a259
 800a1b0:	0800a259 	.word	0x0800a259
 800a1b4:	0800a259 	.word	0x0800a259
 800a1b8:	0800a259 	.word	0x0800a259
 800a1bc:	0800a259 	.word	0x0800a259
 800a1c0:	0800a259 	.word	0x0800a259
 800a1c4:	0800a259 	.word	0x0800a259
 800a1c8:	0800a259 	.word	0x0800a259
 800a1cc:	0800a259 	.word	0x0800a259
 800a1d0:	0800a259 	.word	0x0800a259
 800a1d4:	0800a259 	.word	0x0800a259
 800a1d8:	0800a24b 	.word	0x0800a24b
 800a1dc:	2b40      	cmp	r3, #64	@ 0x40
 800a1de:	d037      	beq.n	800a250 <UART_SetConfig+0x6bc>
 800a1e0:	e03a      	b.n	800a258 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a1e2:	f7fd f921 	bl	8007428 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a1e8:	e03c      	b.n	800a264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fd f930 	bl	8007454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f8:	e034      	b.n	800a264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1fa:	f107 0318 	add.w	r3, r7, #24
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fd fa7c 	bl	80076fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e02c      	b.n	800a264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a20a:	4b09      	ldr	r3, [pc, #36]	@ (800a230 <UART_SetConfig+0x69c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	d016      	beq.n	800a244 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a216:	4b06      	ldr	r3, [pc, #24]	@ (800a230 <UART_SetConfig+0x69c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	4a07      	ldr	r2, [pc, #28]	@ (800a240 <UART_SetConfig+0x6ac>)
 800a222:	fa22 f303 	lsr.w	r3, r2, r3
 800a226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a228:	e01c      	b.n	800a264 <UART_SetConfig+0x6d0>
 800a22a:	bf00      	nop
 800a22c:	40011400 	.word	0x40011400
 800a230:	58024400 	.word	0x58024400
 800a234:	40007800 	.word	0x40007800
 800a238:	40007c00 	.word	0x40007c00
 800a23c:	58000c00 	.word	0x58000c00
 800a240:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a244:	4b9d      	ldr	r3, [pc, #628]	@ (800a4bc <UART_SetConfig+0x928>)
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a248:	e00c      	b.n	800a264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a24a:	4b9d      	ldr	r3, [pc, #628]	@ (800a4c0 <UART_SetConfig+0x92c>)
 800a24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a24e:	e009      	b.n	800a264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a256:	e005      	b.n	800a264 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a262:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 81de 	beq.w	800a628 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a270:	4a94      	ldr	r2, [pc, #592]	@ (800a4c4 <UART_SetConfig+0x930>)
 800a272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a276:	461a      	mov	r2, r3
 800a278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	4613      	mov	r3, r2
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	4413      	add	r3, r2
 800a28a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d305      	bcc.n	800a29c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a298:	429a      	cmp	r2, r3
 800a29a:	d903      	bls.n	800a2a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a2a2:	e1c1      	b.n	800a628 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	60bb      	str	r3, [r7, #8]
 800a2aa:	60fa      	str	r2, [r7, #12]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b0:	4a84      	ldr	r2, [pc, #528]	@ (800a4c4 <UART_SetConfig+0x930>)
 800a2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	607a      	str	r2, [r7, #4]
 800a2be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2c6:	f7f6 f85b 	bl	8000380 <__aeabi_uldivmod>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f04f 0200 	mov.w	r2, #0
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	020b      	lsls	r3, r1, #8
 800a2dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2e0:	0202      	lsls	r2, r0, #8
 800a2e2:	6979      	ldr	r1, [r7, #20]
 800a2e4:	6849      	ldr	r1, [r1, #4]
 800a2e6:	0849      	lsrs	r1, r1, #1
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	eb12 0804 	adds.w	r8, r2, r4
 800a2f2:	eb43 0905 	adc.w	r9, r3, r5
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	469a      	mov	sl, r3
 800a2fe:	4693      	mov	fp, r2
 800a300:	4652      	mov	r2, sl
 800a302:	465b      	mov	r3, fp
 800a304:	4640      	mov	r0, r8
 800a306:	4649      	mov	r1, r9
 800a308:	f7f6 f83a 	bl	8000380 <__aeabi_uldivmod>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4613      	mov	r3, r2
 800a312:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a31a:	d308      	bcc.n	800a32e <UART_SetConfig+0x79a>
 800a31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a322:	d204      	bcs.n	800a32e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	e17c      	b.n	800a628 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a334:	e178      	b.n	800a628 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a33e:	f040 80c5 	bne.w	800a4cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a342:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a346:	2b20      	cmp	r3, #32
 800a348:	dc48      	bgt.n	800a3dc <UART_SetConfig+0x848>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	db7b      	blt.n	800a446 <UART_SetConfig+0x8b2>
 800a34e:	2b20      	cmp	r3, #32
 800a350:	d879      	bhi.n	800a446 <UART_SetConfig+0x8b2>
 800a352:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <UART_SetConfig+0x7c4>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a3e3 	.word	0x0800a3e3
 800a35c:	0800a3eb 	.word	0x0800a3eb
 800a360:	0800a447 	.word	0x0800a447
 800a364:	0800a447 	.word	0x0800a447
 800a368:	0800a3f3 	.word	0x0800a3f3
 800a36c:	0800a447 	.word	0x0800a447
 800a370:	0800a447 	.word	0x0800a447
 800a374:	0800a447 	.word	0x0800a447
 800a378:	0800a403 	.word	0x0800a403
 800a37c:	0800a447 	.word	0x0800a447
 800a380:	0800a447 	.word	0x0800a447
 800a384:	0800a447 	.word	0x0800a447
 800a388:	0800a447 	.word	0x0800a447
 800a38c:	0800a447 	.word	0x0800a447
 800a390:	0800a447 	.word	0x0800a447
 800a394:	0800a447 	.word	0x0800a447
 800a398:	0800a413 	.word	0x0800a413
 800a39c:	0800a447 	.word	0x0800a447
 800a3a0:	0800a447 	.word	0x0800a447
 800a3a4:	0800a447 	.word	0x0800a447
 800a3a8:	0800a447 	.word	0x0800a447
 800a3ac:	0800a447 	.word	0x0800a447
 800a3b0:	0800a447 	.word	0x0800a447
 800a3b4:	0800a447 	.word	0x0800a447
 800a3b8:	0800a447 	.word	0x0800a447
 800a3bc:	0800a447 	.word	0x0800a447
 800a3c0:	0800a447 	.word	0x0800a447
 800a3c4:	0800a447 	.word	0x0800a447
 800a3c8:	0800a447 	.word	0x0800a447
 800a3cc:	0800a447 	.word	0x0800a447
 800a3d0:	0800a447 	.word	0x0800a447
 800a3d4:	0800a447 	.word	0x0800a447
 800a3d8:	0800a439 	.word	0x0800a439
 800a3dc:	2b40      	cmp	r3, #64	@ 0x40
 800a3de:	d02e      	beq.n	800a43e <UART_SetConfig+0x8aa>
 800a3e0:	e031      	b.n	800a446 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3e2:	f7fb fdeb 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 800a3e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3e8:	e033      	b.n	800a452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ea:	f7fb fdfd 	bl	8005fe8 <HAL_RCC_GetPCLK2Freq>
 800a3ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3f0:	e02f      	b.n	800a452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fd f82c 	bl	8007454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a400:	e027      	b.n	800a452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a402:	f107 0318 	add.w	r3, r7, #24
 800a406:	4618      	mov	r0, r3
 800a408:	f7fd f978 	bl	80076fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a410:	e01f      	b.n	800a452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a412:	4b2d      	ldr	r3, [pc, #180]	@ (800a4c8 <UART_SetConfig+0x934>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0320 	and.w	r3, r3, #32
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a41e:	4b2a      	ldr	r3, [pc, #168]	@ (800a4c8 <UART_SetConfig+0x934>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	08db      	lsrs	r3, r3, #3
 800a424:	f003 0303 	and.w	r3, r3, #3
 800a428:	4a24      	ldr	r2, [pc, #144]	@ (800a4bc <UART_SetConfig+0x928>)
 800a42a:	fa22 f303 	lsr.w	r3, r2, r3
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a430:	e00f      	b.n	800a452 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a432:	4b22      	ldr	r3, [pc, #136]	@ (800a4bc <UART_SetConfig+0x928>)
 800a434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a436:	e00c      	b.n	800a452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a438:	4b21      	ldr	r3, [pc, #132]	@ (800a4c0 <UART_SetConfig+0x92c>)
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a43c:	e009      	b.n	800a452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a43e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a444:	e005      	b.n	800a452 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 80e7 	beq.w	800a628 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45e:	4a19      	ldr	r2, [pc, #100]	@ (800a4c4 <UART_SetConfig+0x930>)
 800a460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a464:	461a      	mov	r2, r3
 800a466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a468:	fbb3 f3f2 	udiv	r3, r3, r2
 800a46c:	005a      	lsls	r2, r3, #1
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	441a      	add	r2, r3
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	2b0f      	cmp	r3, #15
 800a484:	d916      	bls.n	800a4b4 <UART_SetConfig+0x920>
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a48c:	d212      	bcs.n	800a4b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a490:	b29b      	uxth	r3, r3
 800a492:	f023 030f 	bic.w	r3, r3, #15
 800a496:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f003 0307 	and.w	r3, r3, #7
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a4b0:	60da      	str	r2, [r3, #12]
 800a4b2:	e0b9      	b.n	800a628 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a4ba:	e0b5      	b.n	800a628 <UART_SetConfig+0xa94>
 800a4bc:	03d09000 	.word	0x03d09000
 800a4c0:	003d0900 	.word	0x003d0900
 800a4c4:	0800b718 	.word	0x0800b718
 800a4c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	dc49      	bgt.n	800a568 <UART_SetConfig+0x9d4>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	db7c      	blt.n	800a5d2 <UART_SetConfig+0xa3e>
 800a4d8:	2b20      	cmp	r3, #32
 800a4da:	d87a      	bhi.n	800a5d2 <UART_SetConfig+0xa3e>
 800a4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <UART_SetConfig+0x950>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a56f 	.word	0x0800a56f
 800a4e8:	0800a577 	.word	0x0800a577
 800a4ec:	0800a5d3 	.word	0x0800a5d3
 800a4f0:	0800a5d3 	.word	0x0800a5d3
 800a4f4:	0800a57f 	.word	0x0800a57f
 800a4f8:	0800a5d3 	.word	0x0800a5d3
 800a4fc:	0800a5d3 	.word	0x0800a5d3
 800a500:	0800a5d3 	.word	0x0800a5d3
 800a504:	0800a58f 	.word	0x0800a58f
 800a508:	0800a5d3 	.word	0x0800a5d3
 800a50c:	0800a5d3 	.word	0x0800a5d3
 800a510:	0800a5d3 	.word	0x0800a5d3
 800a514:	0800a5d3 	.word	0x0800a5d3
 800a518:	0800a5d3 	.word	0x0800a5d3
 800a51c:	0800a5d3 	.word	0x0800a5d3
 800a520:	0800a5d3 	.word	0x0800a5d3
 800a524:	0800a59f 	.word	0x0800a59f
 800a528:	0800a5d3 	.word	0x0800a5d3
 800a52c:	0800a5d3 	.word	0x0800a5d3
 800a530:	0800a5d3 	.word	0x0800a5d3
 800a534:	0800a5d3 	.word	0x0800a5d3
 800a538:	0800a5d3 	.word	0x0800a5d3
 800a53c:	0800a5d3 	.word	0x0800a5d3
 800a540:	0800a5d3 	.word	0x0800a5d3
 800a544:	0800a5d3 	.word	0x0800a5d3
 800a548:	0800a5d3 	.word	0x0800a5d3
 800a54c:	0800a5d3 	.word	0x0800a5d3
 800a550:	0800a5d3 	.word	0x0800a5d3
 800a554:	0800a5d3 	.word	0x0800a5d3
 800a558:	0800a5d3 	.word	0x0800a5d3
 800a55c:	0800a5d3 	.word	0x0800a5d3
 800a560:	0800a5d3 	.word	0x0800a5d3
 800a564:	0800a5c5 	.word	0x0800a5c5
 800a568:	2b40      	cmp	r3, #64	@ 0x40
 800a56a:	d02e      	beq.n	800a5ca <UART_SetConfig+0xa36>
 800a56c:	e031      	b.n	800a5d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a56e:	f7fb fd25 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 800a572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a574:	e033      	b.n	800a5de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a576:	f7fb fd37 	bl	8005fe8 <HAL_RCC_GetPCLK2Freq>
 800a57a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a57c:	e02f      	b.n	800a5de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a57e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a582:	4618      	mov	r0, r3
 800a584:	f7fc ff66 	bl	8007454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58c:	e027      	b.n	800a5de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a58e:	f107 0318 	add.w	r3, r7, #24
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd f8b2 	bl	80076fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a59c:	e01f      	b.n	800a5de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a59e:	4b2d      	ldr	r3, [pc, #180]	@ (800a654 <UART_SetConfig+0xac0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d009      	beq.n	800a5be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a654 <UART_SetConfig+0xac0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	08db      	lsrs	r3, r3, #3
 800a5b0:	f003 0303 	and.w	r3, r3, #3
 800a5b4:	4a28      	ldr	r2, [pc, #160]	@ (800a658 <UART_SetConfig+0xac4>)
 800a5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5bc:	e00f      	b.n	800a5de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a5be:	4b26      	ldr	r3, [pc, #152]	@ (800a658 <UART_SetConfig+0xac4>)
 800a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c2:	e00c      	b.n	800a5de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5c4:	4b25      	ldr	r3, [pc, #148]	@ (800a65c <UART_SetConfig+0xac8>)
 800a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c8:	e009      	b.n	800a5de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d0:	e005      	b.n	800a5de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5dc:	bf00      	nop
    }

    if (pclk != 0U)
 800a5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d021      	beq.n	800a628 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a660 <UART_SetConfig+0xacc>)
 800a5ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	085b      	lsrs	r3, r3, #1
 800a5fc:	441a      	add	r2, r3
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	fbb2 f3f3 	udiv	r3, r2, r3
 800a606:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d909      	bls.n	800a622 <UART_SetConfig+0xa8e>
 800a60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a614:	d205      	bcs.n	800a622 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a618:	b29a      	uxth	r2, r3
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60da      	str	r2, [r3, #12]
 800a620:	e002      	b.n	800a628 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	2201      	movs	r2, #1
 800a634:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2200      	movs	r2, #0
 800a63c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2200      	movs	r2, #0
 800a642:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a644:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3748      	adds	r7, #72	@ 0x48
 800a64c:	46bd      	mov	sp, r7
 800a64e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a652:	bf00      	nop
 800a654:	58024400 	.word	0x58024400
 800a658:	03d09000 	.word	0x03d09000
 800a65c:	003d0900 	.word	0x003d0900
 800a660:	0800b718 	.word	0x0800b718

0800a664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01a      	beq.n	800a77a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a75e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a762:	d10a      	bne.n	800a77a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00a      	beq.n	800a79c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	430a      	orrs	r2, r1
 800a79a:	605a      	str	r2, [r3, #4]
  }
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b098      	sub	sp, #96	@ 0x60
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7b8:	f7f8 f8c4 	bl	8002944 <HAL_GetTick>
 800a7bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0308 	and.w	r3, r3, #8
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d12f      	bne.n	800a82c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f88e 	bl	800a8fc <UART_WaitOnFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d022      	beq.n	800a82c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	461a      	mov	r2, r3
 800a802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a804:	647b      	str	r3, [r7, #68]	@ 0x44
 800a806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a80a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e6      	bne.n	800a7e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e063      	b.n	800a8f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	2b04      	cmp	r3, #4
 800a838:	d149      	bne.n	800a8ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a83a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a842:	2200      	movs	r2, #0
 800a844:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f857 	bl	800a8fc <UART_WaitOnFlagUntilTimeout>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d03c      	beq.n	800a8ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	623b      	str	r3, [r7, #32]
   return(result);
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a872:	633b      	str	r3, [r7, #48]	@ 0x30
 800a874:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	60fb      	str	r3, [r7, #12]
   return(result);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8a6:	61fa      	str	r2, [r7, #28]
 800a8a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	69b9      	ldr	r1, [r7, #24]
 800a8ac:	69fa      	ldr	r2, [r7, #28]
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	617b      	str	r3, [r7, #20]
   return(result);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e5      	bne.n	800a886 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e012      	b.n	800a8f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2220      	movs	r2, #32
 800a8da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3758      	adds	r7, #88	@ 0x58
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	4613      	mov	r3, r2
 800a90a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a90c:	e04f      	b.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a914:	d04b      	beq.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a916:	f7f8 f815 	bl	8002944 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <UART_WaitOnFlagUntilTimeout+0x30>
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e04e      	b.n	800a9ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d037      	beq.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b80      	cmp	r3, #128	@ 0x80
 800a942:	d034      	beq.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b40      	cmp	r3, #64	@ 0x40
 800a948:	d031      	beq.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b08      	cmp	r3, #8
 800a956:	d110      	bne.n	800a97a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2208      	movs	r2, #8
 800a95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f839 	bl	800a9d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2208      	movs	r2, #8
 800a96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e029      	b.n	800a9ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a988:	d111      	bne.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 f81f 	bl	800a9d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e00f      	b.n	800a9ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69da      	ldr	r2, [r3, #28]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	bf0c      	ite	eq
 800a9be:	2301      	moveq	r3, #1
 800a9c0:	2300      	movne	r3, #0
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d0a0      	beq.n	800a90e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b095      	sub	sp, #84	@ 0x54
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e6      	bne.n	800a9e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3308      	adds	r3, #8
 800aa18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	e853 3f00 	ldrex	r3, [r3]
 800aa20:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	4b1e      	ldr	r3, [pc, #120]	@ (800aaa0 <UART_EndRxTransfer+0xc8>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e5      	bne.n	800aa12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d118      	bne.n	800aa80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f023 0310 	bic.w	r3, r3, #16
 800aa62:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa6c:	61bb      	str	r3, [r7, #24]
 800aa6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6979      	ldr	r1, [r7, #20]
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e6      	bne.n	800aa4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2220      	movs	r2, #32
 800aa84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa94:	bf00      	nop
 800aa96:	3754      	adds	r7, #84	@ 0x54
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	effffffe 	.word	0xeffffffe

0800aaa4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f7ff f850 	bl	8009b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaec:	61fb      	str	r3, [r7, #28]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	61bb      	str	r3, [r7, #24]
 800aaf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafa:	6979      	ldr	r1, [r7, #20]
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	e841 2300 	strex	r3, r2, [r1]
 800ab02:	613b      	str	r3, [r7, #16]
   return(result);
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1e6      	bne.n	800aad8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff f81b 	bl	8009b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab1e:	bf00      	nop
 800ab20:	3720      	adds	r7, #32
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab2e:	bf00      	nop
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d101      	bne.n	800ab78 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab74:	2302      	movs	r3, #2
 800ab76:	e027      	b.n	800abc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2224      	movs	r2, #36	@ 0x24
 800ab84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f022 0201 	bic.w	r2, r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aba6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2220      	movs	r2, #32
 800abba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d101      	bne.n	800abec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abe8:	2302      	movs	r3, #2
 800abea:	e02d      	b.n	800ac48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2224      	movs	r2, #36	@ 0x24
 800abf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f022 0201 	bic.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 f84f 	bl	800accc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e02d      	b.n	800acc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2224      	movs	r2, #36	@ 0x24
 800ac74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0201 	bic.w	r2, r2, #1
 800ac8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f811 	bl	800accc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2220      	movs	r2, #32
 800acb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d108      	bne.n	800acee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acec:	e031      	b.n	800ad52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acee:	2310      	movs	r3, #16
 800acf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acf2:	2310      	movs	r3, #16
 800acf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	0e5b      	lsrs	r3, r3, #25
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	0f5b      	lsrs	r3, r3, #29
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f003 0307 	and.w	r3, r3, #7
 800ad14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	7b3a      	ldrb	r2, [r7, #12]
 800ad1a:	4911      	ldr	r1, [pc, #68]	@ (800ad60 <UARTEx_SetNbDataToProcess+0x94>)
 800ad1c:	5c8a      	ldrb	r2, [r1, r2]
 800ad1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad22:	7b3a      	ldrb	r2, [r7, #12]
 800ad24:	490f      	ldr	r1, [pc, #60]	@ (800ad64 <UARTEx_SetNbDataToProcess+0x98>)
 800ad26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	7b7a      	ldrb	r2, [r7, #13]
 800ad38:	4909      	ldr	r1, [pc, #36]	@ (800ad60 <UARTEx_SetNbDataToProcess+0x94>)
 800ad3a:	5c8a      	ldrb	r2, [r1, r2]
 800ad3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad40:	7b7a      	ldrb	r2, [r7, #13]
 800ad42:	4908      	ldr	r1, [pc, #32]	@ (800ad64 <UARTEx_SetNbDataToProcess+0x98>)
 800ad44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad46:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	0800b730 	.word	0x0800b730
 800ad64:	0800b738 	.word	0x0800b738

0800ad68 <siprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b500      	push	{lr}
 800ad6c:	b09c      	sub	sp, #112	@ 0x70
 800ad6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad70:	9002      	str	r0, [sp, #8]
 800ad72:	9006      	str	r0, [sp, #24]
 800ad74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad78:	4809      	ldr	r0, [pc, #36]	@ (800ada0 <siprintf+0x38>)
 800ad7a:	9107      	str	r1, [sp, #28]
 800ad7c:	9104      	str	r1, [sp, #16]
 800ad7e:	4909      	ldr	r1, [pc, #36]	@ (800ada4 <siprintf+0x3c>)
 800ad80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad84:	9105      	str	r1, [sp, #20]
 800ad86:	6800      	ldr	r0, [r0, #0]
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	a902      	add	r1, sp, #8
 800ad8c:	f000 f994 	bl	800b0b8 <_svfiprintf_r>
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	b01c      	add	sp, #112	@ 0x70
 800ad98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad9c:	b003      	add	sp, #12
 800ad9e:	4770      	bx	lr
 800ada0:	24000014 	.word	0x24000014
 800ada4:	ffff0208 	.word	0xffff0208

0800ada8 <memset>:
 800ada8:	4402      	add	r2, r0
 800adaa:	4603      	mov	r3, r0
 800adac:	4293      	cmp	r3, r2
 800adae:	d100      	bne.n	800adb2 <memset+0xa>
 800adb0:	4770      	bx	lr
 800adb2:	f803 1b01 	strb.w	r1, [r3], #1
 800adb6:	e7f9      	b.n	800adac <memset+0x4>

0800adb8 <__errno>:
 800adb8:	4b01      	ldr	r3, [pc, #4]	@ (800adc0 <__errno+0x8>)
 800adba:	6818      	ldr	r0, [r3, #0]
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	24000014 	.word	0x24000014

0800adc4 <__libc_init_array>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	4d0d      	ldr	r5, [pc, #52]	@ (800adfc <__libc_init_array+0x38>)
 800adc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ae00 <__libc_init_array+0x3c>)
 800adca:	1b64      	subs	r4, r4, r5
 800adcc:	10a4      	asrs	r4, r4, #2
 800adce:	2600      	movs	r6, #0
 800add0:	42a6      	cmp	r6, r4
 800add2:	d109      	bne.n	800ade8 <__libc_init_array+0x24>
 800add4:	4d0b      	ldr	r5, [pc, #44]	@ (800ae04 <__libc_init_array+0x40>)
 800add6:	4c0c      	ldr	r4, [pc, #48]	@ (800ae08 <__libc_init_array+0x44>)
 800add8:	f000 fc66 	bl	800b6a8 <_init>
 800addc:	1b64      	subs	r4, r4, r5
 800adde:	10a4      	asrs	r4, r4, #2
 800ade0:	2600      	movs	r6, #0
 800ade2:	42a6      	cmp	r6, r4
 800ade4:	d105      	bne.n	800adf2 <__libc_init_array+0x2e>
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adec:	4798      	blx	r3
 800adee:	3601      	adds	r6, #1
 800adf0:	e7ee      	b.n	800add0 <__libc_init_array+0xc>
 800adf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf6:	4798      	blx	r3
 800adf8:	3601      	adds	r6, #1
 800adfa:	e7f2      	b.n	800ade2 <__libc_init_array+0x1e>
 800adfc:	0800b77c 	.word	0x0800b77c
 800ae00:	0800b77c 	.word	0x0800b77c
 800ae04:	0800b77c 	.word	0x0800b77c
 800ae08:	0800b780 	.word	0x0800b780

0800ae0c <__retarget_lock_acquire_recursive>:
 800ae0c:	4770      	bx	lr

0800ae0e <__retarget_lock_release_recursive>:
 800ae0e:	4770      	bx	lr

0800ae10 <_free_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4605      	mov	r5, r0
 800ae14:	2900      	cmp	r1, #0
 800ae16:	d041      	beq.n	800ae9c <_free_r+0x8c>
 800ae18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1c:	1f0c      	subs	r4, r1, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bfb8      	it	lt
 800ae22:	18e4      	addlt	r4, r4, r3
 800ae24:	f000 f8e0 	bl	800afe8 <__malloc_lock>
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <_free_r+0x90>)
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	b933      	cbnz	r3, 800ae3c <_free_r+0x2c>
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6014      	str	r4, [r2, #0]
 800ae32:	4628      	mov	r0, r5
 800ae34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae38:	f000 b8dc 	b.w	800aff4 <__malloc_unlock>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d908      	bls.n	800ae52 <_free_r+0x42>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	1821      	adds	r1, r4, r0
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf01      	itttt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	1809      	addeq	r1, r1, r0
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	e7ed      	b.n	800ae2e <_free_r+0x1e>
 800ae52:	461a      	mov	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	b10b      	cbz	r3, 800ae5c <_free_r+0x4c>
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d9fa      	bls.n	800ae52 <_free_r+0x42>
 800ae5c:	6811      	ldr	r1, [r2, #0]
 800ae5e:	1850      	adds	r0, r2, r1
 800ae60:	42a0      	cmp	r0, r4
 800ae62:	d10b      	bne.n	800ae7c <_free_r+0x6c>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	4401      	add	r1, r0
 800ae68:	1850      	adds	r0, r2, r1
 800ae6a:	4283      	cmp	r3, r0
 800ae6c:	6011      	str	r1, [r2, #0]
 800ae6e:	d1e0      	bne.n	800ae32 <_free_r+0x22>
 800ae70:	6818      	ldr	r0, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	6053      	str	r3, [r2, #4]
 800ae76:	4408      	add	r0, r1
 800ae78:	6010      	str	r0, [r2, #0]
 800ae7a:	e7da      	b.n	800ae32 <_free_r+0x22>
 800ae7c:	d902      	bls.n	800ae84 <_free_r+0x74>
 800ae7e:	230c      	movs	r3, #12
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	e7d6      	b.n	800ae32 <_free_r+0x22>
 800ae84:	6820      	ldr	r0, [r4, #0]
 800ae86:	1821      	adds	r1, r4, r0
 800ae88:	428b      	cmp	r3, r1
 800ae8a:	bf04      	itt	eq
 800ae8c:	6819      	ldreq	r1, [r3, #0]
 800ae8e:	685b      	ldreq	r3, [r3, #4]
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	bf04      	itt	eq
 800ae94:	1809      	addeq	r1, r1, r0
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	6054      	str	r4, [r2, #4]
 800ae9a:	e7ca      	b.n	800ae32 <_free_r+0x22>
 800ae9c:	bd38      	pop	{r3, r4, r5, pc}
 800ae9e:	bf00      	nop
 800aea0:	240006e4 	.word	0x240006e4

0800aea4 <sbrk_aligned>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4e0f      	ldr	r6, [pc, #60]	@ (800aee4 <sbrk_aligned+0x40>)
 800aea8:	460c      	mov	r4, r1
 800aeaa:	6831      	ldr	r1, [r6, #0]
 800aeac:	4605      	mov	r5, r0
 800aeae:	b911      	cbnz	r1, 800aeb6 <sbrk_aligned+0x12>
 800aeb0:	f000 fba6 	bl	800b600 <_sbrk_r>
 800aeb4:	6030      	str	r0, [r6, #0]
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f000 fba1 	bl	800b600 <_sbrk_r>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	d103      	bne.n	800aeca <sbrk_aligned+0x26>
 800aec2:	f04f 34ff 	mov.w	r4, #4294967295
 800aec6:	4620      	mov	r0, r4
 800aec8:	bd70      	pop	{r4, r5, r6, pc}
 800aeca:	1cc4      	adds	r4, r0, #3
 800aecc:	f024 0403 	bic.w	r4, r4, #3
 800aed0:	42a0      	cmp	r0, r4
 800aed2:	d0f8      	beq.n	800aec6 <sbrk_aligned+0x22>
 800aed4:	1a21      	subs	r1, r4, r0
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 fb92 	bl	800b600 <_sbrk_r>
 800aedc:	3001      	adds	r0, #1
 800aede:	d1f2      	bne.n	800aec6 <sbrk_aligned+0x22>
 800aee0:	e7ef      	b.n	800aec2 <sbrk_aligned+0x1e>
 800aee2:	bf00      	nop
 800aee4:	240006e0 	.word	0x240006e0

0800aee8 <_malloc_r>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	1ccd      	adds	r5, r1, #3
 800aeee:	f025 0503 	bic.w	r5, r5, #3
 800aef2:	3508      	adds	r5, #8
 800aef4:	2d0c      	cmp	r5, #12
 800aef6:	bf38      	it	cc
 800aef8:	250c      	movcc	r5, #12
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	4606      	mov	r6, r0
 800aefe:	db01      	blt.n	800af04 <_malloc_r+0x1c>
 800af00:	42a9      	cmp	r1, r5
 800af02:	d904      	bls.n	800af0e <_malloc_r+0x26>
 800af04:	230c      	movs	r3, #12
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	2000      	movs	r0, #0
 800af0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afe4 <_malloc_r+0xfc>
 800af12:	f000 f869 	bl	800afe8 <__malloc_lock>
 800af16:	f8d8 3000 	ldr.w	r3, [r8]
 800af1a:	461c      	mov	r4, r3
 800af1c:	bb44      	cbnz	r4, 800af70 <_malloc_r+0x88>
 800af1e:	4629      	mov	r1, r5
 800af20:	4630      	mov	r0, r6
 800af22:	f7ff ffbf 	bl	800aea4 <sbrk_aligned>
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	4604      	mov	r4, r0
 800af2a:	d158      	bne.n	800afde <_malloc_r+0xf6>
 800af2c:	f8d8 4000 	ldr.w	r4, [r8]
 800af30:	4627      	mov	r7, r4
 800af32:	2f00      	cmp	r7, #0
 800af34:	d143      	bne.n	800afbe <_malloc_r+0xd6>
 800af36:	2c00      	cmp	r4, #0
 800af38:	d04b      	beq.n	800afd2 <_malloc_r+0xea>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	4639      	mov	r1, r7
 800af3e:	4630      	mov	r0, r6
 800af40:	eb04 0903 	add.w	r9, r4, r3
 800af44:	f000 fb5c 	bl	800b600 <_sbrk_r>
 800af48:	4581      	cmp	r9, r0
 800af4a:	d142      	bne.n	800afd2 <_malloc_r+0xea>
 800af4c:	6821      	ldr	r1, [r4, #0]
 800af4e:	1a6d      	subs	r5, r5, r1
 800af50:	4629      	mov	r1, r5
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ffa6 	bl	800aea4 <sbrk_aligned>
 800af58:	3001      	adds	r0, #1
 800af5a:	d03a      	beq.n	800afd2 <_malloc_r+0xea>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	442b      	add	r3, r5
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	f8d8 3000 	ldr.w	r3, [r8]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	bb62      	cbnz	r2, 800afc4 <_malloc_r+0xdc>
 800af6a:	f8c8 7000 	str.w	r7, [r8]
 800af6e:	e00f      	b.n	800af90 <_malloc_r+0xa8>
 800af70:	6822      	ldr	r2, [r4, #0]
 800af72:	1b52      	subs	r2, r2, r5
 800af74:	d420      	bmi.n	800afb8 <_malloc_r+0xd0>
 800af76:	2a0b      	cmp	r2, #11
 800af78:	d917      	bls.n	800afaa <_malloc_r+0xc2>
 800af7a:	1961      	adds	r1, r4, r5
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	6025      	str	r5, [r4, #0]
 800af80:	bf18      	it	ne
 800af82:	6059      	strne	r1, [r3, #4]
 800af84:	6863      	ldr	r3, [r4, #4]
 800af86:	bf08      	it	eq
 800af88:	f8c8 1000 	streq.w	r1, [r8]
 800af8c:	5162      	str	r2, [r4, r5]
 800af8e:	604b      	str	r3, [r1, #4]
 800af90:	4630      	mov	r0, r6
 800af92:	f000 f82f 	bl	800aff4 <__malloc_unlock>
 800af96:	f104 000b 	add.w	r0, r4, #11
 800af9a:	1d23      	adds	r3, r4, #4
 800af9c:	f020 0007 	bic.w	r0, r0, #7
 800afa0:	1ac2      	subs	r2, r0, r3
 800afa2:	bf1c      	itt	ne
 800afa4:	1a1b      	subne	r3, r3, r0
 800afa6:	50a3      	strne	r3, [r4, r2]
 800afa8:	e7af      	b.n	800af0a <_malloc_r+0x22>
 800afaa:	6862      	ldr	r2, [r4, #4]
 800afac:	42a3      	cmp	r3, r4
 800afae:	bf0c      	ite	eq
 800afb0:	f8c8 2000 	streq.w	r2, [r8]
 800afb4:	605a      	strne	r2, [r3, #4]
 800afb6:	e7eb      	b.n	800af90 <_malloc_r+0xa8>
 800afb8:	4623      	mov	r3, r4
 800afba:	6864      	ldr	r4, [r4, #4]
 800afbc:	e7ae      	b.n	800af1c <_malloc_r+0x34>
 800afbe:	463c      	mov	r4, r7
 800afc0:	687f      	ldr	r7, [r7, #4]
 800afc2:	e7b6      	b.n	800af32 <_malloc_r+0x4a>
 800afc4:	461a      	mov	r2, r3
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	42a3      	cmp	r3, r4
 800afca:	d1fb      	bne.n	800afc4 <_malloc_r+0xdc>
 800afcc:	2300      	movs	r3, #0
 800afce:	6053      	str	r3, [r2, #4]
 800afd0:	e7de      	b.n	800af90 <_malloc_r+0xa8>
 800afd2:	230c      	movs	r3, #12
 800afd4:	6033      	str	r3, [r6, #0]
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 f80c 	bl	800aff4 <__malloc_unlock>
 800afdc:	e794      	b.n	800af08 <_malloc_r+0x20>
 800afde:	6005      	str	r5, [r0, #0]
 800afe0:	e7d6      	b.n	800af90 <_malloc_r+0xa8>
 800afe2:	bf00      	nop
 800afe4:	240006e4 	.word	0x240006e4

0800afe8 <__malloc_lock>:
 800afe8:	4801      	ldr	r0, [pc, #4]	@ (800aff0 <__malloc_lock+0x8>)
 800afea:	f7ff bf0f 	b.w	800ae0c <__retarget_lock_acquire_recursive>
 800afee:	bf00      	nop
 800aff0:	240006dc 	.word	0x240006dc

0800aff4 <__malloc_unlock>:
 800aff4:	4801      	ldr	r0, [pc, #4]	@ (800affc <__malloc_unlock+0x8>)
 800aff6:	f7ff bf0a 	b.w	800ae0e <__retarget_lock_release_recursive>
 800affa:	bf00      	nop
 800affc:	240006dc 	.word	0x240006dc

0800b000 <__ssputs_r>:
 800b000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b004:	688e      	ldr	r6, [r1, #8]
 800b006:	461f      	mov	r7, r3
 800b008:	42be      	cmp	r6, r7
 800b00a:	680b      	ldr	r3, [r1, #0]
 800b00c:	4682      	mov	sl, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	4690      	mov	r8, r2
 800b012:	d82d      	bhi.n	800b070 <__ssputs_r+0x70>
 800b014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b01c:	d026      	beq.n	800b06c <__ssputs_r+0x6c>
 800b01e:	6965      	ldr	r5, [r4, #20]
 800b020:	6909      	ldr	r1, [r1, #16]
 800b022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b026:	eba3 0901 	sub.w	r9, r3, r1
 800b02a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b02e:	1c7b      	adds	r3, r7, #1
 800b030:	444b      	add	r3, r9
 800b032:	106d      	asrs	r5, r5, #1
 800b034:	429d      	cmp	r5, r3
 800b036:	bf38      	it	cc
 800b038:	461d      	movcc	r5, r3
 800b03a:	0553      	lsls	r3, r2, #21
 800b03c:	d527      	bpl.n	800b08e <__ssputs_r+0x8e>
 800b03e:	4629      	mov	r1, r5
 800b040:	f7ff ff52 	bl	800aee8 <_malloc_r>
 800b044:	4606      	mov	r6, r0
 800b046:	b360      	cbz	r0, 800b0a2 <__ssputs_r+0xa2>
 800b048:	6921      	ldr	r1, [r4, #16]
 800b04a:	464a      	mov	r2, r9
 800b04c:	f000 fae8 	bl	800b620 <memcpy>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	6126      	str	r6, [r4, #16]
 800b05e:	6165      	str	r5, [r4, #20]
 800b060:	444e      	add	r6, r9
 800b062:	eba5 0509 	sub.w	r5, r5, r9
 800b066:	6026      	str	r6, [r4, #0]
 800b068:	60a5      	str	r5, [r4, #8]
 800b06a:	463e      	mov	r6, r7
 800b06c:	42be      	cmp	r6, r7
 800b06e:	d900      	bls.n	800b072 <__ssputs_r+0x72>
 800b070:	463e      	mov	r6, r7
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	4632      	mov	r2, r6
 800b076:	4641      	mov	r1, r8
 800b078:	f000 faa8 	bl	800b5cc <memmove>
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	1b9b      	subs	r3, r3, r6
 800b080:	60a3      	str	r3, [r4, #8]
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	4433      	add	r3, r6
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	2000      	movs	r0, #0
 800b08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08e:	462a      	mov	r2, r5
 800b090:	f000 fad4 	bl	800b63c <_realloc_r>
 800b094:	4606      	mov	r6, r0
 800b096:	2800      	cmp	r0, #0
 800b098:	d1e0      	bne.n	800b05c <__ssputs_r+0x5c>
 800b09a:	6921      	ldr	r1, [r4, #16]
 800b09c:	4650      	mov	r0, sl
 800b09e:	f7ff feb7 	bl	800ae10 <_free_r>
 800b0a2:	230c      	movs	r3, #12
 800b0a4:	f8ca 3000 	str.w	r3, [sl]
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ae:	81a3      	strh	r3, [r4, #12]
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b4:	e7e9      	b.n	800b08a <__ssputs_r+0x8a>
	...

0800b0b8 <_svfiprintf_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	4698      	mov	r8, r3
 800b0be:	898b      	ldrh	r3, [r1, #12]
 800b0c0:	061b      	lsls	r3, r3, #24
 800b0c2:	b09d      	sub	sp, #116	@ 0x74
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	460d      	mov	r5, r1
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	d510      	bpl.n	800b0ee <_svfiprintf_r+0x36>
 800b0cc:	690b      	ldr	r3, [r1, #16]
 800b0ce:	b973      	cbnz	r3, 800b0ee <_svfiprintf_r+0x36>
 800b0d0:	2140      	movs	r1, #64	@ 0x40
 800b0d2:	f7ff ff09 	bl	800aee8 <_malloc_r>
 800b0d6:	6028      	str	r0, [r5, #0]
 800b0d8:	6128      	str	r0, [r5, #16]
 800b0da:	b930      	cbnz	r0, 800b0ea <_svfiprintf_r+0x32>
 800b0dc:	230c      	movs	r3, #12
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e4:	b01d      	add	sp, #116	@ 0x74
 800b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ea:	2340      	movs	r3, #64	@ 0x40
 800b0ec:	616b      	str	r3, [r5, #20]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f2:	2320      	movs	r3, #32
 800b0f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0fc:	2330      	movs	r3, #48	@ 0x30
 800b0fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b29c <_svfiprintf_r+0x1e4>
 800b102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b106:	f04f 0901 	mov.w	r9, #1
 800b10a:	4623      	mov	r3, r4
 800b10c:	469a      	mov	sl, r3
 800b10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b112:	b10a      	cbz	r2, 800b118 <_svfiprintf_r+0x60>
 800b114:	2a25      	cmp	r2, #37	@ 0x25
 800b116:	d1f9      	bne.n	800b10c <_svfiprintf_r+0x54>
 800b118:	ebba 0b04 	subs.w	fp, sl, r4
 800b11c:	d00b      	beq.n	800b136 <_svfiprintf_r+0x7e>
 800b11e:	465b      	mov	r3, fp
 800b120:	4622      	mov	r2, r4
 800b122:	4629      	mov	r1, r5
 800b124:	4638      	mov	r0, r7
 800b126:	f7ff ff6b 	bl	800b000 <__ssputs_r>
 800b12a:	3001      	adds	r0, #1
 800b12c:	f000 80a7 	beq.w	800b27e <_svfiprintf_r+0x1c6>
 800b130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b132:	445a      	add	r2, fp
 800b134:	9209      	str	r2, [sp, #36]	@ 0x24
 800b136:	f89a 3000 	ldrb.w	r3, [sl]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 809f 	beq.w	800b27e <_svfiprintf_r+0x1c6>
 800b140:	2300      	movs	r3, #0
 800b142:	f04f 32ff 	mov.w	r2, #4294967295
 800b146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14a:	f10a 0a01 	add.w	sl, sl, #1
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b156:	931a      	str	r3, [sp, #104]	@ 0x68
 800b158:	4654      	mov	r4, sl
 800b15a:	2205      	movs	r2, #5
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	484e      	ldr	r0, [pc, #312]	@ (800b29c <_svfiprintf_r+0x1e4>)
 800b162:	f7f5 f8bd 	bl	80002e0 <memchr>
 800b166:	9a04      	ldr	r2, [sp, #16]
 800b168:	b9d8      	cbnz	r0, 800b1a2 <_svfiprintf_r+0xea>
 800b16a:	06d0      	lsls	r0, r2, #27
 800b16c:	bf44      	itt	mi
 800b16e:	2320      	movmi	r3, #32
 800b170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b174:	0711      	lsls	r1, r2, #28
 800b176:	bf44      	itt	mi
 800b178:	232b      	movmi	r3, #43	@ 0x2b
 800b17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b17e:	f89a 3000 	ldrb.w	r3, [sl]
 800b182:	2b2a      	cmp	r3, #42	@ 0x2a
 800b184:	d015      	beq.n	800b1b2 <_svfiprintf_r+0xfa>
 800b186:	9a07      	ldr	r2, [sp, #28]
 800b188:	4654      	mov	r4, sl
 800b18a:	2000      	movs	r0, #0
 800b18c:	f04f 0c0a 	mov.w	ip, #10
 800b190:	4621      	mov	r1, r4
 800b192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b196:	3b30      	subs	r3, #48	@ 0x30
 800b198:	2b09      	cmp	r3, #9
 800b19a:	d94b      	bls.n	800b234 <_svfiprintf_r+0x17c>
 800b19c:	b1b0      	cbz	r0, 800b1cc <_svfiprintf_r+0x114>
 800b19e:	9207      	str	r2, [sp, #28]
 800b1a0:	e014      	b.n	800b1cc <_svfiprintf_r+0x114>
 800b1a2:	eba0 0308 	sub.w	r3, r0, r8
 800b1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	46a2      	mov	sl, r4
 800b1b0:	e7d2      	b.n	800b158 <_svfiprintf_r+0xa0>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	1d19      	adds	r1, r3, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	9103      	str	r1, [sp, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfbb      	ittet	lt
 800b1be:	425b      	neglt	r3, r3
 800b1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c4:	9307      	strge	r3, [sp, #28]
 800b1c6:	9307      	strlt	r3, [sp, #28]
 800b1c8:	bfb8      	it	lt
 800b1ca:	9204      	strlt	r2, [sp, #16]
 800b1cc:	7823      	ldrb	r3, [r4, #0]
 800b1ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1d0:	d10a      	bne.n	800b1e8 <_svfiprintf_r+0x130>
 800b1d2:	7863      	ldrb	r3, [r4, #1]
 800b1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1d6:	d132      	bne.n	800b23e <_svfiprintf_r+0x186>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	1d1a      	adds	r2, r3, #4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	9203      	str	r2, [sp, #12]
 800b1e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1e4:	3402      	adds	r4, #2
 800b1e6:	9305      	str	r3, [sp, #20]
 800b1e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b2ac <_svfiprintf_r+0x1f4>
 800b1ec:	7821      	ldrb	r1, [r4, #0]
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	f7f5 f875 	bl	80002e0 <memchr>
 800b1f6:	b138      	cbz	r0, 800b208 <_svfiprintf_r+0x150>
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	eba0 000a 	sub.w	r0, r0, sl
 800b1fe:	2240      	movs	r2, #64	@ 0x40
 800b200:	4082      	lsls	r2, r0
 800b202:	4313      	orrs	r3, r2
 800b204:	3401      	adds	r4, #1
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20c:	4824      	ldr	r0, [pc, #144]	@ (800b2a0 <_svfiprintf_r+0x1e8>)
 800b20e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b212:	2206      	movs	r2, #6
 800b214:	f7f5 f864 	bl	80002e0 <memchr>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d036      	beq.n	800b28a <_svfiprintf_r+0x1d2>
 800b21c:	4b21      	ldr	r3, [pc, #132]	@ (800b2a4 <_svfiprintf_r+0x1ec>)
 800b21e:	bb1b      	cbnz	r3, 800b268 <_svfiprintf_r+0x1b0>
 800b220:	9b03      	ldr	r3, [sp, #12]
 800b222:	3307      	adds	r3, #7
 800b224:	f023 0307 	bic.w	r3, r3, #7
 800b228:	3308      	adds	r3, #8
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22e:	4433      	add	r3, r6
 800b230:	9309      	str	r3, [sp, #36]	@ 0x24
 800b232:	e76a      	b.n	800b10a <_svfiprintf_r+0x52>
 800b234:	fb0c 3202 	mla	r2, ip, r2, r3
 800b238:	460c      	mov	r4, r1
 800b23a:	2001      	movs	r0, #1
 800b23c:	e7a8      	b.n	800b190 <_svfiprintf_r+0xd8>
 800b23e:	2300      	movs	r3, #0
 800b240:	3401      	adds	r4, #1
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	4619      	mov	r1, r3
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4620      	mov	r0, r4
 800b24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b250:	3a30      	subs	r2, #48	@ 0x30
 800b252:	2a09      	cmp	r2, #9
 800b254:	d903      	bls.n	800b25e <_svfiprintf_r+0x1a6>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0c6      	beq.n	800b1e8 <_svfiprintf_r+0x130>
 800b25a:	9105      	str	r1, [sp, #20]
 800b25c:	e7c4      	b.n	800b1e8 <_svfiprintf_r+0x130>
 800b25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b262:	4604      	mov	r4, r0
 800b264:	2301      	movs	r3, #1
 800b266:	e7f0      	b.n	800b24a <_svfiprintf_r+0x192>
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	462a      	mov	r2, r5
 800b26e:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a8 <_svfiprintf_r+0x1f0>)
 800b270:	a904      	add	r1, sp, #16
 800b272:	4638      	mov	r0, r7
 800b274:	f3af 8000 	nop.w
 800b278:	1c42      	adds	r2, r0, #1
 800b27a:	4606      	mov	r6, r0
 800b27c:	d1d6      	bne.n	800b22c <_svfiprintf_r+0x174>
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	065b      	lsls	r3, r3, #25
 800b282:	f53f af2d 	bmi.w	800b0e0 <_svfiprintf_r+0x28>
 800b286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b288:	e72c      	b.n	800b0e4 <_svfiprintf_r+0x2c>
 800b28a:	ab03      	add	r3, sp, #12
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	462a      	mov	r2, r5
 800b290:	4b05      	ldr	r3, [pc, #20]	@ (800b2a8 <_svfiprintf_r+0x1f0>)
 800b292:	a904      	add	r1, sp, #16
 800b294:	4638      	mov	r0, r7
 800b296:	f000 f879 	bl	800b38c <_printf_i>
 800b29a:	e7ed      	b.n	800b278 <_svfiprintf_r+0x1c0>
 800b29c:	0800b740 	.word	0x0800b740
 800b2a0:	0800b74a 	.word	0x0800b74a
 800b2a4:	00000000 	.word	0x00000000
 800b2a8:	0800b001 	.word	0x0800b001
 800b2ac:	0800b746 	.word	0x0800b746

0800b2b0 <_printf_common>:
 800b2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b4:	4616      	mov	r6, r2
 800b2b6:	4698      	mov	r8, r3
 800b2b8:	688a      	ldr	r2, [r1, #8]
 800b2ba:	690b      	ldr	r3, [r1, #16]
 800b2bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	bfb8      	it	lt
 800b2c4:	4613      	movlt	r3, r2
 800b2c6:	6033      	str	r3, [r6, #0]
 800b2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	b10a      	cbz	r2, 800b2d6 <_printf_common+0x26>
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	6033      	str	r3, [r6, #0]
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	0699      	lsls	r1, r3, #26
 800b2da:	bf42      	ittt	mi
 800b2dc:	6833      	ldrmi	r3, [r6, #0]
 800b2de:	3302      	addmi	r3, #2
 800b2e0:	6033      	strmi	r3, [r6, #0]
 800b2e2:	6825      	ldr	r5, [r4, #0]
 800b2e4:	f015 0506 	ands.w	r5, r5, #6
 800b2e8:	d106      	bne.n	800b2f8 <_printf_common+0x48>
 800b2ea:	f104 0a19 	add.w	sl, r4, #25
 800b2ee:	68e3      	ldr	r3, [r4, #12]
 800b2f0:	6832      	ldr	r2, [r6, #0]
 800b2f2:	1a9b      	subs	r3, r3, r2
 800b2f4:	42ab      	cmp	r3, r5
 800b2f6:	dc26      	bgt.n	800b346 <_printf_common+0x96>
 800b2f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2fc:	6822      	ldr	r2, [r4, #0]
 800b2fe:	3b00      	subs	r3, #0
 800b300:	bf18      	it	ne
 800b302:	2301      	movne	r3, #1
 800b304:	0692      	lsls	r2, r2, #26
 800b306:	d42b      	bmi.n	800b360 <_printf_common+0xb0>
 800b308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b30c:	4641      	mov	r1, r8
 800b30e:	4638      	mov	r0, r7
 800b310:	47c8      	blx	r9
 800b312:	3001      	adds	r0, #1
 800b314:	d01e      	beq.n	800b354 <_printf_common+0xa4>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	6922      	ldr	r2, [r4, #16]
 800b31a:	f003 0306 	and.w	r3, r3, #6
 800b31e:	2b04      	cmp	r3, #4
 800b320:	bf02      	ittt	eq
 800b322:	68e5      	ldreq	r5, [r4, #12]
 800b324:	6833      	ldreq	r3, [r6, #0]
 800b326:	1aed      	subeq	r5, r5, r3
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	bf0c      	ite	eq
 800b32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b330:	2500      	movne	r5, #0
 800b332:	4293      	cmp	r3, r2
 800b334:	bfc4      	itt	gt
 800b336:	1a9b      	subgt	r3, r3, r2
 800b338:	18ed      	addgt	r5, r5, r3
 800b33a:	2600      	movs	r6, #0
 800b33c:	341a      	adds	r4, #26
 800b33e:	42b5      	cmp	r5, r6
 800b340:	d11a      	bne.n	800b378 <_printf_common+0xc8>
 800b342:	2000      	movs	r0, #0
 800b344:	e008      	b.n	800b358 <_printf_common+0xa8>
 800b346:	2301      	movs	r3, #1
 800b348:	4652      	mov	r2, sl
 800b34a:	4641      	mov	r1, r8
 800b34c:	4638      	mov	r0, r7
 800b34e:	47c8      	blx	r9
 800b350:	3001      	adds	r0, #1
 800b352:	d103      	bne.n	800b35c <_printf_common+0xac>
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35c:	3501      	adds	r5, #1
 800b35e:	e7c6      	b.n	800b2ee <_printf_common+0x3e>
 800b360:	18e1      	adds	r1, r4, r3
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	2030      	movs	r0, #48	@ 0x30
 800b366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b36a:	4422      	add	r2, r4
 800b36c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b374:	3302      	adds	r3, #2
 800b376:	e7c7      	b.n	800b308 <_printf_common+0x58>
 800b378:	2301      	movs	r3, #1
 800b37a:	4622      	mov	r2, r4
 800b37c:	4641      	mov	r1, r8
 800b37e:	4638      	mov	r0, r7
 800b380:	47c8      	blx	r9
 800b382:	3001      	adds	r0, #1
 800b384:	d0e6      	beq.n	800b354 <_printf_common+0xa4>
 800b386:	3601      	adds	r6, #1
 800b388:	e7d9      	b.n	800b33e <_printf_common+0x8e>
	...

0800b38c <_printf_i>:
 800b38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	7e0f      	ldrb	r7, [r1, #24]
 800b392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b394:	2f78      	cmp	r7, #120	@ 0x78
 800b396:	4691      	mov	r9, r2
 800b398:	4680      	mov	r8, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	469a      	mov	sl, r3
 800b39e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3a2:	d807      	bhi.n	800b3b4 <_printf_i+0x28>
 800b3a4:	2f62      	cmp	r7, #98	@ 0x62
 800b3a6:	d80a      	bhi.n	800b3be <_printf_i+0x32>
 800b3a8:	2f00      	cmp	r7, #0
 800b3aa:	f000 80d2 	beq.w	800b552 <_printf_i+0x1c6>
 800b3ae:	2f58      	cmp	r7, #88	@ 0x58
 800b3b0:	f000 80b9 	beq.w	800b526 <_printf_i+0x19a>
 800b3b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3bc:	e03a      	b.n	800b434 <_printf_i+0xa8>
 800b3be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3c2:	2b15      	cmp	r3, #21
 800b3c4:	d8f6      	bhi.n	800b3b4 <_printf_i+0x28>
 800b3c6:	a101      	add	r1, pc, #4	@ (adr r1, 800b3cc <_printf_i+0x40>)
 800b3c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3cc:	0800b425 	.word	0x0800b425
 800b3d0:	0800b439 	.word	0x0800b439
 800b3d4:	0800b3b5 	.word	0x0800b3b5
 800b3d8:	0800b3b5 	.word	0x0800b3b5
 800b3dc:	0800b3b5 	.word	0x0800b3b5
 800b3e0:	0800b3b5 	.word	0x0800b3b5
 800b3e4:	0800b439 	.word	0x0800b439
 800b3e8:	0800b3b5 	.word	0x0800b3b5
 800b3ec:	0800b3b5 	.word	0x0800b3b5
 800b3f0:	0800b3b5 	.word	0x0800b3b5
 800b3f4:	0800b3b5 	.word	0x0800b3b5
 800b3f8:	0800b539 	.word	0x0800b539
 800b3fc:	0800b463 	.word	0x0800b463
 800b400:	0800b4f3 	.word	0x0800b4f3
 800b404:	0800b3b5 	.word	0x0800b3b5
 800b408:	0800b3b5 	.word	0x0800b3b5
 800b40c:	0800b55b 	.word	0x0800b55b
 800b410:	0800b3b5 	.word	0x0800b3b5
 800b414:	0800b463 	.word	0x0800b463
 800b418:	0800b3b5 	.word	0x0800b3b5
 800b41c:	0800b3b5 	.word	0x0800b3b5
 800b420:	0800b4fb 	.word	0x0800b4fb
 800b424:	6833      	ldr	r3, [r6, #0]
 800b426:	1d1a      	adds	r2, r3, #4
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6032      	str	r2, [r6, #0]
 800b42c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b434:	2301      	movs	r3, #1
 800b436:	e09d      	b.n	800b574 <_printf_i+0x1e8>
 800b438:	6833      	ldr	r3, [r6, #0]
 800b43a:	6820      	ldr	r0, [r4, #0]
 800b43c:	1d19      	adds	r1, r3, #4
 800b43e:	6031      	str	r1, [r6, #0]
 800b440:	0606      	lsls	r6, r0, #24
 800b442:	d501      	bpl.n	800b448 <_printf_i+0xbc>
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	e003      	b.n	800b450 <_printf_i+0xc4>
 800b448:	0645      	lsls	r5, r0, #25
 800b44a:	d5fb      	bpl.n	800b444 <_printf_i+0xb8>
 800b44c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b450:	2d00      	cmp	r5, #0
 800b452:	da03      	bge.n	800b45c <_printf_i+0xd0>
 800b454:	232d      	movs	r3, #45	@ 0x2d
 800b456:	426d      	negs	r5, r5
 800b458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b45c:	4859      	ldr	r0, [pc, #356]	@ (800b5c4 <_printf_i+0x238>)
 800b45e:	230a      	movs	r3, #10
 800b460:	e011      	b.n	800b486 <_printf_i+0xfa>
 800b462:	6821      	ldr	r1, [r4, #0]
 800b464:	6833      	ldr	r3, [r6, #0]
 800b466:	0608      	lsls	r0, r1, #24
 800b468:	f853 5b04 	ldr.w	r5, [r3], #4
 800b46c:	d402      	bmi.n	800b474 <_printf_i+0xe8>
 800b46e:	0649      	lsls	r1, r1, #25
 800b470:	bf48      	it	mi
 800b472:	b2ad      	uxthmi	r5, r5
 800b474:	2f6f      	cmp	r7, #111	@ 0x6f
 800b476:	4853      	ldr	r0, [pc, #332]	@ (800b5c4 <_printf_i+0x238>)
 800b478:	6033      	str	r3, [r6, #0]
 800b47a:	bf14      	ite	ne
 800b47c:	230a      	movne	r3, #10
 800b47e:	2308      	moveq	r3, #8
 800b480:	2100      	movs	r1, #0
 800b482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b486:	6866      	ldr	r6, [r4, #4]
 800b488:	60a6      	str	r6, [r4, #8]
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	bfa2      	ittt	ge
 800b48e:	6821      	ldrge	r1, [r4, #0]
 800b490:	f021 0104 	bicge.w	r1, r1, #4
 800b494:	6021      	strge	r1, [r4, #0]
 800b496:	b90d      	cbnz	r5, 800b49c <_printf_i+0x110>
 800b498:	2e00      	cmp	r6, #0
 800b49a:	d04b      	beq.n	800b534 <_printf_i+0x1a8>
 800b49c:	4616      	mov	r6, r2
 800b49e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4a2:	fb03 5711 	mls	r7, r3, r1, r5
 800b4a6:	5dc7      	ldrb	r7, [r0, r7]
 800b4a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4ac:	462f      	mov	r7, r5
 800b4ae:	42bb      	cmp	r3, r7
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	d9f4      	bls.n	800b49e <_printf_i+0x112>
 800b4b4:	2b08      	cmp	r3, #8
 800b4b6:	d10b      	bne.n	800b4d0 <_printf_i+0x144>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	07df      	lsls	r7, r3, #31
 800b4bc:	d508      	bpl.n	800b4d0 <_printf_i+0x144>
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	6861      	ldr	r1, [r4, #4]
 800b4c2:	4299      	cmp	r1, r3
 800b4c4:	bfde      	ittt	le
 800b4c6:	2330      	movle	r3, #48	@ 0x30
 800b4c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4d0:	1b92      	subs	r2, r2, r6
 800b4d2:	6122      	str	r2, [r4, #16]
 800b4d4:	f8cd a000 	str.w	sl, [sp]
 800b4d8:	464b      	mov	r3, r9
 800b4da:	aa03      	add	r2, sp, #12
 800b4dc:	4621      	mov	r1, r4
 800b4de:	4640      	mov	r0, r8
 800b4e0:	f7ff fee6 	bl	800b2b0 <_printf_common>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d14a      	bne.n	800b57e <_printf_i+0x1f2>
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	b004      	add	sp, #16
 800b4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	f043 0320 	orr.w	r3, r3, #32
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	4833      	ldr	r0, [pc, #204]	@ (800b5c8 <_printf_i+0x23c>)
 800b4fc:	2778      	movs	r7, #120	@ 0x78
 800b4fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	6831      	ldr	r1, [r6, #0]
 800b506:	061f      	lsls	r7, r3, #24
 800b508:	f851 5b04 	ldr.w	r5, [r1], #4
 800b50c:	d402      	bmi.n	800b514 <_printf_i+0x188>
 800b50e:	065f      	lsls	r7, r3, #25
 800b510:	bf48      	it	mi
 800b512:	b2ad      	uxthmi	r5, r5
 800b514:	6031      	str	r1, [r6, #0]
 800b516:	07d9      	lsls	r1, r3, #31
 800b518:	bf44      	itt	mi
 800b51a:	f043 0320 	orrmi.w	r3, r3, #32
 800b51e:	6023      	strmi	r3, [r4, #0]
 800b520:	b11d      	cbz	r5, 800b52a <_printf_i+0x19e>
 800b522:	2310      	movs	r3, #16
 800b524:	e7ac      	b.n	800b480 <_printf_i+0xf4>
 800b526:	4827      	ldr	r0, [pc, #156]	@ (800b5c4 <_printf_i+0x238>)
 800b528:	e7e9      	b.n	800b4fe <_printf_i+0x172>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	f023 0320 	bic.w	r3, r3, #32
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	e7f6      	b.n	800b522 <_printf_i+0x196>
 800b534:	4616      	mov	r6, r2
 800b536:	e7bd      	b.n	800b4b4 <_printf_i+0x128>
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	6825      	ldr	r5, [r4, #0]
 800b53c:	6961      	ldr	r1, [r4, #20]
 800b53e:	1d18      	adds	r0, r3, #4
 800b540:	6030      	str	r0, [r6, #0]
 800b542:	062e      	lsls	r6, r5, #24
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	d501      	bpl.n	800b54c <_printf_i+0x1c0>
 800b548:	6019      	str	r1, [r3, #0]
 800b54a:	e002      	b.n	800b552 <_printf_i+0x1c6>
 800b54c:	0668      	lsls	r0, r5, #25
 800b54e:	d5fb      	bpl.n	800b548 <_printf_i+0x1bc>
 800b550:	8019      	strh	r1, [r3, #0]
 800b552:	2300      	movs	r3, #0
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	4616      	mov	r6, r2
 800b558:	e7bc      	b.n	800b4d4 <_printf_i+0x148>
 800b55a:	6833      	ldr	r3, [r6, #0]
 800b55c:	1d1a      	adds	r2, r3, #4
 800b55e:	6032      	str	r2, [r6, #0]
 800b560:	681e      	ldr	r6, [r3, #0]
 800b562:	6862      	ldr	r2, [r4, #4]
 800b564:	2100      	movs	r1, #0
 800b566:	4630      	mov	r0, r6
 800b568:	f7f4 feba 	bl	80002e0 <memchr>
 800b56c:	b108      	cbz	r0, 800b572 <_printf_i+0x1e6>
 800b56e:	1b80      	subs	r0, r0, r6
 800b570:	6060      	str	r0, [r4, #4]
 800b572:	6863      	ldr	r3, [r4, #4]
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	2300      	movs	r3, #0
 800b578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b57c:	e7aa      	b.n	800b4d4 <_printf_i+0x148>
 800b57e:	6923      	ldr	r3, [r4, #16]
 800b580:	4632      	mov	r2, r6
 800b582:	4649      	mov	r1, r9
 800b584:	4640      	mov	r0, r8
 800b586:	47d0      	blx	sl
 800b588:	3001      	adds	r0, #1
 800b58a:	d0ad      	beq.n	800b4e8 <_printf_i+0x15c>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	079b      	lsls	r3, r3, #30
 800b590:	d413      	bmi.n	800b5ba <_printf_i+0x22e>
 800b592:	68e0      	ldr	r0, [r4, #12]
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	4298      	cmp	r0, r3
 800b598:	bfb8      	it	lt
 800b59a:	4618      	movlt	r0, r3
 800b59c:	e7a6      	b.n	800b4ec <_printf_i+0x160>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	47d0      	blx	sl
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d09d      	beq.n	800b4e8 <_printf_i+0x15c>
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	68e3      	ldr	r3, [r4, #12]
 800b5b0:	9903      	ldr	r1, [sp, #12]
 800b5b2:	1a5b      	subs	r3, r3, r1
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	dcf2      	bgt.n	800b59e <_printf_i+0x212>
 800b5b8:	e7eb      	b.n	800b592 <_printf_i+0x206>
 800b5ba:	2500      	movs	r5, #0
 800b5bc:	f104 0619 	add.w	r6, r4, #25
 800b5c0:	e7f5      	b.n	800b5ae <_printf_i+0x222>
 800b5c2:	bf00      	nop
 800b5c4:	0800b751 	.word	0x0800b751
 800b5c8:	0800b762 	.word	0x0800b762

0800b5cc <memmove>:
 800b5cc:	4288      	cmp	r0, r1
 800b5ce:	b510      	push	{r4, lr}
 800b5d0:	eb01 0402 	add.w	r4, r1, r2
 800b5d4:	d902      	bls.n	800b5dc <memmove+0x10>
 800b5d6:	4284      	cmp	r4, r0
 800b5d8:	4623      	mov	r3, r4
 800b5da:	d807      	bhi.n	800b5ec <memmove+0x20>
 800b5dc:	1e43      	subs	r3, r0, #1
 800b5de:	42a1      	cmp	r1, r4
 800b5e0:	d008      	beq.n	800b5f4 <memmove+0x28>
 800b5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ea:	e7f8      	b.n	800b5de <memmove+0x12>
 800b5ec:	4402      	add	r2, r0
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	428a      	cmp	r2, r1
 800b5f2:	d100      	bne.n	800b5f6 <memmove+0x2a>
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5fe:	e7f7      	b.n	800b5f0 <memmove+0x24>

0800b600 <_sbrk_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4d06      	ldr	r5, [pc, #24]	@ (800b61c <_sbrk_r+0x1c>)
 800b604:	2300      	movs	r3, #0
 800b606:	4604      	mov	r4, r0
 800b608:	4608      	mov	r0, r1
 800b60a:	602b      	str	r3, [r5, #0]
 800b60c:	f7f7 f82c 	bl	8002668 <_sbrk>
 800b610:	1c43      	adds	r3, r0, #1
 800b612:	d102      	bne.n	800b61a <_sbrk_r+0x1a>
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	b103      	cbz	r3, 800b61a <_sbrk_r+0x1a>
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	bd38      	pop	{r3, r4, r5, pc}
 800b61c:	240006d8 	.word	0x240006d8

0800b620 <memcpy>:
 800b620:	440a      	add	r2, r1
 800b622:	4291      	cmp	r1, r2
 800b624:	f100 33ff 	add.w	r3, r0, #4294967295
 800b628:	d100      	bne.n	800b62c <memcpy+0xc>
 800b62a:	4770      	bx	lr
 800b62c:	b510      	push	{r4, lr}
 800b62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b636:	4291      	cmp	r1, r2
 800b638:	d1f9      	bne.n	800b62e <memcpy+0xe>
 800b63a:	bd10      	pop	{r4, pc}

0800b63c <_realloc_r>:
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	4680      	mov	r8, r0
 800b642:	4615      	mov	r5, r2
 800b644:	460c      	mov	r4, r1
 800b646:	b921      	cbnz	r1, 800b652 <_realloc_r+0x16>
 800b648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b64c:	4611      	mov	r1, r2
 800b64e:	f7ff bc4b 	b.w	800aee8 <_malloc_r>
 800b652:	b92a      	cbnz	r2, 800b660 <_realloc_r+0x24>
 800b654:	f7ff fbdc 	bl	800ae10 <_free_r>
 800b658:	2400      	movs	r4, #0
 800b65a:	4620      	mov	r0, r4
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	f000 f81a 	bl	800b698 <_malloc_usable_size_r>
 800b664:	4285      	cmp	r5, r0
 800b666:	4606      	mov	r6, r0
 800b668:	d802      	bhi.n	800b670 <_realloc_r+0x34>
 800b66a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b66e:	d8f4      	bhi.n	800b65a <_realloc_r+0x1e>
 800b670:	4629      	mov	r1, r5
 800b672:	4640      	mov	r0, r8
 800b674:	f7ff fc38 	bl	800aee8 <_malloc_r>
 800b678:	4607      	mov	r7, r0
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0ec      	beq.n	800b658 <_realloc_r+0x1c>
 800b67e:	42b5      	cmp	r5, r6
 800b680:	462a      	mov	r2, r5
 800b682:	4621      	mov	r1, r4
 800b684:	bf28      	it	cs
 800b686:	4632      	movcs	r2, r6
 800b688:	f7ff ffca 	bl	800b620 <memcpy>
 800b68c:	4621      	mov	r1, r4
 800b68e:	4640      	mov	r0, r8
 800b690:	f7ff fbbe 	bl	800ae10 <_free_r>
 800b694:	463c      	mov	r4, r7
 800b696:	e7e0      	b.n	800b65a <_realloc_r+0x1e>

0800b698 <_malloc_usable_size_r>:
 800b698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69c:	1f18      	subs	r0, r3, #4
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bfbc      	itt	lt
 800b6a2:	580b      	ldrlt	r3, [r1, r0]
 800b6a4:	18c0      	addlt	r0, r0, r3
 800b6a6:	4770      	bx	lr

0800b6a8 <_init>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	bf00      	nop
 800b6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ae:	bc08      	pop	{r3}
 800b6b0:	469e      	mov	lr, r3
 800b6b2:	4770      	bx	lr

0800b6b4 <_fini>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	bf00      	nop
 800b6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ba:	bc08      	pop	{r3}
 800b6bc:	469e      	mov	lr, r3
 800b6be:	4770      	bx	lr
