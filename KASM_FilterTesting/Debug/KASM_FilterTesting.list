
KASM_FilterTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9dc  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ac78  0800ac78  0000bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800acd0  0800acd0  0000bcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800acd8  0800acd8  0000bcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800acdc  0800acdc  0000bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000030  24000000  0800ace0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004f4  24000030  0800ad10  0000c030  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000524  0800ad10  0000c524  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c47a  00000000  00000000  0000c05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b1c  00000000  00000000  000284d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011e1  00000000  00000000  0002c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003924e  00000000  00000000  0002d869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cd3d  00000000  00000000  00066ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017afe9  00000000  00000000  000837f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fe7dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000062a0  00000000  00000000  001fe820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  00204ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ac5c 	.word	0x0800ac5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	0800ac5c 	.word	0x0800ac5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005cc:	f001 fa3c 	bl	8001a48 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f002 f880 	bl	80026d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f862 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f001 f86c 	bl	80016b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005dc:	f000 fb0e 	bl	8000bfc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005e0:	f000 fbdc 	bl	8000d9c <MX_TIM2_Init>
  MX_TIM4_Init();
 80005e4:	f000 fc34 	bl	8000e50 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005e8:	f000 fcca 	bl	8000f80 <MX_TIM5_Init>
  MX_TIM8_Init();
 80005ec:	f000 fd4a 	bl	8001084 <MX_TIM8_Init>
  MX_TIM12_Init();
 80005f0:	f000 fdd6 	bl	80011a0 <MX_TIM12_Init>
  MX_TIM13_Init();
 80005f4:	f000 fe4c 	bl	8001290 <MX_TIM13_Init>
  MX_TIM14_Init();
 80005f8:	f000 fe98 	bl	800132c <MX_TIM14_Init>
  MX_TIM15_Init();
 80005fc:	f000 fee4 	bl	80013c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000600:	f000 ff92 	bl	8001528 <MX_TIM16_Init>
  MX_HRTIM_Init();
 8000604:	f000 f8f8 	bl	80007f8 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 8000608:	f000 facc 	bl	8000ba4 <MX_LPTIM1_Init>
  MX_UART4_Init();
 800060c:	f001 f806 	bl	800161c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  //Timer 1
    HAL_TIM_Base_Start_IT(&htim1);
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <main+0xbc>)
 8000612:	f007 fad1 	bl	8007bb8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000616:	2100      	movs	r1, #0
 8000618:	481a      	ldr	r0, [pc, #104]	@ (8000684 <main+0xbc>)
 800061a:	f007 fb9d 	bl	8007d58 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	4818      	ldr	r0, [pc, #96]	@ (8000684 <main+0xbc>)
 8000622:	f007 fb99 	bl	8007d58 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000626:	2108      	movs	r1, #8
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <main+0xbc>)
 800062a:	f007 fb95 	bl	8007d58 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800062e:	210c      	movs	r1, #12
 8000630:	4814      	ldr	r0, [pc, #80]	@ (8000684 <main+0xbc>)
 8000632:	f007 fb91 	bl	8007d58 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <main+0xc0>)
 800063c:	f003 f984 	bl	8003948 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2102      	movs	r1, #2
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <main+0xc0>)
 8000646:	f003 f97f 	bl	8003948 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2104      	movs	r1, #4
 800064e:	480e      	ldr	r0, [pc, #56]	@ (8000688 <main+0xc0>)
 8000650:	f003 f97a 	bl	8003948 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2108      	movs	r1, #8
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <main+0xc0>)
 800065a:	f003 f975 	bl	8003948 <HAL_GPIO_WritePin>
    //End Timer 1


    //gen_sine();
    HAL_UART_Transmit(&huart4, tx_buffer, 27, 10);
 800065e:	230a      	movs	r3, #10
 8000660:	221b      	movs	r2, #27
 8000662:	490a      	ldr	r1, [pc, #40]	@ (800068c <main+0xc4>)
 8000664:	480a      	ldr	r0, [pc, #40]	@ (8000690 <main+0xc8>)
 8000666:	f008 fd7b 	bl	8009160 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <main+0xcc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1fb      	bne.n	800066a <main+0xa2>
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <main+0xd0>)
 8000674:	ed93 7b00 	vldr	d7, [r3]
 8000678:	eeb0 0b47 	vmov.f64	d0, d7
 800067c:	f001 f930 	bl	80018e0 <control_update>
 8000680:	e7f3      	b.n	800066a <main+0xa2>
 8000682:	bf00      	nop
 8000684:	24000160 	.word	0x24000160
 8000688:	58021000 	.word	0x58021000
 800068c:	24000000 	.word	0x24000000
 8000690:	24000458 	.word	0x24000458
 8000694:	240004ec 	.word	0x240004ec
 8000698:	240004f0 	.word	0x240004f0

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09e      	sub	sp, #120	@ 0x78
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a6:	224c      	movs	r2, #76	@ 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00a faaa 	bl	800ac04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00a faa3 	bl	800ac04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006be:	2002      	movs	r0, #2
 80006c0:	f004 fbd6 	bl	8004e70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b48      	ldr	r3, [pc, #288]	@ (80007ec <SystemClock_Config+0x150>)
 80006ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006cc:	4a47      	ldr	r2, [pc, #284]	@ (80007ec <SystemClock_Config+0x150>)
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006d4:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <SystemClock_Config+0x150>)
 80006d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <SystemClock_Config+0x154>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a43      	ldr	r2, [pc, #268]	@ (80007f0 <SystemClock_Config+0x154>)
 80006e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <SystemClock_Config+0x154>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f6:	bf00      	nop
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemClock_Config+0x154>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000704:	d1f8      	bne.n	80006f8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <SystemClock_Config+0x158>)
 8000708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800070c:	4a39      	ldr	r2, [pc, #228]	@ (80007f4 <SystemClock_Config+0x158>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000716:	4b37      	ldr	r3, [pc, #220]	@ (80007f4 <SystemClock_Config+0x158>)
 8000718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <SystemClock_Config+0x154>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a30      	ldr	r2, [pc, #192]	@ (80007f0 <SystemClock_Config+0x154>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <SystemClock_Config+0x154>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <SystemClock_Config+0x150>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <SystemClock_Config+0x150>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0x150>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000756:	bf00      	nop
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <SystemClock_Config+0x154>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000764:	d1f8      	bne.n	8000758 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000766:	2301      	movs	r3, #1
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000774:	2302      	movs	r3, #2
 8000776:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800077c:	2350      	movs	r3, #80	@ 0x50
 800077e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800078c:	230c      	movs	r3, #12
 800078e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000790:	2300      	movs	r3, #0
 8000792:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fba1 	bl	8004ee4 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007a8:	f001 f97a 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	233f      	movs	r3, #63	@ 0x3f
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007b8:	2308      	movs	r3, #8
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007bc:	2340      	movs	r3, #64	@ 0x40
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2104      	movs	r1, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 ffdf 	bl	8005798 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80007e0:	f001 f95e 	bl	8001aa0 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3778      	adds	r7, #120	@ 0x78
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58000400 	.word	0x58000400
 80007f0:	58024800 	.word	0x58024800
 80007f4:	58024400 	.word	0x58024400

080007f8 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0aa      	sub	sp, #168	@ 0xa8
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80007fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800080e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800081c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000820:	2254      	movs	r2, #84	@ 0x54
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f00a f9ed 	bl	800ac04 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2220      	movs	r2, #32
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f00a f9e1 	bl	800ac04 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000842:	4bc4      	ldr	r3, [pc, #784]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000844:	4ac4      	ldr	r2, [pc, #784]	@ (8000b58 <MX_HRTIM_Init+0x360>)
 8000846:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000848:	4bc2      	ldr	r3, [pc, #776]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800084e:	4bc1      	ldr	r3, [pc, #772]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000854:	48bf      	ldr	r0, [pc, #764]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000856:	f003 f891 	bl	800397c <HAL_HRTIM_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000860:	f001 f91e 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	48bb      	ldr	r0, [pc, #748]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000868:	f003 f9af 	bl	8003bca <HAL_HRTIM_EventPrescalerConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000872:	f001 f915 	bl	8001aa0 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000876:	2302      	movs	r3, #2
 8000878:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000882:	2308      	movs	r3, #8
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 800088e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000892:	461a      	mov	r2, r3
 8000894:	2101      	movs	r1, #1
 8000896:	48af      	ldr	r0, [pc, #700]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000898:	f003 f968 	bl	8003b6c <HAL_HRTIM_EventConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 80008a2:	f001 f8fd 	bl	8001aa0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 80008a6:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 80008aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80008b4:	2305      	movs	r3, #5
 80008b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80008ba:	2308      	movs	r3, #8
 80008bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80008c0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80008c4:	461a      	mov	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	48a2      	ldr	r0, [pc, #648]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 80008ca:	f003 f927 	bl	8003b1c <HAL_HRTIM_TimeBaseConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 80008d4:	f001 f8e4 	bl	8001aa0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80008ec:	2300      	movs	r3, #0
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80008f0:	2300      	movs	r3, #0
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80008fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000900:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000902:	2300      	movs	r3, #0
 8000904:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000906:	2300      	movs	r3, #0
 8000908:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800090a:	2300      	movs	r3, #0
 800090c:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800090e:	2300      	movs	r3, #0
 8000910:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000916:	2300      	movs	r3, #0
 8000918:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800091a:	2300      	movs	r3, #0
 800091c:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800091e:	2300      	movs	r3, #0
 8000920:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000922:	2300      	movs	r3, #0
 8000924:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800092a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 800092c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000934:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000938:	461a      	mov	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	4885      	ldr	r0, [pc, #532]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 800093e:	f003 f97d 	bl	8003c3c <HAL_HRTIM_WaveformTimerConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000948:	f001 f8aa 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800094c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000950:	461a      	mov	r2, r3
 8000952:	2101      	movs	r1, #1
 8000954:	487f      	ldr	r0, [pc, #508]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000956:	f003 f971 	bl	8003c3c <HAL_HRTIM_WaveformTimerConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000960:	f001 f89e 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000964:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000968:	461a      	mov	r2, r3
 800096a:	2102      	movs	r1, #2
 800096c:	4879      	ldr	r0, [pc, #484]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 800096e:	f003 f965 	bl	8003c3c <HAL_HRTIM_WaveformTimerConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000978:	f001 f892 	bl	8001aa0 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800097c:	2300      	movs	r3, #0
 800097e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000980:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000984:	461a      	mov	r2, r3
 8000986:	2103      	movs	r1, #3
 8000988:	4872      	ldr	r0, [pc, #456]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 800098a:	f003 f957 	bl	8003c3c <HAL_HRTIM_WaveformTimerConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000994:	f001 f884 	bl	8001aa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000998:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	2201      	movs	r2, #1
 80009a4:	2100      	movs	r1, #0
 80009a6:	486b      	ldr	r0, [pc, #428]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 80009a8:	f003 f9ba 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 80009b2:	f001 f875 	bl	8001aa0 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	2202      	movs	r2, #2
 80009c4:	2100      	movs	r1, #0
 80009c6:	4863      	ldr	r0, [pc, #396]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 80009c8:	f003 f9aa 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 80009d2:	f001 f865 	bl	8001aa0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	2202      	movs	r2, #2
 80009dc:	2101      	movs	r1, #1
 80009de:	485d      	ldr	r0, [pc, #372]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 80009e0:	f003 f99e 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 80009ea:	f001 f859 	bl	8001aa0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80009ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f2:	2202      	movs	r2, #2
 80009f4:	2102      	movs	r1, #2
 80009f6:	4857      	ldr	r0, [pc, #348]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 80009f8:	f003 f992 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000a02:	f001 f84d 	bl	8001aa0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	4851      	ldr	r0, [pc, #324]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000a10:	f003 f986 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000a1a:	f001 f841 	bl	8001aa0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000a22:	4b4e      	ldr	r3, [pc, #312]	@ (8000b5c <MX_HRTIM_Init+0x364>)
 8000a24:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000a26:	2308      	movs	r3, #8
 8000a28:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2201      	movs	r2, #1
 8000a42:	2100      	movs	r1, #0
 8000a44:	4843      	ldr	r0, [pc, #268]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000a46:	f003 fad9 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000a50:	f001 f826 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2204      	movs	r2, #4
 8000a58:	2101      	movs	r1, #1
 8000a5a:	483e      	ldr	r0, [pc, #248]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000a5c:	f003 face 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000a66:	f001 f81b 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4838      	ldr	r0, [pc, #224]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000a72:	f003 fac3 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000a7c:	f001 f810 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2240      	movs	r2, #64	@ 0x40
 8000a84:	2103      	movs	r1, #3
 8000a86:	4833      	ldr	r0, [pc, #204]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000a88:	f003 fab8 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000a92:	f001 f805 	bl	8001aa0 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000a96:	2310      	movs	r3, #16
 8000a98:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	482c      	ldr	r0, [pc, #176]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000aa2:	f003 faab 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000aac:	f000 fff8 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4827      	ldr	r0, [pc, #156]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000ab8:	f003 faa0 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000ac2:	f000 ffed 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2220      	movs	r2, #32
 8000aca:	2102      	movs	r1, #2
 8000acc:	4821      	ldr	r0, [pc, #132]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000ace:	f003 fa95 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000ad8:	f000 ffe2 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	481c      	ldr	r0, [pc, #112]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000ae4:	f003 fa8a 	bl	8003ffc <HAL_HRTIM_WaveformOutputConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000aee:	f000 ffd7 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000af2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000af6:	461a      	mov	r2, r3
 8000af8:	2101      	movs	r1, #1
 8000afa:	4816      	ldr	r0, [pc, #88]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000afc:	f003 f80e 	bl	8003b1c <HAL_HRTIM_TimeBaseConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000b06:	f000 ffcb 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2101      	movs	r1, #1
 8000b12:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000b14:	f003 f904 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000b1e:	f000 ffbf 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000b22:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b26:	461a      	mov	r2, r3
 8000b28:	2102      	movs	r1, #2
 8000b2a:	480a      	ldr	r0, [pc, #40]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000b2c:	f002 fff6 	bl	8003b1c <HAL_HRTIM_TimeBaseConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000b36:	f000 ffb3 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2102      	movs	r1, #2
 8000b42:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_HRTIM_Init+0x35c>)
 8000b44:	f003 f8ec 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000b4e:	f000 ffa7 	bl	8001aa0 <Error_Handler>
 8000b52:	e005      	b.n	8000b60 <MX_HRTIM_Init+0x368>
 8000b54:	2400004c 	.word	0x2400004c
 8000b58:	40017400 	.word	0x40017400
 8000b5c:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000b60:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b64:	461a      	mov	r2, r3
 8000b66:	2103      	movs	r1, #3
 8000b68:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <MX_HRTIM_Init+0x3a8>)
 8000b6a:	f002 ffd7 	bl	8003b1c <HAL_HRTIM_TimeBaseConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000b74:	f000 ff94 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2103      	movs	r1, #3
 8000b80:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_HRTIM_Init+0x3a8>)
 8000b82:	f003 f8cd 	bl	8003d20 <HAL_HRTIM_WaveformCompareConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000b8c:	f000 ff88 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <MX_HRTIM_Init+0x3a8>)
 8000b92:	f000 ffdf 	bl	8001b54 <HAL_HRTIM_MspPostInit>

}
 8000b96:	bf00      	nop
 8000b98:	37a8      	adds	r7, #168	@ 0xa8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2400004c 	.word	0x2400004c

08000ba4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000baa:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <MX_LPTIM1_Init+0x54>)
 8000bac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc0:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_LPTIM1_Init+0x50>)
 8000be2:	f003 ffb3 	bl	8004b4c <HAL_LPTIM_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000bec:	f000 ff58 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	24000128 	.word	0x24000128
 8000bf8:	40002400 	.word	0x40002400

08000bfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b09a      	sub	sp, #104	@ 0x68
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	222c      	movs	r2, #44	@ 0x2c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f009 ffe4 	bl	800ac04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c3c:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c3e:	4a56      	ldr	r2, [pc, #344]	@ (8000d98 <MX_TIM1_Init+0x19c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c42:	4b54      	ldr	r3, [pc, #336]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c50:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000c54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c62:	4b4c      	ldr	r3, [pc, #304]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c68:	484a      	ldr	r0, [pc, #296]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c6a:	f006 ff4d 	bl	8007b08 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 ff14 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c82:	4619      	mov	r1, r3
 8000c84:	4843      	ldr	r0, [pc, #268]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c86:	f007 fb91 	bl	80083ac <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c90:	f000 ff06 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c94:	483f      	ldr	r0, [pc, #252]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000c96:	f007 f807 	bl	8007ca8 <HAL_TIM_PWM_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ca0:	f000 fefe 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4837      	ldr	r0, [pc, #220]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000cb8:	f008 f8d8 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cc2:	f000 feed 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	482a      	ldr	r0, [pc, #168]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000cec:	f007 fa4a 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000cf6:	f000 fed3 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cfe:	2204      	movs	r2, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4824      	ldr	r0, [pc, #144]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000d04:	f007 fa3e 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d0e:	f000 fec7 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d16:	2208      	movs	r2, #8
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000d1c:	f007 fa32 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000d26:	f000 febb 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d2e:	220c      	movs	r2, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4818      	ldr	r0, [pc, #96]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000d34:	f007 fa26 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d3e:	f000 feaf 	bl	8001aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000d78:	f008 f906 	bl	8008f88 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000d82:	f000 fe8d 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <MX_TIM1_Init+0x198>)
 8000d88:	f001 f90c 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3768      	adds	r7, #104	@ 0x68
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000160 	.word	0x24000160
 8000d98:	40010000 	.word	0x40010000

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000dc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000dd6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000dea:	f006 ff5d 	bl	8007ca8 <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f000 fe54 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4811      	ldr	r0, [pc, #68]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000e08:	f008 f830 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e12:	f000 fe45 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e16:	2360      	movs	r3, #96	@ 0x60
 8000e18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000e2e:	f007 f9a9 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e38:	f000 fe32 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM2_Init+0xb0>)
 8000e3e:	f001 f8b1 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	240001ac 	.word	0x240001ac

08000e50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e82:	4b3d      	ldr	r3, [pc, #244]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000e84:	4a3d      	ldr	r2, [pc, #244]	@ (8000f7c <MX_TIM4_Init+0x12c>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e88:	4b3b      	ldr	r3, [pc, #236]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8000e94:	4b38      	ldr	r3, [pc, #224]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000e96:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000e9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea2:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ea8:	4833      	ldr	r0, [pc, #204]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000eaa:	f006 fe2d 	bl	8007b08 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000eb4:	f000 fdf4 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482c      	ldr	r0, [pc, #176]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000ec6:	f007 fa71 	bl	80083ac <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ed0:	f000 fde6 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ed4:	4828      	ldr	r0, [pc, #160]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000ed6:	f006 fee7 	bl	8007ca8 <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f000 fdde 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4821      	ldr	r0, [pc, #132]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000ef4:	f007 ffba 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000efe:	f000 fdcf 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4817      	ldr	r0, [pc, #92]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000f1a:	f007 f933 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f24:	f000 fdbc 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4812      	ldr	r0, [pc, #72]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000f30:	f007 f928 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f3a:	f000 fdb1 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2208      	movs	r2, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000f46:	f007 f91d 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000f50:	f000 fda6 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	220c      	movs	r2, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000f5c:	f007 f912 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000f66:	f000 fd9b 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <MX_TIM4_Init+0x128>)
 8000f6c:	f001 f81a 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8000f70:	bf00      	nop
 8000f72:	3738      	adds	r7, #56	@ 0x38
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	240001f8 	.word	0x240001f8
 8000f7c:	40000800 	.word	0x40000800

08000f80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	@ 0x38
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fb2:	4b32      	ldr	r3, [pc, #200]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fb4:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <MX_TIM5_Init+0x100>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fb8:	4b30      	ldr	r3, [pc, #192]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fc6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000fca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fd8:	4828      	ldr	r0, [pc, #160]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000fda:	f006 fd95 	bl	8007b08 <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000fe4:	f000 fd5c 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4821      	ldr	r0, [pc, #132]	@ (800107c <MX_TIM5_Init+0xfc>)
 8000ff6:	f007 f9d9 	bl	80083ac <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001000:	f000 fd4e 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <MX_TIM5_Init+0xfc>)
 8001006:	f006 fe4f 	bl	8007ca8 <HAL_TIM_PWM_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001010:	f000 fd46 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	@ (800107c <MX_TIM5_Init+0xfc>)
 8001024:	f007 ff22 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800102e:	f000 fd37 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001032:	2360      	movs	r3, #96	@ 0x60
 8001034:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	2204      	movs	r2, #4
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <MX_TIM5_Init+0xfc>)
 800104a:	f007 f89b 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001054:	f000 fd24 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	2208      	movs	r2, #8
 800105c:	4619      	mov	r1, r3
 800105e:	4807      	ldr	r0, [pc, #28]	@ (800107c <MX_TIM5_Init+0xfc>)
 8001060:	f007 f890 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800106a:	f000 fd19 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <MX_TIM5_Init+0xfc>)
 8001070:	f000 ff98 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	@ 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	24000244 	.word	0x24000244
 8001080:	40000c00 	.word	0x40000c00

08001084 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	@ 0x58
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001096:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	222c      	movs	r2, #44	@ 0x2c
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fda7 	bl	800ac04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010b8:	4a38      	ldr	r2, [pc, #224]	@ (800119c <MX_TIM8_Init+0x118>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010ca:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010d6:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010e2:	482d      	ldr	r0, [pc, #180]	@ (8001198 <MX_TIM8_Init+0x114>)
 80010e4:	f006 fde0 	bl	8007ca8 <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 fcd7 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001102:	4619      	mov	r1, r3
 8001104:	4824      	ldr	r0, [pc, #144]	@ (8001198 <MX_TIM8_Init+0x114>)
 8001106:	f007 feb1 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001110:	f000 fcc6 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	@ 0x60
 8001116:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001130:	220c      	movs	r2, #12
 8001132:	4619      	mov	r1, r3
 8001134:	4818      	ldr	r0, [pc, #96]	@ (8001198 <MX_TIM8_Init+0x114>)
 8001136:	f007 f825 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001140:	f000 fcae 	bl	8001aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001166:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM8_Init+0x114>)
 800117a:	f007 ff05 	bl	8008f88 <HAL_TIMEx_ConfigBreakDeadTime>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001184:	f000 fc8c 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM8_Init+0x114>)
 800118a:	f000 ff0b 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3758      	adds	r7, #88	@ 0x58
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000290 	.word	0x24000290
 800119c:	40010400 	.word	0x40010400

080011a0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	@ (800128c <MX_TIM12_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011e6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011ea:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011fa:	f006 fc85 	bl	8007b08 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fc4c 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <MX_TIM12_Init+0xe8>)
 8001216:	f007 f8c9 	bl	80083ac <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fc3e 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM12_Init+0xe8>)
 8001226:	f006 fd3f 	bl	8007ca8 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fc36 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM12_Init+0xe8>)
 8001244:	f007 fe12 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fc27 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2204      	movs	r2, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM12_Init+0xe8>)
 800126a:	f006 ff8b 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 fc14 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM12_Init+0xe8>)
 800127a:	f000 fe93 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	240002dc 	.word	0x240002dc
 800128c:	40001800 	.word	0x40001800

08001290 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <MX_TIM13_Init+0x98>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012bc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80012c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012ce:	4815      	ldr	r0, [pc, #84]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012d0:	f006 fc1a 	bl	8007b08 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80012da:	f000 fbe1 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012e0:	f006 fce2 	bl	8007ca8 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f000 fbd9 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	@ 0x60
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM13_Init+0x94>)
 8001306:	f006 ff3d 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 fbc6 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM13_Init+0x94>)
 8001316:	f000 fe45 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24000328 	.word	0x24000328
 8001328:	40001c00 	.word	0x40001c00

0800132c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001346:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <MX_TIM14_Init+0x98>)
 8001348:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800134a:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001358:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800135c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001366:	2280      	movs	r2, #128	@ 0x80
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800136a:	4815      	ldr	r0, [pc, #84]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800136c:	f006 fbcc 	bl	8007b08 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001376:	f000 fb93 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800137c:	f006 fc94 	bl	8007ca8 <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001386:	f000 fb8b 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	@ 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM14_Init+0x94>)
 80013a2:	f006 feef 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80013ac:	f000 fb78 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM14_Init+0x94>)
 80013b2:	f000 fdf7 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000374 	.word	0x24000374
 80013c4:	40002000 	.word	0x40002000

080013c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09a      	sub	sp, #104	@ 0x68
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	222c      	movs	r2, #44	@ 0x2c
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f009 fbfe 	bl	800ac04 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001408:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <MX_TIM15_Init+0x158>)
 800140a:	4a46      	ldr	r2, [pc, #280]	@ (8001524 <MX_TIM15_Init+0x15c>)
 800140c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <MX_TIM15_Init+0x158>)
 800141c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001420:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001428:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <MX_TIM15_Init+0x158>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001434:	483a      	ldr	r0, [pc, #232]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001436:	f006 fb67 	bl	8007b08 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001440:	f000 fb2e 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001448:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800144e:	4619      	mov	r1, r3
 8001450:	4833      	ldr	r0, [pc, #204]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001452:	f006 ffab 	bl	80083ac <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800145c:	f000 fb20 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001460:	482f      	ldr	r0, [pc, #188]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001462:	f006 fc21 	bl	8007ca8 <HAL_TIM_PWM_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800146c:	f000 fb18 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001478:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800147c:	4619      	mov	r1, r3
 800147e:	4828      	ldr	r0, [pc, #160]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001480:	f007 fcf4 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800148a:	f000 fb09 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148e:	2360      	movs	r3, #96	@ 0x60
 8001490:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	481b      	ldr	r0, [pc, #108]	@ (8001520 <MX_TIM15_Init+0x158>)
 80014b4:	f006 fe66 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80014be:	f000 faef 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4815      	ldr	r0, [pc, #84]	@ (8001520 <MX_TIM15_Init+0x158>)
 80014cc:	f006 fe5a 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80014d6:	f000 fae3 	bl	8001aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001502:	f007 fd41 	bl	8008f88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800150c:	f000 fac8 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001512:	f000 fd47 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8001516:	bf00      	nop
 8001518:	3768      	adds	r7, #104	@ 0x68
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240003c0 	.word	0x240003c0
 8001524:	40014000 	.word	0x40014000

08001528 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b092      	sub	sp, #72	@ 0x48
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	222c      	movs	r2, #44	@ 0x2c
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f009 fb5b 	bl	800ac04 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001550:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <MX_TIM16_Init+0xf0>)
 8001552:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001554:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <MX_TIM16_Init+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001560:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001562:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001566:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <MX_TIM16_Init+0xec>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800156e:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800157a:	4826      	ldr	r0, [pc, #152]	@ (8001614 <MX_TIM16_Init+0xec>)
 800157c:	f006 fac4 	bl	8007b08 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001586:	f000 fa8b 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800158a:	4822      	ldr	r0, [pc, #136]	@ (8001614 <MX_TIM16_Init+0xec>)
 800158c:	f006 fb8c 	bl	8007ca8 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001596:	f000 fa83 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	@ 0x60
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4815      	ldr	r0, [pc, #84]	@ (8001614 <MX_TIM16_Init+0xec>)
 80015c0:	f006 fde0 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015ca:	f000 fa69 	bl	8001aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <MX_TIM16_Init+0xec>)
 80015f6:	f007 fcc7 	bl	8008f88 <HAL_TIMEx_ConfigBreakDeadTime>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001600:	f000 fa4e 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001606:	f000 fccd 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3748      	adds	r7, #72	@ 0x48
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2400040c 	.word	0x2400040c
 8001618:	40014400 	.word	0x40014400

0800161c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001620:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MX_UART4_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <MX_UART4_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_UART4_Init+0x90>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_UART4_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_UART4_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_UART4_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_UART4_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_UART4_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_UART4_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_UART4_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_UART4_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_UART4_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	@ (80016ac <MX_UART4_Init+0x90>)
 8001666:	f007 fd2b 	bl	80090c0 <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001670:	f000 fa16 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	@ (80016ac <MX_UART4_Init+0x90>)
 8001678:	f009 f9fa 	bl	800aa70 <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001682:	f000 fa0d 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	@ (80016ac <MX_UART4_Init+0x90>)
 800168a:	f009 fa2f 	bl	800aaec <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001694:	f000 fa04 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_UART4_Init+0x90>)
 800169a:	f009 f9b0 	bl	800a9fe <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f000 f9fc 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24000458 	.word	0x24000458
 80016b0:	40004c00 	.word	0x40004c00

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	@ 0x30
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ca:	4b59      	ldr	r3, [pc, #356]	@ (8001830 <MX_GPIO_Init+0x17c>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d0:	4a57      	ldr	r2, [pc, #348]	@ (8001830 <MX_GPIO_Init+0x17c>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016da:	4b55      	ldr	r3, [pc, #340]	@ (8001830 <MX_GPIO_Init+0x17c>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e8:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <MX_GPIO_Init+0x17c>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ee:	4a50      	ldr	r2, [pc, #320]	@ (8001830 <MX_GPIO_Init+0x17c>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001830 <MX_GPIO_Init+0x17c>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170c:	4a48      	ldr	r2, [pc, #288]	@ (8001830 <MX_GPIO_Init+0x17c>)
 800170e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001716:	4b46      	ldr	r3, [pc, #280]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b42      	ldr	r3, [pc, #264]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172a:	4a41      	ldr	r2, [pc, #260]	@ (8001830 <MX_GPIO_Init+0x17c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001734:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001748:	4a39      	ldr	r2, [pc, #228]	@ (8001830 <MX_GPIO_Init+0x17c>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001752:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001760:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001766:	4a32      	ldr	r2, [pc, #200]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001770:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <MX_GPIO_Init+0x17c>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 800177e:	2200      	movs	r2, #0
 8001780:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001784:	482b      	ldr	r0, [pc, #172]	@ (8001834 <MX_GPIO_Init+0x180>)
 8001786:	f002 f8df 	bl	8003948 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001790:	4829      	ldr	r0, [pc, #164]	@ (8001838 <MX_GPIO_Init+0x184>)
 8001792:	f002 f8d9 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800179c:	4827      	ldr	r0, [pc, #156]	@ (800183c <MX_GPIO_Init+0x188>)
 800179e:	f002 f8d3 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 80017a2:	2200      	movs	r2, #0
 80017a4:	f640 71f7 	movw	r1, #4087	@ 0xff7
 80017a8:	4825      	ldr	r0, [pc, #148]	@ (8001840 <MX_GPIO_Init+0x18c>)
 80017aa:	f002 f8cd 	bl	8003948 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 80017ae:	f249 539f 	movw	r3, #38303	@ 0x959f
 80017b2:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	481b      	ldr	r0, [pc, #108]	@ (8001834 <MX_GPIO_Init+0x180>)
 80017c8:	f001 ff0e 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 80017cc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4814      	ldr	r0, [pc, #80]	@ (8001838 <MX_GPIO_Init+0x184>)
 80017e6:	f001 feff 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin SPI2_NSS_Pin QUADSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin;
 80017ea:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	480e      	ldr	r0, [pc, #56]	@ (800183c <MX_GPIO_Init+0x188>)
 8001804:	f001 fef0 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001808:	f640 73f7 	movw	r3, #4087	@ 0xff7
 800180c:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	@ (8001840 <MX_GPIO_Init+0x18c>)
 8001822:	f001 fee1 	bl	80035e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001826:	bf00      	nop
 8001828:	3730      	adds	r7, #48	@ 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	58024400 	.word	0x58024400
 8001834:	58021000 	.word	0x58021000
 8001838:	58020800 	.word	0x58020800
 800183c:	58020400 	.word	0x58020400
 8001840:	58020c00 	.word	0x58020c00
 8001844:	00000000 	.word	0x00000000

08001848 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
		static int i=0;
		static int dir=1;
		static int phase = 1;
		const double step = 0.0075;// reference (arbitrary units)
 8001850:	a321      	add	r3, pc, #132	@ (adr r3, 80018d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (htim==&htim1){
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a18      	ldr	r2, [pc, #96]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d128      	bne.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  i+=1;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800186a:	6013      	str	r3, [r2, #0]
		  if(i%ONESEC == TRUE)
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001872:	fb83 1302 	smull	r1, r3, r3, r2
 8001876:	1319      	asrs	r1, r3, #12
 8001878:	17d3      	asrs	r3, r2, #31
 800187a:	1acb      	subs	r3, r1, r3
 800187c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d104      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  {
			phase = -phase;
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	425b      	negs	r3, r3
 8001890:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001892:	6013      	str	r3, [r2, #0]
		  }
		  ref = phase*step;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80018a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80018aa:	ed83 7b00 	vstr	d7, [r3]
		  ctrl_tmr_expired = TRUE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
	  }

}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	24000160 	.word	0x24000160
 80018c4:	240004f8 	.word	0x240004f8
 80018c8:	68db8bad 	.word	0x68db8bad
 80018cc:	2400001c 	.word	0x2400001c
 80018d0:	240004f0 	.word	0x240004f0
 80018d4:	240004ec 	.word	0x240004ec
 80018d8:	eb851eb8 	.word	0xeb851eb8
 80018dc:	3f7eb851 	.word	0x3f7eb851

080018e0 <control_update>:

static void control_update(double ref)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0b00 	vstr	d0, [r7]
	  // output value of the lead filter
	  double out = 0;
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  // sign bit of the command fed to phase input on the h-bridge
	  int phase=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
	  uint16_t dutycycle=0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	81fb      	strh	r3, [r7, #14]
	  const double a[2] = {1.00,-0.9596};
	  // lead filter denominator coefficients
	  const double b[2]={1.00,-0.7304};

	  // compute filter output
	  u[0] = ref;
 80018fe:	4934      	ldr	r1, [pc, #208]	@ (80019d0 <control_update+0xf0>)
 8001900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001904:	e9c1 2300 	strd	r2, r3, [r1]
	  y[0] = -a[1]*y[1] +  b[0]*u[0] + b[1]*u[1];
 8001908:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <control_update+0xf4>)
 800190a:	ed93 7b02 	vldr	d7, [r3, #8]
 800190e:	eeb1 6b47 	vneg.f64	d6, d7
 8001912:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <control_update+0xf8>)
 8001914:	ed93 7b02 	vldr	d7, [r3, #8]
 8001918:	ee26 6b07 	vmul.f64	d6, d6, d7
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <control_update+0xfc>)
 800191e:	ed93 5b00 	vldr	d5, [r3]
 8001922:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <control_update+0xf0>)
 8001924:	ed93 7b00 	vldr	d7, [r3]
 8001928:	ee25 7b07 	vmul.f64	d7, d5, d7
 800192c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <control_update+0xfc>)
 8001932:	ed93 5b02 	vldr	d5, [r3, #8]
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <control_update+0xf0>)
 8001938:	ed93 7b02 	vldr	d7, [r3, #8]
 800193c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001940:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <control_update+0xf8>)
 8001946:	ed83 7b00 	vstr	d7, [r3]
	  out = y[0];
 800194a:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <control_update+0xf8>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	e9c7 2304 	strd	r2, r3, [r7, #16]

	  // set the sign of the move (phase)
	  if(out <0)
 8001954:	ed97 7b04 	vldr	d7, [r7, #16]
 8001958:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	d502      	bpl.n	8001968 <control_update+0x88>
	  {
		phase = GPIO_PIN_RESET; // reverse direction
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e001      	b.n	800196c <control_update+0x8c>
	  } else {
		phase = GPIO_PIN_SET; //forward direction
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	2101      	movs	r1, #1
 8001974:	481a      	ldr	r0, [pc, #104]	@ (80019e0 <control_update+0x100>)
 8001976:	f001 ffe7 	bl	8003948 <HAL_GPIO_WritePin>

	  // calculate the dutycycle
	  out = fabs(out); // duty cycle must be positive
 800197a:	ed97 7b04 	vldr	d7, [r7, #16]
 800197e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001982:	ed87 7b04 	vstr	d7, [r7, #16]
	  dutycycle = calc_dutycycle(out,VSS);
 8001986:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80019c8 <control_update+0xe8>
 800198a:	eeb0 1b47 	vmov.f64	d1, d7
 800198e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001992:	f000 f82d 	bl	80019f0 <calc_dutycycle>
 8001996:	4603      	mov	r3, r0
 8001998:	81fb      	strh	r3, [r7, #14]
	  TIM1->CCR1 = dutycycle; //set the new timer duty cycle
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <control_update+0x104>)
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	6353      	str	r3, [r2, #52]	@ 0x34

	  // update state
	  y[1] = y[0];
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <control_update+0xf8>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <control_update+0xf8>)
 80019a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  u[1] = u[0];
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <control_update+0xf0>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <control_update+0xf0>)
 80019b4:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  // reset timer flag
	  ctrl_tmr_expired = FALSE;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <control_update+0x108>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	cccccccd 	.word	0xcccccccd
 80019cc:	3ffccccc 	.word	0x3ffccccc
 80019d0:	24000500 	.word	0x24000500
 80019d4:	0800ac78 	.word	0x0800ac78
 80019d8:	24000510 	.word	0x24000510
 80019dc:	0800ac88 	.word	0x0800ac88
 80019e0:	58021000 	.word	0x58021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	240004ec 	.word	0x240004ec
 80019ec:	00000000 	.word	0x00000000

080019f0 <calc_dutycycle>:
	ctrl_tmr_expired = FALSE;
}
*/

static uint16_t calc_dutycycle(double cmd, double vss)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	ed87 0b02 	vstr	d0, [r7, #8]
 80019fa:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 80019fe:	2300      	movs	r3, #0
 8001a00:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001a02:	ed97 5b02 	vldr	d5, [r7, #8]
 8001a06:	ed97 6b00 	vldr	d6, [r7]
 8001a0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a0e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001a40 <calc_dutycycle+0x50>
 8001a12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a1a:	ee17 3a90 	vmov	r3, s15
 8001a1e:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001a20:	8afb      	ldrh	r3, [r7, #22]
 8001a22:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d902      	bls.n	8001a30 <calc_dutycycle+0x40>
 8001a2a:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8001a2e:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001a30:	8afb      	ldrh	r3, [r7, #22]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40d76fc0 	.word	0x40d76fc0

08001a48 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a5a:	f000 ffe9 	bl	8002a30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a6a:	231f      	movs	r3, #31
 8001a6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a6e:	2387      	movs	r3, #135	@ 0x87
 8001a70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a76:	2300      	movs	r3, #0
 8001a78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 f807 	bl	8002aa0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a92:	2004      	movs	r0, #4
 8001a94:	f000 ffe4 	bl	8002a60 <HAL_MPU_Enable>

}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_MspInit+0x30>)
 8001ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ab8:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_MspInit+0x30>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_MspInit+0x30>)
 8001ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	58024400 	.word	0x58024400

08001ae0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0b4      	sub	sp, #208	@ 0xd0
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	22c0      	movs	r2, #192	@ 0xc0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f009 f887 	bl	800ac04 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <HAL_HRTIM_MspInit+0x6c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d121      	bne.n	8001b44 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f9ca 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001b22:	f7ff ffbd 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_HRTIM_MspInit+0x70>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b2c:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_HRTIM_MspInit+0x70>)
 8001b2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_HRTIM_MspInit+0x70>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	37d0      	adds	r7, #208	@ 0xd0
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40017400 	.word	0x40017400
 8001b50:	58024400 	.word	0x58024400

08001b54 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a23      	ldr	r2, [pc, #140]	@ (8001c00 <HAL_HRTIM_MspPostInit+0xac>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d13f      	bne.n	8001bf6 <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <HAL_HRTIM_MspPostInit+0xb0>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7c:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_HRTIM_MspPostInit+0xb0>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_HRTIM_MspPostInit+0xb0>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_HRTIM_MspPostInit+0xb0>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_HRTIM_MspPostInit+0xb0>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_HRTIM_MspPostInit+0xb0>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001bb2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480e      	ldr	r0, [pc, #56]	@ (8001c08 <HAL_HRTIM_MspPostInit+0xb4>)
 8001bd0:	f001 fd0a 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001bd4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001bd8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001be6:	2302      	movs	r3, #2
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <HAL_HRTIM_MspPostInit+0xb8>)
 8001bf2:	f001 fcf9 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40017400 	.word	0x40017400
 8001c04:	58024400 	.word	0x58024400
 8001c08:	58020800 	.word	0x58020800
 8001c0c:	58020000 	.word	0x58020000

08001c10 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0ba      	sub	sp, #232	@ 0xe8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	22c0      	movs	r2, #192	@ 0xc0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 ffe7 	bl	800ac04 <memset>
  if(hlptim->Instance==LPTIM1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce8 <HAL_LPTIM_MspInit+0xd8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d14e      	bne.n	8001cde <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001c40:	f04f 0220 	mov.w	r2, #32
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 f92a 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001c62:	f7ff ff1d 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_LPTIM_MspInit+0xdc>)
 8001c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <HAL_LPTIM_MspInit+0xdc>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_LPTIM_MspInit+0xdc>)
 8001c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_LPTIM_MspInit+0xdc>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8a:	4a18      	ldr	r2, [pc, #96]	@ (8001cec <HAL_LPTIM_MspInit+0xdc>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c94:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_LPTIM_MspInit+0xdc>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ca2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <HAL_LPTIM_MspInit+0xe0>)
 8001cca:	f001 fc8d 	bl	80035e8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	205d      	movs	r0, #93	@ 0x5d
 8001cd4:	f000 fe77 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001cd8:	205d      	movs	r0, #93	@ 0x5d
 8001cda:	f000 fe8e 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	37e8      	adds	r7, #232	@ 0xe8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40002400 	.word	0x40002400
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58020c00 	.word	0x58020c00

08001cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a74      	ldr	r2, [pc, #464]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x1e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d117      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d06:	4b74      	ldr	r3, [pc, #464]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d0c:	4a72      	ldr	r2, [pc, #456]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d16:	4b70      	ldr	r3, [pc, #448]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2019      	movs	r0, #25
 8001d2a:	f000 fe4c 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f000 fe63 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d34:	e0c9      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM4)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_TIM_Base_MspInit+0x1e8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d117      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d40:	4b65      	ldr	r3, [pc, #404]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d46:	4a64      	ldr	r2, [pc, #400]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d50:	4b61      	ldr	r3, [pc, #388]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	201e      	movs	r0, #30
 8001d64:	f000 fe2f 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d68:	201e      	movs	r0, #30
 8001d6a:	f000 fe46 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e0ac      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM5)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d117      	bne.n	8001daa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d7a:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d80:	4a55      	ldr	r2, [pc, #340]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2032      	movs	r0, #50	@ 0x32
 8001d9e:	f000 fe12 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001da2:	2032      	movs	r0, #50	@ 0x32
 8001da4:	f000 fe29 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001da8:	e08f      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d117      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001db4:	4b48      	ldr	r3, [pc, #288]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dba:	4a47      	ldr	r2, [pc, #284]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dc4:	4b44      	ldr	r3, [pc, #272]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	202b      	movs	r0, #43	@ 0x2b
 8001dd8:	f000 fdf5 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ddc:	202b      	movs	r0, #43	@ 0x2b
 8001dde:	f000 fe0c 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001de2:	e072      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d117      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df4:	4a38      	ldr	r2, [pc, #224]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	202c      	movs	r0, #44	@ 0x2c
 8001e12:	f000 fdd8 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001e16:	202c      	movs	r0, #44	@ 0x2c
 8001e18:	f000 fdef 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001e1c:	e055      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_TIM_Base_MspInit+0x1f8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d117      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	202d      	movs	r0, #45	@ 0x2d
 8001e4c:	f000 fdbb 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e50:	202d      	movs	r0, #45	@ 0x2d
 8001e52:	f000 fdd2 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001e56:	e038      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM15)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d117      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	2074      	movs	r0, #116	@ 0x74
 8001e86:	f000 fd9e 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001e8a:	2074      	movs	r0, #116	@ 0x74
 8001e8c:	f000 fdb5 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001e90:	e01b      	b.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM16)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x200>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d116      	bne.n	8001eca <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2075      	movs	r0, #117	@ 0x75
 8001ec0:	f000 fd81 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001ec4:	2075      	movs	r0, #117	@ 0x75
 8001ec6:	f000 fd98 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00
 8001ee4:	40001800 	.word	0x40001800
 8001ee8:	40001c00 	.word	0x40001c00
 8001eec:	40002000 	.word	0x40002000
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40014400 	.word	0x40014400

08001ef8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f08:	d117      	bne.n	8001f3a <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <HAL_TIM_PWM_MspInit+0xa4>)
 8001f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f10:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_TIM_PWM_MspInit+0xa4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_TIM_PWM_MspInit+0xa4>)
 8001f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	201c      	movs	r0, #28
 8001f2e:	f000 fd4a 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f32:	201c      	movs	r0, #28
 8001f34:	f000 fd61 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f38:	e02b      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0x9a>
  else if(htim_pwm->Instance==TIM8)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d126      	bne.n	8001f92 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f44:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_TIM_PWM_MspInit+0xa4>)
 8001f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f4a:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <HAL_TIM_PWM_MspInit+0xa4>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_TIM_PWM_MspInit+0xa4>)
 8001f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	202b      	movs	r0, #43	@ 0x2b
 8001f68:	f000 fd2d 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f6c:	202b      	movs	r0, #43	@ 0x2b
 8001f6e:	f000 fd44 	bl	80029fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	202c      	movs	r0, #44	@ 0x2c
 8001f78:	f000 fd25 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f7c:	202c      	movs	r0, #44	@ 0x2c
 8001f7e:	f000 fd3c 	bl	80029fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	202d      	movs	r0, #45	@ 0x2d
 8001f88:	f000 fd1d 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f8c:	202d      	movs	r0, #45	@ 0x2d
 8001f8e:	f000 fd34 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b092      	sub	sp, #72	@ 0x48
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4aa4      	ldr	r2, [pc, #656]	@ (8002254 <HAL_TIM_MspPostInit+0x2b0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d120      	bne.n	8002008 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc6:	4ba4      	ldr	r3, [pc, #656]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fcc:	4aa2      	ldr	r2, [pc, #648]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd6:	4ba0      	ldr	r3, [pc, #640]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001fe4:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ffe:	4619      	mov	r1, r3
 8002000:	4896      	ldr	r0, [pc, #600]	@ (800225c <HAL_TIM_MspPostInit+0x2b8>)
 8002002:	f001 faf1 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002006:	e189      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002010:	d11f      	bne.n	8002052 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4b91      	ldr	r3, [pc, #580]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	4a8f      	ldr	r2, [pc, #572]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002022:	4b8d      	ldr	r3, [pc, #564]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002030:	2301      	movs	r3, #1
 8002032:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002040:	2301      	movs	r3, #1
 8002042:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002048:	4619      	mov	r1, r3
 800204a:	4885      	ldr	r0, [pc, #532]	@ (8002260 <HAL_TIM_MspPostInit+0x2bc>)
 800204c:	f001 facc 	bl	80035e8 <HAL_GPIO_Init>
}
 8002050:	e164      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a83      	ldr	r2, [pc, #524]	@ (8002264 <HAL_TIM_MspPostInit+0x2c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d13f      	bne.n	80020dc <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205c:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4a7d      	ldr	r2, [pc, #500]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b7a      	ldr	r3, [pc, #488]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b77      	ldr	r3, [pc, #476]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a75      	ldr	r2, [pc, #468]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208a:	4b73      	ldr	r3, [pc, #460]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8002098:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020aa:	2302      	movs	r3, #2
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020b2:	4619      	mov	r1, r3
 80020b4:	486c      	ldr	r0, [pc, #432]	@ (8002268 <HAL_TIM_MspPostInit+0x2c4>)
 80020b6:	f001 fa97 	bl	80035e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020ca:	2302      	movs	r3, #2
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020d2:	4619      	mov	r1, r3
 80020d4:	4865      	ldr	r0, [pc, #404]	@ (800226c <HAL_TIM_MspPostInit+0x2c8>)
 80020d6:	f001 fa87 	bl	80035e8 <HAL_GPIO_Init>
}
 80020da:	e11f      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a63      	ldr	r2, [pc, #396]	@ (8002270 <HAL_TIM_MspPostInit+0x2cc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d11f      	bne.n	8002126 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f6:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	623b      	str	r3, [r7, #32]
 8002102:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002104:	2306      	movs	r3, #6
 8002106:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002114:	2302      	movs	r3, #2
 8002116:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800211c:	4619      	mov	r1, r3
 800211e:	4850      	ldr	r0, [pc, #320]	@ (8002260 <HAL_TIM_MspPostInit+0x2bc>)
 8002120:	f001 fa62 	bl	80035e8 <HAL_GPIO_Init>
}
 8002124:	e0fa      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a52      	ldr	r2, [pc, #328]	@ (8002274 <HAL_TIM_MspPostInit+0x2d0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d120      	bne.n	8002172 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002130:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002136:	4a48      	ldr	r2, [pc, #288]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002140:	4b45      	ldr	r3, [pc, #276]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800214e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002160:	2303      	movs	r3, #3
 8002162:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002168:	4619      	mov	r1, r3
 800216a:	4843      	ldr	r0, [pc, #268]	@ (8002278 <HAL_TIM_MspPostInit+0x2d4>)
 800216c:	f001 fa3c 	bl	80035e8 <HAL_GPIO_Init>
}
 8002170:	e0d4      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a41      	ldr	r2, [pc, #260]	@ (800227c <HAL_TIM_MspPostInit+0x2d8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d120      	bne.n	80021be <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002182:	4a35      	ldr	r2, [pc, #212]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218c:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800219a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80021ac:	2302      	movs	r3, #2
 80021ae:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021b4:	4619      	mov	r1, r3
 80021b6:	482d      	ldr	r0, [pc, #180]	@ (800226c <HAL_TIM_MspPostInit+0x2c8>)
 80021b8:	f001 fa16 	bl	80035e8 <HAL_GPIO_Init>
}
 80021bc:	e0ae      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002280 <HAL_TIM_MspPostInit+0x2dc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d11f      	bne.n	8002208 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	4a22      	ldr	r2, [pc, #136]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021e6:	2340      	movs	r3, #64	@ 0x40
 80021e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80021f6:	2309      	movs	r3, #9
 80021f8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021fe:	4619      	mov	r1, r3
 8002200:	4817      	ldr	r0, [pc, #92]	@ (8002260 <HAL_TIM_MspPostInit+0x2bc>)
 8002202:	f001 f9f1 	bl	80035e8 <HAL_GPIO_Init>
}
 8002206:	e089      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <HAL_TIM_MspPostInit+0x2e0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d13a      	bne.n	8002288 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002218:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_TIM_MspPostInit+0x2b4>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002240:	2309      	movs	r3, #9
 8002242:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002248:	4619      	mov	r1, r3
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <HAL_TIM_MspPostInit+0x2bc>)
 800224c:	f001 f9cc 	bl	80035e8 <HAL_GPIO_Init>
}
 8002250:	e064      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	58024400 	.word	0x58024400
 800225c:	58021000 	.word	0x58021000
 8002260:	58020000 	.word	0x58020000
 8002264:	40000800 	.word	0x40000800
 8002268:	58020c00 	.word	0x58020c00
 800226c:	58020400 	.word	0x58020400
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	58020800 	.word	0x58020800
 800227c:	40001800 	.word	0x40001800
 8002280:	40001c00 	.word	0x40001c00
 8002284:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <HAL_TIM_MspPostInit+0x380>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11f      	bne.n	80022d2 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002292:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <HAL_TIM_MspPostInit+0x384>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002298:	4a23      	ldr	r2, [pc, #140]	@ (8002328 <HAL_TIM_MspPostInit+0x384>)
 800229a:	f043 0310 	orr.w	r3, r3, #16
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a2:	4b21      	ldr	r3, [pc, #132]	@ (8002328 <HAL_TIM_MspPostInit+0x384>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022b0:	2360      	movs	r3, #96	@ 0x60
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80022c0:	2304      	movs	r3, #4
 80022c2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022c8:	4619      	mov	r1, r3
 80022ca:	4818      	ldr	r0, [pc, #96]	@ (800232c <HAL_TIM_MspPostInit+0x388>)
 80022cc:	f001 f98c 	bl	80035e8 <HAL_GPIO_Init>
}
 80022d0:	e024      	b.n	800231c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_TIM_MspPostInit+0x38c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d11f      	bne.n	800231c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_TIM_MspPostInit+0x384>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	4a11      	ldr	r2, [pc, #68]	@ (8002328 <HAL_TIM_MspPostInit+0x384>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_TIM_MspPostInit+0x384>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800230c:	2301      	movs	r3, #1
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002314:	4619      	mov	r1, r3
 8002316:	4807      	ldr	r0, [pc, #28]	@ (8002334 <HAL_TIM_MspPostInit+0x390>)
 8002318:	f001 f966 	bl	80035e8 <HAL_GPIO_Init>
}
 800231c:	bf00      	nop
 800231e:	3748      	adds	r7, #72	@ 0x48
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40014000 	.word	0x40014000
 8002328:	58024400 	.word	0x58024400
 800232c:	58021000 	.word	0x58021000
 8002330:	40014400 	.word	0x40014400
 8002334:	58020400 	.word	0x58020400

08002338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0ba      	sub	sp, #232	@ 0xe8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	22c0      	movs	r2, #192	@ 0xc0
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f008 fc53 	bl	800ac04 <memset>
  if(huart->Instance==UART4)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2b      	ldr	r2, [pc, #172]	@ (8002410 <HAL_UART_MspInit+0xd8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d14e      	bne.n	8002406 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002368:	f04f 0202 	mov.w	r2, #2
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fd96 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800238a:	f7ff fb89 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800238e:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_UART_MspInit+0xdc>)
 8002390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002394:	4a1f      	ldr	r2, [pc, #124]	@ (8002414 <HAL_UART_MspInit+0xdc>)
 8002396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800239a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_UART_MspInit+0xdc>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ac:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_UART_MspInit+0xdc>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b2:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_UART_MspInit+0xdc>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_UART_MspInit+0xdc>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023e4:	2308      	movs	r3, #8
 80023e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4809      	ldr	r0, [pc, #36]	@ (8002418 <HAL_UART_MspInit+0xe0>)
 80023f2:	f001 f8f9 	bl	80035e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2034      	movs	r0, #52	@ 0x34
 80023fc:	f000 fae3 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002400:	2034      	movs	r0, #52	@ 0x34
 8002402:	f000 fafa 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	37e8      	adds	r7, #232	@ 0xe8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40004c00 	.word	0x40004c00
 8002414:	58024400 	.word	0x58024400
 8002418:	58020800 	.word	0x58020800

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <NMI_Handler+0x4>

08002424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <MemManage_Handler+0x4>

08002434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <UsageFault_Handler+0x4>

08002444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002472:	f000 f9a1 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <TIM1_UP_IRQHandler+0x10>)
 8002482:	f005 fd77 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000160 	.word	0x24000160

08002490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	f005 fd6d 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	240001ac 	.word	0x240001ac

080024a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <TIM4_IRQHandler+0x10>)
 80024aa:	f005 fd63 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	240001f8 	.word	0x240001f8

080024b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024bc:	4803      	ldr	r0, [pc, #12]	@ (80024cc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80024be:	f005 fd59 	bl	8007f74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80024c2:	4803      	ldr	r0, [pc, #12]	@ (80024d0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80024c4:	f005 fd56 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	24000290 	.word	0x24000290
 80024d0:	240002dc 	.word	0x240002dc

080024d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024d8:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80024da:	f005 fd4b 	bl	8007f74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <TIM8_UP_TIM13_IRQHandler+0x18>)
 80024e0:	f005 fd48 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	24000290 	.word	0x24000290
 80024ec:	24000328 	.word	0x24000328

080024f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024f4:	4803      	ldr	r0, [pc, #12]	@ (8002504 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80024f6:	f005 fd3d 	bl	8007f74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80024fa:	4803      	ldr	r0, [pc, #12]	@ (8002508 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80024fc:	f005 fd3a 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	24000290 	.word	0x24000290
 8002508:	24000374 	.word	0x24000374

0800250c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <TIM5_IRQHandler+0x10>)
 8002512:	f005 fd2f 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	24000244 	.word	0x24000244

08002520 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <UART4_IRQHandler+0x10>)
 8002526:	f006 fea9 	bl	800927c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	24000458 	.word	0x24000458

08002534 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <LPTIM1_IRQHandler+0x10>)
 800253a:	f002 fbb7 	bl	8004cac <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	24000128 	.word	0x24000128

08002548 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <TIM15_IRQHandler+0x10>)
 800254e:	f005 fd11 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	240003c0 	.word	0x240003c0

0800255c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <TIM16_IRQHandler+0x10>)
 8002562:	f005 fd07 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2400040c 	.word	0x2400040c

08002570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002574:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <SystemInit+0xe4>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	4a36      	ldr	r2, [pc, #216]	@ (8002654 <SystemInit+0xe4>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <SystemInit+0xe8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b06      	cmp	r3, #6
 800258e:	d807      	bhi.n	80025a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002590:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <SystemInit+0xe8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 030f 	bic.w	r3, r3, #15
 8002598:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <SystemInit+0xe8>)
 800259a:	f043 0307 	orr.w	r3, r3, #7
 800259e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a0:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <SystemInit+0xec>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2d      	ldr	r2, [pc, #180]	@ (800265c <SystemInit+0xec>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ac:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <SystemInit+0xec>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b2:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <SystemInit+0xec>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4929      	ldr	r1, [pc, #164]	@ (800265c <SystemInit+0xec>)
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <SystemInit+0xf0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025be:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <SystemInit+0xe8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ca:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <SystemInit+0xe8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 030f 	bic.w	r3, r3, #15
 80025d2:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <SystemInit+0xe8>)
 80025d4:	f043 0307 	orr.w	r3, r3, #7
 80025d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <SystemInit+0xec>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e0:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <SystemInit+0xec>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <SystemInit+0xec>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <SystemInit+0xec>)
 80025ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <SystemInit+0xf4>)
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <SystemInit+0xec>)
 80025f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <SystemInit+0xf8>)
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <SystemInit+0xec>)
 80025fa:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <SystemInit+0xfc>)
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025fe:	4b17      	ldr	r3, [pc, #92]	@ (800265c <SystemInit+0xec>)
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <SystemInit+0xec>)
 8002606:	4a19      	ldr	r2, [pc, #100]	@ (800266c <SystemInit+0xfc>)
 8002608:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <SystemInit+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002610:	4b12      	ldr	r3, [pc, #72]	@ (800265c <SystemInit+0xec>)
 8002612:	4a16      	ldr	r2, [pc, #88]	@ (800266c <SystemInit+0xfc>)
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <SystemInit+0xec>)
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <SystemInit+0xec>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0e      	ldr	r2, [pc, #56]	@ (800265c <SystemInit+0xec>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <SystemInit+0xec>)
 800262a:	2200      	movs	r2, #0
 800262c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <SystemInit+0x100>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <SystemInit+0x104>)
 8002634:	4013      	ands	r3, r2
 8002636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800263a:	d202      	bcs.n	8002642 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800263c:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <SystemInit+0x108>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <SystemInit+0x10c>)
 8002644:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	52002000 	.word	0x52002000
 800265c:	58024400 	.word	0x58024400
 8002660:	eaf6ed7f 	.word	0xeaf6ed7f
 8002664:	02020200 	.word	0x02020200
 8002668:	01ff0000 	.word	0x01ff0000
 800266c:	01010280 	.word	0x01010280
 8002670:	5c001000 	.word	0x5c001000
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	51008108 	.word	0x51008108
 800267c:	52004000 	.word	0x52004000

08002680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002684:	f7ff ff74 	bl	8002570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002688:	480c      	ldr	r0, [pc, #48]	@ (80026bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800268a:	490d      	ldr	r1, [pc, #52]	@ (80026c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a0:	4c0a      	ldr	r4, [pc, #40]	@ (80026cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ae:	f008 fab1 	bl	800ac14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b2:	f7fd ff89 	bl	80005c8 <main>
  bx  lr
 80026b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026c0:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 80026c4:	0800ace0 	.word	0x0800ace0
  ldr r2, =_sbss
 80026c8:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 80026cc:	24000524 	.word	0x24000524

080026d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC3_IRQHandler>
	...

080026d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026da:	2003      	movs	r0, #3
 80026dc:	f000 f968 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026e0:	f003 fa10 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_Init+0x68>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	4913      	ldr	r1, [pc, #76]	@ (8002740 <HAL_Init+0x6c>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <HAL_Init+0x68>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a0e      	ldr	r2, [pc, #56]	@ (8002740 <HAL_Init+0x6c>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_Init+0x70>)
 8002716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002718:	4a0b      	ldr	r2, [pc, #44]	@ (8002748 <HAL_Init+0x74>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800271e:	200f      	movs	r0, #15
 8002720:	f000 f814 	bl	800274c <HAL_InitTick>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e002      	b.n	8002734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800272e:	f7ff f9bd 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	58024400 	.word	0x58024400
 8002740:	0800ac98 	.word	0x0800ac98
 8002744:	24000024 	.word	0x24000024
 8002748:	24000020 	.word	0x24000020

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002754:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_InitTick+0x60>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e021      	b.n	80027a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <HAL_InitTick+0x64>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_InitTick+0x60>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f94d 	bl	8002a16 <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f000 f917 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	@ (80027b4 <HAL_InitTick+0x68>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2400002c 	.word	0x2400002c
 80027b0:	24000020 	.word	0x24000020
 80027b4:	24000028 	.word	0x24000028

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	2400002c 	.word	0x2400002c
 80027dc:	24000520 	.word	0x24000520

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	24000520 	.word	0x24000520

080027f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027fc:	4b03      	ldr	r3, [pc, #12]	@ (800280c <HAL_GetREVID+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0c1b      	lsrs	r3, r3, #16
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	5c001000 	.word	0x5c001000

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <__NVIC_SetPriorityGrouping+0x40>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	4313      	orrs	r3, r2
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x40>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00
 8002854:	05fa0000 	.word	0x05fa0000

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	@ (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff40 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff90 	bl	8002904 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5f 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff33 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa4 	bl	800296c <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a34:	f3bf 8f5f 	dmb	sy
}
 8002a38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <HAL_MPU_Disable+0x28>)
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	4a06      	ldr	r2, [pc, #24]	@ (8002a58 <HAL_MPU_Disable+0x28>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a44:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_MPU_Disable+0x2c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00
 8002a5c:	e000ed90 	.word	0xe000ed90

08002a60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a68:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <HAL_MPU_Enable+0x38>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_MPU_Enable+0x3c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_MPU_Enable+0x3c>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a7e:	f3bf 8f4f 	dsb	sy
}
 8002a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a84:	f3bf 8f6f 	isb	sy
}
 8002a88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed90 	.word	0xe000ed90
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	785a      	ldrb	r2, [r3, #1]
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002aae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002abc:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7b1b      	ldrb	r3, [r3, #12]
 8002ac8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7adb      	ldrb	r3, [r3, #11]
 8002ace:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7a9b      	ldrb	r3, [r3, #10]
 8002ad6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ad8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ae0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7b9b      	ldrb	r3, [r3, #14]
 8002ae6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ae8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7bdb      	ldrb	r3, [r3, #15]
 8002aee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002af0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7a5b      	ldrb	r3, [r3, #9]
 8002af6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002af8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7a1b      	ldrb	r3, [r3, #8]
 8002afe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b0c:	6113      	str	r3, [r2, #16]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed90 	.word	0xe000ed90

08002b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fe5a 	bl	80027e0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e2dc      	b.n	80030f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d008      	beq.n	8002b56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2280      	movs	r2, #128	@ 0x80
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e2cd      	b.n	80030f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a76      	ldr	r2, [pc, #472]	@ (8002d34 <HAL_DMA_Abort+0x214>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04a      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a74      	ldr	r2, [pc, #464]	@ (8002d38 <HAL_DMA_Abort+0x218>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d045      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	@ (8002d3c <HAL_DMA_Abort+0x21c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a71      	ldr	r2, [pc, #452]	@ (8002d40 <HAL_DMA_Abort+0x220>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a70      	ldr	r2, [pc, #448]	@ (8002d44 <HAL_DMA_Abort+0x224>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d036      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d48 <HAL_DMA_Abort+0x228>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6d      	ldr	r2, [pc, #436]	@ (8002d4c <HAL_DMA_Abort+0x22c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a6b      	ldr	r2, [pc, #428]	@ (8002d50 <HAL_DMA_Abort+0x230>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6a      	ldr	r2, [pc, #424]	@ (8002d54 <HAL_DMA_Abort+0x234>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a68      	ldr	r2, [pc, #416]	@ (8002d58 <HAL_DMA_Abort+0x238>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a67      	ldr	r2, [pc, #412]	@ (8002d5c <HAL_DMA_Abort+0x23c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a65      	ldr	r2, [pc, #404]	@ (8002d60 <HAL_DMA_Abort+0x240>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a64      	ldr	r2, [pc, #400]	@ (8002d64 <HAL_DMA_Abort+0x244>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a62      	ldr	r2, [pc, #392]	@ (8002d68 <HAL_DMA_Abort+0x248>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a61      	ldr	r2, [pc, #388]	@ (8002d6c <HAL_DMA_Abort+0x24c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5f      	ldr	r2, [pc, #380]	@ (8002d70 <HAL_DMA_Abort+0x250>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_Abort+0xda>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Abort+0xdc>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 021e 	bic.w	r2, r2, #30
 8002c0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e00a      	b.n	8002c3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 020e 	bic.w	r2, r2, #14
 8002c36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3c      	ldr	r2, [pc, #240]	@ (8002d34 <HAL_DMA_Abort+0x214>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d072      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d38 <HAL_DMA_Abort+0x218>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d06d      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a39      	ldr	r2, [pc, #228]	@ (8002d3c <HAL_DMA_Abort+0x21c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d068      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a37      	ldr	r2, [pc, #220]	@ (8002d40 <HAL_DMA_Abort+0x220>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d063      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a36      	ldr	r2, [pc, #216]	@ (8002d44 <HAL_DMA_Abort+0x224>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d05e      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <HAL_DMA_Abort+0x228>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d059      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a33      	ldr	r2, [pc, #204]	@ (8002d4c <HAL_DMA_Abort+0x22c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d054      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a31      	ldr	r2, [pc, #196]	@ (8002d50 <HAL_DMA_Abort+0x230>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d04f      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a30      	ldr	r2, [pc, #192]	@ (8002d54 <HAL_DMA_Abort+0x234>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d04a      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <HAL_DMA_Abort+0x238>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d045      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d5c <HAL_DMA_Abort+0x23c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d040      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d60 <HAL_DMA_Abort+0x240>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d03b      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2a      	ldr	r2, [pc, #168]	@ (8002d64 <HAL_DMA_Abort+0x244>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d036      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a28      	ldr	r2, [pc, #160]	@ (8002d68 <HAL_DMA_Abort+0x248>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d031      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a27      	ldr	r2, [pc, #156]	@ (8002d6c <HAL_DMA_Abort+0x24c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02c      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a25      	ldr	r2, [pc, #148]	@ (8002d70 <HAL_DMA_Abort+0x250>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d027      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a24      	ldr	r2, [pc, #144]	@ (8002d74 <HAL_DMA_Abort+0x254>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_DMA_Abort+0x258>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	@ (8002d7c <HAL_DMA_Abort+0x25c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	@ (8002d80 <HAL_DMA_Abort+0x260>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d84 <HAL_DMA_Abort+0x264>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <HAL_DMA_Abort+0x268>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <HAL_DMA_Abort+0x26c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <HAL_DMA_Abort+0x270>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d132      	bne.n	8002d94 <HAL_DMA_Abort+0x274>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e031      	b.n	8002d96 <HAL_DMA_Abort+0x276>
 8002d32:	bf00      	nop
 8002d34:	40020010 	.word	0x40020010
 8002d38:	40020028 	.word	0x40020028
 8002d3c:	40020040 	.word	0x40020040
 8002d40:	40020058 	.word	0x40020058
 8002d44:	40020070 	.word	0x40020070
 8002d48:	40020088 	.word	0x40020088
 8002d4c:	400200a0 	.word	0x400200a0
 8002d50:	400200b8 	.word	0x400200b8
 8002d54:	40020410 	.word	0x40020410
 8002d58:	40020428 	.word	0x40020428
 8002d5c:	40020440 	.word	0x40020440
 8002d60:	40020458 	.word	0x40020458
 8002d64:	40020470 	.word	0x40020470
 8002d68:	40020488 	.word	0x40020488
 8002d6c:	400204a0 	.word	0x400204a0
 8002d70:	400204b8 	.word	0x400204b8
 8002d74:	58025408 	.word	0x58025408
 8002d78:	5802541c 	.word	0x5802541c
 8002d7c:	58025430 	.word	0x58025430
 8002d80:	58025444 	.word	0x58025444
 8002d84:	58025458 	.word	0x58025458
 8002d88:	5802546c 	.word	0x5802546c
 8002d8c:	58025480 	.word	0x58025480
 8002d90:	58025494 	.word	0x58025494
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <HAL_DMA_Abort+0x444>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f68 <HAL_DMA_Abort+0x448>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8002f6c <HAL_DMA_Abort+0x44c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	@ (8002f70 <HAL_DMA_Abort+0x450>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a67      	ldr	r2, [pc, #412]	@ (8002f74 <HAL_DMA_Abort+0x454>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	@ (8002f78 <HAL_DMA_Abort+0x458>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a64      	ldr	r2, [pc, #400]	@ (8002f7c <HAL_DMA_Abort+0x45c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a62      	ldr	r2, [pc, #392]	@ (8002f80 <HAL_DMA_Abort+0x460>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a61      	ldr	r2, [pc, #388]	@ (8002f84 <HAL_DMA_Abort+0x464>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5f      	ldr	r2, [pc, #380]	@ (8002f88 <HAL_DMA_Abort+0x468>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5e      	ldr	r2, [pc, #376]	@ (8002f8c <HAL_DMA_Abort+0x46c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f90 <HAL_DMA_Abort+0x470>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5b      	ldr	r2, [pc, #364]	@ (8002f94 <HAL_DMA_Abort+0x474>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a59      	ldr	r2, [pc, #356]	@ (8002f98 <HAL_DMA_Abort+0x478>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a58      	ldr	r2, [pc, #352]	@ (8002f9c <HAL_DMA_Abort+0x47c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a56      	ldr	r2, [pc, #344]	@ (8002fa0 <HAL_DMA_Abort+0x480>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <HAL_DMA_Abort+0x33c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e007      	b.n	8002e6c <HAL_DMA_Abort+0x34c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e6c:	e013      	b.n	8002e96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff fcb7 	bl	80027e0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d90c      	bls.n	8002e96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e12d      	b.n	80030f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f64 <HAL_DMA_Abort+0x444>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04a      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f68 <HAL_DMA_Abort+0x448>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d045      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	@ (8002f6c <HAL_DMA_Abort+0x44c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d040      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f70 <HAL_DMA_Abort+0x450>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d03b      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a29      	ldr	r2, [pc, #164]	@ (8002f74 <HAL_DMA_Abort+0x454>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d036      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a27      	ldr	r2, [pc, #156]	@ (8002f78 <HAL_DMA_Abort+0x458>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a26      	ldr	r2, [pc, #152]	@ (8002f7c <HAL_DMA_Abort+0x45c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d02c      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a24      	ldr	r2, [pc, #144]	@ (8002f80 <HAL_DMA_Abort+0x460>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d027      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a23      	ldr	r2, [pc, #140]	@ (8002f84 <HAL_DMA_Abort+0x464>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a21      	ldr	r2, [pc, #132]	@ (8002f88 <HAL_DMA_Abort+0x468>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a20      	ldr	r2, [pc, #128]	@ (8002f8c <HAL_DMA_Abort+0x46c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_DMA_Abort+0x470>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f94 <HAL_DMA_Abort+0x474>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <HAL_DMA_Abort+0x478>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <HAL_DMA_Abort+0x47c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <HAL_DMA_Abort+0x480>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_DMA_Abort+0x426>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_DMA_Abort+0x428>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02b      	beq.n	8002fa4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	223f      	movs	r2, #63	@ 0x3f
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	e02a      	b.n	8002fba <HAL_DMA_Abort+0x49a>
 8002f64:	40020010 	.word	0x40020010
 8002f68:	40020028 	.word	0x40020028
 8002f6c:	40020040 	.word	0x40020040
 8002f70:	40020058 	.word	0x40020058
 8002f74:	40020070 	.word	0x40020070
 8002f78:	40020088 	.word	0x40020088
 8002f7c:	400200a0 	.word	0x400200a0
 8002f80:	400200b8 	.word	0x400200b8
 8002f84:	40020410 	.word	0x40020410
 8002f88:	40020428 	.word	0x40020428
 8002f8c:	40020440 	.word	0x40020440
 8002f90:	40020458 	.word	0x40020458
 8002f94:	40020470 	.word	0x40020470
 8002f98:	40020488 	.word	0x40020488
 8002f9c:	400204a0 	.word	0x400204a0
 8002fa0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4f      	ldr	r2, [pc, #316]	@ (80030fc <HAL_DMA_Abort+0x5dc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d072      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4d      	ldr	r2, [pc, #308]	@ (8003100 <HAL_DMA_Abort+0x5e0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d06d      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8003104 <HAL_DMA_Abort+0x5e4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d068      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8003108 <HAL_DMA_Abort+0x5e8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d063      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a49      	ldr	r2, [pc, #292]	@ (800310c <HAL_DMA_Abort+0x5ec>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d05e      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <HAL_DMA_Abort+0x5f0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d059      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <HAL_DMA_Abort+0x5f4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d054      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a44      	ldr	r2, [pc, #272]	@ (8003118 <HAL_DMA_Abort+0x5f8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d04f      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a43      	ldr	r2, [pc, #268]	@ (800311c <HAL_DMA_Abort+0x5fc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <HAL_DMA_Abort+0x600>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <HAL_DMA_Abort+0x604>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3e      	ldr	r2, [pc, #248]	@ (8003128 <HAL_DMA_Abort+0x608>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3d      	ldr	r2, [pc, #244]	@ (800312c <HAL_DMA_Abort+0x60c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3b      	ldr	r2, [pc, #236]	@ (8003130 <HAL_DMA_Abort+0x610>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3a      	ldr	r2, [pc, #232]	@ (8003134 <HAL_DMA_Abort+0x614>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a38      	ldr	r2, [pc, #224]	@ (8003138 <HAL_DMA_Abort+0x618>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a37      	ldr	r2, [pc, #220]	@ (800313c <HAL_DMA_Abort+0x61c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <HAL_DMA_Abort+0x620>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a34      	ldr	r2, [pc, #208]	@ (8003144 <HAL_DMA_Abort+0x624>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a32      	ldr	r2, [pc, #200]	@ (8003148 <HAL_DMA_Abort+0x628>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a31      	ldr	r2, [pc, #196]	@ (800314c <HAL_DMA_Abort+0x62c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2f      	ldr	r2, [pc, #188]	@ (8003150 <HAL_DMA_Abort+0x630>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2e      	ldr	r2, [pc, #184]	@ (8003154 <HAL_DMA_Abort+0x634>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <HAL_DMA_Abort+0x638>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Abort+0x58e>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_DMA_Abort+0x590>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
 800313c:	58025408 	.word	0x58025408
 8003140:	5802541c 	.word	0x5802541c
 8003144:	58025430 	.word	0x58025430
 8003148:	58025444 	.word	0x58025444
 800314c:	58025458 	.word	0x58025458
 8003150:	5802546c 	.word	0x5802546c
 8003154:	58025480 	.word	0x58025480
 8003158:	58025494 	.word	0x58025494

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e237      	b.n	80035de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e22c      	b.n	80035de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5c      	ldr	r2, [pc, #368]	@ (80032fc <HAL_DMA_Abort_IT+0x1a0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5b      	ldr	r2, [pc, #364]	@ (8003300 <HAL_DMA_Abort_IT+0x1a4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a59      	ldr	r2, [pc, #356]	@ (8003304 <HAL_DMA_Abort_IT+0x1a8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_DMA_Abort_IT+0x1ac>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a56      	ldr	r2, [pc, #344]	@ (800330c <HAL_DMA_Abort_IT+0x1b0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a55      	ldr	r2, [pc, #340]	@ (8003310 <HAL_DMA_Abort_IT+0x1b4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a53      	ldr	r2, [pc, #332]	@ (8003314 <HAL_DMA_Abort_IT+0x1b8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a52      	ldr	r2, [pc, #328]	@ (8003318 <HAL_DMA_Abort_IT+0x1bc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a50      	ldr	r2, [pc, #320]	@ (800331c <HAL_DMA_Abort_IT+0x1c0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003320 <HAL_DMA_Abort_IT+0x1c4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003324 <HAL_DMA_Abort_IT+0x1c8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003328 <HAL_DMA_Abort_IT+0x1cc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4a      	ldr	r2, [pc, #296]	@ (800332c <HAL_DMA_Abort_IT+0x1d0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a49      	ldr	r2, [pc, #292]	@ (8003330 <HAL_DMA_Abort_IT+0x1d4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a47      	ldr	r2, [pc, #284]	@ (8003334 <HAL_DMA_Abort_IT+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a46      	ldr	r2, [pc, #280]	@ (8003338 <HAL_DMA_Abort_IT+0x1dc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Abort_IT+0xcc>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_DMA_Abort_IT+0xce>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8086 	beq.w	800333c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2f      	ldr	r2, [pc, #188]	@ (80032fc <HAL_DMA_Abort_IT+0x1a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d04a      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2e      	ldr	r2, [pc, #184]	@ (8003300 <HAL_DMA_Abort_IT+0x1a4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d045      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2c      	ldr	r2, [pc, #176]	@ (8003304 <HAL_DMA_Abort_IT+0x1a8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d040      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2b      	ldr	r2, [pc, #172]	@ (8003308 <HAL_DMA_Abort_IT+0x1ac>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d03b      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a29      	ldr	r2, [pc, #164]	@ (800330c <HAL_DMA_Abort_IT+0x1b0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d036      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a28      	ldr	r2, [pc, #160]	@ (8003310 <HAL_DMA_Abort_IT+0x1b4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d031      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a26      	ldr	r2, [pc, #152]	@ (8003314 <HAL_DMA_Abort_IT+0x1b8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d02c      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a25      	ldr	r2, [pc, #148]	@ (8003318 <HAL_DMA_Abort_IT+0x1bc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d027      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a23      	ldr	r2, [pc, #140]	@ (800331c <HAL_DMA_Abort_IT+0x1c0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d022      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a22      	ldr	r2, [pc, #136]	@ (8003320 <HAL_DMA_Abort_IT+0x1c4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d01d      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <HAL_DMA_Abort_IT+0x1c8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d018      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <HAL_DMA_Abort_IT+0x1cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	@ (800332c <HAL_DMA_Abort_IT+0x1d0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00e      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_DMA_Abort_IT+0x1d4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003334 <HAL_DMA_Abort_IT+0x1d8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a19      	ldr	r2, [pc, #100]	@ (8003338 <HAL_DMA_Abort_IT+0x1dc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <HAL_DMA_Abort_IT+0x18e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e178      	b.n	80035dc <HAL_DMA_Abort_IT+0x480>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e16f      	b.n	80035dc <HAL_DMA_Abort_IT+0x480>
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 020e 	bic.w	r2, r2, #14
 800334a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6c      	ldr	r2, [pc, #432]	@ (8003504 <HAL_DMA_Abort_IT+0x3a8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6b      	ldr	r2, [pc, #428]	@ (8003508 <HAL_DMA_Abort_IT+0x3ac>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a69      	ldr	r2, [pc, #420]	@ (800350c <HAL_DMA_Abort_IT+0x3b0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a68      	ldr	r2, [pc, #416]	@ (8003510 <HAL_DMA_Abort_IT+0x3b4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a66      	ldr	r2, [pc, #408]	@ (8003514 <HAL_DMA_Abort_IT+0x3b8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a65      	ldr	r2, [pc, #404]	@ (8003518 <HAL_DMA_Abort_IT+0x3bc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a63      	ldr	r2, [pc, #396]	@ (800351c <HAL_DMA_Abort_IT+0x3c0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a62      	ldr	r2, [pc, #392]	@ (8003520 <HAL_DMA_Abort_IT+0x3c4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a60      	ldr	r2, [pc, #384]	@ (8003524 <HAL_DMA_Abort_IT+0x3c8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003528 <HAL_DMA_Abort_IT+0x3cc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5d      	ldr	r2, [pc, #372]	@ (800352c <HAL_DMA_Abort_IT+0x3d0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5c      	ldr	r2, [pc, #368]	@ (8003530 <HAL_DMA_Abort_IT+0x3d4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003534 <HAL_DMA_Abort_IT+0x3d8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a59      	ldr	r2, [pc, #356]	@ (8003538 <HAL_DMA_Abort_IT+0x3dc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a57      	ldr	r2, [pc, #348]	@ (800353c <HAL_DMA_Abort_IT+0x3e0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a56      	ldr	r2, [pc, #344]	@ (8003540 <HAL_DMA_Abort_IT+0x3e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d108      	bne.n	80033fe <HAL_DMA_Abort_IT+0x2a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e007      	b.n	800340e <HAL_DMA_Abort_IT+0x2b2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3c      	ldr	r2, [pc, #240]	@ (8003504 <HAL_DMA_Abort_IT+0x3a8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d072      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	@ (8003508 <HAL_DMA_Abort_IT+0x3ac>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d06d      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a39      	ldr	r2, [pc, #228]	@ (800350c <HAL_DMA_Abort_IT+0x3b0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d068      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a37      	ldr	r2, [pc, #220]	@ (8003510 <HAL_DMA_Abort_IT+0x3b4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d063      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a36      	ldr	r2, [pc, #216]	@ (8003514 <HAL_DMA_Abort_IT+0x3b8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d05e      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a34      	ldr	r2, [pc, #208]	@ (8003518 <HAL_DMA_Abort_IT+0x3bc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d059      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a33      	ldr	r2, [pc, #204]	@ (800351c <HAL_DMA_Abort_IT+0x3c0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d054      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	@ (8003520 <HAL_DMA_Abort_IT+0x3c4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04f      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a30      	ldr	r2, [pc, #192]	@ (8003524 <HAL_DMA_Abort_IT+0x3c8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2e      	ldr	r2, [pc, #184]	@ (8003528 <HAL_DMA_Abort_IT+0x3cc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2d      	ldr	r2, [pc, #180]	@ (800352c <HAL_DMA_Abort_IT+0x3d0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2b      	ldr	r2, [pc, #172]	@ (8003530 <HAL_DMA_Abort_IT+0x3d4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2a      	ldr	r2, [pc, #168]	@ (8003534 <HAL_DMA_Abort_IT+0x3d8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a28      	ldr	r2, [pc, #160]	@ (8003538 <HAL_DMA_Abort_IT+0x3dc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a27      	ldr	r2, [pc, #156]	@ (800353c <HAL_DMA_Abort_IT+0x3e0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a25      	ldr	r2, [pc, #148]	@ (8003540 <HAL_DMA_Abort_IT+0x3e4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_DMA_Abort_IT+0x3e8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	@ (8003548 <HAL_DMA_Abort_IT+0x3ec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	@ (800354c <HAL_DMA_Abort_IT+0x3f0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <HAL_DMA_Abort_IT+0x3f4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1e      	ldr	r2, [pc, #120]	@ (8003554 <HAL_DMA_Abort_IT+0x3f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003558 <HAL_DMA_Abort_IT+0x3fc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <HAL_DMA_Abort_IT+0x400>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	@ (8003560 <HAL_DMA_Abort_IT+0x404>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d132      	bne.n	8003564 <HAL_DMA_Abort_IT+0x408>
 80034fe:	2301      	movs	r3, #1
 8003500:	e031      	b.n	8003566 <HAL_DMA_Abort_IT+0x40a>
 8003502:	bf00      	nop
 8003504:	40020010 	.word	0x40020010
 8003508:	40020028 	.word	0x40020028
 800350c:	40020040 	.word	0x40020040
 8003510:	40020058 	.word	0x40020058
 8003514:	40020070 	.word	0x40020070
 8003518:	40020088 	.word	0x40020088
 800351c:	400200a0 	.word	0x400200a0
 8003520:	400200b8 	.word	0x400200b8
 8003524:	40020410 	.word	0x40020410
 8003528:	40020428 	.word	0x40020428
 800352c:	40020440 	.word	0x40020440
 8003530:	40020458 	.word	0x40020458
 8003534:	40020470 	.word	0x40020470
 8003538:	40020488 	.word	0x40020488
 800353c:	400204a0 	.word	0x400204a0
 8003540:	400204b8 	.word	0x400204b8
 8003544:	58025408 	.word	0x58025408
 8003548:	5802541c 	.word	0x5802541c
 800354c:	58025430 	.word	0x58025430
 8003550:	58025444 	.word	0x58025444
 8003554:	58025458 	.word	0x58025458
 8003558:	5802546c 	.word	0x5802546c
 800355c:	58025480 	.word	0x58025480
 8003560:	58025494 	.word	0x58025494
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d028      	beq.n	80035bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003578:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003598:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	@ 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035f6:	4b89      	ldr	r3, [pc, #548]	@ (800381c <HAL_GPIO_Init+0x234>)
 80035f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035fa:	e194      	b.n	8003926 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8186 	beq.w	8003920 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d005      	beq.n	800362c <HAL_GPIO_Init+0x44>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d130      	bne.n	800368e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003662:	2201      	movs	r2, #1
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 0201 	and.w	r2, r3, #1
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d017      	beq.n	80036ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d123      	bne.n	800371e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0203 	and.w	r2, r3, #3
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80e0 	beq.w	8003920 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	4b2f      	ldr	r3, [pc, #188]	@ (8003820 <HAL_GPIO_Init+0x238>)
 8003762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003766:	4a2e      	ldr	r2, [pc, #184]	@ (8003820 <HAL_GPIO_Init+0x238>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003770:	4b2b      	ldr	r3, [pc, #172]	@ (8003820 <HAL_GPIO_Init+0x238>)
 8003772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800377e:	4a29      	ldr	r2, [pc, #164]	@ (8003824 <HAL_GPIO_Init+0x23c>)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	220f      	movs	r2, #15
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a20      	ldr	r2, [pc, #128]	@ (8003828 <HAL_GPIO_Init+0x240>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d052      	beq.n	8003850 <HAL_GPIO_Init+0x268>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <HAL_GPIO_Init+0x244>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_GPIO_Init+0x22e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <HAL_GPIO_Init+0x248>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02b      	beq.n	8003812 <HAL_GPIO_Init+0x22a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_GPIO_Init+0x24c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d025      	beq.n	800380e <HAL_GPIO_Init+0x226>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_GPIO_Init+0x250>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01f      	beq.n	800380a <HAL_GPIO_Init+0x222>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <HAL_GPIO_Init+0x254>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_GPIO_Init+0x21e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003840 <HAL_GPIO_Init+0x258>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_GPIO_Init+0x21a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_GPIO_Init+0x25c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_GPIO_Init+0x216>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_GPIO_Init+0x260>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x212>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a17      	ldr	r2, [pc, #92]	@ (800384c <HAL_GPIO_Init+0x264>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_GPIO_Init+0x20e>
 80037f2:	2309      	movs	r3, #9
 80037f4:	e02d      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 80037f6:	230a      	movs	r3, #10
 80037f8:	e02b      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 80037fa:	2308      	movs	r3, #8
 80037fc:	e029      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 80037fe:	2307      	movs	r3, #7
 8003800:	e027      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 8003802:	2306      	movs	r3, #6
 8003804:	e025      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 8003806:	2305      	movs	r3, #5
 8003808:	e023      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 800380a:	2304      	movs	r3, #4
 800380c:	e021      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 800380e:	2303      	movs	r3, #3
 8003810:	e01f      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 8003812:	2302      	movs	r3, #2
 8003814:	e01d      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 8003816:	2301      	movs	r3, #1
 8003818:	e01b      	b.n	8003852 <HAL_GPIO_Init+0x26a>
 800381a:	bf00      	nop
 800381c:	58000080 	.word	0x58000080
 8003820:	58024400 	.word	0x58024400
 8003824:	58000400 	.word	0x58000400
 8003828:	58020000 	.word	0x58020000
 800382c:	58020400 	.word	0x58020400
 8003830:	58020800 	.word	0x58020800
 8003834:	58020c00 	.word	0x58020c00
 8003838:	58021000 	.word	0x58021000
 800383c:	58021400 	.word	0x58021400
 8003840:	58021800 	.word	0x58021800
 8003844:	58021c00 	.word	0x58021c00
 8003848:	58022000 	.word	0x58022000
 800384c:	58022400 	.word	0x58022400
 8003850:	2300      	movs	r3, #0
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	f002 0203 	and.w	r2, r2, #3
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	4093      	lsls	r3, r2
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003862:	4938      	ldr	r1, [pc, #224]	@ (8003944 <HAL_GPIO_Init+0x35c>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3301      	adds	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	f47f ae63 	bne.w	80035fc <HAL_GPIO_Init+0x14>
  }
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	3724      	adds	r7, #36	@ 0x24
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	58000400 	.word	0x58000400

08003948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
 8003954:	4613      	mov	r3, r2
 8003956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003958:	787b      	ldrb	r3, [r7, #1]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003964:	e003      	b.n	800396e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	041a      	lsls	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0bd      	b.n	8003b0a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d031      	beq.n	8003a36 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a4f      	ldr	r2, [pc, #316]	@ (8003b14 <HAL_HRTIM_Init+0x198>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10e      	bne.n	80039fa <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80039dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003b18 <HAL_HRTIM_Init+0x19c>)
 80039de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003b18 <HAL_HRTIM_Init+0x19c>)
 80039e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <HAL_HRTIM_Init+0x19c>)
 80039ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003a08:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a1e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe f852 	bl	8001ae0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a56:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]
 8003a82:	e03e      	b.n	8003b02 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003a84:	7dfa      	ldrb	r2, [r7, #23]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3318      	adds	r3, #24
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003a98:	7dfa      	ldrb	r2, [r7, #23]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	331c      	adds	r3, #28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003aac:	7dfa      	ldrb	r2, [r7, #23]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3320      	adds	r3, #32
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003ac0:	7dfa      	ldrb	r2, [r7, #23]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3324      	adds	r3, #36	@ 0x24
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003ad4:	7dfa      	ldrb	r2, [r7, #23]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003ae8:	7dfa      	ldrb	r2, [r7, #23]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3330      	adds	r3, #48	@ 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	3301      	adds	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d9bd      	bls.n	8003a84 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40017400 	.word	0x40017400
 8003b18:	58024400 	.word	0x58024400

08003b1c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d101      	bne.n	8003b38 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
 8003b36:	e015      	b.n	8003b64 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d104      	bne.n	8003b50 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fa88 	bl	800405e <HRTIM_MasterBase_Config>
 8003b4e:	e004      	b.n	8003b5a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fab1 	bl	80040bc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d101      	bne.n	8003b88 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	e01c      	b.n	8003bc2 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_HRTIM_EventConfig+0x2a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e015      	b.n	8003bc2 <HAL_HRTIM_EventConfig+0x56>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fd44 	bl	8004638 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d101      	bne.n	8003be4 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	e025      	b.n	8003c30 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_HRTIM_EventPrescalerConfig+0x28>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e01e      	b.n	8003c30 <HAL_HRTIM_EventPrescalerConfig+0x66>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8003c0a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d101      	bne.n	8003c58 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
 8003c56:	e05f      	b.n	8003d18 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e058      	b.n	8003d18 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d104      	bne.n	8003c86 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa5c 	bl	800413c <HRTIM_MasterWaveform_Config>
 8003c84:	e004      	b.n	8003c90 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fabc 	bl	8004208 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4403      	add	r3, r0
 8003ca2:	3320      	adds	r3, #32
 8003ca4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4403      	add	r3, r0
 8003cb8:	3324      	adds	r3, #36	@ 0x24
 8003cba:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4403      	add	r3, r0
 8003cce:	3328      	adds	r3, #40	@ 0x28
 8003cd0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	332c      	adds	r3, #44	@ 0x2c
 8003ce6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6919      	ldr	r1, [r3, #16]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4403      	add	r3, r0
 8003cfa:	3330      	adds	r3, #48	@ 0x30
 8003cfc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fec1 	bl	8004a88 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d101      	bne.n	8003d3e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e157      	b.n	8003fee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e150      	b.n	8003fee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d140      	bne.n	8003de4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	2b07      	cmp	r3, #7
 8003d68:	d82a      	bhi.n	8003dc0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d91 	.word	0x08003d91
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003dc1 	.word	0x08003dc1
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc1 	.word	0x08003dc1
 8003d88:	08003dc1 	.word	0x08003dc1
 8003d8c:	08003db5 	.word	0x08003db5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	61da      	str	r2, [r3, #28]
        break;
 8003d9a:	e01a      	b.n	8003dd2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8003da6:	e014      	b.n	8003dd2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8003db2:	e00e      	b.n	8003dd2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003dbe:	e008      	b.n	8003dd2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2207      	movs	r2, #7
 8003dc4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8003dd0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b07      	cmp	r3, #7
 8003ddc:	f040 80fe 	bne.w	8003fdc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e104      	b.n	8003fee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	f200 80e3 	bhi.w	8003fb4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003dee:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e15 	.word	0x08003e15
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003fb5 	.word	0x08003fb5
 8003e00:	08003ee5 	.word	0x08003ee5
 8003e04:	08003fb5 	.word	0x08003fb5
 8003e08:	08003fb5 	.word	0x08003fb5
 8003e0c:	08003fb5 	.word	0x08003fb5
 8003e10:	08003ef9 	.word	0x08003ef9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	01db      	lsls	r3, r3, #7
 8003e20:	440b      	add	r3, r1
 8003e22:	339c      	adds	r3, #156	@ 0x9c
 8003e24:	601a      	str	r2, [r3, #0]
        break;
 8003e26:	e0d1      	b.n	8003fcc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	01db      	lsls	r3, r3, #7
 8003e34:	440b      	add	r3, r1
 8003e36:	33a4      	adds	r3, #164	@ 0xa4
 8003e38:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03f      	beq.n	8003ec2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	01db      	lsls	r3, r3, #7
 8003e4c:	4413      	add	r3, r2
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	6811      	ldr	r1, [r2, #0]
 8003e54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	01db      	lsls	r3, r3, #7
 8003e5e:	440b      	add	r3, r1
 8003e60:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	01db      	lsls	r3, r3, #7
 8003e6c:	4413      	add	r3, r2
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68f9      	ldr	r1, [r7, #12]
 8003e76:	6809      	ldr	r1, [r1, #0]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	440b      	add	r3, r1
 8003e82:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8c:	d109      	bne.n	8003ea2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	01db      	lsls	r3, r3, #7
 8003e9a:	440b      	add	r3, r1
 8003e9c:	339c      	adds	r3, #156	@ 0x9c
 8003e9e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003ea0:	e091      	b.n	8003fc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eaa:	f040 808c 	bne.w	8003fc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	01db      	lsls	r3, r3, #7
 8003eba:	440b      	add	r3, r1
 8003ebc:	33a8      	adds	r3, #168	@ 0xa8
 8003ebe:	601a      	str	r2, [r3, #0]
         break;
 8003ec0:	e081      	b.n	8003fc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	01db      	lsls	r3, r3, #7
 8003ecc:	4413      	add	r3, r2
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	6811      	ldr	r1, [r2, #0]
 8003ed4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3301      	adds	r3, #1
 8003edc:	01db      	lsls	r3, r3, #7
 8003ede:	440b      	add	r3, r1
 8003ee0:	601a      	str	r2, [r3, #0]
         break;
 8003ee2:	e070      	b.n	8003fc6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6819      	ldr	r1, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	01db      	lsls	r3, r3, #7
 8003ef0:	440b      	add	r3, r1
 8003ef2:	33a8      	adds	r3, #168	@ 0xa8
 8003ef4:	601a      	str	r2, [r3, #0]
        break;
 8003ef6:	e069      	b.n	8003fcc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	01db      	lsls	r3, r3, #7
 8003f04:	440b      	add	r3, r1
 8003f06:	33ac      	adds	r3, #172	@ 0xac
 8003f08:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d03f      	beq.n	8003f92 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	4413      	add	r3, r2
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	6811      	ldr	r1, [r2, #0]
 8003f24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	01db      	lsls	r3, r3, #7
 8003f2e:	440b      	add	r3, r1
 8003f30:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	01db      	lsls	r3, r3, #7
 8003f3c:	4413      	add	r3, r2
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	6809      	ldr	r1, [r1, #0]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	01db      	lsls	r3, r3, #7
 8003f52:	440b      	add	r3, r1
 8003f54:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5e:	d109      	bne.n	8003f74 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	01db      	lsls	r3, r3, #7
 8003f6c:	440b      	add	r3, r1
 8003f6e:	339c      	adds	r3, #156	@ 0x9c
 8003f70:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003f72:	e02a      	b.n	8003fca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f7c:	d125      	bne.n	8003fca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	01db      	lsls	r3, r3, #7
 8003f8a:	440b      	add	r3, r1
 8003f8c:	33a8      	adds	r3, #168	@ 0xa8
 8003f8e:	601a      	str	r2, [r3, #0]
         break;
 8003f90:	e01b      	b.n	8003fca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	4413      	add	r3, r2
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	6811      	ldr	r1, [r2, #0]
 8003fa4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	3301      	adds	r3, #1
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	440b      	add	r3, r1
 8003fb0:	601a      	str	r2, [r3, #0]
         break;
 8003fb2:	e00a      	b.n	8003fca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003fca:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b07      	cmp	r3, #7
 8003fd6:	d101      	bne.n	8003fdc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e008      	b.n	8003fee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d101      	bne.n	800401a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	e01d      	b.n	8004056 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004024:	2302      	movs	r3, #2
 8004026:	e016      	b.n	8004056 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa22 	bl	8004488 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f023 0318 	bic.w	r3, r3, #24
 8004088:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	6852      	ldr	r2, [r2, #4]
 80040ae:	619a      	str	r2, [r3, #24]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	01db      	lsls	r3, r3, #7
 80040d2:	4413      	add	r3, r2
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0307 	bic.w	r3, r3, #7
 80040de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0318 	bic.w	r3, r3, #24
 80040f0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3301      	adds	r3, #1
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	4413      	add	r3, r2
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	440b      	add	r3, r1
 800411a:	3394      	adds	r3, #148	@ 0x94
 800411c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	01db      	lsls	r3, r3, #7
 800412a:	440b      	add	r3, r1
 800412c:	3398      	adds	r3, #152	@ 0x98
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004156:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0320 	bic.w	r3, r3, #32
 800415e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004170:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004182:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004194:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80041a6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80041b8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80041cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041de:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004208:	b480      	push	{r7}
 800420a:	b08b      	sub	sp, #44	@ 0x2c
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	6811      	ldr	r1, [r2, #0]
 8004226:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3301      	adds	r3, #1
 800422e:	01db      	lsls	r3, r3, #7
 8004230:	440b      	add	r3, r1
 8004232:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	01db      	lsls	r3, r3, #7
 800423e:	4413      	add	r3, r2
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	01db      	lsls	r3, r3, #7
 800424c:	4413      	add	r3, r2
 800424e:	33e8      	adds	r3, #232	@ 0xe8
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	4413      	add	r3, r2
 800425e:	33e4      	adds	r3, #228	@ 0xe4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800426c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	f023 0320 	bic.w	r3, r3, #32
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427c:	4313      	orrs	r3, r2
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428e:	4313      	orrs	r3, r2
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a0:	4313      	orrs	r3, r2
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b2:	4313      	orrs	r3, r2
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	4313      	orrs	r3, r2
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d6:	4313      	orrs	r3, r2
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ea:	d103      	bne.n	80042f4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004302:	4313      	orrs	r3, r2
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	4313      	orrs	r3, r2
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	4313      	orrs	r3, r2
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f023 031f 	bic.w	r3, r3, #31
 8004330:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004346:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004360:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	6a3a      	ldr	r2, [r7, #32]
 8004368:	4313      	orrs	r3, r2
 800436a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004370:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004374:	d004      	beq.n	8004380 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800437e:	d103      	bne.n	8004388 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	d108      	bne.n	800439a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800438e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	4313      	orrs	r3, r2
 8004398:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d843      	bhi.n	800442e <HRTIM_TimingUnitWaveform_Config+0x226>
 80043a6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043c1 	.word	0x080043c1
 80043b0:	080043d7 	.word	0x080043d7
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	08004403 	.word	0x08004403
 80043bc:	08004419 	.word	0x08004419
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80043c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61fb      	str	r3, [r7, #28]
      break;
 80043d4:	e02c      	b.n	8004430 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61fb      	str	r3, [r7, #28]
      break;
 80043ea:	e021      	b.n	8004430 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80043f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61fb      	str	r3, [r7, #28]
      break;
 8004400:	e016      	b.n	8004430 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004408:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	4313      	orrs	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]
      break;
 8004416:	e00b      	b.n	8004430 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800441e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	015b      	lsls	r3, r3, #5
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4313      	orrs	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
      break;
 800442c:	e000      	b.n	8004430 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800442e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3301      	adds	r3, #1
 8004438:	01db      	lsls	r3, r3, #7
 800443a:	4413      	add	r3, r2
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	4413      	add	r3, r2
 800444a:	33e8      	adds	r3, #232	@ 0xe8
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	01db      	lsls	r3, r3, #7
 8004458:	4413      	add	r3, r2
 800445a:	33e4      	adds	r3, #228	@ 0xe4
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	01db      	lsls	r3, r3, #7
 8004468:	4413      	add	r3, r2
 800446a:	33d4      	adds	r3, #212	@ 0xd4
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800447a:	bf00      	nop
 800447c:	372c      	adds	r7, #44	@ 0x2c
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	@ 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	01db      	lsls	r3, r3, #7
 80044a2:	4413      	add	r3, r2
 80044a4:	33e4      	adds	r3, #228	@ 0xe4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	01db      	lsls	r3, r3, #7
 80044b2:	4413      	add	r3, r2
 80044b4:	33b8      	adds	r3, #184	@ 0xb8
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	617b      	str	r3, [r7, #20]

  switch (Output)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c0:	d04d      	beq.n	800455e <HRTIM_OutputConfig+0xd6>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d85e      	bhi.n	8004588 <HRTIM_OutputConfig+0x100>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d0:	d032      	beq.n	8004538 <HRTIM_OutputConfig+0xb0>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	d856      	bhi.n	8004588 <HRTIM_OutputConfig+0x100>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d03e      	beq.n	800455e <HRTIM_OutputConfig+0xd6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b80      	cmp	r3, #128	@ 0x80
 80044e4:	d850      	bhi.n	8004588 <HRTIM_OutputConfig+0x100>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d025      	beq.n	8004538 <HRTIM_OutputConfig+0xb0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d84a      	bhi.n	8004588 <HRTIM_OutputConfig+0x100>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d01f      	beq.n	8004538 <HRTIM_OutputConfig+0xb0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d044      	beq.n	8004588 <HRTIM_OutputConfig+0x100>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b20      	cmp	r3, #32
 8004502:	d841      	bhi.n	8004588 <HRTIM_OutputConfig+0x100>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d33e      	bcc.n	8004588 <HRTIM_OutputConfig+0x100>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3b02      	subs	r3, #2
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	4b48      	ldr	r3, [pc, #288]	@ (8004634 <HRTIM_OutputConfig+0x1ac>)
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11c      	bne.n	800455e <HRTIM_OutputConfig+0xd6>
 8004524:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d027      	beq.n	8004588 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	01db      	lsls	r3, r3, #7
 8004544:	440b      	add	r3, r1
 8004546:	33bc      	adds	r3, #188	@ 0xbc
 8004548:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	01db      	lsls	r3, r3, #7
 8004556:	440b      	add	r3, r1
 8004558:	33c0      	adds	r3, #192	@ 0xc0
 800455a:	601a      	str	r2, [r3, #0]
      break;
 800455c:	e015      	b.n	800458a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6819      	ldr	r1, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	01db      	lsls	r3, r3, #7
 800456a:	440b      	add	r3, r1
 800456c:	33c4      	adds	r3, #196	@ 0xc4
 800456e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	440b      	add	r3, r1
 800457e:	33c8      	adds	r3, #200	@ 0xc8
 8004580:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004582:	2310      	movs	r3, #16
 8004584:	61bb      	str	r3, [r7, #24]
      break;
 8004586:	e000      	b.n	800458a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8004588:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800458a:	22fe      	movs	r2, #254	@ 0xfe
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004592:	43db      	mvns	r3, r3
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	4013      	ands	r3, r2
 8004598:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d111      	bne.n	8004616 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10c      	bne.n	8004616 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004602:	2b00      	cmp	r3, #0
 8004604:	d107      	bne.n	8004616 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	4313      	orrs	r3, r2
 8004614:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	01db      	lsls	r3, r3, #7
 800461e:	4413      	add	r3, r2
 8004620:	33e4      	adds	r3, #228	@ 0xe4
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	3724      	adds	r7, #36	@ 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40000041 	.word	0x40000041

08004638 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800464c:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8004656:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8004660:	617b      	str	r3, [r7, #20]

  switch (Event)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b0a      	cmp	r3, #10
 8004666:	f200 8208 	bhi.w	8004a7a <HRTIM_EventConfig+0x442>
 800466a:	a201      	add	r2, pc, #4	@ (adr r2, 8004670 <HRTIM_EventConfig+0x38>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046bd 	.word	0x080046bd
 8004678:	08004713 	.word	0x08004713
 800467c:	0800476f 	.word	0x0800476f
 8004680:	080047cd 	.word	0x080047cd
 8004684:	0800482b 	.word	0x0800482b
 8004688:	08004889 	.word	0x08004889
 800468c:	080048e7 	.word	0x080048e7
 8004690:	0800494b 	.word	0x0800494b
 8004694:	080049af 	.word	0x080049af
 8004698:	08004a15 	.word	0x08004a15
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80046ba:	e1df      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046c2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0318 	and.w	r3, r3, #24
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	4313      	orrs	r3, r2
 8004704:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004710:	e1b4      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8004718:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	019b      	lsls	r3, r3, #6
 8004720:	b2db      	uxtb	r3, r3
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	4313      	orrs	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	4313      	orrs	r3, r2
 8004736:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	4313      	orrs	r3, r2
 8004746:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	019b      	lsls	r3, r3, #6
 8004758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800476c:	e186      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004774:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	031b      	lsls	r3, r3, #12
 800477c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4313      	orrs	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	031b      	lsls	r3, r3, #12
 800478c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	031b      	lsls	r3, r3, #12
 800479c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80047ca:	e157      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 80047d2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	049b      	lsls	r3, r3, #18
 80047da:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	049b      	lsls	r3, r3, #18
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	049b      	lsls	r3, r3, #18
 80047fa:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	049b      	lsls	r3, r3, #18
 8004814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004828:	e128      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004830:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	4313      	orrs	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	4313      	orrs	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	4313      	orrs	r3, r2
 8004860:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	061b      	lsls	r3, r3, #24
 8004872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	4313      	orrs	r3, r2
 800487a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004886:	e0f9      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f023 031f 	bic.w	r3, r3, #31
 800488e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0318 	and.w	r3, r3, #24
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 030f 	bic.w	r3, r3, #15
 80048c0:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80048e4:	e0ca      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 80048ec:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	019b      	lsls	r3, r3, #6
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8004922:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	019b      	lsls	r3, r3, #6
 800492a:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004948:	e098      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8004950:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	031b      	lsls	r3, r3, #12
 8004958:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	031b      	lsls	r3, r3, #12
 8004968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	031b      	lsls	r3, r3, #12
 8004978:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004988:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	031b      	lsls	r3, r3, #12
 8004990:	b29b      	uxth	r3, r3
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80049ac:	e066      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 80049b4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	049b      	lsls	r3, r3, #18
 80049bc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	049b      	lsls	r3, r3, #18
 80049cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	049b      	lsls	r3, r3, #18
 80049dc:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80049ec:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	049b      	lsls	r3, r3, #18
 80049f4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004a12:	e033      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8004a1a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004a52:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004a78:	e000      	b.n	8004a7c <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8004a7a:	bf00      	nop
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3724      	adds	r7, #36	@ 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d851      	bhi.n	8004b3c <HRTIM_ForceRegistersUpdate+0xb4>
 8004a98:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <HRTIM_ForceRegistersUpdate+0x18>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004ae5 	.word	0x08004ae5
 8004aa8:	08004afb 	.word	0x08004afb
 8004aac:	08004b11 	.word	0x08004b11
 8004ab0:	08004b27 	.word	0x08004b27
 8004ab4:	08004ab9 	.word	0x08004ab9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004acc:	e037      	b.n	8004b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0202 	orr.w	r2, r2, #2
 8004ade:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004ae2:	e02c      	b.n	8004b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0204 	orr.w	r2, r2, #4
 8004af4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004af8:	e021      	b.n	8004b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0208 	orr.w	r2, r2, #8
 8004b0a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004b0e:	e016      	b.n	8004b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0210 	orr.w	r2, r2, #16
 8004b20:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004b24:	e00b      	b.n	8004b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0220 	orr.w	r2, r2, #32
 8004b36:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004b3a:	e000      	b.n	8004b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004b3c:	bf00      	nop
  }
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e097      	b.n	8004c8e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fd f849 	bl	8001c10 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d004      	beq.n	8004ba0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b9e:	d103      	bne.n	8004ba8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 031e 	bic.w	r3, r3, #30
 8004ba6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4b38      	ldr	r3, [pc, #224]	@ (8004c98 <HAL_LPTIM_Init+0x14c>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4b37      	ldr	r3, [pc, #220]	@ (8004c9c <HAL_LPTIM_Init+0x150>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004bcc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004bd2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004bd8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004bde:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d004      	beq.n	8004c10 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c0e:	d107      	bne.n	8004c20 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00a      	beq.n	8004c42 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c34:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004c3a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <HAL_LPTIM_Init+0x154>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_LPTIM_Init+0x112>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <HAL_LPTIM_Init+0x158>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c6e:	e009      	b.n	8004c84 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca8 <HAL_LPTIM_Init+0x15c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d104      	bne.n	8004c84 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	ffff1f3f 	.word	0xffff1f3f
 8004c9c:	ff19f1fe 	.word	0xff19f1fe
 8004ca0:	40002400 	.word	0x40002400
 8004ca4:	58002400 	.word	0x58002400
 8004ca8:	58002800 	.word	0x58002800

08004cac <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10d      	bne.n	8004cde <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d106      	bne.n	8004cde <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f882 	bl	8004de2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d10d      	bne.n	8004d08 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d106      	bne.n	8004d08 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f877 	bl	8004df6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d10d      	bne.n	8004d32 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d106      	bne.n	8004d32 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f86c 	bl	8004e0a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d10d      	bne.n	8004d5c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d106      	bne.n	8004d5c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2208      	movs	r2, #8
 8004d54:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f861 	bl	8004e1e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d10d      	bne.n	8004d86 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d106      	bne.n	8004d86 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2210      	movs	r2, #16
 8004d7e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f856 	bl	8004e32 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d10d      	bne.n	8004db0 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d106      	bne.n	8004db0 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2220      	movs	r2, #32
 8004da8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f84b 	bl	8004e46 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b40      	cmp	r3, #64	@ 0x40
 8004dbc:	d10d      	bne.n	8004dda <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d106      	bne.n	8004dda <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2240      	movs	r2, #64	@ 0x40
 8004dd2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f840 	bl	8004e5a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004e78:	4b19      	ldr	r3, [pc, #100]	@ (8004ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d00a      	beq.n	8004e9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e84:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d001      	beq.n	8004e96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e01f      	b.n	8004ed6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e01d      	b.n	8004ed6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e9a:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f023 0207 	bic.w	r2, r3, #7
 8004ea2:	490f      	ldr	r1, [pc, #60]	@ (8004ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004eaa:	f7fd fc99 	bl	80027e0 <HAL_GetTick>
 8004eae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004eb0:	e009      	b.n	8004ec6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004eb2:	f7fd fc95 	bl	80027e0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ec0:	d901      	bls.n	8004ec6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e007      	b.n	8004ed6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed2:	d1ee      	bne.n	8004eb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	58024800 	.word	0x58024800

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08c      	sub	sp, #48	@ 0x30
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f000 bc48 	b.w	8005788 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8088 	beq.w	8005016 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f06:	4b99      	ldr	r3, [pc, #612]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f10:	4b96      	ldr	r3, [pc, #600]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d007      	beq.n	8004f2c <HAL_RCC_OscConfig+0x48>
 8004f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1e:	2b18      	cmp	r3, #24
 8004f20:	d111      	bne.n	8004f46 <HAL_RCC_OscConfig+0x62>
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d10c      	bne.n	8004f46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d06d      	beq.n	8005014 <HAL_RCC_OscConfig+0x130>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d169      	bne.n	8005014 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f000 bc21 	b.w	8005788 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4e:	d106      	bne.n	8004f5e <HAL_RCC_OscConfig+0x7a>
 8004f50:	4b86      	ldr	r3, [pc, #536]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a85      	ldr	r2, [pc, #532]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e02e      	b.n	8004fbc <HAL_RCC_OscConfig+0xd8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x9c>
 8004f66:	4b81      	ldr	r3, [pc, #516]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a80      	ldr	r2, [pc, #512]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b7e      	ldr	r3, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7d      	ldr	r2, [pc, #500]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e01d      	b.n	8004fbc <HAL_RCC_OscConfig+0xd8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0xc0>
 8004f8a:	4b78      	ldr	r3, [pc, #480]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b75      	ldr	r3, [pc, #468]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a74      	ldr	r2, [pc, #464]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0xd8>
 8004fa4:	4b71      	ldr	r3, [pc, #452]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a70      	ldr	r2, [pc, #448]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	4b6e      	ldr	r3, [pc, #440]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a6d      	ldr	r2, [pc, #436]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd fc0c 	bl	80027e0 <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fd fc08 	bl	80027e0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e3d4      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fde:	4b63      	ldr	r3, [pc, #396]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0xe8>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fd fbf8 	bl	80027e0 <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fd fbf4 	bl	80027e0 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	@ 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e3c0      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005006:	4b59      	ldr	r3, [pc, #356]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x110>
 8005012:	e000      	b.n	8005016 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80ca 	beq.w	80051b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005024:	4b51      	ldr	r3, [pc, #324]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800502c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800502e:	4b4f      	ldr	r3, [pc, #316]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <HAL_RCC_OscConfig+0x166>
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2b18      	cmp	r3, #24
 800503e:	d156      	bne.n	80050ee <HAL_RCC_OscConfig+0x20a>
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d151      	bne.n	80050ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800504a:	4b48      	ldr	r3, [pc, #288]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x17e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e392      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005062:	4b42      	ldr	r3, [pc, #264]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 0219 	bic.w	r2, r3, #25
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	493f      	ldr	r1, [pc, #252]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fd fbb4 	bl	80027e0 <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800507c:	f7fd fbb0 	bl	80027e0 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e37c      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800508e:	4b37      	ldr	r3, [pc, #220]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509a:	f7fd fbad 	bl	80027f8 <HAL_GetREVID>
 800509e:	4603      	mov	r3, r0
 80050a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d817      	bhi.n	80050d8 <HAL_RCC_OscConfig+0x1f4>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b40      	cmp	r3, #64	@ 0x40
 80050ae:	d108      	bne.n	80050c2 <HAL_RCC_OscConfig+0x1de>
 80050b0:	4b2e      	ldr	r3, [pc, #184]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050b8:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c0:	e07a      	b.n	80051b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b2a      	ldr	r3, [pc, #168]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	031b      	lsls	r3, r3, #12
 80050d0:	4926      	ldr	r1, [pc, #152]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050d6:	e06f      	b.n	80051b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b24      	ldr	r3, [pc, #144]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	4921      	ldr	r1, [pc, #132]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ec:	e064      	b.n	80051b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d047      	beq.n	8005186 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050f6:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 0219 	bic.w	r2, r3, #25
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	491a      	ldr	r1, [pc, #104]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd fb6a 	bl	80027e0 <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005110:	f7fd fb66 	bl	80027e0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e332      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005122:	4b12      	ldr	r3, [pc, #72]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512e:	f7fd fb63 	bl	80027f8 <HAL_GetREVID>
 8005132:	4603      	mov	r3, r0
 8005134:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005138:	4293      	cmp	r3, r2
 800513a:	d819      	bhi.n	8005170 <HAL_RCC_OscConfig+0x28c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b40      	cmp	r3, #64	@ 0x40
 8005142:	d108      	bne.n	8005156 <HAL_RCC_OscConfig+0x272>
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800514c:	4a07      	ldr	r2, [pc, #28]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 800514e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005152:	6053      	str	r3, [r2, #4]
 8005154:	e030      	b.n	80051b8 <HAL_RCC_OscConfig+0x2d4>
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	031b      	lsls	r3, r3, #12
 8005164:	4901      	ldr	r1, [pc, #4]	@ (800516c <HAL_RCC_OscConfig+0x288>)
 8005166:	4313      	orrs	r3, r2
 8005168:	604b      	str	r3, [r1, #4]
 800516a:	e025      	b.n	80051b8 <HAL_RCC_OscConfig+0x2d4>
 800516c:	58024400 	.word	0x58024400
 8005170:	4b9a      	ldr	r3, [pc, #616]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	4997      	ldr	r1, [pc, #604]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
 8005184:	e018      	b.n	80051b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005186:	4b95      	ldr	r3, [pc, #596]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a94      	ldr	r2, [pc, #592]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fd fb25 	bl	80027e0 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519a:	f7fd fb21 	bl	80027e0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e2ed      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051ac:	4b8b      	ldr	r3, [pc, #556]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80a9 	beq.w	8005318 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c6:	4b85      	ldr	r3, [pc, #532]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051d0:	4b82      	ldr	r3, [pc, #520]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d007      	beq.n	80051ec <HAL_RCC_OscConfig+0x308>
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b18      	cmp	r3, #24
 80051e0:	d13a      	bne.n	8005258 <HAL_RCC_OscConfig+0x374>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d135      	bne.n	8005258 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ec:	4b7b      	ldr	r3, [pc, #492]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_OscConfig+0x320>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b80      	cmp	r3, #128	@ 0x80
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e2c1      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005204:	f7fd faf8 	bl	80027f8 <HAL_GetREVID>
 8005208:	4603      	mov	r3, r0
 800520a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800520e:	4293      	cmp	r3, r2
 8005210:	d817      	bhi.n	8005242 <HAL_RCC_OscConfig+0x35e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	2b20      	cmp	r3, #32
 8005218:	d108      	bne.n	800522c <HAL_RCC_OscConfig+0x348>
 800521a:	4b70      	ldr	r3, [pc, #448]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005222:	4a6e      	ldr	r2, [pc, #440]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005224:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005228:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800522a:	e075      	b.n	8005318 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800522c:	4b6b      	ldr	r3, [pc, #428]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	069b      	lsls	r3, r3, #26
 800523a:	4968      	ldr	r1, [pc, #416]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005240:	e06a      	b.n	8005318 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005242:	4b66      	ldr	r3, [pc, #408]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	4962      	ldr	r1, [pc, #392]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005256:	e05f      	b.n	8005318 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d042      	beq.n	80052e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005260:	4b5e      	ldr	r3, [pc, #376]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5d      	ldr	r2, [pc, #372]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fd fab8 	bl	80027e0 <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005274:	f7fd fab4 	bl	80027e0 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e280      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005286:	4b55      	ldr	r3, [pc, #340]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005292:	f7fd fab1 	bl	80027f8 <HAL_GetREVID>
 8005296:	4603      	mov	r3, r0
 8005298:	f241 0203 	movw	r2, #4099	@ 0x1003
 800529c:	4293      	cmp	r3, r2
 800529e:	d817      	bhi.n	80052d0 <HAL_RCC_OscConfig+0x3ec>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d108      	bne.n	80052ba <HAL_RCC_OscConfig+0x3d6>
 80052a8:	4b4c      	ldr	r3, [pc, #304]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80052b0:	4a4a      	ldr	r2, [pc, #296]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b6:	6053      	str	r3, [r2, #4]
 80052b8:	e02e      	b.n	8005318 <HAL_RCC_OscConfig+0x434>
 80052ba:	4b48      	ldr	r3, [pc, #288]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	069b      	lsls	r3, r3, #26
 80052c8:	4944      	ldr	r1, [pc, #272]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
 80052ce:	e023      	b.n	8005318 <HAL_RCC_OscConfig+0x434>
 80052d0:	4b42      	ldr	r3, [pc, #264]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	493f      	ldr	r1, [pc, #252]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60cb      	str	r3, [r1, #12]
 80052e4:	e018      	b.n	8005318 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052e6:	4b3d      	ldr	r3, [pc, #244]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3c      	ldr	r2, [pc, #240]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80052ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fd fa75 	bl	80027e0 <HAL_GetTick>
 80052f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052fa:	f7fd fa71 	bl	80027e0 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e23d      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800530c:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d036      	beq.n	8005392 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d019      	beq.n	8005360 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800532c:	4b2b      	ldr	r3, [pc, #172]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 800532e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005330:	4a2a      	ldr	r2, [pc, #168]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd fa52 	bl	80027e0 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005340:	f7fd fa4e 	bl	80027e0 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e21a      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005352:	4b22      	ldr	r3, [pc, #136]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x45c>
 800535e:	e018      	b.n	8005392 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005360:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005364:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536c:	f7fd fa38 	bl	80027e0 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005374:	f7fd fa34 	bl	80027e0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e200      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005386:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 8005388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d039      	beq.n	8005412 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053a6:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80053ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053b2:	f7fd fa15 	bl	80027e0 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ba:	f7fd fa11 	bl	80027e0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1dd      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053cc:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <HAL_RCC_OscConfig+0x4f8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x4d6>
 80053d8:	e01b      	b.n	8005412 <HAL_RCC_OscConfig+0x52e>
 80053da:	bf00      	nop
 80053dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053e0:	4b9b      	ldr	r3, [pc, #620]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a9a      	ldr	r2, [pc, #616]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80053e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053ec:	f7fd f9f8 	bl	80027e0 <HAL_GetTick>
 80053f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053f4:	f7fd f9f4 	bl	80027e0 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e1c0      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005406:	4b92      	ldr	r3, [pc, #584]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8081 	beq.w	8005522 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005420:	4b8c      	ldr	r3, [pc, #560]	@ (8005654 <HAL_RCC_OscConfig+0x770>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a8b      	ldr	r2, [pc, #556]	@ (8005654 <HAL_RCC_OscConfig+0x770>)
 8005426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800542a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800542c:	f7fd f9d8 	bl	80027e0 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005434:	f7fd f9d4 	bl	80027e0 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	@ 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e1a0      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005446:	4b83      	ldr	r3, [pc, #524]	@ (8005654 <HAL_RCC_OscConfig+0x770>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d106      	bne.n	8005468 <HAL_RCC_OscConfig+0x584>
 800545a:	4b7d      	ldr	r3, [pc, #500]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	4a7c      	ldr	r2, [pc, #496]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	@ 0x70
 8005466:	e02d      	b.n	80054c4 <HAL_RCC_OscConfig+0x5e0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10c      	bne.n	800548a <HAL_RCC_OscConfig+0x5a6>
 8005470:	4b77      	ldr	r3, [pc, #476]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005474:	4a76      	ldr	r2, [pc, #472]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	6713      	str	r3, [r2, #112]	@ 0x70
 800547c:	4b74      	ldr	r3, [pc, #464]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005480:	4a73      	ldr	r2, [pc, #460]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005482:	f023 0304 	bic.w	r3, r3, #4
 8005486:	6713      	str	r3, [r2, #112]	@ 0x70
 8005488:	e01c      	b.n	80054c4 <HAL_RCC_OscConfig+0x5e0>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d10c      	bne.n	80054ac <HAL_RCC_OscConfig+0x5c8>
 8005492:	4b6f      	ldr	r3, [pc, #444]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005496:	4a6e      	ldr	r2, [pc, #440]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005498:	f043 0304 	orr.w	r3, r3, #4
 800549c:	6713      	str	r3, [r2, #112]	@ 0x70
 800549e:	4b6c      	ldr	r3, [pc, #432]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a2:	4a6b      	ldr	r2, [pc, #428]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054aa:	e00b      	b.n	80054c4 <HAL_RCC_OscConfig+0x5e0>
 80054ac:	4b68      	ldr	r3, [pc, #416]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b0:	4a67      	ldr	r2, [pc, #412]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054b8:	4b65      	ldr	r3, [pc, #404]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054bc:	4a64      	ldr	r2, [pc, #400]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054be:	f023 0304 	bic.w	r3, r3, #4
 80054c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d015      	beq.n	80054f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fd f988 	bl	80027e0 <HAL_GetTick>
 80054d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d4:	f7fd f984 	bl	80027e0 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e14e      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ea:	4b59      	ldr	r3, [pc, #356]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0ee      	beq.n	80054d4 <HAL_RCC_OscConfig+0x5f0>
 80054f6:	e014      	b.n	8005522 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7fd f972 	bl	80027e0 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7fd f96e 	bl	80027e0 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e138      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005516:	4b4e      	ldr	r3, [pc, #312]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ee      	bne.n	8005500 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 812d 	beq.w	8005786 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800552c:	4b48      	ldr	r3, [pc, #288]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005534:	2b18      	cmp	r3, #24
 8005536:	f000 80bd 	beq.w	80056b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	2b02      	cmp	r3, #2
 8005540:	f040 809e 	bne.w	8005680 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005544:	4b42      	ldr	r3, [pc, #264]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a41      	ldr	r2, [pc, #260]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd f946 	bl	80027e0 <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7fd f942 	bl	80027e0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e10e      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800556a:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005576:	4b36      	ldr	r3, [pc, #216]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800557a:	4b37      	ldr	r3, [pc, #220]	@ (8005658 <HAL_RCC_OscConfig+0x774>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005586:	0112      	lsls	r2, r2, #4
 8005588:	430a      	orrs	r2, r1
 800558a:	4931      	ldr	r1, [pc, #196]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800558c:	4313      	orrs	r3, r2
 800558e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005594:	3b01      	subs	r3, #1
 8005596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	3b01      	subs	r3, #1
 80055a0:	025b      	lsls	r3, r3, #9
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	3b01      	subs	r3, #1
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b8:	3b01      	subs	r3, #1
 80055ba:	061b      	lsls	r3, r3, #24
 80055bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055c0:	4923      	ldr	r1, [pc, #140]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055c6:	4b22      	ldr	r3, [pc, #136]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	4a21      	ldr	r2, [pc, #132]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d6:	4b21      	ldr	r3, [pc, #132]	@ (800565c <HAL_RCC_OscConfig+0x778>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055de:	00d2      	lsls	r2, r2, #3
 80055e0:	491b      	ldr	r1, [pc, #108]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	f023 020c 	bic.w	r2, r3, #12
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	4917      	ldr	r1, [pc, #92]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055f8:	4b15      	ldr	r3, [pc, #84]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	f023 0202 	bic.w	r2, r3, #2
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	4912      	ldr	r1, [pc, #72]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005606:	4313      	orrs	r3, r2
 8005608:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800560a:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	4a10      	ldr	r2, [pc, #64]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005616:	4b0e      	ldr	r3, [pc, #56]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	4a0d      	ldr	r2, [pc, #52]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800561c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005622:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	4a0a      	ldr	r2, [pc, #40]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800562c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800562e:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	4a07      	ldr	r2, [pc, #28]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800563a:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a04      	ldr	r2, [pc, #16]	@ (8005650 <HAL_RCC_OscConfig+0x76c>)
 8005640:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fd f8cb 	bl	80027e0 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800564c:	e011      	b.n	8005672 <HAL_RCC_OscConfig+0x78e>
 800564e:	bf00      	nop
 8005650:	58024400 	.word	0x58024400
 8005654:	58024800 	.word	0x58024800
 8005658:	fffffc0c 	.word	0xfffffc0c
 800565c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005660:	f7fd f8be 	bl	80027e0 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e08a      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005672:	4b47      	ldr	r3, [pc, #284]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x77c>
 800567e:	e082      	b.n	8005786 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005680:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a42      	ldr	r2, [pc, #264]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fd f8a8 	bl	80027e0 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fd f8a4 	bl	80027e0 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e070      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x7b0>
 80056b2:	e068      	b.n	8005786 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056b4:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056ba:	4b35      	ldr	r3, [pc, #212]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d031      	beq.n	800572c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0203 	and.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d12a      	bne.n	800572c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d122      	bne.n	800572c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d11a      	bne.n	800572c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	0a5b      	lsrs	r3, r3, #9
 80056fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005702:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d111      	bne.n	800572c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	0c1b      	lsrs	r3, r3, #16
 800570c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005714:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d108      	bne.n	800572c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	0e1b      	lsrs	r3, r3, #24
 800571e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e02b      	b.n	8005788 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005730:	4b17      	ldr	r3, [pc, #92]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800573a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d01f      	beq.n	8005786 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005746:	4b12      	ldr	r3, [pc, #72]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	4a11      	ldr	r2, [pc, #68]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005752:	f7fd f845 	bl	80027e0 <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005758:	bf00      	nop
 800575a:	f7fd f841 	bl	80027e0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	4293      	cmp	r3, r2
 8005764:	d0f9      	beq.n	800575a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005766:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <HAL_RCC_OscConfig+0x8b0>)
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005772:	00d2      	lsls	r2, r2, #3
 8005774:	4906      	ldr	r1, [pc, #24]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005776:	4313      	orrs	r3, r2
 8005778:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	4a04      	ldr	r2, [pc, #16]	@ (8005790 <HAL_RCC_OscConfig+0x8ac>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3730      	adds	r7, #48	@ 0x30
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	58024400 	.word	0x58024400
 8005794:	ffff0007 	.word	0xffff0007

08005798 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e19c      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057ac:	4b8a      	ldr	r3, [pc, #552]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d910      	bls.n	80057dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b87      	ldr	r3, [pc, #540]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 020f 	bic.w	r2, r3, #15
 80057c2:	4985      	ldr	r1, [pc, #532]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e184      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d010      	beq.n	800580a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	4b7b      	ldr	r3, [pc, #492]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d908      	bls.n	800580a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057f8:	4b78      	ldr	r3, [pc, #480]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	4975      	ldr	r1, [pc, #468]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005806:	4313      	orrs	r3, r2
 8005808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d010      	beq.n	8005838 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	4b70      	ldr	r3, [pc, #448]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005822:	429a      	cmp	r2, r3
 8005824:	d908      	bls.n	8005838 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005826:	4b6d      	ldr	r3, [pc, #436]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	496a      	ldr	r1, [pc, #424]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005834:	4313      	orrs	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d010      	beq.n	8005866 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	4b64      	ldr	r3, [pc, #400]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005850:	429a      	cmp	r2, r3
 8005852:	d908      	bls.n	8005866 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005854:	4b61      	ldr	r3, [pc, #388]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	495e      	ldr	r1, [pc, #376]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005862:	4313      	orrs	r3, r2
 8005864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800587e:	429a      	cmp	r2, r3
 8005880:	d908      	bls.n	8005894 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005882:	4b56      	ldr	r3, [pc, #344]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4953      	ldr	r1, [pc, #332]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005890:	4313      	orrs	r3, r2
 8005892:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d010      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	4b4d      	ldr	r3, [pc, #308]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d908      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b0:	4b4a      	ldr	r3, [pc, #296]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f023 020f 	bic.w	r2, r3, #15
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4947      	ldr	r1, [pc, #284]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d055      	beq.n	800597a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058ce:	4b43      	ldr	r3, [pc, #268]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	4940      	ldr	r1, [pc, #256]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058e8:	4b3c      	ldr	r3, [pc, #240]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d121      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0f6      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d107      	bne.n	8005910 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005900:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d115      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0ea      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d107      	bne.n	8005928 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005918:	4b30      	ldr	r3, [pc, #192]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0de      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005928:	4b2c      	ldr	r3, [pc, #176]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0d6      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005938:	4b28      	ldr	r3, [pc, #160]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f023 0207 	bic.w	r2, r3, #7
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4925      	ldr	r1, [pc, #148]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005946:	4313      	orrs	r3, r2
 8005948:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fc ff49 	bl	80027e0 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005950:	e00a      	b.n	8005968 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005952:	f7fc ff45 	bl	80027e0 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0be      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005968:	4b1c      	ldr	r3, [pc, #112]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	429a      	cmp	r2, r3
 8005978:	d1eb      	bne.n	8005952 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d010      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	429a      	cmp	r2, r3
 8005994:	d208      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005996:	4b11      	ldr	r3, [pc, #68]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	490e      	ldr	r1, [pc, #56]	@ (80059dc <HAL_RCC_ClockConfig+0x244>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d214      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 020f 	bic.w	r2, r3, #15
 80059be:	4906      	ldr	r1, [pc, #24]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <HAL_RCC_ClockConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d005      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e086      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x34e>
 80059d8:	52002000 	.word	0x52002000
 80059dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	4b3f      	ldr	r3, [pc, #252]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d208      	bcs.n	8005a0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059fc:	4b3c      	ldr	r3, [pc, #240]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	4939      	ldr	r1, [pc, #228]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	4b34      	ldr	r3, [pc, #208]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d208      	bcs.n	8005a3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a2a:	4b31      	ldr	r3, [pc, #196]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	492e      	ldr	r1, [pc, #184]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d010      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699a      	ldr	r2, [r3, #24]
 8005a4c:	4b28      	ldr	r3, [pc, #160]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d208      	bcs.n	8005a6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a58:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	4922      	ldr	r1, [pc, #136]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d010      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d208      	bcs.n	8005a98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a86:	4b1a      	ldr	r3, [pc, #104]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4917      	ldr	r1, [pc, #92]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a98:	f000 f834 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	4912      	ldr	r1, [pc, #72]	@ (8005af4 <HAL_RCC_ClockConfig+0x35c>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <HAL_RCC_ClockConfig+0x358>)
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	4a0d      	ldr	r2, [pc, #52]	@ (8005af4 <HAL_RCC_ClockConfig+0x35c>)
 8005ac0:	5cd3      	ldrb	r3, [r2, r3]
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	4a0a      	ldr	r2, [pc, #40]	@ (8005af8 <HAL_RCC_ClockConfig+0x360>)
 8005ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <HAL_RCC_ClockConfig+0x364>)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <HAL_RCC_ClockConfig+0x368>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc fe36 	bl	800274c <HAL_InitTick>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
 8005af4:	0800ac98 	.word	0x0800ac98
 8005af8:	24000024 	.word	0x24000024
 8005afc:	24000020 	.word	0x24000020
 8005b00:	24000028 	.word	0x24000028

08005b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	@ 0x24
 8005b08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b0a:	4bb3      	ldr	r3, [pc, #716]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b12:	2b18      	cmp	r3, #24
 8005b14:	f200 8155 	bhi.w	8005dc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b18:	a201      	add	r2, pc, #4	@ (adr r2, 8005b20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b85 	.word	0x08005b85
 8005b24:	08005dc3 	.word	0x08005dc3
 8005b28:	08005dc3 	.word	0x08005dc3
 8005b2c:	08005dc3 	.word	0x08005dc3
 8005b30:	08005dc3 	.word	0x08005dc3
 8005b34:	08005dc3 	.word	0x08005dc3
 8005b38:	08005dc3 	.word	0x08005dc3
 8005b3c:	08005dc3 	.word	0x08005dc3
 8005b40:	08005bab 	.word	0x08005bab
 8005b44:	08005dc3 	.word	0x08005dc3
 8005b48:	08005dc3 	.word	0x08005dc3
 8005b4c:	08005dc3 	.word	0x08005dc3
 8005b50:	08005dc3 	.word	0x08005dc3
 8005b54:	08005dc3 	.word	0x08005dc3
 8005b58:	08005dc3 	.word	0x08005dc3
 8005b5c:	08005dc3 	.word	0x08005dc3
 8005b60:	08005bb1 	.word	0x08005bb1
 8005b64:	08005dc3 	.word	0x08005dc3
 8005b68:	08005dc3 	.word	0x08005dc3
 8005b6c:	08005dc3 	.word	0x08005dc3
 8005b70:	08005dc3 	.word	0x08005dc3
 8005b74:	08005dc3 	.word	0x08005dc3
 8005b78:	08005dc3 	.word	0x08005dc3
 8005b7c:	08005dc3 	.word	0x08005dc3
 8005b80:	08005bb7 	.word	0x08005bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b84:	4b94      	ldr	r3, [pc, #592]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b90:	4b91      	ldr	r3, [pc, #580]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	08db      	lsrs	r3, r3, #3
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	4a90      	ldr	r2, [pc, #576]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ba2:	e111      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ba6:	61bb      	str	r3, [r7, #24]
      break;
 8005ba8:	e10e      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005baa:	4b8d      	ldr	r3, [pc, #564]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bac:	61bb      	str	r3, [r7, #24]
      break;
 8005bae:	e10b      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8005de4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005bb2:	61bb      	str	r3, [r7, #24]
      break;
 8005bb4:	e108      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb6:	4b88      	ldr	r3, [pc, #544]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005bc0:	4b85      	ldr	r3, [pc, #532]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bcc:	4b82      	ldr	r3, [pc, #520]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005bd6:	4b80      	ldr	r3, [pc, #512]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80e1 	beq.w	8005dbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f000 8083 	beq.w	8005d08 <HAL_RCC_GetSysClockFreq+0x204>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	f200 80a1 	bhi.w	8005d4c <HAL_RCC_GetSysClockFreq+0x248>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_RCC_GetSysClockFreq+0x114>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d056      	beq.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c16:	e099      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c18:	4b6f      	ldr	r3, [pc, #444]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d02d      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c24:	4b6c      	ldr	r3, [pc, #432]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	08db      	lsrs	r3, r3, #3
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	4a6b      	ldr	r2, [pc, #428]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b62      	ldr	r3, [pc, #392]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c7e:	e087      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005dec <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b51      	ldr	r3, [pc, #324]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cc2:	e065      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b40      	ldr	r3, [pc, #256]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d06:	e043      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005df4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d4a:	e021      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d90:	4b11      	ldr	r3, [pc, #68]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db4:	ee17 3a90 	vmov	r3, s15
 8005db8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005dba:	e005      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
      break;
 8005dc0:	e002      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005dc2:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dc4:	61bb      	str	r3, [r7, #24]
      break;
 8005dc6:	bf00      	nop
  }

  return sysclockfreq;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3724      	adds	r7, #36	@ 0x24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	03d09000 	.word	0x03d09000
 8005de0:	003d0900 	.word	0x003d0900
 8005de4:	016e3600 	.word	0x016e3600
 8005de8:	46000000 	.word	0x46000000
 8005dec:	4c742400 	.word	0x4c742400
 8005df0:	4a742400 	.word	0x4a742400
 8005df4:	4bb71b00 	.word	0x4bb71b00

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dfe:	f7ff fe81 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005e02:	4602      	mov	r2, r0
 8005e04:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	490f      	ldr	r1, [pc, #60]	@ (8005e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e10:	5ccb      	ldrb	r3, [r1, r3]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	4a09      	ldr	r2, [pc, #36]	@ (8005e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e26:	5cd3      	ldrb	r3, [r2, r3]
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e32:	4a07      	ldr	r2, [pc, #28]	@ (8005e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e36:	4a07      	ldr	r2, [pc, #28]	@ (8005e54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e3c:	4b04      	ldr	r3, [pc, #16]	@ (8005e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	0800ac98 	.word	0x0800ac98
 8005e50:	24000024 	.word	0x24000024
 8005e54:	24000020 	.word	0x24000020

08005e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e5c:	f7ff ffcc 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4904      	ldr	r1, [pc, #16]	@ (8005e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	0800ac98 	.word	0x0800ac98

08005e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e88:	f7ff ffb6 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	4904      	ldr	r1, [pc, #16]	@ (8005eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e9a:	5ccb      	ldrb	r3, [r1, r3]
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	58024400 	.word	0x58024400
 8005eac:	0800ac98 	.word	0x0800ac98

08005eb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb4:	b0ca      	sub	sp, #296	@ 0x128
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	ea54 0305 	orrs.w	r3, r4, r5
 8005eda:	d049      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ee2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ee6:	d02f      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ee8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005eec:	d828      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005eee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ef2:	d01a      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ef8:	d822      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f02:	d007      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f04:	e01c      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f06:	4bb8      	ldr	r3, [pc, #736]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0a:	4ab7      	ldr	r2, [pc, #732]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f12:	e01a      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	3308      	adds	r3, #8
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fc8f 	bl	8007840 <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f28:	e00f      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	3328      	adds	r3, #40	@ 0x28
 8005f30:	2102      	movs	r1, #2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fd36 	bl	80079a4 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f52:	4ba5      	ldr	r3, [pc, #660]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f60:	4aa1      	ldr	r2, [pc, #644]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f7c:	f04f 0900 	mov.w	r9, #0
 8005f80:	ea58 0309 	orrs.w	r3, r8, r9
 8005f84:	d047      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d82a      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f90:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fad 	.word	0x08005fad
 8005f9c:	08005fbb 	.word	0x08005fbb
 8005fa0:	08005fd1 	.word	0x08005fd1
 8005fa4:	08005fef 	.word	0x08005fef
 8005fa8:	08005fef 	.word	0x08005fef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fac:	4b8e      	ldr	r3, [pc, #568]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	4a8d      	ldr	r2, [pc, #564]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fb8:	e01a      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 fc3c 	bl	8007840 <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fce:	e00f      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd4:	3328      	adds	r3, #40	@ 0x28
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 fce3 	bl	80079a4 <RCCEx_PLL3_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffc:	f023 0107 	bic.w	r1, r3, #7
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	4a78      	ldr	r2, [pc, #480]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006008:	430b      	orrs	r3, r1
 800600a:	6513      	str	r3, [r2, #80]	@ 0x50
 800600c:	e003      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	ea5a 030b 	orrs.w	r3, sl, fp
 800602a:	d04c      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006036:	d030      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603c:	d829      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800603e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006040:	d02d      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006042:	2bc0      	cmp	r3, #192	@ 0xc0
 8006044:	d825      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006046:	2b80      	cmp	r3, #128	@ 0x80
 8006048:	d018      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d821      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d007      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006056:	e01c      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4b63      	ldr	r3, [pc, #396]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	4a62      	ldr	r2, [pc, #392]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006064:	e01c      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	3308      	adds	r3, #8
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fbe6 	bl	8007840 <RCCEx_PLL2_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800607a:	e011      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006080:	3328      	adds	r3, #40	@ 0x28
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fc8d 	bl	80079a4 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006090:	e006      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800609e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060a8:	4b4f      	ldr	r3, [pc, #316]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b6:	4a4c      	ldr	r2, [pc, #304]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80060d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80060dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d053      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060f2:	d035      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80060f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060f8:	d82e      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80060fe:	d031      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006100:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006104:	d828      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800610a:	d01a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800610c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006110:	d822      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800611a:	d007      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800611c:	e01c      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611e:	4b32      	ldr	r3, [pc, #200]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	4a31      	ldr	r2, [pc, #196]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800612a:	e01c      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	3308      	adds	r3, #8
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f001 fb83 	bl	8007840 <RCCEx_PLL2_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006140:	e011      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	3328      	adds	r3, #40	@ 0x28
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f001 fc2a 	bl	80079a4 <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006156:	e006      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800615e:	e002      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006160:	bf00      	nop
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800616e:	4b1e      	ldr	r3, [pc, #120]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800617e:	4a1a      	ldr	r2, [pc, #104]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6593      	str	r3, [r2, #88]	@ 0x58
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800619a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80061a8:	460b      	mov	r3, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	d056      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80061ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061ba:	d038      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80061bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061c0:	d831      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061c6:	d034      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80061c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061cc:	d82b      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061d2:	d01d      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80061d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061d8:	d825      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d006      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80061de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80061e4:	e01f      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ec:	4ba2      	ldr	r3, [pc, #648]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	4aa1      	ldr	r2, [pc, #644]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061f8:	e01c      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fe:	3308      	adds	r3, #8
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fb1c 	bl	8007840 <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800620e:	e011      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	3328      	adds	r3, #40	@ 0x28
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fbc3 	bl	80079a4 <RCCEx_PLL3_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800622c:	e002      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800622e:	bf00      	nop
 8006230:	e000      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800623c:	4b8e      	ldr	r3, [pc, #568]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800623e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006240:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800624c:	4a8a      	ldr	r2, [pc, #552]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800624e:	430b      	orrs	r3, r1
 8006250:	6593      	str	r3, [r2, #88]	@ 0x58
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006268:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006272:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d03a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006282:	2b30      	cmp	r3, #48	@ 0x30
 8006284:	d01f      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006286:	2b30      	cmp	r3, #48	@ 0x30
 8006288:	d819      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800628a:	2b20      	cmp	r3, #32
 800628c:	d00c      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d815      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d019      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006296:	2b10      	cmp	r3, #16
 8006298:	d111      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629a:	4b77      	ldr	r3, [pc, #476]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	4a76      	ldr	r2, [pc, #472]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80062a6:	e011      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	3308      	adds	r3, #8
 80062ae:	2102      	movs	r1, #2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fac5 	bl	8007840 <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80062bc:	e006      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c4:	e002      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80062ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062d4:	4b68      	ldr	r3, [pc, #416]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e2:	4a65      	ldr	r2, [pc, #404]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062e4:	430b      	orrs	r3, r1
 80062e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062e8:	e003      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006308:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800630c:	460b      	mov	r3, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	d051      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800631c:	d035      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800631e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006322:	d82e      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006324:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006328:	d031      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800632a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800632e:	d828      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006334:	d01a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633a:	d822      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006344:	d007      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006346:	e01c      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4b4b      	ldr	r3, [pc, #300]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	4a4a      	ldr	r2, [pc, #296]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006354:	e01c      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	3308      	adds	r3, #8
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fa6e 	bl	8007840 <RCCEx_PLL2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800636a:	e011      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	3328      	adds	r3, #40	@ 0x28
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fb15 	bl	80079a4 <RCCEx_PLL3_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800638e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006398:	4b37      	ldr	r3, [pc, #220]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	4a34      	ldr	r2, [pc, #208]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80063c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d056      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063e0:	d033      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80063e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063e6:	d82c      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063ec:	d02f      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80063ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063f2:	d826      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063f8:	d02b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80063fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063fe:	d820      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006404:	d012      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800640a:	d81a      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d022      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006414:	d115      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	3308      	adds	r3, #8
 800641c:	2101      	movs	r1, #1
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fa0e 	bl	8007840 <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800642a:	e015      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	3328      	adds	r3, #40	@ 0x28
 8006432:	2101      	movs	r1, #1
 8006434:	4618      	mov	r0, r3
 8006436:	f001 fab5 	bl	80079a4 <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006440:	e00a      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006448:	e006      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800644a:	bf00      	nop
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006460:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006464:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800646e:	4a02      	ldr	r2, [pc, #8]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006470:	430b      	orrs	r3, r1
 8006472:	6513      	str	r3, [r2, #80]	@ 0x50
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800649a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d055      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064b0:	d033      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80064b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064b6:	d82c      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064bc:	d02f      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c2:	d826      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064c8:	d02b      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80064ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064ce:	d820      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064d4:	d012      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80064d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064da:	d81a      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d022      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80064e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064e4:	d115      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	3308      	adds	r3, #8
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 f9a6 	bl	8007840 <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064fa:	e015      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	3328      	adds	r3, #40	@ 0x28
 8006502:	2101      	movs	r1, #1
 8006504:	4618      	mov	r0, r3
 8006506:	f001 fa4d 	bl	80079a4 <RCCEx_PLL3_Config>
 800650a:	4603      	mov	r3, r0
 800650c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006510:	e00a      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006518:	e006      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800651a:	bf00      	nop
 800651c:	e004      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800651e:	bf00      	nop
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006522:	bf00      	nop
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006530:	4ba3      	ldr	r3, [pc, #652]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006534:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006540:	4a9f      	ldr	r2, [pc, #636]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006542:	430b      	orrs	r3, r1
 8006544:	6593      	str	r3, [r2, #88]	@ 0x58
 8006546:	e003      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800655c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d037      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800657a:	d00e      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800657c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006580:	d816      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d018      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800658a:	d111      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800658c:	4b8c      	ldr	r3, [pc, #560]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	4a8b      	ldr	r2, [pc, #556]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006598:	e00f      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	3308      	adds	r3, #8
 80065a0:	2101      	movs	r1, #1
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 f94c 	bl	8007840 <RCCEx_PLL2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80065b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065c2:	4b7f      	ldr	r3, [pc, #508]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d0:	4a7b      	ldr	r2, [pc, #492]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d6:	e003      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80065ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d039      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006606:	2b03      	cmp	r3, #3
 8006608:	d81c      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800660a:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	0800664d 	.word	0x0800664d
 8006614:	08006621 	.word	0x08006621
 8006618:	0800662f 	.word	0x0800662f
 800661c:	0800664d 	.word	0x0800664d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4b67      	ldr	r3, [pc, #412]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	4a66      	ldr	r2, [pc, #408]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800662c:	e00f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	3308      	adds	r3, #8
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f902 	bl	8007840 <RCCEx_PLL2_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006656:	4b5a      	ldr	r3, [pc, #360]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800665a:	f023 0103 	bic.w	r1, r3, #3
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006664:	4a56      	ldr	r2, [pc, #344]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006666:	430b      	orrs	r3, r1
 8006668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006680:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800668a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	f000 809f 	beq.w	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006696:	4b4b      	ldr	r3, [pc, #300]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a4a      	ldr	r2, [pc, #296]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066a2:	f7fc f89d 	bl	80027e0 <HAL_GetTick>
 80066a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ac:	f7fc f898 	bl	80027e0 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b64      	cmp	r3, #100	@ 0x64
 80066ba:	d903      	bls.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066c2:	e005      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c4:	4b3f      	ldr	r3, [pc, #252]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ed      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80066d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d179      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066d8:	4b39      	ldr	r3, [pc, #228]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066e4:	4053      	eors	r3, r2
 80066e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d015      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ee:	4b34      	ldr	r3, [pc, #208]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066fa:	4b31      	ldr	r3, [pc, #196]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fe:	4a30      	ldr	r2, [pc, #192]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006704:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006706:	4b2e      	ldr	r3, [pc, #184]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	4a2d      	ldr	r2, [pc, #180]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800670c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006710:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006712:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006718:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006726:	d118      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006728:	f7fc f85a 	bl	80027e0 <HAL_GetTick>
 800672c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006730:	e00d      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fc f855 	bl	80027e0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006742:	429a      	cmp	r2, r3
 8006744:	d903      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800674c:	e005      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800674e:	4b1c      	ldr	r3, [pc, #112]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0eb      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675e:	2b00      	cmp	r3, #0
 8006760:	d129      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800676a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800676e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006772:	d10e      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006774:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006784:	091a      	lsrs	r2, r3, #4
 8006786:	4b10      	ldr	r3, [pc, #64]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006788:	4013      	ands	r3, r2
 800678a:	4a0d      	ldr	r2, [pc, #52]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800678c:	430b      	orrs	r3, r1
 800678e:	6113      	str	r3, [r2, #16]
 8006790:	e005      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4a0a      	ldr	r2, [pc, #40]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006798:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800679c:	6113      	str	r3, [r2, #16]
 800679e:	4b08      	ldr	r3, [pc, #32]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ae:	4a04      	ldr	r2, [pc, #16]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b4:	e00e      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80067be:	e009      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80067c0:	58024400 	.word	0x58024400
 80067c4:	58024800 	.word	0x58024800
 80067c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f002 0301 	and.w	r3, r2, #1
 80067e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067e4:	2300      	movs	r3, #0
 80067e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f000 8089 	beq.w	8006908 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067fc:	2b28      	cmp	r3, #40	@ 0x28
 80067fe:	d86b      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006800:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	080068e1 	.word	0x080068e1
 800680c:	080068d9 	.word	0x080068d9
 8006810:	080068d9 	.word	0x080068d9
 8006814:	080068d9 	.word	0x080068d9
 8006818:	080068d9 	.word	0x080068d9
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068ad 	.word	0x080068ad
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068d9 	.word	0x080068d9
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068c3 	.word	0x080068c3
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068d9 	.word	0x080068d9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068d9 	.word	0x080068d9
 800685c:	080068d9 	.word	0x080068d9
 8006860:	080068d9 	.word	0x080068d9
 8006864:	080068d9 	.word	0x080068d9
 8006868:	080068e1 	.word	0x080068e1
 800686c:	080068d9 	.word	0x080068d9
 8006870:	080068d9 	.word	0x080068d9
 8006874:	080068d9 	.word	0x080068d9
 8006878:	080068d9 	.word	0x080068d9
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068d9 	.word	0x080068d9
 8006894:	080068d9 	.word	0x080068d9
 8006898:	080068d9 	.word	0x080068d9
 800689c:	080068d9 	.word	0x080068d9
 80068a0:	080068d9 	.word	0x080068d9
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068e1 	.word	0x080068e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b0:	3308      	adds	r3, #8
 80068b2:	2101      	movs	r1, #1
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 ffc3 	bl	8007840 <RCCEx_PLL2_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068c0:	e00f      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	3328      	adds	r3, #40	@ 0x28
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 f86a 	bl	80079a4 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068d6:	e004      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068ea:	4bbf      	ldr	r3, [pc, #764]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068f8:	4abb      	ldr	r2, [pc, #748]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80068fe:	e003      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f002 0302 	and.w	r3, r2, #2
 8006914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800691e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006922:	460b      	mov	r3, r1
 8006924:	4313      	orrs	r3, r2
 8006926:	d041      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800692e:	2b05      	cmp	r3, #5
 8006930:	d824      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006932:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006985 	.word	0x08006985
 800693c:	08006951 	.word	0x08006951
 8006940:	08006967 	.word	0x08006967
 8006944:	08006985 	.word	0x08006985
 8006948:	08006985 	.word	0x08006985
 800694c:	08006985 	.word	0x08006985
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006954:	3308      	adds	r3, #8
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f000 ff71 	bl	8007840 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006964:	e00f      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696a:	3328      	adds	r3, #40	@ 0x28
 800696c:	2101      	movs	r1, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f001 f818 	bl	80079a4 <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800697a:	e004      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800698e:	4b96      	ldr	r3, [pc, #600]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	f023 0107 	bic.w	r1, r3, #7
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800699c:	4a92      	ldr	r2, [pc, #584]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800699e:	430b      	orrs	r3, r1
 80069a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f002 0304 	and.w	r3, r2, #4
 80069b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4313      	orrs	r3, r2
 80069ca:	d044      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	d825      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	08006a2d 	.word	0x08006a2d
 80069e4:	080069f9 	.word	0x080069f9
 80069e8:	08006a0f 	.word	0x08006a0f
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a2d 	.word	0x08006a2d
 80069f4:	08006a2d 	.word	0x08006a2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fc:	3308      	adds	r3, #8
 80069fe:	2101      	movs	r1, #1
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 ff1d 	bl	8007840 <RCCEx_PLL2_Config>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a0c:	e00f      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	3328      	adds	r3, #40	@ 0x28
 8006a14:	2101      	movs	r1, #1
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 ffc4 	bl	80079a4 <RCCEx_PLL3_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a22:	e004      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a36:	4b6c      	ldr	r3, [pc, #432]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3a:	f023 0107 	bic.w	r1, r3, #7
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a46:	4a68      	ldr	r2, [pc, #416]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a4c:	e003      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f002 0320 	and.w	r3, r2, #32
 8006a62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a66:	2300      	movs	r3, #0
 8006a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d055      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a82:	d033      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a88:	d82c      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8e:	d02f      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a94:	d826      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a9a:	d02b      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006a9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006aa0:	d820      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa6:	d012      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aac:	d81a      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d022      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ab6:	d115      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	3308      	adds	r3, #8
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 febd 	bl	8007840 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006acc:	e015      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	3328      	adds	r3, #40	@ 0x28
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 ff64 	bl	80079a4 <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ae2:	e00a      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aea:	e006      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006aec:	bf00      	nop
 8006aee:	e004      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10b      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b02:	4b39      	ldr	r3, [pc, #228]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b12:	4a35      	ldr	r2, [pc, #212]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b14:	430b      	orrs	r3, r1
 8006b16:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b18:	e003      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b32:	2300      	movs	r3, #0
 8006b34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d058      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b4a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b4e:	d033      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006b50:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b54:	d82c      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5a:	d02f      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b60:	d826      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b66:	d02b      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006b68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b6c:	d820      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b72:	d012      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b78:	d81a      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d022      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b82:	d115      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	3308      	adds	r3, #8
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fe57 	bl	8007840 <RCCEx_PLL2_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b98:	e015      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	3328      	adds	r3, #40	@ 0x28
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fefe 	bl	80079a4 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bae:	e00a      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bb6:	e006      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e004      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10e      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bce:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bde:	4a02      	ldr	r2, [pc, #8]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006be6:	bf00      	nop
 8006be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d055      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c20:	d033      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006c22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c26:	d82c      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c2c:	d02f      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c32:	d826      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c38:	d02b      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006c3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c3e:	d820      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c44:	d012      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c4a:	d81a      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d022      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c54:	d115      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fdee 	bl	8007840 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c6a:	e015      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	3328      	adds	r3, #40	@ 0x28
 8006c72:	2102      	movs	r1, #2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fe95 	bl	80079a4 <RCCEx_PLL3_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c80:	e00a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c88:	e006      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ca0:	4ba1      	ldr	r3, [pc, #644]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cb0:	4a9d      	ldr	r2, [pc, #628]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cb6:	e003      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f002 0308 	and.w	r3, r2, #8
 8006ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d01e      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	3328      	adds	r3, #40	@ 0x28
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fe54 	bl	80079a4 <RCCEx_PLL3_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d08:	4b87      	ldr	r3, [pc, #540]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d18:	4a83      	ldr	r2, [pc, #524]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f002 0310 	and.w	r3, r2, #16
 8006d2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	d01e      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4a:	d10c      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d50:	3328      	adds	r3, #40	@ 0x28
 8006d52:	2102      	movs	r1, #2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fe25 	bl	80079a4 <RCCEx_PLL3_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d66:	4b70      	ldr	r3, [pc, #448]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d76:	4a6c      	ldr	r2, [pc, #432]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d92:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d03e      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006da8:	d022      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dae:	d81b      	bhi.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db8:	d00b      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006dba:	e015      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fd3b 	bl	8007840 <RCCEx_PLL2_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dd0:	e00f      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd6:	3328      	adds	r3, #40	@ 0x28
 8006dd8:	2102      	movs	r1, #2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fde2 	bl	80079a4 <RCCEx_PLL3_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006de6:	e004      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dee:	e000      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e0a:	4a47      	ldr	r2, [pc, #284]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e10:	e003      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006e26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e28:	2300      	movs	r3, #0
 8006e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e30:	460b      	mov	r3, r1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	d03b      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e42:	d01f      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006e44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e48:	d818      	bhi.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006e50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e54:	d007      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006e56:	e011      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e58:	4b33      	ldr	r3, [pc, #204]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	4a32      	ldr	r2, [pc, #200]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e64:	e00f      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	3328      	adds	r3, #40	@ 0x28
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fd98 	bl	80079a4 <RCCEx_PLL3_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e7a:	e004      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e8e:	4b26      	ldr	r3, [pc, #152]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9e:	4a22      	ldr	r2, [pc, #136]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006eba:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ec0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	d034      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d007      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006eda:	e011      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006edc:	4b12      	ldr	r3, [pc, #72]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	4a11      	ldr	r2, [pc, #68]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00e      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fca4 	bl	8007840 <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006efe:	e003      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f10:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1e:	4a02      	ldr	r2, [pc, #8]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f24:	e006      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f42:	2300      	movs	r3, #0
 8006f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	d00c      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f54:	3328      	adds	r3, #40	@ 0x28
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fd23 	bl	80079a4 <RCCEx_PLL3_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f76:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f78:	2300      	movs	r3, #0
 8006f7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f80:	460b      	mov	r3, r1
 8006f82:	4313      	orrs	r3, r2
 8006f84:	d038      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f92:	d018      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f98:	d811      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9e:	d014      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa4:	d80b      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d011      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fae:	d106      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb0:	4bc3      	ldr	r3, [pc, #780]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	4ac2      	ldr	r2, [pc, #776]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc4:	e004      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fd8:	4bb9      	ldr	r3, [pc, #740]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fdc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe8:	4ab5      	ldr	r2, [pc, #724]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fee:	e003      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007006:	2300      	movs	r3, #0
 8007008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800700a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800700e:	460b      	mov	r3, r1
 8007010:	4313      	orrs	r3, r2
 8007012:	d009      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007014:	4baa      	ldr	r3, [pc, #680]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007018:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007022:	4aa7      	ldr	r2, [pc, #668]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007024:	430b      	orrs	r3, r1
 8007026:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007034:	653b      	str	r3, [r7, #80]	@ 0x50
 8007036:	2300      	movs	r3, #0
 8007038:	657b      	str	r3, [r7, #84]	@ 0x54
 800703a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800703e:	460b      	mov	r3, r1
 8007040:	4313      	orrs	r3, r2
 8007042:	d00a      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007044:	4b9e      	ldr	r3, [pc, #632]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007050:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007054:	4a9a      	ldr	r2, [pc, #616]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007056:	430b      	orrs	r3, r1
 8007058:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007068:	2300      	movs	r3, #0
 800706a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800706c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007070:	460b      	mov	r3, r1
 8007072:	4313      	orrs	r3, r2
 8007074:	d009      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007076:	4b92      	ldr	r3, [pc, #584]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007084:	4a8e      	ldr	r2, [pc, #568]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007086:	430b      	orrs	r3, r1
 8007088:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007096:	643b      	str	r3, [r7, #64]	@ 0x40
 8007098:	2300      	movs	r3, #0
 800709a:	647b      	str	r3, [r7, #68]	@ 0x44
 800709c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80070a0:	460b      	mov	r3, r1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070a6:	4b86      	ldr	r3, [pc, #536]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	4a85      	ldr	r2, [pc, #532]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070b0:	6113      	str	r3, [r2, #16]
 80070b2:	4b83      	ldr	r3, [pc, #524]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070b4:	6919      	ldr	r1, [r3, #16]
 80070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070be:	4a80      	ldr	r2, [pc, #512]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80070d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070d2:	2300      	movs	r3, #0
 80070d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80070da:	460b      	mov	r3, r1
 80070dc:	4313      	orrs	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070e0:	4b77      	ldr	r3, [pc, #476]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ee:	4a74      	ldr	r2, [pc, #464]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070f0:	430b      	orrs	r3, r1
 80070f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007100:	633b      	str	r3, [r7, #48]	@ 0x30
 8007102:	2300      	movs	r3, #0
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
 8007106:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d00a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007110:	4b6b      	ldr	r3, [pc, #428]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007114:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007120:	4a67      	ldr	r2, [pc, #412]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007122:	430b      	orrs	r3, r1
 8007124:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	2100      	movs	r1, #0
 8007130:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007138:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800713c:	460b      	mov	r3, r1
 800713e:	4313      	orrs	r3, r2
 8007140:	d011      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	3308      	adds	r3, #8
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fb78 	bl	8007840 <RCCEx_PLL2_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	2100      	movs	r1, #0
 8007170:	6239      	str	r1, [r7, #32]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
 8007178:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800717c:	460b      	mov	r3, r1
 800717e:	4313      	orrs	r3, r2
 8007180:	d011      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007186:	3308      	adds	r3, #8
 8007188:	2101      	movs	r1, #1
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fb58 	bl	8007840 <RCCEx_PLL2_Config>
 8007190:	4603      	mov	r3, r0
 8007192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	2100      	movs	r1, #0
 80071b0:	61b9      	str	r1, [r7, #24]
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d011      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c6:	3308      	adds	r3, #8
 80071c8:	2102      	movs	r1, #2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fb38 	bl	8007840 <RCCEx_PLL2_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80071d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	2100      	movs	r1, #0
 80071f0:	6139      	str	r1, [r7, #16]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071fc:	460b      	mov	r3, r1
 80071fe:	4313      	orrs	r3, r2
 8007200:	d011      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	3328      	adds	r3, #40	@ 0x28
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fbca 	bl	80079a4 <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	2100      	movs	r1, #0
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800723c:	460b      	mov	r3, r1
 800723e:	4313      	orrs	r3, r2
 8007240:	d011      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	3328      	adds	r3, #40	@ 0x28
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fbaa 	bl	80079a4 <RCCEx_PLL3_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	2100      	movs	r1, #0
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	e9d7 1200 	ldrd	r1, r2, [r7]
 800727c:	460b      	mov	r3, r1
 800727e:	4313      	orrs	r3, r2
 8007280:	d011      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	3328      	adds	r3, #40	@ 0x28
 8007288:	2102      	movs	r1, #2
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fb8a 	bl	80079a4 <RCCEx_PLL3_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80072a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e000      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80072ba:	46bd      	mov	sp, r7
 80072bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072c0:	58024400 	.word	0x58024400

080072c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072c8:	f7fe fd96 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b06      	ldr	r3, [pc, #24]	@ (80072e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	091b      	lsrs	r3, r3, #4
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	4904      	ldr	r1, [pc, #16]	@ (80072ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072da:	5ccb      	ldrb	r3, [r1, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	58024400 	.word	0x58024400
 80072ec:	0800ac98 	.word	0x0800ac98

080072f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b089      	sub	sp, #36	@ 0x24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072f8:	4ba1      	ldr	r3, [pc, #644]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007302:	4b9f      	ldr	r3, [pc, #636]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	0b1b      	lsrs	r3, r3, #12
 8007308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800730c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800730e:	4b9c      	ldr	r3, [pc, #624]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800731a:	4b99      	ldr	r3, [pc, #612]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731e:	08db      	lsrs	r3, r3, #3
 8007320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8111 	beq.w	8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b02      	cmp	r3, #2
 8007342:	f000 8083 	beq.w	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b02      	cmp	r3, #2
 800734a:	f200 80a1 	bhi.w	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d056      	beq.n	8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800735a:	e099      	b.n	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800735c:	4b88      	ldr	r3, [pc, #544]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d02d      	beq.n	80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007368:	4b85      	ldr	r3, [pc, #532]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	08db      	lsrs	r3, r3, #3
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	4a84      	ldr	r2, [pc, #528]	@ (8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
 8007378:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007392:	4b7b      	ldr	r3, [pc, #492]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073c2:	e087      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800758c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007406:	e065      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741a:	4b59      	ldr	r3, [pc, #356]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742a:	ed97 6a03 	vldr	s12, [r7, #12]
 800742e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800743e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800744a:	e043      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800745a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745e:	4b48      	ldr	r3, [pc, #288]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007472:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800748e:	e021      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800749e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a2:	4b37      	ldr	r3, [pc, #220]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d8:	0a5b      	lsrs	r3, r3, #9
 80074da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fa:	ee17 2a90 	vmov	r2, s15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007502:	4b1f      	ldr	r3, [pc, #124]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007528:	ee17 2a90 	vmov	r2, s15
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007530:	4b13      	ldr	r3, [pc, #76]	@ (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800754a:	edd7 6a07 	vldr	s13, [r7, #28]
 800754e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007556:	ee17 2a90 	vmov	r2, s15
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800755e:	e008      	b.n	8007572 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	609a      	str	r2, [r3, #8]
}
 8007572:	bf00      	nop
 8007574:	3724      	adds	r7, #36	@ 0x24
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
 8007584:	03d09000 	.word	0x03d09000
 8007588:	46000000 	.word	0x46000000
 800758c:	4c742400 	.word	0x4c742400
 8007590:	4a742400 	.word	0x4a742400
 8007594:	4bb71b00 	.word	0x4bb71b00

08007598 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007598:	b480      	push	{r7}
 800759a:	b089      	sub	sp, #36	@ 0x24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a0:	4ba1      	ldr	r3, [pc, #644]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075aa:	4b9f      	ldr	r3, [pc, #636]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	0d1b      	lsrs	r3, r3, #20
 80075b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075b6:	4b9c      	ldr	r3, [pc, #624]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075c2:	4b99      	ldr	r3, [pc, #612]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8111 	beq.w	8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	f000 8083 	beq.w	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f200 80a1 	bhi.w	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d056      	beq.n	80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007602:	e099      	b.n	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007604:	4b88      	ldr	r3, [pc, #544]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02d      	beq.n	800766c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007610:	4b85      	ldr	r3, [pc, #532]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	08db      	lsrs	r3, r3, #3
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	4a84      	ldr	r2, [pc, #528]	@ (800782c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
 8007620:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b7b      	ldr	r3, [pc, #492]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a03 	vldr	s12, [r7, #12]
 800764e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800766a:	e087      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b6a      	ldr	r3, [pc, #424]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007692:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ae:	e065      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c2:	4b59      	ldr	r3, [pc, #356]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076f2:	e043      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800783c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007706:	4b48      	ldr	r3, [pc, #288]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a03 	vldr	s12, [r7, #12]
 800771a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007736:	e021      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	4b37      	ldr	r3, [pc, #220]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775a:	ed97 6a03 	vldr	s12, [r7, #12]
 800775e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800776e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800777a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800777c:	4b2a      	ldr	r3, [pc, #168]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007796:	edd7 6a07 	vldr	s13, [r7, #28]
 800779a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a2:	ee17 2a90 	vmov	r2, s15
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d0:	ee17 2a90 	vmov	r2, s15
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077d8:	4b13      	ldr	r3, [pc, #76]	@ (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077dc:	0e1b      	lsrs	r3, r3, #24
 80077de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fe:	ee17 2a90 	vmov	r2, s15
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007806:	e008      	b.n	800781a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	609a      	str	r2, [r3, #8]
}
 800781a:	bf00      	nop
 800781c:	3724      	adds	r7, #36	@ 0x24
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	58024400 	.word	0x58024400
 800782c:	03d09000 	.word	0x03d09000
 8007830:	46000000 	.word	0x46000000
 8007834:	4c742400 	.word	0x4c742400
 8007838:	4a742400 	.word	0x4a742400
 800783c:	4bb71b00 	.word	0x4bb71b00

08007840 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800784e:	4b53      	ldr	r3, [pc, #332]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d101      	bne.n	800785e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e099      	b.n	8007992 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800785e:	4b4f      	ldr	r3, [pc, #316]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a4e      	ldr	r2, [pc, #312]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007864:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786a:	f7fa ffb9 	bl	80027e0 <HAL_GetTick>
 800786e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007870:	e008      	b.n	8007884 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007872:	f7fa ffb5 	bl	80027e0 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e086      	b.n	8007992 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007884:	4b45      	ldr	r3, [pc, #276]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007890:	4b42      	ldr	r3, [pc, #264]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	493f      	ldr	r1, [pc, #252]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	025b      	lsls	r3, r3, #9
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	3b01      	subs	r3, #1
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	061b      	lsls	r3, r3, #24
 80078d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078d4:	4931      	ldr	r1, [pc, #196]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80078da:	4b30      	ldr	r3, [pc, #192]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	492d      	ldr	r1, [pc, #180]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80078ec:	4b2b      	ldr	r3, [pc, #172]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	f023 0220 	bic.w	r2, r3, #32
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	4928      	ldr	r1, [pc, #160]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078fe:	4b27      	ldr	r3, [pc, #156]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007902:	4a26      	ldr	r2, [pc, #152]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007904:	f023 0310 	bic.w	r3, r3, #16
 8007908:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800790a:	4b24      	ldr	r3, [pc, #144]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 800790c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800790e:	4b24      	ldr	r3, [pc, #144]	@ (80079a0 <RCCEx_PLL2_Config+0x160>)
 8007910:	4013      	ands	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	69d2      	ldr	r2, [r2, #28]
 8007916:	00d2      	lsls	r2, r2, #3
 8007918:	4920      	ldr	r1, [pc, #128]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 800791a:	4313      	orrs	r3, r2
 800791c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800791e:	4b1f      	ldr	r3, [pc, #124]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	4a1e      	ldr	r2, [pc, #120]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007924:	f043 0310 	orr.w	r3, r3, #16
 8007928:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007930:	4b1a      	ldr	r3, [pc, #104]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	4a19      	ldr	r2, [pc, #100]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007936:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800793a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800793c:	e00f      	b.n	800795e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d106      	bne.n	8007952 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007944:	4b15      	ldr	r3, [pc, #84]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	4a14      	ldr	r2, [pc, #80]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 800794a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800794e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007950:	e005      	b.n	800795e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007952:	4b12      	ldr	r3, [pc, #72]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	4a11      	ldr	r2, [pc, #68]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800795c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800795e:	4b0f      	ldr	r3, [pc, #60]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a0e      	ldr	r2, [pc, #56]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007964:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796a:	f7fa ff39 	bl	80027e0 <HAL_GetTick>
 800796e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007970:	e008      	b.n	8007984 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007972:	f7fa ff35 	bl	80027e0 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d901      	bls.n	8007984 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e006      	b.n	8007992 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <RCCEx_PLL2_Config+0x15c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0f0      	beq.n	8007972 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	58024400 	.word	0x58024400
 80079a0:	ffff0007 	.word	0xffff0007

080079a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079b2:	4b53      	ldr	r3, [pc, #332]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d101      	bne.n	80079c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e099      	b.n	8007af6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80079c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fa ff07 	bl	80027e0 <HAL_GetTick>
 80079d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079d6:	f7fa ff03 	bl	80027e0 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e086      	b.n	8007af6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079e8:	4b45      	ldr	r3, [pc, #276]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079f4:	4b42      	ldr	r3, [pc, #264]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	051b      	lsls	r3, r3, #20
 8007a02:	493f      	ldr	r1, [pc, #252]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	025b      	lsls	r3, r3, #9
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	041b      	lsls	r3, r3, #16
 8007a26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a38:	4931      	ldr	r1, [pc, #196]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a3e:	4b30      	ldr	r3, [pc, #192]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	492d      	ldr	r1, [pc, #180]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a50:	4b2b      	ldr	r3, [pc, #172]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	4928      	ldr	r1, [pc, #160]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a62:	4b27      	ldr	r3, [pc, #156]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a66:	4a26      	ldr	r2, [pc, #152]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a6e:	4b24      	ldr	r3, [pc, #144]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a72:	4b24      	ldr	r3, [pc, #144]	@ (8007b04 <RCCEx_PLL3_Config+0x160>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	69d2      	ldr	r2, [r2, #28]
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	4920      	ldr	r1, [pc, #128]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a82:	4b1f      	ldr	r3, [pc, #124]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	4a1e      	ldr	r2, [pc, #120]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a94:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	4a19      	ldr	r2, [pc, #100]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007aa0:	e00f      	b.n	8007ac2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007aa8:	4b15      	ldr	r3, [pc, #84]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	4a14      	ldr	r2, [pc, #80]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007aae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ab4:	e005      	b.n	8007ac2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ab6:	4b12      	ldr	r3, [pc, #72]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	4a11      	ldr	r2, [pc, #68]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7fa fe87 	bl	80027e0 <HAL_GetTick>
 8007ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ad4:	e008      	b.n	8007ae8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ad6:	f7fa fe83 	bl	80027e0 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e006      	b.n	8007af6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ae8:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	58024400 	.word	0x58024400
 8007b04:	ffff0007 	.word	0xffff0007

08007b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e049      	b.n	8007bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fa f8e0 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f000 fd50 	bl	80085ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d001      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e054      	b.n	8007c7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a26      	ldr	r2, [pc, #152]	@ (8007c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d022      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfa:	d01d      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a22      	ldr	r2, [pc, #136]	@ (8007c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d018      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a21      	ldr	r2, [pc, #132]	@ (8007c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d013      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1f      	ldr	r2, [pc, #124]	@ (8007c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00e      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c98 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d009      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <HAL_TIM_Base_Start_IT+0xe4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d004      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d115      	bne.n	8007c64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <HAL_TIM_Base_Start_IT+0xec>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b06      	cmp	r3, #6
 8007c48:	d015      	beq.n	8007c76 <HAL_TIM_Base_Start_IT+0xbe>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c50:	d011      	beq.n	8007c76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	e008      	b.n	8007c76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0201 	orr.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e000      	b.n	8007c78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40010400 	.word	0x40010400
 8007c9c:	40001800 	.word	0x40001800
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	00010007 	.word	0x00010007

08007ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e049      	b.n	8007d4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fa f912 	bl	8001ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f000 fc80 	bl	80085ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <HAL_TIM_PWM_Start+0x24>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	bf14      	ite	ne
 8007d74:	2301      	movne	r3, #1
 8007d76:	2300      	moveq	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	e03c      	b.n	8007df6 <HAL_TIM_PWM_Start+0x9e>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d109      	bne.n	8007d96 <HAL_TIM_PWM_Start+0x3e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	bf14      	ite	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	2300      	moveq	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	e02f      	b.n	8007df6 <HAL_TIM_PWM_Start+0x9e>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d109      	bne.n	8007db0 <HAL_TIM_PWM_Start+0x58>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	bf14      	ite	ne
 8007da8:	2301      	movne	r3, #1
 8007daa:	2300      	moveq	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	e022      	b.n	8007df6 <HAL_TIM_PWM_Start+0x9e>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b0c      	cmp	r3, #12
 8007db4:	d109      	bne.n	8007dca <HAL_TIM_PWM_Start+0x72>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	bf14      	ite	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	2300      	moveq	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	e015      	b.n	8007df6 <HAL_TIM_PWM_Start+0x9e>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b10      	cmp	r3, #16
 8007dce:	d109      	bne.n	8007de4 <HAL_TIM_PWM_Start+0x8c>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf14      	ite	ne
 8007ddc:	2301      	movne	r3, #1
 8007dde:	2300      	moveq	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e008      	b.n	8007df6 <HAL_TIM_PWM_Start+0x9e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e0a1      	b.n	8007f42 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_PWM_Start+0xb6>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e0c:	e023      	b.n	8007e56 <HAL_TIM_PWM_Start+0xfe>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_PWM_Start+0xc6>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e1c:	e01b      	b.n	8007e56 <HAL_TIM_PWM_Start+0xfe>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_PWM_Start+0xd6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e2c:	e013      	b.n	8007e56 <HAL_TIM_PWM_Start+0xfe>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b0c      	cmp	r3, #12
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_PWM_Start+0xe6>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e3c:	e00b      	b.n	8007e56 <HAL_TIM_PWM_Start+0xfe>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_PWM_Start+0xf6>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e4c:	e003      	b.n	8007e56 <HAL_TIM_PWM_Start+0xfe>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 ffde 	bl	8008e20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a38      	ldr	r2, [pc, #224]	@ (8007f4c <HAL_TIM_PWM_Start+0x1f4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d013      	beq.n	8007e96 <HAL_TIM_PWM_Start+0x13e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a37      	ldr	r2, [pc, #220]	@ (8007f50 <HAL_TIM_PWM_Start+0x1f8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00e      	beq.n	8007e96 <HAL_TIM_PWM_Start+0x13e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a35      	ldr	r2, [pc, #212]	@ (8007f54 <HAL_TIM_PWM_Start+0x1fc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d009      	beq.n	8007e96 <HAL_TIM_PWM_Start+0x13e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a34      	ldr	r2, [pc, #208]	@ (8007f58 <HAL_TIM_PWM_Start+0x200>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d004      	beq.n	8007e96 <HAL_TIM_PWM_Start+0x13e>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a32      	ldr	r2, [pc, #200]	@ (8007f5c <HAL_TIM_PWM_Start+0x204>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_PWM_Start+0x142>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <HAL_TIM_PWM_Start+0x144>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007eae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a25      	ldr	r2, [pc, #148]	@ (8007f4c <HAL_TIM_PWM_Start+0x1f4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d022      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec2:	d01d      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a25      	ldr	r2, [pc, #148]	@ (8007f60 <HAL_TIM_PWM_Start+0x208>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d018      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a24      	ldr	r2, [pc, #144]	@ (8007f64 <HAL_TIM_PWM_Start+0x20c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d013      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a22      	ldr	r2, [pc, #136]	@ (8007f68 <HAL_TIM_PWM_Start+0x210>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00e      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <HAL_TIM_PWM_Start+0x1f8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d009      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8007f6c <HAL_TIM_PWM_Start+0x214>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d004      	beq.n	8007f00 <HAL_TIM_PWM_Start+0x1a8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a16      	ldr	r2, [pc, #88]	@ (8007f54 <HAL_TIM_PWM_Start+0x1fc>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d115      	bne.n	8007f2c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <HAL_TIM_PWM_Start+0x218>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b06      	cmp	r3, #6
 8007f10:	d015      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x1e6>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f18:	d011      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0201 	orr.w	r2, r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2a:	e008      	b.n	8007f3e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	e000      	b.n	8007f40 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40010000 	.word	0x40010000
 8007f50:	40010400 	.word	0x40010400
 8007f54:	40014000 	.word	0x40014000
 8007f58:	40014400 	.word	0x40014400
 8007f5c:	40014800 	.word	0x40014800
 8007f60:	40000400 	.word	0x40000400
 8007f64:	40000800 	.word	0x40000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	40001800 	.word	0x40001800
 8007f70:	00010007 	.word	0x00010007

08007f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d020      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f06f 0202 	mvn.w	r2, #2
 8007fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 faf6 	bl	80085b0 <HAL_TIM_IC_CaptureCallback>
 8007fc4:	e005      	b.n	8007fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fae8 	bl	800859c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 faf9 	bl	80085c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d020      	beq.n	8008024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0204 	mvn.w	r2, #4
 8007ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fad0 	bl	80085b0 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fac2 	bl	800859c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fad3 	bl	80085c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d020      	beq.n	8008070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0208 	mvn.w	r2, #8
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 faaa 	bl	80085b0 <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa9c 	bl	800859c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 faad 	bl	80085c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0210 	mvn.w	r2, #16
 800808c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2208      	movs	r2, #8
 8008092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa84 	bl	80085b0 <HAL_TIM_IC_CaptureCallback>
 80080a8:	e005      	b.n	80080b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa76 	bl	800859c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa87 	bl	80085c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00c      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d007      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0201 	mvn.w	r2, #1
 80080d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f9 fbb4 	bl	8001848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00c      	beq.n	800810e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 ffc5 	bl	8009098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00c      	beq.n	8008132 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800812a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 ffbd 	bl	80090ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00c      	beq.n	8008156 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800814e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fa41 	bl	80085d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f06f 0220 	mvn.w	r2, #32
 8008172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 ff85 	bl	8009084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800819e:	2302      	movs	r3, #2
 80081a0:	e0ff      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b14      	cmp	r3, #20
 80081ae:	f200 80f0 	bhi.w	8008392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80081b2:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	08008393 	.word	0x08008393
 80081c0:	08008393 	.word	0x08008393
 80081c4:	08008393 	.word	0x08008393
 80081c8:	0800824d 	.word	0x0800824d
 80081cc:	08008393 	.word	0x08008393
 80081d0:	08008393 	.word	0x08008393
 80081d4:	08008393 	.word	0x08008393
 80081d8:	0800828f 	.word	0x0800828f
 80081dc:	08008393 	.word	0x08008393
 80081e0:	08008393 	.word	0x08008393
 80081e4:	08008393 	.word	0x08008393
 80081e8:	080082cf 	.word	0x080082cf
 80081ec:	08008393 	.word	0x08008393
 80081f0:	08008393 	.word	0x08008393
 80081f4:	08008393 	.word	0x08008393
 80081f8:	08008311 	.word	0x08008311
 80081fc:	08008393 	.word	0x08008393
 8008200:	08008393 	.word	0x08008393
 8008204:	08008393 	.word	0x08008393
 8008208:	08008351 	.word	0x08008351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fa90 	bl	8008738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0208 	orr.w	r2, r2, #8
 8008226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0204 	bic.w	r2, r2, #4
 8008236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6999      	ldr	r1, [r3, #24]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691a      	ldr	r2, [r3, #16]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	619a      	str	r2, [r3, #24]
      break;
 800824a:	e0a5      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fb00 	bl	8008858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6999      	ldr	r1, [r3, #24]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	021a      	lsls	r2, r3, #8
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	619a      	str	r2, [r3, #24]
      break;
 800828c:	e084      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fb69 	bl	800896c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0208 	orr.w	r2, r2, #8
 80082a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0204 	bic.w	r2, r2, #4
 80082b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69d9      	ldr	r1, [r3, #28]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	61da      	str	r2, [r3, #28]
      break;
 80082cc:	e064      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fbd1 	bl	8008a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69da      	ldr	r2, [r3, #28]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69d9      	ldr	r1, [r3, #28]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	021a      	lsls	r2, r3, #8
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	61da      	str	r2, [r3, #28]
      break;
 800830e:	e043      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fc1a 	bl	8008b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0208 	orr.w	r2, r2, #8
 800832a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0204 	bic.w	r2, r2, #4
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800834e:	e023      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fc5e 	bl	8008c18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800836a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800837a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	021a      	lsls	r2, r3, #8
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008390:	e002      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
      break;
 8008396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIM_ConfigClockSource+0x1c>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0dc      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x1d6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	4b6a      	ldr	r3, [pc, #424]	@ (800858c <HAL_TIM_ConfigClockSource+0x1e0>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a64      	ldr	r2, [pc, #400]	@ (8008590 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f000 80a9 	beq.w	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 8008404:	4a62      	ldr	r2, [pc, #392]	@ (8008590 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	f200 80ae 	bhi.w	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 800840c:	4a61      	ldr	r2, [pc, #388]	@ (8008594 <HAL_TIM_ConfigClockSource+0x1e8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	f000 80a1 	beq.w	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 8008414:	4a5f      	ldr	r2, [pc, #380]	@ (8008594 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f200 80a6 	bhi.w	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 800841c:	4a5e      	ldr	r2, [pc, #376]	@ (8008598 <HAL_TIM_ConfigClockSource+0x1ec>)
 800841e:	4293      	cmp	r3, r2
 8008420:	f000 8099 	beq.w	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 8008424:	4a5c      	ldr	r2, [pc, #368]	@ (8008598 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008426:	4293      	cmp	r3, r2
 8008428:	f200 809e 	bhi.w	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 800842c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008430:	f000 8091 	beq.w	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 8008434:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008438:	f200 8096 	bhi.w	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 800843c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008440:	f000 8089 	beq.w	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 8008444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008448:	f200 808e 	bhi.w	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 800844c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008450:	d03e      	beq.n	80084d0 <HAL_TIM_ConfigClockSource+0x124>
 8008452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008456:	f200 8087 	bhi.w	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 800845a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800845e:	f000 8086 	beq.w	800856e <HAL_TIM_ConfigClockSource+0x1c2>
 8008462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008466:	d87f      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008468:	2b70      	cmp	r3, #112	@ 0x70
 800846a:	d01a      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0xf6>
 800846c:	2b70      	cmp	r3, #112	@ 0x70
 800846e:	d87b      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008470:	2b60      	cmp	r3, #96	@ 0x60
 8008472:	d050      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x16a>
 8008474:	2b60      	cmp	r3, #96	@ 0x60
 8008476:	d877      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008478:	2b50      	cmp	r3, #80	@ 0x50
 800847a:	d03c      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0x14a>
 800847c:	2b50      	cmp	r3, #80	@ 0x50
 800847e:	d873      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008480:	2b40      	cmp	r3, #64	@ 0x40
 8008482:	d058      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x18a>
 8008484:	2b40      	cmp	r3, #64	@ 0x40
 8008486:	d86f      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008488:	2b30      	cmp	r3, #48	@ 0x30
 800848a:	d064      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 800848c:	2b30      	cmp	r3, #48	@ 0x30
 800848e:	d86b      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008490:	2b20      	cmp	r3, #32
 8008492:	d060      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 8008494:	2b20      	cmp	r3, #32
 8008496:	d867      	bhi.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d05c      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 800849c:	2b10      	cmp	r3, #16
 800849e:	d05a      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0x1aa>
 80084a0:	e062      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084b2:	f000 fc95 	bl	8008de0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	609a      	str	r2, [r3, #8]
      break;
 80084ce:	e04f      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084e0:	f000 fc7e 	bl	8008de0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084f2:	609a      	str	r2, [r3, #8]
      break;
 80084f4:	e03c      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008502:	461a      	mov	r2, r3
 8008504:	f000 fbee 	bl	8008ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2150      	movs	r1, #80	@ 0x50
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fc48 	bl	8008da4 <TIM_ITRx_SetConfig>
      break;
 8008514:	e02c      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008522:	461a      	mov	r2, r3
 8008524:	f000 fc0d 	bl	8008d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2160      	movs	r1, #96	@ 0x60
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fc38 	bl	8008da4 <TIM_ITRx_SetConfig>
      break;
 8008534:	e01c      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008542:	461a      	mov	r2, r3
 8008544:	f000 fbce 	bl	8008ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2140      	movs	r1, #64	@ 0x40
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fc28 	bl	8008da4 <TIM_ITRx_SetConfig>
      break;
 8008554:	e00c      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f000 fc1f 	bl	8008da4 <TIM_ITRx_SetConfig>
      break;
 8008566:	e003      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
      break;
 800856c:	e000      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800856e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	ffceff88 	.word	0xffceff88
 8008590:	00100040 	.word	0x00100040
 8008594:	00100030 	.word	0x00100030
 8008598:	00100020 	.word	0x00100020

0800859c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a46      	ldr	r2, [pc, #280]	@ (8008718 <TIM_Base_SetConfig+0x12c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860a:	d00f      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a43      	ldr	r2, [pc, #268]	@ (800871c <TIM_Base_SetConfig+0x130>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00b      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a42      	ldr	r2, [pc, #264]	@ (8008720 <TIM_Base_SetConfig+0x134>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d007      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a41      	ldr	r2, [pc, #260]	@ (8008724 <TIM_Base_SetConfig+0x138>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a40      	ldr	r2, [pc, #256]	@ (8008728 <TIM_Base_SetConfig+0x13c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d108      	bne.n	800863e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a35      	ldr	r2, [pc, #212]	@ (8008718 <TIM_Base_SetConfig+0x12c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01f      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864c:	d01b      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a32      	ldr	r2, [pc, #200]	@ (800871c <TIM_Base_SetConfig+0x130>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d017      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a31      	ldr	r2, [pc, #196]	@ (8008720 <TIM_Base_SetConfig+0x134>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a30      	ldr	r2, [pc, #192]	@ (8008724 <TIM_Base_SetConfig+0x138>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00f      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a2f      	ldr	r2, [pc, #188]	@ (8008728 <TIM_Base_SetConfig+0x13c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00b      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a2e      	ldr	r2, [pc, #184]	@ (800872c <TIM_Base_SetConfig+0x140>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a2d      	ldr	r2, [pc, #180]	@ (8008730 <TIM_Base_SetConfig+0x144>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d003      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a2c      	ldr	r2, [pc, #176]	@ (8008734 <TIM_Base_SetConfig+0x148>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d108      	bne.n	8008698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a16      	ldr	r2, [pc, #88]	@ (8008718 <TIM_Base_SetConfig+0x12c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00f      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a18      	ldr	r2, [pc, #96]	@ (8008728 <TIM_Base_SetConfig+0x13c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00b      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a17      	ldr	r2, [pc, #92]	@ (800872c <TIM_Base_SetConfig+0x140>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d007      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a16      	ldr	r2, [pc, #88]	@ (8008730 <TIM_Base_SetConfig+0x144>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a15      	ldr	r2, [pc, #84]	@ (8008734 <TIM_Base_SetConfig+0x148>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d103      	bne.n	80086ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d105      	bne.n	800870a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f023 0201 	bic.w	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	611a      	str	r2, [r3, #16]
  }
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40010000 	.word	0x40010000
 800871c:	40000400 	.word	0x40000400
 8008720:	40000800 	.word	0x40000800
 8008724:	40000c00 	.word	0x40000c00
 8008728:	40010400 	.word	0x40010400
 800872c:	40014000 	.word	0x40014000
 8008730:	40014400 	.word	0x40014400
 8008734:	40014800 	.word	0x40014800

08008738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	f023 0201 	bic.w	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4b37      	ldr	r3, [pc, #220]	@ (8008840 <TIM_OC1_SetConfig+0x108>)
 8008764:	4013      	ands	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f023 0302 	bic.w	r3, r3, #2
 8008780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a2d      	ldr	r2, [pc, #180]	@ (8008844 <TIM_OC1_SetConfig+0x10c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00f      	beq.n	80087b4 <TIM_OC1_SetConfig+0x7c>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a2c      	ldr	r2, [pc, #176]	@ (8008848 <TIM_OC1_SetConfig+0x110>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00b      	beq.n	80087b4 <TIM_OC1_SetConfig+0x7c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a2b      	ldr	r2, [pc, #172]	@ (800884c <TIM_OC1_SetConfig+0x114>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d007      	beq.n	80087b4 <TIM_OC1_SetConfig+0x7c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008850 <TIM_OC1_SetConfig+0x118>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d003      	beq.n	80087b4 <TIM_OC1_SetConfig+0x7c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a29      	ldr	r2, [pc, #164]	@ (8008854 <TIM_OC1_SetConfig+0x11c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d10c      	bne.n	80087ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f023 0308 	bic.w	r3, r3, #8
 80087ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f023 0304 	bic.w	r3, r3, #4
 80087cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008844 <TIM_OC1_SetConfig+0x10c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_OC1_SetConfig+0xbe>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008848 <TIM_OC1_SetConfig+0x110>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_OC1_SetConfig+0xbe>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a1a      	ldr	r2, [pc, #104]	@ (800884c <TIM_OC1_SetConfig+0x114>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_OC1_SetConfig+0xbe>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a19      	ldr	r2, [pc, #100]	@ (8008850 <TIM_OC1_SetConfig+0x118>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC1_SetConfig+0xbe>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a18      	ldr	r2, [pc, #96]	@ (8008854 <TIM_OC1_SetConfig+0x11c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d111      	bne.n	800881a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	fffeff8f 	.word	0xfffeff8f
 8008844:	40010000 	.word	0x40010000
 8008848:	40010400 	.word	0x40010400
 800884c:	40014000 	.word	0x40014000
 8008850:	40014400 	.word	0x40014400
 8008854:	40014800 	.word	0x40014800

08008858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f023 0210 	bic.w	r2, r3, #16
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4b34      	ldr	r3, [pc, #208]	@ (8008954 <TIM_OC2_SetConfig+0xfc>)
 8008884:	4013      	ands	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800888e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f023 0320 	bic.w	r3, r3, #32
 80088a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a29      	ldr	r2, [pc, #164]	@ (8008958 <TIM_OC2_SetConfig+0x100>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_OC2_SetConfig+0x68>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a28      	ldr	r2, [pc, #160]	@ (800895c <TIM_OC2_SetConfig+0x104>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d10d      	bne.n	80088dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a1e      	ldr	r2, [pc, #120]	@ (8008958 <TIM_OC2_SetConfig+0x100>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00f      	beq.n	8008904 <TIM_OC2_SetConfig+0xac>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a1d      	ldr	r2, [pc, #116]	@ (800895c <TIM_OC2_SetConfig+0x104>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00b      	beq.n	8008904 <TIM_OC2_SetConfig+0xac>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008960 <TIM_OC2_SetConfig+0x108>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_OC2_SetConfig+0xac>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008964 <TIM_OC2_SetConfig+0x10c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC2_SetConfig+0xac>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008968 <TIM_OC2_SetConfig+0x110>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d113      	bne.n	800892c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800890a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	621a      	str	r2, [r3, #32]
}
 8008946:	bf00      	nop
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	feff8fff 	.word	0xfeff8fff
 8008958:	40010000 	.word	0x40010000
 800895c:	40010400 	.word	0x40010400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800

0800896c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4b33      	ldr	r3, [pc, #204]	@ (8008a64 <TIM_OC3_SetConfig+0xf8>)
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a28      	ldr	r2, [pc, #160]	@ (8008a68 <TIM_OC3_SetConfig+0xfc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC3_SetConfig+0x66>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a27      	ldr	r2, [pc, #156]	@ (8008a6c <TIM_OC3_SetConfig+0x100>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d10d      	bne.n	80089ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	021b      	lsls	r3, r3, #8
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a68 <TIM_OC3_SetConfig+0xfc>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00f      	beq.n	8008a16 <TIM_OC3_SetConfig+0xaa>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a6c <TIM_OC3_SetConfig+0x100>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00b      	beq.n	8008a16 <TIM_OC3_SetConfig+0xaa>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a1b      	ldr	r2, [pc, #108]	@ (8008a70 <TIM_OC3_SetConfig+0x104>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <TIM_OC3_SetConfig+0xaa>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a1a      	ldr	r2, [pc, #104]	@ (8008a74 <TIM_OC3_SetConfig+0x108>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d003      	beq.n	8008a16 <TIM_OC3_SetConfig+0xaa>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a19      	ldr	r2, [pc, #100]	@ (8008a78 <TIM_OC3_SetConfig+0x10c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d113      	bne.n	8008a3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	011b      	lsls	r3, r3, #4
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	621a      	str	r2, [r3, #32]
}
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	fffeff8f 	.word	0xfffeff8f
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40010400 	.word	0x40010400
 8008a70:	40014000 	.word	0x40014000
 8008a74:	40014400 	.word	0x40014400
 8008a78:	40014800 	.word	0x40014800

08008a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <TIM_OC4_SetConfig+0xbc>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	031b      	lsls	r3, r3, #12
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a19      	ldr	r2, [pc, #100]	@ (8008b3c <TIM_OC4_SetConfig+0xc0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00f      	beq.n	8008afc <TIM_OC4_SetConfig+0x80>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a18      	ldr	r2, [pc, #96]	@ (8008b40 <TIM_OC4_SetConfig+0xc4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00b      	beq.n	8008afc <TIM_OC4_SetConfig+0x80>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a17      	ldr	r2, [pc, #92]	@ (8008b44 <TIM_OC4_SetConfig+0xc8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_OC4_SetConfig+0x80>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a16      	ldr	r2, [pc, #88]	@ (8008b48 <TIM_OC4_SetConfig+0xcc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_OC4_SetConfig+0x80>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a15      	ldr	r2, [pc, #84]	@ (8008b4c <TIM_OC4_SetConfig+0xd0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d109      	bne.n	8008b10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	621a      	str	r2, [r3, #32]
}
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	feff8fff 	.word	0xfeff8fff
 8008b3c:	40010000 	.word	0x40010000
 8008b40:	40010400 	.word	0x40010400
 8008b44:	40014000 	.word	0x40014000
 8008b48:	40014400 	.word	0x40014400
 8008b4c:	40014800 	.word	0x40014800

08008b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4b21      	ldr	r3, [pc, #132]	@ (8008c00 <TIM_OC5_SetConfig+0xb0>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a18      	ldr	r2, [pc, #96]	@ (8008c04 <TIM_OC5_SetConfig+0xb4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x76>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a17      	ldr	r2, [pc, #92]	@ (8008c08 <TIM_OC5_SetConfig+0xb8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x76>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a16      	ldr	r2, [pc, #88]	@ (8008c0c <TIM_OC5_SetConfig+0xbc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x76>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a15      	ldr	r2, [pc, #84]	@ (8008c10 <TIM_OC5_SetConfig+0xc0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x76>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a14      	ldr	r2, [pc, #80]	@ (8008c14 <TIM_OC5_SetConfig+0xc4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d109      	bne.n	8008bda <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	621a      	str	r2, [r3, #32]
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	fffeff8f 	.word	0xfffeff8f
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40010400 	.word	0x40010400
 8008c0c:	40014000 	.word	0x40014000
 8008c10:	40014400 	.word	0x40014400
 8008c14:	40014800 	.word	0x40014800

08008c18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4b22      	ldr	r3, [pc, #136]	@ (8008ccc <TIM_OC6_SetConfig+0xb4>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	051b      	lsls	r3, r3, #20
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a19      	ldr	r2, [pc, #100]	@ (8008cd0 <TIM_OC6_SetConfig+0xb8>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00f      	beq.n	8008c90 <TIM_OC6_SetConfig+0x78>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a18      	ldr	r2, [pc, #96]	@ (8008cd4 <TIM_OC6_SetConfig+0xbc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d00b      	beq.n	8008c90 <TIM_OC6_SetConfig+0x78>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a17      	ldr	r2, [pc, #92]	@ (8008cd8 <TIM_OC6_SetConfig+0xc0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d007      	beq.n	8008c90 <TIM_OC6_SetConfig+0x78>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a16      	ldr	r2, [pc, #88]	@ (8008cdc <TIM_OC6_SetConfig+0xc4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d003      	beq.n	8008c90 <TIM_OC6_SetConfig+0x78>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a15      	ldr	r2, [pc, #84]	@ (8008ce0 <TIM_OC6_SetConfig+0xc8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d109      	bne.n	8008ca4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	feff8fff 	.word	0xfeff8fff
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400
 8008cd8:	40014000 	.word	0x40014000
 8008cdc:	40014400 	.word	0x40014400
 8008ce0:	40014800 	.word	0x40014800

08008ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f023 0201 	bic.w	r2, r3, #1
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f023 030a 	bic.w	r3, r3, #10
 8008d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	621a      	str	r2, [r3, #32]
}
 8008d36:	bf00      	nop
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b087      	sub	sp, #28
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f023 0210 	bic.w	r2, r3, #16
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	031b      	lsls	r3, r3, #12
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	621a      	str	r2, [r3, #32]
}
 8008d96:	bf00      	nop
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4b09      	ldr	r3, [pc, #36]	@ (8008ddc <TIM_ITRx_SetConfig+0x38>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	f043 0307 	orr.w	r3, r3, #7
 8008dc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	609a      	str	r2, [r3, #8]
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	ffcfff8f 	.word	0xffcfff8f

08008de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	021a      	lsls	r2, r3, #8
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	609a      	str	r2, [r3, #8]
}
 8008e14:	bf00      	nop
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	2201      	movs	r2, #1
 8008e34:	fa02 f303 	lsl.w	r3, r2, r3
 8008e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1a      	ldr	r2, [r3, #32]
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	43db      	mvns	r3, r3
 8008e42:	401a      	ands	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a1a      	ldr	r2, [r3, #32]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	fa01 f303 	lsl.w	r3, r1, r3
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	621a      	str	r2, [r3, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e06d      	b.n	8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a30      	ldr	r2, [pc, #192]	@ (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d108      	bne.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a20      	ldr	r2, [pc, #128]	@ (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d022      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef6:	d01d      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1d      	ldr	r2, [pc, #116]	@ (8008f74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d018      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1c      	ldr	r2, [pc, #112]	@ (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1a      	ldr	r2, [pc, #104]	@ (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00e      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a15      	ldr	r2, [pc, #84]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d009      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a16      	ldr	r2, [pc, #88]	@ (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d004      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a15      	ldr	r2, [pc, #84]	@ (8008f84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d10c      	bne.n	8008f4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	40010000 	.word	0x40010000
 8008f70:	40010400 	.word	0x40010400
 8008f74:	40000400 	.word	0x40000400
 8008f78:	40000800 	.word	0x40000800
 8008f7c:	40000c00 	.word	0x40000c00
 8008f80:	40001800 	.word	0x40001800
 8008f84:	40014000 	.word	0x40014000

08008f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e065      	b.n	8009070 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	041b      	lsls	r3, r3, #16
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a16      	ldr	r2, [pc, #88]	@ (800907c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d004      	beq.n	8009032 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a14      	ldr	r2, [pc, #80]	@ (8009080 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d115      	bne.n	800905e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	051b      	lsls	r3, r3, #20
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	40010000 	.word	0x40010000
 8009080:	40010400 	.word	0x40010400

08009084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e042      	b.n	8009158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7f9 f927 	bl	8002338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2224      	movs	r2, #36	@ 0x24
 80090ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f9f8 	bl	800a500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fc8d 	bl	8009a30 <UART_SetConfig>
 8009116:	4603      	mov	r3, r0
 8009118:	2b01      	cmp	r3, #1
 800911a:	d101      	bne.n	8009120 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e01b      	b.n	8009158 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800912e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800913e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 fa77 	bl	800a644 <UART_CheckIdleState>
 8009156:	4603      	mov	r3, r0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	@ 0x28
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	4613      	mov	r3, r2
 800916e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009176:	2b20      	cmp	r3, #32
 8009178:	d17b      	bne.n	8009272 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <HAL_UART_Transmit+0x26>
 8009180:	88fb      	ldrh	r3, [r7, #6]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e074      	b.n	8009274 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2221      	movs	r2, #33	@ 0x21
 8009196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800919a:	f7f9 fb21 	bl	80027e0 <HAL_GetTick>
 800919e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091b8:	d108      	bne.n	80091cc <HAL_UART_Transmit+0x6c>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e003      	b.n	80091d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091d4:	e030      	b.n	8009238 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2200      	movs	r2, #0
 80091de:	2180      	movs	r1, #128	@ 0x80
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f001 fad9 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e03d      	b.n	8009274 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800920c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	3302      	adds	r3, #2
 8009212:	61bb      	str	r3, [r7, #24]
 8009214:	e007      	b.n	8009226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	781a      	ldrb	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	3301      	adds	r3, #1
 8009224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800923e:	b29b      	uxth	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1c8      	bne.n	80091d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2200      	movs	r2, #0
 800924c:	2140      	movs	r1, #64	@ 0x40
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f001 faa2 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e006      	b.n	8009274 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e000      	b.n	8009274 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009272:	2302      	movs	r3, #2
  }
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b0ba      	sub	sp, #232	@ 0xe8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80092a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80092aa:	4013      	ands	r3, r2
 80092ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80092b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11b      	bne.n	80092f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d015      	beq.n	80092f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d105      	bne.n	80092dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8377 	beq.w	80099d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
      }
      return;
 80092ee:	e371      	b.n	80099d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8123 	beq.w	8009540 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009534 <HAL_UART_IRQHandler+0x2b8>)
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009306:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800930a:	4b8b      	ldr	r3, [pc, #556]	@ (8009538 <HAL_UART_IRQHandler+0x2bc>)
 800930c:	4013      	ands	r3, r2
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8116 	beq.w	8009540 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d011      	beq.n	8009344 <HAL_UART_IRQHandler+0xc8>
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2201      	movs	r2, #1
 8009332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933a:	f043 0201 	orr.w	r2, r3, #1
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <HAL_UART_IRQHandler+0xf8>
 8009350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2202      	movs	r2, #2
 8009362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936a:	f043 0204 	orr.w	r2, r3, #4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d011      	beq.n	80093a4 <HAL_UART_IRQHandler+0x128>
 8009380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2204      	movs	r2, #4
 8009392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939a:	f043 0202 	orr.w	r2, r3, #2
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d017      	beq.n	80093e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093c0:	4b5c      	ldr	r3, [pc, #368]	@ (8009534 <HAL_UART_IRQHandler+0x2b8>)
 80093c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2208      	movs	r2, #8
 80093ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d6:	f043 0208 	orr.w	r2, r3, #8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d012      	beq.n	8009412 <HAL_UART_IRQHandler+0x196>
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009408:	f043 0220 	orr.w	r2, r3, #32
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 82dd 	beq.w	80099d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800941e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d013      	beq.n	8009452 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800942a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d105      	bne.n	8009442 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800943a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009458:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009466:	2b40      	cmp	r3, #64	@ 0x40
 8009468:	d005      	beq.n	8009476 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800946a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800946e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009472:	2b00      	cmp	r3, #0
 8009474:	d054      	beq.n	8009520 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 f9fc 	bl	800a874 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d146      	bne.n	8009518 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3308      	adds	r3, #8
 80094b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1d9      	bne.n	800948a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d017      	beq.n	8009510 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094e6:	4a15      	ldr	r2, [pc, #84]	@ (800953c <HAL_UART_IRQHandler+0x2c0>)
 80094e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f9 fe33 	bl	800315c <HAL_DMA_Abort_IT>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d019      	beq.n	8009530 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800950a:	4610      	mov	r0, r2
 800950c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950e:	e00f      	b.n	8009530 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fa77 	bl	8009a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009516:	e00b      	b.n	8009530 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa73 	bl	8009a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951e:	e007      	b.n	8009530 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fa6f 	bl	8009a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800952e:	e253      	b.n	80099d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009530:	bf00      	nop
    return;
 8009532:	e251      	b.n	80099d8 <HAL_UART_IRQHandler+0x75c>
 8009534:	10000001 	.word	0x10000001
 8009538:	04000120 	.word	0x04000120
 800953c:	0800a941 	.word	0x0800a941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009544:	2b01      	cmp	r3, #1
 8009546:	f040 81e7 	bne.w	8009918 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800954a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954e:	f003 0310 	and.w	r3, r3, #16
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 81e0 	beq.w	8009918 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800955c:	f003 0310 	and.w	r3, r3, #16
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 81d9 	beq.w	8009918 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2210      	movs	r2, #16
 800956c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009578:	2b40      	cmp	r3, #64	@ 0x40
 800957a:	f040 8151 	bne.w	8009820 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a96      	ldr	r2, [pc, #600]	@ (80097e0 <HAL_UART_IRQHandler+0x564>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d068      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a93      	ldr	r2, [pc, #588]	@ (80097e4 <HAL_UART_IRQHandler+0x568>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d061      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a91      	ldr	r2, [pc, #580]	@ (80097e8 <HAL_UART_IRQHandler+0x56c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d05a      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a8e      	ldr	r2, [pc, #568]	@ (80097ec <HAL_UART_IRQHandler+0x570>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d053      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a8c      	ldr	r2, [pc, #560]	@ (80097f0 <HAL_UART_IRQHandler+0x574>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d04c      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a89      	ldr	r2, [pc, #548]	@ (80097f4 <HAL_UART_IRQHandler+0x578>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d045      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a87      	ldr	r2, [pc, #540]	@ (80097f8 <HAL_UART_IRQHandler+0x57c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d03e      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a84      	ldr	r2, [pc, #528]	@ (80097fc <HAL_UART_IRQHandler+0x580>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d037      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a82      	ldr	r2, [pc, #520]	@ (8009800 <HAL_UART_IRQHandler+0x584>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d030      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a7f      	ldr	r2, [pc, #508]	@ (8009804 <HAL_UART_IRQHandler+0x588>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d029      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a7d      	ldr	r2, [pc, #500]	@ (8009808 <HAL_UART_IRQHandler+0x58c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d022      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a7a      	ldr	r2, [pc, #488]	@ (800980c <HAL_UART_IRQHandler+0x590>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d01b      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a78      	ldr	r2, [pc, #480]	@ (8009810 <HAL_UART_IRQHandler+0x594>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d014      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a75      	ldr	r2, [pc, #468]	@ (8009814 <HAL_UART_IRQHandler+0x598>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00d      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a73      	ldr	r2, [pc, #460]	@ (8009818 <HAL_UART_IRQHandler+0x59c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d006      	beq.n	800965e <HAL_UART_IRQHandler+0x3e2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a70      	ldr	r2, [pc, #448]	@ (800981c <HAL_UART_IRQHandler+0x5a0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d106      	bne.n	800966c <HAL_UART_IRQHandler+0x3f0>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	b29b      	uxth	r3, r3
 800966a:	e005      	b.n	8009678 <HAL_UART_IRQHandler+0x3fc>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	b29b      	uxth	r3, r3
 8009678:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800967c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 81ab 	beq.w	80099dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800968c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009690:	429a      	cmp	r2, r3
 8009692:	f080 81a3 	bcs.w	80099dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800969c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ac:	f000 8087 	beq.w	80097be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1da      	bne.n	80096b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3308      	adds	r3, #8
 8009700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800970a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800970c:	f023 0301 	bic.w	r3, r3, #1
 8009710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3308      	adds	r3, #8
 800971a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800971e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009722:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e1      	bne.n	80096fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800974c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800975a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800975c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009760:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e3      	bne.n	8009736 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800978a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800978c:	f023 0310 	bic.w	r3, r3, #16
 8009790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800979e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e4      	bne.n	800977c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7f9 f9b1 	bl	8002b20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2202      	movs	r2, #2
 80097c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f91d 	bl	8009a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097de:	e0fd      	b.n	80099dc <HAL_UART_IRQHandler+0x760>
 80097e0:	40020010 	.word	0x40020010
 80097e4:	40020028 	.word	0x40020028
 80097e8:	40020040 	.word	0x40020040
 80097ec:	40020058 	.word	0x40020058
 80097f0:	40020070 	.word	0x40020070
 80097f4:	40020088 	.word	0x40020088
 80097f8:	400200a0 	.word	0x400200a0
 80097fc:	400200b8 	.word	0x400200b8
 8009800:	40020410 	.word	0x40020410
 8009804:	40020428 	.word	0x40020428
 8009808:	40020440 	.word	0x40020440
 800980c:	40020458 	.word	0x40020458
 8009810:	40020470 	.word	0x40020470
 8009814:	40020488 	.word	0x40020488
 8009818:	400204a0 	.word	0x400204a0
 800981c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800982c:	b29b      	uxth	r3, r3
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800983a:	b29b      	uxth	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80cf 	beq.w	80099e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 80ca 	beq.w	80099e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800985a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	461a      	mov	r2, r3
 800986a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800986e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009870:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800987c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e4      	bne.n	800984c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	623b      	str	r3, [r7, #32]
   return(result);
 8009892:	6a3a      	ldr	r2, [r7, #32]
 8009894:	4b55      	ldr	r3, [pc, #340]	@ (80099ec <HAL_UART_IRQHandler+0x770>)
 8009896:	4013      	ands	r3, r2
 8009898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3308      	adds	r3, #8
 80098a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80098a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80098a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e3      	bne.n	8009882 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2220      	movs	r2, #32
 80098be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	60fb      	str	r3, [r7, #12]
   return(result);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0310 	bic.w	r3, r3, #16
 80098e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	69b9      	ldr	r1, [r7, #24]
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	617b      	str	r3, [r7, #20]
   return(result);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e4      	bne.n	80098ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2202      	movs	r2, #2
 8009908:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800990a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f881 	bl	8009a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009916:	e063      	b.n	80099e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00e      	beq.n	8009942 <HAL_UART_IRQHandler+0x6c6>
 8009924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 f841 	bl	800a9c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009940:	e051      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800994a:	2b00      	cmp	r3, #0
 800994c:	d014      	beq.n	8009978 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800994e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009956:	2b00      	cmp	r3, #0
 8009958:	d105      	bne.n	8009966 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800995a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800995e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800996a:	2b00      	cmp	r3, #0
 800996c:	d03a      	beq.n	80099e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3
    }
    return;
 8009976:	e035      	b.n	80099e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800997c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d009      	beq.n	8009998 <HAL_UART_IRQHandler+0x71c>
 8009984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 ffeb 	bl	800a96c <UART_EndTransmit_IT>
    return;
 8009996:	e026      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d009      	beq.n	80099b8 <HAL_UART_IRQHandler+0x73c>
 80099a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 f81a 	bl	800a9ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099b6:	e016      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80099b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d010      	beq.n	80099e6 <HAL_UART_IRQHandler+0x76a>
 80099c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	da0c      	bge.n	80099e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f001 f802 	bl	800a9d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099d2:	e008      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80099d4:	bf00      	nop
 80099d6:	e006      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80099d8:	bf00      	nop
 80099da:	e004      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80099dc:	bf00      	nop
 80099de:	e002      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80099e4:	bf00      	nop
  }
}
 80099e6:	37e8      	adds	r7, #232	@ 0xe8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	effffffe 	.word	0xeffffffe

080099f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a34:	b092      	sub	sp, #72	@ 0x48
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	4bbe      	ldr	r3, [pc, #760]	@ (8009d58 <UART_SetConfig+0x328>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4ab3      	ldr	r2, [pc, #716]	@ (8009d5c <UART_SetConfig+0x32c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d004      	beq.n	8009a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	4baf      	ldr	r3, [pc, #700]	@ (8009d60 <UART_SetConfig+0x330>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	f023 010f 	bic.w	r1, r3, #15
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4aa6      	ldr	r2, [pc, #664]	@ (8009d64 <UART_SetConfig+0x334>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d177      	bne.n	8009bc0 <UART_SetConfig+0x190>
 8009ad0:	4ba5      	ldr	r3, [pc, #660]	@ (8009d68 <UART_SetConfig+0x338>)
 8009ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ad8:	2b28      	cmp	r3, #40	@ 0x28
 8009ada:	d86d      	bhi.n	8009bb8 <UART_SetConfig+0x188>
 8009adc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <UART_SetConfig+0xb4>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009b89 	.word	0x08009b89
 8009ae8:	08009bb9 	.word	0x08009bb9
 8009aec:	08009bb9 	.word	0x08009bb9
 8009af0:	08009bb9 	.word	0x08009bb9
 8009af4:	08009bb9 	.word	0x08009bb9
 8009af8:	08009bb9 	.word	0x08009bb9
 8009afc:	08009bb9 	.word	0x08009bb9
 8009b00:	08009bb9 	.word	0x08009bb9
 8009b04:	08009b91 	.word	0x08009b91
 8009b08:	08009bb9 	.word	0x08009bb9
 8009b0c:	08009bb9 	.word	0x08009bb9
 8009b10:	08009bb9 	.word	0x08009bb9
 8009b14:	08009bb9 	.word	0x08009bb9
 8009b18:	08009bb9 	.word	0x08009bb9
 8009b1c:	08009bb9 	.word	0x08009bb9
 8009b20:	08009bb9 	.word	0x08009bb9
 8009b24:	08009b99 	.word	0x08009b99
 8009b28:	08009bb9 	.word	0x08009bb9
 8009b2c:	08009bb9 	.word	0x08009bb9
 8009b30:	08009bb9 	.word	0x08009bb9
 8009b34:	08009bb9 	.word	0x08009bb9
 8009b38:	08009bb9 	.word	0x08009bb9
 8009b3c:	08009bb9 	.word	0x08009bb9
 8009b40:	08009bb9 	.word	0x08009bb9
 8009b44:	08009ba1 	.word	0x08009ba1
 8009b48:	08009bb9 	.word	0x08009bb9
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009bb9 	.word	0x08009bb9
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	08009bb9 	.word	0x08009bb9
 8009b60:	08009bb9 	.word	0x08009bb9
 8009b64:	08009ba9 	.word	0x08009ba9
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009bb9 	.word	0x08009bb9
 8009b70:	08009bb9 	.word	0x08009bb9
 8009b74:	08009bb9 	.word	0x08009bb9
 8009b78:	08009bb9 	.word	0x08009bb9
 8009b7c:	08009bb9 	.word	0x08009bb9
 8009b80:	08009bb9 	.word	0x08009bb9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e222      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e21e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e21a      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e216      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e212      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009bb0:	2340      	movs	r3, #64	@ 0x40
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e20e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009bb8:	2380      	movs	r3, #128	@ 0x80
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	e20a      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a69      	ldr	r2, [pc, #420]	@ (8009d6c <UART_SetConfig+0x33c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d130      	bne.n	8009c2c <UART_SetConfig+0x1fc>
 8009bca:	4b67      	ldr	r3, [pc, #412]	@ (8009d68 <UART_SetConfig+0x338>)
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d826      	bhi.n	8009c24 <UART_SetConfig+0x1f4>
 8009bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bdc <UART_SetConfig+0x1ac>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009bf5 	.word	0x08009bf5
 8009be0:	08009bfd 	.word	0x08009bfd
 8009be4:	08009c05 	.word	0x08009c05
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009c15 	.word	0x08009c15
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e1ec      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e1e8      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e1e4      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c12:	e1e0      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e1dc      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c1c:	2340      	movs	r3, #64	@ 0x40
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e1d8      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c24:	2380      	movs	r3, #128	@ 0x80
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e1d4      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a4f      	ldr	r2, [pc, #316]	@ (8009d70 <UART_SetConfig+0x340>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d130      	bne.n	8009c98 <UART_SetConfig+0x268>
 8009c36:	4b4c      	ldr	r3, [pc, #304]	@ (8009d68 <UART_SetConfig+0x338>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d826      	bhi.n	8009c90 <UART_SetConfig+0x260>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <UART_SetConfig+0x218>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c61 	.word	0x08009c61
 8009c4c:	08009c69 	.word	0x08009c69
 8009c50:	08009c71 	.word	0x08009c71
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c89 	.word	0x08009c89
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c66:	e1b6      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6e:	e1b2      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c76:	e1ae      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7e:	e1aa      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c80:	2320      	movs	r3, #32
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c86:	e1a6      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c88:	2340      	movs	r3, #64	@ 0x40
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8e:	e1a2      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c90:	2380      	movs	r3, #128	@ 0x80
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e19e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a35      	ldr	r2, [pc, #212]	@ (8009d74 <UART_SetConfig+0x344>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d130      	bne.n	8009d04 <UART_SetConfig+0x2d4>
 8009ca2:	4b31      	ldr	r3, [pc, #196]	@ (8009d68 <UART_SetConfig+0x338>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d826      	bhi.n	8009cfc <UART_SetConfig+0x2cc>
 8009cae:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <UART_SetConfig+0x284>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009ccd 	.word	0x08009ccd
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	08009cdd 	.word	0x08009cdd
 8009cc0:	08009ce5 	.word	0x08009ce5
 8009cc4:	08009ced 	.word	0x08009ced
 8009cc8:	08009cf5 	.word	0x08009cf5
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd2:	e180      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cda:	e17c      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce2:	e178      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cea:	e174      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009cec:	2320      	movs	r3, #32
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf2:	e170      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009cf4:	2340      	movs	r3, #64	@ 0x40
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfa:	e16c      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009cfc:	2380      	movs	r3, #128	@ 0x80
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e168      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1b      	ldr	r2, [pc, #108]	@ (8009d78 <UART_SetConfig+0x348>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d142      	bne.n	8009d94 <UART_SetConfig+0x364>
 8009d0e:	4b16      	ldr	r3, [pc, #88]	@ (8009d68 <UART_SetConfig+0x338>)
 8009d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d838      	bhi.n	8009d8c <UART_SetConfig+0x35c>
 8009d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d20 <UART_SetConfig+0x2f0>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d39 	.word	0x08009d39
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009d49 	.word	0x08009d49
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d7d 	.word	0x08009d7d
 8009d34:	08009d85 	.word	0x08009d85
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e14a      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d40:	2304      	movs	r3, #4
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d46:	e146      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e142      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d50:	2310      	movs	r3, #16
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e13e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d58:	cfff69f3 	.word	0xcfff69f3
 8009d5c:	58000c00 	.word	0x58000c00
 8009d60:	11fff4ff 	.word	0x11fff4ff
 8009d64:	40011000 	.word	0x40011000
 8009d68:	58024400 	.word	0x58024400
 8009d6c:	40004400 	.word	0x40004400
 8009d70:	40004800 	.word	0x40004800
 8009d74:	40004c00 	.word	0x40004c00
 8009d78:	40005000 	.word	0x40005000
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e128      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d84:	2340      	movs	r3, #64	@ 0x40
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e124      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d8c:	2380      	movs	r3, #128	@ 0x80
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e120      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4acb      	ldr	r2, [pc, #812]	@ (800a0c8 <UART_SetConfig+0x698>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d176      	bne.n	8009e8c <UART_SetConfig+0x45c>
 8009d9e:	4bcb      	ldr	r3, [pc, #812]	@ (800a0cc <UART_SetConfig+0x69c>)
 8009da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009da6:	2b28      	cmp	r3, #40	@ 0x28
 8009da8:	d86c      	bhi.n	8009e84 <UART_SetConfig+0x454>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <UART_SetConfig+0x380>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009e55 	.word	0x08009e55
 8009db4:	08009e85 	.word	0x08009e85
 8009db8:	08009e85 	.word	0x08009e85
 8009dbc:	08009e85 	.word	0x08009e85
 8009dc0:	08009e85 	.word	0x08009e85
 8009dc4:	08009e85 	.word	0x08009e85
 8009dc8:	08009e85 	.word	0x08009e85
 8009dcc:	08009e85 	.word	0x08009e85
 8009dd0:	08009e5d 	.word	0x08009e5d
 8009dd4:	08009e85 	.word	0x08009e85
 8009dd8:	08009e85 	.word	0x08009e85
 8009ddc:	08009e85 	.word	0x08009e85
 8009de0:	08009e85 	.word	0x08009e85
 8009de4:	08009e85 	.word	0x08009e85
 8009de8:	08009e85 	.word	0x08009e85
 8009dec:	08009e85 	.word	0x08009e85
 8009df0:	08009e65 	.word	0x08009e65
 8009df4:	08009e85 	.word	0x08009e85
 8009df8:	08009e85 	.word	0x08009e85
 8009dfc:	08009e85 	.word	0x08009e85
 8009e00:	08009e85 	.word	0x08009e85
 8009e04:	08009e85 	.word	0x08009e85
 8009e08:	08009e85 	.word	0x08009e85
 8009e0c:	08009e85 	.word	0x08009e85
 8009e10:	08009e6d 	.word	0x08009e6d
 8009e14:	08009e85 	.word	0x08009e85
 8009e18:	08009e85 	.word	0x08009e85
 8009e1c:	08009e85 	.word	0x08009e85
 8009e20:	08009e85 	.word	0x08009e85
 8009e24:	08009e85 	.word	0x08009e85
 8009e28:	08009e85 	.word	0x08009e85
 8009e2c:	08009e85 	.word	0x08009e85
 8009e30:	08009e75 	.word	0x08009e75
 8009e34:	08009e85 	.word	0x08009e85
 8009e38:	08009e85 	.word	0x08009e85
 8009e3c:	08009e85 	.word	0x08009e85
 8009e40:	08009e85 	.word	0x08009e85
 8009e44:	08009e85 	.word	0x08009e85
 8009e48:	08009e85 	.word	0x08009e85
 8009e4c:	08009e85 	.word	0x08009e85
 8009e50:	08009e7d 	.word	0x08009e7d
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e0bc      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e0b8      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e64:	2308      	movs	r3, #8
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e0b4      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e0b0      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e74:	2320      	movs	r3, #32
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e0ac      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e7c:	2340      	movs	r3, #64	@ 0x40
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e0a8      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e84:	2380      	movs	r3, #128	@ 0x80
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e0a4      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a8f      	ldr	r2, [pc, #572]	@ (800a0d0 <UART_SetConfig+0x6a0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d130      	bne.n	8009ef8 <UART_SetConfig+0x4c8>
 8009e96:	4b8d      	ldr	r3, [pc, #564]	@ (800a0cc <UART_SetConfig+0x69c>)
 8009e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d826      	bhi.n	8009ef0 <UART_SetConfig+0x4c0>
 8009ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <UART_SetConfig+0x478>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009ec1 	.word	0x08009ec1
 8009eac:	08009ec9 	.word	0x08009ec9
 8009eb0:	08009ed1 	.word	0x08009ed1
 8009eb4:	08009ed9 	.word	0x08009ed9
 8009eb8:	08009ee1 	.word	0x08009ee1
 8009ebc:	08009ee9 	.word	0x08009ee9
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e086      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ec8:	2304      	movs	r3, #4
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e082      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e07e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ede:	e07a      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee6:	e076      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ee8:	2340      	movs	r3, #64	@ 0x40
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eee:	e072      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ef0:	2380      	movs	r3, #128	@ 0x80
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e06e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a75      	ldr	r2, [pc, #468]	@ (800a0d4 <UART_SetConfig+0x6a4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d130      	bne.n	8009f64 <UART_SetConfig+0x534>
 8009f02:	4b72      	ldr	r3, [pc, #456]	@ (800a0cc <UART_SetConfig+0x69c>)
 8009f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d826      	bhi.n	8009f5c <UART_SetConfig+0x52c>
 8009f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f14 <UART_SetConfig+0x4e4>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009f2d 	.word	0x08009f2d
 8009f18:	08009f35 	.word	0x08009f35
 8009f1c:	08009f3d 	.word	0x08009f3d
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f4d 	.word	0x08009f4d
 8009f28:	08009f55 	.word	0x08009f55
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f32:	e050      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f34:	2304      	movs	r3, #4
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3a:	e04c      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f42:	e048      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f44:	2310      	movs	r3, #16
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4a:	e044      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f52:	e040      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f54:	2340      	movs	r3, #64	@ 0x40
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5a:	e03c      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f5c:	2380      	movs	r3, #128	@ 0x80
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e038      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a5b      	ldr	r2, [pc, #364]	@ (800a0d8 <UART_SetConfig+0x6a8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d130      	bne.n	8009fd0 <UART_SetConfig+0x5a0>
 8009f6e:	4b57      	ldr	r3, [pc, #348]	@ (800a0cc <UART_SetConfig+0x69c>)
 8009f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d826      	bhi.n	8009fc8 <UART_SetConfig+0x598>
 8009f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f80 <UART_SetConfig+0x550>)
 8009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f80:	08009f99 	.word	0x08009f99
 8009f84:	08009fa1 	.word	0x08009fa1
 8009f88:	08009fa9 	.word	0x08009fa9
 8009f8c:	08009fb1 	.word	0x08009fb1
 8009f90:	08009fb9 	.word	0x08009fb9
 8009f94:	08009fc1 	.word	0x08009fc1
 8009f98:	2302      	movs	r3, #2
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9e:	e01a      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa6:	e016      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fa8:	2308      	movs	r3, #8
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fae:	e012      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb6:	e00e      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fb8:	2320      	movs	r3, #32
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fbe:	e00a      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fc0:	2340      	movs	r3, #64	@ 0x40
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc6:	e006      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fc8:	2380      	movs	r3, #128	@ 0x80
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e002      	b.n	8009fd6 <UART_SetConfig+0x5a6>
 8009fd0:	2380      	movs	r3, #128	@ 0x80
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a3f      	ldr	r2, [pc, #252]	@ (800a0d8 <UART_SetConfig+0x6a8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	f040 80f8 	bne.w	800a1d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fe2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	dc46      	bgt.n	800a078 <UART_SetConfig+0x648>
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	f2c0 8082 	blt.w	800a0f4 <UART_SetConfig+0x6c4>
 8009ff0:	3b02      	subs	r3, #2
 8009ff2:	2b1e      	cmp	r3, #30
 8009ff4:	d87e      	bhi.n	800a0f4 <UART_SetConfig+0x6c4>
 8009ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ffc <UART_SetConfig+0x5cc>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a07f 	.word	0x0800a07f
 800a000:	0800a0f5 	.word	0x0800a0f5
 800a004:	0800a087 	.word	0x0800a087
 800a008:	0800a0f5 	.word	0x0800a0f5
 800a00c:	0800a0f5 	.word	0x0800a0f5
 800a010:	0800a0f5 	.word	0x0800a0f5
 800a014:	0800a097 	.word	0x0800a097
 800a018:	0800a0f5 	.word	0x0800a0f5
 800a01c:	0800a0f5 	.word	0x0800a0f5
 800a020:	0800a0f5 	.word	0x0800a0f5
 800a024:	0800a0f5 	.word	0x0800a0f5
 800a028:	0800a0f5 	.word	0x0800a0f5
 800a02c:	0800a0f5 	.word	0x0800a0f5
 800a030:	0800a0f5 	.word	0x0800a0f5
 800a034:	0800a0a7 	.word	0x0800a0a7
 800a038:	0800a0f5 	.word	0x0800a0f5
 800a03c:	0800a0f5 	.word	0x0800a0f5
 800a040:	0800a0f5 	.word	0x0800a0f5
 800a044:	0800a0f5 	.word	0x0800a0f5
 800a048:	0800a0f5 	.word	0x0800a0f5
 800a04c:	0800a0f5 	.word	0x0800a0f5
 800a050:	0800a0f5 	.word	0x0800a0f5
 800a054:	0800a0f5 	.word	0x0800a0f5
 800a058:	0800a0f5 	.word	0x0800a0f5
 800a05c:	0800a0f5 	.word	0x0800a0f5
 800a060:	0800a0f5 	.word	0x0800a0f5
 800a064:	0800a0f5 	.word	0x0800a0f5
 800a068:	0800a0f5 	.word	0x0800a0f5
 800a06c:	0800a0f5 	.word	0x0800a0f5
 800a070:	0800a0f5 	.word	0x0800a0f5
 800a074:	0800a0e7 	.word	0x0800a0e7
 800a078:	2b40      	cmp	r3, #64	@ 0x40
 800a07a:	d037      	beq.n	800a0ec <UART_SetConfig+0x6bc>
 800a07c:	e03a      	b.n	800a0f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a07e:	f7fd f921 	bl	80072c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a084:	e03c      	b.n	800a100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fd f930 	bl	80072f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a094:	e034      	b.n	800a100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a096:	f107 0318 	add.w	r3, r7, #24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fd fa7c 	bl	8007598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a4:	e02c      	b.n	800a100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0a6:	4b09      	ldr	r3, [pc, #36]	@ (800a0cc <UART_SetConfig+0x69c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d016      	beq.n	800a0e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0b2:	4b06      	ldr	r3, [pc, #24]	@ (800a0cc <UART_SetConfig+0x69c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	4a07      	ldr	r2, [pc, #28]	@ (800a0dc <UART_SetConfig+0x6ac>)
 800a0be:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0c4:	e01c      	b.n	800a100 <UART_SetConfig+0x6d0>
 800a0c6:	bf00      	nop
 800a0c8:	40011400 	.word	0x40011400
 800a0cc:	58024400 	.word	0x58024400
 800a0d0:	40007800 	.word	0x40007800
 800a0d4:	40007c00 	.word	0x40007c00
 800a0d8:	58000c00 	.word	0x58000c00
 800a0dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a0e0:	4b9d      	ldr	r3, [pc, #628]	@ (800a358 <UART_SetConfig+0x928>)
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e4:	e00c      	b.n	800a100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0e6:	4b9d      	ldr	r3, [pc, #628]	@ (800a35c <UART_SetConfig+0x92c>)
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ea:	e009      	b.n	800a100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f2:	e005      	b.n	800a100 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 81de 	beq.w	800a4c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10c:	4a94      	ldr	r2, [pc, #592]	@ (800a360 <UART_SetConfig+0x930>)
 800a10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a112:	461a      	mov	r2, r3
 800a114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a116:	fbb3 f3f2 	udiv	r3, r3, r2
 800a11a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a128:	429a      	cmp	r2, r3
 800a12a:	d305      	bcc.n	800a138 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a134:	429a      	cmp	r2, r3
 800a136:	d903      	bls.n	800a140 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a13e:	e1c1      	b.n	800a4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a142:	2200      	movs	r2, #0
 800a144:	60bb      	str	r3, [r7, #8]
 800a146:	60fa      	str	r2, [r7, #12]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14c:	4a84      	ldr	r2, [pc, #528]	@ (800a360 <UART_SetConfig+0x930>)
 800a14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a152:	b29b      	uxth	r3, r3
 800a154:	2200      	movs	r2, #0
 800a156:	603b      	str	r3, [r7, #0]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a15e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a162:	f7f6 f8b9 	bl	80002d8 <__aeabi_uldivmod>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	f04f 0300 	mov.w	r3, #0
 800a176:	020b      	lsls	r3, r1, #8
 800a178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a17c:	0202      	lsls	r2, r0, #8
 800a17e:	6979      	ldr	r1, [r7, #20]
 800a180:	6849      	ldr	r1, [r1, #4]
 800a182:	0849      	lsrs	r1, r1, #1
 800a184:	2000      	movs	r0, #0
 800a186:	460c      	mov	r4, r1
 800a188:	4605      	mov	r5, r0
 800a18a:	eb12 0804 	adds.w	r8, r2, r4
 800a18e:	eb43 0905 	adc.w	r9, r3, r5
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	469a      	mov	sl, r3
 800a19a:	4693      	mov	fp, r2
 800a19c:	4652      	mov	r2, sl
 800a19e:	465b      	mov	r3, fp
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	f7f6 f898 	bl	80002d8 <__aeabi_uldivmod>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1b6:	d308      	bcc.n	800a1ca <UART_SetConfig+0x79a>
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1be:	d204      	bcs.n	800a1ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1c6:	60da      	str	r2, [r3, #12]
 800a1c8:	e17c      	b.n	800a4c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1d0:	e178      	b.n	800a4c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1da:	f040 80c5 	bne.w	800a368 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a1de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	2b20      	cmp	r3, #32
 800a1e4:	dc48      	bgt.n	800a278 <UART_SetConfig+0x848>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db7b      	blt.n	800a2e2 <UART_SetConfig+0x8b2>
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d879      	bhi.n	800a2e2 <UART_SetConfig+0x8b2>
 800a1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <UART_SetConfig+0x7c4>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a27f 	.word	0x0800a27f
 800a1f8:	0800a287 	.word	0x0800a287
 800a1fc:	0800a2e3 	.word	0x0800a2e3
 800a200:	0800a2e3 	.word	0x0800a2e3
 800a204:	0800a28f 	.word	0x0800a28f
 800a208:	0800a2e3 	.word	0x0800a2e3
 800a20c:	0800a2e3 	.word	0x0800a2e3
 800a210:	0800a2e3 	.word	0x0800a2e3
 800a214:	0800a29f 	.word	0x0800a29f
 800a218:	0800a2e3 	.word	0x0800a2e3
 800a21c:	0800a2e3 	.word	0x0800a2e3
 800a220:	0800a2e3 	.word	0x0800a2e3
 800a224:	0800a2e3 	.word	0x0800a2e3
 800a228:	0800a2e3 	.word	0x0800a2e3
 800a22c:	0800a2e3 	.word	0x0800a2e3
 800a230:	0800a2e3 	.word	0x0800a2e3
 800a234:	0800a2af 	.word	0x0800a2af
 800a238:	0800a2e3 	.word	0x0800a2e3
 800a23c:	0800a2e3 	.word	0x0800a2e3
 800a240:	0800a2e3 	.word	0x0800a2e3
 800a244:	0800a2e3 	.word	0x0800a2e3
 800a248:	0800a2e3 	.word	0x0800a2e3
 800a24c:	0800a2e3 	.word	0x0800a2e3
 800a250:	0800a2e3 	.word	0x0800a2e3
 800a254:	0800a2e3 	.word	0x0800a2e3
 800a258:	0800a2e3 	.word	0x0800a2e3
 800a25c:	0800a2e3 	.word	0x0800a2e3
 800a260:	0800a2e3 	.word	0x0800a2e3
 800a264:	0800a2e3 	.word	0x0800a2e3
 800a268:	0800a2e3 	.word	0x0800a2e3
 800a26c:	0800a2e3 	.word	0x0800a2e3
 800a270:	0800a2e3 	.word	0x0800a2e3
 800a274:	0800a2d5 	.word	0x0800a2d5
 800a278:	2b40      	cmp	r3, #64	@ 0x40
 800a27a:	d02e      	beq.n	800a2da <UART_SetConfig+0x8aa>
 800a27c:	e031      	b.n	800a2e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a27e:	f7fb fdeb 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 800a282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a284:	e033      	b.n	800a2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a286:	f7fb fdfd 	bl	8005e84 <HAL_RCC_GetPCLK2Freq>
 800a28a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a28c:	e02f      	b.n	800a2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a28e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd f82c 	bl	80072f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29c:	e027      	b.n	800a2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a29e:	f107 0318 	add.w	r3, r7, #24
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fd f978 	bl	8007598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ac:	e01f      	b.n	800a2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ae:	4b2d      	ldr	r3, [pc, #180]	@ (800a364 <UART_SetConfig+0x934>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a364 <UART_SetConfig+0x934>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	08db      	lsrs	r3, r3, #3
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	4a24      	ldr	r2, [pc, #144]	@ (800a358 <UART_SetConfig+0x928>)
 800a2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2cc:	e00f      	b.n	800a2ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2ce:	4b22      	ldr	r3, [pc, #136]	@ (800a358 <UART_SetConfig+0x928>)
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d2:	e00c      	b.n	800a2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2d4:	4b21      	ldr	r3, [pc, #132]	@ (800a35c <UART_SetConfig+0x92c>)
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d8:	e009      	b.n	800a2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e0:	e005      	b.n	800a2ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80e7 	beq.w	800a4c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2fa:	4a19      	ldr	r2, [pc, #100]	@ (800a360 <UART_SetConfig+0x930>)
 800a2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a300:	461a      	mov	r2, r3
 800a302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a304:	fbb3 f3f2 	udiv	r3, r3, r2
 800a308:	005a      	lsls	r2, r3, #1
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	085b      	lsrs	r3, r3, #1
 800a310:	441a      	add	r2, r3
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31e:	2b0f      	cmp	r3, #15
 800a320:	d916      	bls.n	800a350 <UART_SetConfig+0x920>
 800a322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a328:	d212      	bcs.n	800a350 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	f023 030f 	bic.w	r3, r3, #15
 800a332:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a336:	085b      	lsrs	r3, r3, #1
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	b29a      	uxth	r2, r3
 800a340:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a342:	4313      	orrs	r3, r2
 800a344:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a34c:	60da      	str	r2, [r3, #12]
 800a34e:	e0b9      	b.n	800a4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a356:	e0b5      	b.n	800a4c4 <UART_SetConfig+0xa94>
 800a358:	03d09000 	.word	0x03d09000
 800a35c:	003d0900 	.word	0x003d0900
 800a360:	0800aca8 	.word	0x0800aca8
 800a364:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a368:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	dc49      	bgt.n	800a404 <UART_SetConfig+0x9d4>
 800a370:	2b00      	cmp	r3, #0
 800a372:	db7c      	blt.n	800a46e <UART_SetConfig+0xa3e>
 800a374:	2b20      	cmp	r3, #32
 800a376:	d87a      	bhi.n	800a46e <UART_SetConfig+0xa3e>
 800a378:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <UART_SetConfig+0x950>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a40b 	.word	0x0800a40b
 800a384:	0800a413 	.word	0x0800a413
 800a388:	0800a46f 	.word	0x0800a46f
 800a38c:	0800a46f 	.word	0x0800a46f
 800a390:	0800a41b 	.word	0x0800a41b
 800a394:	0800a46f 	.word	0x0800a46f
 800a398:	0800a46f 	.word	0x0800a46f
 800a39c:	0800a46f 	.word	0x0800a46f
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a46f 	.word	0x0800a46f
 800a3a8:	0800a46f 	.word	0x0800a46f
 800a3ac:	0800a46f 	.word	0x0800a46f
 800a3b0:	0800a46f 	.word	0x0800a46f
 800a3b4:	0800a46f 	.word	0x0800a46f
 800a3b8:	0800a46f 	.word	0x0800a46f
 800a3bc:	0800a46f 	.word	0x0800a46f
 800a3c0:	0800a43b 	.word	0x0800a43b
 800a3c4:	0800a46f 	.word	0x0800a46f
 800a3c8:	0800a46f 	.word	0x0800a46f
 800a3cc:	0800a46f 	.word	0x0800a46f
 800a3d0:	0800a46f 	.word	0x0800a46f
 800a3d4:	0800a46f 	.word	0x0800a46f
 800a3d8:	0800a46f 	.word	0x0800a46f
 800a3dc:	0800a46f 	.word	0x0800a46f
 800a3e0:	0800a46f 	.word	0x0800a46f
 800a3e4:	0800a46f 	.word	0x0800a46f
 800a3e8:	0800a46f 	.word	0x0800a46f
 800a3ec:	0800a46f 	.word	0x0800a46f
 800a3f0:	0800a46f 	.word	0x0800a46f
 800a3f4:	0800a46f 	.word	0x0800a46f
 800a3f8:	0800a46f 	.word	0x0800a46f
 800a3fc:	0800a46f 	.word	0x0800a46f
 800a400:	0800a461 	.word	0x0800a461
 800a404:	2b40      	cmp	r3, #64	@ 0x40
 800a406:	d02e      	beq.n	800a466 <UART_SetConfig+0xa36>
 800a408:	e031      	b.n	800a46e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a40a:	f7fb fd25 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 800a40e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a410:	e033      	b.n	800a47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a412:	f7fb fd37 	bl	8005e84 <HAL_RCC_GetPCLK2Freq>
 800a416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a418:	e02f      	b.n	800a47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a41a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fc ff66 	bl	80072f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	e027      	b.n	800a47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a42a:	f107 0318 	add.w	r3, r7, #24
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fd f8b2 	bl	8007598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a438:	e01f      	b.n	800a47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a43a:	4b2d      	ldr	r3, [pc, #180]	@ (800a4f0 <UART_SetConfig+0xac0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a446:	4b2a      	ldr	r3, [pc, #168]	@ (800a4f0 <UART_SetConfig+0xac0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	08db      	lsrs	r3, r3, #3
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	4a28      	ldr	r2, [pc, #160]	@ (800a4f4 <UART_SetConfig+0xac4>)
 800a452:	fa22 f303 	lsr.w	r3, r2, r3
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a458:	e00f      	b.n	800a47a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a45a:	4b26      	ldr	r3, [pc, #152]	@ (800a4f4 <UART_SetConfig+0xac4>)
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a45e:	e00c      	b.n	800a47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a460:	4b25      	ldr	r3, [pc, #148]	@ (800a4f8 <UART_SetConfig+0xac8>)
 800a462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a464:	e009      	b.n	800a47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46c:	e005      	b.n	800a47a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a478:	bf00      	nop
    }

    if (pclk != 0U)
 800a47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d021      	beq.n	800a4c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a484:	4a1d      	ldr	r2, [pc, #116]	@ (800a4fc <UART_SetConfig+0xacc>)
 800a486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a48a:	461a      	mov	r2, r3
 800a48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a48e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	441a      	add	r2, r3
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d909      	bls.n	800a4be <UART_SetConfig+0xa8e>
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4b0:	d205      	bcs.n	800a4be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60da      	str	r2, [r3, #12]
 800a4bc:	e002      	b.n	800a4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3748      	adds	r7, #72	@ 0x48
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4ee:	bf00      	nop
 800a4f0:	58024400 	.word	0x58024400
 800a4f4:	03d09000 	.word	0x03d09000
 800a4f8:	003d0900 	.word	0x003d0900
 800a4fc:	0800aca8 	.word	0x0800aca8

0800a500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00a      	beq.n	800a56e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a572:	f003 0304 	and.w	r3, r3, #4
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	430a      	orrs	r2, r1
 800a58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	f003 0320 	and.w	r3, r3, #32
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01a      	beq.n	800a616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5fe:	d10a      	bne.n	800a616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	430a      	orrs	r2, r1
 800a614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00a      	beq.n	800a638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	605a      	str	r2, [r3, #4]
  }
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b098      	sub	sp, #96	@ 0x60
 800a648:	af02      	add	r7, sp, #8
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a654:	f7f8 f8c4 	bl	80027e0 <HAL_GetTick>
 800a658:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0308 	and.w	r3, r3, #8
 800a664:	2b08      	cmp	r3, #8
 800a666:	d12f      	bne.n	800a6c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a670:	2200      	movs	r2, #0
 800a672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f88e 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d022      	beq.n	800a6c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68a:	e853 3f00 	ldrex	r3, [r3]
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a696:	653b      	str	r3, [r7, #80]	@ 0x50
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	461a      	mov	r2, r3
 800a69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6a8:	e841 2300 	strex	r3, r2, [r1]
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1e6      	bne.n	800a682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e063      	b.n	800a790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d149      	bne.n	800a76a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f857 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d03c      	beq.n	800a76a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	461a      	mov	r2, r3
 800a70c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a710:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e6      	bne.n	800a6f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3308      	adds	r3, #8
 800a728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	60fb      	str	r3, [r7, #12]
   return(result);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f023 0301 	bic.w	r3, r3, #1
 800a738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3308      	adds	r3, #8
 800a740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a742:	61fa      	str	r2, [r7, #28]
 800a744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	69b9      	ldr	r1, [r7, #24]
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	617b      	str	r3, [r7, #20]
   return(result);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e5      	bne.n	800a722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2220      	movs	r2, #32
 800a75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e012      	b.n	800a790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3758      	adds	r7, #88	@ 0x58
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	603b      	str	r3, [r7, #0]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a8:	e04f      	b.n	800a84a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d04b      	beq.n	800a84a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7b2:	f7f8 f815 	bl	80027e0 <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d302      	bcc.n	800a7c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e04e      	b.n	800a86a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d037      	beq.n	800a84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	2b80      	cmp	r3, #128	@ 0x80
 800a7de:	d034      	beq.n	800a84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b40      	cmp	r3, #64	@ 0x40
 800a7e4:	d031      	beq.n	800a84a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f003 0308 	and.w	r3, r3, #8
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d110      	bne.n	800a816 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f839 	bl	800a874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2208      	movs	r2, #8
 800a806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e029      	b.n	800a86a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a824:	d111      	bne.n	800a84a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a82e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f81f 	bl	800a874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2220      	movs	r2, #32
 800a83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e00f      	b.n	800a86a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69da      	ldr	r2, [r3, #28]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	4013      	ands	r3, r2
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	429a      	cmp	r2, r3
 800a858:	bf0c      	ite	eq
 800a85a:	2301      	moveq	r3, #1
 800a85c:	2300      	movne	r3, #0
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	461a      	mov	r2, r3
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	429a      	cmp	r2, r3
 800a866:	d0a0      	beq.n	800a7aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a874:	b480      	push	{r7}
 800a876:	b095      	sub	sp, #84	@ 0x54
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a884:	e853 3f00 	ldrex	r3, [r3]
 800a888:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	461a      	mov	r2, r3
 800a898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a89a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a89c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8a2:	e841 2300 	strex	r3, r2, [r1]
 800a8a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1e6      	bne.n	800a87c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3308      	adds	r3, #8
 800a8b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	e853 3f00 	ldrex	r3, [r3]
 800a8bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8be:	69fa      	ldr	r2, [r7, #28]
 800a8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a93c <UART_EndRxTransfer+0xc8>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e5      	bne.n	800a8ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d118      	bne.n	800a91c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0310 	bic.w	r3, r3, #16
 800a8fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a908:	61bb      	str	r3, [r7, #24]
 800a90a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90c:	6979      	ldr	r1, [r7, #20]
 800a90e:	69ba      	ldr	r2, [r7, #24]
 800a910:	e841 2300 	strex	r3, r2, [r1]
 800a914:	613b      	str	r3, [r7, #16]
   return(result);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1e6      	bne.n	800a8ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2220      	movs	r2, #32
 800a920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a930:	bf00      	nop
 800a932:	3754      	adds	r7, #84	@ 0x54
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	effffffe 	.word	0xeffffffe

0800a940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff f850 	bl	8009a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	60bb      	str	r3, [r7, #8]
   return(result);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a988:	61fb      	str	r3, [r7, #28]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	61bb      	str	r3, [r7, #24]
 800a994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6979      	ldr	r1, [r7, #20]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e6      	bne.n	800a974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff f81b 	bl	80099f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9ba:	bf00      	nop
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d101      	bne.n	800aa14 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa10:	2302      	movs	r3, #2
 800aa12:	e027      	b.n	800aa64 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2224      	movs	r2, #36	@ 0x24
 800aa20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 0201 	bic.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e02d      	b.n	800aae4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2224      	movs	r2, #36	@ 0x24
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0201 	bic.w	r2, r2, #1
 800aaae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f84f 	bl	800ab68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d101      	bne.n	800ab04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab00:	2302      	movs	r3, #2
 800ab02:	e02d      	b.n	800ab60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2224      	movs	r2, #36	@ 0x24
 800ab10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0201 	bic.w	r2, r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f811 	bl	800ab68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d108      	bne.n	800ab8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab88:	e031      	b.n	800abee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab8a:	2310      	movs	r3, #16
 800ab8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab8e:	2310      	movs	r3, #16
 800ab90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	0e5b      	lsrs	r3, r3, #25
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	0f5b      	lsrs	r3, r3, #29
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 0307 	and.w	r3, r3, #7
 800abb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	7b3a      	ldrb	r2, [r7, #12]
 800abb6:	4911      	ldr	r1, [pc, #68]	@ (800abfc <UARTEx_SetNbDataToProcess+0x94>)
 800abb8:	5c8a      	ldrb	r2, [r1, r2]
 800abba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abbe:	7b3a      	ldrb	r2, [r7, #12]
 800abc0:	490f      	ldr	r1, [pc, #60]	@ (800ac00 <UARTEx_SetNbDataToProcess+0x98>)
 800abc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800abc8:	b29a      	uxth	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
 800abd2:	7b7a      	ldrb	r2, [r7, #13]
 800abd4:	4909      	ldr	r1, [pc, #36]	@ (800abfc <UARTEx_SetNbDataToProcess+0x94>)
 800abd6:	5c8a      	ldrb	r2, [r1, r2]
 800abd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abdc:	7b7a      	ldrb	r2, [r7, #13]
 800abde:	4908      	ldr	r1, [pc, #32]	@ (800ac00 <UARTEx_SetNbDataToProcess+0x98>)
 800abe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	0800acc0 	.word	0x0800acc0
 800ac00:	0800acc8 	.word	0x0800acc8

0800ac04 <memset>:
 800ac04:	4402      	add	r2, r0
 800ac06:	4603      	mov	r3, r0
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d100      	bne.n	800ac0e <memset+0xa>
 800ac0c:	4770      	bx	lr
 800ac0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac12:	e7f9      	b.n	800ac08 <memset+0x4>

0800ac14 <__libc_init_array>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	4d0d      	ldr	r5, [pc, #52]	@ (800ac4c <__libc_init_array+0x38>)
 800ac18:	4c0d      	ldr	r4, [pc, #52]	@ (800ac50 <__libc_init_array+0x3c>)
 800ac1a:	1b64      	subs	r4, r4, r5
 800ac1c:	10a4      	asrs	r4, r4, #2
 800ac1e:	2600      	movs	r6, #0
 800ac20:	42a6      	cmp	r6, r4
 800ac22:	d109      	bne.n	800ac38 <__libc_init_array+0x24>
 800ac24:	4d0b      	ldr	r5, [pc, #44]	@ (800ac54 <__libc_init_array+0x40>)
 800ac26:	4c0c      	ldr	r4, [pc, #48]	@ (800ac58 <__libc_init_array+0x44>)
 800ac28:	f000 f818 	bl	800ac5c <_init>
 800ac2c:	1b64      	subs	r4, r4, r5
 800ac2e:	10a4      	asrs	r4, r4, #2
 800ac30:	2600      	movs	r6, #0
 800ac32:	42a6      	cmp	r6, r4
 800ac34:	d105      	bne.n	800ac42 <__libc_init_array+0x2e>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3c:	4798      	blx	r3
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7ee      	b.n	800ac20 <__libc_init_array+0xc>
 800ac42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac46:	4798      	blx	r3
 800ac48:	3601      	adds	r6, #1
 800ac4a:	e7f2      	b.n	800ac32 <__libc_init_array+0x1e>
 800ac4c:	0800acd8 	.word	0x0800acd8
 800ac50:	0800acd8 	.word	0x0800acd8
 800ac54:	0800acd8 	.word	0x0800acd8
 800ac58:	0800acdc 	.word	0x0800acdc

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
