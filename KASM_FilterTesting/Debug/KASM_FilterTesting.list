
KASM_FilterTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800b708  0800b708  0000c708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b7cc  0800b7cc  0000c7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b7d4  0800b7d4  0000c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b7d8  0800b7d8  0000c7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b7dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000690  24000068  0800b840  0000d068  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240006f8  0800b840  0000d6f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c65d  00000000  00000000  0000d092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c28  00000000  00000000  000296ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c0  00000000  00000000  0002c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001201  00000000  00000000  0002d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039595  00000000  00000000  0002ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cbe9  00000000  00000000  0006816e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b4fe  00000000  00000000  00084d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00200255  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006854  00000000  00000000  00200298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00206aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b6f0 	.word	0x0800b6f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800b6f0 	.word	0x0800b6f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <read_TIM1>:
static double ref=0;// reference (input) for control loop
static double sine_vals[SIN_PERIOD] = {0};

//Variables for UART Output
char message[64] = {'\0'};
uint16_t read_TIM1() {
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return TIM1->CNT;
 8000674:	4b03      	ldr	r3, [pc, #12]	@ (8000684 <read_TIM1+0x14>)
 8000676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000678:	b29b      	uxth	r3, r3
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40010000 	.word	0x40010000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068c:	f001 fa7c 	bl	8001b88 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 f8f6 	bl	8002880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f86a 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f001 f874 	bl	8001784 <MX_GPIO_Init>
  MX_TIM1_Init();
 800069c:	f000 fb16 	bl	8000ccc <MX_TIM1_Init>
  MX_TIM2_Init();
 80006a0:	f000 fbe4 	bl	8000e6c <MX_TIM2_Init>
  MX_TIM4_Init();
 80006a4:	f000 fc3c 	bl	8000f20 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a8:	f000 fcd2 	bl	8001050 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006ac:	f000 fd52 	bl	8001154 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006b0:	f000 fdde 	bl	8001270 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006b4:	f000 fe54 	bl	8001360 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b8:	f000 fea0 	bl	80013fc <MX_TIM14_Init>
  MX_TIM15_Init();
 80006bc:	f000 feec 	bl	8001498 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006c0:	f000 ff9a 	bl	80015f8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006c4:	f000 f900 	bl	80008c8 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c8:	f000 fad4 	bl	8000c74 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006cc:	f001 f80e 	bl	80016ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  //Timer 1
    HAL_TIM_Base_Start_IT(&htim1);
 80006d0:	481e      	ldr	r0, [pc, #120]	@ (800074c <main+0xc4>)
 80006d2:	f007 fb47 	bl	8007d64 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006d6:	2100      	movs	r1, #0
 80006d8:	481c      	ldr	r0, [pc, #112]	@ (800074c <main+0xc4>)
 80006da:	f007 fc13 	bl	8007f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006de:	2104      	movs	r1, #4
 80006e0:	481a      	ldr	r0, [pc, #104]	@ (800074c <main+0xc4>)
 80006e2:	f007 fc0f 	bl	8007f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006e6:	2108      	movs	r1, #8
 80006e8:	4818      	ldr	r0, [pc, #96]	@ (800074c <main+0xc4>)
 80006ea:	f007 fc0b 	bl	8007f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006ee:	210c      	movs	r1, #12
 80006f0:	4816      	ldr	r0, [pc, #88]	@ (800074c <main+0xc4>)
 80006f2:	f007 fc07 	bl	8007f04 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006f6:	2201      	movs	r2, #1
 80006f8:	2101      	movs	r1, #1
 80006fa:	4815      	ldr	r0, [pc, #84]	@ (8000750 <main+0xc8>)
 80006fc:	f003 f9fa 	bl	8003af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2102      	movs	r1, #2
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0xc8>)
 8000706:	f003 f9f5 	bl	8003af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	4810      	ldr	r0, [pc, #64]	@ (8000750 <main+0xc8>)
 8000710:	f003 f9f0 	bl	8003af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <main+0xc8>)
 800071a:	f003 f9eb 	bl	8003af4 <HAL_GPIO_WritePin>
    //End Timer 1


    //HAL_UART_Transmit(&huart4, tx_buffer, 27, 10);
    sprintf(message, "Timer 1 Initialization Complete: %d \n\r", read_TIM1);
 800071e:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <main+0xcc>)
 8000720:	490d      	ldr	r1, [pc, #52]	@ (8000758 <main+0xd0>)
 8000722:	480e      	ldr	r0, [pc, #56]	@ (800075c <main+0xd4>)
 8000724:	f00a fb44 	bl	800adb0 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000728:	2364      	movs	r3, #100	@ 0x64
 800072a:	2240      	movs	r2, #64	@ 0x40
 800072c:	490b      	ldr	r1, [pc, #44]	@ (800075c <main+0xd4>)
 800072e:	480c      	ldr	r0, [pc, #48]	@ (8000760 <main+0xd8>)
 8000730:	f008 fdec 	bl	800930c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <main+0xdc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d1fb      	bne.n	8000734 <main+0xac>
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <main+0xe0>)
 800073e:	ed93 7b00 	vldr	d7, [r3]
 8000742:	eeb0 0b47 	vmov.f64	d0, d7
 8000746:	f001 f933 	bl	80019b0 <control_update>
 800074a:	e7f3      	b.n	8000734 <main+0xac>
 800074c:	24000198 	.word	0x24000198
 8000750:	58021000 	.word	0x58021000
 8000754:	08000671 	.word	0x08000671
 8000758:	0800b708 	.word	0x0800b708
 800075c:	24000530 	.word	0x24000530
 8000760:	24000490 	.word	0x24000490
 8000764:	24000524 	.word	0x24000524
 8000768:	24000528 	.word	0x24000528

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09e      	sub	sp, #120	@ 0x78
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00a fb38 	bl	800adf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2220      	movs	r2, #32
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f00a fb31 	bl	800adf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078e:	2002      	movs	r0, #2
 8000790:	f004 fc44 	bl	800501c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b48      	ldr	r3, [pc, #288]	@ (80008bc <SystemClock_Config+0x150>)
 800079a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079c:	4a47      	ldr	r2, [pc, #284]	@ (80008bc <SystemClock_Config+0x150>)
 800079e:	f023 0301 	bic.w	r3, r3, #1
 80007a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007a4:	4b45      	ldr	r3, [pc, #276]	@ (80008bc <SystemClock_Config+0x150>)
 80007a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <SystemClock_Config+0x154>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a43      	ldr	r2, [pc, #268]	@ (80008c0 <SystemClock_Config+0x154>)
 80007b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <SystemClock_Config+0x154>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c6:	bf00      	nop
 80007c8:	4b3d      	ldr	r3, [pc, #244]	@ (80008c0 <SystemClock_Config+0x154>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d4:	d1f8      	bne.n	80007c8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <SystemClock_Config+0x158>)
 80007d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007dc:	4a39      	ldr	r2, [pc, #228]	@ (80008c4 <SystemClock_Config+0x158>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007e6:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <SystemClock_Config+0x158>)
 80007e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <SystemClock_Config+0x154>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a30      	ldr	r2, [pc, #192]	@ (80008c0 <SystemClock_Config+0x154>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <SystemClock_Config+0x154>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <SystemClock_Config+0x150>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <SystemClock_Config+0x150>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <SystemClock_Config+0x150>)
 800081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000826:	bf00      	nop
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <SystemClock_Config+0x154>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000834:	d1f8      	bne.n	8000828 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000836:	2301      	movs	r3, #1
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000844:	2302      	movs	r3, #2
 8000846:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800084c:	2350      	movs	r3, #80	@ 0x50
 800084e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085c:	230c      	movs	r3, #12
 800085e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000860:	2300      	movs	r3, #0
 8000862:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fc0f 	bl	8005090 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000878:	f001 f9b2 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	233f      	movs	r3, #63	@ 0x3f
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000888:	2308      	movs	r3, #8
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2104      	movs	r1, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 f84d 	bl	8005944 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80008b0:	f001 f996 	bl	8001be0 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3778      	adds	r7, #120	@ 0x78
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024800 	.word	0x58024800
 80008c4:	58024400 	.word	0x58024400

080008c8 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0aa      	sub	sp, #168	@ 0xa8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80008ce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80008de:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80008ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008f0:	2254      	movs	r2, #84	@ 0x54
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00a fa7b 	bl	800adf0 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00a fa6f 	bl	800adf0 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000912:	4bc4      	ldr	r3, [pc, #784]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000914:	4ac4      	ldr	r2, [pc, #784]	@ (8000c28 <MX_HRTIM_Init+0x360>)
 8000916:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000918:	4bc2      	ldr	r3, [pc, #776]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800091e:	4bc1      	ldr	r3, [pc, #772]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000924:	48bf      	ldr	r0, [pc, #764]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000926:	f003 f8ff 	bl	8003b28 <HAL_HRTIM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000930:	f001 f956 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	48bb      	ldr	r0, [pc, #748]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000938:	f003 fa1d 	bl	8003d76 <HAL_HRTIM_EventPrescalerConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000942:	f001 f94d 	bl	8001be0 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000946:	2302      	movs	r3, #2
 8000948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000952:	2308      	movs	r3, #8
 8000954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 800095e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000962:	461a      	mov	r2, r3
 8000964:	2101      	movs	r1, #1
 8000966:	48af      	ldr	r0, [pc, #700]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000968:	f003 f9d6 	bl	8003d18 <HAL_HRTIM_EventConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000972:	f001 f935 	bl	8001be0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000976:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 800097a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000984:	2305      	movs	r3, #5
 8000986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800098a:	2308      	movs	r3, #8
 800098c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000990:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000994:	461a      	mov	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	48a2      	ldr	r0, [pc, #648]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 800099a:	f003 f995 	bl	8003cc8 <HAL_HRTIM_TimeBaseConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 80009a4:	f001 f91c 	bl	8001be0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80009bc:	2300      	movs	r3, #0
 80009be:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80009cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009d0:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80009da:	2300      	movs	r3, #0
 80009dc:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80009de:	2300      	movs	r3, #0
 80009e0:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80009ea:	2300      	movs	r3, #0
 80009ec:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80009ee:	2300      	movs	r3, #0
 80009f0:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 80009f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80009fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000a00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000a04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4885      	ldr	r0, [pc, #532]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a0e:	f003 f9eb 	bl	8003de8 <HAL_HRTIM_WaveformTimerConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000a18:	f001 f8e2 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000a1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a20:	461a      	mov	r2, r3
 8000a22:	2101      	movs	r1, #1
 8000a24:	487f      	ldr	r0, [pc, #508]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a26:	f003 f9df 	bl	8003de8 <HAL_HRTIM_WaveformTimerConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000a30:	f001 f8d6 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000a34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4879      	ldr	r0, [pc, #484]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a3e:	f003 f9d3 	bl	8003de8 <HAL_HRTIM_WaveformTimerConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000a48:	f001 f8ca 	bl	8001be0 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000a50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a54:	461a      	mov	r2, r3
 8000a56:	2103      	movs	r1, #3
 8000a58:	4872      	ldr	r0, [pc, #456]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a5a:	f003 f9c5 	bl	8003de8 <HAL_HRTIM_WaveformTimerConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000a64:	f001 f8bc 	bl	8001be0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000a68:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	2201      	movs	r2, #1
 8000a74:	2100      	movs	r1, #0
 8000a76:	486b      	ldr	r0, [pc, #428]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a78:	f003 fa28 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000a82:	f001 f8ad 	bl	8001be0 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	2202      	movs	r2, #2
 8000a94:	2100      	movs	r1, #0
 8000a96:	4863      	ldr	r0, [pc, #396]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000a98:	f003 fa18 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000aa2:	f001 f89d 	bl	8001be0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	2202      	movs	r2, #2
 8000aac:	2101      	movs	r1, #1
 8000aae:	485d      	ldr	r0, [pc, #372]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000ab0:	f003 fa0c 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000aba:	f001 f891 	bl	8001be0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4857      	ldr	r0, [pc, #348]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000ac8:	f003 fa00 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000ad2:	f001 f885 	bl	8001be0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	2202      	movs	r2, #2
 8000adc:	2103      	movs	r1, #3
 8000ade:	4851      	ldr	r0, [pc, #324]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000ae0:	f003 f9f4 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000aea:	f001 f879 	bl	8001be0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000af2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c2c <MX_HRTIM_Init+0x364>)
 8000af4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000af6:	2308      	movs	r3, #8
 8000af8:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2201      	movs	r2, #1
 8000b12:	2100      	movs	r1, #0
 8000b14:	4843      	ldr	r0, [pc, #268]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b16:	f003 fb47 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000b20:	f001 f85e 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2204      	movs	r2, #4
 8000b28:	2101      	movs	r1, #1
 8000b2a:	483e      	ldr	r0, [pc, #248]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b2c:	f003 fb3c 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000b36:	f001 f853 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4838      	ldr	r0, [pc, #224]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b42:	f003 fb31 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000b4c:	f001 f848 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2240      	movs	r2, #64	@ 0x40
 8000b54:	2103      	movs	r1, #3
 8000b56:	4833      	ldr	r0, [pc, #204]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b58:	f003 fb26 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000b62:	f001 f83d 	bl	8001be0 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000b66:	2310      	movs	r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	2100      	movs	r1, #0
 8000b70:	482c      	ldr	r0, [pc, #176]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b72:	f003 fb19 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000b7c:	f001 f830 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2208      	movs	r2, #8
 8000b84:	2101      	movs	r1, #1
 8000b86:	4827      	ldr	r0, [pc, #156]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b88:	f003 fb0e 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000b92:	f001 f825 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4821      	ldr	r0, [pc, #132]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000b9e:	f003 fb03 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000ba8:	f001 f81a 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000bb4:	f003 faf8 	bl	80041a8 <HAL_HRTIM_WaveformOutputConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000bbe:	f001 f80f 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000bc2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000bcc:	f003 f87c 	bl	8003cc8 <HAL_HRTIM_TimeBaseConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000bd6:	f001 f803 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	2201      	movs	r2, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000be4:	f003 f972 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000bee:	f000 fff7 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000bf2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000bfc:	f003 f864 	bl	8003cc8 <HAL_HRTIM_TimeBaseConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000c06:	f000 ffeb 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_HRTIM_Init+0x35c>)
 8000c14:	f003 f95a 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d008      	beq.n	8000c30 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000c1e:	f000 ffdf 	bl	8001be0 <Error_Handler>
 8000c22:	e005      	b.n	8000c30 <MX_HRTIM_Init+0x368>
 8000c24:	24000084 	.word	0x24000084
 8000c28:	40017400 	.word	0x40017400
 8000c2c:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000c30:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c34:	461a      	mov	r2, r3
 8000c36:	2103      	movs	r1, #3
 8000c38:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_HRTIM_Init+0x3a8>)
 8000c3a:	f003 f845 	bl	8003cc8 <HAL_HRTIM_TimeBaseConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000c44:	f000 ffcc 	bl	8001be0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2103      	movs	r1, #3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_HRTIM_Init+0x3a8>)
 8000c52:	f003 f93b 	bl	8003ecc <HAL_HRTIM_WaveformCompareConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000c5c:	f000 ffc0 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_HRTIM_Init+0x3a8>)
 8000c62:	f001 f817 	bl	8001c94 <HAL_HRTIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	37a8      	adds	r7, #168	@ 0xa8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000084 	.word	0x24000084

08000c74 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <MX_LPTIM1_Init+0x54>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c90:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_LPTIM1_Init+0x50>)
 8000cb2:	f004 f821 	bl	8004cf8 <HAL_LPTIM_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 ff90 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24000160 	.word	0x24000160
 8000cc8:	40002400 	.word	0x40002400

08000ccc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09a      	sub	sp, #104	@ 0x68
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	222c      	movs	r2, #44	@ 0x2c
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00a f872 	bl	800adf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0c:	4b55      	ldr	r3, [pc, #340]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d0e:	4a56      	ldr	r2, [pc, #344]	@ (8000e68 <MX_TIM1_Init+0x19c>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d12:	4b54      	ldr	r3, [pc, #336]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b52      	ldr	r3, [pc, #328]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000d1e:	4b51      	ldr	r3, [pc, #324]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d20:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000d24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b4f      	ldr	r3, [pc, #316]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b4c      	ldr	r3, [pc, #304]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d38:	484a      	ldr	r0, [pc, #296]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d3a:	f006 ffbb 	bl	8007cb4 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f000 ff4c 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d52:	4619      	mov	r1, r3
 8000d54:	4843      	ldr	r0, [pc, #268]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d56:	f007 fbff 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d60:	f000 ff3e 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d64:	483f      	ldr	r0, [pc, #252]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d66:	f007 f875 	bl	8007e54 <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d70:	f000 ff36 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d74:	2320      	movs	r3, #32
 8000d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4837      	ldr	r0, [pc, #220]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000d88:	f008 f946 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d92:	f000 ff25 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d96:	2360      	movs	r3, #96	@ 0x60
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	482a      	ldr	r0, [pc, #168]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000dbc:	f007 fab8 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000dc6:	f000 ff0b 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dce:	2204      	movs	r2, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4824      	ldr	r0, [pc, #144]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000dd4:	f007 faac 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000dde:	f000 feff 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de6:	2208      	movs	r2, #8
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000dec:	f007 faa0 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000df6:	f000 fef3 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dfe:	220c      	movs	r2, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	4818      	ldr	r0, [pc, #96]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000e04:	f007 fa94 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000e0e:	f000 fee7 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000e48:	f008 f974 	bl	8009134 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000e52:	f000 fec5 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e56:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <MX_TIM1_Init+0x198>)
 8000e58:	f001 f944 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8000e5c:	bf00      	nop
 8000e5e:	3768      	adds	r7, #104	@ 0x68
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000198 	.word	0x24000198
 8000e68:	40010000 	.word	0x40010000

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000ea6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eb8:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000eba:	f006 ffcb 	bl	8007e54 <HAL_TIM_PWM_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f000 fe8c 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000ed8:	f008 f89e 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ee2:	f000 fe7d 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	@ 0x60
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000efe:	f007 fa17 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f08:	f000 fe6a 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <MX_TIM2_Init+0xb0>)
 8000f0e:	f001 f8e9 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	240001e4 	.word	0x240001e4

08000f20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	@ 0x38
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f54:	4a3d      	ldr	r2, [pc, #244]	@ (800104c <MX_TIM4_Init+0x12c>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8000f64:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f66:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b36      	ldr	r3, [pc, #216]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f78:	4833      	ldr	r0, [pc, #204]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f7a:	f006 fe9b 	bl	8007cb4 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000f84:	f000 fe2c 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f92:	4619      	mov	r1, r3
 8000f94:	482c      	ldr	r0, [pc, #176]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000f96:	f007 fadf 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000fa0:	f000 fe1e 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fa4:	4828      	ldr	r0, [pc, #160]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000fa6:	f006 ff55 	bl	8007e54 <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000fb0:	f000 fe16 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4821      	ldr	r0, [pc, #132]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000fc4:	f008 f828 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000fce:	f000 fe07 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd2:	2360      	movs	r3, #96	@ 0x60
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4817      	ldr	r0, [pc, #92]	@ (8001048 <MX_TIM4_Init+0x128>)
 8000fea:	f007 f9a1 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ff4:	f000 fdf4 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4812      	ldr	r0, [pc, #72]	@ (8001048 <MX_TIM4_Init+0x128>)
 8001000:	f007 f996 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800100a:	f000 fde9 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2208      	movs	r2, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <MX_TIM4_Init+0x128>)
 8001016:	f007 f98b 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001020:	f000 fdde 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	220c      	movs	r2, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	@ (8001048 <MX_TIM4_Init+0x128>)
 800102c:	f007 f980 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001036:	f000 fdd3 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <MX_TIM4_Init+0x128>)
 800103c:	f001 f852 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	@ 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000230 	.word	0x24000230
 800104c:	40000800 	.word	0x40000800

08001050 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001082:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001084:	4a32      	ldr	r2, [pc, #200]	@ (8001150 <MX_TIM5_Init+0x100>)
 8001086:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <MX_TIM5_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001096:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800109a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <MX_TIM5_Init+0xfc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010a8:	4828      	ldr	r0, [pc, #160]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010aa:	f006 fe03 	bl	8007cb4 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80010b4:	f000 fd94 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4821      	ldr	r0, [pc, #132]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010c6:	f007 fa47 	bl	8008558 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80010d0:	f000 fd86 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010d4:	481d      	ldr	r0, [pc, #116]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010d6:	f006 febd 	bl	8007e54 <HAL_TIM_PWM_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80010e0:	f000 fd7e 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4816      	ldr	r0, [pc, #88]	@ (800114c <MX_TIM5_Init+0xfc>)
 80010f4:	f007 ff90 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80010fe:	f000 fd6f 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001102:	2360      	movs	r3, #96	@ 0x60
 8001104:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <MX_TIM5_Init+0xfc>)
 800111a:	f007 f909 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001124:	f000 fd5c 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2208      	movs	r2, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001130:	f007 f8fe 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800113a:	f000 fd51 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <MX_TIM5_Init+0xfc>)
 8001140:	f000 ffd0 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	@ 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2400027c 	.word	0x2400027c
 8001150:	40000c00 	.word	0x40000c00

08001154 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	@ 0x58
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	222c      	movs	r2, #44	@ 0x2c
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f009 fe35 	bl	800adf0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <MX_TIM8_Init+0x114>)
 8001188:	4a38      	ldr	r2, [pc, #224]	@ (800126c <MX_TIM8_Init+0x118>)
 800118a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800118c:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <MX_TIM8_Init+0x114>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <MX_TIM8_Init+0x114>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <MX_TIM8_Init+0x114>)
 800119a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800119e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011ae:	2280      	movs	r2, #128	@ 0x80
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011b2:	482d      	ldr	r0, [pc, #180]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011b4:	f006 fe4e 	bl	8007e54 <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 fd0f 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011d2:	4619      	mov	r1, r3
 80011d4:	4824      	ldr	r0, [pc, #144]	@ (8001268 <MX_TIM8_Init+0x114>)
 80011d6:	f007 ff1f 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80011e0:	f000 fcfe 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	@ 0x60
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001200:	220c      	movs	r2, #12
 8001202:	4619      	mov	r1, r3
 8001204:	4818      	ldr	r0, [pc, #96]	@ (8001268 <MX_TIM8_Init+0x114>)
 8001206:	f007 f893 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001210:	f000 fce6 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	@ (8001268 <MX_TIM8_Init+0x114>)
 800124a:	f007 ff73 	bl	8009134 <HAL_TIMEx_ConfigBreakDeadTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001254:	f000 fcc4 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_TIM8_Init+0x114>)
 800125a:	f000 ff43 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	@ 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	240002c8 	.word	0x240002c8
 800126c:	40010400 	.word	0x40010400

08001270 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	@ 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012a4:	4a2d      	ldr	r2, [pc, #180]	@ (800135c <MX_TIM12_Init+0xec>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012b6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80012ba:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c2:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80012c8:	4823      	ldr	r0, [pc, #140]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012ca:	f006 fcf3 	bl	8007cb4 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80012d4:	f000 fc84 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481c      	ldr	r0, [pc, #112]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012e6:	f007 f937 	bl	8008558 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80012f0:	f000 fc76 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80012f4:	4818      	ldr	r0, [pc, #96]	@ (8001358 <MX_TIM12_Init+0xe8>)
 80012f6:	f006 fdad 	bl	8007e54 <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001300:	f000 fc6e 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4811      	ldr	r0, [pc, #68]	@ (8001358 <MX_TIM12_Init+0xe8>)
 8001314:	f007 fe80 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800131e:	f000 fc5f 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	@ 0x60
 8001324:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	2204      	movs	r2, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	@ (8001358 <MX_TIM12_Init+0xe8>)
 800133a:	f006 fff9 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001344:	f000 fc4c 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <MX_TIM12_Init+0xe8>)
 800134a:	f000 fecb 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	@ 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	24000314 	.word	0x24000314
 800135c:	40001800 	.word	0x40001800

08001360 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]
 8001376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_TIM13_Init+0x94>)
 800137a:	4a1f      	ldr	r2, [pc, #124]	@ (80013f8 <MX_TIM13_Init+0x98>)
 800137c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_TIM13_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_TIM13_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_TIM13_Init+0x94>)
 800138c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001390:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_TIM13_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <MX_TIM13_Init+0x94>)
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800139e:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013a0:	f006 fc88 	bl	8007cb4 <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80013aa:	f000 fc19 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013b0:	f006 fd50 	bl	8007e54 <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80013ba:	f000 fc11 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013be:	2360      	movs	r3, #96	@ 0x60
 80013c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013d6:	f006 ffab 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80013e0:	f000 fbfe 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <MX_TIM13_Init+0x94>)
 80013e6:	f000 fe7d 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000360 	.word	0x24000360
 80013f8:	40001c00 	.word	0x40001c00

080013fc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001416:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <MX_TIM14_Init+0x98>)
 8001418:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <MX_TIM14_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001428:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800142c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <MX_TIM14_Init+0x94>)
 800143c:	f006 fc3a 	bl	8007cb4 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001446:	f000 fbcb 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800144a:	4811      	ldr	r0, [pc, #68]	@ (8001490 <MX_TIM14_Init+0x94>)
 800144c:	f006 fd02 	bl	8007e54 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001456:	f000 fbc3 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	@ 0x60
 800145c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001472:	f006 ff5d 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800147c:	f000 fbb0 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <MX_TIM14_Init+0x94>)
 8001482:	f000 fe2f 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	240003ac 	.word	0x240003ac
 8001494:	40002000 	.word	0x40002000

08001498 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b09a      	sub	sp, #104	@ 0x68
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	222c      	movs	r2, #44	@ 0x2c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 fc8c 	bl	800adf0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014d8:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014da:	4a46      	ldr	r2, [pc, #280]	@ (80015f4 <MX_TIM15_Init+0x15c>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 80014ea:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014ec:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80014f0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014f8:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001504:	483a      	ldr	r0, [pc, #232]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001506:	f006 fbd5 	bl	8007cb4 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001510:	f000 fb66 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001518:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800151e:	4619      	mov	r1, r3
 8001520:	4833      	ldr	r0, [pc, #204]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001522:	f007 f819 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800152c:	f000 fb58 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001530:	482f      	ldr	r0, [pc, #188]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001532:	f006 fc8f 	bl	8007e54 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800153c:	f000 fb50 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001548:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800154c:	4619      	mov	r1, r3
 800154e:	4828      	ldr	r0, [pc, #160]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001550:	f007 fd62 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800155a:	f000 fb41 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	@ 0x60
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156a:	2300      	movs	r3, #0
 800156c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	481b      	ldr	r0, [pc, #108]	@ (80015f0 <MX_TIM15_Init+0x158>)
 8001584:	f006 fed4 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800158e:	f000 fb27 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001592:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4815      	ldr	r0, [pc, #84]	@ (80015f0 <MX_TIM15_Init+0x158>)
 800159c:	f006 fec8 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80015a6:	f000 fb1b 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80015d2:	f007 fdaf 	bl	8009134 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 80015dc:	f000 fb00 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_TIM15_Init+0x158>)
 80015e2:	f000 fd7f 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3768      	adds	r7, #104	@ 0x68
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	240003f8 	.word	0x240003f8
 80015f4:	40014000 	.word	0x40014000

080015f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b092      	sub	sp, #72	@ 0x48
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	222c      	movs	r2, #44	@ 0x2c
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f009 fbe9 	bl	800adf0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800161e:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001620:	4a31      	ldr	r2, [pc, #196]	@ (80016e8 <MX_TIM16_Init+0xf0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b2e      	ldr	r3, [pc, #184]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001630:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001632:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001636:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800163e:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800164a:	4826      	ldr	r0, [pc, #152]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800164c:	f006 fb32 	bl	8007cb4 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001656:	f000 fac3 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800165a:	4822      	ldr	r0, [pc, #136]	@ (80016e4 <MX_TIM16_Init+0xec>)
 800165c:	f006 fbfa 	bl	8007e54 <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001666:	f000 fabb 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	@ 0x60
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	@ (80016e4 <MX_TIM16_Init+0xec>)
 8001690:	f006 fe4e 	bl	8008330 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800169a:	f000 faa1 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM16_Init+0xec>)
 80016c6:	f007 fd35 	bl	8009134 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80016d0:	f000 fa86 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM16_Init+0xec>)
 80016d6:	f000 fd05 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3748      	adds	r7, #72	@ 0x48
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000444 	.word	0x24000444
 80016e8:	40014400 	.word	0x40014400

080016ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016f0:	4b22      	ldr	r3, [pc, #136]	@ (800177c <MX_UART4_Init+0x90>)
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <MX_UART4_Init+0x94>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_UART4_Init+0x90>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <MX_UART4_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_UART4_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_UART4_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_UART4_Init+0x90>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_UART4_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_UART4_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_UART4_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_UART4_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_UART4_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_UART4_Init+0x90>)
 8001736:	f007 fd99 	bl	800926c <HAL_UART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 fa4e 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_UART4_Init+0x90>)
 8001748:	f009 fa68 	bl	800ac1c <HAL_UARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 fa45 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <MX_UART4_Init+0x90>)
 800175a:	f009 fa9d 	bl	800ac98 <HAL_UARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 fa3c 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_UART4_Init+0x90>)
 800176a:	f009 fa1e 	bl	800abaa <HAL_UARTEx_DisableFifoMode>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 fa34 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	24000490 	.word	0x24000490
 8001780:	40004c00 	.word	0x40004c00

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <MX_GPIO_Init+0x17c>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	4a57      	ldr	r2, [pc, #348]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017aa:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	4a48      	ldr	r2, [pc, #288]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e6:	4b46      	ldr	r3, [pc, #280]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b42      	ldr	r3, [pc, #264]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	4a41      	ldr	r2, [pc, #260]	@ (8001900 <MX_GPIO_Init+0x17c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001804:	4b3e      	ldr	r3, [pc, #248]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	4a39      	ldr	r2, [pc, #228]	@ (8001900 <MX_GPIO_Init+0x17c>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	4a32      	ldr	r2, [pc, #200]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001840:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <MX_GPIO_Init+0x17c>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 800184e:	2200      	movs	r2, #0
 8001850:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001854:	482b      	ldr	r0, [pc, #172]	@ (8001904 <MX_GPIO_Init+0x180>)
 8001856:	f002 f94d 	bl	8003af4 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001860:	4829      	ldr	r0, [pc, #164]	@ (8001908 <MX_GPIO_Init+0x184>)
 8001862:	f002 f947 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800186c:	4827      	ldr	r0, [pc, #156]	@ (800190c <MX_GPIO_Init+0x188>)
 800186e:	f002 f941 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001872:	2200      	movs	r2, #0
 8001874:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001878:	4825      	ldr	r0, [pc, #148]	@ (8001910 <MX_GPIO_Init+0x18c>)
 800187a:	f002 f93b 	bl	8003af4 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 800187e:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001882:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	481b      	ldr	r0, [pc, #108]	@ (8001904 <MX_GPIO_Init+0x180>)
 8001898:	f001 ff7c 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 800189c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4814      	ldr	r0, [pc, #80]	@ (8001908 <MX_GPIO_Init+0x184>)
 80018b6:	f001 ff6d 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin SPI2_NSS_Pin QUADSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin;
 80018ba:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	480e      	ldr	r0, [pc, #56]	@ (800190c <MX_GPIO_Init+0x188>)
 80018d4:	f001 ff5e 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 80018d8:	f640 73f7 	movw	r3, #4087	@ 0xff7
 80018dc:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MX_GPIO_Init+0x18c>)
 80018f2:	f001 ff4f 	bl	8003794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	@ 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	58024400 	.word	0x58024400
 8001904:	58021000 	.word	0x58021000
 8001908:	58020800 	.word	0x58020800
 800190c:	58020400 	.word	0x58020400
 8001910:	58020c00 	.word	0x58020c00
 8001914:	00000000 	.word	0x00000000

08001918 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
		static int i=0;
		static int dir=1;
		static int phase = 1;
		const double step = 0.02;// reference (arbitrary units)
 8001920:	a321      	add	r3, pc, #132	@ (adr r3, 80019a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (htim==&htim1){
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d128      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  i+=1;
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800193a:	6013      	str	r3, [r2, #0]
		  if(i%ONESEC == TRUE)
 800193c:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001942:	fb83 1302 	smull	r1, r3, r3, r2
 8001946:	1319      	asrs	r1, r3, #12
 8001948:	17d3      	asrs	r3, r2, #31
 800194a:	1acb      	subs	r3, r1, r3
 800194c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d104      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  {
			phase = -phase;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	425b      	negs	r3, r3
 8001960:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001962:	6013      	str	r3, [r2, #0]
		  }
		  ref = phase*step;
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001970:	ed97 7b02 	vldr	d7, [r7, #8]
 8001974:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800197a:	ed83 7b00 	vstr	d7, [r3]
		  ctrl_tmr_expired = TRUE;
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
	  }

}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	24000198 	.word	0x24000198
 8001994:	24000570 	.word	0x24000570
 8001998:	68db8bad 	.word	0x68db8bad
 800199c:	24000000 	.word	0x24000000
 80019a0:	24000528 	.word	0x24000528
 80019a4:	24000524 	.word	0x24000524
 80019a8:	47ae147b 	.word	0x47ae147b
 80019ac:	3f947ae1 	.word	0x3f947ae1

080019b0 <control_update>:


static void control_update(double ref)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0b00 	vstr	d0, [r7]
	  // output value of the lead filter
	  double out = 0;
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  // sign bit of the command fed to phase input on the h-bridge
	  int phase=0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
	  uint16_t dutycycle=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	81fb      	strh	r3, [r7, #14]
#ifdef LEADFILTER
	  out = compute_out(ref) ;
 80019ce:	ed97 0b00 	vldr	d0, [r7]
 80019d2:	f000 f869 	bl	8001aa8 <compute_out>
 80019d6:	ed87 0b04 	vstr	d0, [r7, #16]
#else
	  out = ref;
#endif

	  // set the sign of the move (phase)
	  if(out <0)
 80019da:	ed97 7b04 	vldr	d7, [r7, #16]
 80019de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d502      	bpl.n	80019ee <control_update+0x3e>
	  {
		phase = GPIO_PIN_RESET; // reverse direction
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	e001      	b.n	80019f2 <control_update+0x42>
	  } else {
		phase = GPIO_PIN_SET; //forward direction
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	2101      	movs	r1, #1
 80019fa:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <control_update+0x90>)
 80019fc:	f002 f87a 	bl	8003af4 <HAL_GPIO_WritePin>

	  // calculate the dutycycle
	  out = fabs(out); // duty cycle must be positive
 8001a00:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a04:	eeb0 7bc7 	vabs.f64	d7, d7
 8001a08:	ed87 7b04 	vstr	d7, [r7, #16]
	  dutycycle = calc_dutycycle(out,VSS);
 8001a0c:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001a38 <control_update+0x88>
 8001a10:	eeb0 1b47 	vmov.f64	d1, d7
 8001a14:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a18:	f000 f81a 	bl	8001a50 <calc_dutycycle>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	81fb      	strh	r3, [r7, #14]
	  TIM1->CCR1 = dutycycle; //set the new timer duty cycle
 8001a20:	4a08      	ldr	r2, [pc, #32]	@ (8001a44 <control_update+0x94>)
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	6353      	str	r3, [r2, #52]	@ 0x34


	  // reset timer flag
	  ctrl_tmr_expired = FALSE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <control_update+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	f3af 8000 	nop.w
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	3ffccccc 	.word	0x3ffccccc
 8001a40:	58021000 	.word	0x58021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	24000524 	.word	0x24000524
 8001a4c:	00000000 	.word	0x00000000

08001a50 <calc_dutycycle>:
	ctrl_tmr_expired = FALSE;
}
*/

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a5a:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001a5e:	2300      	movs	r3, #0
 8001a60:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001a62:	ed97 5b02 	vldr	d5, [r7, #8]
 8001a66:	ed97 6b00 	vldr	d6, [r7]
 8001a6a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a6e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001aa0 <calc_dutycycle+0x50>
 8001a72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a7a:	ee17 3a90 	vmov	r3, s15
 8001a7e:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001a80:	8afb      	ldrh	r3, [r7, #22]
 8001a82:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d902      	bls.n	8001a90 <calc_dutycycle+0x40>
 8001a8a:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8001a8e:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001a90:	8afb      	ldrh	r3, [r7, #22]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	40d76fc0 	.word	0x40d76fc0

08001aa8 <compute_out>:
		sine_vals[i] = sin(i*scale);
	}
}


double compute_out(double ref){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0b00 	vstr	d0, [r7]
    const double a[3] = {1.00,-1.721415952850116,0.740818220681718};
    // lead filter denominator coefficients
    const double b[3]={0, 0.655716809429977,-0.636314541598375};
    double out;
    // compute filter output
    u[0] = ref;
 8001ab2:	4931      	ldr	r1, [pc, #196]	@ (8001b78 <compute_out+0xd0>)
 8001ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab8:	e9c1 2300 	strd	r2, r3, [r1]
    //    y[0] = -a[1]*y[1] - a[2]*y[2] +  b[0]*u[0] + b[1]*u[1] +b[2]*u[2];
    y[0] = -a[1]*y[1] - a[2]*y[2] +  b[0]*u[0] + b[1]*u[1] +b[2]*u[2];
 8001abc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b7c <compute_out+0xd4>)
 8001abe:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ac2:	eeb1 6b47 	vneg.f64	d6, d7
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <compute_out+0xd8>)
 8001ac8:	ed93 7b02 	vldr	d7, [r3, #8]
 8001acc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <compute_out+0xd4>)
 8001ad2:	ed93 5b04 	vldr	d5, [r3, #16]
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <compute_out+0xd8>)
 8001ad8:	ed93 7b04 	vldr	d7, [r3, #16]
 8001adc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ae0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <compute_out+0xdc>)
 8001ae6:	ed93 5b00 	vldr	d5, [r3]
 8001aea:	4b23      	ldr	r3, [pc, #140]	@ (8001b78 <compute_out+0xd0>)
 8001aec:	ed93 7b00 	vldr	d7, [r3]
 8001af0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001af4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <compute_out+0xdc>)
 8001afa:	ed93 5b02 	vldr	d5, [r3, #8]
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <compute_out+0xd0>)
 8001b00:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <compute_out+0xdc>)
 8001b0e:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <compute_out+0xd0>)
 8001b14:	ed93 7b04 	vldr	d7, [r3, #16]
 8001b18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b20:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <compute_out+0xd8>)
 8001b22:	ed83 7b00 	vstr	d7, [r3]

    // update state
    y[2] = y[1];
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <compute_out+0xd8>)
 8001b28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b2c:	4914      	ldr	r1, [pc, #80]	@ (8001b80 <compute_out+0xd8>)
 8001b2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    y[1] = y[0];
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <compute_out+0xd8>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	4911      	ldr	r1, [pc, #68]	@ (8001b80 <compute_out+0xd8>)
 8001b3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    u[2] = u[1];
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <compute_out+0xd0>)
 8001b40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b44:	490c      	ldr	r1, [pc, #48]	@ (8001b78 <compute_out+0xd0>)
 8001b46:	e9c1 2304 	strd	r2, r3, [r1, #16]
    u[1] = u[0];
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <compute_out+0xd0>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	4909      	ldr	r1, [pc, #36]	@ (8001b78 <compute_out+0xd0>)
 8001b52:	e9c1 2302 	strd	r2, r3, [r1, #8]
    out=y[0];
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <compute_out+0xd8>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return(out);
 8001b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b64:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b68:	eeb0 0b47 	vmov.f64	d0, d7
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	24000578 	.word	0x24000578
 8001b7c:	0800b730 	.word	0x0800b730
 8001b80:	24000590 	.word	0x24000590
 8001b84:	0800b748 	.word	0x0800b748

08001b88 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b9a:	f001 f81f 	bl	8002bdc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001baa:	231f      	movs	r3, #31
 8001bac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001bae:	2387      	movs	r3, #135	@ 0x87
 8001bb0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 f83d 	bl	8002c4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001bd2:	2004      	movs	r0, #4
 8001bd4:	f001 f81a 	bl	8002c0c <HAL_MPU_Enable>

}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <Error_Handler+0x8>

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_MspInit+0x30>)
 8001bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bf8:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <HAL_MspInit+0x30>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_MspInit+0x30>)
 8001c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	58024400 	.word	0x58024400

08001c20 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0b4      	sub	sp, #208	@ 0xd0
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	22c0      	movs	r2, #192	@ 0xc0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f009 f8dd 	bl	800adf0 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <HAL_HRTIM_MspInit+0x6c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d121      	bne.n	8001c84 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fa00 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001c62:	f7ff ffbd 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_HRTIM_MspInit+0x70>)
 8001c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c6c:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_HRTIM_MspInit+0x70>)
 8001c6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_HRTIM_MspInit+0x70>)
 8001c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	37d0      	adds	r7, #208	@ 0xd0
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40017400 	.word	0x40017400
 8001c90:	58024400 	.word	0x58024400

08001c94 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <HAL_HRTIM_MspPostInit+0xac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d13f      	bne.n	8001d36 <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	4a1a      	ldr	r2, [pc, #104]	@ (8001d44 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_HRTIM_MspPostInit+0xb0>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001cf2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480e      	ldr	r0, [pc, #56]	@ (8001d48 <HAL_HRTIM_MspPostInit+0xb4>)
 8001d10:	f001 fd40 	bl	8003794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d14:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <HAL_HRTIM_MspPostInit+0xb8>)
 8001d32:	f001 fd2f 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40017400 	.word	0x40017400
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58020800 	.word	0x58020800
 8001d4c:	58020000 	.word	0x58020000

08001d50 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ba      	sub	sp, #232	@ 0xe8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	22c0      	movs	r2, #192	@ 0xc0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f009 f83d 	bl	800adf0 <memset>
  if(hlptim->Instance==LPTIM1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <HAL_LPTIM_MspInit+0xd8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d14e      	bne.n	8001e1e <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001d80:	f04f 0220 	mov.w	r2, #32
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 f960 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001da2:	f7ff ff1d 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <HAL_LPTIM_MspInit+0xdc>)
 8001da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dac:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_LPTIM_MspInit+0xdc>)
 8001dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001db2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001db6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <HAL_LPTIM_MspInit+0xdc>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_LPTIM_MspInit+0xdc>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	4a18      	ldr	r2, [pc, #96]	@ (8001e2c <HAL_LPTIM_MspInit+0xdc>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_LPTIM_MspInit+0xdc>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <HAL_LPTIM_MspInit+0xe0>)
 8001e0a:	f001 fcc3 	bl	8003794 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	205d      	movs	r0, #93	@ 0x5d
 8001e14:	f000 fead 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001e18:	205d      	movs	r0, #93	@ 0x5d
 8001e1a:	f000 fec4 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	37e8      	adds	r7, #232	@ 0xe8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40002400 	.word	0x40002400
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	58020c00 	.word	0x58020c00

08001e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a74      	ldr	r2, [pc, #464]	@ (8002014 <HAL_TIM_Base_MspInit+0x1e0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d117      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e46:	4b74      	ldr	r3, [pc, #464]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e4c:	4a72      	ldr	r2, [pc, #456]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e56:	4b70      	ldr	r3, [pc, #448]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	2019      	movs	r0, #25
 8001e6a:	f000 fe82 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e6e:	2019      	movs	r0, #25
 8001e70:	f000 fe99 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e74:	e0c9      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM4)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a68      	ldr	r2, [pc, #416]	@ (800201c <HAL_TIM_Base_MspInit+0x1e8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d117      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e80:	4b65      	ldr	r3, [pc, #404]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e86:	4a64      	ldr	r2, [pc, #400]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e90:	4b61      	ldr	r3, [pc, #388]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	201e      	movs	r0, #30
 8001ea4:	f000 fe65 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ea8:	201e      	movs	r0, #30
 8001eaa:	f000 fe7c 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001eae:	e0ac      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM5)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8002020 <HAL_TIM_Base_MspInit+0x1ec>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d117      	bne.n	8001eea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eba:	4b57      	ldr	r3, [pc, #348]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec0:	4a55      	ldr	r2, [pc, #340]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ec2:	f043 0308 	orr.w	r3, r3, #8
 8001ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eca:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	2032      	movs	r0, #50	@ 0x32
 8001ede:	f000 fe48 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ee2:	2032      	movs	r0, #50	@ 0x32
 8001ee4:	f000 fe5f 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001ee8:	e08f      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a4d      	ldr	r2, [pc, #308]	@ (8002024 <HAL_TIM_Base_MspInit+0x1f0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d117      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ef4:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001efa:	4a47      	ldr	r2, [pc, #284]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f04:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	202b      	movs	r0, #43	@ 0x2b
 8001f18:	f000 fe2b 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f1c:	202b      	movs	r0, #43	@ 0x2b
 8001f1e:	f000 fe42 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001f22:	e072      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3f      	ldr	r2, [pc, #252]	@ (8002028 <HAL_TIM_Base_MspInit+0x1f4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d117      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f34:	4a38      	ldr	r2, [pc, #224]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f3e:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	202c      	movs	r0, #44	@ 0x2c
 8001f52:	f000 fe0e 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f56:	202c      	movs	r0, #44	@ 0x2c
 8001f58:	f000 fe25 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001f5c:	e055      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a32      	ldr	r2, [pc, #200]	@ (800202c <HAL_TIM_Base_MspInit+0x1f8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d117      	bne.n	8001f98 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f68:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	202d      	movs	r0, #45	@ 0x2d
 8001f8c:	f000 fdf1 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f90:	202d      	movs	r0, #45	@ 0x2d
 8001f92:	f000 fe08 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001f96:	e038      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM15)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a24      	ldr	r2, [pc, #144]	@ (8002030 <HAL_TIM_Base_MspInit+0x1fc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d117      	bne.n	8001fd2 <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2074      	movs	r0, #116	@ 0x74
 8001fc6:	f000 fdd4 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001fca:	2074      	movs	r0, #116	@ 0x74
 8001fcc:	f000 fdeb 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001fd0:	e01b      	b.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM16)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_TIM_Base_MspInit+0x200>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d116      	bne.n	800200a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fec:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <HAL_TIM_Base_MspInit+0x1e4>)
 8001fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2075      	movs	r0, #117	@ 0x75
 8002000:	f000 fdb7 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002004:	2075      	movs	r0, #117	@ 0x75
 8002006:	f000 fdce 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	@ 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	58024400 	.word	0x58024400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40001800 	.word	0x40001800
 8002028:	40001c00 	.word	0x40001c00
 800202c:	40002000 	.word	0x40002000
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400

08002038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002048:	d117      	bne.n	800207a <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_TIM_PWM_MspInit+0xa4>)
 800204c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002050:	4a22      	ldr	r2, [pc, #136]	@ (80020dc <HAL_TIM_PWM_MspInit+0xa4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800205a:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_TIM_PWM_MspInit+0xa4>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	201c      	movs	r0, #28
 800206e:	f000 fd80 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002072:	201c      	movs	r0, #28
 8002074:	f000 fd97 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002078:	e02b      	b.n	80020d2 <HAL_TIM_PWM_MspInit+0x9a>
  else if(htim_pwm->Instance==TIM8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a18      	ldr	r2, [pc, #96]	@ (80020e0 <HAL_TIM_PWM_MspInit+0xa8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d126      	bne.n	80020d2 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_TIM_PWM_MspInit+0xa4>)
 8002086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208a:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <HAL_TIM_PWM_MspInit+0xa4>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_TIM_PWM_MspInit+0xa4>)
 8002096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	202b      	movs	r0, #43	@ 0x2b
 80020a8:	f000 fd63 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020ac:	202b      	movs	r0, #43	@ 0x2b
 80020ae:	f000 fd7a 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	202c      	movs	r0, #44	@ 0x2c
 80020b8:	f000 fd5b 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020bc:	202c      	movs	r0, #44	@ 0x2c
 80020be:	f000 fd72 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	202d      	movs	r0, #45	@ 0x2d
 80020c8:	f000 fd53 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80020cc:	202d      	movs	r0, #45	@ 0x2d
 80020ce:	f000 fd6a 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	@ 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4aa4      	ldr	r2, [pc, #656]	@ (8002394 <HAL_TIM_MspPostInit+0x2b0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d120      	bne.n	8002148 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002106:	4ba4      	ldr	r3, [pc, #656]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210c:	4aa2      	ldr	r2, [pc, #648]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800210e:	f043 0310 	orr.w	r3, r3, #16
 8002112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002116:	4ba0      	ldr	r3, [pc, #640]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
 8002122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002124:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002136:	2301      	movs	r3, #1
 8002138:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800213e:	4619      	mov	r1, r3
 8002140:	4896      	ldr	r0, [pc, #600]	@ (800239c <HAL_TIM_MspPostInit+0x2b8>)
 8002142:	f001 fb27 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002146:	e189      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002150:	d11f      	bne.n	8002192 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b91      	ldr	r3, [pc, #580]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	4a8f      	ldr	r2, [pc, #572]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002162:	4b8d      	ldr	r3, [pc, #564]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800216e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002170:	2301      	movs	r3, #1
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002180:	2301      	movs	r3, #1
 8002182:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002188:	4619      	mov	r1, r3
 800218a:	4885      	ldr	r0, [pc, #532]	@ (80023a0 <HAL_TIM_MspPostInit+0x2bc>)
 800218c:	f001 fb02 	bl	8003794 <HAL_GPIO_Init>
}
 8002190:	e164      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a83      	ldr	r2, [pc, #524]	@ (80023a4 <HAL_TIM_MspPostInit+0x2c0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d13f      	bne.n	800221c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b77      	ldr	r3, [pc, #476]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c0:	4a75      	ldr	r2, [pc, #468]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ca:	4b73      	ldr	r3, [pc, #460]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80021d8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ea:	2302      	movs	r3, #2
 80021ec:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021f2:	4619      	mov	r1, r3
 80021f4:	486c      	ldr	r0, [pc, #432]	@ (80023a8 <HAL_TIM_MspPostInit+0x2c4>)
 80021f6:	f001 facd 	bl	8003794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800220a:	2302      	movs	r3, #2
 800220c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002212:	4619      	mov	r1, r3
 8002214:	4865      	ldr	r0, [pc, #404]	@ (80023ac <HAL_TIM_MspPostInit+0x2c8>)
 8002216:	f001 fabd 	bl	8003794 <HAL_GPIO_Init>
}
 800221a:	e11f      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a63      	ldr	r2, [pc, #396]	@ (80023b0 <HAL_TIM_MspPostInit+0x2cc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d11f      	bne.n	8002266 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	4b5c      	ldr	r3, [pc, #368]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222c:	4a5a      	ldr	r2, [pc, #360]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002236:	4b58      	ldr	r3, [pc, #352]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002244:	2306      	movs	r3, #6
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002254:	2302      	movs	r3, #2
 8002256:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800225c:	4619      	mov	r1, r3
 800225e:	4850      	ldr	r0, [pc, #320]	@ (80023a0 <HAL_TIM_MspPostInit+0x2bc>)
 8002260:	f001 fa98 	bl	8003794 <HAL_GPIO_Init>
}
 8002264:	e0fa      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_TIM_MspPostInit+0x2d0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d120      	bne.n	80022b2 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002270:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002276:	4a48      	ldr	r2, [pc, #288]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002280:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800228e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022a0:	2303      	movs	r3, #3
 80022a2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022a8:	4619      	mov	r1, r3
 80022aa:	4843      	ldr	r0, [pc, #268]	@ (80023b8 <HAL_TIM_MspPostInit+0x2d4>)
 80022ac:	f001 fa72 	bl	8003794 <HAL_GPIO_Init>
}
 80022b0:	e0d4      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a41      	ldr	r2, [pc, #260]	@ (80023bc <HAL_TIM_MspPostInit+0x2d8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d120      	bne.n	80022fe <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c2:	4a35      	ldr	r2, [pc, #212]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80022ec:	2302      	movs	r3, #2
 80022ee:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022f4:	4619      	mov	r1, r3
 80022f6:	482d      	ldr	r0, [pc, #180]	@ (80023ac <HAL_TIM_MspPostInit+0x2c8>)
 80022f8:	f001 fa4c 	bl	8003794 <HAL_GPIO_Init>
}
 80022fc:	e0ae      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2f      	ldr	r2, [pc, #188]	@ (80023c0 <HAL_TIM_MspPostInit+0x2dc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d11f      	bne.n	8002348 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230e:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002318:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002326:	2340      	movs	r3, #64	@ 0x40
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002336:	2309      	movs	r3, #9
 8002338:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800233e:	4619      	mov	r1, r3
 8002340:	4817      	ldr	r0, [pc, #92]	@ (80023a0 <HAL_TIM_MspPostInit+0x2bc>)
 8002342:	f001 fa27 	bl	8003794 <HAL_GPIO_Init>
}
 8002346:	e089      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_TIM_MspPostInit+0x2e0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d13a      	bne.n	80023c8 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002358:	4a0f      	ldr	r2, [pc, #60]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_TIM_MspPostInit+0x2b4>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002380:	2309      	movs	r3, #9
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002388:	4619      	mov	r1, r3
 800238a:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <HAL_TIM_MspPostInit+0x2bc>)
 800238c:	f001 fa02 	bl	8003794 <HAL_GPIO_Init>
}
 8002390:	e064      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	58024400 	.word	0x58024400
 800239c:	58021000 	.word	0x58021000
 80023a0:	58020000 	.word	0x58020000
 80023a4:	40000800 	.word	0x40000800
 80023a8:	58020c00 	.word	0x58020c00
 80023ac:	58020400 	.word	0x58020400
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40010400 	.word	0x40010400
 80023b8:	58020800 	.word	0x58020800
 80023bc:	40001800 	.word	0x40001800
 80023c0:	40001c00 	.word	0x40001c00
 80023c4:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a25      	ldr	r2, [pc, #148]	@ (8002464 <HAL_TIM_MspPostInit+0x380>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d11f      	bne.n	8002412 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d2:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_TIM_MspPostInit+0x384>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d8:	4a23      	ldr	r2, [pc, #140]	@ (8002468 <HAL_TIM_MspPostInit+0x384>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_TIM_MspPostInit+0x384>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023f0:	2360      	movs	r3, #96	@ 0x60
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002400:	2304      	movs	r3, #4
 8002402:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002404:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002408:	4619      	mov	r1, r3
 800240a:	4818      	ldr	r0, [pc, #96]	@ (800246c <HAL_TIM_MspPostInit+0x388>)
 800240c:	f001 f9c2 	bl	8003794 <HAL_GPIO_Init>
}
 8002410:	e024      	b.n	800245c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a16      	ldr	r2, [pc, #88]	@ (8002470 <HAL_TIM_MspPostInit+0x38c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11f      	bne.n	800245c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <HAL_TIM_MspPostInit+0x384>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002422:	4a11      	ldr	r2, [pc, #68]	@ (8002468 <HAL_TIM_MspPostInit+0x384>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800242c:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_TIM_MspPostInit+0x384>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800243a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800244c:	2301      	movs	r3, #1
 800244e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002454:	4619      	mov	r1, r3
 8002456:	4807      	ldr	r0, [pc, #28]	@ (8002474 <HAL_TIM_MspPostInit+0x390>)
 8002458:	f001 f99c 	bl	8003794 <HAL_GPIO_Init>
}
 800245c:	bf00      	nop
 800245e:	3748      	adds	r7, #72	@ 0x48
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40014000 	.word	0x40014000
 8002468:	58024400 	.word	0x58024400
 800246c:	58021000 	.word	0x58021000
 8002470:	40014400 	.word	0x40014400
 8002474:	58020400 	.word	0x58020400

08002478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0ba      	sub	sp, #232	@ 0xe8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	22c0      	movs	r2, #192	@ 0xc0
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f008 fca9 	bl	800adf0 <memset>
  if(huart->Instance==UART4)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002550 <HAL_UART_MspInit+0xd8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d14e      	bne.n	8002546 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024a8:	f04f 0202 	mov.w	r2, #2
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fdcc 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024ca:	f7ff fb89 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024ce:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_UART_MspInit+0xdc>)
 80024d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002554 <HAL_UART_MspInit+0xdc>)
 80024d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024de:	4b1d      	ldr	r3, [pc, #116]	@ (8002554 <HAL_UART_MspInit+0xdc>)
 80024e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_UART_MspInit+0xdc>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f2:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_UART_MspInit+0xdc>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024fc:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_UART_MspInit+0xdc>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800250a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800250e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002524:	2308      	movs	r3, #8
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800252e:	4619      	mov	r1, r3
 8002530:	4809      	ldr	r0, [pc, #36]	@ (8002558 <HAL_UART_MspInit+0xe0>)
 8002532:	f001 f92f 	bl	8003794 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2034      	movs	r0, #52	@ 0x34
 800253c:	f000 fb19 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002540:	2034      	movs	r0, #52	@ 0x34
 8002542:	f000 fb30 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	37e8      	adds	r7, #232	@ 0xe8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40004c00 	.word	0x40004c00
 8002554:	58024400 	.word	0x58024400
 8002558:	58020800 	.word	0x58020800

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <NMI_Handler+0x4>

08002564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <MemManage_Handler+0x4>

08002574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <UsageFault_Handler+0x4>

08002584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b2:	f000 f9d7 	bl	8002964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <TIM1_UP_IRQHandler+0x10>)
 80025c2:	f005 fdad 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	24000198 	.word	0x24000198

080025d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <TIM2_IRQHandler+0x10>)
 80025d6:	f005 fda3 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	240001e4 	.word	0x240001e4

080025e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <TIM4_IRQHandler+0x10>)
 80025ea:	f005 fd99 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000230 	.word	0x24000230

080025f8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025fc:	4803      	ldr	r0, [pc, #12]	@ (800260c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80025fe:	f005 fd8f 	bl	8008120 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002602:	4803      	ldr	r0, [pc, #12]	@ (8002610 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002604:	f005 fd8c 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	240002c8 	.word	0x240002c8
 8002610:	24000314 	.word	0x24000314

08002614 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002618:	4803      	ldr	r0, [pc, #12]	@ (8002628 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800261a:	f005 fd81 	bl	8008120 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800261e:	4803      	ldr	r0, [pc, #12]	@ (800262c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002620:	f005 fd7e 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	240002c8 	.word	0x240002c8
 800262c:	24000360 	.word	0x24000360

08002630 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002634:	4803      	ldr	r0, [pc, #12]	@ (8002644 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002636:	f005 fd73 	bl	8008120 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800263a:	4803      	ldr	r0, [pc, #12]	@ (8002648 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800263c:	f005 fd70 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	240002c8 	.word	0x240002c8
 8002648:	240003ac 	.word	0x240003ac

0800264c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <TIM5_IRQHandler+0x10>)
 8002652:	f005 fd65 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2400027c 	.word	0x2400027c

08002660 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002664:	4802      	ldr	r0, [pc, #8]	@ (8002670 <UART4_IRQHandler+0x10>)
 8002666:	f006 fedf 	bl	8009428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	24000490 	.word	0x24000490

08002674 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002678:	4802      	ldr	r0, [pc, #8]	@ (8002684 <LPTIM1_IRQHandler+0x10>)
 800267a:	f002 fbed 	bl	8004e58 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	24000160 	.word	0x24000160

08002688 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800268c:	4802      	ldr	r0, [pc, #8]	@ (8002698 <TIM15_IRQHandler+0x10>)
 800268e:	f005 fd47 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	240003f8 	.word	0x240003f8

0800269c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <TIM16_IRQHandler+0x10>)
 80026a2:	f005 fd3d 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	24000444 	.word	0x24000444

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	@ (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f008 fb8e 	bl	800ae00 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	220c      	movs	r2, #12
 80026e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	24080000 	.word	0x24080000
 8002710:	00000400 	.word	0x00000400
 8002714:	240005a8 	.word	0x240005a8
 8002718:	240006f8 	.word	0x240006f8

0800271c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002720:	4b37      	ldr	r3, [pc, #220]	@ (8002800 <SystemInit+0xe4>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	4a36      	ldr	r2, [pc, #216]	@ (8002800 <SystemInit+0xe4>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002730:	4b34      	ldr	r3, [pc, #208]	@ (8002804 <SystemInit+0xe8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2b06      	cmp	r3, #6
 800273a:	d807      	bhi.n	800274c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800273c:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <SystemInit+0xe8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 030f 	bic.w	r3, r3, #15
 8002744:	4a2f      	ldr	r2, [pc, #188]	@ (8002804 <SystemInit+0xe8>)
 8002746:	f043 0307 	orr.w	r3, r3, #7
 800274a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800274c:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <SystemInit+0xec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2d      	ldr	r2, [pc, #180]	@ (8002808 <SystemInit+0xec>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <SystemInit+0xec>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800275e:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <SystemInit+0xec>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4929      	ldr	r1, [pc, #164]	@ (8002808 <SystemInit+0xec>)
 8002764:	4b29      	ldr	r3, [pc, #164]	@ (800280c <SystemInit+0xf0>)
 8002766:	4013      	ands	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800276a:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <SystemInit+0xe8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002776:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <SystemInit+0xe8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <SystemInit+0xe8>)
 8002780:	f043 0307 	orr.w	r3, r3, #7
 8002784:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <SystemInit+0xec>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <SystemInit+0xec>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <SystemInit+0xec>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <SystemInit+0xec>)
 800279a:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <SystemInit+0xf4>)
 800279c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <SystemInit+0xec>)
 80027a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <SystemInit+0xf8>)
 80027a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <SystemInit+0xec>)
 80027a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <SystemInit+0xfc>)
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027aa:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <SystemInit+0xec>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027b0:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <SystemInit+0xec>)
 80027b2:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <SystemInit+0xfc>)
 80027b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027b6:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <SystemInit+0xec>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <SystemInit+0xec>)
 80027be:	4a16      	ldr	r2, [pc, #88]	@ (8002818 <SystemInit+0xfc>)
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <SystemInit+0xec>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <SystemInit+0xec>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <SystemInit+0xec>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <SystemInit+0xec>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <SystemInit+0x100>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <SystemInit+0x104>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e6:	d202      	bcs.n	80027ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <SystemInit+0x108>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <SystemInit+0x10c>)
 80027f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	52002000 	.word	0x52002000
 8002808:	58024400 	.word	0x58024400
 800280c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002810:	02020200 	.word	0x02020200
 8002814:	01ff0000 	.word	0x01ff0000
 8002818:	01010280 	.word	0x01010280
 800281c:	5c001000 	.word	0x5c001000
 8002820:	ffff0000 	.word	0xffff0000
 8002824:	51008108 	.word	0x51008108
 8002828:	52004000 	.word	0x52004000

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002864 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002830:	f7ff ff74 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002834:	480c      	ldr	r0, [pc, #48]	@ (8002868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002836:	490d      	ldr	r1, [pc, #52]	@ (800286c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800283c:	e002      	b.n	8002844 <LoopCopyDataInit>

0800283e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002842:	3304      	adds	r3, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002848:	d3f9      	bcc.n	800283e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284a:	4a0a      	ldr	r2, [pc, #40]	@ (8002874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800284c:	4c0a      	ldr	r4, [pc, #40]	@ (8002878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002850:	e001      	b.n	8002856 <LoopFillZerobss>

08002852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002854:	3204      	adds	r2, #4

08002856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002858:	d3fb      	bcc.n	8002852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800285a:	f008 fad7 	bl	800ae0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7fd ff13 	bl	8000688 <main>
  bx  lr
 8002862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002864:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002868:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800286c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002870:	0800b7dc 	.word	0x0800b7dc
  ldr r2, =_sbss
 8002874:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002878:	240006f8 	.word	0x240006f8

0800287c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC3_IRQHandler>
	...

08002880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002886:	2003      	movs	r0, #3
 8002888:	f000 f968 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800288c:	f003 fa10 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <HAL_Init+0x68>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4913      	ldr	r1, [pc, #76]	@ (80028ec <HAL_Init+0x6c>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <HAL_Init+0x68>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <HAL_Init+0x6c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	4a0b      	ldr	r2, [pc, #44]	@ (80028f0 <HAL_Init+0x70>)
 80028c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028c4:	4a0b      	ldr	r2, [pc, #44]	@ (80028f4 <HAL_Init+0x74>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ca:	200f      	movs	r0, #15
 80028cc:	f000 f814 	bl	80028f8 <HAL_InitTick>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e002      	b.n	80028e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028da:	f7ff f987 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	58024400 	.word	0x58024400
 80028ec:	0800b760 	.word	0x0800b760
 80028f0:	24000008 	.word	0x24000008
 80028f4:	24000004 	.word	0x24000004

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002900:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <HAL_InitTick+0x60>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e021      	b.n	8002950 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <HAL_InitTick+0x64>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <HAL_InitTick+0x60>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800291a:	fbb3 f3f1 	udiv	r3, r3, r1
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f94d 	bl	8002bc2 <HAL_SYSTICK_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00e      	b.n	8002950 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d80a      	bhi.n	800294e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002938:	2200      	movs	r2, #0
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002940:	f000 f917 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002944:	4a06      	ldr	r2, [pc, #24]	@ (8002960 <HAL_InitTick+0x68>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	24000010 	.word	0x24000010
 800295c:	24000004 	.word	0x24000004
 8002960:	2400000c 	.word	0x2400000c

08002964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_IncTick+0x20>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_IncTick+0x24>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4413      	add	r3, r2
 8002974:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <HAL_IncTick+0x24>)
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	24000010 	.word	0x24000010
 8002988:	240005ac 	.word	0x240005ac

0800298c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_GetTick+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	240005ac 	.word	0x240005ac

080029a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029a8:	4b03      	ldr	r3, [pc, #12]	@ (80029b8 <HAL_GetREVID+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0c1b      	lsrs	r3, r3, #16
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	5c001000 	.word	0x5c001000

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <__NVIC_SetPriorityGrouping+0x40>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <__NVIC_SetPriorityGrouping+0x40>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00
 8002a00:	05fa0000 	.word	0x05fa0000

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	@ (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	@ (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	@ (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	@ 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b3c:	f7ff ff8e 	bl	8002a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff29 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff40 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff90 	bl	8002ab0 <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5f 	bl	8002a5c <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff33 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa4 	bl	8002b18 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002be0:	f3bf 8f5f 	dmb	sy
}
 8002be4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002be6:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <HAL_MPU_Disable+0x28>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	4a06      	ldr	r2, [pc, #24]	@ (8002c04 <HAL_MPU_Disable+0x28>)
 8002bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bf2:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <HAL_MPU_Disable+0x2c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000ed00 	.word	0xe000ed00
 8002c08:	e000ed90 	.word	0xe000ed90

08002c0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c14:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_MPU_Enable+0x38>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <HAL_MPU_Enable+0x3c>)
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <HAL_MPU_Enable+0x3c>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c2a:	f3bf 8f4f 	dsb	sy
}
 8002c2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c30:	f3bf 8f6f 	isb	sy
}
 8002c34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed90 	.word	0xe000ed90
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	785a      	ldrb	r2, [r3, #1]
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	4a19      	ldr	r2, [pc, #100]	@ (8002cc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c68:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7b1b      	ldrb	r3, [r3, #12]
 8002c74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7adb      	ldrb	r3, [r3, #11]
 8002c7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7a9b      	ldrb	r3, [r3, #10]
 8002c82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7b5b      	ldrb	r3, [r3, #13]
 8002c8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7b9b      	ldrb	r3, [r3, #14]
 8002c92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7bdb      	ldrb	r3, [r3, #15]
 8002c9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7a5b      	ldrb	r3, [r3, #9]
 8002ca2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7a1b      	ldrb	r3, [r3, #8]
 8002caa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cb4:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cb6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cb8:	6113      	str	r3, [r2, #16]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed90 	.word	0xe000ed90

08002ccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff fe5a 	bl	800298c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e2dc      	b.n	800329e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2280      	movs	r2, #128	@ 0x80
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e2cd      	b.n	800329e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a76      	ldr	r2, [pc, #472]	@ (8002ee0 <HAL_DMA_Abort+0x214>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04a      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a74      	ldr	r2, [pc, #464]	@ (8002ee4 <HAL_DMA_Abort+0x218>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d045      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a73      	ldr	r2, [pc, #460]	@ (8002ee8 <HAL_DMA_Abort+0x21c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d040      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a71      	ldr	r2, [pc, #452]	@ (8002eec <HAL_DMA_Abort+0x220>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03b      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a70      	ldr	r2, [pc, #448]	@ (8002ef0 <HAL_DMA_Abort+0x224>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef4 <HAL_DMA_Abort+0x228>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6d      	ldr	r2, [pc, #436]	@ (8002ef8 <HAL_DMA_Abort+0x22c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d02c      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002efc <HAL_DMA_Abort+0x230>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d027      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6a      	ldr	r2, [pc, #424]	@ (8002f00 <HAL_DMA_Abort+0x234>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a68      	ldr	r2, [pc, #416]	@ (8002f04 <HAL_DMA_Abort+0x238>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a67      	ldr	r2, [pc, #412]	@ (8002f08 <HAL_DMA_Abort+0x23c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a65      	ldr	r2, [pc, #404]	@ (8002f0c <HAL_DMA_Abort+0x240>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a64      	ldr	r2, [pc, #400]	@ (8002f10 <HAL_DMA_Abort+0x244>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a62      	ldr	r2, [pc, #392]	@ (8002f14 <HAL_DMA_Abort+0x248>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <HAL_DMA_Abort+0x24c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_DMA_Abort+0xd6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002f1c <HAL_DMA_Abort+0x250>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_DMA_Abort+0xda>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_DMA_Abort+0xdc>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 021e 	bic.w	r2, r2, #30
 8002dba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e00a      	b.n	8002dea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 020e 	bic.w	r2, r2, #14
 8002de2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3c      	ldr	r2, [pc, #240]	@ (8002ee0 <HAL_DMA_Abort+0x214>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d072      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee4 <HAL_DMA_Abort+0x218>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d06d      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a39      	ldr	r2, [pc, #228]	@ (8002ee8 <HAL_DMA_Abort+0x21c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d068      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a37      	ldr	r2, [pc, #220]	@ (8002eec <HAL_DMA_Abort+0x220>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d063      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a36      	ldr	r2, [pc, #216]	@ (8002ef0 <HAL_DMA_Abort+0x224>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d05e      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a34      	ldr	r2, [pc, #208]	@ (8002ef4 <HAL_DMA_Abort+0x228>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d059      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a33      	ldr	r2, [pc, #204]	@ (8002ef8 <HAL_DMA_Abort+0x22c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d054      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a31      	ldr	r2, [pc, #196]	@ (8002efc <HAL_DMA_Abort+0x230>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04f      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a30      	ldr	r2, [pc, #192]	@ (8002f00 <HAL_DMA_Abort+0x234>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2e      	ldr	r2, [pc, #184]	@ (8002f04 <HAL_DMA_Abort+0x238>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2d      	ldr	r2, [pc, #180]	@ (8002f08 <HAL_DMA_Abort+0x23c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <HAL_DMA_Abort+0x240>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2a      	ldr	r2, [pc, #168]	@ (8002f10 <HAL_DMA_Abort+0x244>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	@ (8002f14 <HAL_DMA_Abort+0x248>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a27      	ldr	r2, [pc, #156]	@ (8002f18 <HAL_DMA_Abort+0x24c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a25      	ldr	r2, [pc, #148]	@ (8002f1c <HAL_DMA_Abort+0x250>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <HAL_DMA_Abort+0x254>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a22      	ldr	r2, [pc, #136]	@ (8002f24 <HAL_DMA_Abort+0x258>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <HAL_DMA_Abort+0x25c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1f      	ldr	r2, [pc, #124]	@ (8002f2c <HAL_DMA_Abort+0x260>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f30 <HAL_DMA_Abort+0x264>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f34 <HAL_DMA_Abort+0x268>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <HAL_DMA_Abort+0x26c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_Abort+0x20e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_DMA_Abort+0x270>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d132      	bne.n	8002f40 <HAL_DMA_Abort+0x274>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e031      	b.n	8002f42 <HAL_DMA_Abort+0x276>
 8002ede:	bf00      	nop
 8002ee0:	40020010 	.word	0x40020010
 8002ee4:	40020028 	.word	0x40020028
 8002ee8:	40020040 	.word	0x40020040
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	40020070 	.word	0x40020070
 8002ef4:	40020088 	.word	0x40020088
 8002ef8:	400200a0 	.word	0x400200a0
 8002efc:	400200b8 	.word	0x400200b8
 8002f00:	40020410 	.word	0x40020410
 8002f04:	40020428 	.word	0x40020428
 8002f08:	40020440 	.word	0x40020440
 8002f0c:	40020458 	.word	0x40020458
 8002f10:	40020470 	.word	0x40020470
 8002f14:	40020488 	.word	0x40020488
 8002f18:	400204a0 	.word	0x400204a0
 8002f1c:	400204b8 	.word	0x400204b8
 8002f20:	58025408 	.word	0x58025408
 8002f24:	5802541c 	.word	0x5802541c
 8002f28:	58025430 	.word	0x58025430
 8002f2c:	58025444 	.word	0x58025444
 8002f30:	58025458 	.word	0x58025458
 8002f34:	5802546c 	.word	0x5802546c
 8002f38:	58025480 	.word	0x58025480
 8002f3c:	58025494 	.word	0x58025494
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003110 <HAL_DMA_Abort+0x444>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6b      	ldr	r2, [pc, #428]	@ (8003114 <HAL_DMA_Abort+0x448>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d045      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003118 <HAL_DMA_Abort+0x44c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d040      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a68      	ldr	r2, [pc, #416]	@ (800311c <HAL_DMA_Abort+0x450>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a67      	ldr	r2, [pc, #412]	@ (8003120 <HAL_DMA_Abort+0x454>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_DMA_Abort+0x458>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a64      	ldr	r2, [pc, #400]	@ (8003128 <HAL_DMA_Abort+0x45c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a62      	ldr	r2, [pc, #392]	@ (800312c <HAL_DMA_Abort+0x460>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a61      	ldr	r2, [pc, #388]	@ (8003130 <HAL_DMA_Abort+0x464>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8003134 <HAL_DMA_Abort+0x468>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8003138 <HAL_DMA_Abort+0x46c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800313c <HAL_DMA_Abort+0x470>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003140 <HAL_DMA_Abort+0x474>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a59      	ldr	r2, [pc, #356]	@ (8003144 <HAL_DMA_Abort+0x478>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a58      	ldr	r2, [pc, #352]	@ (8003148 <HAL_DMA_Abort+0x47c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort+0x32a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_DMA_Abort+0x480>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d108      	bne.n	8003008 <HAL_DMA_Abort+0x33c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e007      	b.n	8003018 <HAL_DMA_Abort+0x34c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003018:	e013      	b.n	8003042 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800301a:	f7ff fcb7 	bl	800298c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b05      	cmp	r3, #5
 8003026:	d90c      	bls.n	8003042 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2203      	movs	r2, #3
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e12d      	b.n	800329e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e5      	bne.n	800301a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2f      	ldr	r2, [pc, #188]	@ (8003110 <HAL_DMA_Abort+0x444>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04a      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2d      	ldr	r2, [pc, #180]	@ (8003114 <HAL_DMA_Abort+0x448>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2c      	ldr	r2, [pc, #176]	@ (8003118 <HAL_DMA_Abort+0x44c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2a      	ldr	r2, [pc, #168]	@ (800311c <HAL_DMA_Abort+0x450>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03b      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a29      	ldr	r2, [pc, #164]	@ (8003120 <HAL_DMA_Abort+0x454>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a27      	ldr	r2, [pc, #156]	@ (8003124 <HAL_DMA_Abort+0x458>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a26      	ldr	r2, [pc, #152]	@ (8003128 <HAL_DMA_Abort+0x45c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d02c      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a24      	ldr	r2, [pc, #144]	@ (800312c <HAL_DMA_Abort+0x460>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d027      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <HAL_DMA_Abort+0x464>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <HAL_DMA_Abort+0x468>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a20      	ldr	r2, [pc, #128]	@ (8003138 <HAL_DMA_Abort+0x46c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1e      	ldr	r2, [pc, #120]	@ (800313c <HAL_DMA_Abort+0x470>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <HAL_DMA_Abort+0x474>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <HAL_DMA_Abort+0x478>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_DMA_Abort+0x47c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_Abort+0x422>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a18      	ldr	r2, [pc, #96]	@ (800314c <HAL_DMA_Abort+0x480>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_DMA_Abort+0x426>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_DMA_Abort+0x428>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02b      	beq.n	8003150 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	223f      	movs	r2, #63	@ 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	e02a      	b.n	8003166 <HAL_DMA_Abort+0x49a>
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2201      	movs	r2, #1
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4f      	ldr	r2, [pc, #316]	@ (80032a8 <HAL_DMA_Abort+0x5dc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d072      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4d      	ldr	r2, [pc, #308]	@ (80032ac <HAL_DMA_Abort+0x5e0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d06d      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4c      	ldr	r2, [pc, #304]	@ (80032b0 <HAL_DMA_Abort+0x5e4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d068      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4a      	ldr	r2, [pc, #296]	@ (80032b4 <HAL_DMA_Abort+0x5e8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d063      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a49      	ldr	r2, [pc, #292]	@ (80032b8 <HAL_DMA_Abort+0x5ec>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d05e      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a47      	ldr	r2, [pc, #284]	@ (80032bc <HAL_DMA_Abort+0x5f0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d059      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a46      	ldr	r2, [pc, #280]	@ (80032c0 <HAL_DMA_Abort+0x5f4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d054      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a44      	ldr	r2, [pc, #272]	@ (80032c4 <HAL_DMA_Abort+0x5f8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04f      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a43      	ldr	r2, [pc, #268]	@ (80032c8 <HAL_DMA_Abort+0x5fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a41      	ldr	r2, [pc, #260]	@ (80032cc <HAL_DMA_Abort+0x600>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a40      	ldr	r2, [pc, #256]	@ (80032d0 <HAL_DMA_Abort+0x604>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3e      	ldr	r2, [pc, #248]	@ (80032d4 <HAL_DMA_Abort+0x608>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a3d      	ldr	r2, [pc, #244]	@ (80032d8 <HAL_DMA_Abort+0x60c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3b      	ldr	r2, [pc, #236]	@ (80032dc <HAL_DMA_Abort+0x610>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3a      	ldr	r2, [pc, #232]	@ (80032e0 <HAL_DMA_Abort+0x614>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a38      	ldr	r2, [pc, #224]	@ (80032e4 <HAL_DMA_Abort+0x618>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a37      	ldr	r2, [pc, #220]	@ (80032e8 <HAL_DMA_Abort+0x61c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a35      	ldr	r2, [pc, #212]	@ (80032ec <HAL_DMA_Abort+0x620>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a34      	ldr	r2, [pc, #208]	@ (80032f0 <HAL_DMA_Abort+0x624>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a32      	ldr	r2, [pc, #200]	@ (80032f4 <HAL_DMA_Abort+0x628>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a31      	ldr	r2, [pc, #196]	@ (80032f8 <HAL_DMA_Abort+0x62c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2f      	ldr	r2, [pc, #188]	@ (80032fc <HAL_DMA_Abort+0x630>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2e      	ldr	r2, [pc, #184]	@ (8003300 <HAL_DMA_Abort+0x634>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_Abort+0x58a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2c      	ldr	r2, [pc, #176]	@ (8003304 <HAL_DMA_Abort+0x638>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_DMA_Abort+0x58e>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_DMA_Abort+0x590>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003268:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003280:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800328a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
 80032e8:	58025408 	.word	0x58025408
 80032ec:	5802541c 	.word	0x5802541c
 80032f0:	58025430 	.word	0x58025430
 80032f4:	58025444 	.word	0x58025444
 80032f8:	58025458 	.word	0x58025458
 80032fc:	5802546c 	.word	0x5802546c
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494

08003308 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e237      	b.n	800378a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	@ 0x80
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e22c      	b.n	800378a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5c      	ldr	r2, [pc, #368]	@ (80034a8 <HAL_DMA_Abort_IT+0x1a0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d04a      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5b      	ldr	r2, [pc, #364]	@ (80034ac <HAL_DMA_Abort_IT+0x1a4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d045      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a59      	ldr	r2, [pc, #356]	@ (80034b0 <HAL_DMA_Abort_IT+0x1a8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d040      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d03b      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a56      	ldr	r2, [pc, #344]	@ (80034b8 <HAL_DMA_Abort_IT+0x1b0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d036      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a55      	ldr	r2, [pc, #340]	@ (80034bc <HAL_DMA_Abort_IT+0x1b4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d031      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a53      	ldr	r2, [pc, #332]	@ (80034c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02c      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a52      	ldr	r2, [pc, #328]	@ (80034c4 <HAL_DMA_Abort_IT+0x1bc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d027      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a50      	ldr	r2, [pc, #320]	@ (80034c8 <HAL_DMA_Abort_IT+0x1c0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4f      	ldr	r2, [pc, #316]	@ (80034cc <HAL_DMA_Abort_IT+0x1c4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01d      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4d      	ldr	r2, [pc, #308]	@ (80034d0 <HAL_DMA_Abort_IT+0x1c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <HAL_DMA_Abort_IT+0x1cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	@ (80034d8 <HAL_DMA_Abort_IT+0x1d0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a49      	ldr	r2, [pc, #292]	@ (80034dc <HAL_DMA_Abort_IT+0x1d4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a47      	ldr	r2, [pc, #284]	@ (80034e0 <HAL_DMA_Abort_IT+0x1d8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_Abort_IT+0xc8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <HAL_DMA_Abort_IT+0x1dc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Abort_IT+0xcc>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_DMA_Abort_IT+0xce>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8086 	beq.w	80034e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2f      	ldr	r2, [pc, #188]	@ (80034a8 <HAL_DMA_Abort_IT+0x1a0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04a      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2e      	ldr	r2, [pc, #184]	@ (80034ac <HAL_DMA_Abort_IT+0x1a4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d045      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	@ (80034b0 <HAL_DMA_Abort_IT+0x1a8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d040      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2b      	ldr	r2, [pc, #172]	@ (80034b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03b      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a29      	ldr	r2, [pc, #164]	@ (80034b8 <HAL_DMA_Abort_IT+0x1b0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d036      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a28      	ldr	r2, [pc, #160]	@ (80034bc <HAL_DMA_Abort_IT+0x1b4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a26      	ldr	r2, [pc, #152]	@ (80034c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02c      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <HAL_DMA_Abort_IT+0x1bc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d027      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_DMA_Abort_IT+0x1c0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a22      	ldr	r2, [pc, #136]	@ (80034cc <HAL_DMA_Abort_IT+0x1c4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01d      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a20      	ldr	r2, [pc, #128]	@ (80034d0 <HAL_DMA_Abort_IT+0x1c8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d018      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1f      	ldr	r2, [pc, #124]	@ (80034d4 <HAL_DMA_Abort_IT+0x1cc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1d      	ldr	r2, [pc, #116]	@ (80034d8 <HAL_DMA_Abort_IT+0x1d0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00e      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <HAL_DMA_Abort_IT+0x1d4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <HAL_DMA_Abort_IT+0x1d8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_Abort_IT+0x17c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <HAL_DMA_Abort_IT+0x18e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e178      	b.n	8003788 <HAL_DMA_Abort_IT+0x480>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e16f      	b.n	8003788 <HAL_DMA_Abort_IT+0x480>
 80034a8:	40020010 	.word	0x40020010
 80034ac:	40020028 	.word	0x40020028
 80034b0:	40020040 	.word	0x40020040
 80034b4:	40020058 	.word	0x40020058
 80034b8:	40020070 	.word	0x40020070
 80034bc:	40020088 	.word	0x40020088
 80034c0:	400200a0 	.word	0x400200a0
 80034c4:	400200b8 	.word	0x400200b8
 80034c8:	40020410 	.word	0x40020410
 80034cc:	40020428 	.word	0x40020428
 80034d0:	40020440 	.word	0x40020440
 80034d4:	40020458 	.word	0x40020458
 80034d8:	40020470 	.word	0x40020470
 80034dc:	40020488 	.word	0x40020488
 80034e0:	400204a0 	.word	0x400204a0
 80034e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 020e 	bic.w	r2, r2, #14
 80034f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6c      	ldr	r2, [pc, #432]	@ (80036b0 <HAL_DMA_Abort_IT+0x3a8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04a      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6b      	ldr	r2, [pc, #428]	@ (80036b4 <HAL_DMA_Abort_IT+0x3ac>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d045      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a69      	ldr	r2, [pc, #420]	@ (80036b8 <HAL_DMA_Abort_IT+0x3b0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d040      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a68      	ldr	r2, [pc, #416]	@ (80036bc <HAL_DMA_Abort_IT+0x3b4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03b      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a66      	ldr	r2, [pc, #408]	@ (80036c0 <HAL_DMA_Abort_IT+0x3b8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d036      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a65      	ldr	r2, [pc, #404]	@ (80036c4 <HAL_DMA_Abort_IT+0x3bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d031      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a63      	ldr	r2, [pc, #396]	@ (80036c8 <HAL_DMA_Abort_IT+0x3c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02c      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a62      	ldr	r2, [pc, #392]	@ (80036cc <HAL_DMA_Abort_IT+0x3c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d027      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a60      	ldr	r2, [pc, #384]	@ (80036d0 <HAL_DMA_Abort_IT+0x3c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d022      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a5f      	ldr	r2, [pc, #380]	@ (80036d4 <HAL_DMA_Abort_IT+0x3cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5d      	ldr	r2, [pc, #372]	@ (80036d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5c      	ldr	r2, [pc, #368]	@ (80036dc <HAL_DMA_Abort_IT+0x3d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5a      	ldr	r2, [pc, #360]	@ (80036e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a59      	ldr	r2, [pc, #356]	@ (80036e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a57      	ldr	r2, [pc, #348]	@ (80036e8 <HAL_DMA_Abort_IT+0x3e0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_DMA_Abort_IT+0x290>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a56      	ldr	r2, [pc, #344]	@ (80036ec <HAL_DMA_Abort_IT+0x3e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d108      	bne.n	80035aa <HAL_DMA_Abort_IT+0x2a2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e007      	b.n	80035ba <HAL_DMA_Abort_IT+0x2b2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3c      	ldr	r2, [pc, #240]	@ (80036b0 <HAL_DMA_Abort_IT+0x3a8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d072      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a3a      	ldr	r2, [pc, #232]	@ (80036b4 <HAL_DMA_Abort_IT+0x3ac>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d06d      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a39      	ldr	r2, [pc, #228]	@ (80036b8 <HAL_DMA_Abort_IT+0x3b0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d068      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a37      	ldr	r2, [pc, #220]	@ (80036bc <HAL_DMA_Abort_IT+0x3b4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d063      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a36      	ldr	r2, [pc, #216]	@ (80036c0 <HAL_DMA_Abort_IT+0x3b8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d05e      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a34      	ldr	r2, [pc, #208]	@ (80036c4 <HAL_DMA_Abort_IT+0x3bc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d059      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a33      	ldr	r2, [pc, #204]	@ (80036c8 <HAL_DMA_Abort_IT+0x3c0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d054      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a31      	ldr	r2, [pc, #196]	@ (80036cc <HAL_DMA_Abort_IT+0x3c4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04f      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a30      	ldr	r2, [pc, #192]	@ (80036d0 <HAL_DMA_Abort_IT+0x3c8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04a      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <HAL_DMA_Abort_IT+0x3cc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d045      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d040      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_DMA_Abort_IT+0x3d4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2a      	ldr	r2, [pc, #168]	@ (80036e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d036      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a28      	ldr	r2, [pc, #160]	@ (80036e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a27      	ldr	r2, [pc, #156]	@ (80036e8 <HAL_DMA_Abort_IT+0x3e0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d02c      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a25      	ldr	r2, [pc, #148]	@ (80036ec <HAL_DMA_Abort_IT+0x3e4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d027      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a24      	ldr	r2, [pc, #144]	@ (80036f0 <HAL_DMA_Abort_IT+0x3e8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_DMA_Abort_IT+0x3ec>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a21      	ldr	r2, [pc, #132]	@ (80036f8 <HAL_DMA_Abort_IT+0x3f0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d018      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_DMA_Abort_IT+0x3f4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1e      	ldr	r2, [pc, #120]	@ (8003700 <HAL_DMA_Abort_IT+0x3f8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	@ (8003704 <HAL_DMA_Abort_IT+0x3fc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_DMA_Abort_IT+0x400>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_DMA_Abort_IT+0x3a2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	@ (800370c <HAL_DMA_Abort_IT+0x404>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d132      	bne.n	8003710 <HAL_DMA_Abort_IT+0x408>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e031      	b.n	8003712 <HAL_DMA_Abort_IT+0x40a>
 80036ae:	bf00      	nop
 80036b0:	40020010 	.word	0x40020010
 80036b4:	40020028 	.word	0x40020028
 80036b8:	40020040 	.word	0x40020040
 80036bc:	40020058 	.word	0x40020058
 80036c0:	40020070 	.word	0x40020070
 80036c4:	40020088 	.word	0x40020088
 80036c8:	400200a0 	.word	0x400200a0
 80036cc:	400200b8 	.word	0x400200b8
 80036d0:	40020410 	.word	0x40020410
 80036d4:	40020428 	.word	0x40020428
 80036d8:	40020440 	.word	0x40020440
 80036dc:	40020458 	.word	0x40020458
 80036e0:	40020470 	.word	0x40020470
 80036e4:	40020488 	.word	0x40020488
 80036e8:	400204a0 	.word	0x400204a0
 80036ec:	400204b8 	.word	0x400204b8
 80036f0:	58025408 	.word	0x58025408
 80036f4:	5802541c 	.word	0x5802541c
 80036f8:	58025430 	.word	0x58025430
 80036fc:	58025444 	.word	0x58025444
 8003700:	58025458 	.word	0x58025458
 8003704:	5802546c 	.word	0x5802546c
 8003708:	58025480 	.word	0x58025480
 800370c:	58025494 	.word	0x58025494
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d028      	beq.n	8003768 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003724:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003744:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800375c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003766:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	@ 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037a2:	4b89      	ldr	r3, [pc, #548]	@ (80039c8 <HAL_GPIO_Init+0x234>)
 80037a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037a6:	e194      	b.n	8003ad2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8186 	beq.w	8003acc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d005      	beq.n	80037d8 <HAL_GPIO_Init+0x44>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d130      	bne.n	800383a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800380e:	2201      	movs	r2, #1
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0201 	and.w	r2, r3, #1
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b03      	cmp	r3, #3
 8003844:	d017      	beq.n	8003876 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d123      	bne.n	80038ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80e0 	beq.w	8003acc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390c:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <HAL_GPIO_Init+0x238>)
 800390e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003912:	4a2e      	ldr	r2, [pc, #184]	@ (80039cc <HAL_GPIO_Init+0x238>)
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800391c:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_GPIO_Init+0x238>)
 800391e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800392a:	4a29      	ldr	r2, [pc, #164]	@ (80039d0 <HAL_GPIO_Init+0x23c>)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	3302      	adds	r3, #2
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	220f      	movs	r2, #15
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a20      	ldr	r2, [pc, #128]	@ (80039d4 <HAL_GPIO_Init+0x240>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d052      	beq.n	80039fc <HAL_GPIO_Init+0x268>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_GPIO_Init+0x244>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d031      	beq.n	80039c2 <HAL_GPIO_Init+0x22e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_GPIO_Init+0x248>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02b      	beq.n	80039be <HAL_GPIO_Init+0x22a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_GPIO_Init+0x24c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d025      	beq.n	80039ba <HAL_GPIO_Init+0x226>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <HAL_GPIO_Init+0x250>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01f      	beq.n	80039b6 <HAL_GPIO_Init+0x222>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1b      	ldr	r2, [pc, #108]	@ (80039e8 <HAL_GPIO_Init+0x254>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d019      	beq.n	80039b2 <HAL_GPIO_Init+0x21e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1a      	ldr	r2, [pc, #104]	@ (80039ec <HAL_GPIO_Init+0x258>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <HAL_GPIO_Init+0x21a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a19      	ldr	r2, [pc, #100]	@ (80039f0 <HAL_GPIO_Init+0x25c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00d      	beq.n	80039aa <HAL_GPIO_Init+0x216>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a18      	ldr	r2, [pc, #96]	@ (80039f4 <HAL_GPIO_Init+0x260>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <HAL_GPIO_Init+0x212>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_GPIO_Init+0x264>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_GPIO_Init+0x20e>
 800399e:	2309      	movs	r3, #9
 80039a0:	e02d      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039a2:	230a      	movs	r3, #10
 80039a4:	e02b      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039a6:	2308      	movs	r3, #8
 80039a8:	e029      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039aa:	2307      	movs	r3, #7
 80039ac:	e027      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e025      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e023      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039b6:	2304      	movs	r3, #4
 80039b8:	e021      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e01f      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039be:	2302      	movs	r3, #2
 80039c0:	e01d      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e01b      	b.n	80039fe <HAL_GPIO_Init+0x26a>
 80039c6:	bf00      	nop
 80039c8:	58000080 	.word	0x58000080
 80039cc:	58024400 	.word	0x58024400
 80039d0:	58000400 	.word	0x58000400
 80039d4:	58020000 	.word	0x58020000
 80039d8:	58020400 	.word	0x58020400
 80039dc:	58020800 	.word	0x58020800
 80039e0:	58020c00 	.word	0x58020c00
 80039e4:	58021000 	.word	0x58021000
 80039e8:	58021400 	.word	0x58021400
 80039ec:	58021800 	.word	0x58021800
 80039f0:	58021c00 	.word	0x58021c00
 80039f4:	58022000 	.word	0x58022000
 80039f8:	58022400 	.word	0x58022400
 80039fc:	2300      	movs	r3, #0
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	f002 0203 	and.w	r2, r2, #3
 8003a04:	0092      	lsls	r2, r2, #2
 8003a06:	4093      	lsls	r3, r2
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a0e:	4938      	ldr	r1, [pc, #224]	@ (8003af0 <HAL_GPIO_Init+0x35c>)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f ae63 	bne.w	80037a8 <HAL_GPIO_Init+0x14>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	3724      	adds	r7, #36	@ 0x24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	58000400 	.word	0x58000400

08003af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
 8003b00:	4613      	mov	r3, r2
 8003b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b04:	787b      	ldrb	r3, [r7, #1]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b10:	e003      	b.n	8003b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	041a      	lsls	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	619a      	str	r2, [r3, #24]
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0bd      	b.n	8003cb6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d031      	beq.n	8003be2 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc0 <HAL_HRTIM_Init+0x198>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10e      	bne.n	8003ba6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003b88:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc4 <HAL_HRTIM_Init+0x19c>)
 8003b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc4 <HAL_HRTIM_Init+0x19c>)
 8003b90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b98:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_HRTIM_Init+0x19c>)
 8003b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003bb4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bca:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe f81c 	bl	8001c20 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d012      	beq.n	8003c1a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c02:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
 8003c2e:	e03e      	b.n	8003cae <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003c30:	7dfa      	ldrb	r2, [r7, #23]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3318      	adds	r3, #24
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003c44:	7dfa      	ldrb	r2, [r7, #23]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	331c      	adds	r3, #28
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003c58:	7dfa      	ldrb	r2, [r7, #23]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3320      	adds	r3, #32
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003c6c:	7dfa      	ldrb	r2, [r7, #23]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3324      	adds	r3, #36	@ 0x24
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003c80:	7dfa      	ldrb	r2, [r7, #23]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3328      	adds	r3, #40	@ 0x28
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003c94:	7dfa      	ldrb	r2, [r7, #23]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3330      	adds	r3, #48	@ 0x30
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	3301      	adds	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d9bd      	bls.n	8003c30 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40017400 	.word	0x40017400
 8003cc4:	58024400 	.word	0x58024400

08003cc8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d101      	bne.n	8003ce4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e015      	b.n	8003d10 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	d104      	bne.n	8003cfc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fa88 	bl	800420a <HRTIM_MasterBase_Config>
 8003cfa:	e004      	b.n	8003d06 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fab1 	bl	8004268 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d101      	bne.n	8003d34 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	e01c      	b.n	8003d6e <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_HRTIM_EventConfig+0x2a>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e015      	b.n	8003d6e <HAL_HRTIM_EventConfig+0x56>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fd44 	bl	80047e4 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d101      	bne.n	8003d90 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e025      	b.n	8003ddc <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_HRTIM_EventPrescalerConfig+0x28>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e01e      	b.n	8003ddc <HAL_HRTIM_EventPrescalerConfig+0x66>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8003db6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d101      	bne.n	8003e04 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
 8003e02:	e05f      	b.n	8003ec4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e058      	b.n	8003ec4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d104      	bne.n	8003e32 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fa5c 	bl	80042e8 <HRTIM_MasterWaveform_Config>
 8003e30:	e004      	b.n	8003e3c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fabc 	bl	80043b4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4403      	add	r3, r0
 8003e4e:	3320      	adds	r3, #32
 8003e50:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4403      	add	r3, r0
 8003e64:	3324      	adds	r3, #36	@ 0x24
 8003e66:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6899      	ldr	r1, [r3, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4403      	add	r3, r0
 8003e7a:	3328      	adds	r3, #40	@ 0x28
 8003e7c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68d9      	ldr	r1, [r3, #12]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4403      	add	r3, r0
 8003e90:	332c      	adds	r3, #44	@ 0x2c
 8003e92:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6919      	ldr	r1, [r3, #16]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4403      	add	r3, r0
 8003ea6:	3330      	adds	r3, #48	@ 0x30
 8003ea8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fec1 	bl	8004c34 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d101      	bne.n	8003eea <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e157      	b.n	800419a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e150      	b.n	800419a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d140      	bne.n	8003f90 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	2b07      	cmp	r3, #7
 8003f14:	d82a      	bhi.n	8003f6c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003f16:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f3d 	.word	0x08003f3d
 8003f20:	08003f49 	.word	0x08003f49
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f6d 	.word	0x08003f6d
 8003f34:	08003f6d 	.word	0x08003f6d
 8003f38:	08003f61 	.word	0x08003f61
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	61da      	str	r2, [r3, #28]
        break;
 8003f46:	e01a      	b.n	8003f7e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8003f52:	e014      	b.n	8003f7e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8003f5e:	e00e      	b.n	8003f7e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003f6a:	e008      	b.n	8003f7e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2207      	movs	r2, #7
 8003f70:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8003f7c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	f040 80fe 	bne.w	8004188 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e104      	b.n	800419a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	2b07      	cmp	r3, #7
 8003f96:	f200 80e3 	bhi.w	8004160 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08004161 	.word	0x08004161
 8003fac:	08004091 	.word	0x08004091
 8003fb0:	08004161 	.word	0x08004161
 8003fb4:	08004161 	.word	0x08004161
 8003fb8:	08004161 	.word	0x08004161
 8003fbc:	080040a5 	.word	0x080040a5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	440b      	add	r3, r1
 8003fce:	339c      	adds	r3, #156	@ 0x9c
 8003fd0:	601a      	str	r2, [r3, #0]
        break;
 8003fd2:	e0d1      	b.n	8004178 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	01db      	lsls	r3, r3, #7
 8003fe0:	440b      	add	r3, r1
 8003fe2:	33a4      	adds	r3, #164	@ 0xa4
 8003fe4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03f      	beq.n	800406e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	01db      	lsls	r3, r3, #7
 8003ff8:	4413      	add	r3, r2
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	6811      	ldr	r1, [r2, #0]
 8004000:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	3301      	adds	r3, #1
 8004008:	01db      	lsls	r3, r3, #7
 800400a:	440b      	add	r3, r1
 800400c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	4413      	add	r3, r2
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68f9      	ldr	r1, [r7, #12]
 8004022:	6809      	ldr	r1, [r1, #0]
 8004024:	431a      	orrs	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3301      	adds	r3, #1
 800402a:	01db      	lsls	r3, r3, #7
 800402c:	440b      	add	r3, r1
 800402e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004038:	d109      	bne.n	800404e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	01db      	lsls	r3, r3, #7
 8004046:	440b      	add	r3, r1
 8004048:	339c      	adds	r3, #156	@ 0x9c
 800404a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800404c:	e091      	b.n	8004172 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004056:	f040 808c 	bne.w	8004172 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	440b      	add	r3, r1
 8004068:	33a8      	adds	r3, #168	@ 0xa8
 800406a:	601a      	str	r2, [r3, #0]
         break;
 800406c:	e081      	b.n	8004172 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3301      	adds	r3, #1
 8004076:	01db      	lsls	r3, r3, #7
 8004078:	4413      	add	r3, r2
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	6811      	ldr	r1, [r2, #0]
 8004080:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3301      	adds	r3, #1
 8004088:	01db      	lsls	r3, r3, #7
 800408a:	440b      	add	r3, r1
 800408c:	601a      	str	r2, [r3, #0]
         break;
 800408e:	e070      	b.n	8004172 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	01db      	lsls	r3, r3, #7
 800409c:	440b      	add	r3, r1
 800409e:	33a8      	adds	r3, #168	@ 0xa8
 80040a0:	601a      	str	r2, [r3, #0]
        break;
 80040a2:	e069      	b.n	8004178 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	01db      	lsls	r3, r3, #7
 80040b0:	440b      	add	r3, r1
 80040b2:	33ac      	adds	r3, #172	@ 0xac
 80040b4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d03f      	beq.n	800413e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3301      	adds	r3, #1
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	6811      	ldr	r1, [r2, #0]
 80040d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3301      	adds	r3, #1
 80040d8:	01db      	lsls	r3, r3, #7
 80040da:	440b      	add	r3, r1
 80040dc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3301      	adds	r3, #1
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	4413      	add	r3, r2
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	6809      	ldr	r1, [r1, #0]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	3301      	adds	r3, #1
 80040fc:	01db      	lsls	r3, r3, #7
 80040fe:	440b      	add	r3, r1
 8004100:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	d109      	bne.n	8004120 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	440b      	add	r3, r1
 800411a:	339c      	adds	r3, #156	@ 0x9c
 800411c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800411e:	e02a      	b.n	8004176 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004128:	d125      	bne.n	8004176 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6819      	ldr	r1, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	01db      	lsls	r3, r3, #7
 8004136:	440b      	add	r3, r1
 8004138:	33a8      	adds	r3, #168	@ 0xa8
 800413a:	601a      	str	r2, [r3, #0]
         break;
 800413c:	e01b      	b.n	8004176 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3301      	adds	r3, #1
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	4413      	add	r3, r2
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3301      	adds	r3, #1
 8004158:	01db      	lsls	r3, r3, #7
 800415a:	440b      	add	r3, r1
 800415c:	601a      	str	r2, [r3, #0]
         break;
 800415e:	e00a      	b.n	8004176 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2207      	movs	r2, #7
 8004164:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8004170:	e002      	b.n	8004178 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004176:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b07      	cmp	r3, #7
 8004182:	d101      	bne.n	8004188 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e008      	b.n	800419a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d101      	bne.n	80041c6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
 80041c4:	e01d      	b.n	8004202 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e016      	b.n	8004202 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fa22 	bl	8004634 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f023 0318 	bic.w	r3, r3, #24
 8004234:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6852      	ldr	r2, [r2, #4]
 800425a:	619a      	str	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3301      	adds	r3, #1
 800427c:	01db      	lsls	r3, r3, #7
 800427e:	4413      	add	r3, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0307 	bic.w	r3, r3, #7
 800428a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0318 	bic.w	r3, r3, #24
 800429c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	3301      	adds	r3, #1
 80042b0:	01db      	lsls	r3, r3, #7
 80042b2:	4413      	add	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	440b      	add	r3, r1
 80042c6:	3394      	adds	r3, #148	@ 0x94
 80042c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	01db      	lsls	r3, r3, #7
 80042d6:	440b      	add	r3, r1
 80042d8:	3398      	adds	r3, #152	@ 0x98
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004302:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0320 	bic.w	r3, r3, #32
 800430a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800431c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800432e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004340:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004352:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004364:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004378:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b08b      	sub	sp, #44	@ 0x2c
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3301      	adds	r3, #1
 80043c8:	01db      	lsls	r3, r3, #7
 80043ca:	4413      	add	r3, r2
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3301      	adds	r3, #1
 80043da:	01db      	lsls	r3, r3, #7
 80043dc:	440b      	add	r3, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	3301      	adds	r3, #1
 80043e8:	01db      	lsls	r3, r3, #7
 80043ea:	4413      	add	r3, r2
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	01db      	lsls	r3, r3, #7
 80043f8:	4413      	add	r3, r2
 80043fa:	33e8      	adds	r3, #232	@ 0xe8
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	01db      	lsls	r3, r3, #7
 8004408:	4413      	add	r3, r2
 800440a:	33e4      	adds	r3, #228	@ 0xe4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004418:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	f023 0320 	bic.w	r3, r3, #32
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	4313      	orrs	r3, r2
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443a:	4313      	orrs	r3, r2
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	4313      	orrs	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445e:	4313      	orrs	r3, r2
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	4313      	orrs	r3, r2
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004482:	4313      	orrs	r3, r2
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004496:	d103      	bne.n	80044a0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ae:	4313      	orrs	r3, r2
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c0:	4313      	orrs	r3, r2
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	4313      	orrs	r3, r2
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f023 031f 	bic.w	r3, r3, #31
 80044dc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044f2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d108      	bne.n	8004518 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800450c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	4313      	orrs	r3, r2
 8004516:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004520:	d004      	beq.n	800452c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800452a:	d103      	bne.n	8004534 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	d108      	bne.n	8004546 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800453a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	4313      	orrs	r3, r2
 8004544:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b04      	cmp	r3, #4
 8004550:	d843      	bhi.n	80045da <HRTIM_TimingUnitWaveform_Config+0x226>
 8004552:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800456d 	.word	0x0800456d
 800455c:	08004583 	.word	0x08004583
 8004560:	08004599 	.word	0x08004599
 8004564:	080045af 	.word	0x080045af
 8004568:	080045c5 	.word	0x080045c5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004572:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	4313      	orrs	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
      break;
 8004580:	e02c      	b.n	80045dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004588:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	4313      	orrs	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]
      break;
 8004596:	e021      	b.n	80045dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800459e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]
      break;
 80045ac:	e016      	b.n	80045dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61fb      	str	r3, [r7, #28]
      break;
 80045c2:	e00b      	b.n	80045dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	015b      	lsls	r3, r3, #5
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61fb      	str	r3, [r7, #28]
      break;
 80045d8:	e000      	b.n	80045dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80045da:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	3301      	adds	r3, #1
 80045e4:	01db      	lsls	r3, r3, #7
 80045e6:	4413      	add	r3, r2
 80045e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	01db      	lsls	r3, r3, #7
 80045f4:	4413      	add	r3, r2
 80045f6:	33e8      	adds	r3, #232	@ 0xe8
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	01db      	lsls	r3, r3, #7
 8004604:	4413      	add	r3, r2
 8004606:	33e4      	adds	r3, #228	@ 0xe4
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	4413      	add	r3, r2
 8004616:	33d4      	adds	r3, #212	@ 0xd4
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004626:	bf00      	nop
 8004628:	372c      	adds	r7, #44	@ 0x2c
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop

08004634 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	@ 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	01db      	lsls	r3, r3, #7
 800464e:	4413      	add	r3, r2
 8004650:	33e4      	adds	r3, #228	@ 0xe4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	01db      	lsls	r3, r3, #7
 800465e:	4413      	add	r3, r2
 8004660:	33b8      	adds	r3, #184	@ 0xb8
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800466c:	d04d      	beq.n	800470a <HRTIM_OutputConfig+0xd6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004674:	d85e      	bhi.n	8004734 <HRTIM_OutputConfig+0x100>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467c:	d032      	beq.n	80046e4 <HRTIM_OutputConfig+0xb0>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004684:	d856      	bhi.n	8004734 <HRTIM_OutputConfig+0x100>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b80      	cmp	r3, #128	@ 0x80
 800468a:	d03e      	beq.n	800470a <HRTIM_OutputConfig+0xd6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b80      	cmp	r3, #128	@ 0x80
 8004690:	d850      	bhi.n	8004734 <HRTIM_OutputConfig+0x100>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d025      	beq.n	80046e4 <HRTIM_OutputConfig+0xb0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d84a      	bhi.n	8004734 <HRTIM_OutputConfig+0x100>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d01f      	beq.n	80046e4 <HRTIM_OutputConfig+0xb0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d044      	beq.n	8004734 <HRTIM_OutputConfig+0x100>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d841      	bhi.n	8004734 <HRTIM_OutputConfig+0x100>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d33e      	bcc.n	8004734 <HRTIM_OutputConfig+0x100>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3b02      	subs	r3, #2
 80046ba:	2201      	movs	r2, #1
 80046bc:	409a      	lsls	r2, r3
 80046be:	4b48      	ldr	r3, [pc, #288]	@ (80047e0 <HRTIM_OutputConfig+0x1ac>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11c      	bne.n	800470a <HRTIM_OutputConfig+0xd6>
 80046d0:	f244 0304 	movw	r3, #16388	@ 0x4004
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bf14      	ite	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	2300      	moveq	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d027      	beq.n	8004734 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	440b      	add	r3, r1
 80046f2:	33bc      	adds	r3, #188	@ 0xbc
 80046f4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	01db      	lsls	r3, r3, #7
 8004702:	440b      	add	r3, r1
 8004704:	33c0      	adds	r3, #192	@ 0xc0
 8004706:	601a      	str	r2, [r3, #0]
      break;
 8004708:	e015      	b.n	8004736 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	01db      	lsls	r3, r3, #7
 8004716:	440b      	add	r3, r1
 8004718:	33c4      	adds	r3, #196	@ 0xc4
 800471a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	01db      	lsls	r3, r3, #7
 8004728:	440b      	add	r3, r1
 800472a:	33c8      	adds	r3, #200	@ 0xc8
 800472c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800472e:	2310      	movs	r3, #16
 8004730:	61bb      	str	r3, [r7, #24]
      break;
 8004732:	e000      	b.n	8004736 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8004734:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004736:	22fe      	movs	r2, #254	@ 0xfe
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800473e:	43db      	mvns	r3, r3
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	4013      	ands	r3, r2
 8004744:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	4313      	orrs	r3, r2
 8004754:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	4313      	orrs	r3, r2
 8004764:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	4313      	orrs	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4313      	orrs	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b08      	cmp	r3, #8
 800479c:	d111      	bne.n	80047c2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10c      	bne.n	80047c2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	01db      	lsls	r3, r3, #7
 80047ca:	4413      	add	r3, r2
 80047cc:	33e4      	adds	r3, #228	@ 0xe4
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3724      	adds	r7, #36	@ 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40000041 	.word	0x40000041

080047e4 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	@ 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80047f8:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8004802:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 800480c:	617b      	str	r3, [r7, #20]

  switch (Event)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b0a      	cmp	r3, #10
 8004812:	f200 8208 	bhi.w	8004c26 <HRTIM_EventConfig+0x442>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <HRTIM_EventConfig+0x38>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004849 	.word	0x08004849
 8004820:	08004869 	.word	0x08004869
 8004824:	080048bf 	.word	0x080048bf
 8004828:	0800491b 	.word	0x0800491b
 800482c:	08004979 	.word	0x08004979
 8004830:	080049d7 	.word	0x080049d7
 8004834:	08004a35 	.word	0x08004a35
 8004838:	08004a93 	.word	0x08004a93
 800483c:	08004af7 	.word	0x08004af7
 8004840:	08004b5b 	.word	0x08004b5b
 8004844:	08004bc1 	.word	0x08004bc1
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004866:	e1df      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800486e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	4313      	orrs	r3, r2
 800488a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0318 	and.w	r3, r3, #24
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	4313      	orrs	r3, r2
 8004898:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80048bc:	e1b4      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 80048c4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	019b      	lsls	r3, r3, #6
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	019b      	lsls	r3, r3, #6
 80048da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	019b      	lsls	r3, r3, #6
 8004904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	4313      	orrs	r3, r2
 800490c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004918:	e186      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004920:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	4313      	orrs	r3, r2
 8004930:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	031b      	lsls	r3, r3, #12
 8004938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	4313      	orrs	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	031b      	lsls	r3, r3, #12
 8004948:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	4313      	orrs	r3, r2
 8004950:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	031b      	lsls	r3, r3, #12
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004976:	e157      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 800497e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	049b      	lsls	r3, r3, #18
 8004986:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	4313      	orrs	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	049b      	lsls	r3, r3, #18
 8004996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	4313      	orrs	r3, r2
 800499e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	049b      	lsls	r3, r3, #18
 80049a6:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	049b      	lsls	r3, r3, #18
 80049c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80049d4:	e128      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80049dc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004a32:	e0f9      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f023 031f 	bic.w	r3, r3, #31
 8004a3a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0318 	and.w	r3, r3, #24
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 030f 	bic.w	r3, r3, #15
 8004a6c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004a90:	e0ca      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8004a98:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	019b      	lsls	r3, r3, #6
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8004ace:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004af4:	e098      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8004afc:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	031b      	lsls	r3, r3, #12
 8004b04:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	031b      	lsls	r3, r3, #12
 8004b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	031b      	lsls	r3, r3, #12
 8004b24:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b34:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	031b      	lsls	r3, r3, #12
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004b58:	e066      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8004b60:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	049b      	lsls	r3, r3, #18
 8004b68:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	049b      	lsls	r3, r3, #18
 8004b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	049b      	lsls	r3, r3, #18
 8004b88:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8004b98:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	049b      	lsls	r3, r3, #18
 8004ba0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004bbe:	e033      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8004bc6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	061b      	lsls	r3, r3, #24
 8004bce:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004bfe:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	061b      	lsls	r3, r3, #24
 8004c06:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004c24:	e000      	b.n	8004c28 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8004c26:	bf00      	nop
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3724      	adds	r7, #36	@ 0x24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	d851      	bhi.n	8004ce8 <HRTIM_ForceRegistersUpdate+0xb4>
 8004c44:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <HRTIM_ForceRegistersUpdate+0x18>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c7b 	.word	0x08004c7b
 8004c50:	08004c91 	.word	0x08004c91
 8004c54:	08004ca7 	.word	0x08004ca7
 8004c58:	08004cbd 	.word	0x08004cbd
 8004c5c:	08004cd3 	.word	0x08004cd3
 8004c60:	08004c65 	.word	0x08004c65
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c78:	e037      	b.n	8004cea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0202 	orr.w	r2, r2, #2
 8004c8a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004c8e:	e02c      	b.n	8004cea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0204 	orr.w	r2, r2, #4
 8004ca0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004ca4:	e021      	b.n	8004cea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004cba:	e016      	b.n	8004cea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0210 	orr.w	r2, r2, #16
 8004ccc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004cd0:	e00b      	b.n	8004cea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0220 	orr.w	r2, r2, #32
 8004ce2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004ce6:	e000      	b.n	8004cea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004ce8:	bf00      	nop
  }
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e097      	b.n	8004e3a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fd f813 	bl	8001d50 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d004      	beq.n	8004d4c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d4a:	d103      	bne.n	8004d54 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 031e 	bic.w	r3, r3, #30
 8004d52:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4b38      	ldr	r3, [pc, #224]	@ (8004e44 <HAL_LPTIM_Init+0x14c>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4b37      	ldr	r3, [pc, #220]	@ (8004e48 <HAL_LPTIM_Init+0x150>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d78:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004d7e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004d84:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004d8a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004da2:	4313      	orrs	r3, r2
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d004      	beq.n	8004dbc <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dba:	d107      	bne.n	8004dcc <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00a      	beq.n	8004dee <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004de0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004de6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <HAL_LPTIM_Init+0x154>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_LPTIM_Init+0x112>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <HAL_LPTIM_Init+0x158>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e1a:	e009      	b.n	8004e30 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0c      	ldr	r2, [pc, #48]	@ (8004e54 <HAL_LPTIM_Init+0x15c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d104      	bne.n	8004e30 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	ffff1f3f 	.word	0xffff1f3f
 8004e48:	ff19f1fe 	.word	0xff19f1fe
 8004e4c:	40002400 	.word	0x40002400
 8004e50:	58002400 	.word	0x58002400
 8004e54:	58002800 	.word	0x58002800

08004e58 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10d      	bne.n	8004e8a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f882 	bl	8004f8e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d10d      	bne.n	8004eb4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d106      	bne.n	8004eb4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f877 	bl	8004fa2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d10d      	bne.n	8004ede <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d106      	bne.n	8004ede <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f86c 	bl	8004fb6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d10d      	bne.n	8004f08 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d106      	bne.n	8004f08 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2208      	movs	r2, #8
 8004f00:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f861 	bl	8004fca <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d10d      	bne.n	8004f32 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d106      	bne.n	8004f32 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2210      	movs	r2, #16
 8004f2a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f856 	bl	8004fde <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d10d      	bne.n	8004f5c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d106      	bne.n	8004f5c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2220      	movs	r2, #32
 8004f54:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f84b 	bl	8004ff2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f66:	2b40      	cmp	r3, #64	@ 0x40
 8004f68:	d10d      	bne.n	8004f86 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d106      	bne.n	8004f86 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2240      	movs	r2, #64	@ 0x40
 8004f7e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f840 	bl	8005006 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <HAL_PWREx_ConfigSupply+0x70>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d00a      	beq.n	8005046 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005030:	4b16      	ldr	r3, [pc, #88]	@ (800508c <HAL_PWREx_ConfigSupply+0x70>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	429a      	cmp	r2, r3
 800503c:	d001      	beq.n	8005042 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e01f      	b.n	8005082 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e01d      	b.n	8005082 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005046:	4b11      	ldr	r3, [pc, #68]	@ (800508c <HAL_PWREx_ConfigSupply+0x70>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f023 0207 	bic.w	r2, r3, #7
 800504e:	490f      	ldr	r1, [pc, #60]	@ (800508c <HAL_PWREx_ConfigSupply+0x70>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4313      	orrs	r3, r2
 8005054:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005056:	f7fd fc99 	bl	800298c <HAL_GetTick>
 800505a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800505c:	e009      	b.n	8005072 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800505e:	f7fd fc95 	bl	800298c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800506c:	d901      	bls.n	8005072 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e007      	b.n	8005082 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005072:	4b06      	ldr	r3, [pc, #24]	@ (800508c <HAL_PWREx_ConfigSupply+0x70>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800507a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507e:	d1ee      	bne.n	800505e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	58024800 	.word	0x58024800

08005090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	@ 0x30
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f000 bc48 	b.w	8005934 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8088 	beq.w	80051c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b2:	4b99      	ldr	r3, [pc, #612]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050bc:	4b96      	ldr	r3, [pc, #600]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d007      	beq.n	80050d8 <HAL_RCC_OscConfig+0x48>
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	2b18      	cmp	r3, #24
 80050cc:	d111      	bne.n	80050f2 <HAL_RCC_OscConfig+0x62>
 80050ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	4b8f      	ldr	r3, [pc, #572]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d06d      	beq.n	80051c0 <HAL_RCC_OscConfig+0x130>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d169      	bne.n	80051c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f000 bc21 	b.w	8005934 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x7a>
 80050fc:	4b86      	ldr	r3, [pc, #536]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a85      	ldr	r2, [pc, #532]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e02e      	b.n	8005168 <HAL_RCC_OscConfig+0xd8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x9c>
 8005112:	4b81      	ldr	r3, [pc, #516]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a80      	ldr	r2, [pc, #512]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4b7e      	ldr	r3, [pc, #504]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a7d      	ldr	r2, [pc, #500]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e01d      	b.n	8005168 <HAL_RCC_OscConfig+0xd8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0xc0>
 8005136:	4b78      	ldr	r3, [pc, #480]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a77      	ldr	r2, [pc, #476]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	4b75      	ldr	r3, [pc, #468]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a74      	ldr	r2, [pc, #464]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e00b      	b.n	8005168 <HAL_RCC_OscConfig+0xd8>
 8005150:	4b71      	ldr	r3, [pc, #452]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a70      	ldr	r2, [pc, #448]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	4b6e      	ldr	r3, [pc, #440]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6d      	ldr	r2, [pc, #436]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fd fc0c 	bl	800298c <HAL_GetTick>
 8005174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005178:	f7fd fc08 	bl	800298c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	@ 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e3d4      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800518a:	4b63      	ldr	r3, [pc, #396]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0xe8>
 8005196:	e014      	b.n	80051c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fbf8 	bl	800298c <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd fbf4 	bl	800298c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	@ 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e3c0      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051b2:	4b59      	ldr	r3, [pc, #356]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x110>
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80ca 	beq.w	8005364 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d0:	4b51      	ldr	r3, [pc, #324]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051da:	4b4f      	ldr	r3, [pc, #316]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80051dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <HAL_RCC_OscConfig+0x166>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2b18      	cmp	r3, #24
 80051ea:	d156      	bne.n	800529a <HAL_RCC_OscConfig+0x20a>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d151      	bne.n	800529a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f6:	4b48      	ldr	r3, [pc, #288]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_RCC_OscConfig+0x17e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e392      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800520e:	4b42      	ldr	r3, [pc, #264]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 0219 	bic.w	r2, r3, #25
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	493f      	ldr	r1, [pc, #252]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fbb4 	bl	800298c <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005228:	f7fd fbb0 	bl	800298c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e37c      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800523a:	4b37      	ldr	r3, [pc, #220]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	f7fd fbad 	bl	80029a4 <HAL_GetREVID>
 800524a:	4603      	mov	r3, r0
 800524c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005250:	4293      	cmp	r3, r2
 8005252:	d817      	bhi.n	8005284 <HAL_RCC_OscConfig+0x1f4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	d108      	bne.n	800526e <HAL_RCC_OscConfig+0x1de>
 800525c:	4b2e      	ldr	r3, [pc, #184]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005264:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800526a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800526c:	e07a      	b.n	8005364 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526e:	4b2a      	ldr	r3, [pc, #168]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	031b      	lsls	r3, r3, #12
 800527c:	4926      	ldr	r1, [pc, #152]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 800527e:	4313      	orrs	r3, r2
 8005280:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005282:	e06f      	b.n	8005364 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005284:	4b24      	ldr	r3, [pc, #144]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	4921      	ldr	r1, [pc, #132]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005298:	e064      	b.n	8005364 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d047      	beq.n	8005332 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 0219 	bic.w	r2, r3, #25
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	491a      	ldr	r1, [pc, #104]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fd fb6a 	bl	800298c <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052bc:	f7fd fb66 	bl	800298c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e332      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ce:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052da:	f7fd fb63 	bl	80029a4 <HAL_GetREVID>
 80052de:	4603      	mov	r3, r0
 80052e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d819      	bhi.n	800531c <HAL_RCC_OscConfig+0x28c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b40      	cmp	r3, #64	@ 0x40
 80052ee:	d108      	bne.n	8005302 <HAL_RCC_OscConfig+0x272>
 80052f0:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80052f8:	4a07      	ldr	r2, [pc, #28]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fe:	6053      	str	r3, [r2, #4]
 8005300:	e030      	b.n	8005364 <HAL_RCC_OscConfig+0x2d4>
 8005302:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	031b      	lsls	r3, r3, #12
 8005310:	4901      	ldr	r1, [pc, #4]	@ (8005318 <HAL_RCC_OscConfig+0x288>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]
 8005316:	e025      	b.n	8005364 <HAL_RCC_OscConfig+0x2d4>
 8005318:	58024400 	.word	0x58024400
 800531c:	4b9a      	ldr	r3, [pc, #616]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	4997      	ldr	r1, [pc, #604]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
 8005330:	e018      	b.n	8005364 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005332:	4b95      	ldr	r3, [pc, #596]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a94      	ldr	r2, [pc, #592]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fd fb25 	bl	800298c <HAL_GetTick>
 8005342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005346:	f7fd fb21 	bl	800298c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e2ed      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005358:	4b8b      	ldr	r3, [pc, #556]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80a9 	beq.w	80054c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005372:	4b85      	ldr	r3, [pc, #532]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800537a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800537c:	4b82      	ldr	r3, [pc, #520]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d007      	beq.n	8005398 <HAL_RCC_OscConfig+0x308>
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	2b18      	cmp	r3, #24
 800538c:	d13a      	bne.n	8005404 <HAL_RCC_OscConfig+0x374>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d135      	bne.n	8005404 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005398:	4b7b      	ldr	r3, [pc, #492]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_OscConfig+0x320>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2b80      	cmp	r3, #128	@ 0x80
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e2c1      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053b0:	f7fd faf8 	bl	80029a4 <HAL_GetREVID>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d817      	bhi.n	80053ee <HAL_RCC_OscConfig+0x35e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d108      	bne.n	80053d8 <HAL_RCC_OscConfig+0x348>
 80053c6:	4b70      	ldr	r3, [pc, #448]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053ce:	4a6e      	ldr	r2, [pc, #440]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80053d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053d6:	e075      	b.n	80054c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053d8:	4b6b      	ldr	r3, [pc, #428]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	069b      	lsls	r3, r3, #26
 80053e6:	4968      	ldr	r1, [pc, #416]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053ec:	e06a      	b.n	80054c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ee:	4b66      	ldr	r3, [pc, #408]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	061b      	lsls	r3, r3, #24
 80053fc:	4962      	ldr	r1, [pc, #392]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005402:	e05f      	b.n	80054c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d042      	beq.n	8005492 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800540c:	4b5e      	ldr	r3, [pc, #376]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5d      	ldr	r2, [pc, #372]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fab8 	bl	800298c <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005420:	f7fd fab4 	bl	800298c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e280      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005432:	4b55      	ldr	r3, [pc, #340]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800543e:	f7fd fab1 	bl	80029a4 <HAL_GetREVID>
 8005442:	4603      	mov	r3, r0
 8005444:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005448:	4293      	cmp	r3, r2
 800544a:	d817      	bhi.n	800547c <HAL_RCC_OscConfig+0x3ec>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	2b20      	cmp	r3, #32
 8005452:	d108      	bne.n	8005466 <HAL_RCC_OscConfig+0x3d6>
 8005454:	4b4c      	ldr	r3, [pc, #304]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800545c:	4a4a      	ldr	r2, [pc, #296]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800545e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005462:	6053      	str	r3, [r2, #4]
 8005464:	e02e      	b.n	80054c4 <HAL_RCC_OscConfig+0x434>
 8005466:	4b48      	ldr	r3, [pc, #288]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	069b      	lsls	r3, r3, #26
 8005474:	4944      	ldr	r1, [pc, #272]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
 800547a:	e023      	b.n	80054c4 <HAL_RCC_OscConfig+0x434>
 800547c:	4b42      	ldr	r3, [pc, #264]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	493f      	ldr	r1, [pc, #252]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800548c:	4313      	orrs	r3, r2
 800548e:	60cb      	str	r3, [r1, #12]
 8005490:	e018      	b.n	80054c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005492:	4b3d      	ldr	r3, [pc, #244]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a3c      	ldr	r2, [pc, #240]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fd fa75 	bl	800298c <HAL_GetTick>
 80054a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054a6:	f7fd fa71 	bl	800298c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e23d      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054b8:	4b33      	ldr	r3, [pc, #204]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d036      	beq.n	800553e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d019      	beq.n	800550c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80054da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e4:	f7fd fa52 	bl	800298c <HAL_GetTick>
 80054e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ec:	f7fd fa4e 	bl	800298c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e21a      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054fe:	4b22      	ldr	r3, [pc, #136]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0x45c>
 800550a:	e018      	b.n	800553e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800550c:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800550e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005510:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fd fa38 	bl	800298c <HAL_GetTick>
 800551c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005520:	f7fd fa34 	bl	800298c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e200      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005532:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d039      	beq.n	80055be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01c      	beq.n	800558c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a0c      	ldr	r2, [pc, #48]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 8005558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800555c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800555e:	f7fd fa15 	bl	800298c <HAL_GetTick>
 8005562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005566:	f7fd fa11 	bl	800298c <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e1dd      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005578:	4b03      	ldr	r3, [pc, #12]	@ (8005588 <HAL_RCC_OscConfig+0x4f8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x4d6>
 8005584:	e01b      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800558c:	4b9b      	ldr	r3, [pc, #620]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a9a      	ldr	r2, [pc, #616]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005596:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005598:	f7fd f9f8 	bl	800298c <HAL_GetTick>
 800559c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a0:	f7fd f9f4 	bl	800298c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e1c0      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055b2:	4b92      	ldr	r3, [pc, #584]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8081 	beq.w	80056ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005800 <HAL_RCC_OscConfig+0x770>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a8b      	ldr	r2, [pc, #556]	@ (8005800 <HAL_RCC_OscConfig+0x770>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055d8:	f7fd f9d8 	bl	800298c <HAL_GetTick>
 80055dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e0:	f7fd f9d4 	bl	800298c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	@ 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e1a0      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f2:	4b83      	ldr	r3, [pc, #524]	@ (8005800 <HAL_RCC_OscConfig+0x770>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d106      	bne.n	8005614 <HAL_RCC_OscConfig+0x584>
 8005606:	4b7d      	ldr	r3, [pc, #500]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560a:	4a7c      	ldr	r2, [pc, #496]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6713      	str	r3, [r2, #112]	@ 0x70
 8005612:	e02d      	b.n	8005670 <HAL_RCC_OscConfig+0x5e0>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10c      	bne.n	8005636 <HAL_RCC_OscConfig+0x5a6>
 800561c:	4b77      	ldr	r3, [pc, #476]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005620:	4a76      	ldr	r2, [pc, #472]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	6713      	str	r3, [r2, #112]	@ 0x70
 8005628:	4b74      	ldr	r3, [pc, #464]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562c:	4a73      	ldr	r2, [pc, #460]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800562e:	f023 0304 	bic.w	r3, r3, #4
 8005632:	6713      	str	r3, [r2, #112]	@ 0x70
 8005634:	e01c      	b.n	8005670 <HAL_RCC_OscConfig+0x5e0>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x5c8>
 800563e:	4b6f      	ldr	r3, [pc, #444]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005642:	4a6e      	ldr	r2, [pc, #440]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	6713      	str	r3, [r2, #112]	@ 0x70
 800564a:	4b6c      	ldr	r3, [pc, #432]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	4a6b      	ldr	r2, [pc, #428]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	@ 0x70
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0x5e0>
 8005658:	4b68      	ldr	r3, [pc, #416]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565c:	4a67      	ldr	r2, [pc, #412]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	@ 0x70
 8005664:	4b65      	ldr	r3, [pc, #404]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005668:	4a64      	ldr	r2, [pc, #400]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fd f988 	bl	800298c <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fd f984 	bl	800298c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e14e      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005696:	4b59      	ldr	r3, [pc, #356]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ee      	beq.n	8005680 <HAL_RCC_OscConfig+0x5f0>
 80056a2:	e014      	b.n	80056ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fd f972 	bl	800298c <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fd f96e 	bl	800298c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e138      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056c2:	4b4e      	ldr	r3, [pc, #312]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ee      	bne.n	80056ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 812d 	beq.w	8005932 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056d8:	4b48      	ldr	r3, [pc, #288]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056e0:	2b18      	cmp	r3, #24
 80056e2:	f000 80bd 	beq.w	8005860 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	f040 809e 	bne.w	800582c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f0:	4b42      	ldr	r3, [pc, #264]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a41      	ldr	r2, [pc, #260]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80056f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fd f946 	bl	800298c <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005704:	f7fd f942 	bl	800298c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e10e      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005716:	4b39      	ldr	r3, [pc, #228]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005722:	4b36      	ldr	r3, [pc, #216]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005726:	4b37      	ldr	r3, [pc, #220]	@ (8005804 <HAL_RCC_OscConfig+0x774>)
 8005728:	4013      	ands	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	430a      	orrs	r2, r1
 8005736:	4931      	ldr	r1, [pc, #196]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	628b      	str	r3, [r1, #40]	@ 0x28
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	3b01      	subs	r3, #1
 8005742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574a:	3b01      	subs	r3, #1
 800574c:	025b      	lsls	r3, r3, #9
 800574e:	b29b      	uxth	r3, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	3b01      	subs	r3, #1
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005764:	3b01      	subs	r3, #1
 8005766:	061b      	lsls	r3, r3, #24
 8005768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800576c:	4923      	ldr	r1, [pc, #140]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800576e:	4313      	orrs	r3, r2
 8005770:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005772:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	4a21      	ldr	r2, [pc, #132]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800577e:	4b1f      	ldr	r3, [pc, #124]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005782:	4b21      	ldr	r3, [pc, #132]	@ (8005808 <HAL_RCC_OscConfig+0x778>)
 8005784:	4013      	ands	r3, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800578a:	00d2      	lsls	r2, r2, #3
 800578c:	491b      	ldr	r1, [pc, #108]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	f023 020c 	bic.w	r2, r3, #12
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	4917      	ldr	r1, [pc, #92]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057a4:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	f023 0202 	bic.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	4912      	ldr	r1, [pc, #72]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057b6:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	4a10      	ldr	r2, [pc, #64]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c2:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	4a0d      	ldr	r2, [pc, #52]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057ce:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	4a0a      	ldr	r2, [pc, #40]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80057da:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	4a07      	ldr	r2, [pc, #28]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e6:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a04      	ldr	r2, [pc, #16]	@ (80057fc <HAL_RCC_OscConfig+0x76c>)
 80057ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f2:	f7fd f8cb 	bl	800298c <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057f8:	e011      	b.n	800581e <HAL_RCC_OscConfig+0x78e>
 80057fa:	bf00      	nop
 80057fc:	58024400 	.word	0x58024400
 8005800:	58024800 	.word	0x58024800
 8005804:	fffffc0c 	.word	0xfffffc0c
 8005808:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580c:	f7fd f8be 	bl	800298c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e08a      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800581e:	4b47      	ldr	r3, [pc, #284]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0x77c>
 800582a:	e082      	b.n	8005932 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582c:	4b43      	ldr	r3, [pc, #268]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a42      	ldr	r2, [pc, #264]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd f8a8 	bl	800298c <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd f8a4 	bl	800298c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e070      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005852:	4b3a      	ldr	r3, [pc, #232]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x7b0>
 800585e:	e068      	b.n	8005932 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005860:	4b36      	ldr	r3, [pc, #216]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005866:	4b35      	ldr	r3, [pc, #212]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	2b01      	cmp	r3, #1
 8005872:	d031      	beq.n	80058d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f003 0203 	and.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d12a      	bne.n	80058d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588e:	429a      	cmp	r2, r3
 8005890:	d122      	bne.n	80058d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d11a      	bne.n	80058d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	0a5b      	lsrs	r3, r3, #9
 80058a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d111      	bne.n	80058d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d108      	bne.n	80058d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	0e1b      	lsrs	r3, r3, #24
 80058ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d001      	beq.n	80058dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e02b      	b.n	8005934 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058dc:	4b17      	ldr	r3, [pc, #92]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 80058de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d01f      	beq.n	8005932 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058f2:	4b12      	ldr	r3, [pc, #72]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	4a11      	ldr	r2, [pc, #68]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058fe:	f7fd f845 	bl	800298c <HAL_GetTick>
 8005902:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005904:	bf00      	nop
 8005906:	f7fd f841 	bl	800298c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	4293      	cmp	r3, r2
 8005910:	d0f9      	beq.n	8005906 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005916:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <HAL_RCC_OscConfig+0x8b0>)
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800591e:	00d2      	lsls	r2, r2, #3
 8005920:	4906      	ldr	r1, [pc, #24]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005922:	4313      	orrs	r3, r2
 8005924:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005926:	4b05      	ldr	r3, [pc, #20]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 8005928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592a:	4a04      	ldr	r2, [pc, #16]	@ (800593c <HAL_RCC_OscConfig+0x8ac>)
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3730      	adds	r7, #48	@ 0x30
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	ffff0007 	.word	0xffff0007

08005944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e19c      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005958:	4b8a      	ldr	r3, [pc, #552]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d910      	bls.n	8005988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b87      	ldr	r3, [pc, #540]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	4985      	ldr	r1, [pc, #532]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b83      	ldr	r3, [pc, #524]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e184      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	4b7b      	ldr	r3, [pc, #492]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d908      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059a4:	4b78      	ldr	r3, [pc, #480]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	4975      	ldr	r1, [pc, #468]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	4b70      	ldr	r3, [pc, #448]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d908      	bls.n	80059e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	496a      	ldr	r1, [pc, #424]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	4b64      	ldr	r3, [pc, #400]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d908      	bls.n	8005a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a00:	4b61      	ldr	r3, [pc, #388]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	495e      	ldr	r1, [pc, #376]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	4b59      	ldr	r3, [pc, #356]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d908      	bls.n	8005a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a2e:	4b56      	ldr	r3, [pc, #344]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4953      	ldr	r1, [pc, #332]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d010      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	4b4d      	ldr	r3, [pc, #308]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d908      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f023 020f 	bic.w	r2, r3, #15
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4947      	ldr	r1, [pc, #284]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d055      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a7a:	4b43      	ldr	r3, [pc, #268]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	4940      	ldr	r1, [pc, #256]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d107      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a94:	4b3c      	ldr	r3, [pc, #240]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d121      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0f6      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d107      	bne.n	8005abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aac:	4b36      	ldr	r3, [pc, #216]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d115      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0ea      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ac4:	4b30      	ldr	r3, [pc, #192]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0de      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0d6      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ae4:	4b28      	ldr	r3, [pc, #160]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f023 0207 	bic.w	r2, r3, #7
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4925      	ldr	r1, [pc, #148]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af6:	f7fc ff49 	bl	800298c <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afe:	f7fc ff45 	bl	800298c <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0be      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b14:	4b1c      	ldr	r3, [pc, #112]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d1eb      	bne.n	8005afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d208      	bcs.n	8005b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b42:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f023 020f 	bic.w	r2, r3, #15
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	490e      	ldr	r1, [pc, #56]	@ (8005b88 <HAL_RCC_ClockConfig+0x244>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b54:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d214      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b08      	ldr	r3, [pc, #32]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 020f 	bic.w	r2, r3, #15
 8005b6a:	4906      	ldr	r1, [pc, #24]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <HAL_RCC_ClockConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e086      	b.n	8005c92 <HAL_RCC_ClockConfig+0x34e>
 8005b84:	52002000 	.word	0x52002000
 8005b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d208      	bcs.n	8005bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	4939      	ldr	r1, [pc, #228]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d208      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bd6:	4b31      	ldr	r3, [pc, #196]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	492e      	ldr	r1, [pc, #184]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d010      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	4b28      	ldr	r3, [pc, #160]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d208      	bcs.n	8005c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c04:	4b25      	ldr	r3, [pc, #148]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	4922      	ldr	r1, [pc, #136]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d208      	bcs.n	8005c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c32:	4b1a      	ldr	r3, [pc, #104]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4917      	ldr	r1, [pc, #92]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c44:	f000 f834 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	4912      	ldr	r1, [pc, #72]	@ (8005ca0 <HAL_RCC_ClockConfig+0x35c>)
 8005c56:	5ccb      	ldrb	r3, [r1, r3]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c62:	4b0e      	ldr	r3, [pc, #56]	@ (8005c9c <HAL_RCC_ClockConfig+0x358>)
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca0 <HAL_RCC_ClockConfig+0x35c>)
 8005c6c:	5cd3      	ldrb	r3, [r2, r3]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca4 <HAL_RCC_ClockConfig+0x360>)
 8005c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca8 <HAL_RCC_ClockConfig+0x364>)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c82:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <HAL_RCC_ClockConfig+0x368>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fc fe36 	bl	80028f8 <HAL_InitTick>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	0800b760 	.word	0x0800b760
 8005ca4:	24000008 	.word	0x24000008
 8005ca8:	24000004 	.word	0x24000004
 8005cac:	2400000c 	.word	0x2400000c

08005cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b089      	sub	sp, #36	@ 0x24
 8005cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cb6:	4bb3      	ldr	r3, [pc, #716]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cbe:	2b18      	cmp	r3, #24
 8005cc0:	f200 8155 	bhi.w	8005f6e <HAL_RCC_GetSysClockFreq+0x2be>
 8005cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005d31 	.word	0x08005d31
 8005cd0:	08005f6f 	.word	0x08005f6f
 8005cd4:	08005f6f 	.word	0x08005f6f
 8005cd8:	08005f6f 	.word	0x08005f6f
 8005cdc:	08005f6f 	.word	0x08005f6f
 8005ce0:	08005f6f 	.word	0x08005f6f
 8005ce4:	08005f6f 	.word	0x08005f6f
 8005ce8:	08005f6f 	.word	0x08005f6f
 8005cec:	08005d57 	.word	0x08005d57
 8005cf0:	08005f6f 	.word	0x08005f6f
 8005cf4:	08005f6f 	.word	0x08005f6f
 8005cf8:	08005f6f 	.word	0x08005f6f
 8005cfc:	08005f6f 	.word	0x08005f6f
 8005d00:	08005f6f 	.word	0x08005f6f
 8005d04:	08005f6f 	.word	0x08005f6f
 8005d08:	08005f6f 	.word	0x08005f6f
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005f6f 	.word	0x08005f6f
 8005d14:	08005f6f 	.word	0x08005f6f
 8005d18:	08005f6f 	.word	0x08005f6f
 8005d1c:	08005f6f 	.word	0x08005f6f
 8005d20:	08005f6f 	.word	0x08005f6f
 8005d24:	08005f6f 	.word	0x08005f6f
 8005d28:	08005f6f 	.word	0x08005f6f
 8005d2c:	08005d63 	.word	0x08005d63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d30:	4b94      	ldr	r3, [pc, #592]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d3c:	4b91      	ldr	r3, [pc, #580]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	08db      	lsrs	r3, r3, #3
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	4a90      	ldr	r2, [pc, #576]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d4e:	e111      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d50:	4b8d      	ldr	r3, [pc, #564]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d52:	61bb      	str	r3, [r7, #24]
      break;
 8005d54:	e10e      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d56:	4b8d      	ldr	r3, [pc, #564]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d58:	61bb      	str	r3, [r7, #24]
      break;
 8005d5a:	e10b      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d5e:	61bb      	str	r3, [r7, #24]
      break;
 8005d60:	e108      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d62:	4b88      	ldr	r3, [pc, #544]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d6c:	4b85      	ldr	r3, [pc, #532]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d78:	4b82      	ldr	r3, [pc, #520]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d82:	4b80      	ldr	r3, [pc, #512]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	08db      	lsrs	r3, r3, #3
 8005d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80e1 	beq.w	8005f68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	f000 8083 	beq.w	8005eb4 <HAL_RCC_GetSysClockFreq+0x204>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	f200 80a1 	bhi.w	8005ef8 <HAL_RCC_GetSysClockFreq+0x248>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x114>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d056      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dc2:	e099      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02d      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	4a6b      	ldr	r2, [pc, #428]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfa:	4b62      	ldr	r3, [pc, #392]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e2a:	e087      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3e:	4b51      	ldr	r3, [pc, #324]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e6e:	e065      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e82:	4b40      	ldr	r3, [pc, #256]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eb2:	e043      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005fa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ef6:	e021      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f3c:	4b11      	ldr	r3, [pc, #68]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	0a5b      	lsrs	r3, r3, #9
 8005f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f46:	3301      	adds	r3, #1
 8005f48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f60:	ee17 3a90 	vmov	r3, s15
 8005f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f66:	e005      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
      break;
 8005f6c:	e002      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f70:	61bb      	str	r3, [r7, #24]
      break;
 8005f72:	bf00      	nop
  }

  return sysclockfreq;
 8005f74:	69bb      	ldr	r3, [r7, #24]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	@ 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	003d0900 	.word	0x003d0900
 8005f90:	016e3600 	.word	0x016e3600
 8005f94:	46000000 	.word	0x46000000
 8005f98:	4c742400 	.word	0x4c742400
 8005f9c:	4a742400 	.word	0x4a742400
 8005fa0:	4bb71b00 	.word	0x4bb71b00

08005fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005faa:	f7ff fe81 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	490f      	ldr	r1, [pc, #60]	@ (8005ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fbc:	5ccb      	ldrb	r3, [r1, r3]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	4a09      	ldr	r2, [pc, #36]	@ (8005ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fd2:	5cd3      	ldrb	r3, [r2, r3]
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	fa22 f303 	lsr.w	r3, r2, r3
 8005fde:	4a07      	ldr	r2, [pc, #28]	@ (8005ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8005fe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fe2:	4a07      	ldr	r2, [pc, #28]	@ (8006000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fe8:	4b04      	ldr	r3, [pc, #16]	@ (8005ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	0800b760 	.word	0x0800b760
 8005ffc:	24000008 	.word	0x24000008
 8006000:	24000004 	.word	0x24000004

08006004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006008:	f7ff ffcc 	bl	8005fa4 <HAL_RCC_GetHCLKFreq>
 800600c:	4602      	mov	r2, r0
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	091b      	lsrs	r3, r3, #4
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	4904      	ldr	r1, [pc, #16]	@ (800602c <HAL_RCC_GetPCLK1Freq+0x28>)
 800601a:	5ccb      	ldrb	r3, [r1, r3]
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006024:	4618      	mov	r0, r3
 8006026:	bd80      	pop	{r7, pc}
 8006028:	58024400 	.word	0x58024400
 800602c:	0800b760 	.word	0x0800b760

08006030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006034:	f7ff ffb6 	bl	8005fa4 <HAL_RCC_GetHCLKFreq>
 8006038:	4602      	mov	r2, r0
 800603a:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	4904      	ldr	r1, [pc, #16]	@ (8006058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006046:	5ccb      	ldrb	r3, [r1, r3]
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006050:	4618      	mov	r0, r3
 8006052:	bd80      	pop	{r7, pc}
 8006054:	58024400 	.word	0x58024400
 8006058:	0800b760 	.word	0x0800b760

0800605c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800605c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006060:	b0ca      	sub	sp, #296	@ 0x128
 8006062:	af00      	add	r7, sp, #0
 8006064:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800606e:	2300      	movs	r3, #0
 8006070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006080:	2500      	movs	r5, #0
 8006082:	ea54 0305 	orrs.w	r3, r4, r5
 8006086:	d049      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800608e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006092:	d02f      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006094:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006098:	d828      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800609a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800609e:	d01a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060a4:	d822      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ae:	d007      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060b0:	e01c      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b2:	4bb8      	ldr	r3, [pc, #736]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	4ab7      	ldr	r2, [pc, #732]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060be:	e01a      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	3308      	adds	r3, #8
 80060c6:	2102      	movs	r1, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fc8f 	bl	80079ec <RCCEx_PLL2_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060d4:	e00f      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	3328      	adds	r3, #40	@ 0x28
 80060dc:	2102      	movs	r1, #2
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fd36 	bl	8007b50 <RCCEx_PLL3_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060fe:	4ba5      	ldr	r3, [pc, #660]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006102:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800610c:	4aa1      	ldr	r2, [pc, #644]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610e:	430b      	orrs	r3, r1
 8006110:	6513      	str	r3, [r2, #80]	@ 0x50
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006128:	f04f 0900 	mov.w	r9, #0
 800612c:	ea58 0309 	orrs.w	r3, r8, r9
 8006130:	d047      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006138:	2b04      	cmp	r3, #4
 800613a:	d82a      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006159 	.word	0x08006159
 8006148:	08006167 	.word	0x08006167
 800614c:	0800617d 	.word	0x0800617d
 8006150:	0800619b 	.word	0x0800619b
 8006154:	0800619b 	.word	0x0800619b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4b8e      	ldr	r3, [pc, #568]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4a8d      	ldr	r2, [pc, #564]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006164:	e01a      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	3308      	adds	r3, #8
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fc3c 	bl	80079ec <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800617a:	e00f      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	3328      	adds	r3, #40	@ 0x28
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fce3 	bl	8007b50 <RCCEx_PLL3_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006190:	e004      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	f023 0107 	bic.w	r1, r3, #7
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b2:	4a78      	ldr	r2, [pc, #480]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80061ce:	f04f 0b00 	mov.w	fp, #0
 80061d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80061d6:	d04c      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e2:	d030      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80061e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e8:	d829      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80061ec:	d02d      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80061ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80061f0:	d825      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061f2:	2b80      	cmp	r3, #128	@ 0x80
 80061f4:	d018      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80061f6:	2b80      	cmp	r3, #128	@ 0x80
 80061f8:	d821      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80061fe:	2b40      	cmp	r3, #64	@ 0x40
 8006200:	d007      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006202:	e01c      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006204:	4b63      	ldr	r3, [pc, #396]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	4a62      	ldr	r2, [pc, #392]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800620a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800620e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006210:	e01c      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006216:	3308      	adds	r3, #8
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fbe6 	bl	80079ec <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006226:	e011      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	3328      	adds	r3, #40	@ 0x28
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fc8d 	bl	8007b50 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006244:	e002      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800624a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006254:	4b4f      	ldr	r3, [pc, #316]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006258:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006262:	4a4c      	ldr	r2, [pc, #304]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006264:	430b      	orrs	r3, r1
 8006266:	6513      	str	r3, [r2, #80]	@ 0x50
 8006268:	e003      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800626e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800627e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006282:	2300      	movs	r3, #0
 8006284:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006288:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d053      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800629a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800629e:	d035      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062a4:	d82e      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062aa:	d031      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062b0:	d828      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062b6:	d01a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062bc:	d822      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80062c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062c6:	d007      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80062c8:	e01c      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ca:	4b32      	ldr	r3, [pc, #200]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ce:	4a31      	ldr	r2, [pc, #196]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062d6:	e01c      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062dc:	3308      	adds	r3, #8
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 fb83 	bl	80079ec <RCCEx_PLL2_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062ec:	e011      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f2:	3328      	adds	r3, #40	@ 0x28
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 fc2a 	bl	8007b50 <RCCEx_PLL3_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006302:	e006      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800630a:	e002      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800630c:	bf00      	nop
 800630e:	e000      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800631a:	4b1e      	ldr	r3, [pc, #120]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800632a:	4a1a      	ldr	r2, [pc, #104]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006330:	e003      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006346:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800634a:	2300      	movs	r3, #0
 800634c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006350:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d056      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006362:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006366:	d038      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800636c:	d831      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800636e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006372:	d034      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006374:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006378:	d82b      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800637a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800637e:	d01d      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006380:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006384:	d825      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d006      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800638a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006390:	e01f      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006392:	bf00      	nop
 8006394:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4ba2      	ldr	r3, [pc, #648]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	4aa1      	ldr	r2, [pc, #644]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063a4:	e01c      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063aa:	3308      	adds	r3, #8
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 fb1c 	bl	80079ec <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063ba:	e011      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	3328      	adds	r3, #40	@ 0x28
 80063c2:	2100      	movs	r1, #0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fbc3 	bl	8007b50 <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063d0:	e006      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063f8:	4a8a      	ldr	r2, [pc, #552]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063fa:	430b      	orrs	r3, r1
 80063fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800641e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006422:	460b      	mov	r3, r1
 8006424:	4313      	orrs	r3, r2
 8006426:	d03a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800642e:	2b30      	cmp	r3, #48	@ 0x30
 8006430:	d01f      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006432:	2b30      	cmp	r3, #48	@ 0x30
 8006434:	d819      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006436:	2b20      	cmp	r3, #32
 8006438:	d00c      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800643a:	2b20      	cmp	r3, #32
 800643c:	d815      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d019      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006442:	2b10      	cmp	r3, #16
 8006444:	d111      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006446:	4b77      	ldr	r3, [pc, #476]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	4a76      	ldr	r2, [pc, #472]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800644c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006452:	e011      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	3308      	adds	r3, #8
 800645a:	2102      	movs	r1, #2
 800645c:	4618      	mov	r0, r3
 800645e:	f001 fac5 	bl	80079ec <RCCEx_PLL2_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006480:	4b68      	ldr	r3, [pc, #416]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006484:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800648e:	4a65      	ldr	r2, [pc, #404]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006490:	430b      	orrs	r3, r1
 8006492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80064aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064ae:	2300      	movs	r3, #0
 80064b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d051      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064c8:	d035      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064ce:	d82e      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064d4:	d031      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064da:	d828      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e0:	d01a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e6:	d822      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80064ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f0:	d007      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80064f2:	e01c      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006500:	e01c      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	3308      	adds	r3, #8
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fa6e 	bl	80079ec <RCCEx_PLL2_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006516:	e011      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651c:	3328      	adds	r3, #40	@ 0x28
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fb15 	bl	8007b50 <RCCEx_PLL3_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800652c:	e006      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006534:	e002      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800653a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006544:	4b37      	ldr	r3, [pc, #220]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006548:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006552:	4a34      	ldr	r2, [pc, #208]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006554:	430b      	orrs	r3, r1
 8006556:	6513      	str	r3, [r2, #80]	@ 0x50
 8006558:	e003      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800656e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006572:	2300      	movs	r3, #0
 8006574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006578:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	d056      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800658c:	d033      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800658e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006592:	d82c      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006598:	d02f      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800659a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800659e:	d826      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065a4:	d02b      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065aa:	d820      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b0:	d012      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80065b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b6:	d81a      	bhi.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d022      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c0:	d115      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	3308      	adds	r3, #8
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fa0e 	bl	80079ec <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065d6:	e015      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065dc:	3328      	adds	r3, #40	@ 0x28
 80065de:	2101      	movs	r1, #1
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fab5 	bl	8007b50 <RCCEx_PLL3_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065ec:	e00a      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065f4:	e006      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065f6:	bf00      	nop
 80065f8:	e004      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10d      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800660c:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800660e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006610:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800661a:	4a02      	ldr	r2, [pc, #8]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800661c:	430b      	orrs	r3, r1
 800661e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006622:	bf00      	nop
 8006624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800663c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006646:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	d055      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800665c:	d033      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800665e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006662:	d82c      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006668:	d02f      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666e:	d826      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006670:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006674:	d02b      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006676:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800667a:	d820      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800667c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006680:	d012      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006686:	d81a      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d022      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800668c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006690:	d115      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	3308      	adds	r3, #8
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f001 f9a6 	bl	80079ec <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066a6:	e015      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ac:	3328      	adds	r3, #40	@ 0x28
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fa4d 	bl	8007b50 <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066bc:	e00a      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066c4:	e006      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066c6:	bf00      	nop
 80066c8:	e004      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066dc:	4ba3      	ldr	r3, [pc, #652]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066ec:	4a9f      	ldr	r2, [pc, #636]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d037      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006726:	d00e      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800672c:	d816      	bhi.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d018      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006736:	d111      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006738:	4b8c      	ldr	r3, [pc, #560]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	4a8b      	ldr	r2, [pc, #556]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800673e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006744:	e00f      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674a:	3308      	adds	r3, #8
 800674c:	2101      	movs	r1, #1
 800674e:	4618      	mov	r0, r3
 8006750:	f001 f94c 	bl	80079ec <RCCEx_PLL2_Config>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800675a:	e004      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006762:	e000      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800676e:	4b7f      	ldr	r3, [pc, #508]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006772:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677c:	4a7b      	ldr	r2, [pc, #492]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800677e:	430b      	orrs	r3, r1
 8006780:	6513      	str	r3, [r2, #80]	@ 0x50
 8006782:	e003      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	d039      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d81c      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80067b6:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	080067f9 	.word	0x080067f9
 80067c0:	080067cd 	.word	0x080067cd
 80067c4:	080067db 	.word	0x080067db
 80067c8:	080067f9 	.word	0x080067f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067cc:	4b67      	ldr	r3, [pc, #412]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	4a66      	ldr	r2, [pc, #408]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067d8:	e00f      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	3308      	adds	r3, #8
 80067e0:	2102      	movs	r1, #2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f902 	bl	80079ec <RCCEx_PLL2_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067ee:	e004      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067f6:	e000      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80067f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006802:	4b5a      	ldr	r3, [pc, #360]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006806:	f023 0103 	bic.w	r1, r3, #3
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006810:	4a56      	ldr	r2, [pc, #344]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006812:	430b      	orrs	r3, r1
 8006814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006816:	e003      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800682c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006836:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800683a:	460b      	mov	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	f000 809f 	beq.w	8006980 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006842:	4b4b      	ldr	r3, [pc, #300]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a4a      	ldr	r2, [pc, #296]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800684c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800684e:	f7fc f89d 	bl	800298c <HAL_GetTick>
 8006852:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006856:	e00b      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006858:	f7fc f898 	bl	800298c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b64      	cmp	r3, #100	@ 0x64
 8006866:	d903      	bls.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800686e:	e005      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006870:	4b3f      	ldr	r3, [pc, #252]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ed      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800687c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006880:	2b00      	cmp	r3, #0
 8006882:	d179      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006884:	4b39      	ldr	r3, [pc, #228]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006886:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006890:	4053      	eors	r3, r2
 8006892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d015      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800689a:	4b34      	ldr	r3, [pc, #208]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a6:	4b31      	ldr	r3, [pc, #196]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	4a30      	ldr	r2, [pc, #192]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068b2:	4b2e      	ldr	r3, [pc, #184]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	4a2d      	ldr	r2, [pc, #180]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068be:	4a2b      	ldr	r2, [pc, #172]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	d118      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fc f85a 	bl	800298c <HAL_GetTick>
 80068d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068dc:	e00d      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068de:	f7fc f855 	bl	800298c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068e8:	1ad2      	subs	r2, r2, r3
 80068ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d903      	bls.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80068f8:	e005      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068fa:	4b1c      	ldr	r3, [pc, #112]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0eb      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690a:	2b00      	cmp	r3, #0
 800690c:	d129      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800691a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800691e:	d10e      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006920:	4b12      	ldr	r3, [pc, #72]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006930:	091a      	lsrs	r2, r3, #4
 8006932:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006934:	4013      	ands	r3, r2
 8006936:	4a0d      	ldr	r2, [pc, #52]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006938:	430b      	orrs	r3, r1
 800693a:	6113      	str	r3, [r2, #16]
 800693c:	e005      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800693e:	4b0b      	ldr	r3, [pc, #44]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	4a0a      	ldr	r2, [pc, #40]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006944:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006948:	6113      	str	r3, [r2, #16]
 800694a:	4b08      	ldr	r3, [pc, #32]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800694c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695a:	4a04      	ldr	r2, [pc, #16]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800695c:	430b      	orrs	r3, r1
 800695e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006960:	e00e      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800696a:	e009      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800696c:	58024400 	.word	0x58024400
 8006970:	58024800 	.word	0x58024800
 8006974:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f002 0301 	and.w	r3, r2, #1
 800698c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006996:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800699a:	460b      	mov	r3, r1
 800699c:	4313      	orrs	r3, r2
 800699e:	f000 8089 	beq.w	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069a8:	2b28      	cmp	r3, #40	@ 0x28
 80069aa:	d86b      	bhi.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80069ac:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a8d 	.word	0x08006a8d
 80069b8:	08006a85 	.word	0x08006a85
 80069bc:	08006a85 	.word	0x08006a85
 80069c0:	08006a85 	.word	0x08006a85
 80069c4:	08006a85 	.word	0x08006a85
 80069c8:	08006a85 	.word	0x08006a85
 80069cc:	08006a85 	.word	0x08006a85
 80069d0:	08006a85 	.word	0x08006a85
 80069d4:	08006a59 	.word	0x08006a59
 80069d8:	08006a85 	.word	0x08006a85
 80069dc:	08006a85 	.word	0x08006a85
 80069e0:	08006a85 	.word	0x08006a85
 80069e4:	08006a85 	.word	0x08006a85
 80069e8:	08006a85 	.word	0x08006a85
 80069ec:	08006a85 	.word	0x08006a85
 80069f0:	08006a85 	.word	0x08006a85
 80069f4:	08006a6f 	.word	0x08006a6f
 80069f8:	08006a85 	.word	0x08006a85
 80069fc:	08006a85 	.word	0x08006a85
 8006a00:	08006a85 	.word	0x08006a85
 8006a04:	08006a85 	.word	0x08006a85
 8006a08:	08006a85 	.word	0x08006a85
 8006a0c:	08006a85 	.word	0x08006a85
 8006a10:	08006a85 	.word	0x08006a85
 8006a14:	08006a8d 	.word	0x08006a8d
 8006a18:	08006a85 	.word	0x08006a85
 8006a1c:	08006a85 	.word	0x08006a85
 8006a20:	08006a85 	.word	0x08006a85
 8006a24:	08006a85 	.word	0x08006a85
 8006a28:	08006a85 	.word	0x08006a85
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006a85 	.word	0x08006a85
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a85 	.word	0x08006a85
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006a8d 	.word	0x08006a8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 ffc3 	bl	80079ec <RCCEx_PLL2_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a6c:	e00f      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a72:	3328      	adds	r3, #40	@ 0x28
 8006a74:	2101      	movs	r1, #1
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f86a 	bl	8007b50 <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a82:	e004      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a8a:	e000      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a96:	4bbf      	ldr	r3, [pc, #764]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa4:	4abb      	ldr	r2, [pc, #748]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006aaa:	e003      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f002 0302 	and.w	r3, r2, #2
 8006ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006aca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d041      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d824      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006ade:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b31 	.word	0x08006b31
 8006ae8:	08006afd 	.word	0x08006afd
 8006aec:	08006b13 	.word	0x08006b13
 8006af0:	08006b31 	.word	0x08006b31
 8006af4:	08006b31 	.word	0x08006b31
 8006af8:	08006b31 	.word	0x08006b31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	3308      	adds	r3, #8
 8006b02:	2101      	movs	r1, #1
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 ff71 	bl	80079ec <RCCEx_PLL2_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b10:	e00f      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3328      	adds	r3, #40	@ 0x28
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f818 	bl	8007b50 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b26:	e004      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b2e:	e000      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b3a:	4b96      	ldr	r3, [pc, #600]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3e:	f023 0107 	bic.w	r1, r3, #7
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b48:	4a92      	ldr	r2, [pc, #584]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f002 0304 	and.w	r3, r2, #4
 8006b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d044      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d825      	bhi.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006b84:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bd9 	.word	0x08006bd9
 8006b90:	08006ba5 	.word	0x08006ba5
 8006b94:	08006bbb 	.word	0x08006bbb
 8006b98:	08006bd9 	.word	0x08006bd9
 8006b9c:	08006bd9 	.word	0x08006bd9
 8006ba0:	08006bd9 	.word	0x08006bd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	3308      	adds	r3, #8
 8006baa:	2101      	movs	r1, #1
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 ff1d 	bl	80079ec <RCCEx_PLL2_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006bb8:	e00f      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbe:	3328      	adds	r3, #40	@ 0x28
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 ffc4 	bl	8007b50 <RCCEx_PLL3_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006bce:	e004      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bd6:	e000      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006be2:	4b6c      	ldr	r3, [pc, #432]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be6:	f023 0107 	bic.w	r1, r3, #7
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf2:	4a68      	ldr	r2, [pc, #416]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f002 0320 	and.w	r3, r2, #32
 8006c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d055      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c2e:	d033      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c34:	d82c      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3a:	d02f      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c40:	d826      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c46:	d02b      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006c48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c4c:	d820      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c52:	d012      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c58:	d81a      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d022      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c62:	d115      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 febd 	bl	80079ec <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c78:	e015      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	3328      	adds	r3, #40	@ 0x28
 8006c80:	2102      	movs	r1, #2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 ff64 	bl	8007b50 <RCCEx_PLL3_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c8e:	e00a      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c96:	e006      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c98:	bf00      	nop
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cae:	4b39      	ldr	r3, [pc, #228]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbe:	4a35      	ldr	r2, [pc, #212]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cc4:	e003      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ce4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4313      	orrs	r3, r2
 8006cec:	d058      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cf6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cfa:	d033      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006cfc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d00:	d82c      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d06:	d02f      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0c:	d826      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d12:	d02b      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d18:	d820      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d1e:	d012      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d24:	d81a      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d022      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d2e:	d115      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d34:	3308      	adds	r3, #8
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fe57 	bl	80079ec <RCCEx_PLL2_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d44:	e015      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4a:	3328      	adds	r3, #40	@ 0x28
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fefe 	bl	8007b50 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d62:	e006      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d64:	bf00      	nop
 8006d66:	e004      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10e      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d7a:	4b06      	ldr	r3, [pc, #24]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d8a:	4a02      	ldr	r2, [pc, #8]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d92:	bf00      	nop
 8006d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006db6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d055      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006dcc:	d033      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006dce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006dd2:	d82c      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd8:	d02f      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dde:	d826      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006de0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006de4:	d02b      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006de6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006dea:	d820      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df0:	d012      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df6:	d81a      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d022      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e00:	d115      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e06:	3308      	adds	r3, #8
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fdee 	bl	80079ec <RCCEx_PLL2_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e16:	e015      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1c:	3328      	adds	r3, #40	@ 0x28
 8006e1e:	2102      	movs	r1, #2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fe95 	bl	8007b50 <RCCEx_PLL3_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e00a      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e34:	e006      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e36:	bf00      	nop
 8006e38:	e004      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e3a:	bf00      	nop
 8006e3c:	e002      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10b      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e5c:	4a9d      	ldr	r2, [pc, #628]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f002 0308 	and.w	r3, r2, #8
 8006e78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	d01e      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	3328      	adds	r3, #40	@ 0x28
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fe54 	bl	8007b50 <RCCEx_PLL3_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006eb4:	4b87      	ldr	r3, [pc, #540]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ec4:	4a83      	ldr	r2, [pc, #524]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f002 0310 	and.w	r3, r2, #16
 8006ed6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006eda:	2300      	movs	r3, #0
 8006edc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ee0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	d01e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef6:	d10c      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efc:	3328      	adds	r3, #40	@ 0x28
 8006efe:	2102      	movs	r1, #2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fe25 	bl	8007b50 <RCCEx_PLL3_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f12:	4b70      	ldr	r3, [pc, #448]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f22:	4a6c      	ldr	r2, [pc, #432]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f3e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d03e      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f54:	d022      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5a:	d81b      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f64:	d00b      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006f66:	e015      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fd3b 	bl	80079ec <RCCEx_PLL2_Config>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f7c:	e00f      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f82:	3328      	adds	r3, #40	@ 0x28
 8006f84:	2102      	movs	r1, #2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fde2 	bl	8007b50 <RCCEx_PLL3_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f92:	e004      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f9a:	e000      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006faa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fb6:	4a47      	ldr	r2, [pc, #284]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fbc:	e003      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006fd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fd8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d03b      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fee:	d01f      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006ff0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ff4:	d818      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006ffc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007000:	d007      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007002:	e011      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007004:	4b33      	ldr	r3, [pc, #204]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007008:	4a32      	ldr	r2, [pc, #200]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800700a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007010:	e00f      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	3328      	adds	r3, #40	@ 0x28
 8007018:	2101      	movs	r1, #1
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fd98 	bl	8007b50 <RCCEx_PLL3_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007026:	e004      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800702e:	e000      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800703a:	4b26      	ldr	r3, [pc, #152]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704a:	4a22      	ldr	r2, [pc, #136]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800704c:	430b      	orrs	r3, r1
 800704e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007050:	e003      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007066:	673b      	str	r3, [r7, #112]	@ 0x70
 8007068:	2300      	movs	r3, #0
 800706a:	677b      	str	r3, [r7, #116]	@ 0x74
 800706c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007070:	460b      	mov	r3, r1
 8007072:	4313      	orrs	r3, r2
 8007074:	d034      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007084:	d007      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007086:	e011      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007088:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	4a11      	ldr	r2, [pc, #68]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800708e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007094:	e00e      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	3308      	adds	r3, #8
 800709c:	2102      	movs	r1, #2
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fca4 	bl	80079ec <RCCEx_PLL2_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070aa:	e003      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10d      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070bc:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ca:	4a02      	ldr	r2, [pc, #8]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070d0:	e006      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80070ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ee:	2300      	movs	r3, #0
 80070f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80070f6:	460b      	mov	r3, r1
 80070f8:	4313      	orrs	r3, r2
 80070fa:	d00c      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007100:	3328      	adds	r3, #40	@ 0x28
 8007102:	2102      	movs	r1, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fd23 	bl	8007b50 <RCCEx_PLL3_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007122:	663b      	str	r3, [r7, #96]	@ 0x60
 8007124:	2300      	movs	r3, #0
 8007126:	667b      	str	r3, [r7, #100]	@ 0x64
 8007128:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800712c:	460b      	mov	r3, r1
 800712e:	4313      	orrs	r3, r2
 8007130:	d038      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800713a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800713e:	d018      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007144:	d811      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714a:	d014      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800714c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007150:	d80b      	bhi.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d011      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715a:	d106      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715c:	4bc3      	ldr	r3, [pc, #780]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	4ac2      	ldr	r2, [pc, #776]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007168:	e008      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007170:	e004      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007172:	bf00      	nop
 8007174:	e002      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800717a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007184:	4bb9      	ldr	r3, [pc, #740]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007188:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007194:	4ab5      	ldr	r2, [pc, #724]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007196:	430b      	orrs	r3, r1
 8007198:	6553      	str	r3, [r2, #84]	@ 0x54
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80071b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071b2:	2300      	movs	r3, #0
 80071b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071ba:	460b      	mov	r3, r1
 80071bc:	4313      	orrs	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071c0:	4baa      	ldr	r3, [pc, #680]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ce:	4aa7      	ldr	r2, [pc, #668]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80071e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80071e2:	2300      	movs	r3, #0
 80071e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80071e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d00a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80071f0:	4b9e      	ldr	r3, [pc, #632]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007200:	4a9a      	ldr	r2, [pc, #616]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007202:	430b      	orrs	r3, r1
 8007204:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007214:	2300      	movs	r3, #0
 8007216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007218:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800721c:	460b      	mov	r3, r1
 800721e:	4313      	orrs	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007222:	4b92      	ldr	r3, [pc, #584]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007226:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007230:	4a8e      	ldr	r2, [pc, #568]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007232:	430b      	orrs	r3, r1
 8007234:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007242:	643b      	str	r3, [r7, #64]	@ 0x40
 8007244:	2300      	movs	r3, #0
 8007246:	647b      	str	r3, [r7, #68]	@ 0x44
 8007248:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d00e      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007252:	4b86      	ldr	r3, [pc, #536]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	4a85      	ldr	r2, [pc, #532]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007258:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800725c:	6113      	str	r3, [r2, #16]
 800725e:	4b83      	ldr	r3, [pc, #524]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007260:	6919      	ldr	r1, [r3, #16]
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007266:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800726a:	4a80      	ldr	r2, [pc, #512]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800727c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800727e:	2300      	movs	r3, #0
 8007280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007282:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007286:	460b      	mov	r3, r1
 8007288:	4313      	orrs	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800728c:	4b77      	ldr	r3, [pc, #476]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007290:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729a:	4a74      	ldr	r2, [pc, #464]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800729c:	430b      	orrs	r3, r1
 800729e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80072ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ae:	2300      	movs	r3, #0
 80072b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072b6:	460b      	mov	r3, r1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072bc:	4b6b      	ldr	r3, [pc, #428]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072cc:	4a67      	ldr	r2, [pc, #412]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ce:	430b      	orrs	r3, r1
 80072d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	2100      	movs	r1, #0
 80072dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80072e8:	460b      	mov	r3, r1
 80072ea:	4313      	orrs	r3, r2
 80072ec:	d011      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	3308      	adds	r3, #8
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fb78 	bl	80079ec <RCCEx_PLL2_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	2100      	movs	r1, #0
 800731c:	6239      	str	r1, [r7, #32]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
 8007324:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007328:	460b      	mov	r3, r1
 800732a:	4313      	orrs	r3, r2
 800732c:	d011      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800732e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007332:	3308      	adds	r3, #8
 8007334:	2101      	movs	r1, #1
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fb58 	bl	80079ec <RCCEx_PLL2_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	2100      	movs	r1, #0
 800735c:	61b9      	str	r1, [r7, #24]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007368:	460b      	mov	r3, r1
 800736a:	4313      	orrs	r3, r2
 800736c:	d011      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	3308      	adds	r3, #8
 8007374:	2102      	movs	r1, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fb38 	bl	80079ec <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	2100      	movs	r1, #0
 800739c:	6139      	str	r1, [r7, #16]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d011      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b2:	3328      	adds	r3, #40	@ 0x28
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fbca 	bl	8007b50 <RCCEx_PLL3_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	2100      	movs	r1, #0
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073e8:	460b      	mov	r3, r1
 80073ea:	4313      	orrs	r3, r2
 80073ec:	d011      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	3328      	adds	r3, #40	@ 0x28
 80073f4:	2101      	movs	r1, #1
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fbaa 	bl	8007b50 <RCCEx_PLL3_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800740e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	2100      	movs	r1, #0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	607b      	str	r3, [r7, #4]
 8007424:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d011      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3328      	adds	r3, #40	@ 0x28
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fb8a 	bl	8007b50 <RCCEx_PLL3_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007452:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
}
 8007460:	4618      	mov	r0, r3
 8007462:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007466:	46bd      	mov	sp, r7
 8007468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800746c:	58024400 	.word	0x58024400

08007470 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007474:	f7fe fd96 	bl	8005fa4 <HAL_RCC_GetHCLKFreq>
 8007478:	4602      	mov	r2, r0
 800747a:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	091b      	lsrs	r3, r3, #4
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	4904      	ldr	r1, [pc, #16]	@ (8007498 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007486:	5ccb      	ldrb	r3, [r1, r3]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	58024400 	.word	0x58024400
 8007498:	0800b760 	.word	0x0800b760

0800749c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800749c:	b480      	push	{r7}
 800749e:	b089      	sub	sp, #36	@ 0x24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074a4:	4ba1      	ldr	r3, [pc, #644]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80074ae:	4b9f      	ldr	r3, [pc, #636]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	0b1b      	lsrs	r3, r3, #12
 80074b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074ba:	4b9c      	ldr	r3, [pc, #624]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80074c6:	4b99      	ldr	r3, [pc, #612]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	08db      	lsrs	r3, r3, #3
 80074cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8111 	beq.w	800770c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	f000 8083 	beq.w	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	f200 80a1 	bhi.w	800763c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d056      	beq.n	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007506:	e099      	b.n	800763c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007508:	4b88      	ldr	r3, [pc, #544]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d02d      	beq.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007514:	4b85      	ldr	r3, [pc, #532]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	08db      	lsrs	r3, r3, #3
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	4a84      	ldr	r2, [pc, #528]	@ (8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
 8007524:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b7b      	ldr	r3, [pc, #492]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800756e:	e087      	b.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007738 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b6a      	ldr	r3, [pc, #424]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b2:	e065      	b.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800773c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b59      	ldr	r3, [pc, #356]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f6:	e043      	b.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b48      	ldr	r3, [pc, #288]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800763a:	e021      	b.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800773c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b37      	ldr	r3, [pc, #220]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800767e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007680:	4b2a      	ldr	r3, [pc, #168]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	0a5b      	lsrs	r3, r3, #9
 8007686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800769a:	edd7 6a07 	vldr	s13, [r7, #28]
 800769e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a6:	ee17 2a90 	vmov	r2, s15
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80076ae:	4b1f      	ldr	r3, [pc, #124]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d4:	ee17 2a90 	vmov	r2, s15
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076dc:	4b13      	ldr	r3, [pc, #76]	@ (800772c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007702:	ee17 2a90 	vmov	r2, s15
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800770a:	e008      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	609a      	str	r2, [r3, #8]
}
 800771e:	bf00      	nop
 8007720:	3724      	adds	r7, #36	@ 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	03d09000 	.word	0x03d09000
 8007734:	46000000 	.word	0x46000000
 8007738:	4c742400 	.word	0x4c742400
 800773c:	4a742400 	.word	0x4a742400
 8007740:	4bb71b00 	.word	0x4bb71b00

08007744 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007744:	b480      	push	{r7}
 8007746:	b089      	sub	sp, #36	@ 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800774c:	4ba1      	ldr	r3, [pc, #644]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007756:	4b9f      	ldr	r3, [pc, #636]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775a:	0d1b      	lsrs	r3, r3, #20
 800775c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007760:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007762:	4b9c      	ldr	r3, [pc, #624]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800776e:	4b99      	ldr	r3, [pc, #612]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	08db      	lsrs	r3, r3, #3
 8007774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	fb02 f303 	mul.w	r3, r2, r3
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8111 	beq.w	80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b02      	cmp	r3, #2
 8007796:	f000 8083 	beq.w	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b02      	cmp	r3, #2
 800779e:	f200 80a1 	bhi.w	80078e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d056      	beq.n	800785c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077ae:	e099      	b.n	80078e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077b0:	4b88      	ldr	r3, [pc, #544]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02d      	beq.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077bc:	4b85      	ldr	r3, [pc, #532]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	08db      	lsrs	r3, r3, #3
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	4a84      	ldr	r2, [pc, #528]	@ (80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
 80077cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b7b      	ldr	r3, [pc, #492]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80079dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007816:	e087      	b.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782a:	4b6a      	ldr	r3, [pc, #424]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	ed97 6a03 	vldr	s12, [r7, #12]
 800783e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80079dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800785a:	e065      	b.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80079e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800786a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786e:	4b59      	ldr	r3, [pc, #356]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007882:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80079dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789e:	e043      	b.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b2:	4b48      	ldr	r3, [pc, #288]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80079dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078e2:	e021      	b.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80079e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f6:	4b37      	ldr	r3, [pc, #220]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007906:	ed97 6a03 	vldr	s12, [r7, #12]
 800790a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80079dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800790e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800791a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007926:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007928:	4b2a      	ldr	r3, [pc, #168]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792c:	0a5b      	lsrs	r3, r3, #9
 800792e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800793e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007942:	edd7 6a07 	vldr	s13, [r7, #28]
 8007946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800794e:	ee17 2a90 	vmov	r2, s15
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007956:	4b1f      	ldr	r3, [pc, #124]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800796c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007970:	edd7 6a07 	vldr	s13, [r7, #28]
 8007974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797c:	ee17 2a90 	vmov	r2, s15
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007984:	4b13      	ldr	r3, [pc, #76]	@ (80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007988:	0e1b      	lsrs	r3, r3, #24
 800798a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800799a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800799e:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079aa:	ee17 2a90 	vmov	r2, s15
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079b2:	e008      	b.n	80079c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	609a      	str	r2, [r3, #8]
}
 80079c6:	bf00      	nop
 80079c8:	3724      	adds	r7, #36	@ 0x24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
 80079d8:	03d09000 	.word	0x03d09000
 80079dc:	46000000 	.word	0x46000000
 80079e0:	4c742400 	.word	0x4c742400
 80079e4:	4a742400 	.word	0x4a742400
 80079e8:	4bb71b00 	.word	0x4bb71b00

080079ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079fa:	4b53      	ldr	r3, [pc, #332]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 80079fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d101      	bne.n	8007a0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e099      	b.n	8007b3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a16:	f7fa ffb9 	bl	800298c <HAL_GetTick>
 8007a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a1c:	e008      	b.n	8007a30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a1e:	f7fa ffb5 	bl	800298c <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e086      	b.n	8007b3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a30:	4b45      	ldr	r3, [pc, #276]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f0      	bne.n	8007a1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a3c:	4b42      	ldr	r3, [pc, #264]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	031b      	lsls	r3, r3, #12
 8007a4a:	493f      	ldr	r1, [pc, #252]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	025b      	lsls	r3, r3, #9
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	061b      	lsls	r3, r3, #24
 8007a7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a80:	4931      	ldr	r1, [pc, #196]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a86:	4b30      	ldr	r3, [pc, #192]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	492d      	ldr	r1, [pc, #180]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a98:	4b2b      	ldr	r3, [pc, #172]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	f023 0220 	bic.w	r2, r3, #32
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	4928      	ldr	r1, [pc, #160]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007aaa:	4b27      	ldr	r3, [pc, #156]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	4a26      	ldr	r2, [pc, #152]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007ab0:	f023 0310 	bic.w	r3, r3, #16
 8007ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ab6:	4b24      	ldr	r3, [pc, #144]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aba:	4b24      	ldr	r3, [pc, #144]	@ (8007b4c <RCCEx_PLL2_Config+0x160>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	69d2      	ldr	r2, [r2, #28]
 8007ac2:	00d2      	lsls	r2, r2, #3
 8007ac4:	4920      	ldr	r1, [pc, #128]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007aca:	4b1f      	ldr	r3, [pc, #124]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	4a1e      	ldr	r2, [pc, #120]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007ad0:	f043 0310 	orr.w	r3, r3, #16
 8007ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007adc:	4b1a      	ldr	r3, [pc, #104]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	4a19      	ldr	r2, [pc, #100]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007ae2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ae8:	e00f      	b.n	8007b0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d106      	bne.n	8007afe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007af0:	4b15      	ldr	r3, [pc, #84]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	4a14      	ldr	r2, [pc, #80]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007afc:	e005      	b.n	8007b0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007afe:	4b12      	ldr	r3, [pc, #72]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	4a11      	ldr	r2, [pc, #68]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007b10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b16:	f7fa ff39 	bl	800298c <HAL_GetTick>
 8007b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b1c:	e008      	b.n	8007b30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b1e:	f7fa ff35 	bl	800298c <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e006      	b.n	8007b3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b30:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0f0      	beq.n	8007b1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	ffff0007 	.word	0xffff0007

08007b50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b5e:	4b53      	ldr	r3, [pc, #332]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d101      	bne.n	8007b6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e099      	b.n	8007ca2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a4e      	ldr	r2, [pc, #312]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7a:	f7fa ff07 	bl	800298c <HAL_GetTick>
 8007b7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b80:	e008      	b.n	8007b94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b82:	f7fa ff03 	bl	800298c <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d901      	bls.n	8007b94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e086      	b.n	8007ca2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b94:	4b45      	ldr	r3, [pc, #276]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f0      	bne.n	8007b82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ba0:	4b42      	ldr	r3, [pc, #264]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	051b      	lsls	r3, r3, #20
 8007bae:	493f      	ldr	r1, [pc, #252]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	025b      	lsls	r3, r3, #9
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	061b      	lsls	r3, r3, #24
 8007be0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007be4:	4931      	ldr	r1, [pc, #196]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bea:	4b30      	ldr	r3, [pc, #192]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	492d      	ldr	r1, [pc, #180]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	4928      	ldr	r1, [pc, #160]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c0e:	4b27      	ldr	r3, [pc, #156]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	4a26      	ldr	r2, [pc, #152]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c1a:	4b24      	ldr	r3, [pc, #144]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c1e:	4b24      	ldr	r3, [pc, #144]	@ (8007cb0 <RCCEx_PLL3_Config+0x160>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	69d2      	ldr	r2, [r2, #28]
 8007c26:	00d2      	lsls	r2, r2, #3
 8007c28:	4920      	ldr	r1, [pc, #128]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	4a1e      	ldr	r2, [pc, #120]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c40:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	4a19      	ldr	r2, [pc, #100]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c4c:	e00f      	b.n	8007c6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d106      	bne.n	8007c62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c54:	4b15      	ldr	r3, [pc, #84]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a14      	ldr	r2, [pc, #80]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c60:	e005      	b.n	8007c6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	4a11      	ldr	r2, [pc, #68]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a0e      	ldr	r2, [pc, #56]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7a:	f7fa fe87 	bl	800298c <HAL_GetTick>
 8007c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c80:	e008      	b.n	8007c94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c82:	f7fa fe83 	bl	800298c <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e006      	b.n	8007ca2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <RCCEx_PLL3_Config+0x15c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	ffff0007 	.word	0xffff0007

08007cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e049      	b.n	8007d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7fa f8aa 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f000 fd50 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d001      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e054      	b.n	8007e26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a26      	ldr	r2, [pc, #152]	@ (8007e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d022      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da6:	d01d      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a22      	ldr	r2, [pc, #136]	@ (8007e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d018      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a21      	ldr	r2, [pc, #132]	@ (8007e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d013      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00e      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	@ (8007e44 <HAL_TIM_Base_Start_IT+0xe0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e48 <HAL_TIM_Base_Start_IT+0xe4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x80>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1b      	ldr	r2, [pc, #108]	@ (8007e4c <HAL_TIM_Base_Start_IT+0xe8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d115      	bne.n	8007e10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	4b19      	ldr	r3, [pc, #100]	@ (8007e50 <HAL_TIM_Base_Start_IT+0xec>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b06      	cmp	r3, #6
 8007df4:	d015      	beq.n	8007e22 <HAL_TIM_Base_Start_IT+0xbe>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfc:	d011      	beq.n	8007e22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0201 	orr.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0e:	e008      	b.n	8007e22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e000      	b.n	8007e24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40010000 	.word	0x40010000
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40000800 	.word	0x40000800
 8007e40:	40000c00 	.word	0x40000c00
 8007e44:	40010400 	.word	0x40010400
 8007e48:	40001800 	.word	0x40001800
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	00010007 	.word	0x00010007

08007e54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e049      	b.n	8007efa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fa f8dc 	bl	8002038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f000 fc80 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d109      	bne.n	8007f28 <HAL_TIM_PWM_Start+0x24>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	bf14      	ite	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	2300      	moveq	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	e03c      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x9e>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d109      	bne.n	8007f42 <HAL_TIM_PWM_Start+0x3e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	bf14      	ite	ne
 8007f3a:	2301      	movne	r3, #1
 8007f3c:	2300      	moveq	r3, #0
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	e02f      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x9e>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d109      	bne.n	8007f5c <HAL_TIM_PWM_Start+0x58>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	e022      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x9e>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b0c      	cmp	r3, #12
 8007f60:	d109      	bne.n	8007f76 <HAL_TIM_PWM_Start+0x72>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	e015      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x9e>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b10      	cmp	r3, #16
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIM_PWM_Start+0x8c>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e008      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x9e>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	bf14      	ite	ne
 8007f9c:	2301      	movne	r3, #1
 8007f9e:	2300      	moveq	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e0a1      	b.n	80080ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <HAL_TIM_PWM_Start+0xb6>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fb8:	e023      	b.n	8008002 <HAL_TIM_PWM_Start+0xfe>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d104      	bne.n	8007fca <HAL_TIM_PWM_Start+0xc6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc8:	e01b      	b.n	8008002 <HAL_TIM_PWM_Start+0xfe>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_PWM_Start+0xd6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fd8:	e013      	b.n	8008002 <HAL_TIM_PWM_Start+0xfe>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b0c      	cmp	r3, #12
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_PWM_Start+0xe6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fe8:	e00b      	b.n	8008002 <HAL_TIM_PWM_Start+0xfe>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b10      	cmp	r3, #16
 8007fee:	d104      	bne.n	8007ffa <HAL_TIM_PWM_Start+0xf6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ff8:	e003      	b.n	8008002 <HAL_TIM_PWM_Start+0xfe>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2201      	movs	r2, #1
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 ffde 	bl	8008fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a38      	ldr	r2, [pc, #224]	@ (80080f8 <HAL_TIM_PWM_Start+0x1f4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_TIM_PWM_Start+0x13e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a37      	ldr	r2, [pc, #220]	@ (80080fc <HAL_TIM_PWM_Start+0x1f8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_TIM_PWM_Start+0x13e>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a35      	ldr	r2, [pc, #212]	@ (8008100 <HAL_TIM_PWM_Start+0x1fc>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_TIM_PWM_Start+0x13e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a34      	ldr	r2, [pc, #208]	@ (8008104 <HAL_TIM_PWM_Start+0x200>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_TIM_PWM_Start+0x13e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a32      	ldr	r2, [pc, #200]	@ (8008108 <HAL_TIM_PWM_Start+0x204>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d101      	bne.n	8008046 <HAL_TIM_PWM_Start+0x142>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <HAL_TIM_PWM_Start+0x144>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800805a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a25      	ldr	r2, [pc, #148]	@ (80080f8 <HAL_TIM_PWM_Start+0x1f4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d022      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806e:	d01d      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a25      	ldr	r2, [pc, #148]	@ (800810c <HAL_TIM_PWM_Start+0x208>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d018      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a24      	ldr	r2, [pc, #144]	@ (8008110 <HAL_TIM_PWM_Start+0x20c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a22      	ldr	r2, [pc, #136]	@ (8008114 <HAL_TIM_PWM_Start+0x210>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00e      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1a      	ldr	r2, [pc, #104]	@ (80080fc <HAL_TIM_PWM_Start+0x1f8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d009      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1e      	ldr	r2, [pc, #120]	@ (8008118 <HAL_TIM_PWM_Start+0x214>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <HAL_TIM_PWM_Start+0x1a8>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a16      	ldr	r2, [pc, #88]	@ (8008100 <HAL_TIM_PWM_Start+0x1fc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d115      	bne.n	80080d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	4b1a      	ldr	r3, [pc, #104]	@ (800811c <HAL_TIM_PWM_Start+0x218>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b06      	cmp	r3, #6
 80080bc:	d015      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1e6>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c4:	d011      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0201 	orr.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d6:	e008      	b.n	80080ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e000      	b.n	80080ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40010400 	.word	0x40010400
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	40014800 	.word	0x40014800
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800
 8008114:	40000c00 	.word	0x40000c00
 8008118:	40001800 	.word	0x40001800
 800811c:	00010007 	.word	0x00010007

08008120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d020      	beq.n	8008184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01b      	beq.n	8008184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0202 	mvn.w	r2, #2
 8008154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 faf6 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fae8 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 faf9 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d020      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01b      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0204 	mvn.w	r2, #4
 80081a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fad0 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fac2 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fad3 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d020      	beq.n	800821c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01b      	beq.n	800821c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0208 	mvn.w	r2, #8
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 faaa 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa9c 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 faad 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	d020      	beq.n	8008268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01b      	beq.n	8008268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0210 	mvn.w	r2, #16
 8008238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2208      	movs	r2, #8
 800823e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa84 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008254:	e005      	b.n	8008262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa76 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fa87 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0201 	mvn.w	r2, #1
 8008284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f9 fb46 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80082b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 ffc5 	bl	8009244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 ffbd 	bl	8009258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00c      	beq.n	8008302 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa41 	bl	8008784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0220 	mvn.w	r2, #32
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 ff85 	bl	8009230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008346:	2b01      	cmp	r3, #1
 8008348:	d101      	bne.n	800834e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800834a:	2302      	movs	r3, #2
 800834c:	e0ff      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b14      	cmp	r3, #20
 800835a:	f200 80f0 	bhi.w	800853e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800835e:	a201      	add	r2, pc, #4	@ (adr r2, 8008364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	080083b9 	.word	0x080083b9
 8008368:	0800853f 	.word	0x0800853f
 800836c:	0800853f 	.word	0x0800853f
 8008370:	0800853f 	.word	0x0800853f
 8008374:	080083f9 	.word	0x080083f9
 8008378:	0800853f 	.word	0x0800853f
 800837c:	0800853f 	.word	0x0800853f
 8008380:	0800853f 	.word	0x0800853f
 8008384:	0800843b 	.word	0x0800843b
 8008388:	0800853f 	.word	0x0800853f
 800838c:	0800853f 	.word	0x0800853f
 8008390:	0800853f 	.word	0x0800853f
 8008394:	0800847b 	.word	0x0800847b
 8008398:	0800853f 	.word	0x0800853f
 800839c:	0800853f 	.word	0x0800853f
 80083a0:	0800853f 	.word	0x0800853f
 80083a4:	080084bd 	.word	0x080084bd
 80083a8:	0800853f 	.word	0x0800853f
 80083ac:	0800853f 	.word	0x0800853f
 80083b0:	0800853f 	.word	0x0800853f
 80083b4:	080084fd 	.word	0x080084fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fa90 	bl	80088e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0208 	orr.w	r2, r2, #8
 80083d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0204 	bic.w	r2, r2, #4
 80083e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6999      	ldr	r1, [r3, #24]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	619a      	str	r2, [r3, #24]
      break;
 80083f6:	e0a5      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fb00 	bl	8008a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6999      	ldr	r1, [r3, #24]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	021a      	lsls	r2, r3, #8
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	619a      	str	r2, [r3, #24]
      break;
 8008438:	e084      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fb69 	bl	8008b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0208 	orr.w	r2, r2, #8
 8008454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0204 	bic.w	r2, r2, #4
 8008464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69d9      	ldr	r1, [r3, #28]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	61da      	str	r2, [r3, #28]
      break;
 8008478:	e064      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fbd1 	bl	8008c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69d9      	ldr	r1, [r3, #28]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	021a      	lsls	r2, r3, #8
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	61da      	str	r2, [r3, #28]
      break;
 80084ba:	e043      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68b9      	ldr	r1, [r7, #8]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fc1a 	bl	8008cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0208 	orr.w	r2, r2, #8
 80084d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0204 	bic.w	r2, r2, #4
 80084e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	691a      	ldr	r2, [r3, #16]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084fa:	e023      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fc5e 	bl	8008dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008516:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008526:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	021a      	lsls	r2, r3, #8
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800853c:	e002      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	75fb      	strb	r3, [r7, #23]
      break;
 8008542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_TIM_ConfigClockSource+0x1c>
 8008570:	2302      	movs	r3, #2
 8008572:	e0dc      	b.n	800872e <HAL_TIM_ConfigClockSource+0x1d6>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	4b6a      	ldr	r3, [pc, #424]	@ (8008738 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008590:	4013      	ands	r3, r2
 8008592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800859a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a64      	ldr	r2, [pc, #400]	@ (800873c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f000 80a9 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085b0:	4a62      	ldr	r2, [pc, #392]	@ (800873c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f200 80ae 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085b8:	4a61      	ldr	r2, [pc, #388]	@ (8008740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f000 80a1 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085c0:	4a5f      	ldr	r2, [pc, #380]	@ (8008740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f200 80a6 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f000 8099 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085d0:	4a5c      	ldr	r2, [pc, #368]	@ (8008744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	f200 809e 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085dc:	f000 8091 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085e4:	f200 8096 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ec:	f000 8089 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085f4:	f200 808e 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085fc:	d03e      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x124>
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008602:	f200 8087 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800860a:	f000 8086 	beq.w	800871a <HAL_TIM_ConfigClockSource+0x1c2>
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008612:	d87f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008614:	2b70      	cmp	r3, #112	@ 0x70
 8008616:	d01a      	beq.n	800864e <HAL_TIM_ConfigClockSource+0xf6>
 8008618:	2b70      	cmp	r3, #112	@ 0x70
 800861a:	d87b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800861c:	2b60      	cmp	r3, #96	@ 0x60
 800861e:	d050      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x16a>
 8008620:	2b60      	cmp	r3, #96	@ 0x60
 8008622:	d877      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008624:	2b50      	cmp	r3, #80	@ 0x50
 8008626:	d03c      	beq.n	80086a2 <HAL_TIM_ConfigClockSource+0x14a>
 8008628:	2b50      	cmp	r3, #80	@ 0x50
 800862a:	d873      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	d058      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x18a>
 8008630:	2b40      	cmp	r3, #64	@ 0x40
 8008632:	d86f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008634:	2b30      	cmp	r3, #48	@ 0x30
 8008636:	d064      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008638:	2b30      	cmp	r3, #48	@ 0x30
 800863a:	d86b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d060      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d867      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05c      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d05a      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 800864c:	e062      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800865e:	f000 fc95 	bl	8008f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	609a      	str	r2, [r3, #8]
      break;
 800867a:	e04f      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800868c:	f000 fc7e 	bl	8008f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800869e:	609a      	str	r2, [r3, #8]
      break;
 80086a0:	e03c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ae:	461a      	mov	r2, r3
 80086b0:	f000 fbee 	bl	8008e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2150      	movs	r1, #80	@ 0x50
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fc48 	bl	8008f50 <TIM_ITRx_SetConfig>
      break;
 80086c0:	e02c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 fc0d 	bl	8008eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2160      	movs	r1, #96	@ 0x60
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fc38 	bl	8008f50 <TIM_ITRx_SetConfig>
      break;
 80086e0:	e01c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 fbce 	bl	8008e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2140      	movs	r1, #64	@ 0x40
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fc28 	bl	8008f50 <TIM_ITRx_SetConfig>
      break;
 8008700:	e00c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f000 fc1f 	bl	8008f50 <TIM_ITRx_SetConfig>
      break;
 8008712:	e003      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
      break;
 8008718:	e000      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800871a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	ffceff88 	.word	0xffceff88
 800873c:	00100040 	.word	0x00100040
 8008740:	00100030 	.word	0x00100030
 8008744:	00100020 	.word	0x00100020

08008748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a46      	ldr	r2, [pc, #280]	@ (80088c4 <TIM_Base_SetConfig+0x12c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b6:	d00f      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a43      	ldr	r2, [pc, #268]	@ (80088c8 <TIM_Base_SetConfig+0x130>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00b      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a42      	ldr	r2, [pc, #264]	@ (80088cc <TIM_Base_SetConfig+0x134>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a41      	ldr	r2, [pc, #260]	@ (80088d0 <TIM_Base_SetConfig+0x138>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a40      	ldr	r2, [pc, #256]	@ (80088d4 <TIM_Base_SetConfig+0x13c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d108      	bne.n	80087ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a35      	ldr	r2, [pc, #212]	@ (80088c4 <TIM_Base_SetConfig+0x12c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01f      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f8:	d01b      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a32      	ldr	r2, [pc, #200]	@ (80088c8 <TIM_Base_SetConfig+0x130>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d017      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a31      	ldr	r2, [pc, #196]	@ (80088cc <TIM_Base_SetConfig+0x134>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d013      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a30      	ldr	r2, [pc, #192]	@ (80088d0 <TIM_Base_SetConfig+0x138>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00f      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2f      	ldr	r2, [pc, #188]	@ (80088d4 <TIM_Base_SetConfig+0x13c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00b      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a2e      	ldr	r2, [pc, #184]	@ (80088d8 <TIM_Base_SetConfig+0x140>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d007      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a2d      	ldr	r2, [pc, #180]	@ (80088dc <TIM_Base_SetConfig+0x144>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d003      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2c      	ldr	r2, [pc, #176]	@ (80088e0 <TIM_Base_SetConfig+0x148>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d108      	bne.n	8008844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a16      	ldr	r2, [pc, #88]	@ (80088c4 <TIM_Base_SetConfig+0x12c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00f      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a18      	ldr	r2, [pc, #96]	@ (80088d4 <TIM_Base_SetConfig+0x13c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00b      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a17      	ldr	r2, [pc, #92]	@ (80088d8 <TIM_Base_SetConfig+0x140>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d007      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <TIM_Base_SetConfig+0x144>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a15      	ldr	r2, [pc, #84]	@ (80088e0 <TIM_Base_SetConfig+0x148>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d103      	bne.n	8008898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d105      	bne.n	80088b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f023 0201 	bic.w	r2, r3, #1
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	611a      	str	r2, [r3, #16]
  }
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40010000 	.word	0x40010000
 80088c8:	40000400 	.word	0x40000400
 80088cc:	40000800 	.word	0x40000800
 80088d0:	40000c00 	.word	0x40000c00
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	f023 0201 	bic.w	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4b37      	ldr	r3, [pc, #220]	@ (80089ec <TIM_OC1_SetConfig+0x108>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f023 0302 	bic.w	r3, r3, #2
 800892c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a2d      	ldr	r2, [pc, #180]	@ (80089f0 <TIM_OC1_SetConfig+0x10c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00f      	beq.n	8008960 <TIM_OC1_SetConfig+0x7c>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a2c      	ldr	r2, [pc, #176]	@ (80089f4 <TIM_OC1_SetConfig+0x110>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00b      	beq.n	8008960 <TIM_OC1_SetConfig+0x7c>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a2b      	ldr	r2, [pc, #172]	@ (80089f8 <TIM_OC1_SetConfig+0x114>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <TIM_OC1_SetConfig+0x7c>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a2a      	ldr	r2, [pc, #168]	@ (80089fc <TIM_OC1_SetConfig+0x118>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_OC1_SetConfig+0x7c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a29      	ldr	r2, [pc, #164]	@ (8008a00 <TIM_OC1_SetConfig+0x11c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10c      	bne.n	800897a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0308 	bic.w	r3, r3, #8
 8008966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f023 0304 	bic.w	r3, r3, #4
 8008978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a1c      	ldr	r2, [pc, #112]	@ (80089f0 <TIM_OC1_SetConfig+0x10c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00f      	beq.n	80089a2 <TIM_OC1_SetConfig+0xbe>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <TIM_OC1_SetConfig+0x110>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00b      	beq.n	80089a2 <TIM_OC1_SetConfig+0xbe>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a1a      	ldr	r2, [pc, #104]	@ (80089f8 <TIM_OC1_SetConfig+0x114>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d007      	beq.n	80089a2 <TIM_OC1_SetConfig+0xbe>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a19      	ldr	r2, [pc, #100]	@ (80089fc <TIM_OC1_SetConfig+0x118>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d003      	beq.n	80089a2 <TIM_OC1_SetConfig+0xbe>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <TIM_OC1_SetConfig+0x11c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d111      	bne.n	80089c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	621a      	str	r2, [r3, #32]
}
 80089e0:	bf00      	nop
 80089e2:	371c      	adds	r7, #28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	fffeff8f 	.word	0xfffeff8f
 80089f0:	40010000 	.word	0x40010000
 80089f4:	40010400 	.word	0x40010400
 80089f8:	40014000 	.word	0x40014000
 80089fc:	40014400 	.word	0x40014400
 8008a00:	40014800 	.word	0x40014800

08008a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	f023 0210 	bic.w	r2, r3, #16
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4b34      	ldr	r3, [pc, #208]	@ (8008b00 <TIM_OC2_SetConfig+0xfc>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 0320 	bic.w	r3, r3, #32
 8008a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a29      	ldr	r2, [pc, #164]	@ (8008b04 <TIM_OC2_SetConfig+0x100>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d003      	beq.n	8008a6c <TIM_OC2_SetConfig+0x68>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a28      	ldr	r2, [pc, #160]	@ (8008b08 <TIM_OC2_SetConfig+0x104>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d10d      	bne.n	8008a88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008b04 <TIM_OC2_SetConfig+0x100>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00f      	beq.n	8008ab0 <TIM_OC2_SetConfig+0xac>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a1d      	ldr	r2, [pc, #116]	@ (8008b08 <TIM_OC2_SetConfig+0x104>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00b      	beq.n	8008ab0 <TIM_OC2_SetConfig+0xac>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b0c <TIM_OC2_SetConfig+0x108>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d007      	beq.n	8008ab0 <TIM_OC2_SetConfig+0xac>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8008b10 <TIM_OC2_SetConfig+0x10c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_OC2_SetConfig+0xac>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8008b14 <TIM_OC2_SetConfig+0x110>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d113      	bne.n	8008ad8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	feff8fff 	.word	0xfeff8fff
 8008b04:	40010000 	.word	0x40010000
 8008b08:	40010400 	.word	0x40010400
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40014400 	.word	0x40014400
 8008b14:	40014800 	.word	0x40014800

08008b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4b33      	ldr	r3, [pc, #204]	@ (8008c10 <TIM_OC3_SetConfig+0xf8>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a28      	ldr	r2, [pc, #160]	@ (8008c14 <TIM_OC3_SetConfig+0xfc>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d003      	beq.n	8008b7e <TIM_OC3_SetConfig+0x66>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a27      	ldr	r2, [pc, #156]	@ (8008c18 <TIM_OC3_SetConfig+0x100>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d10d      	bne.n	8008b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <TIM_OC3_SetConfig+0xfc>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00f      	beq.n	8008bc2 <TIM_OC3_SetConfig+0xaa>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c18 <TIM_OC3_SetConfig+0x100>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00b      	beq.n	8008bc2 <TIM_OC3_SetConfig+0xaa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a1b      	ldr	r2, [pc, #108]	@ (8008c1c <TIM_OC3_SetConfig+0x104>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d007      	beq.n	8008bc2 <TIM_OC3_SetConfig+0xaa>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c20 <TIM_OC3_SetConfig+0x108>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <TIM_OC3_SetConfig+0xaa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a19      	ldr	r2, [pc, #100]	@ (8008c24 <TIM_OC3_SetConfig+0x10c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d113      	bne.n	8008bea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	621a      	str	r2, [r3, #32]
}
 8008c04:	bf00      	nop
 8008c06:	371c      	adds	r7, #28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	fffeff8f 	.word	0xfffeff8f
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40010400 	.word	0x40010400
 8008c1c:	40014000 	.word	0x40014000
 8008c20:	40014400 	.word	0x40014400
 8008c24:	40014800 	.word	0x40014800

08008c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4b24      	ldr	r3, [pc, #144]	@ (8008ce4 <TIM_OC4_SetConfig+0xbc>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	031b      	lsls	r3, r3, #12
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a19      	ldr	r2, [pc, #100]	@ (8008ce8 <TIM_OC4_SetConfig+0xc0>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00f      	beq.n	8008ca8 <TIM_OC4_SetConfig+0x80>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a18      	ldr	r2, [pc, #96]	@ (8008cec <TIM_OC4_SetConfig+0xc4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d00b      	beq.n	8008ca8 <TIM_OC4_SetConfig+0x80>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a17      	ldr	r2, [pc, #92]	@ (8008cf0 <TIM_OC4_SetConfig+0xc8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d007      	beq.n	8008ca8 <TIM_OC4_SetConfig+0x80>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a16      	ldr	r2, [pc, #88]	@ (8008cf4 <TIM_OC4_SetConfig+0xcc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d003      	beq.n	8008ca8 <TIM_OC4_SetConfig+0x80>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a15      	ldr	r2, [pc, #84]	@ (8008cf8 <TIM_OC4_SetConfig+0xd0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d109      	bne.n	8008cbc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	019b      	lsls	r3, r3, #6
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	621a      	str	r2, [r3, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	feff8fff 	.word	0xfeff8fff
 8008ce8:	40010000 	.word	0x40010000
 8008cec:	40010400 	.word	0x40010400
 8008cf0:	40014000 	.word	0x40014000
 8008cf4:	40014400 	.word	0x40014400
 8008cf8:	40014800 	.word	0x40014800

08008cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4b21      	ldr	r3, [pc, #132]	@ (8008dac <TIM_OC5_SetConfig+0xb0>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a18      	ldr	r2, [pc, #96]	@ (8008db0 <TIM_OC5_SetConfig+0xb4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00f      	beq.n	8008d72 <TIM_OC5_SetConfig+0x76>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a17      	ldr	r2, [pc, #92]	@ (8008db4 <TIM_OC5_SetConfig+0xb8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <TIM_OC5_SetConfig+0x76>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a16      	ldr	r2, [pc, #88]	@ (8008db8 <TIM_OC5_SetConfig+0xbc>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d007      	beq.n	8008d72 <TIM_OC5_SetConfig+0x76>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a15      	ldr	r2, [pc, #84]	@ (8008dbc <TIM_OC5_SetConfig+0xc0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_OC5_SetConfig+0x76>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a14      	ldr	r2, [pc, #80]	@ (8008dc0 <TIM_OC5_SetConfig+0xc4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d109      	bne.n	8008d86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	621a      	str	r2, [r3, #32]
}
 8008da0:	bf00      	nop
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	fffeff8f 	.word	0xfffeff8f
 8008db0:	40010000 	.word	0x40010000
 8008db4:	40010400 	.word	0x40010400
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	40014400 	.word	0x40014400
 8008dc0:	40014800 	.word	0x40014800

08008dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4b22      	ldr	r3, [pc, #136]	@ (8008e78 <TIM_OC6_SetConfig+0xb4>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	051b      	lsls	r3, r3, #20
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a19      	ldr	r2, [pc, #100]	@ (8008e7c <TIM_OC6_SetConfig+0xb8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00f      	beq.n	8008e3c <TIM_OC6_SetConfig+0x78>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <TIM_OC6_SetConfig+0xbc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00b      	beq.n	8008e3c <TIM_OC6_SetConfig+0x78>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <TIM_OC6_SetConfig+0xc0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d007      	beq.n	8008e3c <TIM_OC6_SetConfig+0x78>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a16      	ldr	r2, [pc, #88]	@ (8008e88 <TIM_OC6_SetConfig+0xc4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d003      	beq.n	8008e3c <TIM_OC6_SetConfig+0x78>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a15      	ldr	r2, [pc, #84]	@ (8008e8c <TIM_OC6_SetConfig+0xc8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d109      	bne.n	8008e50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	029b      	lsls	r3, r3, #10
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	feff8fff 	.word	0xfeff8fff
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40010400 	.word	0x40010400
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40014400 	.word	0x40014400
 8008e8c:	40014800 	.word	0x40014800

08008e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f023 0201 	bic.w	r2, r3, #1
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f023 030a 	bic.w	r3, r3, #10
 8008ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	621a      	str	r2, [r3, #32]
}
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b087      	sub	sp, #28
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f023 0210 	bic.w	r2, r3, #16
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	031b      	lsls	r3, r3, #12
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	621a      	str	r2, [r3, #32]
}
 8008f42:	bf00      	nop
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <TIM_ITRx_SetConfig+0x38>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f043 0307 	orr.w	r3, r3, #7
 8008f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	609a      	str	r2, [r3, #8]
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	ffcfff8f 	.word	0xffcfff8f

08008f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	021a      	lsls	r2, r3, #8
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	609a      	str	r2, [r3, #8]
}
 8008fc0:	bf00      	nop
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 031f 	and.w	r3, r3, #31
 8008fde:	2201      	movs	r2, #1
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a1a      	ldr	r2, [r3, #32]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	43db      	mvns	r3, r3
 8008fee:	401a      	ands	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1a      	ldr	r2, [r3, #32]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 031f 	and.w	r3, r3, #31
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	fa01 f303 	lsl.w	r3, r1, r3
 8009004:	431a      	orrs	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	621a      	str	r2, [r3, #32]
}
 800900a:	bf00      	nop
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800902c:	2302      	movs	r3, #2
 800902e:	e06d      	b.n	800910c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a30      	ldr	r2, [pc, #192]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d004      	beq.n	8009064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a2f      	ldr	r2, [pc, #188]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d108      	bne.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800906a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a20      	ldr	r2, [pc, #128]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d022      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a2:	d01d      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d018      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d013      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00e      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a15      	ldr	r2, [pc, #84]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d009      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a16      	ldr	r2, [pc, #88]	@ (800912c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d004      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a15      	ldr	r2, [pc, #84]	@ (8009130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d10c      	bne.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	40010000 	.word	0x40010000
 800911c:	40010400 	.word	0x40010400
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40000c00 	.word	0x40000c00
 800912c:	40001800 	.word	0x40001800
 8009130:	40014000 	.word	0x40014000

08009134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800914c:	2302      	movs	r3, #2
 800914e:	e065      	b.n	800921c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4313      	orrs	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a16      	ldr	r2, [pc, #88]	@ (8009228 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d004      	beq.n	80091de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a14      	ldr	r2, [pc, #80]	@ (800922c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d115      	bne.n	800920a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	40010000 	.word	0x40010000
 800922c:	40010400 	.word	0x40010400

08009230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e042      	b.n	8009304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7f9 f8f1 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2224      	movs	r2, #36	@ 0x24
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f022 0201 	bic.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 f9f8 	bl	800a6ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fc8d 	bl	8009bdc <UART_SetConfig>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e01b      	b.n	8009304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0201 	orr.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fa77 	bl	800a7f0 <UART_CheckIdleState>
 8009302:	4603      	mov	r3, r0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	@ 0x28
 8009310:	af02      	add	r7, sp, #8
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009322:	2b20      	cmp	r3, #32
 8009324:	d17b      	bne.n	800941e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <HAL_UART_Transmit+0x26>
 800932c:	88fb      	ldrh	r3, [r7, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e074      	b.n	8009420 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2221      	movs	r2, #33	@ 0x21
 8009342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009346:	f7f9 fb21 	bl	800298c <HAL_GetTick>
 800934a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	88fa      	ldrh	r2, [r7, #6]
 8009350:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	88fa      	ldrh	r2, [r7, #6]
 8009358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009364:	d108      	bne.n	8009378 <HAL_UART_Transmit+0x6c>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d104      	bne.n	8009378 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	61bb      	str	r3, [r7, #24]
 8009376:	e003      	b.n	8009380 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009380:	e030      	b.n	80093e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2200      	movs	r2, #0
 800938a:	2180      	movs	r1, #128	@ 0x80
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f001 fad9 	bl	800a944 <UART_WaitOnFlagUntilTimeout>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e03d      	b.n	8009420 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	3302      	adds	r3, #2
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	e007      	b.n	80093d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	3301      	adds	r3, #1
 80093d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093d8:	b29b      	uxth	r3, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	b29a      	uxth	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1c8      	bne.n	8009382 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2200      	movs	r2, #0
 80093f8:	2140      	movs	r1, #64	@ 0x40
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f001 faa2 	bl	800a944 <UART_WaitOnFlagUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e006      	b.n	8009420 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2220      	movs	r2, #32
 8009416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	e000      	b.n	8009420 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800941e:	2302      	movs	r3, #2
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b0ba      	sub	sp, #232	@ 0xe8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800944e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009452:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009456:	4013      	ands	r3, r2
 8009458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800945c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009460:	2b00      	cmp	r3, #0
 8009462:	d11b      	bne.n	800949c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d015      	beq.n	800949c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800947c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d009      	beq.n	800949c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 8377 	beq.w	8009b80 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
      }
      return;
 800949a:	e371      	b.n	8009b80 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800949c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8123 	beq.w	80096ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80094aa:	4b8d      	ldr	r3, [pc, #564]	@ (80096e0 <HAL_UART_IRQHandler+0x2b8>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80094b6:	4b8b      	ldr	r3, [pc, #556]	@ (80096e4 <HAL_UART_IRQHandler+0x2bc>)
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8116 	beq.w	80096ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d011      	beq.n	80094f0 <HAL_UART_IRQHandler+0xc8>
 80094cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2201      	movs	r2, #1
 80094de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e6:	f043 0201 	orr.w	r2, r3, #1
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d011      	beq.n	8009520 <HAL_UART_IRQHandler+0xf8>
 80094fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2202      	movs	r2, #2
 800950e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009516:	f043 0204 	orr.w	r2, r3, #4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d011      	beq.n	8009550 <HAL_UART_IRQHandler+0x128>
 800952c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2204      	movs	r2, #4
 800953e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009546:	f043 0202 	orr.w	r2, r3, #2
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009554:	f003 0308 	and.w	r3, r3, #8
 8009558:	2b00      	cmp	r3, #0
 800955a:	d017      	beq.n	800958c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800955c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009568:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800956c:	4b5c      	ldr	r3, [pc, #368]	@ (80096e0 <HAL_UART_IRQHandler+0x2b8>)
 800956e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2208      	movs	r2, #8
 800957a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009582:	f043 0208 	orr.w	r2, r3, #8
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800958c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009594:	2b00      	cmp	r3, #0
 8009596:	d012      	beq.n	80095be <HAL_UART_IRQHandler+0x196>
 8009598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800959c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00c      	beq.n	80095be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b4:	f043 0220 	orr.w	r2, r3, #32
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 82dd 	beq.w	8009b84 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d013      	beq.n	80095fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d105      	bne.n	80095ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d007      	beq.n	80095fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009612:	2b40      	cmp	r3, #64	@ 0x40
 8009614:	d005      	beq.n	8009622 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800961a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800961e:	2b00      	cmp	r3, #0
 8009620:	d054      	beq.n	80096cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 f9fc 	bl	800aa20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009632:	2b40      	cmp	r3, #64	@ 0x40
 8009634:	d146      	bne.n	80096c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800964c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800966e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800967a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1d9      	bne.n	8009636 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009688:	2b00      	cmp	r3, #0
 800968a:	d017      	beq.n	80096bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009692:	4a15      	ldr	r2, [pc, #84]	@ (80096e8 <HAL_UART_IRQHandler+0x2c0>)
 8009694:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800969c:	4618      	mov	r0, r3
 800969e:	f7f9 fe33 	bl	8003308 <HAL_DMA_Abort_IT>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d019      	beq.n	80096dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80096b6:	4610      	mov	r0, r2
 80096b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ba:	e00f      	b.n	80096dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fa77 	bl	8009bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c2:	e00b      	b.n	80096dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa73 	bl	8009bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ca:	e007      	b.n	80096dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fa6f 	bl	8009bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80096da:	e253      	b.n	8009b84 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096dc:	bf00      	nop
    return;
 80096de:	e251      	b.n	8009b84 <HAL_UART_IRQHandler+0x75c>
 80096e0:	10000001 	.word	0x10000001
 80096e4:	04000120 	.word	0x04000120
 80096e8:	0800aaed 	.word	0x0800aaed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	f040 81e7 	bne.w	8009ac4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fa:	f003 0310 	and.w	r3, r3, #16
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 81e0 	beq.w	8009ac4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 81d9 	beq.w	8009ac4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2210      	movs	r2, #16
 8009718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009724:	2b40      	cmp	r3, #64	@ 0x40
 8009726:	f040 8151 	bne.w	80099cc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a96      	ldr	r2, [pc, #600]	@ (800998c <HAL_UART_IRQHandler+0x564>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d068      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a93      	ldr	r2, [pc, #588]	@ (8009990 <HAL_UART_IRQHandler+0x568>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d061      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a91      	ldr	r2, [pc, #580]	@ (8009994 <HAL_UART_IRQHandler+0x56c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d05a      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a8e      	ldr	r2, [pc, #568]	@ (8009998 <HAL_UART_IRQHandler+0x570>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d053      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a8c      	ldr	r2, [pc, #560]	@ (800999c <HAL_UART_IRQHandler+0x574>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d04c      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a89      	ldr	r2, [pc, #548]	@ (80099a0 <HAL_UART_IRQHandler+0x578>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d045      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a87      	ldr	r2, [pc, #540]	@ (80099a4 <HAL_UART_IRQHandler+0x57c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d03e      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a84      	ldr	r2, [pc, #528]	@ (80099a8 <HAL_UART_IRQHandler+0x580>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d037      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a82      	ldr	r2, [pc, #520]	@ (80099ac <HAL_UART_IRQHandler+0x584>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d030      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a7f      	ldr	r2, [pc, #508]	@ (80099b0 <HAL_UART_IRQHandler+0x588>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d029      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a7d      	ldr	r2, [pc, #500]	@ (80099b4 <HAL_UART_IRQHandler+0x58c>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d022      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a7a      	ldr	r2, [pc, #488]	@ (80099b8 <HAL_UART_IRQHandler+0x590>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d01b      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a78      	ldr	r2, [pc, #480]	@ (80099bc <HAL_UART_IRQHandler+0x594>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d014      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a75      	ldr	r2, [pc, #468]	@ (80099c0 <HAL_UART_IRQHandler+0x598>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00d      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a73      	ldr	r2, [pc, #460]	@ (80099c4 <HAL_UART_IRQHandler+0x59c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d006      	beq.n	800980a <HAL_UART_IRQHandler+0x3e2>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a70      	ldr	r2, [pc, #448]	@ (80099c8 <HAL_UART_IRQHandler+0x5a0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d106      	bne.n	8009818 <HAL_UART_IRQHandler+0x3f0>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	b29b      	uxth	r3, r3
 8009816:	e005      	b.n	8009824 <HAL_UART_IRQHandler+0x3fc>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 81ab 	beq.w	8009b88 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800983c:	429a      	cmp	r2, r3
 800983e:	f080 81a3 	bcs.w	8009b88 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009858:	f000 8087 	beq.w	800996a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800988a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009892:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800989e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1da      	bne.n	800985c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e1      	bne.n	80098a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009906:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009908:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800990c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e3      	bne.n	80098e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009938:	f023 0310 	bic.w	r3, r3, #16
 800993c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800994a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800994c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e4      	bne.n	8009928 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009964:	4618      	mov	r0, r3
 8009966:	f7f9 f9b1 	bl	8002ccc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800997c:	b29b      	uxth	r3, r3
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	b29b      	uxth	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f91d 	bl	8009bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800998a:	e0fd      	b.n	8009b88 <HAL_UART_IRQHandler+0x760>
 800998c:	40020010 	.word	0x40020010
 8009990:	40020028 	.word	0x40020028
 8009994:	40020040 	.word	0x40020040
 8009998:	40020058 	.word	0x40020058
 800999c:	40020070 	.word	0x40020070
 80099a0:	40020088 	.word	0x40020088
 80099a4:	400200a0 	.word	0x400200a0
 80099a8:	400200b8 	.word	0x400200b8
 80099ac:	40020410 	.word	0x40020410
 80099b0:	40020428 	.word	0x40020428
 80099b4:	40020440 	.word	0x40020440
 80099b8:	40020458 	.word	0x40020458
 80099bc:	40020470 	.word	0x40020470
 80099c0:	40020488 	.word	0x40020488
 80099c4:	400204a0 	.word	0x400204a0
 80099c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80cf 	beq.w	8009b8c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80099ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80ca 	beq.w	8009b8c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
 8009a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e4      	bne.n	80099f8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3308      	adds	r3, #8
 8009a34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	4b55      	ldr	r3, [pc, #340]	@ (8009b98 <HAL_UART_IRQHandler+0x770>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e3      	bne.n	8009a2e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0310 	bic.w	r3, r3, #16
 8009a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a9c:	61fb      	str	r3, [r7, #28]
 8009a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	69b9      	ldr	r1, [r7, #24]
 8009aa2:	69fa      	ldr	r2, [r7, #28]
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e4      	bne.n	8009a7a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f881 	bl	8009bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ac2:	e063      	b.n	8009b8c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00e      	beq.n	8009aee <HAL_UART_IRQHandler+0x6c6>
 8009ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d008      	beq.n	8009aee <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 f841 	bl	800ab6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009aec:	e051      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d014      	beq.n	8009b24 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d105      	bne.n	8009b12 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d008      	beq.n	8009b24 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d03a      	beq.n	8009b90 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
    }
    return;
 8009b22:	e035      	b.n	8009b90 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d009      	beq.n	8009b44 <HAL_UART_IRQHandler+0x71c>
 8009b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 ffeb 	bl	800ab18 <UART_EndTransmit_IT>
    return;
 8009b42:	e026      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <HAL_UART_IRQHandler+0x73c>
 8009b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f81a 	bl	800ab96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b62:	e016      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d010      	beq.n	8009b92 <HAL_UART_IRQHandler+0x76a>
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da0c      	bge.n	8009b92 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 f802 	bl	800ab82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b7e:	e008      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
      return;
 8009b80:	bf00      	nop
 8009b82:	e006      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
    return;
 8009b84:	bf00      	nop
 8009b86:	e004      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
      return;
 8009b88:	bf00      	nop
 8009b8a:	e002      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
      return;
 8009b8c:	bf00      	nop
 8009b8e:	e000      	b.n	8009b92 <HAL_UART_IRQHandler+0x76a>
    return;
 8009b90:	bf00      	nop
  }
}
 8009b92:	37e8      	adds	r7, #232	@ 0xe8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	effffffe 	.word	0xeffffffe

08009b9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009be0:	b092      	sub	sp, #72	@ 0x48
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4bbe      	ldr	r3, [pc, #760]	@ (8009f04 <UART_SetConfig+0x328>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	6812      	ldr	r2, [r2, #0]
 8009c12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c14:	430b      	orrs	r3, r1
 8009c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4ab3      	ldr	r2, [pc, #716]	@ (8009f08 <UART_SetConfig+0x32c>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d004      	beq.n	8009c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c44:	4313      	orrs	r3, r2
 8009c46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	4baf      	ldr	r3, [pc, #700]	@ (8009f0c <UART_SetConfig+0x330>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	6812      	ldr	r2, [r2, #0]
 8009c56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c62:	f023 010f 	bic.w	r1, r3, #15
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4aa6      	ldr	r2, [pc, #664]	@ (8009f10 <UART_SetConfig+0x334>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d177      	bne.n	8009d6c <UART_SetConfig+0x190>
 8009c7c:	4ba5      	ldr	r3, [pc, #660]	@ (8009f14 <UART_SetConfig+0x338>)
 8009c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c84:	2b28      	cmp	r3, #40	@ 0x28
 8009c86:	d86d      	bhi.n	8009d64 <UART_SetConfig+0x188>
 8009c88:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <UART_SetConfig+0xb4>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009d35 	.word	0x08009d35
 8009c94:	08009d65 	.word	0x08009d65
 8009c98:	08009d65 	.word	0x08009d65
 8009c9c:	08009d65 	.word	0x08009d65
 8009ca0:	08009d65 	.word	0x08009d65
 8009ca4:	08009d65 	.word	0x08009d65
 8009ca8:	08009d65 	.word	0x08009d65
 8009cac:	08009d65 	.word	0x08009d65
 8009cb0:	08009d3d 	.word	0x08009d3d
 8009cb4:	08009d65 	.word	0x08009d65
 8009cb8:	08009d65 	.word	0x08009d65
 8009cbc:	08009d65 	.word	0x08009d65
 8009cc0:	08009d65 	.word	0x08009d65
 8009cc4:	08009d65 	.word	0x08009d65
 8009cc8:	08009d65 	.word	0x08009d65
 8009ccc:	08009d65 	.word	0x08009d65
 8009cd0:	08009d45 	.word	0x08009d45
 8009cd4:	08009d65 	.word	0x08009d65
 8009cd8:	08009d65 	.word	0x08009d65
 8009cdc:	08009d65 	.word	0x08009d65
 8009ce0:	08009d65 	.word	0x08009d65
 8009ce4:	08009d65 	.word	0x08009d65
 8009ce8:	08009d65 	.word	0x08009d65
 8009cec:	08009d65 	.word	0x08009d65
 8009cf0:	08009d4d 	.word	0x08009d4d
 8009cf4:	08009d65 	.word	0x08009d65
 8009cf8:	08009d65 	.word	0x08009d65
 8009cfc:	08009d65 	.word	0x08009d65
 8009d00:	08009d65 	.word	0x08009d65
 8009d04:	08009d65 	.word	0x08009d65
 8009d08:	08009d65 	.word	0x08009d65
 8009d0c:	08009d65 	.word	0x08009d65
 8009d10:	08009d55 	.word	0x08009d55
 8009d14:	08009d65 	.word	0x08009d65
 8009d18:	08009d65 	.word	0x08009d65
 8009d1c:	08009d65 	.word	0x08009d65
 8009d20:	08009d65 	.word	0x08009d65
 8009d24:	08009d65 	.word	0x08009d65
 8009d28:	08009d65 	.word	0x08009d65
 8009d2c:	08009d65 	.word	0x08009d65
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e222      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e21e      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e21a      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e216      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e212      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d5c:	2340      	movs	r3, #64	@ 0x40
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e20e      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d64:	2380      	movs	r3, #128	@ 0x80
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e20a      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a69      	ldr	r2, [pc, #420]	@ (8009f18 <UART_SetConfig+0x33c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d130      	bne.n	8009dd8 <UART_SetConfig+0x1fc>
 8009d76:	4b67      	ldr	r3, [pc, #412]	@ (8009f14 <UART_SetConfig+0x338>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d826      	bhi.n	8009dd0 <UART_SetConfig+0x1f4>
 8009d82:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <UART_SetConfig+0x1ac>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da9 	.word	0x08009da9
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e1ec      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e1e8      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e1e4      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e1e0      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e1dc      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009dc8:	2340      	movs	r3, #64	@ 0x40
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e1d8      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009dd0:	2380      	movs	r3, #128	@ 0x80
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e1d4      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8009f1c <UART_SetConfig+0x340>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d130      	bne.n	8009e44 <UART_SetConfig+0x268>
 8009de2:	4b4c      	ldr	r3, [pc, #304]	@ (8009f14 <UART_SetConfig+0x338>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	d826      	bhi.n	8009e3c <UART_SetConfig+0x260>
 8009dee:	a201      	add	r2, pc, #4	@ (adr r2, 8009df4 <UART_SetConfig+0x218>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e1d 	.word	0x08009e1d
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e2d 	.word	0x08009e2d
 8009e08:	08009e35 	.word	0x08009e35
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e1b6      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e1b2      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e1ae      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2a:	e1aa      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e32:	e1a6      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e34:	2340      	movs	r3, #64	@ 0x40
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e1a2      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e3c:	2380      	movs	r3, #128	@ 0x80
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e19e      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a35      	ldr	r2, [pc, #212]	@ (8009f20 <UART_SetConfig+0x344>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d130      	bne.n	8009eb0 <UART_SetConfig+0x2d4>
 8009e4e:	4b31      	ldr	r3, [pc, #196]	@ (8009f14 <UART_SetConfig+0x338>)
 8009e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d826      	bhi.n	8009ea8 <UART_SetConfig+0x2cc>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <UART_SetConfig+0x284>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e79 	.word	0x08009e79
 8009e64:	08009e81 	.word	0x08009e81
 8009e68:	08009e89 	.word	0x08009e89
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e180      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e80:	2304      	movs	r3, #4
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e17c      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e178      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e90:	2310      	movs	r3, #16
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e174      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	e170      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009ea0:	2340      	movs	r3, #64	@ 0x40
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e16c      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009ea8:	2380      	movs	r3, #128	@ 0x80
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e168      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8009f24 <UART_SetConfig+0x348>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d142      	bne.n	8009f40 <UART_SetConfig+0x364>
 8009eba:	4b16      	ldr	r3, [pc, #88]	@ (8009f14 <UART_SetConfig+0x338>)
 8009ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	2b05      	cmp	r3, #5
 8009ec4:	d838      	bhi.n	8009f38 <UART_SetConfig+0x35c>
 8009ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ecc <UART_SetConfig+0x2f0>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009ee5 	.word	0x08009ee5
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	08009ef5 	.word	0x08009ef5
 8009ed8:	08009efd 	.word	0x08009efd
 8009edc:	08009f29 	.word	0x08009f29
 8009ee0:	08009f31 	.word	0x08009f31
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eea:	e14a      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009eec:	2304      	movs	r3, #4
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef2:	e146      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efa:	e142      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009efc:	2310      	movs	r3, #16
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f02:	e13e      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009f04:	cfff69f3 	.word	0xcfff69f3
 8009f08:	58000c00 	.word	0x58000c00
 8009f0c:	11fff4ff 	.word	0x11fff4ff
 8009f10:	40011000 	.word	0x40011000
 8009f14:	58024400 	.word	0x58024400
 8009f18:	40004400 	.word	0x40004400
 8009f1c:	40004800 	.word	0x40004800
 8009f20:	40004c00 	.word	0x40004c00
 8009f24:	40005000 	.word	0x40005000
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e128      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009f30:	2340      	movs	r3, #64	@ 0x40
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e124      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009f38:	2380      	movs	r3, #128	@ 0x80
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e120      	b.n	800a182 <UART_SetConfig+0x5a6>
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4acb      	ldr	r2, [pc, #812]	@ (800a274 <UART_SetConfig+0x698>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d176      	bne.n	800a038 <UART_SetConfig+0x45c>
 8009f4a:	4bcb      	ldr	r3, [pc, #812]	@ (800a278 <UART_SetConfig+0x69c>)
 8009f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f52:	2b28      	cmp	r3, #40	@ 0x28
 8009f54:	d86c      	bhi.n	800a030 <UART_SetConfig+0x454>
 8009f56:	a201      	add	r2, pc, #4	@ (adr r2, 8009f5c <UART_SetConfig+0x380>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	0800a001 	.word	0x0800a001
 8009f60:	0800a031 	.word	0x0800a031
 8009f64:	0800a031 	.word	0x0800a031
 8009f68:	0800a031 	.word	0x0800a031
 8009f6c:	0800a031 	.word	0x0800a031
 8009f70:	0800a031 	.word	0x0800a031
 8009f74:	0800a031 	.word	0x0800a031
 8009f78:	0800a031 	.word	0x0800a031
 8009f7c:	0800a009 	.word	0x0800a009
 8009f80:	0800a031 	.word	0x0800a031
 8009f84:	0800a031 	.word	0x0800a031
 8009f88:	0800a031 	.word	0x0800a031
 8009f8c:	0800a031 	.word	0x0800a031
 8009f90:	0800a031 	.word	0x0800a031
 8009f94:	0800a031 	.word	0x0800a031
 8009f98:	0800a031 	.word	0x0800a031
 8009f9c:	0800a011 	.word	0x0800a011
 8009fa0:	0800a031 	.word	0x0800a031
 8009fa4:	0800a031 	.word	0x0800a031
 8009fa8:	0800a031 	.word	0x0800a031
 8009fac:	0800a031 	.word	0x0800a031
 8009fb0:	0800a031 	.word	0x0800a031
 8009fb4:	0800a031 	.word	0x0800a031
 8009fb8:	0800a031 	.word	0x0800a031
 8009fbc:	0800a019 	.word	0x0800a019
 8009fc0:	0800a031 	.word	0x0800a031
 8009fc4:	0800a031 	.word	0x0800a031
 8009fc8:	0800a031 	.word	0x0800a031
 8009fcc:	0800a031 	.word	0x0800a031
 8009fd0:	0800a031 	.word	0x0800a031
 8009fd4:	0800a031 	.word	0x0800a031
 8009fd8:	0800a031 	.word	0x0800a031
 8009fdc:	0800a021 	.word	0x0800a021
 8009fe0:	0800a031 	.word	0x0800a031
 8009fe4:	0800a031 	.word	0x0800a031
 8009fe8:	0800a031 	.word	0x0800a031
 8009fec:	0800a031 	.word	0x0800a031
 8009ff0:	0800a031 	.word	0x0800a031
 8009ff4:	0800a031 	.word	0x0800a031
 8009ff8:	0800a031 	.word	0x0800a031
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	2301      	movs	r3, #1
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e0bc      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e0b8      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e0b4      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e0b0      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a020:	2320      	movs	r3, #32
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a026:	e0ac      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a028:	2340      	movs	r3, #64	@ 0x40
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02e:	e0a8      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a030:	2380      	movs	r3, #128	@ 0x80
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a036:	e0a4      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a8f      	ldr	r2, [pc, #572]	@ (800a27c <UART_SetConfig+0x6a0>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d130      	bne.n	800a0a4 <UART_SetConfig+0x4c8>
 800a042:	4b8d      	ldr	r3, [pc, #564]	@ (800a278 <UART_SetConfig+0x69c>)
 800a044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b05      	cmp	r3, #5
 800a04c:	d826      	bhi.n	800a09c <UART_SetConfig+0x4c0>
 800a04e:	a201      	add	r2, pc, #4	@ (adr r2, 800a054 <UART_SetConfig+0x478>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a06d 	.word	0x0800a06d
 800a058:	0800a075 	.word	0x0800a075
 800a05c:	0800a07d 	.word	0x0800a07d
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a08d 	.word	0x0800a08d
 800a068:	0800a095 	.word	0x0800a095
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e086      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07a:	e082      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a082:	e07e      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08a:	e07a      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a08c:	2320      	movs	r3, #32
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a092:	e076      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a094:	2340      	movs	r3, #64	@ 0x40
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09a:	e072      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a09c:	2380      	movs	r3, #128	@ 0x80
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a2:	e06e      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a75      	ldr	r2, [pc, #468]	@ (800a280 <UART_SetConfig+0x6a4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d130      	bne.n	800a110 <UART_SetConfig+0x534>
 800a0ae:	4b72      	ldr	r3, [pc, #456]	@ (800a278 <UART_SetConfig+0x69c>)
 800a0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	2b05      	cmp	r3, #5
 800a0b8:	d826      	bhi.n	800a108 <UART_SetConfig+0x52c>
 800a0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <UART_SetConfig+0x4e4>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0d9 	.word	0x0800a0d9
 800a0c4:	0800a0e1 	.word	0x0800a0e1
 800a0c8:	0800a0e9 	.word	0x0800a0e9
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a0f9 	.word	0x0800a0f9
 800a0d4:	0800a101 	.word	0x0800a101
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0de:	e050      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	e04c      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ee:	e048      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f6:	e044      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fe:	e040      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a100:	2340      	movs	r3, #64	@ 0x40
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e03c      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a108:	2380      	movs	r3, #128	@ 0x80
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e038      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a5b      	ldr	r2, [pc, #364]	@ (800a284 <UART_SetConfig+0x6a8>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d130      	bne.n	800a17c <UART_SetConfig+0x5a0>
 800a11a:	4b57      	ldr	r3, [pc, #348]	@ (800a278 <UART_SetConfig+0x69c>)
 800a11c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a11e:	f003 0307 	and.w	r3, r3, #7
 800a122:	2b05      	cmp	r3, #5
 800a124:	d826      	bhi.n	800a174 <UART_SetConfig+0x598>
 800a126:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <UART_SetConfig+0x550>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a145 	.word	0x0800a145
 800a130:	0800a14d 	.word	0x0800a14d
 800a134:	0800a155 	.word	0x0800a155
 800a138:	0800a15d 	.word	0x0800a15d
 800a13c:	0800a165 	.word	0x0800a165
 800a140:	0800a16d 	.word	0x0800a16d
 800a144:	2302      	movs	r3, #2
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e01a      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a14c:	2304      	movs	r3, #4
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e016      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a154:	2308      	movs	r3, #8
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e012      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a15c:	2310      	movs	r3, #16
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e00e      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a164:	2320      	movs	r3, #32
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e00a      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a16c:	2340      	movs	r3, #64	@ 0x40
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e006      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a174:	2380      	movs	r3, #128	@ 0x80
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e002      	b.n	800a182 <UART_SetConfig+0x5a6>
 800a17c:	2380      	movs	r3, #128	@ 0x80
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a3f      	ldr	r2, [pc, #252]	@ (800a284 <UART_SetConfig+0x6a8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	f040 80f8 	bne.w	800a37e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a18e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a192:	2b20      	cmp	r3, #32
 800a194:	dc46      	bgt.n	800a224 <UART_SetConfig+0x648>
 800a196:	2b02      	cmp	r3, #2
 800a198:	f2c0 8082 	blt.w	800a2a0 <UART_SetConfig+0x6c4>
 800a19c:	3b02      	subs	r3, #2
 800a19e:	2b1e      	cmp	r3, #30
 800a1a0:	d87e      	bhi.n	800a2a0 <UART_SetConfig+0x6c4>
 800a1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a8 <UART_SetConfig+0x5cc>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a22b 	.word	0x0800a22b
 800a1ac:	0800a2a1 	.word	0x0800a2a1
 800a1b0:	0800a233 	.word	0x0800a233
 800a1b4:	0800a2a1 	.word	0x0800a2a1
 800a1b8:	0800a2a1 	.word	0x0800a2a1
 800a1bc:	0800a2a1 	.word	0x0800a2a1
 800a1c0:	0800a243 	.word	0x0800a243
 800a1c4:	0800a2a1 	.word	0x0800a2a1
 800a1c8:	0800a2a1 	.word	0x0800a2a1
 800a1cc:	0800a2a1 	.word	0x0800a2a1
 800a1d0:	0800a2a1 	.word	0x0800a2a1
 800a1d4:	0800a2a1 	.word	0x0800a2a1
 800a1d8:	0800a2a1 	.word	0x0800a2a1
 800a1dc:	0800a2a1 	.word	0x0800a2a1
 800a1e0:	0800a253 	.word	0x0800a253
 800a1e4:	0800a2a1 	.word	0x0800a2a1
 800a1e8:	0800a2a1 	.word	0x0800a2a1
 800a1ec:	0800a2a1 	.word	0x0800a2a1
 800a1f0:	0800a2a1 	.word	0x0800a2a1
 800a1f4:	0800a2a1 	.word	0x0800a2a1
 800a1f8:	0800a2a1 	.word	0x0800a2a1
 800a1fc:	0800a2a1 	.word	0x0800a2a1
 800a200:	0800a2a1 	.word	0x0800a2a1
 800a204:	0800a2a1 	.word	0x0800a2a1
 800a208:	0800a2a1 	.word	0x0800a2a1
 800a20c:	0800a2a1 	.word	0x0800a2a1
 800a210:	0800a2a1 	.word	0x0800a2a1
 800a214:	0800a2a1 	.word	0x0800a2a1
 800a218:	0800a2a1 	.word	0x0800a2a1
 800a21c:	0800a2a1 	.word	0x0800a2a1
 800a220:	0800a293 	.word	0x0800a293
 800a224:	2b40      	cmp	r3, #64	@ 0x40
 800a226:	d037      	beq.n	800a298 <UART_SetConfig+0x6bc>
 800a228:	e03a      	b.n	800a2a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a22a:	f7fd f921 	bl	8007470 <HAL_RCCEx_GetD3PCLK1Freq>
 800a22e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a230:	e03c      	b.n	800a2ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a236:	4618      	mov	r0, r3
 800a238:	f7fd f930 	bl	800749c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	e034      	b.n	800a2ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a242:	f107 0318 	add.w	r3, r7, #24
 800a246:	4618      	mov	r0, r3
 800a248:	f7fd fa7c 	bl	8007744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a250:	e02c      	b.n	800a2ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a252:	4b09      	ldr	r3, [pc, #36]	@ (800a278 <UART_SetConfig+0x69c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d016      	beq.n	800a28c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a25e:	4b06      	ldr	r3, [pc, #24]	@ (800a278 <UART_SetConfig+0x69c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	08db      	lsrs	r3, r3, #3
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	4a07      	ldr	r2, [pc, #28]	@ (800a288 <UART_SetConfig+0x6ac>)
 800a26a:	fa22 f303 	lsr.w	r3, r2, r3
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a270:	e01c      	b.n	800a2ac <UART_SetConfig+0x6d0>
 800a272:	bf00      	nop
 800a274:	40011400 	.word	0x40011400
 800a278:	58024400 	.word	0x58024400
 800a27c:	40007800 	.word	0x40007800
 800a280:	40007c00 	.word	0x40007c00
 800a284:	58000c00 	.word	0x58000c00
 800a288:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a28c:	4b9d      	ldr	r3, [pc, #628]	@ (800a504 <UART_SetConfig+0x928>)
 800a28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a290:	e00c      	b.n	800a2ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a292:	4b9d      	ldr	r3, [pc, #628]	@ (800a508 <UART_SetConfig+0x92c>)
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a296:	e009      	b.n	800a2ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29e:	e005      	b.n	800a2ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 81de 	beq.w	800a670 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	4a94      	ldr	r2, [pc, #592]	@ (800a50c <UART_SetConfig+0x930>)
 800a2ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	4413      	add	r3, r2
 800a2d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d305      	bcc.n	800a2e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d903      	bls.n	800a2ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a2ea:	e1c1      	b.n	800a670 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
 800a2f2:	60fa      	str	r2, [r7, #12]
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f8:	4a84      	ldr	r2, [pc, #528]	@ (800a50c <UART_SetConfig+0x930>)
 800a2fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	2200      	movs	r2, #0
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a30a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a30e:	f7f6 f837 	bl	8000380 <__aeabi_uldivmod>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4610      	mov	r0, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	f04f 0200 	mov.w	r2, #0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	020b      	lsls	r3, r1, #8
 800a324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a328:	0202      	lsls	r2, r0, #8
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	6849      	ldr	r1, [r1, #4]
 800a32e:	0849      	lsrs	r1, r1, #1
 800a330:	2000      	movs	r0, #0
 800a332:	460c      	mov	r4, r1
 800a334:	4605      	mov	r5, r0
 800a336:	eb12 0804 	adds.w	r8, r2, r4
 800a33a:	eb43 0905 	adc.w	r9, r3, r5
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	469a      	mov	sl, r3
 800a346:	4693      	mov	fp, r2
 800a348:	4652      	mov	r2, sl
 800a34a:	465b      	mov	r3, fp
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f6 f816 	bl	8000380 <__aeabi_uldivmod>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4613      	mov	r3, r2
 800a35a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a362:	d308      	bcc.n	800a376 <UART_SetConfig+0x79a>
 800a364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a36a:	d204      	bcs.n	800a376 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a372:	60da      	str	r2, [r3, #12]
 800a374:	e17c      	b.n	800a670 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a37c:	e178      	b.n	800a670 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a386:	f040 80c5 	bne.w	800a514 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a38a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a38e:	2b20      	cmp	r3, #32
 800a390:	dc48      	bgt.n	800a424 <UART_SetConfig+0x848>
 800a392:	2b00      	cmp	r3, #0
 800a394:	db7b      	blt.n	800a48e <UART_SetConfig+0x8b2>
 800a396:	2b20      	cmp	r3, #32
 800a398:	d879      	bhi.n	800a48e <UART_SetConfig+0x8b2>
 800a39a:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0x7c4>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a433 	.word	0x0800a433
 800a3a8:	0800a48f 	.word	0x0800a48f
 800a3ac:	0800a48f 	.word	0x0800a48f
 800a3b0:	0800a43b 	.word	0x0800a43b
 800a3b4:	0800a48f 	.word	0x0800a48f
 800a3b8:	0800a48f 	.word	0x0800a48f
 800a3bc:	0800a48f 	.word	0x0800a48f
 800a3c0:	0800a44b 	.word	0x0800a44b
 800a3c4:	0800a48f 	.word	0x0800a48f
 800a3c8:	0800a48f 	.word	0x0800a48f
 800a3cc:	0800a48f 	.word	0x0800a48f
 800a3d0:	0800a48f 	.word	0x0800a48f
 800a3d4:	0800a48f 	.word	0x0800a48f
 800a3d8:	0800a48f 	.word	0x0800a48f
 800a3dc:	0800a48f 	.word	0x0800a48f
 800a3e0:	0800a45b 	.word	0x0800a45b
 800a3e4:	0800a48f 	.word	0x0800a48f
 800a3e8:	0800a48f 	.word	0x0800a48f
 800a3ec:	0800a48f 	.word	0x0800a48f
 800a3f0:	0800a48f 	.word	0x0800a48f
 800a3f4:	0800a48f 	.word	0x0800a48f
 800a3f8:	0800a48f 	.word	0x0800a48f
 800a3fc:	0800a48f 	.word	0x0800a48f
 800a400:	0800a48f 	.word	0x0800a48f
 800a404:	0800a48f 	.word	0x0800a48f
 800a408:	0800a48f 	.word	0x0800a48f
 800a40c:	0800a48f 	.word	0x0800a48f
 800a410:	0800a48f 	.word	0x0800a48f
 800a414:	0800a48f 	.word	0x0800a48f
 800a418:	0800a48f 	.word	0x0800a48f
 800a41c:	0800a48f 	.word	0x0800a48f
 800a420:	0800a481 	.word	0x0800a481
 800a424:	2b40      	cmp	r3, #64	@ 0x40
 800a426:	d02e      	beq.n	800a486 <UART_SetConfig+0x8aa>
 800a428:	e031      	b.n	800a48e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a42a:	f7fb fdeb 	bl	8006004 <HAL_RCC_GetPCLK1Freq>
 800a42e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a430:	e033      	b.n	800a49a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a432:	f7fb fdfd 	bl	8006030 <HAL_RCC_GetPCLK2Freq>
 800a436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a438:	e02f      	b.n	800a49a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a43a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fd f82c 	bl	800749c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a448:	e027      	b.n	800a49a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a44a:	f107 0318 	add.w	r3, r7, #24
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fd f978 	bl	8007744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a458:	e01f      	b.n	800a49a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a45a:	4b2d      	ldr	r3, [pc, #180]	@ (800a510 <UART_SetConfig+0x934>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d009      	beq.n	800a47a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a466:	4b2a      	ldr	r3, [pc, #168]	@ (800a510 <UART_SetConfig+0x934>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	08db      	lsrs	r3, r3, #3
 800a46c:	f003 0303 	and.w	r3, r3, #3
 800a470:	4a24      	ldr	r2, [pc, #144]	@ (800a504 <UART_SetConfig+0x928>)
 800a472:	fa22 f303 	lsr.w	r3, r2, r3
 800a476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a478:	e00f      	b.n	800a49a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a47a:	4b22      	ldr	r3, [pc, #136]	@ (800a504 <UART_SetConfig+0x928>)
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a47e:	e00c      	b.n	800a49a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a480:	4b21      	ldr	r3, [pc, #132]	@ (800a508 <UART_SetConfig+0x92c>)
 800a482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a484:	e009      	b.n	800a49a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a48c:	e005      	b.n	800a49a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80e7 	beq.w	800a670 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a6:	4a19      	ldr	r2, [pc, #100]	@ (800a50c <UART_SetConfig+0x930>)
 800a4a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b4:	005a      	lsls	r2, r3, #1
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	441a      	add	r2, r3
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ca:	2b0f      	cmp	r3, #15
 800a4cc:	d916      	bls.n	800a4fc <UART_SetConfig+0x920>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4d4:	d212      	bcs.n	800a4fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f023 030f 	bic.w	r3, r3, #15
 800a4de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a4f8:	60da      	str	r2, [r3, #12]
 800a4fa:	e0b9      	b.n	800a670 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a502:	e0b5      	b.n	800a670 <UART_SetConfig+0xa94>
 800a504:	03d09000 	.word	0x03d09000
 800a508:	003d0900 	.word	0x003d0900
 800a50c:	0800b770 	.word	0x0800b770
 800a510:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a514:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a518:	2b20      	cmp	r3, #32
 800a51a:	dc49      	bgt.n	800a5b0 <UART_SetConfig+0x9d4>
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	db7c      	blt.n	800a61a <UART_SetConfig+0xa3e>
 800a520:	2b20      	cmp	r3, #32
 800a522:	d87a      	bhi.n	800a61a <UART_SetConfig+0xa3e>
 800a524:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <UART_SetConfig+0x950>)
 800a526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52a:	bf00      	nop
 800a52c:	0800a5b7 	.word	0x0800a5b7
 800a530:	0800a5bf 	.word	0x0800a5bf
 800a534:	0800a61b 	.word	0x0800a61b
 800a538:	0800a61b 	.word	0x0800a61b
 800a53c:	0800a5c7 	.word	0x0800a5c7
 800a540:	0800a61b 	.word	0x0800a61b
 800a544:	0800a61b 	.word	0x0800a61b
 800a548:	0800a61b 	.word	0x0800a61b
 800a54c:	0800a5d7 	.word	0x0800a5d7
 800a550:	0800a61b 	.word	0x0800a61b
 800a554:	0800a61b 	.word	0x0800a61b
 800a558:	0800a61b 	.word	0x0800a61b
 800a55c:	0800a61b 	.word	0x0800a61b
 800a560:	0800a61b 	.word	0x0800a61b
 800a564:	0800a61b 	.word	0x0800a61b
 800a568:	0800a61b 	.word	0x0800a61b
 800a56c:	0800a5e7 	.word	0x0800a5e7
 800a570:	0800a61b 	.word	0x0800a61b
 800a574:	0800a61b 	.word	0x0800a61b
 800a578:	0800a61b 	.word	0x0800a61b
 800a57c:	0800a61b 	.word	0x0800a61b
 800a580:	0800a61b 	.word	0x0800a61b
 800a584:	0800a61b 	.word	0x0800a61b
 800a588:	0800a61b 	.word	0x0800a61b
 800a58c:	0800a61b 	.word	0x0800a61b
 800a590:	0800a61b 	.word	0x0800a61b
 800a594:	0800a61b 	.word	0x0800a61b
 800a598:	0800a61b 	.word	0x0800a61b
 800a59c:	0800a61b 	.word	0x0800a61b
 800a5a0:	0800a61b 	.word	0x0800a61b
 800a5a4:	0800a61b 	.word	0x0800a61b
 800a5a8:	0800a61b 	.word	0x0800a61b
 800a5ac:	0800a60d 	.word	0x0800a60d
 800a5b0:	2b40      	cmp	r3, #64	@ 0x40
 800a5b2:	d02e      	beq.n	800a612 <UART_SetConfig+0xa36>
 800a5b4:	e031      	b.n	800a61a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b6:	f7fb fd25 	bl	8006004 <HAL_RCC_GetPCLK1Freq>
 800a5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e033      	b.n	800a626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5be:	f7fb fd37 	bl	8006030 <HAL_RCC_GetPCLK2Freq>
 800a5c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5c4:	e02f      	b.n	800a626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fc ff66 	bl	800749c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d4:	e027      	b.n	800a626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d6:	f107 0318 	add.w	r3, r7, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd f8b2 	bl	8007744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e4:	e01f      	b.n	800a626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e6:	4b2d      	ldr	r3, [pc, #180]	@ (800a69c <UART_SetConfig+0xac0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a69c <UART_SetConfig+0xac0>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	08db      	lsrs	r3, r3, #3
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	4a28      	ldr	r2, [pc, #160]	@ (800a6a0 <UART_SetConfig+0xac4>)
 800a5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a604:	e00f      	b.n	800a626 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a606:	4b26      	ldr	r3, [pc, #152]	@ (800a6a0 <UART_SetConfig+0xac4>)
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60a:	e00c      	b.n	800a626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a60c:	4b25      	ldr	r3, [pc, #148]	@ (800a6a4 <UART_SetConfig+0xac8>)
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a610:	e009      	b.n	800a626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a618:	e005      	b.n	800a626 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a624:	bf00      	nop
    }

    if (pclk != 0U)
 800a626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d021      	beq.n	800a670 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a630:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a8 <UART_SetConfig+0xacc>)
 800a632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a636:	461a      	mov	r2, r3
 800a638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a63a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	441a      	add	r2, r3
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a652:	2b0f      	cmp	r3, #15
 800a654:	d909      	bls.n	800a66a <UART_SetConfig+0xa8e>
 800a656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a65c:	d205      	bcs.n	800a66a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a660:	b29a      	uxth	r2, r3
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60da      	str	r2, [r3, #12]
 800a668:	e002      	b.n	800a670 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2201      	movs	r2, #1
 800a674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2200      	movs	r2, #0
 800a684:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2200      	movs	r2, #0
 800a68a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a68c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a690:	4618      	mov	r0, r3
 800a692:	3748      	adds	r7, #72	@ 0x48
 800a694:	46bd      	mov	sp, r7
 800a696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a69a:	bf00      	nop
 800a69c:	58024400 	.word	0x58024400
 800a6a0:	03d09000 	.word	0x03d09000
 800a6a4:	003d0900 	.word	0x003d0900
 800a6a8:	0800b770 	.word	0x0800b770

0800a6ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b8:	f003 0308 	and.w	r3, r3, #8
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00a      	beq.n	800a6d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00a      	beq.n	800a71a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00a      	beq.n	800a75e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a762:	f003 0320 	and.w	r3, r3, #32
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00a      	beq.n	800a780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	430a      	orrs	r2, r1
 800a77e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d01a      	beq.n	800a7c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7aa:	d10a      	bne.n	800a7c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	605a      	str	r2, [r3, #4]
  }
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b098      	sub	sp, #96	@ 0x60
 800a7f4:	af02      	add	r7, sp, #8
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a800:	f7f8 f8c4 	bl	800298c <HAL_GetTick>
 800a804:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0308 	and.w	r3, r3, #8
 800a810:	2b08      	cmp	r3, #8
 800a812:	d12f      	bne.n	800a874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a81c:	2200      	movs	r2, #0
 800a81e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f88e 	bl	800a944 <UART_WaitOnFlagUntilTimeout>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d022      	beq.n	800a874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a842:	653b      	str	r3, [r7, #80]	@ 0x50
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a84c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a84e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e6      	bne.n	800a82e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2220      	movs	r2, #32
 800a864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e063      	b.n	800a93c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0304 	and.w	r3, r3, #4
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d149      	bne.n	800a916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a882:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a88a:	2200      	movs	r2, #0
 800a88c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f857 	bl	800a944 <UART_WaitOnFlagUntilTimeout>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d03c      	beq.n	800a916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	e853 3f00 	ldrex	r3, [r3]
 800a8a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e6      	bne.n	800a89c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f023 0301 	bic.w	r3, r3, #1
 800a8e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8ee:	61fa      	str	r2, [r7, #28]
 800a8f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	69b9      	ldr	r1, [r7, #24]
 800a8f4:	69fa      	ldr	r2, [r7, #28]
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	617b      	str	r3, [r7, #20]
   return(result);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e5      	bne.n	800a8ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2220      	movs	r2, #32
 800a906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e012      	b.n	800a93c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2220      	movs	r2, #32
 800a91a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2220      	movs	r2, #32
 800a922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3758      	adds	r7, #88	@ 0x58
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a954:	e04f      	b.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a95c:	d04b      	beq.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a95e:	f7f8 f815 	bl	800298c <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d302      	bcc.n	800a974 <UART_WaitOnFlagUntilTimeout+0x30>
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e04e      	b.n	800aa16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 0304 	and.w	r3, r3, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	d037      	beq.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b80      	cmp	r3, #128	@ 0x80
 800a98a:	d034      	beq.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b40      	cmp	r3, #64	@ 0x40
 800a990:	d031      	beq.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f003 0308 	and.w	r3, r3, #8
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	d110      	bne.n	800a9c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 f839 	bl	800aa20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e029      	b.n	800aa16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9d0:	d111      	bne.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f81f 	bl	800aa20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2220      	movs	r2, #32
 800a9e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e00f      	b.n	800aa16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69da      	ldr	r2, [r3, #28]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	bf0c      	ite	eq
 800aa06:	2301      	moveq	r3, #1
 800aa08:	2300      	movne	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d0a0      	beq.n	800a956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b095      	sub	sp, #84	@ 0x54
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa30:	e853 3f00 	ldrex	r3, [r3]
 800aa34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa46:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa4e:	e841 2300 	strex	r3, r2, [r1]
 800aa52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1e6      	bne.n	800aa28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3308      	adds	r3, #8
 800aa60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	4b1e      	ldr	r3, [pc, #120]	@ (800aae8 <UART_EndRxTransfer+0xc8>)
 800aa6e:	4013      	ands	r3, r2
 800aa70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3308      	adds	r3, #8
 800aa78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e5      	bne.n	800aa5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d118      	bne.n	800aac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	e853 3f00 	ldrex	r3, [r3]
 800aaa2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f023 0310 	bic.w	r3, r3, #16
 800aaaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	461a      	mov	r2, r3
 800aab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aab4:	61bb      	str	r3, [r7, #24]
 800aab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab8:	6979      	ldr	r1, [r7, #20]
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	e841 2300 	strex	r3, r2, [r1]
 800aac0:	613b      	str	r3, [r7, #16]
   return(result);
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e6      	bne.n	800aa96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aadc:	bf00      	nop
 800aade:	3754      	adds	r7, #84	@ 0x54
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	effffffe 	.word	0xeffffffe

0800aaec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff f850 	bl	8009bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab34:	61fb      	str	r3, [r7, #28]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	61bb      	str	r3, [r7, #24]
 800ab40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6979      	ldr	r1, [r7, #20]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e6      	bne.n	800ab20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2220      	movs	r2, #32
 800ab56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff f81b 	bl	8009b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab66:	bf00      	nop
 800ab68:	3720      	adds	r7, #32
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab8a:	bf00      	nop
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab9e:	bf00      	nop
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abaa:	b480      	push	{r7}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d101      	bne.n	800abc0 <HAL_UARTEx_DisableFifoMode+0x16>
 800abbc:	2302      	movs	r3, #2
 800abbe:	e027      	b.n	800ac10 <HAL_UARTEx_DisableFifoMode+0x66>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2224      	movs	r2, #36	@ 0x24
 800abcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f022 0201 	bic.w	r2, r2, #1
 800abe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800abee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d101      	bne.n	800ac34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac30:	2302      	movs	r3, #2
 800ac32:	e02d      	b.n	800ac90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2224      	movs	r2, #36	@ 0x24
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0201 	bic.w	r2, r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f84f 	bl	800ad14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2220      	movs	r2, #32
 800ac82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d101      	bne.n	800acb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acac:	2302      	movs	r3, #2
 800acae:	e02d      	b.n	800ad0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2224      	movs	r2, #36	@ 0x24
 800acbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0201 	bic.w	r2, r2, #1
 800acd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f811 	bl	800ad14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2220      	movs	r2, #32
 800acfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d108      	bne.n	800ad36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad34:	e031      	b.n	800ad9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad36:	2310      	movs	r3, #16
 800ad38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad3a:	2310      	movs	r3, #16
 800ad3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	0e5b      	lsrs	r3, r3, #25
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	f003 0307 	and.w	r3, r3, #7
 800ad4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	0f5b      	lsrs	r3, r3, #29
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	f003 0307 	and.w	r3, r3, #7
 800ad5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	7b3a      	ldrb	r2, [r7, #12]
 800ad62:	4911      	ldr	r1, [pc, #68]	@ (800ada8 <UARTEx_SetNbDataToProcess+0x94>)
 800ad64:	5c8a      	ldrb	r2, [r1, r2]
 800ad66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad6a:	7b3a      	ldrb	r2, [r7, #12]
 800ad6c:	490f      	ldr	r1, [pc, #60]	@ (800adac <UARTEx_SetNbDataToProcess+0x98>)
 800ad6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	7b7a      	ldrb	r2, [r7, #13]
 800ad80:	4909      	ldr	r1, [pc, #36]	@ (800ada8 <UARTEx_SetNbDataToProcess+0x94>)
 800ad82:	5c8a      	ldrb	r2, [r1, r2]
 800ad84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad88:	7b7a      	ldrb	r2, [r7, #13]
 800ad8a:	4908      	ldr	r1, [pc, #32]	@ (800adac <UARTEx_SetNbDataToProcess+0x98>)
 800ad8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad9a:	bf00      	nop
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	0800b788 	.word	0x0800b788
 800adac:	0800b790 	.word	0x0800b790

0800adb0 <siprintf>:
 800adb0:	b40e      	push	{r1, r2, r3}
 800adb2:	b500      	push	{lr}
 800adb4:	b09c      	sub	sp, #112	@ 0x70
 800adb6:	ab1d      	add	r3, sp, #116	@ 0x74
 800adb8:	9002      	str	r0, [sp, #8]
 800adba:	9006      	str	r0, [sp, #24]
 800adbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800adc0:	4809      	ldr	r0, [pc, #36]	@ (800ade8 <siprintf+0x38>)
 800adc2:	9107      	str	r1, [sp, #28]
 800adc4:	9104      	str	r1, [sp, #16]
 800adc6:	4909      	ldr	r1, [pc, #36]	@ (800adec <siprintf+0x3c>)
 800adc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adcc:	9105      	str	r1, [sp, #20]
 800adce:	6800      	ldr	r0, [r0, #0]
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	a902      	add	r1, sp, #8
 800add4:	f000 f89c 	bl	800af10 <_svfiprintf_r>
 800add8:	9b02      	ldr	r3, [sp, #8]
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	b01c      	add	sp, #112	@ 0x70
 800ade0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade4:	b003      	add	sp, #12
 800ade6:	4770      	bx	lr
 800ade8:	24000014 	.word	0x24000014
 800adec:	ffff0208 	.word	0xffff0208

0800adf0 <memset>:
 800adf0:	4402      	add	r2, r0
 800adf2:	4603      	mov	r3, r0
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d100      	bne.n	800adfa <memset+0xa>
 800adf8:	4770      	bx	lr
 800adfa:	f803 1b01 	strb.w	r1, [r3], #1
 800adfe:	e7f9      	b.n	800adf4 <memset+0x4>

0800ae00 <__errno>:
 800ae00:	4b01      	ldr	r3, [pc, #4]	@ (800ae08 <__errno+0x8>)
 800ae02:	6818      	ldr	r0, [r3, #0]
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	24000014 	.word	0x24000014

0800ae0c <__libc_init_array>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae44 <__libc_init_array+0x38>)
 800ae10:	4c0d      	ldr	r4, [pc, #52]	@ (800ae48 <__libc_init_array+0x3c>)
 800ae12:	1b64      	subs	r4, r4, r5
 800ae14:	10a4      	asrs	r4, r4, #2
 800ae16:	2600      	movs	r6, #0
 800ae18:	42a6      	cmp	r6, r4
 800ae1a:	d109      	bne.n	800ae30 <__libc_init_array+0x24>
 800ae1c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae4c <__libc_init_array+0x40>)
 800ae1e:	4c0c      	ldr	r4, [pc, #48]	@ (800ae50 <__libc_init_array+0x44>)
 800ae20:	f000 fc66 	bl	800b6f0 <_init>
 800ae24:	1b64      	subs	r4, r4, r5
 800ae26:	10a4      	asrs	r4, r4, #2
 800ae28:	2600      	movs	r6, #0
 800ae2a:	42a6      	cmp	r6, r4
 800ae2c:	d105      	bne.n	800ae3a <__libc_init_array+0x2e>
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae34:	4798      	blx	r3
 800ae36:	3601      	adds	r6, #1
 800ae38:	e7ee      	b.n	800ae18 <__libc_init_array+0xc>
 800ae3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3e:	4798      	blx	r3
 800ae40:	3601      	adds	r6, #1
 800ae42:	e7f2      	b.n	800ae2a <__libc_init_array+0x1e>
 800ae44:	0800b7d4 	.word	0x0800b7d4
 800ae48:	0800b7d4 	.word	0x0800b7d4
 800ae4c:	0800b7d4 	.word	0x0800b7d4
 800ae50:	0800b7d8 	.word	0x0800b7d8

0800ae54 <__retarget_lock_acquire_recursive>:
 800ae54:	4770      	bx	lr

0800ae56 <__retarget_lock_release_recursive>:
 800ae56:	4770      	bx	lr

0800ae58 <__ssputs_r>:
 800ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	688e      	ldr	r6, [r1, #8]
 800ae5e:	461f      	mov	r7, r3
 800ae60:	42be      	cmp	r6, r7
 800ae62:	680b      	ldr	r3, [r1, #0]
 800ae64:	4682      	mov	sl, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	4690      	mov	r8, r2
 800ae6a:	d82d      	bhi.n	800aec8 <__ssputs_r+0x70>
 800ae6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae74:	d026      	beq.n	800aec4 <__ssputs_r+0x6c>
 800ae76:	6965      	ldr	r5, [r4, #20]
 800ae78:	6909      	ldr	r1, [r1, #16]
 800ae7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae7e:	eba3 0901 	sub.w	r9, r3, r1
 800ae82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae86:	1c7b      	adds	r3, r7, #1
 800ae88:	444b      	add	r3, r9
 800ae8a:	106d      	asrs	r5, r5, #1
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	bf38      	it	cc
 800ae90:	461d      	movcc	r5, r3
 800ae92:	0553      	lsls	r3, r2, #21
 800ae94:	d527      	bpl.n	800aee6 <__ssputs_r+0x8e>
 800ae96:	4629      	mov	r1, r5
 800ae98:	f000 f958 	bl	800b14c <_malloc_r>
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	b360      	cbz	r0, 800aefa <__ssputs_r+0xa2>
 800aea0:	6921      	ldr	r1, [r4, #16]
 800aea2:	464a      	mov	r2, r9
 800aea4:	f000 fbc4 	bl	800b630 <memcpy>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	6126      	str	r6, [r4, #16]
 800aeb6:	6165      	str	r5, [r4, #20]
 800aeb8:	444e      	add	r6, r9
 800aeba:	eba5 0509 	sub.w	r5, r5, r9
 800aebe:	6026      	str	r6, [r4, #0]
 800aec0:	60a5      	str	r5, [r4, #8]
 800aec2:	463e      	mov	r6, r7
 800aec4:	42be      	cmp	r6, r7
 800aec6:	d900      	bls.n	800aeca <__ssputs_r+0x72>
 800aec8:	463e      	mov	r6, r7
 800aeca:	6820      	ldr	r0, [r4, #0]
 800aecc:	4632      	mov	r2, r6
 800aece:	4641      	mov	r1, r8
 800aed0:	f000 fb84 	bl	800b5dc <memmove>
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	1b9b      	subs	r3, r3, r6
 800aed8:	60a3      	str	r3, [r4, #8]
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	4433      	add	r3, r6
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	2000      	movs	r0, #0
 800aee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee6:	462a      	mov	r2, r5
 800aee8:	f000 fb4a 	bl	800b580 <_realloc_r>
 800aeec:	4606      	mov	r6, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d1e0      	bne.n	800aeb4 <__ssputs_r+0x5c>
 800aef2:	6921      	ldr	r1, [r4, #16]
 800aef4:	4650      	mov	r0, sl
 800aef6:	f000 fba9 	bl	800b64c <_free_r>
 800aefa:	230c      	movs	r3, #12
 800aefc:	f8ca 3000 	str.w	r3, [sl]
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af0c:	e7e9      	b.n	800aee2 <__ssputs_r+0x8a>
	...

0800af10 <_svfiprintf_r>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4698      	mov	r8, r3
 800af16:	898b      	ldrh	r3, [r1, #12]
 800af18:	061b      	lsls	r3, r3, #24
 800af1a:	b09d      	sub	sp, #116	@ 0x74
 800af1c:	4607      	mov	r7, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	4614      	mov	r4, r2
 800af22:	d510      	bpl.n	800af46 <_svfiprintf_r+0x36>
 800af24:	690b      	ldr	r3, [r1, #16]
 800af26:	b973      	cbnz	r3, 800af46 <_svfiprintf_r+0x36>
 800af28:	2140      	movs	r1, #64	@ 0x40
 800af2a:	f000 f90f 	bl	800b14c <_malloc_r>
 800af2e:	6028      	str	r0, [r5, #0]
 800af30:	6128      	str	r0, [r5, #16]
 800af32:	b930      	cbnz	r0, 800af42 <_svfiprintf_r+0x32>
 800af34:	230c      	movs	r3, #12
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af3c:	b01d      	add	sp, #116	@ 0x74
 800af3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af42:	2340      	movs	r3, #64	@ 0x40
 800af44:	616b      	str	r3, [r5, #20]
 800af46:	2300      	movs	r3, #0
 800af48:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4a:	2320      	movs	r3, #32
 800af4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af50:	f8cd 800c 	str.w	r8, [sp, #12]
 800af54:	2330      	movs	r3, #48	@ 0x30
 800af56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0f4 <_svfiprintf_r+0x1e4>
 800af5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af5e:	f04f 0901 	mov.w	r9, #1
 800af62:	4623      	mov	r3, r4
 800af64:	469a      	mov	sl, r3
 800af66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6a:	b10a      	cbz	r2, 800af70 <_svfiprintf_r+0x60>
 800af6c:	2a25      	cmp	r2, #37	@ 0x25
 800af6e:	d1f9      	bne.n	800af64 <_svfiprintf_r+0x54>
 800af70:	ebba 0b04 	subs.w	fp, sl, r4
 800af74:	d00b      	beq.n	800af8e <_svfiprintf_r+0x7e>
 800af76:	465b      	mov	r3, fp
 800af78:	4622      	mov	r2, r4
 800af7a:	4629      	mov	r1, r5
 800af7c:	4638      	mov	r0, r7
 800af7e:	f7ff ff6b 	bl	800ae58 <__ssputs_r>
 800af82:	3001      	adds	r0, #1
 800af84:	f000 80a7 	beq.w	800b0d6 <_svfiprintf_r+0x1c6>
 800af88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8a:	445a      	add	r2, fp
 800af8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af8e:	f89a 3000 	ldrb.w	r3, [sl]
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 809f 	beq.w	800b0d6 <_svfiprintf_r+0x1c6>
 800af98:	2300      	movs	r3, #0
 800af9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa2:	f10a 0a01 	add.w	sl, sl, #1
 800afa6:	9304      	str	r3, [sp, #16]
 800afa8:	9307      	str	r3, [sp, #28]
 800afaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afae:	931a      	str	r3, [sp, #104]	@ 0x68
 800afb0:	4654      	mov	r4, sl
 800afb2:	2205      	movs	r2, #5
 800afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb8:	484e      	ldr	r0, [pc, #312]	@ (800b0f4 <_svfiprintf_r+0x1e4>)
 800afba:	f7f5 f991 	bl	80002e0 <memchr>
 800afbe:	9a04      	ldr	r2, [sp, #16]
 800afc0:	b9d8      	cbnz	r0, 800affa <_svfiprintf_r+0xea>
 800afc2:	06d0      	lsls	r0, r2, #27
 800afc4:	bf44      	itt	mi
 800afc6:	2320      	movmi	r3, #32
 800afc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afcc:	0711      	lsls	r1, r2, #28
 800afce:	bf44      	itt	mi
 800afd0:	232b      	movmi	r3, #43	@ 0x2b
 800afd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd6:	f89a 3000 	ldrb.w	r3, [sl]
 800afda:	2b2a      	cmp	r3, #42	@ 0x2a
 800afdc:	d015      	beq.n	800b00a <_svfiprintf_r+0xfa>
 800afde:	9a07      	ldr	r2, [sp, #28]
 800afe0:	4654      	mov	r4, sl
 800afe2:	2000      	movs	r0, #0
 800afe4:	f04f 0c0a 	mov.w	ip, #10
 800afe8:	4621      	mov	r1, r4
 800afea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afee:	3b30      	subs	r3, #48	@ 0x30
 800aff0:	2b09      	cmp	r3, #9
 800aff2:	d94b      	bls.n	800b08c <_svfiprintf_r+0x17c>
 800aff4:	b1b0      	cbz	r0, 800b024 <_svfiprintf_r+0x114>
 800aff6:	9207      	str	r2, [sp, #28]
 800aff8:	e014      	b.n	800b024 <_svfiprintf_r+0x114>
 800affa:	eba0 0308 	sub.w	r3, r0, r8
 800affe:	fa09 f303 	lsl.w	r3, r9, r3
 800b002:	4313      	orrs	r3, r2
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	46a2      	mov	sl, r4
 800b008:	e7d2      	b.n	800afb0 <_svfiprintf_r+0xa0>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	1d19      	adds	r1, r3, #4
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	9103      	str	r1, [sp, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	bfbb      	ittet	lt
 800b016:	425b      	neglt	r3, r3
 800b018:	f042 0202 	orrlt.w	r2, r2, #2
 800b01c:	9307      	strge	r3, [sp, #28]
 800b01e:	9307      	strlt	r3, [sp, #28]
 800b020:	bfb8      	it	lt
 800b022:	9204      	strlt	r2, [sp, #16]
 800b024:	7823      	ldrb	r3, [r4, #0]
 800b026:	2b2e      	cmp	r3, #46	@ 0x2e
 800b028:	d10a      	bne.n	800b040 <_svfiprintf_r+0x130>
 800b02a:	7863      	ldrb	r3, [r4, #1]
 800b02c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b02e:	d132      	bne.n	800b096 <_svfiprintf_r+0x186>
 800b030:	9b03      	ldr	r3, [sp, #12]
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	9203      	str	r2, [sp, #12]
 800b038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b03c:	3402      	adds	r4, #2
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b104 <_svfiprintf_r+0x1f4>
 800b044:	7821      	ldrb	r1, [r4, #0]
 800b046:	2203      	movs	r2, #3
 800b048:	4650      	mov	r0, sl
 800b04a:	f7f5 f949 	bl	80002e0 <memchr>
 800b04e:	b138      	cbz	r0, 800b060 <_svfiprintf_r+0x150>
 800b050:	9b04      	ldr	r3, [sp, #16]
 800b052:	eba0 000a 	sub.w	r0, r0, sl
 800b056:	2240      	movs	r2, #64	@ 0x40
 800b058:	4082      	lsls	r2, r0
 800b05a:	4313      	orrs	r3, r2
 800b05c:	3401      	adds	r4, #1
 800b05e:	9304      	str	r3, [sp, #16]
 800b060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b064:	4824      	ldr	r0, [pc, #144]	@ (800b0f8 <_svfiprintf_r+0x1e8>)
 800b066:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b06a:	2206      	movs	r2, #6
 800b06c:	f7f5 f938 	bl	80002e0 <memchr>
 800b070:	2800      	cmp	r0, #0
 800b072:	d036      	beq.n	800b0e2 <_svfiprintf_r+0x1d2>
 800b074:	4b21      	ldr	r3, [pc, #132]	@ (800b0fc <_svfiprintf_r+0x1ec>)
 800b076:	bb1b      	cbnz	r3, 800b0c0 <_svfiprintf_r+0x1b0>
 800b078:	9b03      	ldr	r3, [sp, #12]
 800b07a:	3307      	adds	r3, #7
 800b07c:	f023 0307 	bic.w	r3, r3, #7
 800b080:	3308      	adds	r3, #8
 800b082:	9303      	str	r3, [sp, #12]
 800b084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b086:	4433      	add	r3, r6
 800b088:	9309      	str	r3, [sp, #36]	@ 0x24
 800b08a:	e76a      	b.n	800af62 <_svfiprintf_r+0x52>
 800b08c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b090:	460c      	mov	r4, r1
 800b092:	2001      	movs	r0, #1
 800b094:	e7a8      	b.n	800afe8 <_svfiprintf_r+0xd8>
 800b096:	2300      	movs	r3, #0
 800b098:	3401      	adds	r4, #1
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	4619      	mov	r1, r3
 800b09e:	f04f 0c0a 	mov.w	ip, #10
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0a8:	3a30      	subs	r2, #48	@ 0x30
 800b0aa:	2a09      	cmp	r2, #9
 800b0ac:	d903      	bls.n	800b0b6 <_svfiprintf_r+0x1a6>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0c6      	beq.n	800b040 <_svfiprintf_r+0x130>
 800b0b2:	9105      	str	r1, [sp, #20]
 800b0b4:	e7c4      	b.n	800b040 <_svfiprintf_r+0x130>
 800b0b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e7f0      	b.n	800b0a2 <_svfiprintf_r+0x192>
 800b0c0:	ab03      	add	r3, sp, #12
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	462a      	mov	r2, r5
 800b0c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b100 <_svfiprintf_r+0x1f0>)
 800b0c8:	a904      	add	r1, sp, #16
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	1c42      	adds	r2, r0, #1
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	d1d6      	bne.n	800b084 <_svfiprintf_r+0x174>
 800b0d6:	89ab      	ldrh	r3, [r5, #12]
 800b0d8:	065b      	lsls	r3, r3, #25
 800b0da:	f53f af2d 	bmi.w	800af38 <_svfiprintf_r+0x28>
 800b0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0e0:	e72c      	b.n	800af3c <_svfiprintf_r+0x2c>
 800b0e2:	ab03      	add	r3, sp, #12
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	462a      	mov	r2, r5
 800b0e8:	4b05      	ldr	r3, [pc, #20]	@ (800b100 <_svfiprintf_r+0x1f0>)
 800b0ea:	a904      	add	r1, sp, #16
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f000 f91b 	bl	800b328 <_printf_i>
 800b0f2:	e7ed      	b.n	800b0d0 <_svfiprintf_r+0x1c0>
 800b0f4:	0800b798 	.word	0x0800b798
 800b0f8:	0800b7a2 	.word	0x0800b7a2
 800b0fc:	00000000 	.word	0x00000000
 800b100:	0800ae59 	.word	0x0800ae59
 800b104:	0800b79e 	.word	0x0800b79e

0800b108 <sbrk_aligned>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	4e0f      	ldr	r6, [pc, #60]	@ (800b148 <sbrk_aligned+0x40>)
 800b10c:	460c      	mov	r4, r1
 800b10e:	6831      	ldr	r1, [r6, #0]
 800b110:	4605      	mov	r5, r0
 800b112:	b911      	cbnz	r1, 800b11a <sbrk_aligned+0x12>
 800b114:	f000 fa7c 	bl	800b610 <_sbrk_r>
 800b118:	6030      	str	r0, [r6, #0]
 800b11a:	4621      	mov	r1, r4
 800b11c:	4628      	mov	r0, r5
 800b11e:	f000 fa77 	bl	800b610 <_sbrk_r>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d103      	bne.n	800b12e <sbrk_aligned+0x26>
 800b126:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b12a:	4620      	mov	r0, r4
 800b12c:	bd70      	pop	{r4, r5, r6, pc}
 800b12e:	1cc4      	adds	r4, r0, #3
 800b130:	f024 0403 	bic.w	r4, r4, #3
 800b134:	42a0      	cmp	r0, r4
 800b136:	d0f8      	beq.n	800b12a <sbrk_aligned+0x22>
 800b138:	1a21      	subs	r1, r4, r0
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 fa68 	bl	800b610 <_sbrk_r>
 800b140:	3001      	adds	r0, #1
 800b142:	d1f2      	bne.n	800b12a <sbrk_aligned+0x22>
 800b144:	e7ef      	b.n	800b126 <sbrk_aligned+0x1e>
 800b146:	bf00      	nop
 800b148:	240006ec 	.word	0x240006ec

0800b14c <_malloc_r>:
 800b14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b150:	1ccd      	adds	r5, r1, #3
 800b152:	f025 0503 	bic.w	r5, r5, #3
 800b156:	3508      	adds	r5, #8
 800b158:	2d0c      	cmp	r5, #12
 800b15a:	bf38      	it	cc
 800b15c:	250c      	movcc	r5, #12
 800b15e:	2d00      	cmp	r5, #0
 800b160:	4606      	mov	r6, r0
 800b162:	db01      	blt.n	800b168 <_malloc_r+0x1c>
 800b164:	42a9      	cmp	r1, r5
 800b166:	d904      	bls.n	800b172 <_malloc_r+0x26>
 800b168:	230c      	movs	r3, #12
 800b16a:	6033      	str	r3, [r6, #0]
 800b16c:	2000      	movs	r0, #0
 800b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b248 <_malloc_r+0xfc>
 800b176:	f000 f9f7 	bl	800b568 <__malloc_lock>
 800b17a:	f8d8 3000 	ldr.w	r3, [r8]
 800b17e:	461c      	mov	r4, r3
 800b180:	bb44      	cbnz	r4, 800b1d4 <_malloc_r+0x88>
 800b182:	4629      	mov	r1, r5
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff ffbf 	bl	800b108 <sbrk_aligned>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	4604      	mov	r4, r0
 800b18e:	d158      	bne.n	800b242 <_malloc_r+0xf6>
 800b190:	f8d8 4000 	ldr.w	r4, [r8]
 800b194:	4627      	mov	r7, r4
 800b196:	2f00      	cmp	r7, #0
 800b198:	d143      	bne.n	800b222 <_malloc_r+0xd6>
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d04b      	beq.n	800b236 <_malloc_r+0xea>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	eb04 0903 	add.w	r9, r4, r3
 800b1a8:	f000 fa32 	bl	800b610 <_sbrk_r>
 800b1ac:	4581      	cmp	r9, r0
 800b1ae:	d142      	bne.n	800b236 <_malloc_r+0xea>
 800b1b0:	6821      	ldr	r1, [r4, #0]
 800b1b2:	1a6d      	subs	r5, r5, r1
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffa6 	bl	800b108 <sbrk_aligned>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d03a      	beq.n	800b236 <_malloc_r+0xea>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	442b      	add	r3, r5
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	bb62      	cbnz	r2, 800b228 <_malloc_r+0xdc>
 800b1ce:	f8c8 7000 	str.w	r7, [r8]
 800b1d2:	e00f      	b.n	800b1f4 <_malloc_r+0xa8>
 800b1d4:	6822      	ldr	r2, [r4, #0]
 800b1d6:	1b52      	subs	r2, r2, r5
 800b1d8:	d420      	bmi.n	800b21c <_malloc_r+0xd0>
 800b1da:	2a0b      	cmp	r2, #11
 800b1dc:	d917      	bls.n	800b20e <_malloc_r+0xc2>
 800b1de:	1961      	adds	r1, r4, r5
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	6025      	str	r5, [r4, #0]
 800b1e4:	bf18      	it	ne
 800b1e6:	6059      	strne	r1, [r3, #4]
 800b1e8:	6863      	ldr	r3, [r4, #4]
 800b1ea:	bf08      	it	eq
 800b1ec:	f8c8 1000 	streq.w	r1, [r8]
 800b1f0:	5162      	str	r2, [r4, r5]
 800b1f2:	604b      	str	r3, [r1, #4]
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f000 f9bd 	bl	800b574 <__malloc_unlock>
 800b1fa:	f104 000b 	add.w	r0, r4, #11
 800b1fe:	1d23      	adds	r3, r4, #4
 800b200:	f020 0007 	bic.w	r0, r0, #7
 800b204:	1ac2      	subs	r2, r0, r3
 800b206:	bf1c      	itt	ne
 800b208:	1a1b      	subne	r3, r3, r0
 800b20a:	50a3      	strne	r3, [r4, r2]
 800b20c:	e7af      	b.n	800b16e <_malloc_r+0x22>
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	42a3      	cmp	r3, r4
 800b212:	bf0c      	ite	eq
 800b214:	f8c8 2000 	streq.w	r2, [r8]
 800b218:	605a      	strne	r2, [r3, #4]
 800b21a:	e7eb      	b.n	800b1f4 <_malloc_r+0xa8>
 800b21c:	4623      	mov	r3, r4
 800b21e:	6864      	ldr	r4, [r4, #4]
 800b220:	e7ae      	b.n	800b180 <_malloc_r+0x34>
 800b222:	463c      	mov	r4, r7
 800b224:	687f      	ldr	r7, [r7, #4]
 800b226:	e7b6      	b.n	800b196 <_malloc_r+0x4a>
 800b228:	461a      	mov	r2, r3
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	d1fb      	bne.n	800b228 <_malloc_r+0xdc>
 800b230:	2300      	movs	r3, #0
 800b232:	6053      	str	r3, [r2, #4]
 800b234:	e7de      	b.n	800b1f4 <_malloc_r+0xa8>
 800b236:	230c      	movs	r3, #12
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f99a 	bl	800b574 <__malloc_unlock>
 800b240:	e794      	b.n	800b16c <_malloc_r+0x20>
 800b242:	6005      	str	r5, [r0, #0]
 800b244:	e7d6      	b.n	800b1f4 <_malloc_r+0xa8>
 800b246:	bf00      	nop
 800b248:	240006f0 	.word	0x240006f0

0800b24c <_printf_common>:
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	4616      	mov	r6, r2
 800b252:	4698      	mov	r8, r3
 800b254:	688a      	ldr	r2, [r1, #8]
 800b256:	690b      	ldr	r3, [r1, #16]
 800b258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b25c:	4293      	cmp	r3, r2
 800b25e:	bfb8      	it	lt
 800b260:	4613      	movlt	r3, r2
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b268:	4607      	mov	r7, r0
 800b26a:	460c      	mov	r4, r1
 800b26c:	b10a      	cbz	r2, 800b272 <_printf_common+0x26>
 800b26e:	3301      	adds	r3, #1
 800b270:	6033      	str	r3, [r6, #0]
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	0699      	lsls	r1, r3, #26
 800b276:	bf42      	ittt	mi
 800b278:	6833      	ldrmi	r3, [r6, #0]
 800b27a:	3302      	addmi	r3, #2
 800b27c:	6033      	strmi	r3, [r6, #0]
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	f015 0506 	ands.w	r5, r5, #6
 800b284:	d106      	bne.n	800b294 <_printf_common+0x48>
 800b286:	f104 0a19 	add.w	sl, r4, #25
 800b28a:	68e3      	ldr	r3, [r4, #12]
 800b28c:	6832      	ldr	r2, [r6, #0]
 800b28e:	1a9b      	subs	r3, r3, r2
 800b290:	42ab      	cmp	r3, r5
 800b292:	dc26      	bgt.n	800b2e2 <_printf_common+0x96>
 800b294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b298:	6822      	ldr	r2, [r4, #0]
 800b29a:	3b00      	subs	r3, #0
 800b29c:	bf18      	it	ne
 800b29e:	2301      	movne	r3, #1
 800b2a0:	0692      	lsls	r2, r2, #26
 800b2a2:	d42b      	bmi.n	800b2fc <_printf_common+0xb0>
 800b2a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	47c8      	blx	r9
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d01e      	beq.n	800b2f0 <_printf_common+0xa4>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	6922      	ldr	r2, [r4, #16]
 800b2b6:	f003 0306 	and.w	r3, r3, #6
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	bf02      	ittt	eq
 800b2be:	68e5      	ldreq	r5, [r4, #12]
 800b2c0:	6833      	ldreq	r3, [r6, #0]
 800b2c2:	1aed      	subeq	r5, r5, r3
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	bf0c      	ite	eq
 800b2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2cc:	2500      	movne	r5, #0
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	bfc4      	itt	gt
 800b2d2:	1a9b      	subgt	r3, r3, r2
 800b2d4:	18ed      	addgt	r5, r5, r3
 800b2d6:	2600      	movs	r6, #0
 800b2d8:	341a      	adds	r4, #26
 800b2da:	42b5      	cmp	r5, r6
 800b2dc:	d11a      	bne.n	800b314 <_printf_common+0xc8>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e008      	b.n	800b2f4 <_printf_common+0xa8>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	47c8      	blx	r9
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d103      	bne.n	800b2f8 <_printf_common+0xac>
 800b2f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	e7c6      	b.n	800b28a <_printf_common+0x3e>
 800b2fc:	18e1      	adds	r1, r4, r3
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	2030      	movs	r0, #48	@ 0x30
 800b302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b306:	4422      	add	r2, r4
 800b308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b30c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b310:	3302      	adds	r3, #2
 800b312:	e7c7      	b.n	800b2a4 <_printf_common+0x58>
 800b314:	2301      	movs	r3, #1
 800b316:	4622      	mov	r2, r4
 800b318:	4641      	mov	r1, r8
 800b31a:	4638      	mov	r0, r7
 800b31c:	47c8      	blx	r9
 800b31e:	3001      	adds	r0, #1
 800b320:	d0e6      	beq.n	800b2f0 <_printf_common+0xa4>
 800b322:	3601      	adds	r6, #1
 800b324:	e7d9      	b.n	800b2da <_printf_common+0x8e>
	...

0800b328 <_printf_i>:
 800b328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	7e0f      	ldrb	r7, [r1, #24]
 800b32e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b330:	2f78      	cmp	r7, #120	@ 0x78
 800b332:	4691      	mov	r9, r2
 800b334:	4680      	mov	r8, r0
 800b336:	460c      	mov	r4, r1
 800b338:	469a      	mov	sl, r3
 800b33a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b33e:	d807      	bhi.n	800b350 <_printf_i+0x28>
 800b340:	2f62      	cmp	r7, #98	@ 0x62
 800b342:	d80a      	bhi.n	800b35a <_printf_i+0x32>
 800b344:	2f00      	cmp	r7, #0
 800b346:	f000 80d2 	beq.w	800b4ee <_printf_i+0x1c6>
 800b34a:	2f58      	cmp	r7, #88	@ 0x58
 800b34c:	f000 80b9 	beq.w	800b4c2 <_printf_i+0x19a>
 800b350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b358:	e03a      	b.n	800b3d0 <_printf_i+0xa8>
 800b35a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b35e:	2b15      	cmp	r3, #21
 800b360:	d8f6      	bhi.n	800b350 <_printf_i+0x28>
 800b362:	a101      	add	r1, pc, #4	@ (adr r1, 800b368 <_printf_i+0x40>)
 800b364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3d5 	.word	0x0800b3d5
 800b370:	0800b351 	.word	0x0800b351
 800b374:	0800b351 	.word	0x0800b351
 800b378:	0800b351 	.word	0x0800b351
 800b37c:	0800b351 	.word	0x0800b351
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b351 	.word	0x0800b351
 800b388:	0800b351 	.word	0x0800b351
 800b38c:	0800b351 	.word	0x0800b351
 800b390:	0800b351 	.word	0x0800b351
 800b394:	0800b4d5 	.word	0x0800b4d5
 800b398:	0800b3ff 	.word	0x0800b3ff
 800b39c:	0800b48f 	.word	0x0800b48f
 800b3a0:	0800b351 	.word	0x0800b351
 800b3a4:	0800b351 	.word	0x0800b351
 800b3a8:	0800b4f7 	.word	0x0800b4f7
 800b3ac:	0800b351 	.word	0x0800b351
 800b3b0:	0800b3ff 	.word	0x0800b3ff
 800b3b4:	0800b351 	.word	0x0800b351
 800b3b8:	0800b351 	.word	0x0800b351
 800b3bc:	0800b497 	.word	0x0800b497
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6032      	str	r2, [r6, #0]
 800b3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e09d      	b.n	800b510 <_printf_i+0x1e8>
 800b3d4:	6833      	ldr	r3, [r6, #0]
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	6031      	str	r1, [r6, #0]
 800b3dc:	0606      	lsls	r6, r0, #24
 800b3de:	d501      	bpl.n	800b3e4 <_printf_i+0xbc>
 800b3e0:	681d      	ldr	r5, [r3, #0]
 800b3e2:	e003      	b.n	800b3ec <_printf_i+0xc4>
 800b3e4:	0645      	lsls	r5, r0, #25
 800b3e6:	d5fb      	bpl.n	800b3e0 <_printf_i+0xb8>
 800b3e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	da03      	bge.n	800b3f8 <_printf_i+0xd0>
 800b3f0:	232d      	movs	r3, #45	@ 0x2d
 800b3f2:	426d      	negs	r5, r5
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f8:	4859      	ldr	r0, [pc, #356]	@ (800b560 <_printf_i+0x238>)
 800b3fa:	230a      	movs	r3, #10
 800b3fc:	e011      	b.n	800b422 <_printf_i+0xfa>
 800b3fe:	6821      	ldr	r1, [r4, #0]
 800b400:	6833      	ldr	r3, [r6, #0]
 800b402:	0608      	lsls	r0, r1, #24
 800b404:	f853 5b04 	ldr.w	r5, [r3], #4
 800b408:	d402      	bmi.n	800b410 <_printf_i+0xe8>
 800b40a:	0649      	lsls	r1, r1, #25
 800b40c:	bf48      	it	mi
 800b40e:	b2ad      	uxthmi	r5, r5
 800b410:	2f6f      	cmp	r7, #111	@ 0x6f
 800b412:	4853      	ldr	r0, [pc, #332]	@ (800b560 <_printf_i+0x238>)
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	bf14      	ite	ne
 800b418:	230a      	movne	r3, #10
 800b41a:	2308      	moveq	r3, #8
 800b41c:	2100      	movs	r1, #0
 800b41e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b422:	6866      	ldr	r6, [r4, #4]
 800b424:	60a6      	str	r6, [r4, #8]
 800b426:	2e00      	cmp	r6, #0
 800b428:	bfa2      	ittt	ge
 800b42a:	6821      	ldrge	r1, [r4, #0]
 800b42c:	f021 0104 	bicge.w	r1, r1, #4
 800b430:	6021      	strge	r1, [r4, #0]
 800b432:	b90d      	cbnz	r5, 800b438 <_printf_i+0x110>
 800b434:	2e00      	cmp	r6, #0
 800b436:	d04b      	beq.n	800b4d0 <_printf_i+0x1a8>
 800b438:	4616      	mov	r6, r2
 800b43a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b43e:	fb03 5711 	mls	r7, r3, r1, r5
 800b442:	5dc7      	ldrb	r7, [r0, r7]
 800b444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b448:	462f      	mov	r7, r5
 800b44a:	42bb      	cmp	r3, r7
 800b44c:	460d      	mov	r5, r1
 800b44e:	d9f4      	bls.n	800b43a <_printf_i+0x112>
 800b450:	2b08      	cmp	r3, #8
 800b452:	d10b      	bne.n	800b46c <_printf_i+0x144>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	07df      	lsls	r7, r3, #31
 800b458:	d508      	bpl.n	800b46c <_printf_i+0x144>
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	6861      	ldr	r1, [r4, #4]
 800b45e:	4299      	cmp	r1, r3
 800b460:	bfde      	ittt	le
 800b462:	2330      	movle	r3, #48	@ 0x30
 800b464:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b468:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b46c:	1b92      	subs	r2, r2, r6
 800b46e:	6122      	str	r2, [r4, #16]
 800b470:	f8cd a000 	str.w	sl, [sp]
 800b474:	464b      	mov	r3, r9
 800b476:	aa03      	add	r2, sp, #12
 800b478:	4621      	mov	r1, r4
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7ff fee6 	bl	800b24c <_printf_common>
 800b480:	3001      	adds	r0, #1
 800b482:	d14a      	bne.n	800b51a <_printf_i+0x1f2>
 800b484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b488:	b004      	add	sp, #16
 800b48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	f043 0320 	orr.w	r3, r3, #32
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	4833      	ldr	r0, [pc, #204]	@ (800b564 <_printf_i+0x23c>)
 800b498:	2778      	movs	r7, #120	@ 0x78
 800b49a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	6831      	ldr	r1, [r6, #0]
 800b4a2:	061f      	lsls	r7, r3, #24
 800b4a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4a8:	d402      	bmi.n	800b4b0 <_printf_i+0x188>
 800b4aa:	065f      	lsls	r7, r3, #25
 800b4ac:	bf48      	it	mi
 800b4ae:	b2ad      	uxthmi	r5, r5
 800b4b0:	6031      	str	r1, [r6, #0]
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	bf44      	itt	mi
 800b4b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ba:	6023      	strmi	r3, [r4, #0]
 800b4bc:	b11d      	cbz	r5, 800b4c6 <_printf_i+0x19e>
 800b4be:	2310      	movs	r3, #16
 800b4c0:	e7ac      	b.n	800b41c <_printf_i+0xf4>
 800b4c2:	4827      	ldr	r0, [pc, #156]	@ (800b560 <_printf_i+0x238>)
 800b4c4:	e7e9      	b.n	800b49a <_printf_i+0x172>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	f023 0320 	bic.w	r3, r3, #32
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	e7f6      	b.n	800b4be <_printf_i+0x196>
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	e7bd      	b.n	800b450 <_printf_i+0x128>
 800b4d4:	6833      	ldr	r3, [r6, #0]
 800b4d6:	6825      	ldr	r5, [r4, #0]
 800b4d8:	6961      	ldr	r1, [r4, #20]
 800b4da:	1d18      	adds	r0, r3, #4
 800b4dc:	6030      	str	r0, [r6, #0]
 800b4de:	062e      	lsls	r6, r5, #24
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	d501      	bpl.n	800b4e8 <_printf_i+0x1c0>
 800b4e4:	6019      	str	r1, [r3, #0]
 800b4e6:	e002      	b.n	800b4ee <_printf_i+0x1c6>
 800b4e8:	0668      	lsls	r0, r5, #25
 800b4ea:	d5fb      	bpl.n	800b4e4 <_printf_i+0x1bc>
 800b4ec:	8019      	strh	r1, [r3, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	4616      	mov	r6, r2
 800b4f4:	e7bc      	b.n	800b470 <_printf_i+0x148>
 800b4f6:	6833      	ldr	r3, [r6, #0]
 800b4f8:	1d1a      	adds	r2, r3, #4
 800b4fa:	6032      	str	r2, [r6, #0]
 800b4fc:	681e      	ldr	r6, [r3, #0]
 800b4fe:	6862      	ldr	r2, [r4, #4]
 800b500:	2100      	movs	r1, #0
 800b502:	4630      	mov	r0, r6
 800b504:	f7f4 feec 	bl	80002e0 <memchr>
 800b508:	b108      	cbz	r0, 800b50e <_printf_i+0x1e6>
 800b50a:	1b80      	subs	r0, r0, r6
 800b50c:	6060      	str	r0, [r4, #4]
 800b50e:	6863      	ldr	r3, [r4, #4]
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	2300      	movs	r3, #0
 800b514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b518:	e7aa      	b.n	800b470 <_printf_i+0x148>
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	4632      	mov	r2, r6
 800b51e:	4649      	mov	r1, r9
 800b520:	4640      	mov	r0, r8
 800b522:	47d0      	blx	sl
 800b524:	3001      	adds	r0, #1
 800b526:	d0ad      	beq.n	800b484 <_printf_i+0x15c>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	079b      	lsls	r3, r3, #30
 800b52c:	d413      	bmi.n	800b556 <_printf_i+0x22e>
 800b52e:	68e0      	ldr	r0, [r4, #12]
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	4298      	cmp	r0, r3
 800b534:	bfb8      	it	lt
 800b536:	4618      	movlt	r0, r3
 800b538:	e7a6      	b.n	800b488 <_printf_i+0x160>
 800b53a:	2301      	movs	r3, #1
 800b53c:	4632      	mov	r2, r6
 800b53e:	4649      	mov	r1, r9
 800b540:	4640      	mov	r0, r8
 800b542:	47d0      	blx	sl
 800b544:	3001      	adds	r0, #1
 800b546:	d09d      	beq.n	800b484 <_printf_i+0x15c>
 800b548:	3501      	adds	r5, #1
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	9903      	ldr	r1, [sp, #12]
 800b54e:	1a5b      	subs	r3, r3, r1
 800b550:	42ab      	cmp	r3, r5
 800b552:	dcf2      	bgt.n	800b53a <_printf_i+0x212>
 800b554:	e7eb      	b.n	800b52e <_printf_i+0x206>
 800b556:	2500      	movs	r5, #0
 800b558:	f104 0619 	add.w	r6, r4, #25
 800b55c:	e7f5      	b.n	800b54a <_printf_i+0x222>
 800b55e:	bf00      	nop
 800b560:	0800b7a9 	.word	0x0800b7a9
 800b564:	0800b7ba 	.word	0x0800b7ba

0800b568 <__malloc_lock>:
 800b568:	4801      	ldr	r0, [pc, #4]	@ (800b570 <__malloc_lock+0x8>)
 800b56a:	f7ff bc73 	b.w	800ae54 <__retarget_lock_acquire_recursive>
 800b56e:	bf00      	nop
 800b570:	240006e8 	.word	0x240006e8

0800b574 <__malloc_unlock>:
 800b574:	4801      	ldr	r0, [pc, #4]	@ (800b57c <__malloc_unlock+0x8>)
 800b576:	f7ff bc6e 	b.w	800ae56 <__retarget_lock_release_recursive>
 800b57a:	bf00      	nop
 800b57c:	240006e8 	.word	0x240006e8

0800b580 <_realloc_r>:
 800b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b584:	4680      	mov	r8, r0
 800b586:	4615      	mov	r5, r2
 800b588:	460c      	mov	r4, r1
 800b58a:	b921      	cbnz	r1, 800b596 <_realloc_r+0x16>
 800b58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b590:	4611      	mov	r1, r2
 800b592:	f7ff bddb 	b.w	800b14c <_malloc_r>
 800b596:	b92a      	cbnz	r2, 800b5a4 <_realloc_r+0x24>
 800b598:	f000 f858 	bl	800b64c <_free_r>
 800b59c:	2400      	movs	r4, #0
 800b59e:	4620      	mov	r0, r4
 800b5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a4:	f000 f89c 	bl	800b6e0 <_malloc_usable_size_r>
 800b5a8:	4285      	cmp	r5, r0
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	d802      	bhi.n	800b5b4 <_realloc_r+0x34>
 800b5ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b5b2:	d8f4      	bhi.n	800b59e <_realloc_r+0x1e>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	f7ff fdc8 	bl	800b14c <_malloc_r>
 800b5bc:	4607      	mov	r7, r0
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d0ec      	beq.n	800b59c <_realloc_r+0x1c>
 800b5c2:	42b5      	cmp	r5, r6
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	bf28      	it	cs
 800b5ca:	4632      	movcs	r2, r6
 800b5cc:	f000 f830 	bl	800b630 <memcpy>
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	f000 f83a 	bl	800b64c <_free_r>
 800b5d8:	463c      	mov	r4, r7
 800b5da:	e7e0      	b.n	800b59e <_realloc_r+0x1e>

0800b5dc <memmove>:
 800b5dc:	4288      	cmp	r0, r1
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	eb01 0402 	add.w	r4, r1, r2
 800b5e4:	d902      	bls.n	800b5ec <memmove+0x10>
 800b5e6:	4284      	cmp	r4, r0
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	d807      	bhi.n	800b5fc <memmove+0x20>
 800b5ec:	1e43      	subs	r3, r0, #1
 800b5ee:	42a1      	cmp	r1, r4
 800b5f0:	d008      	beq.n	800b604 <memmove+0x28>
 800b5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5fa:	e7f8      	b.n	800b5ee <memmove+0x12>
 800b5fc:	4402      	add	r2, r0
 800b5fe:	4601      	mov	r1, r0
 800b600:	428a      	cmp	r2, r1
 800b602:	d100      	bne.n	800b606 <memmove+0x2a>
 800b604:	bd10      	pop	{r4, pc}
 800b606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b60e:	e7f7      	b.n	800b600 <memmove+0x24>

0800b610 <_sbrk_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d06      	ldr	r5, [pc, #24]	@ (800b62c <_sbrk_r+0x1c>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	f7f7 f848 	bl	80026b0 <_sbrk>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_sbrk_r+0x1a>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_sbrk_r+0x1a>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	240006f4 	.word	0x240006f4

0800b630 <memcpy>:
 800b630:	440a      	add	r2, r1
 800b632:	4291      	cmp	r1, r2
 800b634:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b638:	d100      	bne.n	800b63c <memcpy+0xc>
 800b63a:	4770      	bx	lr
 800b63c:	b510      	push	{r4, lr}
 800b63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b642:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b646:	4291      	cmp	r1, r2
 800b648:	d1f9      	bne.n	800b63e <memcpy+0xe>
 800b64a:	bd10      	pop	{r4, pc}

0800b64c <_free_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4605      	mov	r5, r0
 800b650:	2900      	cmp	r1, #0
 800b652:	d041      	beq.n	800b6d8 <_free_r+0x8c>
 800b654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b658:	1f0c      	subs	r4, r1, #4
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	bfb8      	it	lt
 800b65e:	18e4      	addlt	r4, r4, r3
 800b660:	f7ff ff82 	bl	800b568 <__malloc_lock>
 800b664:	4a1d      	ldr	r2, [pc, #116]	@ (800b6dc <_free_r+0x90>)
 800b666:	6813      	ldr	r3, [r2, #0]
 800b668:	b933      	cbnz	r3, 800b678 <_free_r+0x2c>
 800b66a:	6063      	str	r3, [r4, #4]
 800b66c:	6014      	str	r4, [r2, #0]
 800b66e:	4628      	mov	r0, r5
 800b670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b674:	f7ff bf7e 	b.w	800b574 <__malloc_unlock>
 800b678:	42a3      	cmp	r3, r4
 800b67a:	d908      	bls.n	800b68e <_free_r+0x42>
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	1821      	adds	r1, r4, r0
 800b680:	428b      	cmp	r3, r1
 800b682:	bf01      	itttt	eq
 800b684:	6819      	ldreq	r1, [r3, #0]
 800b686:	685b      	ldreq	r3, [r3, #4]
 800b688:	1809      	addeq	r1, r1, r0
 800b68a:	6021      	streq	r1, [r4, #0]
 800b68c:	e7ed      	b.n	800b66a <_free_r+0x1e>
 800b68e:	461a      	mov	r2, r3
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	b10b      	cbz	r3, 800b698 <_free_r+0x4c>
 800b694:	42a3      	cmp	r3, r4
 800b696:	d9fa      	bls.n	800b68e <_free_r+0x42>
 800b698:	6811      	ldr	r1, [r2, #0]
 800b69a:	1850      	adds	r0, r2, r1
 800b69c:	42a0      	cmp	r0, r4
 800b69e:	d10b      	bne.n	800b6b8 <_free_r+0x6c>
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	4401      	add	r1, r0
 800b6a4:	1850      	adds	r0, r2, r1
 800b6a6:	4283      	cmp	r3, r0
 800b6a8:	6011      	str	r1, [r2, #0]
 800b6aa:	d1e0      	bne.n	800b66e <_free_r+0x22>
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	6053      	str	r3, [r2, #4]
 800b6b2:	4408      	add	r0, r1
 800b6b4:	6010      	str	r0, [r2, #0]
 800b6b6:	e7da      	b.n	800b66e <_free_r+0x22>
 800b6b8:	d902      	bls.n	800b6c0 <_free_r+0x74>
 800b6ba:	230c      	movs	r3, #12
 800b6bc:	602b      	str	r3, [r5, #0]
 800b6be:	e7d6      	b.n	800b66e <_free_r+0x22>
 800b6c0:	6820      	ldr	r0, [r4, #0]
 800b6c2:	1821      	adds	r1, r4, r0
 800b6c4:	428b      	cmp	r3, r1
 800b6c6:	bf04      	itt	eq
 800b6c8:	6819      	ldreq	r1, [r3, #0]
 800b6ca:	685b      	ldreq	r3, [r3, #4]
 800b6cc:	6063      	str	r3, [r4, #4]
 800b6ce:	bf04      	itt	eq
 800b6d0:	1809      	addeq	r1, r1, r0
 800b6d2:	6021      	streq	r1, [r4, #0]
 800b6d4:	6054      	str	r4, [r2, #4]
 800b6d6:	e7ca      	b.n	800b66e <_free_r+0x22>
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	bf00      	nop
 800b6dc:	240006f0 	.word	0x240006f0

0800b6e0 <_malloc_usable_size_r>:
 800b6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6e4:	1f18      	subs	r0, r3, #4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bfbc      	itt	lt
 800b6ea:	580b      	ldrlt	r3, [r1, r0]
 800b6ec:	18c0      	addlt	r0, r0, r3
 800b6ee:	4770      	bx	lr

0800b6f0 <_init>:
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	bf00      	nop
 800b6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6f6:	bc08      	pop	{r3}
 800b6f8:	469e      	mov	lr, r3
 800b6fa:	4770      	bx	lr

0800b6fc <_fini>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	bf00      	nop
 800b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b702:	bc08      	pop	{r3}
 800b704:	469e      	mov	lr, r3
 800b706:	4770      	bx	lr
