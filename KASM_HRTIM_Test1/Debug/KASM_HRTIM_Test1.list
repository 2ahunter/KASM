
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08009180  08009180  0000a180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800936c  0800936c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  08009370  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002388  24000018  08009384  0000b018  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240023a0  08009384  0000b3a0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001511d  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002287  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012e0  00000000  00000000  000223e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ecc  00000000  00000000  000236c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003813e  00000000  00000000  00024594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000153c3  00000000  00000000  0005c6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017387d  00000000  00000000  00071a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e5312  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005338  00000000  00000000  001e5358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  001ea690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009168 	.word	0x08009168

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08009168 	.word	0x08009168

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002dc:	f001 fc46 	bl	8001b6c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f002 fa0e 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f93a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f001 f8f8 	bl	80014dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80002ec:	f000 fbe6 	bl	8000abc <MX_TIM1_Init>
  MX_TIM2_Init();
 80002f0:	f000 fcb4 	bl	8000c5c <MX_TIM2_Init>
  MX_TIM4_Init();
 80002f4:	f000 fd0c 	bl	8000d10 <MX_TIM4_Init>
  MX_TIM5_Init();
 80002f8:	f000 fda2 	bl	8000e40 <MX_TIM5_Init>
  MX_TIM8_Init();
 80002fc:	f000 fe22 	bl	8000f44 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000300:	f000 feae 	bl	8001060 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000304:	f000 ff24 	bl	8001150 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000308:	f000 ff70 	bl	80011ec <MX_TIM14_Init>
  MX_TIM15_Init();
 800030c:	f000 ffbc 	bl	8001288 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000310:	f001 f86a 	bl	80013e8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 8000314:	f000 f9d0 	bl	80006b8 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 8000318:	f000 fba4 	bl	8000a64 <MX_LPTIM1_Init>


  //Timer 1
  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim1);
 800031c:	487c      	ldr	r0, [pc, #496]	@ (8000510 <main+0x238>)
 800031e:	f006 fea7 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000322:	2100      	movs	r1, #0
 8000324:	487a      	ldr	r0, [pc, #488]	@ (8000510 <main+0x238>)
 8000326:	f006 ff73 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800032a:	2104      	movs	r1, #4
 800032c:	4878      	ldr	r0, [pc, #480]	@ (8000510 <main+0x238>)
 800032e:	f006 ff6f 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000332:	2108      	movs	r1, #8
 8000334:	4876      	ldr	r0, [pc, #472]	@ (8000510 <main+0x238>)
 8000336:	f006 ff6b 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800033a:	210c      	movs	r1, #12
 800033c:	4874      	ldr	r0, [pc, #464]	@ (8000510 <main+0x238>)
 800033e:	f006 ff67 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	4873      	ldr	r0, [pc, #460]	@ (8000514 <main+0x23c>)
 8000348:	f002 fdb0 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	4870      	ldr	r0, [pc, #448]	@ (8000514 <main+0x23c>)
 8000352:	f002 fdab 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2104      	movs	r1, #4
 800035a:	486e      	ldr	r0, [pc, #440]	@ (8000514 <main+0x23c>)
 800035c:	f002 fda6 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	486b      	ldr	r0, [pc, #428]	@ (8000514 <main+0x23c>)
 8000366:	f002 fda1 	bl	8002eac <HAL_GPIO_WritePin>

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
  	  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2110      	movs	r1, #16
 800036e:	486a      	ldr	r0, [pc, #424]	@ (8000518 <main+0x240>)
 8000370:	f002 fd9c 	bl	8002eac <HAL_GPIO_WritePin>


  //Timer 2
  	//HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim2);
 8000374:	4869      	ldr	r0, [pc, #420]	@ (800051c <main+0x244>)
 8000376:	f006 fe7b 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800037a:	2100      	movs	r1, #0
 800037c:	4867      	ldr	r0, [pc, #412]	@ (800051c <main+0x244>)
 800037e:	f006 ff47 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	4863      	ldr	r0, [pc, #396]	@ (8000514 <main+0x23c>)
 8000388:	f002 fd90 	bl	8002eac <HAL_GPIO_WritePin>


  //Timer 4
  	//HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim4);
 800038c:	4864      	ldr	r0, [pc, #400]	@ (8000520 <main+0x248>)
 800038e:	f006 fe6f 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000392:	2100      	movs	r1, #0
 8000394:	4862      	ldr	r0, [pc, #392]	@ (8000520 <main+0x248>)
 8000396:	f006 ff3b 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800039a:	2104      	movs	r1, #4
 800039c:	4860      	ldr	r0, [pc, #384]	@ (8000520 <main+0x248>)
 800039e:	f006 ff37 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80003a2:	2108      	movs	r1, #8
 80003a4:	485e      	ldr	r0, [pc, #376]	@ (8000520 <main+0x248>)
 80003a6:	f006 ff33 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80003aa:	210c      	movs	r1, #12
 80003ac:	485c      	ldr	r0, [pc, #368]	@ (8000520 <main+0x248>)
 80003ae:	f006 ff2f 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003b8:	4857      	ldr	r0, [pc, #348]	@ (8000518 <main+0x240>)
 80003ba:	f002 fd77 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003c4:	4854      	ldr	r0, [pc, #336]	@ (8000518 <main+0x240>)
 80003c6:	f002 fd71 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003d0:	4854      	ldr	r0, [pc, #336]	@ (8000524 <main+0x24c>)
 80003d2:	f002 fd6b 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	4851      	ldr	r0, [pc, #324]	@ (8000524 <main+0x24c>)
 80003de:	f002 fd65 	bl	8002eac <HAL_GPIO_WritePin>


  //Timer 5
  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim5);
 80003e2:	4851      	ldr	r0, [pc, #324]	@ (8000528 <main+0x250>)
 80003e4:	f006 fe44 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80003e8:	2104      	movs	r1, #4
 80003ea:	484f      	ldr	r0, [pc, #316]	@ (8000528 <main+0x250>)
 80003ec:	f006 ff10 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80003f0:	2108      	movs	r1, #8
 80003f2:	484d      	ldr	r0, [pc, #308]	@ (8000528 <main+0x250>)
 80003f4:	f006 ff0c 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003fe:	4849      	ldr	r0, [pc, #292]	@ (8000524 <main+0x24c>)
 8000400:	f002 fd54 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800040a:	4846      	ldr	r0, [pc, #280]	@ (8000524 <main+0x24c>)
 800040c:	f002 fd4e 	bl	8002eac <HAL_GPIO_WritePin>


  //Timer 8
  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim8);
 8000410:	4846      	ldr	r0, [pc, #280]	@ (800052c <main+0x254>)
 8000412:	f006 fe2d 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000416:	210c      	movs	r1, #12
 8000418:	4844      	ldr	r0, [pc, #272]	@ (800052c <main+0x254>)
 800041a:	f006 fef9 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2180      	movs	r1, #128	@ 0x80
 8000422:	483c      	ldr	r0, [pc, #240]	@ (8000514 <main+0x23c>)
 8000424:	f002 fd42 	bl	8002eac <HAL_GPIO_WritePin>


  //Timer 12
  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim12);
 8000428:	4841      	ldr	r0, [pc, #260]	@ (8000530 <main+0x258>)
 800042a:	f006 fe21 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800042e:	2104      	movs	r1, #4
 8000430:	483f      	ldr	r0, [pc, #252]	@ (8000530 <main+0x258>)
 8000432:	f006 feed 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800043c:	4835      	ldr	r0, [pc, #212]	@ (8000514 <main+0x23c>)
 800043e:	f002 fd35 	bl	8002eac <HAL_GPIO_WritePin>


  //Timer 13
  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim13);
 8000442:	483c      	ldr	r0, [pc, #240]	@ (8000534 <main+0x25c>)
 8000444:	f006 fe14 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000448:	2100      	movs	r1, #0
 800044a:	483a      	ldr	r0, [pc, #232]	@ (8000534 <main+0x25c>)
 800044c:	f006 fee0 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000456:	482f      	ldr	r0, [pc, #188]	@ (8000514 <main+0x23c>)
 8000458:	f002 fd28 	bl	8002eac <HAL_GPIO_WritePin>

  //Timer 14

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim14);
 800045c:	4836      	ldr	r0, [pc, #216]	@ (8000538 <main+0x260>)
 800045e:	f006 fe07 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000462:	2100      	movs	r1, #0
 8000464:	4834      	ldr	r0, [pc, #208]	@ (8000538 <main+0x260>)
 8000466:	f006 fed3 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000470:	4828      	ldr	r0, [pc, #160]	@ (8000514 <main+0x23c>)
 8000472:	f002 fd1b 	bl	8002eac <HAL_GPIO_WritePin>

  //Timer 15

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim15);
 8000476:	4831      	ldr	r0, [pc, #196]	@ (800053c <main+0x264>)
 8000478:	f006 fdfa 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800047c:	2100      	movs	r1, #0
 800047e:	482f      	ldr	r0, [pc, #188]	@ (800053c <main+0x264>)
 8000480:	f006 fec6 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000484:	2104      	movs	r1, #4
 8000486:	482d      	ldr	r0, [pc, #180]	@ (800053c <main+0x264>)
 8000488:	f006 fec2 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000492:	4820      	ldr	r0, [pc, #128]	@ (8000514 <main+0x23c>)
 8000494:	f002 fd0a 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	4828      	ldr	r0, [pc, #160]	@ (8000540 <main+0x268>)
 800049e:	f002 fd05 	bl	8002eac <HAL_GPIO_WritePin>

  //Timer 16

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim16);
 80004a2:	4828      	ldr	r0, [pc, #160]	@ (8000544 <main+0x26c>)
 80004a4:	f006 fde4 	bl	8007070 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004a8:	2100      	movs	r1, #0
 80004aa:	4826      	ldr	r0, [pc, #152]	@ (8000544 <main+0x26c>)
 80004ac:	f006 feb0 	bl	8007210 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2102      	movs	r1, #2
 80004b4:	4822      	ldr	r0, [pc, #136]	@ (8000540 <main+0x268>)
 80004b6:	f002 fcf9 	bl	8002eac <HAL_GPIO_WritePin>
  //HRTIM CODE GOES HERE ********

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 80004ba:	4b23      	ldr	r3, [pc, #140]	@ (8000548 <main+0x270>)
 80004bc:	22ff      	movs	r2, #255	@ 0xff
 80004be:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 80004c2:	4b21      	ldr	r3, [pc, #132]	@ (8000548 <main+0x270>)
 80004c4:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 80004c8:	601a      	str	r2, [r3, #0]

  //Low-Power Timer

      //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 80004ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004ce:	481f      	ldr	r0, [pc, #124]	@ (800054c <main+0x274>)
 80004d0:	f003 feeb 	bl	80042aa <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 80004d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004dc:	481b      	ldr	r0, [pc, #108]	@ (800054c <main+0x274>)
 80004de:	f003 fe97 	bl	8004210 <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2104      	movs	r1, #4
 80004e6:	4816      	ldr	r0, [pc, #88]	@ (8000540 <main+0x268>)
 80004e8:	f002 fce0 	bl	8002eac <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <main+0x278>)
 80004ee:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80004f2:	619a      	str	r2, [r3, #24]
  //End Low Power Timer




   gen_sine();
 80004f4:	f001 fb04 	bl	8001b00 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <main+0x27c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d1fb      	bne.n	80004f8 <main+0x220>
 8000500:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <main+0x280>)
 8000502:	ed93 7b00 	vldr	d7, [r3]
 8000506:	eeb0 0b47 	vmov.f64	d0, d7
 800050a:	f001 f905 	bl	8001718 <control_update>
 800050e:	e7f3      	b.n	80004f8 <main+0x220>
 8000510:	24000148 	.word	0x24000148
 8000514:	58021000 	.word	0x58021000
 8000518:	58020400 	.word	0x58020400
 800051c:	24000194 	.word	0x24000194
 8000520:	240001e0 	.word	0x240001e0
 8000524:	58020800 	.word	0x58020800
 8000528:	2400022c 	.word	0x2400022c
 800052c:	24000278 	.word	0x24000278
 8000530:	240002c4 	.word	0x240002c4
 8000534:	24000310 	.word	0x24000310
 8000538:	2400035c 	.word	0x2400035c
 800053c:	240003a8 	.word	0x240003a8
 8000540:	58020c00 	.word	0x58020c00
 8000544:	240003f4 	.word	0x240003f4
 8000548:	40017400 	.word	0x40017400
 800054c:	24000110 	.word	0x24000110
 8000550:	40002400 	.word	0x40002400
 8000554:	24000440 	.word	0x24000440
 8000558:	24000448 	.word	0x24000448

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09e      	sub	sp, #120	@ 0x78
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000566:	224c      	movs	r2, #76	@ 0x4c
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f008 f804 	bl	8008578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2220      	movs	r2, #32
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f007 fffd 	bl	8008578 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800057e:	2002      	movs	r0, #2
 8000580:	f004 f9ec 	bl	800495c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b48      	ldr	r3, [pc, #288]	@ (80006ac <SystemClock_Config+0x150>)
 800058a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800058c:	4a47      	ldr	r2, [pc, #284]	@ (80006ac <SystemClock_Config+0x150>)
 800058e:	f023 0301 	bic.w	r3, r3, #1
 8000592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000594:	4b45      	ldr	r3, [pc, #276]	@ (80006ac <SystemClock_Config+0x150>)
 8000596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b44      	ldr	r3, [pc, #272]	@ (80006b0 <SystemClock_Config+0x154>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a43      	ldr	r2, [pc, #268]	@ (80006b0 <SystemClock_Config+0x154>)
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b41      	ldr	r3, [pc, #260]	@ (80006b0 <SystemClock_Config+0x154>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b6:	bf00      	nop
 80005b8:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <SystemClock_Config+0x154>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005c4:	d1f8      	bne.n	80005b8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b3b      	ldr	r3, [pc, #236]	@ (80006b4 <SystemClock_Config+0x158>)
 80005c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005cc:	4a39      	ldr	r2, [pc, #228]	@ (80006b4 <SystemClock_Config+0x158>)
 80005ce:	f043 0302 	orr.w	r3, r3, #2
 80005d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80005d6:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <SystemClock_Config+0x158>)
 80005d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005dc:	f003 0302 	and.w	r3, r3, #2
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b31      	ldr	r3, [pc, #196]	@ (80006b0 <SystemClock_Config+0x154>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a30      	ldr	r2, [pc, #192]	@ (80006b0 <SystemClock_Config+0x154>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b2e      	ldr	r3, [pc, #184]	@ (80006b0 <SystemClock_Config+0x154>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <SystemClock_Config+0x150>)
 8000600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000602:	4a2a      	ldr	r2, [pc, #168]	@ (80006ac <SystemClock_Config+0x150>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800060a:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <SystemClock_Config+0x150>)
 800060c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000616:	bf00      	nop
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <SystemClock_Config+0x154>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000624:	d1f8      	bne.n	8000618 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	2302      	movs	r3, #2
 8000636:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800063c:	2350      	movs	r3, #80	@ 0x50
 800063e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800064c:	230c      	movs	r3, #12
 800064e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000650:	2300      	movs	r3, #0
 8000652:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800065c:	4618      	mov	r0, r3
 800065e:	f004 f9b7 	bl	80049d0 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000668:	f001 faac 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	233f      	movs	r3, #63	@ 0x3f
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2303      	movs	r3, #3
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000678:	2308      	movs	r3, #8
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800067c:	2340      	movs	r3, #64	@ 0x40
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000680:	2340      	movs	r3, #64	@ 0x40
 8000682:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800068a:	2340      	movs	r3, #64	@ 0x40
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fdf5 	bl	8005284 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80006a0:	f001 fa90 	bl	8001bc4 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3778      	adds	r7, #120	@ 0x78
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	58000400 	.word	0x58000400
 80006b0:	58024800 	.word	0x58024800
 80006b4:	58024400 	.word	0x58024400

080006b8 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0aa      	sub	sp, #168	@ 0xa8
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80006be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80006ce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80006dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006e0:	2254      	movs	r2, #84	@ 0x54
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f007 ff47 	bl	8008578 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80006ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2220      	movs	r2, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f007 ff3b 	bl	8008578 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000702:	4bc4      	ldr	r3, [pc, #784]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000704:	4ac4      	ldr	r2, [pc, #784]	@ (8000a18 <MX_HRTIM_Init+0x360>)
 8000706:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000708:	4bc2      	ldr	r3, [pc, #776]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800070e:	4bc1      	ldr	r3, [pc, #772]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000714:	48bf      	ldr	r0, [pc, #764]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000716:	f002 fbe3 	bl	8002ee0 <HAL_HRTIM_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000720:	f001 fa50 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	48bb      	ldr	r0, [pc, #748]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000728:	f002 fd01 	bl	800312e <HAL_HRTIM_EventPrescalerConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000732:	f001 fa47 	bl	8001bc4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000742:	2308      	movs	r3, #8
 8000744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 800074e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000752:	461a      	mov	r2, r3
 8000754:	2101      	movs	r1, #1
 8000756:	48af      	ldr	r0, [pc, #700]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000758:	f002 fcba 	bl	80030d0 <HAL_HRTIM_EventConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000762:	f001 fa2f 	bl	8001bc4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000766:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 800076a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000774:	2305      	movs	r3, #5
 8000776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800077a:	2308      	movs	r3, #8
 800077c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000780:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000784:	461a      	mov	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	48a2      	ldr	r0, [pc, #648]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 800078a:	f002 fc79 	bl	8003080 <HAL_HRTIM_TimeBaseConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000794:	f001 fa16 	bl	8001bc4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80007ac:	2300      	movs	r3, #0
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80007b0:	2300      	movs	r3, #0
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80007bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007c0:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80007ca:	2300      	movs	r3, #0
 80007cc:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80007ce:	2300      	movs	r3, #0
 80007d0:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80007da:	2300      	movs	r3, #0
 80007dc:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80007de:	2300      	movs	r3, #0
 80007e0:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 80007e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80007ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80007f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80007f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007f8:	461a      	mov	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	4885      	ldr	r0, [pc, #532]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80007fe:	f002 fccf 	bl	80031a0 <HAL_HRTIM_WaveformTimerConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000808:	f001 f9dc 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800080c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000810:	461a      	mov	r2, r3
 8000812:	2101      	movs	r1, #1
 8000814:	487f      	ldr	r0, [pc, #508]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000816:	f002 fcc3 	bl	80031a0 <HAL_HRTIM_WaveformTimerConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000820:	f001 f9d0 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000824:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000828:	461a      	mov	r2, r3
 800082a:	2102      	movs	r1, #2
 800082c:	4879      	ldr	r0, [pc, #484]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 800082e:	f002 fcb7 	bl	80031a0 <HAL_HRTIM_WaveformTimerConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000838:	f001 f9c4 	bl	8001bc4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800083c:	2300      	movs	r3, #0
 800083e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000844:	461a      	mov	r2, r3
 8000846:	2103      	movs	r1, #3
 8000848:	4872      	ldr	r0, [pc, #456]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 800084a:	f002 fca9 	bl	80031a0 <HAL_HRTIM_WaveformTimerConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000854:	f001 f9b6 	bl	8001bc4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000858:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	2201      	movs	r2, #1
 8000864:	2100      	movs	r1, #0
 8000866:	486b      	ldr	r0, [pc, #428]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000868:	f002 fd0c 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000872:	f001 f9a7 	bl	8001bc4 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	2202      	movs	r2, #2
 8000884:	2100      	movs	r1, #0
 8000886:	4863      	ldr	r0, [pc, #396]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000888:	f002 fcfc 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000892:	f001 f997 	bl	8001bc4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089a:	2202      	movs	r2, #2
 800089c:	2101      	movs	r1, #1
 800089e:	485d      	ldr	r0, [pc, #372]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80008a0:	f002 fcf0 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 80008aa:	f001 f98b 	bl	8001bc4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	2202      	movs	r2, #2
 80008b4:	2102      	movs	r1, #2
 80008b6:	4857      	ldr	r0, [pc, #348]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80008b8:	f002 fce4 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 80008c2:	f001 f97f 	bl	8001bc4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	2202      	movs	r2, #2
 80008cc:	2103      	movs	r1, #3
 80008ce:	4851      	ldr	r0, [pc, #324]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80008d0:	f002 fcd8 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 80008da:	f001 f973 	bl	8001bc4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 80008e2:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_HRTIM_Init+0x364>)
 80008e4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80008e6:	2308      	movs	r3, #8
 80008e8:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2201      	movs	r2, #1
 8000902:	2100      	movs	r1, #0
 8000904:	4843      	ldr	r0, [pc, #268]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000906:	f002 fe2b 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000910:	f001 f958 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2204      	movs	r2, #4
 8000918:	2101      	movs	r1, #1
 800091a:	483e      	ldr	r0, [pc, #248]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 800091c:	f002 fe20 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000926:	f001 f94d 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2210      	movs	r2, #16
 800092e:	2102      	movs	r1, #2
 8000930:	4838      	ldr	r0, [pc, #224]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000932:	f002 fe15 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 800093c:	f001 f942 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2240      	movs	r2, #64	@ 0x40
 8000944:	2103      	movs	r1, #3
 8000946:	4833      	ldr	r0, [pc, #204]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000948:	f002 fe0a 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000952:	f001 f937 	bl	8001bc4 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000956:	2310      	movs	r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2202      	movs	r2, #2
 800095e:	2100      	movs	r1, #0
 8000960:	482c      	ldr	r0, [pc, #176]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000962:	f002 fdfd 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 800096c:	f001 f92a 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2208      	movs	r2, #8
 8000974:	2101      	movs	r1, #1
 8000976:	4827      	ldr	r0, [pc, #156]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000978:	f002 fdf2 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000982:	f001 f91f 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2220      	movs	r2, #32
 800098a:	2102      	movs	r1, #2
 800098c:	4821      	ldr	r0, [pc, #132]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 800098e:	f002 fde7 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000998:	f001 f914 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	2103      	movs	r1, #3
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80009a4:	f002 fddc 	bl	8003560 <HAL_HRTIM_WaveformOutputConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 80009ae:	f001 f909 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80009b2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80009b6:	461a      	mov	r2, r3
 80009b8:	2101      	movs	r1, #1
 80009ba:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80009bc:	f002 fb60 	bl	8003080 <HAL_HRTIM_TimeBaseConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 80009c6:	f001 f8fd 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	2201      	movs	r2, #1
 80009d0:	2101      	movs	r1, #1
 80009d2:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80009d4:	f002 fc56 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 80009de:	f001 f8f1 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 80009e2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80009e6:	461a      	mov	r2, r3
 80009e8:	2102      	movs	r1, #2
 80009ea:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 80009ec:	f002 fb48 	bl	8003080 <HAL_HRTIM_TimeBaseConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 80009f6:	f001 f8e5 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80009fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fe:	2201      	movs	r2, #1
 8000a00:	2102      	movs	r1, #2
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_HRTIM_Init+0x35c>)
 8000a04:	f002 fc3e 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000a0e:	f001 f8d9 	bl	8001bc4 <Error_Handler>
 8000a12:	e005      	b.n	8000a20 <MX_HRTIM_Init+0x368>
 8000a14:	24000034 	.word	0x24000034
 8000a18:	40017400 	.word	0x40017400
 8000a1c:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000a20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a24:	461a      	mov	r2, r3
 8000a26:	2103      	movs	r1, #3
 8000a28:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <MX_HRTIM_Init+0x3a8>)
 8000a2a:	f002 fb29 	bl	8003080 <HAL_HRTIM_TimeBaseConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000a34:	f001 f8c6 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2103      	movs	r1, #3
 8000a40:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <MX_HRTIM_Init+0x3a8>)
 8000a42:	f002 fc1f 	bl	8003284 <HAL_HRTIM_WaveformCompareConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000a4c:	f001 f8ba 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000a50:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <MX_HRTIM_Init+0x3a8>)
 8000a52:	f001 f911 	bl	8001c78 <HAL_HRTIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	37a8      	adds	r7, #168	@ 0xa8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000034 	.word	0x24000034

08000a64 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <MX_LPTIM1_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a80:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_LPTIM1_Init+0x50>)
 8000aa2:	f003 fb05 	bl	80040b0 <HAL_LPTIM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f001 f88a 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000110 	.word	0x24000110
 8000ab8:	40002400 	.word	0x40002400

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09a      	sub	sp, #104	@ 0x68
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000adc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	222c      	movs	r2, #44	@ 0x2c
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 fd3e 	bl	8008578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afc:	4b55      	ldr	r3, [pc, #340]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000afe:	4a56      	ldr	r2, [pc, #344]	@ (8000c58 <MX_TIM1_Init+0x19c>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b02:	4b54      	ldr	r3, [pc, #336]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b52      	ldr	r3, [pc, #328]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000b0e:	4b51      	ldr	r3, [pc, #324]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b10:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b4f      	ldr	r3, [pc, #316]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b22:	4b4c      	ldr	r3, [pc, #304]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b24:	2280      	movs	r2, #128	@ 0x80
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b28:	484a      	ldr	r0, [pc, #296]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b2a:	f006 fa49 	bl	8006fc0 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f001 f846 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b42:	4619      	mov	r1, r3
 8000b44:	4843      	ldr	r0, [pc, #268]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b46:	f006 fe8d 	bl	8007864 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b50:	f001 f838 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b54:	483f      	ldr	r0, [pc, #252]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b56:	f006 fb03 	bl	8007160 <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b60:	f001 f830 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b64:	2320      	movs	r3, #32
 8000b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4837      	ldr	r0, [pc, #220]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000b78:	f007 fbd4 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b82:	f001 f81f 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	@ 0x60
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482a      	ldr	r0, [pc, #168]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000bac:	f006 fd46 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000bb6:	f001 f805 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4824      	ldr	r0, [pc, #144]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000bc4:	f006 fd3a 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bce:	f000 fff9 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481e      	ldr	r0, [pc, #120]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000bdc:	f006 fd2e 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000be6:	f000 ffed 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bee:	220c      	movs	r2, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000bf4:	f006 fd22 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000bfe:	f000 ffe1 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000c38:	f007 fc02 	bl	8008440 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000c42:	f000 ffbf 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <MX_TIM1_Init+0x198>)
 8000c48:	f001 fa3e 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8000c4c:	bf00      	nop
 8000c4e:	3768      	adds	r7, #104	@ 0x68
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24000148 	.word	0x24000148
 8000c58:	40010000 	.word	0x40010000

08000c5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000c96:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca8:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000caa:	f006 fa59 	bl	8007160 <HAL_TIM_PWM_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 ff86 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000cc8:	f007 fb2c 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cd2:	f000 ff77 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd6:	2360      	movs	r3, #96	@ 0x60
 8000cd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000cee:	f006 fca5 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000cf8:	f000 ff64 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <MX_TIM2_Init+0xb0>)
 8000cfe:	f001 f9e3 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	24000194 	.word	0x24000194

08000d10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	@ 0x38
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d42:	4b3d      	ldr	r3, [pc, #244]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d44:	4a3d      	ldr	r2, [pc, #244]	@ (8000e3c <MX_TIM4_Init+0x12c>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d48:	4b3b      	ldr	r3, [pc, #236]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8000d54:	4b38      	ldr	r3, [pc, #224]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d56:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000d5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d62:	4b35      	ldr	r3, [pc, #212]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d68:	4833      	ldr	r0, [pc, #204]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d6a:	f006 f929 	bl	8006fc0 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d74:	f000 ff26 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d82:	4619      	mov	r1, r3
 8000d84:	482c      	ldr	r0, [pc, #176]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d86:	f006 fd6d 	bl	8007864 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d90:	f000 ff18 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d94:	4828      	ldr	r0, [pc, #160]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000d96:	f006 f9e3 	bl	8007160 <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000da0:	f000 ff10 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4821      	ldr	r0, [pc, #132]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000db4:	f007 fab6 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000dbe:	f000 ff01 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	@ 0x60
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000dda:	f006 fc2f 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000de4:	f000 feee 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	2204      	movs	r2, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4812      	ldr	r0, [pc, #72]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000df0:	f006 fc24 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000dfa:	f000 fee3 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2208      	movs	r2, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000e06:	f006 fc19 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000e10:	f000 fed8 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	220c      	movs	r2, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000e1c:	f006 fc0e 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000e26:	f000 fecd 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e2a:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <MX_TIM4_Init+0x128>)
 8000e2c:	f001 f94c 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8000e30:	bf00      	nop
 8000e32:	3738      	adds	r7, #56	@ 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240001e0 	.word	0x240001e0
 8000e3c:	40000800 	.word	0x40000800

08000e40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e72:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e74:	4a32      	ldr	r2, [pc, #200]	@ (8000f40 <MX_TIM5_Init+0x100>)
 8000e76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e86:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000e8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e92:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e98:	4828      	ldr	r0, [pc, #160]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000e9a:	f006 f891 	bl	8006fc0 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000ea4:	f000 fe8e 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4821      	ldr	r0, [pc, #132]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000eb6:	f006 fcd5 	bl	8007864 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000ec0:	f000 fe80 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ec4:	481d      	ldr	r0, [pc, #116]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000ec6:	f006 f94b 	bl	8007160 <HAL_TIM_PWM_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000ed0:	f000 fe78 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4816      	ldr	r0, [pc, #88]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000ee4:	f007 fa1e 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000eee:	f000 fe69 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef2:	2360      	movs	r3, #96	@ 0x60
 8000ef4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2204      	movs	r2, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000f0a:	f006 fb97 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000f14:	f000 fe56 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000f20:	f006 fb8c 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8000f2a:	f000 fe4b 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <MX_TIM5_Init+0xfc>)
 8000f30:	f001 f8ca 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8000f34:	bf00      	nop
 8000f36:	3738      	adds	r7, #56	@ 0x38
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2400022c 	.word	0x2400022c
 8000f40:	40000c00 	.word	0x40000c00

08000f44 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	@ 0x58
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	222c      	movs	r2, #44	@ 0x2c
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 fb01 	bl	8008578 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f76:	4b38      	ldr	r3, [pc, #224]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f78:	4a38      	ldr	r2, [pc, #224]	@ (800105c <MX_TIM8_Init+0x118>)
 8000f7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 8000f88:	4b33      	ldr	r3, [pc, #204]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f8a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f96:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fa2:	482d      	ldr	r0, [pc, #180]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000fa4:	f006 f8dc 	bl	8007160 <HAL_TIM_PWM_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 fe09 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4824      	ldr	r0, [pc, #144]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000fc6:	f007 f9ad 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000fd0:	f000 fdf8 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd4:	2360      	movs	r3, #96	@ 0x60
 8000fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4818      	ldr	r0, [pc, #96]	@ (8001058 <MX_TIM8_Init+0x114>)
 8000ff6:	f006 fb21 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001000:	f000 fde0 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4619      	mov	r1, r3
 8001038:	4807      	ldr	r0, [pc, #28]	@ (8001058 <MX_TIM8_Init+0x114>)
 800103a:	f007 fa01 	bl	8008440 <HAL_TIMEx_ConfigBreakDeadTime>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001044:	f000 fdbe 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <MX_TIM8_Init+0x114>)
 800104a:	f001 f83d 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 800104e:	bf00      	nop
 8001050:	3758      	adds	r7, #88	@ 0x58
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000278 	.word	0x24000278
 800105c:	40010400 	.word	0x40010400

08001060 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001092:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <MX_TIM12_Init+0xe8>)
 8001094:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <MX_TIM12_Init+0xec>)
 8001096:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <MX_TIM12_Init+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010a6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010aa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b2:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010b4:	2280      	movs	r2, #128	@ 0x80
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80010b8:	4823      	ldr	r0, [pc, #140]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010ba:	f005 ff81 	bl	8006fc0 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80010c4:	f000 fd7e 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d2:	4619      	mov	r1, r3
 80010d4:	481c      	ldr	r0, [pc, #112]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010d6:	f006 fbc5 	bl	8007864 <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80010e0:	f000 fd70 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010e4:	4818      	ldr	r0, [pc, #96]	@ (8001148 <MX_TIM12_Init+0xe8>)
 80010e6:	f006 f83b 	bl	8007160 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80010f0:	f000 fd68 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	@ (8001148 <MX_TIM12_Init+0xe8>)
 8001104:	f007 f90e 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800110e:	f000 fd59 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	@ 0x60
 8001114:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	2204      	movs	r2, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM12_Init+0xe8>)
 800112a:	f006 fa87 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001134:	f000 fd46 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM12_Init+0xe8>)
 800113a:	f000 ffc5 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 800113e:	bf00      	nop
 8001140:	3738      	adds	r7, #56	@ 0x38
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	240002c4 	.word	0x240002c4
 800114c:	40001800 	.word	0x40001800

08001150 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_TIM13_Init+0x94>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <MX_TIM13_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_TIM13_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_TIM13_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_TIM13_Init+0x94>)
 800117c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001180:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_TIM13_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_TIM13_Init+0x94>)
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800118e:	4815      	ldr	r0, [pc, #84]	@ (80011e4 <MX_TIM13_Init+0x94>)
 8001190:	f005 ff16 	bl	8006fc0 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800119a:	f000 fd13 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_TIM13_Init+0x94>)
 80011a0:	f005 ffde 	bl	8007160 <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80011aa:	f000 fd0b 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	@ 0x60
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <MX_TIM13_Init+0x94>)
 80011c6:	f006 fa39 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80011d0:	f000 fcf8 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MX_TIM13_Init+0x94>)
 80011d6:	f000 ff77 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	24000310 	.word	0x24000310
 80011e8:	40001c00 	.word	0x40001c00

080011ec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001206:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <MX_TIM14_Init+0x98>)
 8001208:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_TIM14_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001218:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800121c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800122a:	4815      	ldr	r0, [pc, #84]	@ (8001280 <MX_TIM14_Init+0x94>)
 800122c:	f005 fec8 	bl	8006fc0 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001236:	f000 fcc5 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800123a:	4811      	ldr	r0, [pc, #68]	@ (8001280 <MX_TIM14_Init+0x94>)
 800123c:	f005 ff90 	bl	8007160 <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001246:	f000 fcbd 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001262:	f006 f9eb 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800126c:	f000 fcaa 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <MX_TIM14_Init+0x94>)
 8001272:	f000 ff29 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2400035c 	.word	0x2400035c
 8001284:	40002000 	.word	0x40002000

08001288 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09a      	sub	sp, #104	@ 0x68
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	222c      	movs	r2, #44	@ 0x2c
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 f958 	bl	8008578 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012c8:	4b45      	ldr	r3, [pc, #276]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012ca:	4a46      	ldr	r2, [pc, #280]	@ (80013e4 <MX_TIM15_Init+0x15c>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80012ce:	4b44      	ldr	r3, [pc, #272]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b42      	ldr	r3, [pc, #264]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 80012da:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012dc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80012e0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b3f      	ldr	r3, [pc, #252]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012e8:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012f4:	483a      	ldr	r0, [pc, #232]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80012f6:	f005 fe63 	bl	8006fc0 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 fc60 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001308:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800130e:	4619      	mov	r1, r3
 8001310:	4833      	ldr	r0, [pc, #204]	@ (80013e0 <MX_TIM15_Init+0x158>)
 8001312:	f006 faa7 	bl	8007864 <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800131c:	f000 fc52 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001320:	482f      	ldr	r0, [pc, #188]	@ (80013e0 <MX_TIM15_Init+0x158>)
 8001322:	f005 ff1d 	bl	8007160 <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800132c:	f000 fc4a 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001338:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800133c:	4619      	mov	r1, r3
 800133e:	4828      	ldr	r0, [pc, #160]	@ (80013e0 <MX_TIM15_Init+0x158>)
 8001340:	f006 fff0 	bl	8008324 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800134a:	f000 fc3b 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134e:	2360      	movs	r3, #96	@ 0x60
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	481b      	ldr	r0, [pc, #108]	@ (80013e0 <MX_TIM15_Init+0x158>)
 8001374:	f006 f962 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800137e:	f000 fc21 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001382:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001386:	2204      	movs	r2, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4815      	ldr	r0, [pc, #84]	@ (80013e0 <MX_TIM15_Init+0x158>)
 800138c:	f006 f956 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001396:	f000 fc15 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80013c2:	f007 f83d 	bl	8008440 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 80013cc:	f000 fbfa 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM15_Init+0x158>)
 80013d2:	f000 fe79 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3768      	adds	r7, #104	@ 0x68
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	240003a8 	.word	0x240003a8
 80013e4:	40014000 	.word	0x40014000

080013e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b092      	sub	sp, #72	@ 0x48
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	222c      	movs	r2, #44	@ 0x2c
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f007 f8b5 	bl	8008578 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800140e:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <MX_TIM16_Init+0xec>)
 8001410:	4a31      	ldr	r2, [pc, #196]	@ (80014d8 <MX_TIM16_Init+0xf0>)
 8001412:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001414:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <MX_TIM16_Init+0xec>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <MX_TIM16_Init+0xec>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <MX_TIM16_Init+0xec>)
 8001422:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001426:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_TIM16_Init+0xec>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_TIM16_Init+0xec>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <MX_TIM16_Init+0xec>)
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800143a:	4826      	ldr	r0, [pc, #152]	@ (80014d4 <MX_TIM16_Init+0xec>)
 800143c:	f005 fdc0 	bl	8006fc0 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001446:	f000 fbbd 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800144a:	4822      	ldr	r0, [pc, #136]	@ (80014d4 <MX_TIM16_Init+0xec>)
 800144c:	f005 fe88 	bl	8007160 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001456:	f000 fbb5 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	@ 0x60
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	4815      	ldr	r0, [pc, #84]	@ (80014d4 <MX_TIM16_Init+0xec>)
 8001480:	f006 f8dc 	bl	800763c <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800148a:	f000 fb9b 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <MX_TIM16_Init+0xec>)
 80014b6:	f006 ffc3 	bl	8008440 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80014c0:	f000 fb80 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <MX_TIM16_Init+0xec>)
 80014c6:	f000 fdff 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3748      	adds	r7, #72	@ 0x48
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	240003f4 	.word	0x240003f4
 80014d8:	40014400 	.word	0x40014400

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <MX_GPIO_Init+0x17c>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	4a57      	ldr	r2, [pc, #348]	@ (8001658 <MX_GPIO_Init+0x17c>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001502:	4b55      	ldr	r3, [pc, #340]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001510:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	4a50      	ldr	r2, [pc, #320]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001520:	4b4d      	ldr	r3, [pc, #308]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	4b4a      	ldr	r3, [pc, #296]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	4a48      	ldr	r2, [pc, #288]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153e:	4b46      	ldr	r3, [pc, #280]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b42      	ldr	r3, [pc, #264]	@ (8001658 <MX_GPIO_Init+0x17c>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a41      	ldr	r2, [pc, #260]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <MX_GPIO_Init+0x17c>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <MX_GPIO_Init+0x17c>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001570:	4a39      	ldr	r2, [pc, #228]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <MX_GPIO_Init+0x17c>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001588:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <MX_GPIO_Init+0x17c>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <MX_GPIO_Init+0x17c>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001598:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <MX_GPIO_Init+0x17c>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 80015a6:	2200      	movs	r2, #0
 80015a8:	f249 519f 	movw	r1, #38303	@ 0x959f
 80015ac:	482b      	ldr	r0, [pc, #172]	@ (800165c <MX_GPIO_Init+0x180>)
 80015ae:	f001 fc7d 	bl	8002eac <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|QUADSPI_BK2_NCS_Pin
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80015b8:	4829      	ldr	r0, [pc, #164]	@ (8001660 <MX_GPIO_Init+0x184>)
 80015ba:	f001 fc77 	bl	8002eac <HAL_GPIO_WritePin>
                          |TIM4_CH3_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 80015c4:	4827      	ldr	r0, [pc, #156]	@ (8001664 <MX_GPIO_Init+0x188>)
 80015c6:	f001 fc71 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 80015ca:	2200      	movs	r2, #0
 80015cc:	f640 71f7 	movw	r1, #4087	@ 0xff7
 80015d0:	4825      	ldr	r0, [pc, #148]	@ (8001668 <MX_GPIO_Init+0x18c>)
 80015d2:	f001 fc6b 	bl	8002eac <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 80015d6:	f249 539f 	movw	r3, #38303	@ 0x959f
 80015da:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481b      	ldr	r0, [pc, #108]	@ (800165c <MX_GPIO_Init+0x180>)
 80015f0:	f001 faac 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin QUADSPI_BK2_NCS_Pin
                           TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|QUADSPI_BK2_NCS_Pin
 80015f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015f8:	61fb      	str	r3, [r7, #28]
                          |TIM4_CH3_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4814      	ldr	r0, [pc, #80]	@ (8001660 <MX_GPIO_Init+0x184>)
 800160e:	f001 fa9d 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin SPI2_NSS_Pin QUADSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin;
 8001612:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	@ (8001664 <MX_GPIO_Init+0x188>)
 800162c:	f001 fa8e 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001630:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001634:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4807      	ldr	r0, [pc, #28]	@ (8001668 <MX_GPIO_Init+0x18c>)
 800164a:	f001 fa7f 	bl	8002b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	@ 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	58024400 	.word	0x58024400
 800165c:	58021000 	.word	0x58021000
 8001660:	58020800 	.word	0x58020800
 8001664:	58020400 	.word	0x58020400
 8001668:	58020c00 	.word	0x58020c00
 800166c:	00000000 	.word	0x00000000

08001670 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001678:	230a      	movs	r3, #10
 800167a:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 800167c:	a324      	add	r3, pc, #144	@ (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	e9c7 2302 	strd	r2, r3, [r7, #8]


    if (htim==&htim1){
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1b      	ldr	r2, [pc, #108]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12d      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001696:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	fb93 f2f2 	sdiv	r2, r3, r2
 80016a2:	6979      	ldr	r1, [r7, #20]
 80016a4:	fb01 f202 	mul.w	r2, r1, r2
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d11d      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016b6:	db02      	blt.n	80016be <HAL_TIM_PeriodElapsedCallback+0x4e>
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	ed93 6b00 	vldr	d6, [r3]
 80016cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80016d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016d6:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016e2:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 80016ea:	bf00      	nop
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	24000148 	.word	0x24000148
 80016fc:	24002390 	.word	0x24002390
 8001700:	24002394 	.word	0x24002394
 8001704:	24000450 	.word	0x24000450
 8001708:	24000448 	.word	0x24000448
 800170c:	24000440 	.word	0x24000440
 8001710:	33333333 	.word	0x33333333
 8001714:	3fd33333 	.word	0x3fd33333

08001718 <control_update>:

static void control_update(double ref)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 800172e:	ed97 7b00 	vldr	d7, [r7]
 8001732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d505      	bpl.n	8001748 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 800173c:	4b01      	ldr	r3, [pc, #4]	@ (8001744 <control_update+0x2c>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e004      	b.n	800174e <control_update+0x36>
 8001744:	24000000 	.word	0x24000000
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001748:	4ba3      	ldr	r3, [pc, #652]	@ (80019d8 <control_update+0x2c0>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 800174e:	4ba2      	ldr	r3, [pc, #648]	@ (80019d8 <control_update+0x2c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	2101      	movs	r1, #1
 8001758:	48a0      	ldr	r0, [pc, #640]	@ (80019dc <control_update+0x2c4>)
 800175a:	f001 fba7 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 800175e:	4b9e      	ldr	r3, [pc, #632]	@ (80019d8 <control_update+0x2c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2102      	movs	r1, #2
 8001768:	489c      	ldr	r0, [pc, #624]	@ (80019dc <control_update+0x2c4>)
 800176a:	f001 fb9f 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 800176e:	4b9a      	ldr	r3, [pc, #616]	@ (80019d8 <control_update+0x2c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	2104      	movs	r1, #4
 8001778:	4898      	ldr	r0, [pc, #608]	@ (80019dc <control_update+0x2c4>)
 800177a:	f001 fb97 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 800177e:	4b96      	ldr	r3, [pc, #600]	@ (80019d8 <control_update+0x2c0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	2108      	movs	r1, #8
 8001788:	4894      	ldr	r0, [pc, #592]	@ (80019dc <control_update+0x2c4>)
 800178a:	f001 fb8f 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 1


		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 800178e:	4b92      	ldr	r3, [pc, #584]	@ (80019d8 <control_update+0x2c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	2110      	movs	r1, #16
 8001798:	4890      	ldr	r0, [pc, #576]	@ (80019dc <control_update+0x2c4>)
 800179a:	f001 fb87 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 800179e:	4b8e      	ldr	r3, [pc, #568]	@ (80019d8 <control_update+0x2c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017aa:	488d      	ldr	r0, [pc, #564]	@ (80019e0 <control_update+0x2c8>)
 80017ac:	f001 fb7e 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 80017b0:	4b89      	ldr	r3, [pc, #548]	@ (80019d8 <control_update+0x2c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017bc:	4888      	ldr	r0, [pc, #544]	@ (80019e0 <control_update+0x2c8>)
 80017be:	f001 fb75 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 80017c2:	4b85      	ldr	r3, [pc, #532]	@ (80019d8 <control_update+0x2c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ce:	4885      	ldr	r0, [pc, #532]	@ (80019e4 <control_update+0x2cc>)
 80017d0:	f001 fb6c 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 80017d4:	4b80      	ldr	r3, [pc, #512]	@ (80019d8 <control_update+0x2c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017e0:	4880      	ldr	r0, [pc, #512]	@ (80019e4 <control_update+0x2cc>)
 80017e2:	f001 fb63 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 80017e6:	4b7c      	ldr	r3, [pc, #496]	@ (80019d8 <control_update+0x2c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017f2:	487c      	ldr	r0, [pc, #496]	@ (80019e4 <control_update+0x2cc>)
 80017f4:	f001 fb5a 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 80017f8:	4b77      	ldr	r3, [pc, #476]	@ (80019d8 <control_update+0x2c0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001804:	4877      	ldr	r0, [pc, #476]	@ (80019e4 <control_update+0x2cc>)
 8001806:	f001 fb51 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 800180a:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <control_update+0x2c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	2180      	movs	r1, #128	@ 0x80
 8001814:	4871      	ldr	r0, [pc, #452]	@ (80019dc <control_update+0x2c4>)
 8001816:	f001 fb49 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 800181a:	4b6f      	ldr	r3, [pc, #444]	@ (80019d8 <control_update+0x2c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001826:	486d      	ldr	r0, [pc, #436]	@ (80019dc <control_update+0x2c4>)
 8001828:	f001 fb40 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 800182c:	4b6a      	ldr	r3, [pc, #424]	@ (80019d8 <control_update+0x2c0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001838:	4868      	ldr	r0, [pc, #416]	@ (80019dc <control_update+0x2c4>)
 800183a:	f001 fb37 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800183e:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <control_update+0x2c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800184a:	4864      	ldr	r0, [pc, #400]	@ (80019dc <control_update+0x2c4>)
 800184c:	f001 fb2e 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8001850:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <control_update+0x2c0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800185c:	485f      	ldr	r0, [pc, #380]	@ (80019dc <control_update+0x2c4>)
 800185e:	f001 fb25 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 8001862:	4b5d      	ldr	r3, [pc, #372]	@ (80019d8 <control_update+0x2c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	2101      	movs	r1, #1
 800186c:	485e      	ldr	r0, [pc, #376]	@ (80019e8 <control_update+0x2d0>)
 800186e:	f001 fb1d 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 8001872:	4b59      	ldr	r3, [pc, #356]	@ (80019d8 <control_update+0x2c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2102      	movs	r1, #2
 800187c:	485a      	ldr	r0, [pc, #360]	@ (80019e8 <control_update+0x2d0>)
 800187e:	f001 fb15 	bl	8002eac <HAL_GPIO_WritePin>
		//End Timer 16


		//HRTIM CODE HERE **************
		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8001882:	4b55      	ldr	r3, [pc, #340]	@ (80019d8 <control_update+0x2c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	2110      	movs	r1, #16
 800188c:	4856      	ldr	r0, [pc, #344]	@ (80019e8 <control_update+0x2d0>)
 800188e:	f001 fb0d 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8001892:	4b51      	ldr	r3, [pc, #324]	@ (80019d8 <control_update+0x2c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	2120      	movs	r1, #32
 800189c:	4852      	ldr	r0, [pc, #328]	@ (80019e8 <control_update+0x2d0>)
 800189e:	f001 fb05 	bl	8002eac <HAL_GPIO_WritePin>
		//End High HRTIM CHA

		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 80018a2:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <control_update+0x2c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	2140      	movs	r1, #64	@ 0x40
 80018ac:	484e      	ldr	r0, [pc, #312]	@ (80019e8 <control_update+0x2d0>)
 80018ae:	f001 fafd 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 80018b2:	4b49      	ldr	r3, [pc, #292]	@ (80019d8 <control_update+0x2c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	2180      	movs	r1, #128	@ 0x80
 80018bc:	484a      	ldr	r0, [pc, #296]	@ (80019e8 <control_update+0x2d0>)
 80018be:	f001 faf5 	bl	8002eac <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 80018c2:	4b45      	ldr	r3, [pc, #276]	@ (80019d8 <control_update+0x2c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ce:	4846      	ldr	r0, [pc, #280]	@ (80019e8 <control_update+0x2d0>)
 80018d0:	f001 faec 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <control_update+0x2c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e0:	4841      	ldr	r0, [pc, #260]	@ (80019e8 <control_update+0x2d0>)
 80018e2:	f001 fae3 	bl	8002eac <HAL_GPIO_WritePin>
		//End High HRTIM CHC

		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 80018e6:	4b3c      	ldr	r3, [pc, #240]	@ (80019d8 <control_update+0x2c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018f2:	483d      	ldr	r0, [pc, #244]	@ (80019e8 <control_update+0x2d0>)
 80018f4:	f001 fada 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 80018f8:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <control_update+0x2c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001904:	4838      	ldr	r0, [pc, #224]	@ (80019e8 <control_update+0x2d0>)
 8001906:	f001 fad1 	bl	8002eac <HAL_GPIO_WritePin>
		//End High HRTIM CHD
		//END HRTIM CODE


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <control_update+0x2c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	2104      	movs	r1, #4
 8001914:	4834      	ldr	r0, [pc, #208]	@ (80019e8 <control_update+0x2d0>)
 8001916:	f001 fac9 	bl	8002eac <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 800191a:	ed97 7b00 	vldr	d7, [r7]
 800191e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001922:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8001926:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80019d0 <control_update+0x2b8>
 800192a:	eeb0 1b47 	vmov.f64	d1, d7
 800192e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001932:	f000 f8b9 	bl	8001aa8 <calc_dutycycle>
 8001936:	4603      	mov	r3, r0
 8001938:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 800193a:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <control_update+0x2d4>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	89fa      	ldrh	r2, [r7, #14]
 8001940:	429a      	cmp	r2, r3
 8001942:	f000 809b 	beq.w	8001a7c <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 8001946:	4a29      	ldr	r2, [pc, #164]	@ (80019ec <control_update+0x2d4>)
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <control_update+0x2d4>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <control_update+0x2d8>)
 8001952:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = dutycycle;
 8001954:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <control_update+0x2d4>)
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <control_update+0x2d8>)
 800195a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = dutycycle;
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <control_update+0x2d4>)
 800195e:	881a      	ldrh	r2, [r3, #0]
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <control_update+0x2d8>)
 8001962:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = dutycycle;
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <control_update+0x2d4>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <control_update+0x2d8>)
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 1


		//Timer 2
		TIM2->CCR1 = dutycycle;
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <control_update+0x2d4>)
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001974:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 8001976:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <control_update+0x2d4>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <control_update+0x2dc>)
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = dutycycle;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <control_update+0x2d4>)
 8001980:	881a      	ldrh	r2, [r3, #0]
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <control_update+0x2dc>)
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR3 = dutycycle;
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <control_update+0x2d4>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <control_update+0x2dc>)
 800198c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = dutycycle;
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <control_update+0x2d4>)
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <control_update+0x2dc>)
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 4


		//Timer 5
		TIM5->CCR2 = dutycycle;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <control_update+0x2d4>)
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <control_update+0x2e0>)
 800199c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = dutycycle;
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <control_update+0x2d4>)
 80019a0:	881a      	ldrh	r2, [r3, #0]
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <control_update+0x2e0>)
 80019a4:	63da      	str	r2, [r3, #60]	@ 0x3c
		//End Timer 5


		//Timer 8
		TIM8->CCR4 = dutycycle;
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <control_update+0x2d4>)
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <control_update+0x2e4>)
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 8


		//Timer 12
		TIM12->CCR2 = dutycycle;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <control_update+0x2d4>)
 80019b0:	881a      	ldrh	r2, [r3, #0]
 80019b2:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <control_update+0x2e8>)
 80019b4:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 12


		//Timer 13
		TIM13->CCR1 = dutycycle;
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <control_update+0x2d4>)
 80019b8:	881a      	ldrh	r2, [r3, #0]
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <control_update+0x2ec>)
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 13


		//Timer 14
		TIM14->CCR1 = dutycycle;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <control_update+0x2d4>)
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <control_update+0x2f0>)
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 14


		//Timer 15
		TIM15->CCR1 = dutycycle;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <control_update+0x2d4>)
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	e01f      	b.n	8001a0c <control_update+0x2f4>
 80019cc:	f3af 8000 	nop.w
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	3ffccccc 	.word	0x3ffccccc
 80019d8:	24000000 	.word	0x24000000
 80019dc:	58021000 	.word	0x58021000
 80019e0:	58020400 	.word	0x58020400
 80019e4:	58020800 	.word	0x58020800
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	24002398 	.word	0x24002398
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40000800 	.word	0x40000800
 80019f8:	40000c00 	.word	0x40000c00
 80019fc:	40010400 	.word	0x40010400
 8001a00:	40001800 	.word	0x40001800
 8001a04:	40001c00 	.word	0x40001c00
 8001a08:	40002000 	.word	0x40002000
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <control_update+0x374>)
 8001a0e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM15->CCR2 = dutycycle;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <control_update+0x378>)
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <control_update+0x374>)
 8001a16:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 15


		//Timer 16
		TIM16->CCR1 = dutycycle;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <control_update+0x378>)
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <control_update+0x37c>)
 8001a1e:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 16


		//HRTIM CODE GOES HERE ********
		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <control_update+0x378>)
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <control_update+0x380>)
 8001a26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <control_update+0x378>)
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <control_update+0x380>)
 8001a30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <control_update+0x378>)
 8001a36:	881a      	ldrh	r2, [r3, #0]
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <control_update+0x380>)
 8001a3a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <control_update+0x378>)
 8001a40:	881a      	ldrh	r2, [r3, #0]
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <control_update+0x380>)
 8001a44:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <control_update+0x378>)
 8001a4a:	881a      	ldrh	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <control_update+0x380>)
 8001a4e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <control_update+0x378>)
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <control_update+0x380>)
 8001a58:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <control_update+0x378>)
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <control_update+0x380>)
 8001a62:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <control_update+0x378>)
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <control_update+0x380>)
 8001a6c:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		//End HRTIM CHD
		//END HRTIM CODE HERE


		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <control_update+0x378>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <control_update+0x384>)
 8001a7a:	615a      	str	r2, [r3, #20]


	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <control_update+0x388>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40014000 	.word	0x40014000
 8001a90:	24002398 	.word	0x24002398
 8001a94:	40014400 	.word	0x40014400
 8001a98:	40017400 	.word	0x40017400
 8001a9c:	40002400 	.word	0x40002400
 8001aa0:	24000440 	.word	0x24000440
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ab2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001aba:	ed97 5b02 	vldr	d5, [r7, #8]
 8001abe:	ed97 6b00 	vldr	d6, [r7]
 8001ac2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ac6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001af8 <calc_dutycycle+0x50>
 8001aca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ace:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001ad8:	8afb      	ldrh	r3, [r7, #22]
 8001ada:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d902      	bls.n	8001ae8 <calc_dutycycle+0x40>
 8001ae2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8001ae6:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40d76fc0 	.word	0x40d76fc0

08001b00 <gen_sine>:

static void gen_sine(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
	int i = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8001b0a:	a316      	add	r3, pc, #88	@ (adr r3, 8001b64 <gen_sine+0x64>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e017      	b.n	8001b4a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b24:	ed97 7b00 	vldr	d7, [r7]
 8001b28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b30:	f006 fd4e 	bl	80085d0 <sin>
 8001b34:	eeb0 7b40 	vmov.f64	d7, d0
 8001b38:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <gen_sine+0x60>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b50:	dbe3      	blt.n	8001b1a <gen_sine+0x1a>
	}
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	f3af 8000 	nop.w
 8001b60:	24000450 	.word	0x24000450
 8001b64:	b68b71c3 	.word	0xb68b71c3
 8001b68:	3f79bc65 	.word	0x3f79bc65

08001b6c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b7e:	f000 ff6d 	bl	8002a5c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b8e:	231f      	movs	r3, #31
 8001b90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b92:	2387      	movs	r3, #135	@ 0x87
 8001b94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 ff8b 	bl	8002acc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001bb6:	2004      	movs	r0, #4
 8001bb8:	f000 ff68 	bl	8002a8c <HAL_MPU_Enable>

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <Error_Handler+0x8>

08001bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_MspInit+0x30>)
 8001bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bdc:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <HAL_MspInit+0x30>)
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_MspInit+0x30>)
 8001be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	58024400 	.word	0x58024400

08001c04 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0b4      	sub	sp, #208	@ 0xd0
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	22c0      	movs	r2, #192	@ 0xc0
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f006 fcaf 	bl	8008578 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <HAL_HRTIM_MspInit+0x6c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d121      	bne.n	8001c68 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fe52 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001c46:	f7ff ffbd 	bl	8001bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_HRTIM_MspInit+0x70>)
 8001c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c50:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <HAL_HRTIM_MspInit+0x70>)
 8001c52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_HRTIM_MspInit+0x70>)
 8001c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	37d0      	adds	r7, #208	@ 0xd0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40017400 	.word	0x40017400
 8001c74:	58024400 	.word	0x58024400

08001c78 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a23      	ldr	r2, [pc, #140]	@ (8001d24 <HAL_HRTIM_MspPostInit+0xac>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d13f      	bne.n	8001d1a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca0:	4a21      	ldr	r2, [pc, #132]	@ (8001d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001caa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001cd6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <HAL_HRTIM_MspPostInit+0xb4>)
 8001cf4:	f000 ff2a 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cf8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001cfc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4806      	ldr	r0, [pc, #24]	@ (8001d30 <HAL_HRTIM_MspPostInit+0xb8>)
 8001d16:	f000 ff19 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	@ 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40017400 	.word	0x40017400
 8001d28:	58024400 	.word	0x58024400
 8001d2c:	58020800 	.word	0x58020800
 8001d30:	58020000 	.word	0x58020000

08001d34 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0ba      	sub	sp, #232	@ 0xe8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	22c0      	movs	r2, #192	@ 0xc0
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f006 fc0f 	bl	8008578 <memset>
  if(hlptim->Instance==LPTIM1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_LPTIM_MspInit+0xd8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d14e      	bne.n	8001e02 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001d64:	f04f 0220 	mov.w	r2, #32
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fdb2 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001d86:	f7ff ff1d 	bl	8001bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_LPTIM_MspInit+0xdc>)
 8001d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d90:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <HAL_LPTIM_MspInit+0xdc>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_LPTIM_MspInit+0xdc>)
 8001d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_LPTIM_MspInit+0xdc>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_LPTIM_MspInit+0xdc>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_LPTIM_MspInit+0xdc>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4809      	ldr	r0, [pc, #36]	@ (8001e14 <HAL_LPTIM_MspInit+0xe0>)
 8001dee:	f000 fead 	bl	8002b4c <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	205d      	movs	r0, #93	@ 0x5d
 8001df8:	f000 fdfb 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001dfc:	205d      	movs	r0, #93	@ 0x5d
 8001dfe:	f000 fe12 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	37e8      	adds	r7, #232	@ 0xe8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40002400 	.word	0x40002400
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58020c00 	.word	0x58020c00

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a74      	ldr	r2, [pc, #464]	@ (8001ff8 <HAL_TIM_Base_MspInit+0x1e0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d117      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	4b74      	ldr	r3, [pc, #464]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e30:	4a72      	ldr	r2, [pc, #456]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e3a:	4b70      	ldr	r3, [pc, #448]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2019      	movs	r0, #25
 8001e4e:	f000 fdd0 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e52:	2019      	movs	r0, #25
 8001e54:	f000 fde7 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e58:	e0c9      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM4)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a68      	ldr	r2, [pc, #416]	@ (8002000 <HAL_TIM_Base_MspInit+0x1e8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d117      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e64:	4b65      	ldr	r3, [pc, #404]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e6a:	4a64      	ldr	r2, [pc, #400]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e74:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	201e      	movs	r0, #30
 8001e88:	f000 fdb3 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e8c:	201e      	movs	r0, #30
 8001e8e:	f000 fdca 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001e92:	e0ac      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM5)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5a      	ldr	r2, [pc, #360]	@ (8002004 <HAL_TIM_Base_MspInit+0x1ec>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d117      	bne.n	8001ece <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e9e:	4b57      	ldr	r3, [pc, #348]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea4:	4a55      	ldr	r2, [pc, #340]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eae:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2032      	movs	r0, #50	@ 0x32
 8001ec2:	f000 fd96 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ec6:	2032      	movs	r0, #50	@ 0x32
 8001ec8:	f000 fdad 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001ecc:	e08f      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8002008 <HAL_TIM_Base_MspInit+0x1f0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d117      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ed8:	4b48      	ldr	r3, [pc, #288]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ede:	4a47      	ldr	r2, [pc, #284]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ee8:	4b44      	ldr	r3, [pc, #272]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	202b      	movs	r0, #43	@ 0x2b
 8001efc:	f000 fd79 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f00:	202b      	movs	r0, #43	@ 0x2b
 8001f02:	f000 fd90 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001f06:	e072      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800200c <HAL_TIM_Base_MspInit+0x1f4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d117      	bne.n	8001f42 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f12:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f18:	4a38      	ldr	r2, [pc, #224]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f22:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	202c      	movs	r0, #44	@ 0x2c
 8001f36:	f000 fd5c 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f3a:	202c      	movs	r0, #44	@ 0x2c
 8001f3c:	f000 fd73 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001f40:	e055      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d117      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f52:	4a2a      	ldr	r2, [pc, #168]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f5c:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	202d      	movs	r0, #45	@ 0x2d
 8001f70:	f000 fd3f 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f74:	202d      	movs	r0, #45	@ 0x2d
 8001f76:	f000 fd56 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001f7a:	e038      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM15)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <HAL_TIM_Base_MspInit+0x1fc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d117      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2074      	movs	r0, #116	@ 0x74
 8001faa:	f000 fd22 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001fae:	2074      	movs	r0, #116	@ 0x74
 8001fb0:	f000 fd39 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001fb4:	e01b      	b.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM16)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a17      	ldr	r2, [pc, #92]	@ (8002018 <HAL_TIM_Base_MspInit+0x200>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d116      	bne.n	8001fee <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_TIM_Base_MspInit+0x1e4>)
 8001fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2075      	movs	r0, #117	@ 0x75
 8001fe4:	f000 fd05 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001fe8:	2075      	movs	r0, #117	@ 0x75
 8001fea:	f000 fd1c 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	@ 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	58024400 	.word	0x58024400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40001800 	.word	0x40001800
 800200c:	40001c00 	.word	0x40001c00
 8002010:	40002000 	.word	0x40002000
 8002014:	40014000 	.word	0x40014000
 8002018:	40014400 	.word	0x40014400

0800201c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202c:	d117      	bne.n	800205e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202e:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002034:	4a22      	ldr	r2, [pc, #136]	@ (80020c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	201c      	movs	r0, #28
 8002052:	f000 fcce 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002056:	201c      	movs	r0, #28
 8002058:	f000 fce5 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800205c:	e02b      	b.n	80020b6 <HAL_TIM_PWM_MspInit+0x9a>
  else if(htim_pwm->Instance==TIM8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d126      	bne.n	80020b6 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_TIM_PWM_MspInit+0xa4>)
 800206a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800206e:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_TIM_PWM_MspInit+0xa4>)
 800207a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	202b      	movs	r0, #43	@ 0x2b
 800208c:	f000 fcb1 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002090:	202b      	movs	r0, #43	@ 0x2b
 8002092:	f000 fcc8 	bl	8002a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	202c      	movs	r0, #44	@ 0x2c
 800209c:	f000 fca9 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020a0:	202c      	movs	r0, #44	@ 0x2c
 80020a2:	f000 fcc0 	bl	8002a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	202d      	movs	r0, #45	@ 0x2d
 80020ac:	f000 fca1 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80020b0:	202d      	movs	r0, #45	@ 0x2d
 80020b2:	f000 fcb8 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58024400 	.word	0x58024400
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b092      	sub	sp, #72	@ 0x48
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4aa4      	ldr	r2, [pc, #656]	@ (8002378 <HAL_TIM_MspPostInit+0x2b0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d120      	bne.n	800212c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ea:	4ba4      	ldr	r3, [pc, #656]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f0:	4aa2      	ldr	r2, [pc, #648]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fa:	4ba0      	ldr	r3, [pc, #640]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	633b      	str	r3, [r7, #48]	@ 0x30
 8002106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002108:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800211a:	2301      	movs	r3, #1
 800211c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002122:	4619      	mov	r1, r3
 8002124:	4896      	ldr	r0, [pc, #600]	@ (8002380 <HAL_TIM_MspPostInit+0x2b8>)
 8002126:	f000 fd11 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800212a:	e189      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002134:	d11f      	bne.n	8002176 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b91      	ldr	r3, [pc, #580]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213c:	4a8f      	ldr	r2, [pc, #572]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002146:	4b8d      	ldr	r3, [pc, #564]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002154:	2301      	movs	r3, #1
 8002156:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002164:	2301      	movs	r3, #1
 8002166:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800216c:	4619      	mov	r1, r3
 800216e:	4885      	ldr	r0, [pc, #532]	@ (8002384 <HAL_TIM_MspPostInit+0x2bc>)
 8002170:	f000 fcec 	bl	8002b4c <HAL_GPIO_Init>
}
 8002174:	e164      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a83      	ldr	r2, [pc, #524]	@ (8002388 <HAL_TIM_MspPostInit+0x2c0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d13f      	bne.n	8002200 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002180:	4b7e      	ldr	r3, [pc, #504]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	4a7d      	ldr	r2, [pc, #500]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002190:	4b7a      	ldr	r3, [pc, #488]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800219c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b77      	ldr	r3, [pc, #476]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a4:	4a75      	ldr	r2, [pc, #468]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ae:	4b73      	ldr	r3, [pc, #460]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80021bc:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ce:	2302      	movs	r3, #2
 80021d0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021d6:	4619      	mov	r1, r3
 80021d8:	486c      	ldr	r0, [pc, #432]	@ (800238c <HAL_TIM_MspPostInit+0x2c4>)
 80021da:	f000 fcb7 	bl	8002b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ee:	2302      	movs	r3, #2
 80021f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021f6:	4619      	mov	r1, r3
 80021f8:	4865      	ldr	r0, [pc, #404]	@ (8002390 <HAL_TIM_MspPostInit+0x2c8>)
 80021fa:	f000 fca7 	bl	8002b4c <HAL_GPIO_Init>
}
 80021fe:	e11f      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a63      	ldr	r2, [pc, #396]	@ (8002394 <HAL_TIM_MspPostInit+0x2cc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d11f      	bne.n	800224a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b5c      	ldr	r3, [pc, #368]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 800220c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002210:	4a5a      	ldr	r2, [pc, #360]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800221a:	4b58      	ldr	r3, [pc, #352]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 800221c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002228:	2306      	movs	r3, #6
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002238:	2302      	movs	r3, #2
 800223a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002240:	4619      	mov	r1, r3
 8002242:	4850      	ldr	r0, [pc, #320]	@ (8002384 <HAL_TIM_MspPostInit+0x2bc>)
 8002244:	f000 fc82 	bl	8002b4c <HAL_GPIO_Init>
}
 8002248:	e0fa      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a52      	ldr	r2, [pc, #328]	@ (8002398 <HAL_TIM_MspPostInit+0x2d0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d120      	bne.n	8002296 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002254:	4b49      	ldr	r3, [pc, #292]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225a:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002264:	4b45      	ldr	r3, [pc, #276]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002284:	2303      	movs	r3, #3
 8002286:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800228c:	4619      	mov	r1, r3
 800228e:	4843      	ldr	r0, [pc, #268]	@ (800239c <HAL_TIM_MspPostInit+0x2d4>)
 8002290:	f000 fc5c 	bl	8002b4c <HAL_GPIO_Init>
}
 8002294:	e0d4      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a41      	ldr	r2, [pc, #260]	@ (80023a0 <HAL_TIM_MspPostInit+0x2d8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d120      	bne.n	80022e2 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b36      	ldr	r3, [pc, #216]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a6:	4a35      	ldr	r2, [pc, #212]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022b0:	4b32      	ldr	r3, [pc, #200]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80022d0:	2302      	movs	r3, #2
 80022d2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022d8:	4619      	mov	r1, r3
 80022da:	482d      	ldr	r0, [pc, #180]	@ (8002390 <HAL_TIM_MspPostInit+0x2c8>)
 80022dc:	f000 fc36 	bl	8002b4c <HAL_GPIO_Init>
}
 80022e0:	e0ae      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2f      	ldr	r2, [pc, #188]	@ (80023a4 <HAL_TIM_MspPostInit+0x2dc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d11f      	bne.n	800232c <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f2:	4a22      	ldr	r2, [pc, #136]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800230a:	2340      	movs	r3, #64	@ 0x40
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800231a:	2309      	movs	r3, #9
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002322:	4619      	mov	r1, r3
 8002324:	4817      	ldr	r0, [pc, #92]	@ (8002384 <HAL_TIM_MspPostInit+0x2bc>)
 8002326:	f000 fc11 	bl	8002b4c <HAL_GPIO_Init>
}
 800232a:	e089      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <HAL_TIM_MspPostInit+0x2e0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d13a      	bne.n	80023ac <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <HAL_TIM_MspPostInit+0x2b4>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002364:	2309      	movs	r3, #9
 8002366:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_TIM_MspPostInit+0x2bc>)
 8002370:	f000 fbec 	bl	8002b4c <HAL_GPIO_Init>
}
 8002374:	e064      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	58024400 	.word	0x58024400
 8002380:	58021000 	.word	0x58021000
 8002384:	58020000 	.word	0x58020000
 8002388:	40000800 	.word	0x40000800
 800238c:	58020c00 	.word	0x58020c00
 8002390:	58020400 	.word	0x58020400
 8002394:	40000c00 	.word	0x40000c00
 8002398:	40010400 	.word	0x40010400
 800239c:	58020800 	.word	0x58020800
 80023a0:	40001800 	.word	0x40001800
 80023a4:	40001c00 	.word	0x40001c00
 80023a8:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a25      	ldr	r2, [pc, #148]	@ (8002448 <HAL_TIM_MspPostInit+0x380>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d11f      	bne.n	80023f6 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023b6:	4b25      	ldr	r3, [pc, #148]	@ (800244c <HAL_TIM_MspPostInit+0x384>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023bc:	4a23      	ldr	r2, [pc, #140]	@ (800244c <HAL_TIM_MspPostInit+0x384>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_TIM_MspPostInit+0x384>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023d4:	2360      	movs	r3, #96	@ 0x60
 80023d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80023e4:	2304      	movs	r3, #4
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ec:	4619      	mov	r1, r3
 80023ee:	4818      	ldr	r0, [pc, #96]	@ (8002450 <HAL_TIM_MspPostInit+0x388>)
 80023f0:	f000 fbac 	bl	8002b4c <HAL_GPIO_Init>
}
 80023f4:	e024      	b.n	8002440 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <HAL_TIM_MspPostInit+0x38c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d11f      	bne.n	8002440 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_TIM_MspPostInit+0x384>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a11      	ldr	r2, [pc, #68]	@ (800244c <HAL_TIM_MspPostInit+0x384>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <HAL_TIM_MspPostInit+0x384>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800241e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002430:	2301      	movs	r3, #1
 8002432:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002434:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002438:	4619      	mov	r1, r3
 800243a:	4807      	ldr	r0, [pc, #28]	@ (8002458 <HAL_TIM_MspPostInit+0x390>)
 800243c:	f000 fb86 	bl	8002b4c <HAL_GPIO_Init>
}
 8002440:	bf00      	nop
 8002442:	3748      	adds	r7, #72	@ 0x48
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40014000 	.word	0x40014000
 800244c:	58024400 	.word	0x58024400
 8002450:	58021000 	.word	0x58021000
 8002454:	40014400 	.word	0x40014400
 8002458:	58020400 	.word	0x58020400

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <NMI_Handler+0x4>

08002464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <MemManage_Handler+0x4>

08002474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <BusFault_Handler+0x4>

0800247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <UsageFault_Handler+0x4>

08002484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b2:	f000 f997 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <TIM1_UP_IRQHandler+0x10>)
 80024c2:	f004 ffb3 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	24000148 	.word	0x24000148

080024d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <TIM2_IRQHandler+0x10>)
 80024d6:	f004 ffa9 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	24000194 	.word	0x24000194

080024e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <TIM4_IRQHandler+0x10>)
 80024ea:	f004 ff9f 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	240001e0 	.word	0x240001e0

080024f8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024fc:	4803      	ldr	r0, [pc, #12]	@ (800250c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80024fe:	f004 ff95 	bl	800742c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002502:	4803      	ldr	r0, [pc, #12]	@ (8002510 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002504:	f004 ff92 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	24000278 	.word	0x24000278
 8002510:	240002c4 	.word	0x240002c4

08002514 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002518:	4803      	ldr	r0, [pc, #12]	@ (8002528 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800251a:	f004 ff87 	bl	800742c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800251e:	4803      	ldr	r0, [pc, #12]	@ (800252c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002520:	f004 ff84 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	24000278 	.word	0x24000278
 800252c:	24000310 	.word	0x24000310

08002530 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002534:	4803      	ldr	r0, [pc, #12]	@ (8002544 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002536:	f004 ff79 	bl	800742c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800253a:	4803      	ldr	r0, [pc, #12]	@ (8002548 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800253c:	f004 ff76 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	24000278 	.word	0x24000278
 8002548:	2400035c 	.word	0x2400035c

0800254c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <TIM5_IRQHandler+0x10>)
 8002552:	f004 ff6b 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2400022c 	.word	0x2400022c

08002560 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <LPTIM1_IRQHandler+0x10>)
 8002566:	f001 ff07 	bl	8004378 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000110 	.word	0x24000110

08002574 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <TIM15_IRQHandler+0x10>)
 800257a:	f004 ff57 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	240003a8 	.word	0x240003a8

08002588 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <TIM16_IRQHandler+0x10>)
 800258e:	f004 ff4d 	bl	800742c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	240003f4 	.word	0x240003f4

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025a0:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <SystemInit+0xe4>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	4a36      	ldr	r2, [pc, #216]	@ (8002680 <SystemInit+0xe4>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025b0:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <SystemInit+0xe8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d807      	bhi.n	80025cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <SystemInit+0xe8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 030f 	bic.w	r3, r3, #15
 80025c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <SystemInit+0xe8>)
 80025c6:	f043 0307 	orr.w	r3, r3, #7
 80025ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <SystemInit+0xec>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <SystemInit+0xec>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <SystemInit+0xec>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <SystemInit+0xec>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4929      	ldr	r1, [pc, #164]	@ (8002688 <SystemInit+0xec>)
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <SystemInit+0xf0>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ea:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <SystemInit+0xe8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <SystemInit+0xe8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 030f 	bic.w	r3, r3, #15
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <SystemInit+0xe8>)
 8002600:	f043 0307 	orr.w	r3, r3, #7
 8002604:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <SystemInit+0xec>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <SystemInit+0xec>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <SystemInit+0xec>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <SystemInit+0xec>)
 800261a:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <SystemInit+0xf4>)
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <SystemInit+0xec>)
 8002620:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <SystemInit+0xf8>)
 8002622:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002624:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <SystemInit+0xec>)
 8002626:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <SystemInit+0xfc>)
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <SystemInit+0xec>)
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <SystemInit+0xec>)
 8002632:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <SystemInit+0xfc>)
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <SystemInit+0xec>)
 8002638:	2200      	movs	r2, #0
 800263a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <SystemInit+0xec>)
 800263e:	4a16      	ldr	r2, [pc, #88]	@ (8002698 <SystemInit+0xfc>)
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <SystemInit+0xec>)
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <SystemInit+0xec>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0e      	ldr	r2, [pc, #56]	@ (8002688 <SystemInit+0xec>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <SystemInit+0xec>)
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <SystemInit+0x100>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <SystemInit+0x104>)
 8002660:	4013      	ands	r3, r2
 8002662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002666:	d202      	bcs.n	800266e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <SystemInit+0x108>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <SystemInit+0x10c>)
 8002670:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002674:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	52002000 	.word	0x52002000
 8002688:	58024400 	.word	0x58024400
 800268c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002690:	02020200 	.word	0x02020200
 8002694:	01ff0000 	.word	0x01ff0000
 8002698:	01010280 	.word	0x01010280
 800269c:	5c001000 	.word	0x5c001000
 80026a0:	ffff0000 	.word	0xffff0000
 80026a4:	51008108 	.word	0x51008108
 80026a8:	52004000 	.word	0x52004000

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b0:	f7ff ff74 	bl	800259c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f005 ff55 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7fd fdfb 	bl	80002d8 <main>
  bx  lr
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026ec:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80026f0:	08009370 	.word	0x08009370
  ldr r2, =_sbss
 80026f4:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80026f8:	240023a0 	.word	0x240023a0

080026fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC3_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002706:	2003      	movs	r0, #3
 8002708:	f000 f968 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800270c:	f002 ff70 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_Init+0x68>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4913      	ldr	r1, [pc, #76]	@ (800276c <HAL_Init+0x6c>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_Init+0x68>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a0e      	ldr	r2, [pc, #56]	@ (800276c <HAL_Init+0x6c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_Init+0x70>)
 8002742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_Init+0x74>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274a:	200f      	movs	r0, #15
 800274c:	f000 f814 	bl	8002778 <HAL_InitTick>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e002      	b.n	8002760 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800275a:	f7ff fa39 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	58024400 	.word	0x58024400
 800276c:	08009180 	.word	0x08009180
 8002770:	24000008 	.word	0x24000008
 8002774:	24000004 	.word	0x24000004

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002780:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_InitTick+0x60>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e021      	b.n	80027d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_InitTick+0x64>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_InitTick+0x60>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800279a:	fbb3 f3f1 	udiv	r3, r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f94d 	bl	8002a42 <HAL_SYSTICK_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00e      	b.n	80027d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d80a      	bhi.n	80027ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b8:	2200      	movs	r2, #0
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f000 f917 	bl	80029f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c4:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <HAL_InitTick+0x68>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	24000010 	.word	0x24000010
 80027dc:	24000004 	.word	0x24000004
 80027e0:	2400000c 	.word	0x2400000c

080027e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_IncTick+0x20>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_IncTick+0x24>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <HAL_IncTick+0x24>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	24000010 	.word	0x24000010
 8002808:	2400239c 	.word	0x2400239c

0800280c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return uwTick;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <HAL_GetTick+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2400239c 	.word	0x2400239c

08002824 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <HAL_GetREVID+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0c1b      	lsrs	r3, r3, #16
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	5c001000 	.word	0x5c001000

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <__NVIC_SetPriorityGrouping+0x40>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	4313      	orrs	r3, r2
 8002868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286a:	4a04      	ldr	r2, [pc, #16]	@ (800287c <__NVIC_SetPriorityGrouping+0x40>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60d3      	str	r3, [r2, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00
 8002880:	05fa0000 	.word	0x05fa0000

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4907      	ldr	r1, [pc, #28]	@ (80028d8 <__NVIC_EnableIRQ+0x38>)
 80028ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	@ (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <__NVIC_SetPriority+0x50>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff8e 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff29 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a00:	f7ff ff40 	bl	8002884 <__NVIC_GetPriorityGrouping>
 8002a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff90 	bl	8002930 <NVIC_EncodePriority>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff5f 	bl	80028dc <__NVIC_SetPriority>
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff33 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffa4 	bl	8002998 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a60:	f3bf 8f5f 	dmb	sy
}
 8002a64:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <HAL_MPU_Disable+0x28>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <HAL_MPU_Disable+0x28>)
 8002a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a70:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_MPU_Disable+0x2c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00
 8002a88:	e000ed90 	.word	0xe000ed90

08002a8c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <HAL_MPU_Enable+0x38>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <HAL_MPU_Enable+0x3c>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_MPU_Enable+0x3c>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002aaa:	f3bf 8f4f 	dsb	sy
}
 8002aae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ab0:	f3bf 8f6f 	isb	sy
}
 8002ab4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed90 	.word	0xe000ed90
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	785a      	ldrb	r2, [r3, #1]
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_MPU_ConfigRegion+0x7c>)
 8002ada:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <HAL_MPU_ConfigRegion+0x7c>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <HAL_MPU_ConfigRegion+0x7c>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002ae8:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_MPU_ConfigRegion+0x7c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7b1b      	ldrb	r3, [r3, #12]
 8002af4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7adb      	ldrb	r3, [r3, #11]
 8002afa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7a9b      	ldrb	r3, [r3, #10]
 8002b02:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7b5b      	ldrb	r3, [r3, #13]
 8002b0a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7b9b      	ldrb	r3, [r3, #14]
 8002b12:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7bdb      	ldrb	r3, [r3, #15]
 8002b1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7a5b      	ldrb	r3, [r3, #9]
 8002b22:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7a1b      	ldrb	r3, [r3, #8]
 8002b2a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b2c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b36:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b38:	6113      	str	r3, [r2, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed90 	.word	0xe000ed90

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b5a:	4b89      	ldr	r3, [pc, #548]	@ (8002d80 <HAL_GPIO_Init+0x234>)
 8002b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b5e:	e194      	b.n	8002e8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8186 	beq.w	8002e84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_Init+0x44>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d130      	bne.n	8002bf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0201 	and.w	r2, r3, #1
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d017      	beq.n	8002c2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d123      	bne.n	8002c82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	69b9      	ldr	r1, [r7, #24]
 8002c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80e0 	beq.w	8002e84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <HAL_GPIO_Init+0x238>)
 8002cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cca:	4a2e      	ldr	r2, [pc, #184]	@ (8002d84 <HAL_GPIO_Init+0x238>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_GPIO_Init+0x238>)
 8002cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce2:	4a29      	ldr	r2, [pc, #164]	@ (8002d88 <HAL_GPIO_Init+0x23c>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a20      	ldr	r2, [pc, #128]	@ (8002d8c <HAL_GPIO_Init+0x240>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d052      	beq.n	8002db4 <HAL_GPIO_Init+0x268>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <HAL_GPIO_Init+0x244>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1e      	ldr	r2, [pc, #120]	@ (8002d94 <HAL_GPIO_Init+0x248>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <HAL_GPIO_Init+0x24c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	@ (8002d9c <HAL_GPIO_Init+0x250>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_GPIO_Init+0x254>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <HAL_GPIO_Init+0x258>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_GPIO_Init+0x25c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x216>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <HAL_GPIO_Init+0x260>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x212>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_GPIO_Init+0x264>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x20e>
 8002d56:	2309      	movs	r3, #9
 8002d58:	e02d      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	e02b      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	e029      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e027      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d66:	2306      	movs	r3, #6
 8002d68:	e025      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	e023      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e021      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e01f      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e01d      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e01b      	b.n	8002db6 <HAL_GPIO_Init+0x26a>
 8002d7e:	bf00      	nop
 8002d80:	58000080 	.word	0x58000080
 8002d84:	58024400 	.word	0x58024400
 8002d88:	58000400 	.word	0x58000400
 8002d8c:	58020000 	.word	0x58020000
 8002d90:	58020400 	.word	0x58020400
 8002d94:	58020800 	.word	0x58020800
 8002d98:	58020c00 	.word	0x58020c00
 8002d9c:	58021000 	.word	0x58021000
 8002da0:	58021400 	.word	0x58021400
 8002da4:	58021800 	.word	0x58021800
 8002da8:	58021c00 	.word	0x58021c00
 8002dac:	58022000 	.word	0x58022000
 8002db0:	58022400 	.word	0x58022400
 8002db4:	2300      	movs	r3, #0
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f002 0203 	and.w	r2, r2, #3
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc6:	4938      	ldr	r1, [pc, #224]	@ (8002ea8 <HAL_GPIO_Init+0x35c>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f ae63 	bne.w	8002b60 <HAL_GPIO_Init+0x14>
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	3724      	adds	r7, #36	@ 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	58000400 	.word	0x58000400

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0bd      	b.n	800306e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d031      	beq.n	8002f9a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8003078 <HAL_HRTIM_Init+0x198>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10e      	bne.n	8002f5e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002f40:	4b4e      	ldr	r3, [pc, #312]	@ (800307c <HAL_HRTIM_Init+0x19c>)
 8002f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f46:	4a4d      	ldr	r2, [pc, #308]	@ (800307c <HAL_HRTIM_Init+0x19c>)
 8002f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f50:	4b4a      	ldr	r3, [pc, #296]	@ (800307c <HAL_HRTIM_Init+0x19c>)
 8002f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f6c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f82:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe fe32 	bl	8001c04 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fba:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
 8002fe6:	e03e      	b.n	8003066 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002fe8:	7dfa      	ldrb	r2, [r7, #23]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3318      	adds	r3, #24
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002ffc:	7dfa      	ldrb	r2, [r7, #23]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	331c      	adds	r3, #28
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003010:	7dfa      	ldrb	r2, [r7, #23]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3320      	adds	r3, #32
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003024:	7dfa      	ldrb	r2, [r7, #23]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3324      	adds	r3, #36	@ 0x24
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003038:	7dfa      	ldrb	r2, [r7, #23]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3328      	adds	r3, #40	@ 0x28
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800304c:	7dfa      	ldrb	r2, [r7, #23]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3330      	adds	r3, #48	@ 0x30
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	3301      	adds	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b05      	cmp	r3, #5
 800306a:	d9bd      	bls.n	8002fe8 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40017400 	.word	0x40017400
 800307c:	58024400 	.word	0x58024400

08003080 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d101      	bne.n	800309c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	e015      	b.n	80030c8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d104      	bne.n	80030b4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa88 	bl	80035c2 <HRTIM_MasterBase_Config>
 80030b2:	e004      	b.n	80030be <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fab1 	bl	8003620 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d101      	bne.n	80030ec <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
 80030ea:	e01c      	b.n	8003126 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_HRTIM_EventConfig+0x2a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e015      	b.n	8003126 <HAL_HRTIM_EventConfig+0x56>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fd44 	bl	8003b9c <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d101      	bne.n	8003148 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
 8003146:	e025      	b.n	8003194 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_HRTIM_EventPrescalerConfig+0x28>
 8003152:	2302      	movs	r3, #2
 8003154:	e01e      	b.n	8003194 <HAL_HRTIM_EventPrescalerConfig+0x66>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 800316e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d101      	bne.n	80031bc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
 80031ba:	e05f      	b.n	800327c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e058      	b.n	800327c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d104      	bne.n	80031ea <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa5c 	bl	80036a0 <HRTIM_MasterWaveform_Config>
 80031e8:	e004      	b.n	80031f4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fabc 	bl	800376c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4403      	add	r3, r0
 8003206:	3320      	adds	r3, #32
 8003208:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4403      	add	r3, r0
 800321c:	3324      	adds	r3, #36	@ 0x24
 800321e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	3328      	adds	r3, #40	@ 0x28
 8003234:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4403      	add	r3, r0
 8003248:	332c      	adds	r3, #44	@ 0x2c
 800324a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6919      	ldr	r1, [r3, #16]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4403      	add	r3, r0
 800325e:	3330      	adds	r3, #48	@ 0x30
 8003260:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fec1 	bl	8003fec <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d101      	bne.n	80032a2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	e157      	b.n	8003552 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e150      	b.n	8003552 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d140      	bne.n	8003348 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	2b07      	cmp	r3, #7
 80032cc:	d82a      	bhi.n	8003324 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80032ce:	a201      	add	r2, pc, #4	@ (adr r2, 80032d4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f5 	.word	0x080032f5
 80032d8:	08003301 	.word	0x08003301
 80032dc:	08003325 	.word	0x08003325
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	08003325 	.word	0x08003325
 80032e8:	08003325 	.word	0x08003325
 80032ec:	08003325 	.word	0x08003325
 80032f0:	08003319 	.word	0x08003319
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	61da      	str	r2, [r3, #28]
        break;
 80032fe:	e01a      	b.n	8003336 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 800330a:	e014      	b.n	8003336 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8003316:	e00e      	b.n	8003336 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003322:	e008      	b.n	8003336 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2207      	movs	r2, #7
 8003328:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8003334:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b07      	cmp	r3, #7
 8003340:	f040 80fe 	bne.w	8003540 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e104      	b.n	8003552 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	2b07      	cmp	r3, #7
 800334e:	f200 80e3 	bhi.w	8003518 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003352:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003379 	.word	0x08003379
 800335c:	0800338d 	.word	0x0800338d
 8003360:	08003519 	.word	0x08003519
 8003364:	08003449 	.word	0x08003449
 8003368:	08003519 	.word	0x08003519
 800336c:	08003519 	.word	0x08003519
 8003370:	08003519 	.word	0x08003519
 8003374:	0800345d 	.word	0x0800345d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	440b      	add	r3, r1
 8003386:	339c      	adds	r3, #156	@ 0x9c
 8003388:	601a      	str	r2, [r3, #0]
        break;
 800338a:	e0d1      	b.n	8003530 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	01db      	lsls	r3, r3, #7
 8003398:	440b      	add	r3, r1
 800339a:	33a4      	adds	r3, #164	@ 0xa4
 800339c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03f      	beq.n	8003426 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	01db      	lsls	r3, r3, #7
 80033b0:	4413      	add	r3, r2
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6811      	ldr	r1, [r2, #0]
 80033b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3301      	adds	r3, #1
 80033c0:	01db      	lsls	r3, r3, #7
 80033c2:	440b      	add	r3, r1
 80033c4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3301      	adds	r3, #1
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	4413      	add	r3, r2
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	6809      	ldr	r1, [r1, #0]
 80033dc:	431a      	orrs	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	01db      	lsls	r3, r3, #7
 80033e4:	440b      	add	r3, r1
 80033e6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f0:	d109      	bne.n	8003406 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	01db      	lsls	r3, r3, #7
 80033fe:	440b      	add	r3, r1
 8003400:	339c      	adds	r3, #156	@ 0x9c
 8003402:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003404:	e091      	b.n	800352a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800340e:	f040 808c 	bne.w	800352a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	01db      	lsls	r3, r3, #7
 800341e:	440b      	add	r3, r1
 8003420:	33a8      	adds	r3, #168	@ 0xa8
 8003422:	601a      	str	r2, [r3, #0]
         break;
 8003424:	e081      	b.n	800352a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3301      	adds	r3, #1
 800342e:	01db      	lsls	r3, r3, #7
 8003430:	4413      	add	r3, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	6811      	ldr	r1, [r2, #0]
 8003438:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	01db      	lsls	r3, r3, #7
 8003442:	440b      	add	r3, r1
 8003444:	601a      	str	r2, [r3, #0]
         break;
 8003446:	e070      	b.n	800352a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6819      	ldr	r1, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	01db      	lsls	r3, r3, #7
 8003454:	440b      	add	r3, r1
 8003456:	33a8      	adds	r3, #168	@ 0xa8
 8003458:	601a      	str	r2, [r3, #0]
        break;
 800345a:	e069      	b.n	8003530 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	01db      	lsls	r3, r3, #7
 8003468:	440b      	add	r3, r1
 800346a:	33ac      	adds	r3, #172	@ 0xac
 800346c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03f      	beq.n	80034f6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	01db      	lsls	r3, r3, #7
 8003480:	4413      	add	r3, r2
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	6811      	ldr	r1, [r2, #0]
 8003488:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3301      	adds	r3, #1
 8003490:	01db      	lsls	r3, r3, #7
 8003492:	440b      	add	r3, r1
 8003494:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3301      	adds	r3, #1
 800349e:	01db      	lsls	r3, r3, #7
 80034a0:	4413      	add	r3, r2
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	6809      	ldr	r1, [r1, #0]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3301      	adds	r3, #1
 80034b4:	01db      	lsls	r3, r3, #7
 80034b6:	440b      	add	r3, r1
 80034b8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c2:	d109      	bne.n	80034d8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	01db      	lsls	r3, r3, #7
 80034d0:	440b      	add	r3, r1
 80034d2:	339c      	adds	r3, #156	@ 0x9c
 80034d4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80034d6:	e02a      	b.n	800352e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034e0:	d125      	bne.n	800352e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6819      	ldr	r1, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	01db      	lsls	r3, r3, #7
 80034ee:	440b      	add	r3, r1
 80034f0:	33a8      	adds	r3, #168	@ 0xa8
 80034f2:	601a      	str	r2, [r3, #0]
         break;
 80034f4:	e01b      	b.n	800352e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	3301      	adds	r3, #1
 80034fe:	01db      	lsls	r3, r3, #7
 8003500:	4413      	add	r3, r2
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6811      	ldr	r1, [r2, #0]
 8003508:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	01db      	lsls	r3, r3, #7
 8003512:	440b      	add	r3, r1
 8003514:	601a      	str	r2, [r3, #0]
         break;
 8003516:	e00a      	b.n	800352e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2207      	movs	r2, #7
 800351c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8003528:	e002      	b.n	8003530 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800352e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b07      	cmp	r3, #7
 800353a:	d101      	bne.n	8003540 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e008      	b.n	8003552 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d101      	bne.n	800357e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	e01d      	b.n	80035ba <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003588:	2302      	movs	r3, #2
 800358a:	e016      	b.n	80035ba <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fa22 	bl	80039ec <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f023 0318 	bic.w	r3, r3, #24
 80035ec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6852      	ldr	r2, [r2, #4]
 8003612:	619a      	str	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3301      	adds	r3, #1
 8003634:	01db      	lsls	r3, r3, #7
 8003636:	4413      	add	r3, r2
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0307 	bic.w	r3, r3, #7
 8003642:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0318 	bic.w	r3, r3, #24
 8003654:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3301      	adds	r3, #1
 8003668:	01db      	lsls	r3, r3, #7
 800366a:	4413      	add	r3, r2
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	01db      	lsls	r3, r3, #7
 800367c:	440b      	add	r3, r1
 800367e:	3394      	adds	r3, #148	@ 0x94
 8003680:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	01db      	lsls	r3, r3, #7
 800368e:	440b      	add	r3, r1
 8003690:	3398      	adds	r3, #152	@ 0x98
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0320 	bic.w	r3, r3, #32
 80036c2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036d4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036e6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036f8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800370a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800371c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003730:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003742:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800376c:	b480      	push	{r7}
 800376e:	b08b      	sub	sp, #44	@ 0x2c
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3301      	adds	r3, #1
 8003780:	01db      	lsls	r3, r3, #7
 8003782:	4413      	add	r3, r2
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	6811      	ldr	r1, [r2, #0]
 800378a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	440b      	add	r3, r1
 8003796:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3301      	adds	r3, #1
 80037a0:	01db      	lsls	r3, r3, #7
 80037a2:	4413      	add	r3, r2
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	01db      	lsls	r3, r3, #7
 80037b0:	4413      	add	r3, r2
 80037b2:	33e8      	adds	r3, #232	@ 0xe8
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	01db      	lsls	r3, r3, #7
 80037c0:	4413      	add	r3, r2
 80037c2:	33e4      	adds	r3, #228	@ 0xe4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80037d0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	f023 0320 	bic.w	r3, r3, #32
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e0:	4313      	orrs	r3, r2
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f2:	4313      	orrs	r3, r2
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003804:	4313      	orrs	r3, r2
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003816:	4313      	orrs	r3, r2
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003828:	4313      	orrs	r3, r2
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383a:	4313      	orrs	r3, r2
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800384e:	d103      	bne.n	8003858 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003866:	4313      	orrs	r3, r2
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003878:	4313      	orrs	r3, r2
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388a:	4313      	orrs	r3, r2
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f023 031f 	bic.w	r3, r3, #31
 8003894:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038aa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80038d8:	d004      	beq.n	80038e4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80038e2:	d103      	bne.n	80038ec <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d108      	bne.n	80038fe <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80038f2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b04      	cmp	r3, #4
 8003908:	d843      	bhi.n	8003992 <HRTIM_TimingUnitWaveform_Config+0x226>
 800390a:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003925 	.word	0x08003925
 8003914:	0800393b 	.word	0x0800393b
 8003918:	08003951 	.word	0x08003951
 800391c:	08003967 	.word	0x08003967
 8003920:	0800397d 	.word	0x0800397d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800392a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	61fb      	str	r3, [r7, #28]
      break;
 8003938:	e02c      	b.n	8003994 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003940:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	4313      	orrs	r3, r2
 800394c:	61fb      	str	r3, [r7, #28]
      break;
 800394e:	e021      	b.n	8003994 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003956:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	4313      	orrs	r3, r2
 8003962:	61fb      	str	r3, [r7, #28]
      break;
 8003964:	e016      	b.n	8003994 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800396c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	61fb      	str	r3, [r7, #28]
      break;
 800397a:	e00b      	b.n	8003994 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003982:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	015b      	lsls	r3, r3, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	4313      	orrs	r3, r2
 800398e:	61fb      	str	r3, [r7, #28]
      break;
 8003990:	e000      	b.n	8003994 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003992:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3301      	adds	r3, #1
 800399c:	01db      	lsls	r3, r3, #7
 800399e:	4413      	add	r3, r2
 80039a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	4413      	add	r3, r2
 80039ae:	33e8      	adds	r3, #232	@ 0xe8
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	01db      	lsls	r3, r3, #7
 80039bc:	4413      	add	r3, r2
 80039be:	33e4      	adds	r3, #228	@ 0xe4
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	01db      	lsls	r3, r3, #7
 80039cc:	4413      	add	r3, r2
 80039ce:	33d4      	adds	r3, #212	@ 0xd4
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80039de:	bf00      	nop
 80039e0:	372c      	adds	r7, #44	@ 0x2c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	@ 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	01db      	lsls	r3, r3, #7
 8003a06:	4413      	add	r3, r2
 8003a08:	33e4      	adds	r3, #228	@ 0xe4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	01db      	lsls	r3, r3, #7
 8003a16:	4413      	add	r3, r2
 8003a18:	33b8      	adds	r3, #184	@ 0xb8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a24:	d04d      	beq.n	8003ac2 <HRTIM_OutputConfig+0xd6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2c:	d85e      	bhi.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a34:	d032      	beq.n	8003a9c <HRTIM_OutputConfig+0xb0>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a3c:	d856      	bhi.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b80      	cmp	r3, #128	@ 0x80
 8003a42:	d03e      	beq.n	8003ac2 <HRTIM_OutputConfig+0xd6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b80      	cmp	r3, #128	@ 0x80
 8003a48:	d850      	bhi.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	d025      	beq.n	8003a9c <HRTIM_OutputConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b40      	cmp	r3, #64	@ 0x40
 8003a54:	d84a      	bhi.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d01f      	beq.n	8003a9c <HRTIM_OutputConfig+0xb0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d841      	bhi.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d33e      	bcc.n	8003aec <HRTIM_OutputConfig+0x100>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3b02      	subs	r3, #2
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	4b48      	ldr	r3, [pc, #288]	@ (8003b98 <HRTIM_OutputConfig+0x1ac>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11c      	bne.n	8003ac2 <HRTIM_OutputConfig+0xd6>
 8003a88:	f244 0304 	movw	r3, #16388	@ 0x4004
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d027      	beq.n	8003aec <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	01db      	lsls	r3, r3, #7
 8003aa8:	440b      	add	r3, r1
 8003aaa:	33bc      	adds	r3, #188	@ 0xbc
 8003aac:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	01db      	lsls	r3, r3, #7
 8003aba:	440b      	add	r3, r1
 8003abc:	33c0      	adds	r3, #192	@ 0xc0
 8003abe:	601a      	str	r2, [r3, #0]
      break;
 8003ac0:	e015      	b.n	8003aee <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	440b      	add	r3, r1
 8003ad0:	33c4      	adds	r3, #196	@ 0xc4
 8003ad2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	01db      	lsls	r3, r3, #7
 8003ae0:	440b      	add	r3, r1
 8003ae2:	33c8      	adds	r3, #200	@ 0xc8
 8003ae4:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	61bb      	str	r3, [r7, #24]
      break;
 8003aea:	e000      	b.n	8003aee <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8003aec:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003aee:	22fe      	movs	r2, #254	@ 0xfe
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d111      	bne.n	8003b7a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10c      	bne.n	8003b7a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	01db      	lsls	r3, r3, #7
 8003b82:	4413      	add	r3, r2
 8003b84:	33e4      	adds	r3, #228	@ 0xe4
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	@ 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40000041 	.word	0x40000041

08003b9c <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	@ 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8003bb0:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8003bba:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8003bc4:	617b      	str	r3, [r7, #20]

  switch (Event)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b0a      	cmp	r3, #10
 8003bca:	f200 8208 	bhi.w	8003fde <HRTIM_EventConfig+0x442>
 8003bce:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <HRTIM_EventConfig+0x38>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c01 	.word	0x08003c01
 8003bd8:	08003c21 	.word	0x08003c21
 8003bdc:	08003c77 	.word	0x08003c77
 8003be0:	08003cd3 	.word	0x08003cd3
 8003be4:	08003d31 	.word	0x08003d31
 8003be8:	08003d8f 	.word	0x08003d8f
 8003bec:	08003ded 	.word	0x08003ded
 8003bf0:	08003e4b 	.word	0x08003e4b
 8003bf4:	08003eaf 	.word	0x08003eaf
 8003bf8:	08003f13 	.word	0x08003f13
 8003bfc:	08003f79 	.word	0x08003f79
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8003c1e:	e1df      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c26:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0318 	and.w	r3, r3, #24
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8003c74:	e1b4      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8003c7c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	019b      	lsls	r3, r3, #6
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8003cd0:	e186      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003cd8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	031b      	lsls	r3, r3, #12
 8003ce0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	031b      	lsls	r3, r3, #12
 8003cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	031b      	lsls	r3, r3, #12
 8003d00:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8003d2e:	e157      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8003d36:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	049b      	lsls	r3, r3, #18
 8003d3e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	049b      	lsls	r3, r3, #18
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	049b      	lsls	r3, r3, #18
 8003d5e:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	049b      	lsls	r3, r3, #18
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8003d8c:	e128      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003d94:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	061b      	lsls	r3, r3, #24
 8003dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	061b      	lsls	r3, r3, #24
 8003dbc:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8003dea:	e0f9      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f023 031f 	bic.w	r3, r3, #31
 8003df2:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0318 	and.w	r3, r3, #24
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 030f 	bic.w	r3, r3, #15
 8003e24:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8003e48:	e0ca      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8003e50:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	019b      	lsls	r3, r3, #6
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8003e86:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8003eac:	e098      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8003eb4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	031b      	lsls	r3, r3, #12
 8003ebc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	031b      	lsls	r3, r3, #12
 8003ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	031b      	lsls	r3, r3, #12
 8003edc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eec:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	031b      	lsls	r3, r3, #12
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8003f10:	e066      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8003f18:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	049b      	lsls	r3, r3, #18
 8003f20:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	049b      	lsls	r3, r3, #18
 8003f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	049b      	lsls	r3, r3, #18
 8003f40:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8003f50:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	049b      	lsls	r3, r3, #18
 8003f58:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8003f76:	e033      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8003f7e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003fb6:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8003fdc:	e000      	b.n	8003fe0 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8003fde:	bf00      	nop
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	3724      	adds	r7, #36	@ 0x24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d851      	bhi.n	80040a0 <HRTIM_ForceRegistersUpdate+0xb4>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HRTIM_ForceRegistersUpdate+0x18>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004033 	.word	0x08004033
 8004008:	08004049 	.word	0x08004049
 800400c:	0800405f 	.word	0x0800405f
 8004010:	08004075 	.word	0x08004075
 8004014:	0800408b 	.word	0x0800408b
 8004018:	0800401d 	.word	0x0800401d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004030:	e037      	b.n	80040a2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0202 	orr.w	r2, r2, #2
 8004042:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004046:	e02c      	b.n	80040a2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0204 	orr.w	r2, r2, #4
 8004058:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800405c:	e021      	b.n	80040a2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004072:	e016      	b.n	80040a2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0210 	orr.w	r2, r2, #16
 8004084:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004088:	e00b      	b.n	80040a2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0220 	orr.w	r2, r2, #32
 800409a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800409e:	e000      	b.n	80040a2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80040a0:	bf00      	nop
  }
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e097      	b.n	80041f2 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fd fe29 	bl	8001d34 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d004      	beq.n	8004104 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004102:	d103      	bne.n	800410c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 031e 	bic.w	r3, r3, #30
 800410a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <HAL_LPTIM_Init+0x14c>)
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <HAL_LPTIM_Init+0x150>)
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004130:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004136:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800413c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004142:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800415a:	4313      	orrs	r3, r2
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d004      	beq.n	8004174 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004172:	d107      	bne.n	8004184 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800417c:	4313      	orrs	r3, r2
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800418c:	4293      	cmp	r3, r2
 800418e:	d00a      	beq.n	80041a6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004198:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800419e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a14      	ldr	r2, [pc, #80]	@ (8004204 <HAL_LPTIM_Init+0x154>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_LPTIM_Init+0x112>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <HAL_LPTIM_Init+0x158>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80041d2:	e009      	b.n	80041e8 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <HAL_LPTIM_Init+0x15c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d104      	bne.n	80041e8 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	ffff1f3f 	.word	0xffff1f3f
 8004200:	ff19f1fe 	.word	0xff19f1fe
 8004204:	40002400 	.word	0x40002400
 8004208:	58002400 	.word	0x58002400
 800420c:	58002800 	.word	0x58002800

08004210 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004254:	2110      	movs	r1, #16
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f97e 	bl	8004558 <LPTIM_WaitForFlag>
 800425c:	4603      	mov	r3, r0
 800425e:	2b03      	cmp	r3, #3
 8004260:	d101      	bne.n	8004266 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e01d      	b.n	80042a2 <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2208      	movs	r2, #8
 800426c:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004276:	2108      	movs	r1, #8
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f96d 	bl	8004558 <LPTIM_WaitForFlag>
 800427e:	4603      	mov	r3, r0
 8004280:	2b03      	cmp	r3, #3
 8004282:	d101      	bne.n	8004288 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e00c      	b.n	80042a2 <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0204 	orr.w	r2, r2, #4
 8004296:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d00c      	beq.n	80042de <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042cc:	d107      	bne.n	80042de <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 80042dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2210      	movs	r2, #16
 80042f4:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80042fe:	2110      	movs	r1, #16
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f929 	bl	8004558 <LPTIM_WaitForFlag>
 8004306:	4603      	mov	r3, r0
 8004308:	2b03      	cmp	r3, #3
 800430a:	d101      	bne.n	8004310 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e02f      	b.n	8004370 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f951 	bl	80045b8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f90f 	bl	800453a <HAL_LPTIM_GetState>
 800431c:	4603      	mov	r3, r0
 800431e:	2b03      	cmp	r3, #3
 8004320:	d101      	bne.n	8004326 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e024      	b.n	8004370 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0210 	orr.w	r2, r2, #16
 8004334:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0202 	orr.w	r2, r2, #2
 8004344:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0204 	orr.w	r2, r2, #4
 8004364:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10d      	bne.n	80043aa <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d106      	bne.n	80043aa <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f882 	bl	80044ae <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d10d      	bne.n	80043d4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d106      	bne.n	80043d4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2202      	movs	r2, #2
 80043cc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f877 	bl	80044c2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d10d      	bne.n	80043fe <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d106      	bne.n	80043fe <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2204      	movs	r2, #4
 80043f6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f86c 	bl	80044d6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b08      	cmp	r3, #8
 800440a:	d10d      	bne.n	8004428 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b08      	cmp	r3, #8
 8004418:	d106      	bne.n	8004428 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2208      	movs	r2, #8
 8004420:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f861 	bl	80044ea <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b10      	cmp	r3, #16
 8004434:	d10d      	bne.n	8004452 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d106      	bne.n	8004452 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2210      	movs	r2, #16
 800444a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f856 	bl	80044fe <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d10d      	bne.n	800447c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b20      	cmp	r3, #32
 800446c:	d106      	bne.n	800447c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f84b 	bl	8004512 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d10d      	bne.n	80044a6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b40      	cmp	r3, #64	@ 0x40
 8004496:	d106      	bne.n	80044a6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2240      	movs	r2, #64	@ 0x40
 800449e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f840 	bl	8004526 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004548:	b2db      	uxtb	r3, r3
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004566:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <LPTIM_WaitForFlag+0x58>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <LPTIM_WaitForFlag+0x5c>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	0b9b      	lsrs	r3, r3, #14
 8004572:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4013      	ands	r3, r2
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d002      	beq.n	80045a2 <LPTIM_WaitForFlag+0x4a>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ec      	bne.n	800457c <LPTIM_WaitForFlag+0x24>

  return result;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	24000004 	.word	0x24000004
 80045b4:	d1b71759 	.word	0xd1b71759

080045b8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08c      	sub	sp, #48	@ 0x30
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c4:	f3ef 8310 	mrs	r3, PRIMASK
 80045c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80045ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ce:	2301      	movs	r3, #1
 80045d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a81      	ldr	r2, [pc, #516]	@ (80047e4 <LPTIM_Disable+0x22c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02d      	beq.n	8004640 <LPTIM_Disable+0x88>
 80045e4:	4a7f      	ldr	r2, [pc, #508]	@ (80047e4 <LPTIM_Disable+0x22c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d830      	bhi.n	800464c <LPTIM_Disable+0x94>
 80045ea:	4a7f      	ldr	r2, [pc, #508]	@ (80047e8 <LPTIM_Disable+0x230>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d021      	beq.n	8004634 <LPTIM_Disable+0x7c>
 80045f0:	4a7d      	ldr	r2, [pc, #500]	@ (80047e8 <LPTIM_Disable+0x230>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d82a      	bhi.n	800464c <LPTIM_Disable+0x94>
 80045f6:	4a7d      	ldr	r2, [pc, #500]	@ (80047ec <LPTIM_Disable+0x234>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d015      	beq.n	8004628 <LPTIM_Disable+0x70>
 80045fc:	4a7b      	ldr	r2, [pc, #492]	@ (80047ec <LPTIM_Disable+0x234>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d824      	bhi.n	800464c <LPTIM_Disable+0x94>
 8004602:	4a7b      	ldr	r2, [pc, #492]	@ (80047f0 <LPTIM_Disable+0x238>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <LPTIM_Disable+0x58>
 8004608:	4a7a      	ldr	r2, [pc, #488]	@ (80047f4 <LPTIM_Disable+0x23c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d006      	beq.n	800461c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800460e:	e01d      	b.n	800464c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004610:	4b79      	ldr	r3, [pc, #484]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004614:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800461a:	e018      	b.n	800464e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800461c:	4b76      	ldr	r3, [pc, #472]	@ (80047f8 <LPTIM_Disable+0x240>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004626:	e012      	b.n	800464e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004628:	4b73      	ldr	r3, [pc, #460]	@ (80047f8 <LPTIM_Disable+0x240>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004632:	e00c      	b.n	800464e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004634:	4b70      	ldr	r3, [pc, #448]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004638:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800463e:	e006      	b.n	800464e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004640:	4b6d      	ldr	r3, [pc, #436]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004644:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800464a:	e000      	b.n	800464e <LPTIM_Disable+0x96>
      break;
 800464c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5a      	ldr	r2, [pc, #360]	@ (80047e4 <LPTIM_Disable+0x22c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d059      	beq.n	8004734 <LPTIM_Disable+0x17c>
 8004680:	4a58      	ldr	r2, [pc, #352]	@ (80047e4 <LPTIM_Disable+0x22c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d867      	bhi.n	8004756 <LPTIM_Disable+0x19e>
 8004686:	4a58      	ldr	r2, [pc, #352]	@ (80047e8 <LPTIM_Disable+0x230>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d042      	beq.n	8004712 <LPTIM_Disable+0x15a>
 800468c:	4a56      	ldr	r2, [pc, #344]	@ (80047e8 <LPTIM_Disable+0x230>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d861      	bhi.n	8004756 <LPTIM_Disable+0x19e>
 8004692:	4a56      	ldr	r2, [pc, #344]	@ (80047ec <LPTIM_Disable+0x234>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d02b      	beq.n	80046f0 <LPTIM_Disable+0x138>
 8004698:	4a54      	ldr	r2, [pc, #336]	@ (80047ec <LPTIM_Disable+0x234>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d85b      	bhi.n	8004756 <LPTIM_Disable+0x19e>
 800469e:	4a54      	ldr	r2, [pc, #336]	@ (80047f0 <LPTIM_Disable+0x238>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <LPTIM_Disable+0xf4>
 80046a4:	4a53      	ldr	r2, [pc, #332]	@ (80047f4 <LPTIM_Disable+0x23c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d011      	beq.n	80046ce <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80046aa:	e054      	b.n	8004756 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80046ac:	4b52      	ldr	r3, [pc, #328]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	4a51      	ldr	r2, [pc, #324]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80046bc:	4b4e      	ldr	r3, [pc, #312]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	4a4d      	ldr	r2, [pc, #308]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 80046cc:	e044      	b.n	8004758 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80046ce:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046d4:	4a48      	ldr	r2, [pc, #288]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80046de:	4b46      	ldr	r3, [pc, #280]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046e4:	4a44      	ldr	r2, [pc, #272]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80046ee:	e033      	b.n	8004758 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80046f0:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046f6:	4a40      	ldr	r2, [pc, #256]	@ (80047f8 <LPTIM_Disable+0x240>)
 80046f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004700:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004706:	4a3c      	ldr	r2, [pc, #240]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004708:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800470c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8004710:	e022      	b.n	8004758 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004712:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004718:	4a37      	ldr	r2, [pc, #220]	@ (80047f8 <LPTIM_Disable+0x240>)
 800471a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800471e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004722:	4b35      	ldr	r3, [pc, #212]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004724:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004728:	4a33      	ldr	r2, [pc, #204]	@ (80047f8 <LPTIM_Disable+0x240>)
 800472a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800472e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8004732:	e011      	b.n	8004758 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004736:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800473a:	4a2f      	ldr	r2, [pc, #188]	@ (80047f8 <LPTIM_Disable+0x240>)
 800473c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004740:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004744:	4b2c      	ldr	r3, [pc, #176]	@ (80047f8 <LPTIM_Disable+0x240>)
 8004746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800474a:	4a2b      	ldr	r2, [pc, #172]	@ (80047f8 <LPTIM_Disable+0x240>)
 800474c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004750:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8004754:	e000      	b.n	8004758 <LPTIM_Disable+0x1a0>
      break;
 8004756:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <LPTIM_Disable+0x1ae>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80d1 	beq.w	8004908 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1e      	ldr	r2, [pc, #120]	@ (80047e4 <LPTIM_Disable+0x22c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d031      	beq.n	80047d4 <LPTIM_Disable+0x21c>
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <LPTIM_Disable+0x22c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d842      	bhi.n	80047fc <LPTIM_Disable+0x244>
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <LPTIM_Disable+0x230>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d024      	beq.n	80047c6 <LPTIM_Disable+0x20e>
 800477c:	4a1a      	ldr	r2, [pc, #104]	@ (80047e8 <LPTIM_Disable+0x230>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d83c      	bhi.n	80047fc <LPTIM_Disable+0x244>
 8004782:	4a1a      	ldr	r2, [pc, #104]	@ (80047ec <LPTIM_Disable+0x234>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d017      	beq.n	80047b8 <LPTIM_Disable+0x200>
 8004788:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <LPTIM_Disable+0x234>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d836      	bhi.n	80047fc <LPTIM_Disable+0x244>
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <LPTIM_Disable+0x238>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <LPTIM_Disable+0x1e4>
 8004794:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <LPTIM_Disable+0x23c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 800479a:	e02f      	b.n	80047fc <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 800479c:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <LPTIM_Disable+0x240>)
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a0:	4a15      	ldr	r2, [pc, #84]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047a2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80047a6:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80047a8:	e029      	b.n	80047fe <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80047aa:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	4a12      	ldr	r2, [pc, #72]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047b0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80047b4:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80047b6:	e022      	b.n	80047fe <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047be:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80047c2:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80047c4:	e01b      	b.n	80047fe <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80047c6:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80047d0:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80047d2:	e014      	b.n	80047fe <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80047d4:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d8:	4a07      	ldr	r2, [pc, #28]	@ (80047f8 <LPTIM_Disable+0x240>)
 80047da:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80047de:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80047e0:	e00d      	b.n	80047fe <LPTIM_Disable+0x246>
 80047e2:	bf00      	nop
 80047e4:	58003000 	.word	0x58003000
 80047e8:	58002c00 	.word	0x58002c00
 80047ec:	58002800 	.word	0x58002800
 80047f0:	40002400 	.word	0x40002400
 80047f4:	58002400 	.word	0x58002400
 80047f8:	58024400 	.word	0x58024400
        break;
 80047fc:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01a      	beq.n	800483a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800481c:	2108      	movs	r1, #8
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fe9a 	bl	8004558 <LPTIM_WaitForFlag>
 8004824:	4603      	mov	r3, r0
 8004826:	2b03      	cmp	r3, #3
 8004828:	d103      	bne.n	8004832 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2203      	movs	r2, #3
 800482e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2208      	movs	r2, #8
 8004838:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004858:	2110      	movs	r1, #16
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fe7c 	bl	8004558 <LPTIM_WaitForFlag>
 8004860:	4603      	mov	r3, r0
 8004862:	2b03      	cmp	r3, #3
 8004864:	d103      	bne.n	800486e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2210      	movs	r2, #16
 8004874:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a32      	ldr	r2, [pc, #200]	@ (8004944 <LPTIM_Disable+0x38c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d039      	beq.n	80048f4 <LPTIM_Disable+0x33c>
 8004880:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <LPTIM_Disable+0x38c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d83f      	bhi.n	8004906 <LPTIM_Disable+0x34e>
 8004886:	4a30      	ldr	r2, [pc, #192]	@ (8004948 <LPTIM_Disable+0x390>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d02a      	beq.n	80048e2 <LPTIM_Disable+0x32a>
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <LPTIM_Disable+0x390>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d839      	bhi.n	8004906 <LPTIM_Disable+0x34e>
 8004892:	4a2e      	ldr	r2, [pc, #184]	@ (800494c <LPTIM_Disable+0x394>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d01b      	beq.n	80048d0 <LPTIM_Disable+0x318>
 8004898:	4a2c      	ldr	r2, [pc, #176]	@ (800494c <LPTIM_Disable+0x394>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d833      	bhi.n	8004906 <LPTIM_Disable+0x34e>
 800489e:	4a2c      	ldr	r2, [pc, #176]	@ (8004950 <LPTIM_Disable+0x398>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <LPTIM_Disable+0x2f4>
 80048a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004954 <LPTIM_Disable+0x39c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80048aa:	e02c      	b.n	8004906 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80048ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b0:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80048b4:	4928      	ldr	r1, [pc, #160]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b8:	4313      	orrs	r3, r2
 80048ba:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 80048bc:	e024      	b.n	8004908 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80048be:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048c6:	4924      	ldr	r1, [pc, #144]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ca:	4313      	orrs	r3, r2
 80048cc:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80048ce:	e01b      	b.n	8004908 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80048d0:	4b21      	ldr	r3, [pc, #132]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048d8:	491f      	ldr	r1, [pc, #124]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	4313      	orrs	r3, r2
 80048de:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80048e0:	e012      	b.n	8004908 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ea:	491b      	ldr	r1, [pc, #108]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ee:	4313      	orrs	r3, r2
 80048f0:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80048f2:	e009      	b.n	8004908 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 80048f4:	4b18      	ldr	r3, [pc, #96]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048fc:	4916      	ldr	r1, [pc, #88]	@ (8004958 <LPTIM_Disable+0x3a0>)
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	4313      	orrs	r3, r2
 8004902:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8004904:	e000      	b.n	8004908 <LPTIM_Disable+0x350>
        break;
 8004906:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f383 8810 	msr	PRIMASK, r3
}
 800493a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800493c:	bf00      	nop
 800493e:	3730      	adds	r7, #48	@ 0x30
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	58003000 	.word	0x58003000
 8004948:	58002c00 	.word	0x58002c00
 800494c:	58002800 	.word	0x58002800
 8004950:	40002400 	.word	0x40002400
 8004954:	58002400 	.word	0x58002400
 8004958:	58024400 	.word	0x58024400

0800495c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004964:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b04      	cmp	r3, #4
 800496e:	d00a      	beq.n	8004986 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004970:	4b16      	ldr	r3, [pc, #88]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e01f      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e01d      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004986:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 0207 	bic.w	r2, r3, #7
 800498e:	490f      	ldr	r1, [pc, #60]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004996:	f7fd ff39 	bl	800280c <HAL_GetTick>
 800499a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800499c:	e009      	b.n	80049b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800499e:	f7fd ff35 	bl	800280c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049ac:	d901      	bls.n	80049b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e007      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049be:	d1ee      	bne.n	800499e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024800 	.word	0x58024800

080049d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	@ 0x30
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f000 bc48 	b.w	8005274 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8088 	beq.w	8004b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f2:	4b99      	ldr	r3, [pc, #612]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049fc:	4b96      	ldr	r3, [pc, #600]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d007      	beq.n	8004a18 <HAL_RCC_OscConfig+0x48>
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	2b18      	cmp	r3, #24
 8004a0c:	d111      	bne.n	8004a32 <HAL_RCC_OscConfig+0x62>
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d10c      	bne.n	8004a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b8f      	ldr	r3, [pc, #572]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d06d      	beq.n	8004b00 <HAL_RCC_OscConfig+0x130>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d169      	bne.n	8004b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f000 bc21 	b.w	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_OscConfig+0x7a>
 8004a3c:	4b86      	ldr	r3, [pc, #536]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a85      	ldr	r2, [pc, #532]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e02e      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x9c>
 8004a52:	4b81      	ldr	r3, [pc, #516]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a80      	ldr	r2, [pc, #512]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7d      	ldr	r2, [pc, #500]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0xc0>
 8004a76:	4b78      	ldr	r3, [pc, #480]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a77      	ldr	r2, [pc, #476]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b75      	ldr	r3, [pc, #468]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a74      	ldr	r2, [pc, #464]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd8>
 8004a90:	4b71      	ldr	r3, [pc, #452]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a70      	ldr	r2, [pc, #448]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b6e      	ldr	r3, [pc, #440]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6d      	ldr	r2, [pc, #436]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fd feac 	bl	800280c <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fd fea8 	bl	800280c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	@ 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e3d4      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aca:	4b63      	ldr	r3, [pc, #396]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xe8>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fe98 	bl	800280c <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fe94 	bl	800280c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e3c0      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004af2:	4b59      	ldr	r3, [pc, #356]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x110>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80ca 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b10:	4b51      	ldr	r3, [pc, #324]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_RCC_OscConfig+0x166>
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b18      	cmp	r3, #24
 8004b2a:	d156      	bne.n	8004bda <HAL_RCC_OscConfig+0x20a>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d151      	bne.n	8004bda <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b36:	4b48      	ldr	r3, [pc, #288]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e392      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b4e:	4b42      	ldr	r3, [pc, #264]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0219 	bic.w	r2, r3, #25
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	493f      	ldr	r1, [pc, #252]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fe54 	bl	800280c <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b68:	f7fd fe50 	bl	800280c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e37c      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b7a:	4b37      	ldr	r3, [pc, #220]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	f7fd fe4d 	bl	8002824 <HAL_GetREVID>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d817      	bhi.n	8004bc4 <HAL_RCC_OscConfig+0x1f4>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d108      	bne.n	8004bae <HAL_RCC_OscConfig+0x1de>
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004baa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bac:	e07a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bae:	4b2a      	ldr	r3, [pc, #168]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	031b      	lsls	r3, r3, #12
 8004bbc:	4926      	ldr	r1, [pc, #152]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc2:	e06f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	061b      	lsls	r3, r3, #24
 8004bd2:	4921      	ldr	r1, [pc, #132]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd8:	e064      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d047      	beq.n	8004c72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004be2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 0219 	bic.w	r2, r3, #25
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	491a      	ldr	r1, [pc, #104]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fe0a 	bl	800280c <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfc:	f7fd fe06 	bl	800280c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e332      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0e:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	f7fd fe03 	bl	8002824 <HAL_GetREVID>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d819      	bhi.n	8004c5c <HAL_RCC_OscConfig+0x28c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d108      	bne.n	8004c42 <HAL_RCC_OscConfig+0x272>
 8004c30:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c38:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3e:	6053      	str	r3, [r2, #4]
 8004c40:	e030      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
 8004c42:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	031b      	lsls	r3, r3, #12
 8004c50:	4901      	ldr	r1, [pc, #4]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
 8004c56:	e025      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	4997      	ldr	r1, [pc, #604]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	e018      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c72:	4b95      	ldr	r3, [pc, #596]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a94      	ldr	r2, [pc, #592]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fdc5 	bl	800280c <HAL_GetTick>
 8004c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fd fdc1 	bl	800280c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e2ed      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c98:	4b8b      	ldr	r3, [pc, #556]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a9 	beq.w	8004e04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb2:	4b85      	ldr	r3, [pc, #532]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cbc:	4b82      	ldr	r3, [pc, #520]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d007      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x308>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b18      	cmp	r3, #24
 8004ccc:	d13a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x374>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d135      	bne.n	8004d44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x320>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b80      	cmp	r3, #128	@ 0x80
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e2c1      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cf0:	f7fd fd98 	bl	8002824 <HAL_GetREVID>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d817      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x35e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d108      	bne.n	8004d18 <HAL_RCC_OscConfig+0x348>
 8004d06:	4b70      	ldr	r3, [pc, #448]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d16:	e075      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d18:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	069b      	lsls	r3, r3, #26
 8004d26:	4968      	ldr	r1, [pc, #416]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d2c:	e06a      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d2e:	4b66      	ldr	r3, [pc, #408]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	4962      	ldr	r1, [pc, #392]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d42:	e05f      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d042      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fd58 	bl	800280c <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d60:	f7fd fd54 	bl	800280c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e280      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d72:	4b55      	ldr	r3, [pc, #340]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d7e:	f7fd fd51 	bl	8002824 <HAL_GetREVID>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d817      	bhi.n	8004dbc <HAL_RCC_OscConfig+0x3ec>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d108      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3d6>
 8004d94:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004da2:	6053      	str	r3, [r2, #4]
 8004da4:	e02e      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
 8004da6:	4b48      	ldr	r3, [pc, #288]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	069b      	lsls	r3, r3, #26
 8004db4:	4944      	ldr	r1, [pc, #272]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
 8004dba:	e023      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
 8004dbc:	4b42      	ldr	r3, [pc, #264]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	493f      	ldr	r1, [pc, #252]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60cb      	str	r3, [r1, #12]
 8004dd0:	e018      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fd fd15 	bl	800280c <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004de6:	f7fd fd11 	bl	800280c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e23d      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df8:	4b33      	ldr	r3, [pc, #204]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d036      	beq.n	8004e7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d019      	beq.n	8004e4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fd fcf2 	bl	800280c <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fcee 	bl	800280c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e21a      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x45c>
 8004e4a:	e018      	b.n	8004e7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fd fcd8 	bl	800280c <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fd fcd4 	bl	800280c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e200      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d039      	beq.n	8004efe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e9e:	f7fd fcb5 	bl	800280c <HAL_GetTick>
 8004ea2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ea6:	f7fd fcb1 	bl	800280c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e1dd      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4d6>
 8004ec4:	e01b      	b.n	8004efe <HAL_RCC_OscConfig+0x52e>
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a9a      	ldr	r2, [pc, #616]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ed8:	f7fd fc98 	bl	800280c <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ee0:	f7fd fc94 	bl	800280c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e1c0      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ef2:	4b92      	ldr	r3, [pc, #584]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8081 	beq.w	800500e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005140 <HAL_RCC_OscConfig+0x770>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a8b      	ldr	r2, [pc, #556]	@ (8005140 <HAL_RCC_OscConfig+0x770>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f18:	f7fd fc78 	bl	800280c <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f20:	f7fd fc74 	bl	800280c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	@ 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e1a0      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f32:	4b83      	ldr	r3, [pc, #524]	@ (8005140 <HAL_RCC_OscConfig+0x770>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x584>
 8004f46:	4b7d      	ldr	r3, [pc, #500]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	4a7c      	ldr	r2, [pc, #496]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f52:	e02d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5e0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10c      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5a6>
 8004f5c:	4b77      	ldr	r3, [pc, #476]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f60:	4a76      	ldr	r2, [pc, #472]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f68:	4b74      	ldr	r3, [pc, #464]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a73      	ldr	r2, [pc, #460]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5e0>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5c8>
 8004f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a6e      	ldr	r2, [pc, #440]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5e0>
 8004f98:	4b68      	ldr	r3, [pc, #416]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a67      	ldr	r2, [pc, #412]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b65      	ldr	r3, [pc, #404]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a64      	ldr	r2, [pc, #400]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fd fc28 	bl	800280c <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fd fc24 	bl	800280c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e14e      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd6:	4b59      	ldr	r3, [pc, #356]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x5f0>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fc12 	bl	800280c <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd fc0e 	bl	800280c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e138      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005002:	4b4e      	ldr	r3, [pc, #312]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 812d 	beq.w	8005272 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005018:	4b48      	ldr	r3, [pc, #288]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005020:	2b18      	cmp	r3, #24
 8005022:	f000 80bd 	beq.w	80051a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	2b02      	cmp	r3, #2
 800502c:	f040 809e 	bne.w	800516c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005030:	4b42      	ldr	r3, [pc, #264]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a41      	ldr	r2, [pc, #260]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fd fbe6 	bl	800280c <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd fbe2 	bl	800280c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e10e      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005056:	4b39      	ldr	r3, [pc, #228]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	4b36      	ldr	r3, [pc, #216]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005066:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <HAL_RCC_OscConfig+0x774>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	430a      	orrs	r2, r1
 8005076:	4931      	ldr	r1, [pc, #196]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	628b      	str	r3, [r1, #40]	@ 0x28
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	3b01      	subs	r3, #1
 8005082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508a:	3b01      	subs	r3, #1
 800508c:	025b      	lsls	r3, r3, #9
 800508e:	b29b      	uxth	r3, r3
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	3b01      	subs	r3, #1
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	3b01      	subs	r3, #1
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050ac:	4923      	ldr	r1, [pc, #140]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050b2:	4b22      	ldr	r3, [pc, #136]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050be:	4b1f      	ldr	r3, [pc, #124]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c2:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <HAL_RCC_OscConfig+0x778>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050ca:	00d2      	lsls	r2, r2, #3
 80050cc:	491b      	ldr	r1, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050d2:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	f023 020c 	bic.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	4917      	ldr	r1, [pc, #92]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050e4:	4b15      	ldr	r3, [pc, #84]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	f023 0202 	bic.w	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	4912      	ldr	r1, [pc, #72]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050f6:	4b11      	ldr	r3, [pc, #68]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	4a10      	ldr	r2, [pc, #64]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005102:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a0d      	ldr	r2, [pc, #52]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a0a      	ldr	r2, [pc, #40]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800511a:	4b08      	ldr	r3, [pc, #32]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a07      	ldr	r2, [pc, #28]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a04      	ldr	r2, [pc, #16]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 800512c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fd fb6b 	bl	800280c <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005138:	e011      	b.n	800515e <HAL_RCC_OscConfig+0x78e>
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	58024800 	.word	0x58024800
 8005144:	fffffc0c 	.word	0xfffffc0c
 8005148:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fd fb5e 	bl	800280c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e08a      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800515e:	4b47      	ldr	r3, [pc, #284]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x77c>
 800516a:	e082      	b.n	8005272 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516c:	4b43      	ldr	r3, [pc, #268]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a42      	ldr	r2, [pc, #264]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fd fb48 	bl	800280c <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7fd fb44 	bl	800280c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e070      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005192:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x7b0>
 800519e:	e068      	b.n	8005272 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051a0:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051a6:	4b35      	ldr	r3, [pc, #212]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d031      	beq.n	8005218 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d12a      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d122      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d11a      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	0a5b      	lsrs	r3, r3, #9
 80051e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d111      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d108      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	0e1b      	lsrs	r3, r3, #24
 800520a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e02b      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800521c:	4b17      	ldr	r3, [pc, #92]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 800521e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005226:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d01f      	beq.n	8005272 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	4a11      	ldr	r2, [pc, #68]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800523e:	f7fd fae5 	bl	800280c <HAL_GetTick>
 8005242:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005244:	bf00      	nop
 8005246:	f7fd fae1 	bl	800280c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	4293      	cmp	r3, r2
 8005250:	d0f9      	beq.n	8005246 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005256:	4b0a      	ldr	r3, [pc, #40]	@ (8005280 <HAL_RCC_OscConfig+0x8b0>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800525e:	00d2      	lsls	r2, r2, #3
 8005260:	4906      	ldr	r1, [pc, #24]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005262:	4313      	orrs	r3, r2
 8005264:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3730      	adds	r7, #48	@ 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	58024400 	.word	0x58024400
 8005280:	ffff0007 	.word	0xffff0007

08005284 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e19c      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005298:	4b8a      	ldr	r3, [pc, #552]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d910      	bls.n	80052c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b87      	ldr	r3, [pc, #540]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	4985      	ldr	r1, [pc, #532]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b83      	ldr	r3, [pc, #524]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e184      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	4b7b      	ldr	r3, [pc, #492]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d908      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052e4:	4b78      	ldr	r3, [pc, #480]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	4975      	ldr	r1, [pc, #468]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800530e:	429a      	cmp	r2, r3
 8005310:	d908      	bls.n	8005324 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005312:	4b6d      	ldr	r3, [pc, #436]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	496a      	ldr	r1, [pc, #424]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005320:	4313      	orrs	r3, r2
 8005322:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	4b64      	ldr	r3, [pc, #400]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005340:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	495e      	ldr	r1, [pc, #376]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 800534e:	4313      	orrs	r3, r2
 8005350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800536a:	429a      	cmp	r2, r3
 800536c:	d908      	bls.n	8005380 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800536e:	4b56      	ldr	r3, [pc, #344]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	4953      	ldr	r1, [pc, #332]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 800537c:	4313      	orrs	r3, r2
 800537e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	4b4d      	ldr	r3, [pc, #308]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	429a      	cmp	r2, r3
 800539a:	d908      	bls.n	80053ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539c:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f023 020f 	bic.w	r2, r3, #15
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4947      	ldr	r1, [pc, #284]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d055      	beq.n	8005466 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053ba:	4b43      	ldr	r3, [pc, #268]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4940      	ldr	r1, [pc, #256]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d4:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d121      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0f6      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ec:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d115      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0ea      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005404:	4b30      	ldr	r3, [pc, #192]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0de      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005414:	4b2c      	ldr	r3, [pc, #176]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0d6      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005424:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f023 0207 	bic.w	r2, r3, #7
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4925      	ldr	r1, [pc, #148]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005432:	4313      	orrs	r3, r2
 8005434:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005436:	f7fd f9e9 	bl	800280c <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543c:	e00a      	b.n	8005454 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543e:	f7fd f9e5 	bl	800280c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0be      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005454:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	429a      	cmp	r2, r3
 8005464:	d1eb      	bne.n	800543e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	429a      	cmp	r2, r3
 8005480:	d208      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005482:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f023 020f 	bic.w	r2, r3, #15
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	490e      	ldr	r1, [pc, #56]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005490:	4313      	orrs	r3, r2
 8005492:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d214      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b08      	ldr	r3, [pc, #32]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 020f 	bic.w	r2, r3, #15
 80054aa:	4906      	ldr	r1, [pc, #24]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b04      	ldr	r3, [pc, #16]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e086      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
 80054c4:	52002000 	.word	0x52002000
 80054c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	4b3f      	ldr	r3, [pc, #252]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d208      	bcs.n	80054fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054e8:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	4939      	ldr	r1, [pc, #228]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d208      	bcs.n	8005528 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005516:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	492e      	ldr	r1, [pc, #184]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005524:	4313      	orrs	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	4b28      	ldr	r3, [pc, #160]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005540:	429a      	cmp	r2, r3
 8005542:	d208      	bcs.n	8005556 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	4922      	ldr	r1, [pc, #136]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005552:	4313      	orrs	r3, r2
 8005554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800556e:	429a      	cmp	r2, r3
 8005570:	d208      	bcs.n	8005584 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005572:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4917      	ldr	r1, [pc, #92]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005580:	4313      	orrs	r3, r2
 8005582:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005584:	f000 f834 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	4912      	ldr	r1, [pc, #72]	@ (80055e0 <HAL_RCC_ClockConfig+0x35c>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
 80055a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055a2:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <HAL_RCC_ClockConfig+0x35c>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <HAL_RCC_ClockConfig+0x360>)
 80055ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055bc:	4a0a      	ldr	r2, [pc, #40]	@ (80055e8 <HAL_RCC_ClockConfig+0x364>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <HAL_RCC_ClockConfig+0x368>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd f8d6 	bl	8002778 <HAL_InitTick>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	58024400 	.word	0x58024400
 80055e0:	08009180 	.word	0x08009180
 80055e4:	24000008 	.word	0x24000008
 80055e8:	24000004 	.word	0x24000004
 80055ec:	2400000c 	.word	0x2400000c

080055f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	@ 0x24
 80055f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f6:	4bb3      	ldr	r3, [pc, #716]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055fe:	2b18      	cmp	r3, #24
 8005600:	f200 8155 	bhi.w	80058ae <HAL_RCC_GetSysClockFreq+0x2be>
 8005604:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005671 	.word	0x08005671
 8005610:	080058af 	.word	0x080058af
 8005614:	080058af 	.word	0x080058af
 8005618:	080058af 	.word	0x080058af
 800561c:	080058af 	.word	0x080058af
 8005620:	080058af 	.word	0x080058af
 8005624:	080058af 	.word	0x080058af
 8005628:	080058af 	.word	0x080058af
 800562c:	08005697 	.word	0x08005697
 8005630:	080058af 	.word	0x080058af
 8005634:	080058af 	.word	0x080058af
 8005638:	080058af 	.word	0x080058af
 800563c:	080058af 	.word	0x080058af
 8005640:	080058af 	.word	0x080058af
 8005644:	080058af 	.word	0x080058af
 8005648:	080058af 	.word	0x080058af
 800564c:	0800569d 	.word	0x0800569d
 8005650:	080058af 	.word	0x080058af
 8005654:	080058af 	.word	0x080058af
 8005658:	080058af 	.word	0x080058af
 800565c:	080058af 	.word	0x080058af
 8005660:	080058af 	.word	0x080058af
 8005664:	080058af 	.word	0x080058af
 8005668:	080058af 	.word	0x080058af
 800566c:	080056a3 	.word	0x080056a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005670:	4b94      	ldr	r3, [pc, #592]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800567c:	4b91      	ldr	r3, [pc, #580]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	4a90      	ldr	r2, [pc, #576]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
 800568c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800568e:	e111      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005690:	4b8d      	ldr	r3, [pc, #564]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005692:	61bb      	str	r3, [r7, #24]
      break;
 8005694:	e10e      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005696:	4b8d      	ldr	r3, [pc, #564]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005698:	61bb      	str	r3, [r7, #24]
      break;
 800569a:	e10b      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800569c:	4b8c      	ldr	r3, [pc, #560]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800569e:	61bb      	str	r3, [r7, #24]
      break;
 80056a0:	e108      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056a2:	4b88      	ldr	r3, [pc, #544]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056ac:	4b85      	ldr	r3, [pc, #532]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056b8:	4b82      	ldr	r3, [pc, #520]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056c2:	4b80      	ldr	r3, [pc, #512]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80e1 	beq.w	80058a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f000 8083 	beq.w	80057f4 <HAL_RCC_GetSysClockFreq+0x204>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f200 80a1 	bhi.w	8005838 <HAL_RCC_GetSysClockFreq+0x248>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x114>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d056      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005702:	e099      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005704:	4b6f      	ldr	r3, [pc, #444]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02d      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005710:	4b6c      	ldr	r3, [pc, #432]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	4a6b      	ldr	r2, [pc, #428]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	ee07 3a90 	vmov	s15, r3
 8005728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b62      	ldr	r3, [pc, #392]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a02 	vldr	s12, [r7, #8]
 800574e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800576a:	e087      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b51      	ldr	r3, [pc, #324]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005792:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ae:	e065      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b40      	ldr	r3, [pc, #256]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057f2:	e043      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b2f      	ldr	r3, [pc, #188]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a02 	vldr	s12, [r7, #8]
 800581a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005836:	e021      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b1e      	ldr	r3, [pc, #120]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800587a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800587c:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005886:	3301      	adds	r3, #1
 8005888:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005894:	edd7 6a07 	vldr	s13, [r7, #28]
 8005898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a0:	ee17 3a90 	vmov	r3, s15
 80058a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058a6:	e005      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
      break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058ae:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058b0:	61bb      	str	r3, [r7, #24]
      break;
 80058b2:	bf00      	nop
  }

  return sysclockfreq;
 80058b4:	69bb      	ldr	r3, [r7, #24]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3724      	adds	r7, #36	@ 0x24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	58024400 	.word	0x58024400
 80058c8:	03d09000 	.word	0x03d09000
 80058cc:	003d0900 	.word	0x003d0900
 80058d0:	016e3600 	.word	0x016e3600
 80058d4:	46000000 	.word	0x46000000
 80058d8:	4c742400 	.word	0x4c742400
 80058dc:	4a742400 	.word	0x4a742400
 80058e0:	4bb71b00 	.word	0x4bb71b00

080058e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e8:	b0ca      	sub	sp, #296	@ 0x128
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f6:	2300      	movs	r3, #0
 80058f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005908:	2500      	movs	r5, #0
 800590a:	ea54 0305 	orrs.w	r3, r4, r5
 800590e:	d049      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005916:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800591a:	d02f      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800591c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005920:	d828      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005926:	d01a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005928:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800592c:	d822      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005936:	d007      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005938:	e01c      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593a:	4bb8      	ldr	r3, [pc, #736]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	4ab7      	ldr	r2, [pc, #732]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005946:	e01a      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	3308      	adds	r3, #8
 800594e:	2102      	movs	r1, #2
 8005950:	4618      	mov	r0, r3
 8005952:	f001 f9d1 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800595c:	e00f      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005962:	3328      	adds	r3, #40	@ 0x28
 8005964:	2102      	movs	r1, #2
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fa78 	bl	8006e5c <RCCEx_PLL3_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005972:	e004      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800597c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005986:	4ba5      	ldr	r3, [pc, #660]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005994:	4aa1      	ldr	r2, [pc, #644]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005996:	430b      	orrs	r3, r1
 8005998:	6513      	str	r3, [r2, #80]	@ 0x50
 800599a:	e003      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80059b0:	f04f 0900 	mov.w	r9, #0
 80059b4:	ea58 0309 	orrs.w	r3, r8, r9
 80059b8:	d047      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d82a      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059c4:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	080059e1 	.word	0x080059e1
 80059d0:	080059ef 	.word	0x080059ef
 80059d4:	08005a05 	.word	0x08005a05
 80059d8:	08005a23 	.word	0x08005a23
 80059dc:	08005a23 	.word	0x08005a23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e0:	4b8e      	ldr	r3, [pc, #568]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	4a8d      	ldr	r2, [pc, #564]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ec:	e01a      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	3308      	adds	r3, #8
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 f97e 	bl	8006cf8 <RCCEx_PLL2_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a02:	e00f      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	3328      	adds	r3, #40	@ 0x28
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 fa25 	bl	8006e5c <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a18:	e004      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a20:	e000      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a30:	f023 0107 	bic.w	r1, r3, #7
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3a:	4a78      	ldr	r2, [pc, #480]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a40:	e003      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a56:	f04f 0b00 	mov.w	fp, #0
 8005a5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a5e:	d04c      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	d030      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a70:	d829      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a74:	d02d      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a76:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a78:	d825      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a7a:	2b80      	cmp	r3, #128	@ 0x80
 8005a7c:	d018      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a7e:	2b80      	cmp	r3, #128	@ 0x80
 8005a80:	d821      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a86:	2b40      	cmp	r3, #64	@ 0x40
 8005a88:	d007      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a8a:	e01c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b63      	ldr	r3, [pc, #396]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a90:	4a62      	ldr	r2, [pc, #392]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f928 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005aae:	e011      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	3328      	adds	r3, #40	@ 0x28
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f9cf 	bl	8006e5c <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e006      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005acc:	e002      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005adc:	4b4f      	ldr	r3, [pc, #316]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aea:	4a4c      	ldr	r2, [pc, #304]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005af0:	e003      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005b10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005b14:	460b      	mov	r3, r1
 8005b16:	4313      	orrs	r3, r2
 8005b18:	d053      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b26:	d035      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b2c:	d82e      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b32:	d031      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b38:	d828      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b3e:	d01a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b44:	d822      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b4e:	d007      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b50:	e01c      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b52:	4b32      	ldr	r3, [pc, #200]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	4a31      	ldr	r2, [pc, #196]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b5e:	e01c      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	3308      	adds	r3, #8
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 f8c5 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b74:	e011      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	3328      	adds	r3, #40	@ 0x28
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f96c 	bl	8006e5c <RCCEx_PLL3_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e006      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bb8:	e003      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005bce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005bd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d056      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bee:	d038      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bf4:	d831      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bfa:	d034      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005bfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c00:	d82b      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c06:	d01d      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c0c:	d825      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d006      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c18:	e01f      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c1a:	bf00      	nop
 8005c1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c20:	4ba2      	ldr	r3, [pc, #648]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	4aa1      	ldr	r2, [pc, #644]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e01c      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	3308      	adds	r3, #8
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f85e 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c42:	e011      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	3328      	adds	r3, #40	@ 0x28
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 f905 	bl	8006e5c <RCCEx_PLL3_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c60:	e002      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c70:	4b8e      	ldr	r3, [pc, #568]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c80:	4a8a      	ldr	r2, [pc, #552]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c82:	430b      	orrs	r3, r1
 8005c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c86:	e003      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ca6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005caa:	460b      	mov	r3, r1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	d03a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb6:	2b30      	cmp	r3, #48	@ 0x30
 8005cb8:	d01f      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d819      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d00c      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d815      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d019      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d111      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cce:	4b77      	ldr	r3, [pc, #476]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	4a76      	ldr	r2, [pc, #472]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cda:	e011      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 f807 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cf0:	e006      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf8:	e002      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d08:	4b68      	ldr	r3, [pc, #416]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d16:	4a65      	ldr	r2, [pc, #404]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	d051      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d50:	d035      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d56:	d82e      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d5c:	d031      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d62:	d828      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d68:	d01a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6e:	d822      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d78:	d007      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d7a:	e01c      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	4a4a      	ldr	r2, [pc, #296]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d88:	e01c      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8e:	3308      	adds	r3, #8
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ffb0 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d9e:	e011      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	3328      	adds	r3, #40	@ 0x28
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 f857 	bl	8006e5c <RCCEx_PLL3_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005db4:	e006      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005dcc:	4b37      	ldr	r3, [pc, #220]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dda:	4a34      	ldr	r2, [pc, #208]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6513      	str	r3, [r2, #80]	@ 0x50
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005df6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d056      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e14:	d033      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e1a:	d82c      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e20:	d02f      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e26:	d826      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e2c:	d02b      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e32:	d820      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e38:	d012      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e3e:	d81a      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d022      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e48:	d115      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	3308      	adds	r3, #8
 8005e50:	2101      	movs	r1, #1
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 ff50 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e015      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	3328      	adds	r3, #40	@ 0x28
 8005e66:	2101      	movs	r1, #1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fff7 	bl	8006e5c <RCCEx_PLL3_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e74:	e00a      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7c:	e006      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e7e:	bf00      	nop
 8005e80:	e004      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e94:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea2:	4a02      	ldr	r2, [pc, #8]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ece:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d055      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ee4:	d033      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eea:	d82c      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef0:	d02f      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef6:	d826      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005efc:	d02b      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005efe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f02:	d820      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f08:	d012      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f0e:	d81a      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d022      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f18:	d115      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1e:	3308      	adds	r3, #8
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fee8 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f2e:	e015      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	3328      	adds	r3, #40	@ 0x28
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ff8f 	bl	8006e5c <RCCEx_PLL3_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f44:	e00a      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f4c:	e006      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f4e:	bf00      	nop
 8005f50:	e004      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f52:	bf00      	nop
 8005f54:	e002      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f64:	4ba3      	ldr	r3, [pc, #652]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f74:	4a9f      	ldr	r2, [pc, #636]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f76:	430b      	orrs	r3, r1
 8005f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f7a:	e003      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	d037      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fae:	d00e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fb4:	d816      	bhi.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d018      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fbe:	d111      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4b8c      	ldr	r3, [pc, #560]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	4a8b      	ldr	r2, [pc, #556]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fcc:	e00f      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fe8e 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fe2:	e004      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006004:	4a7b      	ldr	r2, [pc, #492]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006006:	430b      	orrs	r3, r1
 8006008:	6513      	str	r3, [r2, #80]	@ 0x50
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800602a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	d039      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	2b03      	cmp	r3, #3
 800603c:	d81c      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006081 	.word	0x08006081
 8006048:	08006055 	.word	0x08006055
 800604c:	08006063 	.word	0x08006063
 8006050:	08006081 	.word	0x08006081
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006054:	4b67      	ldr	r3, [pc, #412]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006058:	4a66      	ldr	r2, [pc, #408]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800605e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006060:	e00f      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3308      	adds	r3, #8
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fe44 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800608a:	4b5a      	ldr	r3, [pc, #360]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800608c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608e:	f023 0103 	bic.w	r1, r3, #3
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006098:	4a56      	ldr	r2, [pc, #344]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609a:	430b      	orrs	r3, r1
 800609c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800609e:	e003      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80060b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f000 809f 	beq.w	8006208 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ca:	4b4b      	ldr	r3, [pc, #300]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a4a      	ldr	r2, [pc, #296]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060d6:	f7fc fb99 	bl	800280c <HAL_GetTick>
 80060da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060de:	e00b      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e0:	f7fc fb94 	bl	800280c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b64      	cmp	r3, #100	@ 0x64
 80060ee:	d903      	bls.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060f6:	e005      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060f8:	4b3f      	ldr	r3, [pc, #252]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0ed      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006108:	2b00      	cmp	r3, #0
 800610a:	d179      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800610c:	4b39      	ldr	r3, [pc, #228]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006118:	4053      	eors	r3, r2
 800611a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800611e:	2b00      	cmp	r3, #0
 8006120:	d015      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006122:	4b34      	ldr	r3, [pc, #208]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800612a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800612e:	4b31      	ldr	r3, [pc, #196]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	4a30      	ldr	r2, [pc, #192]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006138:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800613a:	4b2e      	ldr	r3, [pc, #184]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613e:	4a2d      	ldr	r2, [pc, #180]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006144:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006146:	4a2b      	ldr	r2, [pc, #172]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800614c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615a:	d118      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fc fb56 	bl	800280c <HAL_GetTick>
 8006160:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006164:	e00d      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006166:	f7fc fb51 	bl	800280c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006176:	429a      	cmp	r2, r3
 8006178:	d903      	bls.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006180:	e005      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006182:	4b1c      	ldr	r3, [pc, #112]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0eb      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800618e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006192:	2b00      	cmp	r3, #0
 8006194:	d129      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800619e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a6:	d10e      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061b8:	091a      	lsrs	r2, r3, #4
 80061ba:	4b10      	ldr	r3, [pc, #64]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80061bc:	4013      	ands	r3, r2
 80061be:	4a0d      	ldr	r2, [pc, #52]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6113      	str	r3, [r2, #16]
 80061c4:	e005      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80061c6:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	4a0a      	ldr	r2, [pc, #40]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061d0:	6113      	str	r3, [r2, #16]
 80061d2:	4b08      	ldr	r3, [pc, #32]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e2:	4a04      	ldr	r2, [pc, #16]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e8:	e00e      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80061f2:	e009      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80061f4:	58024400 	.word	0x58024400
 80061f8:	58024800 	.word	0x58024800
 80061fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f002 0301 	and.w	r3, r2, #1
 8006214:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006218:	2300      	movs	r3, #0
 800621a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800621e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006222:	460b      	mov	r3, r1
 8006224:	4313      	orrs	r3, r2
 8006226:	f000 8089 	beq.w	800633c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006230:	2b28      	cmp	r3, #40	@ 0x28
 8006232:	d86b      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006234:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006315 	.word	0x08006315
 8006240:	0800630d 	.word	0x0800630d
 8006244:	0800630d 	.word	0x0800630d
 8006248:	0800630d 	.word	0x0800630d
 800624c:	0800630d 	.word	0x0800630d
 8006250:	0800630d 	.word	0x0800630d
 8006254:	0800630d 	.word	0x0800630d
 8006258:	0800630d 	.word	0x0800630d
 800625c:	080062e1 	.word	0x080062e1
 8006260:	0800630d 	.word	0x0800630d
 8006264:	0800630d 	.word	0x0800630d
 8006268:	0800630d 	.word	0x0800630d
 800626c:	0800630d 	.word	0x0800630d
 8006270:	0800630d 	.word	0x0800630d
 8006274:	0800630d 	.word	0x0800630d
 8006278:	0800630d 	.word	0x0800630d
 800627c:	080062f7 	.word	0x080062f7
 8006280:	0800630d 	.word	0x0800630d
 8006284:	0800630d 	.word	0x0800630d
 8006288:	0800630d 	.word	0x0800630d
 800628c:	0800630d 	.word	0x0800630d
 8006290:	0800630d 	.word	0x0800630d
 8006294:	0800630d 	.word	0x0800630d
 8006298:	0800630d 	.word	0x0800630d
 800629c:	08006315 	.word	0x08006315
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	0800630d 	.word	0x0800630d
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	0800630d 	.word	0x0800630d
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	08006315 	.word	0x08006315
 80062c0:	0800630d 	.word	0x0800630d
 80062c4:	0800630d 	.word	0x0800630d
 80062c8:	0800630d 	.word	0x0800630d
 80062cc:	0800630d 	.word	0x0800630d
 80062d0:	0800630d 	.word	0x0800630d
 80062d4:	0800630d 	.word	0x0800630d
 80062d8:	0800630d 	.word	0x0800630d
 80062dc:	08006315 	.word	0x08006315
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	3308      	adds	r3, #8
 80062e6:	2101      	movs	r1, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fd05 	bl	8006cf8 <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062f4:	e00f      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	3328      	adds	r3, #40	@ 0x28
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fdac 	bl	8006e5c <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800631e:	4bbf      	ldr	r3, [pc, #764]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800632c:	4abb      	ldr	r2, [pc, #748]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800632e:	430b      	orrs	r3, r1
 8006330:	6553      	str	r3, [r2, #84]	@ 0x54
 8006332:	e003      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f002 0302 	and.w	r3, r2, #2
 8006348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800634c:	2300      	movs	r3, #0
 800634e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006352:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006356:	460b      	mov	r3, r1
 8006358:	4313      	orrs	r3, r2
 800635a:	d041      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006362:	2b05      	cmp	r3, #5
 8006364:	d824      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063b9 	.word	0x080063b9
 8006370:	08006385 	.word	0x08006385
 8006374:	0800639b 	.word	0x0800639b
 8006378:	080063b9 	.word	0x080063b9
 800637c:	080063b9 	.word	0x080063b9
 8006380:	080063b9 	.word	0x080063b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006388:	3308      	adds	r3, #8
 800638a:	2101      	movs	r1, #1
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fcb3 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006398:	e00f      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639e:	3328      	adds	r3, #40	@ 0x28
 80063a0:	2101      	movs	r1, #1
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fd5a 	bl	8006e5c <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063b6:	e000      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063c2:	4b96      	ldr	r3, [pc, #600]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	f023 0107 	bic.w	r1, r3, #7
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063d0:	4a92      	ldr	r2, [pc, #584]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80063d6:	e003      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f002 0304 	and.w	r3, r2, #4
 80063ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063f0:	2300      	movs	r3, #0
 80063f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4313      	orrs	r3, r2
 80063fe:	d044      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006408:	2b05      	cmp	r3, #5
 800640a:	d825      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006461 	.word	0x08006461
 8006418:	0800642d 	.word	0x0800642d
 800641c:	08006443 	.word	0x08006443
 8006420:	08006461 	.word	0x08006461
 8006424:	08006461 	.word	0x08006461
 8006428:	08006461 	.word	0x08006461
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	3308      	adds	r3, #8
 8006432:	2101      	movs	r1, #1
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fc5f 	bl	8006cf8 <RCCEx_PLL2_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006440:	e00f      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006446:	3328      	adds	r3, #40	@ 0x28
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fd06 	bl	8006e5c <RCCEx_PLL3_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006456:	e004      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800645e:	e000      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800646a:	4b6c      	ldr	r3, [pc, #432]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800646c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646e:	f023 0107 	bic.w	r1, r3, #7
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800647a:	4a68      	ldr	r2, [pc, #416]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800647c:	430b      	orrs	r3, r1
 800647e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006480:	e003      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f002 0320 	and.w	r3, r2, #32
 8006496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d055      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064b6:	d033      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80064b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064bc:	d82c      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c2:	d02f      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80064c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c8:	d826      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064ce:	d02b      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80064d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064d4:	d820      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064da:	d012      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80064dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e0:	d81a      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d022      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80064e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ea:	d115      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	3308      	adds	r3, #8
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fbff 	bl	8006cf8 <RCCEx_PLL2_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006500:	e015      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	3328      	adds	r3, #40	@ 0x28
 8006508:	2102      	movs	r1, #2
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fca6 	bl	8006e5c <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006516:	e00a      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651e:	e006      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006520:	bf00      	nop
 8006522:	e004      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006524:	bf00      	nop
 8006526:	e002      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006528:	bf00      	nop
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006536:	4b39      	ldr	r3, [pc, #228]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006546:	4a35      	ldr	r2, [pc, #212]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006548:	430b      	orrs	r3, r1
 800654a:	6553      	str	r3, [r2, #84]	@ 0x54
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006566:	2300      	movs	r3, #0
 8006568:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800656c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d058      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800657e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006582:	d033      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006584:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006588:	d82c      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800658a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800658e:	d02f      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006594:	d826      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006596:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800659a:	d02b      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800659c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065a0:	d820      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a6:	d012      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ac:	d81a      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d022      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80065b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b6:	d115      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065bc:	3308      	adds	r3, #8
 80065be:	2100      	movs	r1, #0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fb99 	bl	8006cf8 <RCCEx_PLL2_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065cc:	e015      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d2:	3328      	adds	r3, #40	@ 0x28
 80065d4:	2102      	movs	r1, #2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fc40 	bl	8006e5c <RCCEx_PLL3_Config>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065e2:	e00a      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ea:	e006      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065ec:	bf00      	nop
 80065ee:	e004      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065f0:	bf00      	nop
 80065f2:	e002      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10e      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006602:	4b06      	ldr	r3, [pc, #24]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006606:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006612:	4a02      	ldr	r2, [pc, #8]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6593      	str	r3, [r2, #88]	@ 0x58
 8006618:	e006      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800661a:	bf00      	nop
 800661c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800663e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d055      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006650:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006654:	d033      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006656:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800665a:	d82c      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800665c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006660:	d02f      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006666:	d826      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006668:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800666c:	d02b      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800666e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006672:	d820      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006678:	d012      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800667a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800667e:	d81a      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d022      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006688:	d115      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668e:	3308      	adds	r3, #8
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb30 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800669e:	e015      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	3328      	adds	r3, #40	@ 0x28
 80066a6:	2102      	movs	r1, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fbd7 	bl	8006e5c <RCCEx_PLL3_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80066b4:	e00a      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066be:	bf00      	nop
 80066c0:	e004      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066d4:	4ba1      	ldr	r3, [pc, #644]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066e4:	4a9d      	ldr	r2, [pc, #628]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066e6:	430b      	orrs	r3, r1
 80066e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ea:	e003      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f002 0308 	and.w	r3, r2, #8
 8006700:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006704:	2300      	movs	r3, #0
 8006706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800670a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800670e:	460b      	mov	r3, r1
 8006710:	4313      	orrs	r3, r2
 8006712:	d01e      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006720:	d10c      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	3328      	adds	r3, #40	@ 0x28
 8006728:	2102      	movs	r1, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fb96 	bl	8006e5c <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800673c:	4b87      	ldr	r3, [pc, #540]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006740:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674c:	4a83      	ldr	r2, [pc, #524]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800674e:	430b      	orrs	r3, r1
 8006750:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f002 0310 	and.w	r3, r2, #16
 800675e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006762:	2300      	movs	r3, #0
 8006764:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006768:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d01e      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800677a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800677e:	d10c      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	3328      	adds	r3, #40	@ 0x28
 8006786:	2102      	movs	r1, #2
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fb67 	bl	8006e5c <RCCEx_PLL3_Config>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800679a:	4b70      	ldr	r3, [pc, #448]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067aa:	4a6c      	ldr	r2, [pc, #432]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ac:	430b      	orrs	r3, r1
 80067ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d03e      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067dc:	d022      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80067de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067e2:	d81b      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ec:	d00b      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80067ee:	e015      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f4:	3308      	adds	r3, #8
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fa7d 	bl	8006cf8 <RCCEx_PLL2_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006804:	e00f      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	3328      	adds	r3, #40	@ 0x28
 800680c:	2102      	movs	r1, #2
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fb24 	bl	8006e5c <RCCEx_PLL3_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800681a:	e004      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006822:	e000      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800682e:	4b4b      	ldr	r3, [pc, #300]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006832:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800683e:	4a47      	ldr	r2, [pc, #284]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006840:	430b      	orrs	r3, r1
 8006842:	6593      	str	r3, [r2, #88]	@ 0x58
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800685a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800685c:	2300      	movs	r3, #0
 800685e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006860:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006864:	460b      	mov	r3, r1
 8006866:	4313      	orrs	r3, r2
 8006868:	d03b      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006872:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006876:	d01f      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800687c:	d818      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800687e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006882:	d003      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006888:	d007      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800688a:	e011      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4b33      	ldr	r3, [pc, #204]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006890:	4a32      	ldr	r2, [pc, #200]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006898:	e00f      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	3328      	adds	r3, #40	@ 0x28
 80068a0:	2101      	movs	r1, #1
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fada 	bl	8006e5c <RCCEx_PLL3_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80068ae:	e004      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068b6:	e000      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80068b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10b      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068c2:	4b26      	ldr	r3, [pc, #152]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d2:	4a22      	ldr	r2, [pc, #136]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80068d8:	e003      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80068ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80068f0:	2300      	movs	r3, #0
 80068f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80068f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068f8:	460b      	mov	r3, r1
 80068fa:	4313      	orrs	r3, r2
 80068fc:	d034      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690c:	d007      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800690e:	e011      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006910:	4b12      	ldr	r3, [pc, #72]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006914:	4a11      	ldr	r2, [pc, #68]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800691a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800691c:	e00e      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	3308      	adds	r3, #8
 8006924:	2102      	movs	r1, #2
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f9e6 	bl	8006cf8 <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800693a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10d      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006948:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006952:	4a02      	ldr	r2, [pc, #8]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006954:	430b      	orrs	r3, r1
 8006956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006958:	e006      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006976:	2300      	movs	r3, #0
 8006978:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800697a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d00c      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006988:	3328      	adds	r3, #40	@ 0x28
 800698a:	2102      	movs	r1, #2
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fa65 	bl	8006e5c <RCCEx_PLL3_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80069aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ac:	2300      	movs	r3, #0
 80069ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80069b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d038      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c6:	d018      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80069c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069cc:	d811      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d2:	d014      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d8:	d80b      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d011      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80069de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e2:	d106      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e4:	4bc3      	ldr	r3, [pc, #780]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	4ac2      	ldr	r2, [pc, #776]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80069f0:	e008      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f8:	e004      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069fa:	bf00      	nop
 80069fc:	e002      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a0c:	4bb9      	ldr	r3, [pc, #740]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1c:	4ab5      	ldr	r2, [pc, #724]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a42:	460b      	mov	r3, r1
 8006a44:	4313      	orrs	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a48:	4baa      	ldr	r3, [pc, #680]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a56:	4aa7      	ldr	r2, [pc, #668]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a72:	460b      	mov	r3, r1
 8006a74:	4313      	orrs	r3, r2
 8006a76:	d00a      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a78:	4b9e      	ldr	r3, [pc, #632]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a88:	4a9a      	ldr	r2, [pc, #616]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006aaa:	4b92      	ldr	r3, [pc, #584]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006acc:	2300      	movs	r3, #0
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ad0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ada:	4b86      	ldr	r3, [pc, #536]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	4a85      	ldr	r2, [pc, #532]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ae4:	6113      	str	r3, [r2, #16]
 8006ae6:	4b83      	ldr	r3, [pc, #524]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae8:	6919      	ldr	r1, [r3, #16]
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006af2:	4a80      	ldr	r2, [pc, #512]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b06:	2300      	movs	r3, #0
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b14:	4b77      	ldr	r3, [pc, #476]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b22:	4a74      	ldr	r2, [pc, #464]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b24:	430b      	orrs	r3, r1
 8006b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b36:	2300      	movs	r3, #0
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d00a      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b44:	4b6b      	ldr	r3, [pc, #428]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b54:	4a67      	ldr	r2, [pc, #412]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b56:	430b      	orrs	r3, r1
 8006b58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	2100      	movs	r1, #0
 8006b64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b70:	460b      	mov	r3, r1
 8006b72:	4313      	orrs	r3, r2
 8006b74:	d011      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f8ba 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	6239      	str	r1, [r7, #32]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	d011      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	3308      	adds	r3, #8
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f89a 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	2100      	movs	r1, #0
 8006be4:	61b9      	str	r1, [r7, #24]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d011      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f87a 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	2100      	movs	r1, #0
 8006c24:	6139      	str	r1, [r7, #16]
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c30:	460b      	mov	r3, r1
 8006c32:	4313      	orrs	r3, r2
 8006c34:	d011      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f90c 	bl	8006e5c <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	2100      	movs	r1, #0
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d011      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7a:	3328      	adds	r3, #40	@ 0x28
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f8ec 	bl	8006e5c <RCCEx_PLL3_Config>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	d011      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	3328      	adds	r3, #40	@ 0x28
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f8cc 	bl	8006e5c <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006cda:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e000      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cf4:	58024400 	.word	0x58024400

08006cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d06:	4b53      	ldr	r3, [pc, #332]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d101      	bne.n	8006d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e099      	b.n	8006e4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d16:	4b4f      	ldr	r3, [pc, #316]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d22:	f7fb fd73 	bl	800280c <HAL_GetTick>
 8006d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d28:	e008      	b.n	8006d3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d2a:	f7fb fd6f 	bl	800280c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e086      	b.n	8006e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d3c:	4b45      	ldr	r3, [pc, #276]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f0      	bne.n	8006d2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d48:	4b42      	ldr	r3, [pc, #264]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	493f      	ldr	r1, [pc, #252]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	025b      	lsls	r3, r3, #9
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	041b      	lsls	r3, r3, #16
 8006d7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d8c:	4931      	ldr	r1, [pc, #196]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d92:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	492d      	ldr	r1, [pc, #180]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006da4:	4b2b      	ldr	r3, [pc, #172]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	f023 0220 	bic.w	r2, r3, #32
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	4928      	ldr	r1, [pc, #160]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006db6:	4b27      	ldr	r3, [pc, #156]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	4a26      	ldr	r2, [pc, #152]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	f023 0310 	bic.w	r3, r3, #16
 8006dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dc2:	4b24      	ldr	r3, [pc, #144]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc6:	4b24      	ldr	r3, [pc, #144]	@ (8006e58 <RCCEx_PLL2_Config+0x160>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	69d2      	ldr	r2, [r2, #28]
 8006dce:	00d2      	lsls	r2, r2, #3
 8006dd0:	4920      	ldr	r1, [pc, #128]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a1e      	ldr	r2, [pc, #120]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	f043 0310 	orr.w	r3, r3, #16
 8006de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006de8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	4a19      	ldr	r2, [pc, #100]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006df4:	e00f      	b.n	8006e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d106      	bne.n	8006e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dfc:	4b15      	ldr	r3, [pc, #84]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	4a14      	ldr	r2, [pc, #80]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e08:	e005      	b.n	8006e16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e0a:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4a11      	ldr	r2, [pc, #68]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e16:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e22:	f7fb fcf3 	bl	800280c <HAL_GetTick>
 8006e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e28:	e008      	b.n	8006e3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2a:	f7fb fcef 	bl	800280c <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	58024400 	.word	0x58024400
 8006e58:	ffff0007 	.word	0xffff0007

08006e5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6a:	4b53      	ldr	r3, [pc, #332]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d101      	bne.n	8006e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e099      	b.n	8006fae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e86:	f7fb fcc1 	bl	800280c <HAL_GetTick>
 8006e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e8c:	e008      	b.n	8006ea0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e8e:	f7fb fcbd 	bl	800280c <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e086      	b.n	8006fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ea0:	4b45      	ldr	r3, [pc, #276]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f0      	bne.n	8006e8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006eac:	4b42      	ldr	r3, [pc, #264]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	051b      	lsls	r3, r3, #20
 8006eba:	493f      	ldr	r1, [pc, #252]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	025b      	lsls	r3, r3, #9
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	061b      	lsls	r3, r3, #24
 8006eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ef0:	4931      	ldr	r1, [pc, #196]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ef6:	4b30      	ldr	r3, [pc, #192]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	492d      	ldr	r1, [pc, #180]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f08:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4928      	ldr	r1, [pc, #160]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f1a:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a26      	ldr	r2, [pc, #152]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f26:	4b24      	ldr	r3, [pc, #144]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f2a:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <RCCEx_PLL3_Config+0x160>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	69d2      	ldr	r2, [r2, #28]
 8006f32:	00d2      	lsls	r2, r2, #3
 8006f34:	4920      	ldr	r1, [pc, #128]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f58:	e00f      	b.n	8006f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d106      	bne.n	8006f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f60:	4b15      	ldr	r3, [pc, #84]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a14      	ldr	r2, [pc, #80]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f6c:	e005      	b.n	8006f7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f6e:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4a11      	ldr	r2, [pc, #68]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f86:	f7fb fc41 	bl	800280c <HAL_GetTick>
 8006f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f8c:	e008      	b.n	8006fa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f8e:	f7fb fc3d 	bl	800280c <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	ffff0007 	.word	0xffff0007

08006fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e049      	b.n	8007066 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa ff16 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f000 fd50 	bl	8007aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	d001      	beq.n	8007088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e054      	b.n	8007132 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a26      	ldr	r2, [pc, #152]	@ (8007140 <HAL_TIM_Base_Start_IT+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b2:	d01d      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a22      	ldr	r2, [pc, #136]	@ (8007144 <HAL_TIM_Base_Start_IT+0xd4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a21      	ldr	r2, [pc, #132]	@ (8007148 <HAL_TIM_Base_Start_IT+0xd8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <HAL_TIM_Base_Start_IT+0xdc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007150 <HAL_TIM_Base_Start_IT+0xe0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_TIM_Base_Start_IT+0xe4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007158 <HAL_TIM_Base_Start_IT+0xe8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d115      	bne.n	800711c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	4b19      	ldr	r3, [pc, #100]	@ (800715c <HAL_TIM_Base_Start_IT+0xec>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d015      	beq.n	800712e <HAL_TIM_Base_Start_IT+0xbe>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d011      	beq.n	800712e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	e008      	b.n	800712e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e000      	b.n	8007130 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40001800 	.word	0x40001800
 8007158:	40014000 	.word	0x40014000
 800715c:	00010007 	.word	0x00010007

08007160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e049      	b.n	8007206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fa ff48 	bl	800201c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f000 fc80 	bl	8007aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <HAL_TIM_PWM_Start+0x24>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	bf14      	ite	ne
 800722c:	2301      	movne	r3, #1
 800722e:	2300      	moveq	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	e03c      	b.n	80072ae <HAL_TIM_PWM_Start+0x9e>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b04      	cmp	r3, #4
 8007238:	d109      	bne.n	800724e <HAL_TIM_PWM_Start+0x3e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b01      	cmp	r3, #1
 8007244:	bf14      	ite	ne
 8007246:	2301      	movne	r3, #1
 8007248:	2300      	moveq	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	e02f      	b.n	80072ae <HAL_TIM_PWM_Start+0x9e>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b08      	cmp	r3, #8
 8007252:	d109      	bne.n	8007268 <HAL_TIM_PWM_Start+0x58>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	e022      	b.n	80072ae <HAL_TIM_PWM_Start+0x9e>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b0c      	cmp	r3, #12
 800726c:	d109      	bne.n	8007282 <HAL_TIM_PWM_Start+0x72>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	bf14      	ite	ne
 800727a:	2301      	movne	r3, #1
 800727c:	2300      	moveq	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	e015      	b.n	80072ae <HAL_TIM_PWM_Start+0x9e>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b10      	cmp	r3, #16
 8007286:	d109      	bne.n	800729c <HAL_TIM_PWM_Start+0x8c>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e008      	b.n	80072ae <HAL_TIM_PWM_Start+0x9e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0a1      	b.n	80073fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0xb6>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072c4:	e023      	b.n	800730e <HAL_TIM_PWM_Start+0xfe>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0xc6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072d4:	e01b      	b.n	800730e <HAL_TIM_PWM_Start+0xfe>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start+0xd6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072e4:	e013      	b.n	800730e <HAL_TIM_PWM_Start+0xfe>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	d104      	bne.n	80072f6 <HAL_TIM_PWM_Start+0xe6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072f4:	e00b      	b.n	800730e <HAL_TIM_PWM_Start+0xfe>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d104      	bne.n	8007306 <HAL_TIM_PWM_Start+0xf6>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007304:	e003      	b.n	800730e <HAL_TIM_PWM_Start+0xfe>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2201      	movs	r2, #1
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 ffde 	bl	80082d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a38      	ldr	r2, [pc, #224]	@ (8007404 <HAL_TIM_PWM_Start+0x1f4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <HAL_TIM_PWM_Start+0x13e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a37      	ldr	r2, [pc, #220]	@ (8007408 <HAL_TIM_PWM_Start+0x1f8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00e      	beq.n	800734e <HAL_TIM_PWM_Start+0x13e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a35      	ldr	r2, [pc, #212]	@ (800740c <HAL_TIM_PWM_Start+0x1fc>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d009      	beq.n	800734e <HAL_TIM_PWM_Start+0x13e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a34      	ldr	r2, [pc, #208]	@ (8007410 <HAL_TIM_PWM_Start+0x200>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_TIM_PWM_Start+0x13e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a32      	ldr	r2, [pc, #200]	@ (8007414 <HAL_TIM_PWM_Start+0x204>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PWM_Start+0x142>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <HAL_TIM_PWM_Start+0x144>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007366:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a25      	ldr	r2, [pc, #148]	@ (8007404 <HAL_TIM_PWM_Start+0x1f4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d022      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737a:	d01d      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a25      	ldr	r2, [pc, #148]	@ (8007418 <HAL_TIM_PWM_Start+0x208>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d018      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a24      	ldr	r2, [pc, #144]	@ (800741c <HAL_TIM_PWM_Start+0x20c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a22      	ldr	r2, [pc, #136]	@ (8007420 <HAL_TIM_PWM_Start+0x210>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1a      	ldr	r2, [pc, #104]	@ (8007408 <HAL_TIM_PWM_Start+0x1f8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d009      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007424 <HAL_TIM_PWM_Start+0x214>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1a8>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a16      	ldr	r2, [pc, #88]	@ (800740c <HAL_TIM_PWM_Start+0x1fc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d115      	bne.n	80073e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	4b1a      	ldr	r3, [pc, #104]	@ (8007428 <HAL_TIM_PWM_Start+0x218>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d015      	beq.n	80073f6 <HAL_TIM_PWM_Start+0x1e6>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d0:	d011      	beq.n	80073f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e2:	e008      	b.n	80073f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e000      	b.n	80073f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40010000 	.word	0x40010000
 8007408:	40010400 	.word	0x40010400
 800740c:	40014000 	.word	0x40014000
 8007410:	40014400 	.word	0x40014400
 8007414:	40014800 	.word	0x40014800
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40001800 	.word	0x40001800
 8007428:	00010007 	.word	0x00010007

0800742c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d020      	beq.n	8007490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01b      	beq.n	8007490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0202 	mvn.w	r2, #2
 8007460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 faf6 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fae8 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 faf9 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d020      	beq.n	80074dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01b      	beq.n	80074dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0204 	mvn.w	r2, #4
 80074ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fad0 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fac2 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fad3 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d020      	beq.n	8007528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01b      	beq.n	8007528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0208 	mvn.w	r2, #8
 80074f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2204      	movs	r2, #4
 80074fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 faaa 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 8007514:	e005      	b.n	8007522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa9c 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 faad 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b00      	cmp	r3, #0
 8007530:	d020      	beq.n	8007574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01b      	beq.n	8007574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0210 	mvn.w	r2, #16
 8007544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2208      	movs	r2, #8
 800754a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa84 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 8007560:	e005      	b.n	800756e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa76 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa87 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0201 	mvn.w	r2, #1
 8007590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fa f86c 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 ffc5 	bl	8008550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00c      	beq.n	80075ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 ffbd 	bl	8008564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fa41 	bl	8007a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f06f 0220 	mvn.w	r2, #32
 800762a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 ff85 	bl	800853c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007656:	2302      	movs	r3, #2
 8007658:	e0ff      	b.n	800785a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b14      	cmp	r3, #20
 8007666:	f200 80f0 	bhi.w	800784a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076c5 	.word	0x080076c5
 8007674:	0800784b 	.word	0x0800784b
 8007678:	0800784b 	.word	0x0800784b
 800767c:	0800784b 	.word	0x0800784b
 8007680:	08007705 	.word	0x08007705
 8007684:	0800784b 	.word	0x0800784b
 8007688:	0800784b 	.word	0x0800784b
 800768c:	0800784b 	.word	0x0800784b
 8007690:	08007747 	.word	0x08007747
 8007694:	0800784b 	.word	0x0800784b
 8007698:	0800784b 	.word	0x0800784b
 800769c:	0800784b 	.word	0x0800784b
 80076a0:	08007787 	.word	0x08007787
 80076a4:	0800784b 	.word	0x0800784b
 80076a8:	0800784b 	.word	0x0800784b
 80076ac:	0800784b 	.word	0x0800784b
 80076b0:	080077c9 	.word	0x080077c9
 80076b4:	0800784b 	.word	0x0800784b
 80076b8:	0800784b 	.word	0x0800784b
 80076bc:	0800784b 	.word	0x0800784b
 80076c0:	08007809 	.word	0x08007809
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fa90 	bl	8007bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0208 	orr.w	r2, r2, #8
 80076de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0204 	bic.w	r2, r2, #4
 80076ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6999      	ldr	r1, [r3, #24]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	619a      	str	r2, [r3, #24]
      break;
 8007702:	e0a5      	b.n	8007850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fb00 	bl	8007d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800771e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800772e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6999      	ldr	r1, [r3, #24]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	021a      	lsls	r2, r3, #8
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	619a      	str	r2, [r3, #24]
      break;
 8007744:	e084      	b.n	8007850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fb69 	bl	8007e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0208 	orr.w	r2, r2, #8
 8007760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69da      	ldr	r2, [r3, #28]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0204 	bic.w	r2, r2, #4
 8007770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69d9      	ldr	r1, [r3, #28]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	61da      	str	r2, [r3, #28]
      break;
 8007784:	e064      	b.n	8007850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68b9      	ldr	r1, [r7, #8]
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fbd1 	bl	8007f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69da      	ldr	r2, [r3, #28]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69d9      	ldr	r1, [r3, #28]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	021a      	lsls	r2, r3, #8
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	61da      	str	r2, [r3, #28]
      break;
 80077c6:	e043      	b.n	8007850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fc1a 	bl	8008008 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0208 	orr.w	r2, r2, #8
 80077e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0204 	bic.w	r2, r2, #4
 80077f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007806:	e023      	b.n	8007850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fc5e 	bl	80080d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007832:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	021a      	lsls	r2, r3, #8
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007848:	e002      	b.n	8007850 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
      break;
 800784e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_TIM_ConfigClockSource+0x1c>
 800787c:	2302      	movs	r3, #2
 800787e:	e0dc      	b.n	8007a3a <HAL_TIM_ConfigClockSource+0x1d6>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x1e0>)
 800789c:	4013      	ands	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a64      	ldr	r2, [pc, #400]	@ (8007a48 <HAL_TIM_ConfigClockSource+0x1e4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	f000 80a9 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 80078bc:	4a62      	ldr	r2, [pc, #392]	@ (8007a48 <HAL_TIM_ConfigClockSource+0x1e4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	f200 80ae 	bhi.w	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 80078c4:	4a61      	ldr	r2, [pc, #388]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x1e8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f000 80a1 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 80078cc:	4a5f      	ldr	r2, [pc, #380]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x1e8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	f200 80a6 	bhi.w	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 80078d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007a50 <HAL_TIM_ConfigClockSource+0x1ec>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	f000 8099 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 80078dc:	4a5c      	ldr	r2, [pc, #368]	@ (8007a50 <HAL_TIM_ConfigClockSource+0x1ec>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	f200 809e 	bhi.w	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 80078e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078e8:	f000 8091 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 80078ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078f0:	f200 8096 	bhi.w	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 80078f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078f8:	f000 8089 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 80078fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007900:	f200 808e 	bhi.w	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007908:	d03e      	beq.n	8007988 <HAL_TIM_ConfigClockSource+0x124>
 800790a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800790e:	f200 8087 	bhi.w	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007916:	f000 8086 	beq.w	8007a26 <HAL_TIM_ConfigClockSource+0x1c2>
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800791e:	d87f      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007920:	2b70      	cmp	r3, #112	@ 0x70
 8007922:	d01a      	beq.n	800795a <HAL_TIM_ConfigClockSource+0xf6>
 8007924:	2b70      	cmp	r3, #112	@ 0x70
 8007926:	d87b      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007928:	2b60      	cmp	r3, #96	@ 0x60
 800792a:	d050      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0x16a>
 800792c:	2b60      	cmp	r3, #96	@ 0x60
 800792e:	d877      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007930:	2b50      	cmp	r3, #80	@ 0x50
 8007932:	d03c      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x14a>
 8007934:	2b50      	cmp	r3, #80	@ 0x50
 8007936:	d873      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007938:	2b40      	cmp	r3, #64	@ 0x40
 800793a:	d058      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x18a>
 800793c:	2b40      	cmp	r3, #64	@ 0x40
 800793e:	d86f      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007940:	2b30      	cmp	r3, #48	@ 0x30
 8007942:	d064      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 8007944:	2b30      	cmp	r3, #48	@ 0x30
 8007946:	d86b      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007948:	2b20      	cmp	r3, #32
 800794a:	d060      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 800794c:	2b20      	cmp	r3, #32
 800794e:	d867      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d05c      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 8007954:	2b10      	cmp	r3, #16
 8007956:	d05a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x1aa>
 8007958:	e062      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800796a:	f000 fc95 	bl	8008298 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800797c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	609a      	str	r2, [r3, #8]
      break;
 8007986:	e04f      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007998:	f000 fc7e 	bl	8008298 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079aa:	609a      	str	r2, [r3, #8]
      break;
 80079ac:	e03c      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ba:	461a      	mov	r2, r3
 80079bc:	f000 fbee 	bl	800819c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2150      	movs	r1, #80	@ 0x50
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fc48 	bl	800825c <TIM_ITRx_SetConfig>
      break;
 80079cc:	e02c      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079da:	461a      	mov	r2, r3
 80079dc:	f000 fc0d 	bl	80081fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2160      	movs	r1, #96	@ 0x60
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fc38 	bl	800825c <TIM_ITRx_SetConfig>
      break;
 80079ec:	e01c      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 fbce 	bl	800819c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2140      	movs	r1, #64	@ 0x40
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fc28 	bl	800825c <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e00c      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f000 fc1f 	bl	800825c <TIM_ITRx_SetConfig>
      break;
 8007a1e:	e003      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73fb      	strb	r3, [r7, #15]
      break;
 8007a24:	e000      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	ffceff88 	.word	0xffceff88
 8007a48:	00100040 	.word	0x00100040
 8007a4c:	00100030 	.word	0x00100030
 8007a50:	00100020 	.word	0x00100020

08007a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a46      	ldr	r2, [pc, #280]	@ (8007bd0 <TIM_Base_SetConfig+0x12c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d013      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac2:	d00f      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a43      	ldr	r2, [pc, #268]	@ (8007bd4 <TIM_Base_SetConfig+0x130>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00b      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a42      	ldr	r2, [pc, #264]	@ (8007bd8 <TIM_Base_SetConfig+0x134>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a41      	ldr	r2, [pc, #260]	@ (8007bdc <TIM_Base_SetConfig+0x138>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a40      	ldr	r2, [pc, #256]	@ (8007be0 <TIM_Base_SetConfig+0x13c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d108      	bne.n	8007af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a35      	ldr	r2, [pc, #212]	@ (8007bd0 <TIM_Base_SetConfig+0x12c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d01f      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b04:	d01b      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a32      	ldr	r2, [pc, #200]	@ (8007bd4 <TIM_Base_SetConfig+0x130>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d017      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a31      	ldr	r2, [pc, #196]	@ (8007bd8 <TIM_Base_SetConfig+0x134>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a30      	ldr	r2, [pc, #192]	@ (8007bdc <TIM_Base_SetConfig+0x138>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00f      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2f      	ldr	r2, [pc, #188]	@ (8007be0 <TIM_Base_SetConfig+0x13c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2e      	ldr	r2, [pc, #184]	@ (8007be4 <TIM_Base_SetConfig+0x140>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2d      	ldr	r2, [pc, #180]	@ (8007be8 <TIM_Base_SetConfig+0x144>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_Base_SetConfig+0x9a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	@ (8007bec <TIM_Base_SetConfig+0x148>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a16      	ldr	r2, [pc, #88]	@ (8007bd0 <TIM_Base_SetConfig+0x12c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00f      	beq.n	8007b9c <TIM_Base_SetConfig+0xf8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	@ (8007be0 <TIM_Base_SetConfig+0x13c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00b      	beq.n	8007b9c <TIM_Base_SetConfig+0xf8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a17      	ldr	r2, [pc, #92]	@ (8007be4 <TIM_Base_SetConfig+0x140>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <TIM_Base_SetConfig+0xf8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a16      	ldr	r2, [pc, #88]	@ (8007be8 <TIM_Base_SetConfig+0x144>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_Base_SetConfig+0xf8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a15      	ldr	r2, [pc, #84]	@ (8007bec <TIM_Base_SetConfig+0x148>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d103      	bne.n	8007ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	611a      	str	r2, [r3, #16]
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40010400 	.word	0x40010400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400
 8007bec:	40014800 	.word	0x40014800

08007bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	f023 0201 	bic.w	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4b37      	ldr	r3, [pc, #220]	@ (8007cf8 <TIM_OC1_SetConfig+0x108>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0303 	bic.w	r3, r3, #3
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f023 0302 	bic.w	r3, r3, #2
 8007c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a2d      	ldr	r2, [pc, #180]	@ (8007cfc <TIM_OC1_SetConfig+0x10c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d00f      	beq.n	8007c6c <TIM_OC1_SetConfig+0x7c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007d00 <TIM_OC1_SetConfig+0x110>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00b      	beq.n	8007c6c <TIM_OC1_SetConfig+0x7c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a2b      	ldr	r2, [pc, #172]	@ (8007d04 <TIM_OC1_SetConfig+0x114>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d007      	beq.n	8007c6c <TIM_OC1_SetConfig+0x7c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d08 <TIM_OC1_SetConfig+0x118>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d003      	beq.n	8007c6c <TIM_OC1_SetConfig+0x7c>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a29      	ldr	r2, [pc, #164]	@ (8007d0c <TIM_OC1_SetConfig+0x11c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d10c      	bne.n	8007c86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f023 0308 	bic.w	r3, r3, #8
 8007c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 0304 	bic.w	r3, r3, #4
 8007c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a1c      	ldr	r2, [pc, #112]	@ (8007cfc <TIM_OC1_SetConfig+0x10c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00f      	beq.n	8007cae <TIM_OC1_SetConfig+0xbe>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1b      	ldr	r2, [pc, #108]	@ (8007d00 <TIM_OC1_SetConfig+0x110>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00b      	beq.n	8007cae <TIM_OC1_SetConfig+0xbe>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a1a      	ldr	r2, [pc, #104]	@ (8007d04 <TIM_OC1_SetConfig+0x114>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d007      	beq.n	8007cae <TIM_OC1_SetConfig+0xbe>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a19      	ldr	r2, [pc, #100]	@ (8007d08 <TIM_OC1_SetConfig+0x118>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d003      	beq.n	8007cae <TIM_OC1_SetConfig+0xbe>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a18      	ldr	r2, [pc, #96]	@ (8007d0c <TIM_OC1_SetConfig+0x11c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d111      	bne.n	8007cd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	fffeff8f 	.word	0xfffeff8f
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40010400 	.word	0x40010400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40014400 	.word	0x40014400
 8007d0c:	40014800 	.word	0x40014800

08007d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	f023 0210 	bic.w	r2, r3, #16
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4b34      	ldr	r3, [pc, #208]	@ (8007e0c <TIM_OC2_SetConfig+0xfc>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0320 	bic.w	r3, r3, #32
 8007d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a29      	ldr	r2, [pc, #164]	@ (8007e10 <TIM_OC2_SetConfig+0x100>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_OC2_SetConfig+0x68>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a28      	ldr	r2, [pc, #160]	@ (8007e14 <TIM_OC2_SetConfig+0x104>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d10d      	bne.n	8007d94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a1e      	ldr	r2, [pc, #120]	@ (8007e10 <TIM_OC2_SetConfig+0x100>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00f      	beq.n	8007dbc <TIM_OC2_SetConfig+0xac>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <TIM_OC2_SetConfig+0x104>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <TIM_OC2_SetConfig+0xac>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e18 <TIM_OC2_SetConfig+0x108>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d007      	beq.n	8007dbc <TIM_OC2_SetConfig+0xac>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a1b      	ldr	r2, [pc, #108]	@ (8007e1c <TIM_OC2_SetConfig+0x10c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <TIM_OC2_SetConfig+0xac>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a1a      	ldr	r2, [pc, #104]	@ (8007e20 <TIM_OC2_SetConfig+0x110>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d113      	bne.n	8007de4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	feff8fff 	.word	0xfeff8fff
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40010400 	.word	0x40010400
 8007e18:	40014000 	.word	0x40014000
 8007e1c:	40014400 	.word	0x40014400
 8007e20:	40014800 	.word	0x40014800

08007e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4b33      	ldr	r3, [pc, #204]	@ (8007f1c <TIM_OC3_SetConfig+0xf8>)
 8007e50:	4013      	ands	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	@ (8007f20 <TIM_OC3_SetConfig+0xfc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x66>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a27      	ldr	r2, [pc, #156]	@ (8007f24 <TIM_OC3_SetConfig+0x100>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d10d      	bne.n	8007ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f20 <TIM_OC3_SetConfig+0xfc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00f      	beq.n	8007ece <TIM_OC3_SetConfig+0xaa>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f24 <TIM_OC3_SetConfig+0x100>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00b      	beq.n	8007ece <TIM_OC3_SetConfig+0xaa>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f28 <TIM_OC3_SetConfig+0x104>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <TIM_OC3_SetConfig+0xaa>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f2c <TIM_OC3_SetConfig+0x108>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <TIM_OC3_SetConfig+0xaa>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a19      	ldr	r2, [pc, #100]	@ (8007f30 <TIM_OC3_SetConfig+0x10c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d113      	bne.n	8007ef6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	621a      	str	r2, [r3, #32]
}
 8007f10:	bf00      	nop
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	fffeff8f 	.word	0xfffeff8f
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40010400 	.word	0x40010400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4b24      	ldr	r3, [pc, #144]	@ (8007ff0 <TIM_OC4_SetConfig+0xbc>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	021b      	lsls	r3, r3, #8
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	031b      	lsls	r3, r3, #12
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a19      	ldr	r2, [pc, #100]	@ (8007ff4 <TIM_OC4_SetConfig+0xc0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00f      	beq.n	8007fb4 <TIM_OC4_SetConfig+0x80>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a18      	ldr	r2, [pc, #96]	@ (8007ff8 <TIM_OC4_SetConfig+0xc4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00b      	beq.n	8007fb4 <TIM_OC4_SetConfig+0x80>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	@ (8007ffc <TIM_OC4_SetConfig+0xc8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d007      	beq.n	8007fb4 <TIM_OC4_SetConfig+0x80>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <TIM_OC4_SetConfig+0xcc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d003      	beq.n	8007fb4 <TIM_OC4_SetConfig+0x80>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <TIM_OC4_SetConfig+0xd0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d109      	bne.n	8007fc8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	019b      	lsls	r3, r3, #6
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	feff8fff 	.word	0xfeff8fff
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40010400 	.word	0x40010400
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40014400 	.word	0x40014400
 8008004:	40014800 	.word	0x40014800

08008008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4b21      	ldr	r3, [pc, #132]	@ (80080b8 <TIM_OC5_SetConfig+0xb0>)
 8008034:	4013      	ands	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a18      	ldr	r2, [pc, #96]	@ (80080bc <TIM_OC5_SetConfig+0xb4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00f      	beq.n	800807e <TIM_OC5_SetConfig+0x76>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <TIM_OC5_SetConfig+0xb8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00b      	beq.n	800807e <TIM_OC5_SetConfig+0x76>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <TIM_OC5_SetConfig+0xbc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d007      	beq.n	800807e <TIM_OC5_SetConfig+0x76>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a15      	ldr	r2, [pc, #84]	@ (80080c8 <TIM_OC5_SetConfig+0xc0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d003      	beq.n	800807e <TIM_OC5_SetConfig+0x76>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a14      	ldr	r2, [pc, #80]	@ (80080cc <TIM_OC5_SetConfig+0xc4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d109      	bne.n	8008092 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	621a      	str	r2, [r3, #32]
}
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	fffeff8f 	.word	0xfffeff8f
 80080bc:	40010000 	.word	0x40010000
 80080c0:	40010400 	.word	0x40010400
 80080c4:	40014000 	.word	0x40014000
 80080c8:	40014400 	.word	0x40014400
 80080cc:	40014800 	.word	0x40014800

080080d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4b22      	ldr	r3, [pc, #136]	@ (8008184 <TIM_OC6_SetConfig+0xb4>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	051b      	lsls	r3, r3, #20
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	4313      	orrs	r3, r2
 800811e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a19      	ldr	r2, [pc, #100]	@ (8008188 <TIM_OC6_SetConfig+0xb8>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00f      	beq.n	8008148 <TIM_OC6_SetConfig+0x78>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a18      	ldr	r2, [pc, #96]	@ (800818c <TIM_OC6_SetConfig+0xbc>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00b      	beq.n	8008148 <TIM_OC6_SetConfig+0x78>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a17      	ldr	r2, [pc, #92]	@ (8008190 <TIM_OC6_SetConfig+0xc0>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d007      	beq.n	8008148 <TIM_OC6_SetConfig+0x78>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a16      	ldr	r2, [pc, #88]	@ (8008194 <TIM_OC6_SetConfig+0xc4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d003      	beq.n	8008148 <TIM_OC6_SetConfig+0x78>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a15      	ldr	r2, [pc, #84]	@ (8008198 <TIM_OC6_SetConfig+0xc8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d109      	bne.n	800815c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800814e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	029b      	lsls	r3, r3, #10
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	621a      	str	r2, [r3, #32]
}
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	feff8fff 	.word	0xfeff8fff
 8008188:	40010000 	.word	0x40010000
 800818c:	40010400 	.word	0x40010400
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800

0800819c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f023 0201 	bic.w	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f023 030a 	bic.w	r3, r3, #10
 80081d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	621a      	str	r2, [r3, #32]
}
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b087      	sub	sp, #28
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	f023 0210 	bic.w	r2, r3, #16
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	031b      	lsls	r3, r3, #12
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4b09      	ldr	r3, [pc, #36]	@ (8008294 <TIM_ITRx_SetConfig+0x38>)
 8008270:	4013      	ands	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	f043 0307 	orr.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	609a      	str	r2, [r3, #8]
}
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	ffcfff8f 	.word	0xffcfff8f

08008298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	021a      	lsls	r2, r3, #8
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4313      	orrs	r3, r2
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	609a      	str	r2, [r3, #8]
}
 80082cc:	bf00      	nop
 80082ce:	371c      	adds	r7, #28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 031f 	and.w	r3, r3, #31
 80082ea:	2201      	movs	r2, #1
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a1a      	ldr	r2, [r3, #32]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	43db      	mvns	r3, r3
 80082fa:	401a      	ands	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 031f 	and.w	r3, r3, #31
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	fa01 f303 	lsl.w	r3, r1, r3
 8008310:	431a      	orrs	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	621a      	str	r2, [r3, #32]
}
 8008316:	bf00      	nop
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008338:	2302      	movs	r3, #2
 800833a:	e06d      	b.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a30      	ldr	r2, [pc, #192]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a2f      	ldr	r2, [pc, #188]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d108      	bne.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008388:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4313      	orrs	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a20      	ldr	r2, [pc, #128]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d022      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ae:	d01d      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a1d      	ldr	r2, [pc, #116]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d018      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a1c      	ldr	r2, [pc, #112]	@ (8008430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00e      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d009      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a16      	ldr	r2, [pc, #88]	@ (8008438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a15      	ldr	r2, [pc, #84]	@ (800843c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d10c      	bne.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	40010000 	.word	0x40010000
 8008428:	40010400 	.word	0x40010400
 800842c:	40000400 	.word	0x40000400
 8008430:	40000800 	.word	0x40000800
 8008434:	40000c00 	.word	0x40000c00
 8008438:	40001800 	.word	0x40001800
 800843c:	40014000 	.word	0x40014000

08008440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008458:	2302      	movs	r3, #2
 800845a:	e065      	b.n	8008528 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a16      	ldr	r2, [pc, #88]	@ (8008534 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a14      	ldr	r2, [pc, #80]	@ (8008538 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d115      	bne.n	8008516 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f4:	051b      	lsls	r3, r3, #20
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	40010000 	.word	0x40010000
 8008538:	40010400 	.word	0x40010400

0800853c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <memset>:
 8008578:	4402      	add	r2, r0
 800857a:	4603      	mov	r3, r0
 800857c:	4293      	cmp	r3, r2
 800857e:	d100      	bne.n	8008582 <memset+0xa>
 8008580:	4770      	bx	lr
 8008582:	f803 1b01 	strb.w	r1, [r3], #1
 8008586:	e7f9      	b.n	800857c <memset+0x4>

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	@ (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	@ (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	@ (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	@ (80085cc <__libc_init_array+0x44>)
 800859c:	f000 fde4 	bl	8009168 <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	08009368 	.word	0x08009368
 80085c4:	08009368 	.word	0x08009368
 80085c8:	08009368 	.word	0x08009368
 80085cc:	0800936c 	.word	0x0800936c

080085d0 <sin>:
 80085d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085d2:	eeb0 7b40 	vmov.f64	d7, d0
 80085d6:	ee17 3a90 	vmov	r3, s15
 80085da:	4a21      	ldr	r2, [pc, #132]	@ (8008660 <sin+0x90>)
 80085dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d807      	bhi.n	80085f4 <sin+0x24>
 80085e4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8008658 <sin+0x88>
 80085e8:	2000      	movs	r0, #0
 80085ea:	b005      	add	sp, #20
 80085ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f0:	f000 b8a2 	b.w	8008738 <__kernel_sin>
 80085f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008664 <sin+0x94>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d904      	bls.n	8008604 <sin+0x34>
 80085fa:	ee30 0b40 	vsub.f64	d0, d0, d0
 80085fe:	b005      	add	sp, #20
 8008600:	f85d fb04 	ldr.w	pc, [sp], #4
 8008604:	4668      	mov	r0, sp
 8008606:	f000 f8ef 	bl	80087e8 <__ieee754_rem_pio2>
 800860a:	f000 0003 	and.w	r0, r0, #3
 800860e:	2801      	cmp	r0, #1
 8008610:	d00a      	beq.n	8008628 <sin+0x58>
 8008612:	2802      	cmp	r0, #2
 8008614:	d00f      	beq.n	8008636 <sin+0x66>
 8008616:	b9c0      	cbnz	r0, 800864a <sin+0x7a>
 8008618:	ed9d 1b02 	vldr	d1, [sp, #8]
 800861c:	ed9d 0b00 	vldr	d0, [sp]
 8008620:	2001      	movs	r0, #1
 8008622:	f000 f889 	bl	8008738 <__kernel_sin>
 8008626:	e7ea      	b.n	80085fe <sin+0x2e>
 8008628:	ed9d 1b02 	vldr	d1, [sp, #8]
 800862c:	ed9d 0b00 	vldr	d0, [sp]
 8008630:	f000 f81a 	bl	8008668 <__kernel_cos>
 8008634:	e7e3      	b.n	80085fe <sin+0x2e>
 8008636:	ed9d 1b02 	vldr	d1, [sp, #8]
 800863a:	ed9d 0b00 	vldr	d0, [sp]
 800863e:	2001      	movs	r0, #1
 8008640:	f000 f87a 	bl	8008738 <__kernel_sin>
 8008644:	eeb1 0b40 	vneg.f64	d0, d0
 8008648:	e7d9      	b.n	80085fe <sin+0x2e>
 800864a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800864e:	ed9d 0b00 	vldr	d0, [sp]
 8008652:	f000 f809 	bl	8008668 <__kernel_cos>
 8008656:	e7f5      	b.n	8008644 <sin+0x74>
	...
 8008660:	3fe921fb 	.word	0x3fe921fb
 8008664:	7fefffff 	.word	0x7fefffff

08008668 <__kernel_cos>:
 8008668:	eeb0 5b40 	vmov.f64	d5, d0
 800866c:	ee15 1a90 	vmov	r1, s11
 8008670:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008678:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800867c:	d204      	bcs.n	8008688 <__kernel_cos+0x20>
 800867e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8008682:	ee17 3a90 	vmov	r3, s15
 8008686:	b343      	cbz	r3, 80086da <__kernel_cos+0x72>
 8008688:	ee25 6b05 	vmul.f64	d6, d5, d5
 800868c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8008690:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8008700 <__kernel_cos+0x98>
 8008694:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008708 <__kernel_cos+0xa0>
 8008698:	eea6 4b07 	vfma.f64	d4, d6, d7
 800869c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8008710 <__kernel_cos+0xa8>
 80086a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80086a4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008718 <__kernel_cos+0xb0>
 80086a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80086ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8008720 <__kernel_cos+0xb8>
 80086b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008730 <__kernel_cos+0xc8>)
 80086b2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80086b6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008728 <__kernel_cos+0xc0>
 80086ba:	4299      	cmp	r1, r3
 80086bc:	eea7 4b06 	vfma.f64	d4, d7, d6
 80086c0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80086c4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80086c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086cc:	eea6 1b04 	vfma.f64	d1, d6, d4
 80086d0:	d804      	bhi.n	80086dc <__kernel_cos+0x74>
 80086d2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80086d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80086da:	4770      	bx	lr
 80086dc:	4b15      	ldr	r3, [pc, #84]	@ (8008734 <__kernel_cos+0xcc>)
 80086de:	4299      	cmp	r1, r3
 80086e0:	d809      	bhi.n	80086f6 <__kernel_cos+0x8e>
 80086e2:	2200      	movs	r2, #0
 80086e4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80086e8:	ec43 2b16 	vmov	d6, r2, r3
 80086ec:	ee30 0b46 	vsub.f64	d0, d0, d6
 80086f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80086f4:	e7ed      	b.n	80086d2 <__kernel_cos+0x6a>
 80086f6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80086fa:	e7f7      	b.n	80086ec <__kernel_cos+0x84>
 80086fc:	f3af 8000 	nop.w
 8008700:	be8838d4 	.word	0xbe8838d4
 8008704:	bda8fae9 	.word	0xbda8fae9
 8008708:	bdb4b1c4 	.word	0xbdb4b1c4
 800870c:	3e21ee9e 	.word	0x3e21ee9e
 8008710:	809c52ad 	.word	0x809c52ad
 8008714:	be927e4f 	.word	0xbe927e4f
 8008718:	19cb1590 	.word	0x19cb1590
 800871c:	3efa01a0 	.word	0x3efa01a0
 8008720:	16c15177 	.word	0x16c15177
 8008724:	bf56c16c 	.word	0xbf56c16c
 8008728:	5555554c 	.word	0x5555554c
 800872c:	3fa55555 	.word	0x3fa55555
 8008730:	3fd33332 	.word	0x3fd33332
 8008734:	3fe90000 	.word	0x3fe90000

08008738 <__kernel_sin>:
 8008738:	ee10 3a90 	vmov	r3, s1
 800873c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008740:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008744:	d204      	bcs.n	8008750 <__kernel_sin+0x18>
 8008746:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800874a:	ee17 3a90 	vmov	r3, s15
 800874e:	b35b      	cbz	r3, 80087a8 <__kernel_sin+0x70>
 8008750:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008754:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008758:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80087b0 <__kernel_sin+0x78>
 800875c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80087b8 <__kernel_sin+0x80>
 8008760:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008764:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80087c0 <__kernel_sin+0x88>
 8008768:	eea4 7b06 	vfma.f64	d7, d4, d6
 800876c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80087c8 <__kernel_sin+0x90>
 8008770:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008774:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80087d0 <__kernel_sin+0x98>
 8008778:	eea4 7b06 	vfma.f64	d7, d4, d6
 800877c:	b930      	cbnz	r0, 800878c <__kernel_sin+0x54>
 800877e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80087d8 <__kernel_sin+0xa0>
 8008782:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008786:	eea4 0b05 	vfma.f64	d0, d4, d5
 800878a:	4770      	bx	lr
 800878c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008790:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8008794:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008798:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800879c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80087e0 <__kernel_sin+0xa8>
 80087a0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80087a4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w
 80087b0:	5acfd57c 	.word	0x5acfd57c
 80087b4:	3de5d93a 	.word	0x3de5d93a
 80087b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80087bc:	be5ae5e6 	.word	0xbe5ae5e6
 80087c0:	57b1fe7d 	.word	0x57b1fe7d
 80087c4:	3ec71de3 	.word	0x3ec71de3
 80087c8:	19c161d5 	.word	0x19c161d5
 80087cc:	bf2a01a0 	.word	0xbf2a01a0
 80087d0:	1110f8a6 	.word	0x1110f8a6
 80087d4:	3f811111 	.word	0x3f811111
 80087d8:	55555549 	.word	0x55555549
 80087dc:	bfc55555 	.word	0xbfc55555
 80087e0:	55555549 	.word	0x55555549
 80087e4:	3fc55555 	.word	0x3fc55555

080087e8 <__ieee754_rem_pio2>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	eeb0 7b40 	vmov.f64	d7, d0
 80087ee:	ee17 5a90 	vmov	r5, s15
 80087f2:	4b99      	ldr	r3, [pc, #612]	@ (8008a58 <__ieee754_rem_pio2+0x270>)
 80087f4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80087f8:	429e      	cmp	r6, r3
 80087fa:	b088      	sub	sp, #32
 80087fc:	4604      	mov	r4, r0
 80087fe:	d807      	bhi.n	8008810 <__ieee754_rem_pio2+0x28>
 8008800:	2200      	movs	r2, #0
 8008802:	2300      	movs	r3, #0
 8008804:	ed84 0b00 	vstr	d0, [r4]
 8008808:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800880c:	2000      	movs	r0, #0
 800880e:	e01b      	b.n	8008848 <__ieee754_rem_pio2+0x60>
 8008810:	4b92      	ldr	r3, [pc, #584]	@ (8008a5c <__ieee754_rem_pio2+0x274>)
 8008812:	429e      	cmp	r6, r3
 8008814:	d83b      	bhi.n	800888e <__ieee754_rem_pio2+0xa6>
 8008816:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800881a:	2d00      	cmp	r5, #0
 800881c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8008a18 <__ieee754_rem_pio2+0x230>
 8008820:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8008824:	dd19      	ble.n	800885a <__ieee754_rem_pio2+0x72>
 8008826:	ee30 7b46 	vsub.f64	d7, d0, d6
 800882a:	429e      	cmp	r6, r3
 800882c:	d00e      	beq.n	800884c <__ieee754_rem_pio2+0x64>
 800882e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8008a20 <__ieee754_rem_pio2+0x238>
 8008832:	ee37 6b45 	vsub.f64	d6, d7, d5
 8008836:	ee37 7b46 	vsub.f64	d7, d7, d6
 800883a:	ed84 6b00 	vstr	d6, [r4]
 800883e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008842:	ed84 7b02 	vstr	d7, [r4, #8]
 8008846:	2001      	movs	r0, #1
 8008848:	b008      	add	sp, #32
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8008a28 <__ieee754_rem_pio2+0x240>
 8008850:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8008a30 <__ieee754_rem_pio2+0x248>
 8008854:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008858:	e7eb      	b.n	8008832 <__ieee754_rem_pio2+0x4a>
 800885a:	429e      	cmp	r6, r3
 800885c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008860:	d00e      	beq.n	8008880 <__ieee754_rem_pio2+0x98>
 8008862:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8008a20 <__ieee754_rem_pio2+0x238>
 8008866:	ee37 6b05 	vadd.f64	d6, d7, d5
 800886a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800886e:	ed84 6b00 	vstr	d6, [r4]
 8008872:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	ed84 7b02 	vstr	d7, [r4, #8]
 800887e:	e7e3      	b.n	8008848 <__ieee754_rem_pio2+0x60>
 8008880:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8008a28 <__ieee754_rem_pio2+0x240>
 8008884:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8008a30 <__ieee754_rem_pio2+0x248>
 8008888:	ee37 7b06 	vadd.f64	d7, d7, d6
 800888c:	e7eb      	b.n	8008866 <__ieee754_rem_pio2+0x7e>
 800888e:	4b74      	ldr	r3, [pc, #464]	@ (8008a60 <__ieee754_rem_pio2+0x278>)
 8008890:	429e      	cmp	r6, r3
 8008892:	d870      	bhi.n	8008976 <__ieee754_rem_pio2+0x18e>
 8008894:	f000 f8ec 	bl	8008a70 <fabs>
 8008898:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800889c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008a38 <__ieee754_rem_pio2+0x250>
 80088a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80088a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80088a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80088ac:	ee17 0a90 	vmov	r0, s15
 80088b0:	eeb1 4b45 	vneg.f64	d4, d5
 80088b4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8008a18 <__ieee754_rem_pio2+0x230>
 80088b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80088bc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8008a20 <__ieee754_rem_pio2+0x238>
 80088c0:	281f      	cmp	r0, #31
 80088c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80088c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80088ca:	dc05      	bgt.n	80088d8 <__ieee754_rem_pio2+0xf0>
 80088cc:	4b65      	ldr	r3, [pc, #404]	@ (8008a64 <__ieee754_rem_pio2+0x27c>)
 80088ce:	1e42      	subs	r2, r0, #1
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	42b3      	cmp	r3, r6
 80088d6:	d109      	bne.n	80088ec <__ieee754_rem_pio2+0x104>
 80088d8:	ee16 3a90 	vmov	r3, s13
 80088dc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80088e0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80088e4:	2b10      	cmp	r3, #16
 80088e6:	ea4f 5226 	mov.w	r2, r6, asr #20
 80088ea:	dc02      	bgt.n	80088f2 <__ieee754_rem_pio2+0x10a>
 80088ec:	ed84 6b00 	vstr	d6, [r4]
 80088f0:	e01a      	b.n	8008928 <__ieee754_rem_pio2+0x140>
 80088f2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8008a28 <__ieee754_rem_pio2+0x240>
 80088f6:	eeb0 6b40 	vmov.f64	d6, d0
 80088fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80088fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008902:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008906:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8008a30 <__ieee754_rem_pio2+0x248>
 800890a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800890e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008912:	ee13 3a90 	vmov	r3, s7
 8008916:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b31      	cmp	r3, #49	@ 0x31
 800891e:	dc17      	bgt.n	8008950 <__ieee754_rem_pio2+0x168>
 8008920:	eeb0 0b46 	vmov.f64	d0, d6
 8008924:	ed84 3b00 	vstr	d3, [r4]
 8008928:	ed94 6b00 	vldr	d6, [r4]
 800892c:	2d00      	cmp	r5, #0
 800892e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008932:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008936:	ed84 0b02 	vstr	d0, [r4, #8]
 800893a:	da85      	bge.n	8008848 <__ieee754_rem_pio2+0x60>
 800893c:	eeb1 6b46 	vneg.f64	d6, d6
 8008940:	eeb1 0b40 	vneg.f64	d0, d0
 8008944:	ed84 6b00 	vstr	d6, [r4]
 8008948:	ed84 0b02 	vstr	d0, [r4, #8]
 800894c:	4240      	negs	r0, r0
 800894e:	e77b      	b.n	8008848 <__ieee754_rem_pio2+0x60>
 8008950:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8008a40 <__ieee754_rem_pio2+0x258>
 8008954:	eeb0 0b46 	vmov.f64	d0, d6
 8008958:	eea4 0b07 	vfma.f64	d0, d4, d7
 800895c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8008960:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008964:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8008a48 <__ieee754_rem_pio2+0x260>
 8008968:	eeb0 7b46 	vmov.f64	d7, d6
 800896c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8008970:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008974:	e7ba      	b.n	80088ec <__ieee754_rem_pio2+0x104>
 8008976:	4b3c      	ldr	r3, [pc, #240]	@ (8008a68 <__ieee754_rem_pio2+0x280>)
 8008978:	429e      	cmp	r6, r3
 800897a:	d906      	bls.n	800898a <__ieee754_rem_pio2+0x1a2>
 800897c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008980:	ed80 7b02 	vstr	d7, [r0, #8]
 8008984:	ed80 7b00 	vstr	d7, [r0]
 8008988:	e740      	b.n	800880c <__ieee754_rem_pio2+0x24>
 800898a:	ee10 3a10 	vmov	r3, s0
 800898e:	1532      	asrs	r2, r6, #20
 8008990:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8008994:	4618      	mov	r0, r3
 8008996:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800899a:	ec41 0b17 	vmov	d7, r0, r1
 800899e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80089a2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8008a50 <__ieee754_rem_pio2+0x268>
 80089a6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80089aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80089ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80089b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80089b6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80089ba:	a808      	add	r0, sp, #32
 80089bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80089c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80089c4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80089c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80089cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089d0:	2103      	movs	r1, #3
 80089d2:	ed30 7b02 	vldmdb	r0!, {d7}
 80089d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089de:	460b      	mov	r3, r1
 80089e0:	f101 31ff 	add.w	r1, r1, #4294967295
 80089e4:	d0f5      	beq.n	80089d2 <__ieee754_rem_pio2+0x1ea>
 80089e6:	4921      	ldr	r1, [pc, #132]	@ (8008a6c <__ieee754_rem_pio2+0x284>)
 80089e8:	9101      	str	r1, [sp, #4]
 80089ea:	2102      	movs	r1, #2
 80089ec:	9100      	str	r1, [sp, #0]
 80089ee:	a802      	add	r0, sp, #8
 80089f0:	4621      	mov	r1, r4
 80089f2:	f000 f845 	bl	8008a80 <__kernel_rem_pio2>
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	f6bf af26 	bge.w	8008848 <__ieee754_rem_pio2+0x60>
 80089fc:	ed94 7b00 	vldr	d7, [r4]
 8008a00:	eeb1 7b47 	vneg.f64	d7, d7
 8008a04:	ed84 7b00 	vstr	d7, [r4]
 8008a08:	ed94 7b02 	vldr	d7, [r4, #8]
 8008a0c:	eeb1 7b47 	vneg.f64	d7, d7
 8008a10:	ed84 7b02 	vstr	d7, [r4, #8]
 8008a14:	e79a      	b.n	800894c <__ieee754_rem_pio2+0x164>
 8008a16:	bf00      	nop
 8008a18:	54400000 	.word	0x54400000
 8008a1c:	3ff921fb 	.word	0x3ff921fb
 8008a20:	1a626331 	.word	0x1a626331
 8008a24:	3dd0b461 	.word	0x3dd0b461
 8008a28:	1a600000 	.word	0x1a600000
 8008a2c:	3dd0b461 	.word	0x3dd0b461
 8008a30:	2e037073 	.word	0x2e037073
 8008a34:	3ba3198a 	.word	0x3ba3198a
 8008a38:	6dc9c883 	.word	0x6dc9c883
 8008a3c:	3fe45f30 	.word	0x3fe45f30
 8008a40:	2e000000 	.word	0x2e000000
 8008a44:	3ba3198a 	.word	0x3ba3198a
 8008a48:	252049c1 	.word	0x252049c1
 8008a4c:	397b839a 	.word	0x397b839a
 8008a50:	00000000 	.word	0x00000000
 8008a54:	41700000 	.word	0x41700000
 8008a58:	3fe921fb 	.word	0x3fe921fb
 8008a5c:	4002d97b 	.word	0x4002d97b
 8008a60:	413921fb 	.word	0x413921fb
 8008a64:	08009190 	.word	0x08009190
 8008a68:	7fefffff 	.word	0x7fefffff
 8008a6c:	08009210 	.word	0x08009210

08008a70 <fabs>:
 8008a70:	ec51 0b10 	vmov	r0, r1, d0
 8008a74:	4602      	mov	r2, r0
 8008a76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008a7a:	ec43 2b10 	vmov	d0, r2, r3
 8008a7e:	4770      	bx	lr

08008a80 <__kernel_rem_pio2>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	ed2d 8b06 	vpush	{d8-d10}
 8008a88:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8008a8c:	469b      	mov	fp, r3
 8008a8e:	9001      	str	r0, [sp, #4]
 8008a90:	4bbb      	ldr	r3, [pc, #748]	@ (8008d80 <__kernel_rem_pio2+0x300>)
 8008a92:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8008a94:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8008a98:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8008a9c:	f112 0f14 	cmn.w	r2, #20
 8008aa0:	bfa8      	it	ge
 8008aa2:	1ed3      	subge	r3, r2, #3
 8008aa4:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008aa8:	bfb8      	it	lt
 8008aaa:	2300      	movlt	r3, #0
 8008aac:	f06f 0517 	mvn.w	r5, #23
 8008ab0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8008d68 <__kernel_rem_pio2+0x2e8>
 8008ab4:	bfa4      	itt	ge
 8008ab6:	2018      	movge	r0, #24
 8008ab8:	fb93 f3f0 	sdivge	r3, r3, r0
 8008abc:	fb03 5505 	mla	r5, r3, r5, r5
 8008ac0:	eba3 040a 	sub.w	r4, r3, sl
 8008ac4:	4415      	add	r5, r2
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	eb09 060a 	add.w	r6, r9, sl
 8008acc:	a81a      	add	r0, sp, #104	@ 0x68
 8008ace:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	42b2      	cmp	r2, r6
 8008ad6:	dd0e      	ble.n	8008af6 <__kernel_rem_pio2+0x76>
 8008ad8:	aa1a      	add	r2, sp, #104	@ 0x68
 8008ada:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8008ade:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	454e      	cmp	r6, r9
 8008ae6:	dc25      	bgt.n	8008b34 <__kernel_rem_pio2+0xb4>
 8008ae8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8008d68 <__kernel_rem_pio2+0x2e8>
 8008aec:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008af0:	4614      	mov	r4, r2
 8008af2:	2000      	movs	r0, #0
 8008af4:	e015      	b.n	8008b22 <__kernel_rem_pio2+0xa2>
 8008af6:	42d4      	cmn	r4, r2
 8008af8:	d409      	bmi.n	8008b0e <__kernel_rem_pio2+0x8e>
 8008afa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8008afe:	ee07 1a90 	vmov	s15, r1
 8008b02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b06:	eca0 7b02 	vstmia	r0!, {d7}
 8008b0a:	3201      	adds	r2, #1
 8008b0c:	e7e2      	b.n	8008ad4 <__kernel_rem_pio2+0x54>
 8008b0e:	eeb0 7b46 	vmov.f64	d7, d6
 8008b12:	e7f8      	b.n	8008b06 <__kernel_rem_pio2+0x86>
 8008b14:	ecbc 5b02 	vldmia	ip!, {d5}
 8008b18:	ed94 6b00 	vldr	d6, [r4]
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008b22:	4550      	cmp	r0, sl
 8008b24:	f1a4 0408 	sub.w	r4, r4, #8
 8008b28:	ddf4      	ble.n	8008b14 <__kernel_rem_pio2+0x94>
 8008b2a:	ecae 7b02 	vstmia	lr!, {d7}
 8008b2e:	3601      	adds	r6, #1
 8008b30:	3208      	adds	r2, #8
 8008b32:	e7d7      	b.n	8008ae4 <__kernel_rem_pio2+0x64>
 8008b34:	aa06      	add	r2, sp, #24
 8008b36:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8008d70 <__kernel_rem_pio2+0x2f0>
 8008b3a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8008d78 <__kernel_rem_pio2+0x2f8>
 8008b3e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8008b42:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8008b46:	9203      	str	r2, [sp, #12]
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	464c      	mov	r4, r9
 8008b4c:	00e3      	lsls	r3, r4, #3
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	ab92      	add	r3, sp, #584	@ 0x248
 8008b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b56:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8008b5a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8008b5c:	ab06      	add	r3, sp, #24
 8008b5e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008b62:	461e      	mov	r6, r3
 8008b64:	4620      	mov	r0, r4
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f1a2 0208 	sub.w	r2, r2, #8
 8008b6c:	dc4a      	bgt.n	8008c04 <__kernel_rem_pio2+0x184>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	9305      	str	r3, [sp, #20]
 8008b72:	f000 fa01 	bl	8008f78 <scalbn>
 8008b76:	eeb0 8b40 	vmov.f64	d8, d0
 8008b7a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8008b7e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008b82:	f000 fa79 	bl	8009078 <floor>
 8008b86:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8008b8a:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008b8e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008b92:	2d00      	cmp	r5, #0
 8008b94:	ee17 8a90 	vmov	r8, s15
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b9e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008ba2:	dd41      	ble.n	8008c28 <__kernel_rem_pio2+0x1a8>
 8008ba4:	1e60      	subs	r0, r4, #1
 8008ba6:	aa06      	add	r2, sp, #24
 8008ba8:	f1c5 0c18 	rsb	ip, r5, #24
 8008bac:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8008bb0:	fa46 f20c 	asr.w	r2, r6, ip
 8008bb4:	4490      	add	r8, r2
 8008bb6:	fa02 f20c 	lsl.w	r2, r2, ip
 8008bba:	1ab6      	subs	r6, r6, r2
 8008bbc:	aa06      	add	r2, sp, #24
 8008bbe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8008bc2:	f1c5 0217 	rsb	r2, r5, #23
 8008bc6:	4116      	asrs	r6, r2
 8008bc8:	2e00      	cmp	r6, #0
 8008bca:	dd3c      	ble.n	8008c46 <__kernel_rem_pio2+0x1c6>
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	f108 0801 	add.w	r8, r8, #1
 8008bd4:	4660      	mov	r0, ip
 8008bd6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8008bda:	4564      	cmp	r4, ip
 8008bdc:	dc66      	bgt.n	8008cac <__kernel_rem_pio2+0x22c>
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	dd03      	ble.n	8008bea <__kernel_rem_pio2+0x16a>
 8008be2:	2d01      	cmp	r5, #1
 8008be4:	d072      	beq.n	8008ccc <__kernel_rem_pio2+0x24c>
 8008be6:	2d02      	cmp	r5, #2
 8008be8:	d07a      	beq.n	8008ce0 <__kernel_rem_pio2+0x260>
 8008bea:	2e02      	cmp	r6, #2
 8008bec:	d12b      	bne.n	8008c46 <__kernel_rem_pio2+0x1c6>
 8008bee:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008bf2:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008bf6:	b330      	cbz	r0, 8008c46 <__kernel_rem_pio2+0x1c6>
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 f9bd 	bl	8008f78 <scalbn>
 8008bfe:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008c02:	e020      	b.n	8008c46 <__kernel_rem_pio2+0x1c6>
 8008c04:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008c08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008c0c:	3801      	subs	r0, #1
 8008c0e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008c12:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008c16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008c1a:	eca6 0a01 	vstmia	r6!, {s0}
 8008c1e:	ed92 0b00 	vldr	d0, [r2]
 8008c22:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008c26:	e79e      	b.n	8008b66 <__kernel_rem_pio2+0xe6>
 8008c28:	d105      	bne.n	8008c36 <__kernel_rem_pio2+0x1b6>
 8008c2a:	1e62      	subs	r2, r4, #1
 8008c2c:	a906      	add	r1, sp, #24
 8008c2e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008c32:	15f6      	asrs	r6, r6, #23
 8008c34:	e7c8      	b.n	8008bc8 <__kernel_rem_pio2+0x148>
 8008c36:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8008c3a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c42:	da31      	bge.n	8008ca8 <__kernel_rem_pio2+0x228>
 8008c44:	2600      	movs	r6, #0
 8008c46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4e:	f040 809b 	bne.w	8008d88 <__kernel_rem_pio2+0x308>
 8008c52:	1e62      	subs	r2, r4, #1
 8008c54:	2000      	movs	r0, #0
 8008c56:	454a      	cmp	r2, r9
 8008c58:	da49      	bge.n	8008cee <__kernel_rem_pio2+0x26e>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d062      	beq.n	8008d24 <__kernel_rem_pio2+0x2a4>
 8008c5e:	3c01      	subs	r4, #1
 8008c60:	ab06      	add	r3, sp, #24
 8008c62:	3d18      	subs	r5, #24
 8008c64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f8      	beq.n	8008c5e <__kernel_rem_pio2+0x1de>
 8008c6c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 f981 	bl	8008f78 <scalbn>
 8008c76:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8008d70 <__kernel_rem_pio2+0x2f0>
 8008c7a:	1c62      	adds	r2, r4, #1
 8008c7c:	a96a      	add	r1, sp, #424	@ 0x1a8
 8008c7e:	00d3      	lsls	r3, r2, #3
 8008c80:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008c84:	4622      	mov	r2, r4
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	f280 80a8 	bge.w	8008ddc <__kernel_rem_pio2+0x35c>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	f2c0 80c6 	blt.w	8008e20 <__kernel_rem_pio2+0x3a0>
 8008c94:	a96a      	add	r1, sp, #424	@ 0x1a8
 8008c96:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008c9a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8008d68 <__kernel_rem_pio2+0x2e8>
 8008c9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8008d84 <__kernel_rem_pio2+0x304>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	1aa1      	subs	r1, r4, r2
 8008ca6:	e0b0      	b.n	8008e0a <__kernel_rem_pio2+0x38a>
 8008ca8:	2602      	movs	r6, #2
 8008caa:	e78f      	b.n	8008bcc <__kernel_rem_pio2+0x14c>
 8008cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb0:	b948      	cbnz	r0, 8008cc6 <__kernel_rem_pio2+0x246>
 8008cb2:	b122      	cbz	r2, 8008cbe <__kernel_rem_pio2+0x23e>
 8008cb4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8008cb8:	f843 2c04 	str.w	r2, [r3, #-4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f10c 0c01 	add.w	ip, ip, #1
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	e789      	b.n	8008bda <__kernel_rem_pio2+0x15a>
 8008cc6:	ebae 0202 	sub.w	r2, lr, r2
 8008cca:	e7f5      	b.n	8008cb8 <__kernel_rem_pio2+0x238>
 8008ccc:	1e62      	subs	r2, r4, #1
 8008cce:	ab06      	add	r3, sp, #24
 8008cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008cd8:	a906      	add	r1, sp, #24
 8008cda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008cde:	e784      	b.n	8008bea <__kernel_rem_pio2+0x16a>
 8008ce0:	1e62      	subs	r2, r4, #1
 8008ce2:	ab06      	add	r3, sp, #24
 8008ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008cec:	e7f4      	b.n	8008cd8 <__kernel_rem_pio2+0x258>
 8008cee:	ab06      	add	r3, sp, #24
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	3a01      	subs	r2, #1
 8008cf6:	4318      	orrs	r0, r3
 8008cf8:	e7ad      	b.n	8008c56 <__kernel_rem_pio2+0x1d6>
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d0fa      	beq.n	8008cfa <__kernel_rem_pio2+0x27a>
 8008d04:	9a04      	ldr	r2, [sp, #16]
 8008d06:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8008d0a:	446a      	add	r2, sp
 8008d0c:	eb04 000b 	add.w	r0, r4, fp
 8008d10:	a91a      	add	r1, sp, #104	@ 0x68
 8008d12:	1c66      	adds	r6, r4, #1
 8008d14:	3a98      	subs	r2, #152	@ 0x98
 8008d16:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008d1a:	4423      	add	r3, r4
 8008d1c:	42b3      	cmp	r3, r6
 8008d1e:	da04      	bge.n	8008d2a <__kernel_rem_pio2+0x2aa>
 8008d20:	461c      	mov	r4, r3
 8008d22:	e713      	b.n	8008b4c <__kernel_rem_pio2+0xcc>
 8008d24:	9a03      	ldr	r2, [sp, #12]
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7e8      	b.n	8008cfc <__kernel_rem_pio2+0x27c>
 8008d2a:	9902      	ldr	r1, [sp, #8]
 8008d2c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008d30:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8008d34:	9104      	str	r1, [sp, #16]
 8008d36:	ee07 1a90 	vmov	s15, r1
 8008d3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d3e:	2400      	movs	r4, #0
 8008d40:	eca0 7b02 	vstmia	r0!, {d7}
 8008d44:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8008d68 <__kernel_rem_pio2+0x2e8>
 8008d48:	4686      	mov	lr, r0
 8008d4a:	4554      	cmp	r4, sl
 8008d4c:	dd03      	ble.n	8008d56 <__kernel_rem_pio2+0x2d6>
 8008d4e:	eca2 7b02 	vstmia	r2!, {d7}
 8008d52:	3601      	adds	r6, #1
 8008d54:	e7e2      	b.n	8008d1c <__kernel_rem_pio2+0x29c>
 8008d56:	ecbc 5b02 	vldmia	ip!, {d5}
 8008d5a:	ed3e 6b02 	vldmdb	lr!, {d6}
 8008d5e:	3401      	adds	r4, #1
 8008d60:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008d64:	e7f1      	b.n	8008d4a <__kernel_rem_pio2+0x2ca>
 8008d66:	bf00      	nop
	...
 8008d74:	3e700000 	.word	0x3e700000
 8008d78:	00000000 	.word	0x00000000
 8008d7c:	41700000 	.word	0x41700000
 8008d80:	08009358 	.word	0x08009358
 8008d84:	08009318 	.word	0x08009318
 8008d88:	4268      	negs	r0, r5
 8008d8a:	eeb0 0b48 	vmov.f64	d0, d8
 8008d8e:	f000 f8f3 	bl	8008f78 <scalbn>
 8008d92:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8008f60 <__kernel_rem_pio2+0x4e0>
 8008d96:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9e:	db17      	blt.n	8008dd0 <__kernel_rem_pio2+0x350>
 8008da0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8008f68 <__kernel_rem_pio2+0x4e8>
 8008da4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008da8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008dac:	aa06      	add	r2, sp, #24
 8008dae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008db2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008db6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008dba:	3518      	adds	r5, #24
 8008dbc:	ee10 3a10 	vmov	r3, s0
 8008dc0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008dc4:	ee17 3a10 	vmov	r3, s14
 8008dc8:	3401      	adds	r4, #1
 8008dca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008dce:	e74d      	b.n	8008c6c <__kernel_rem_pio2+0x1ec>
 8008dd0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008dd4:	aa06      	add	r2, sp, #24
 8008dd6:	ee10 3a10 	vmov	r3, s0
 8008dda:	e7f6      	b.n	8008dca <__kernel_rem_pio2+0x34a>
 8008ddc:	a806      	add	r0, sp, #24
 8008dde:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008de2:	9001      	str	r0, [sp, #4]
 8008de4:	ee07 0a90 	vmov	s15, r0
 8008de8:	3a01      	subs	r2, #1
 8008dea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dee:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008df2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008df6:	ed21 7b02 	vstmdb	r1!, {d7}
 8008dfa:	e744      	b.n	8008c86 <__kernel_rem_pio2+0x206>
 8008dfc:	ecbc 5b02 	vldmia	ip!, {d5}
 8008e00:	ecb5 6b02 	vldmia	r5!, {d6}
 8008e04:	3001      	adds	r0, #1
 8008e06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008e0a:	4548      	cmp	r0, r9
 8008e0c:	dc01      	bgt.n	8008e12 <__kernel_rem_pio2+0x392>
 8008e0e:	4281      	cmp	r1, r0
 8008e10:	daf4      	bge.n	8008dfc <__kernel_rem_pio2+0x37c>
 8008e12:	a842      	add	r0, sp, #264	@ 0x108
 8008e14:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008e18:	ed81 7b00 	vstr	d7, [r1]
 8008e1c:	3a01      	subs	r2, #1
 8008e1e:	e736      	b.n	8008c8e <__kernel_rem_pio2+0x20e>
 8008e20:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008e22:	2a02      	cmp	r2, #2
 8008e24:	dc0a      	bgt.n	8008e3c <__kernel_rem_pio2+0x3bc>
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	dc2d      	bgt.n	8008e86 <__kernel_rem_pio2+0x406>
 8008e2a:	d046      	beq.n	8008eba <__kernel_rem_pio2+0x43a>
 8008e2c:	f008 0007 	and.w	r0, r8, #7
 8008e30:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8008e34:	ecbd 8b06 	vpop	{d8-d10}
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008e3e:	2a03      	cmp	r2, #3
 8008e40:	d1f4      	bne.n	8008e2c <__kernel_rem_pio2+0x3ac>
 8008e42:	a942      	add	r1, sp, #264	@ 0x108
 8008e44:	f1a3 0208 	sub.w	r2, r3, #8
 8008e48:	440a      	add	r2, r1
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f1a1 0108 	sub.w	r1, r1, #8
 8008e54:	dc52      	bgt.n	8008efc <__kernel_rem_pio2+0x47c>
 8008e56:	4621      	mov	r1, r4
 8008e58:	2901      	cmp	r1, #1
 8008e5a:	f1a2 0208 	sub.w	r2, r2, #8
 8008e5e:	dc5d      	bgt.n	8008f1c <__kernel_rem_pio2+0x49c>
 8008e60:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8008f70 <__kernel_rem_pio2+0x4f0>
 8008e64:	aa42      	add	r2, sp, #264	@ 0x108
 8008e66:	4413      	add	r3, r2
 8008e68:	2c01      	cmp	r4, #1
 8008e6a:	dc67      	bgt.n	8008f3c <__kernel_rem_pio2+0x4bc>
 8008e6c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8008e70:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8008e74:	2e00      	cmp	r6, #0
 8008e76:	d167      	bne.n	8008f48 <__kernel_rem_pio2+0x4c8>
 8008e78:	ed87 5b00 	vstr	d5, [r7]
 8008e7c:	ed87 6b02 	vstr	d6, [r7, #8]
 8008e80:	ed87 7b04 	vstr	d7, [r7, #16]
 8008e84:	e7d2      	b.n	8008e2c <__kernel_rem_pio2+0x3ac>
 8008e86:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8008f70 <__kernel_rem_pio2+0x4f0>
 8008e8a:	aa42      	add	r2, sp, #264	@ 0x108
 8008e8c:	4413      	add	r3, r2
 8008e8e:	4622      	mov	r2, r4
 8008e90:	2a00      	cmp	r2, #0
 8008e92:	da24      	bge.n	8008ede <__kernel_rem_pio2+0x45e>
 8008e94:	b34e      	cbz	r6, 8008eea <__kernel_rem_pio2+0x46a>
 8008e96:	eeb1 7b46 	vneg.f64	d7, d6
 8008e9a:	ed87 7b00 	vstr	d7, [r7]
 8008e9e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8008ea2:	aa44      	add	r2, sp, #272	@ 0x110
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	da20      	bge.n	8008ef0 <__kernel_rem_pio2+0x470>
 8008eae:	b10e      	cbz	r6, 8008eb4 <__kernel_rem_pio2+0x434>
 8008eb0:	eeb1 7b47 	vneg.f64	d7, d7
 8008eb4:	ed87 7b02 	vstr	d7, [r7, #8]
 8008eb8:	e7b8      	b.n	8008e2c <__kernel_rem_pio2+0x3ac>
 8008eba:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8008f70 <__kernel_rem_pio2+0x4f0>
 8008ebe:	aa42      	add	r2, sp, #264	@ 0x108
 8008ec0:	4413      	add	r3, r2
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	da05      	bge.n	8008ed2 <__kernel_rem_pio2+0x452>
 8008ec6:	b10e      	cbz	r6, 8008ecc <__kernel_rem_pio2+0x44c>
 8008ec8:	eeb1 7b47 	vneg.f64	d7, d7
 8008ecc:	ed87 7b00 	vstr	d7, [r7]
 8008ed0:	e7ac      	b.n	8008e2c <__kernel_rem_pio2+0x3ac>
 8008ed2:	ed33 6b02 	vldmdb	r3!, {d6}
 8008ed6:	3c01      	subs	r4, #1
 8008ed8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008edc:	e7f1      	b.n	8008ec2 <__kernel_rem_pio2+0x442>
 8008ede:	ed33 7b02 	vldmdb	r3!, {d7}
 8008ee2:	3a01      	subs	r2, #1
 8008ee4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008ee8:	e7d2      	b.n	8008e90 <__kernel_rem_pio2+0x410>
 8008eea:	eeb0 7b46 	vmov.f64	d7, d6
 8008eee:	e7d4      	b.n	8008e9a <__kernel_rem_pio2+0x41a>
 8008ef0:	ecb2 6b02 	vldmia	r2!, {d6}
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008efa:	e7d6      	b.n	8008eaa <__kernel_rem_pio2+0x42a>
 8008efc:	ed91 7b00 	vldr	d7, [r1]
 8008f00:	ed91 5b02 	vldr	d5, [r1, #8]
 8008f04:	3801      	subs	r0, #1
 8008f06:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008f0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f0e:	ed81 6b00 	vstr	d6, [r1]
 8008f12:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008f16:	ed81 7b02 	vstr	d7, [r1, #8]
 8008f1a:	e798      	b.n	8008e4e <__kernel_rem_pio2+0x3ce>
 8008f1c:	ed92 7b00 	vldr	d7, [r2]
 8008f20:	ed92 5b02 	vldr	d5, [r2, #8]
 8008f24:	3901      	subs	r1, #1
 8008f26:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008f2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f2e:	ed82 6b00 	vstr	d6, [r2]
 8008f32:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008f36:	ed82 7b02 	vstr	d7, [r2, #8]
 8008f3a:	e78d      	b.n	8008e58 <__kernel_rem_pio2+0x3d8>
 8008f3c:	ed33 6b02 	vldmdb	r3!, {d6}
 8008f40:	3c01      	subs	r4, #1
 8008f42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008f46:	e78f      	b.n	8008e68 <__kernel_rem_pio2+0x3e8>
 8008f48:	eeb1 5b45 	vneg.f64	d5, d5
 8008f4c:	eeb1 6b46 	vneg.f64	d6, d6
 8008f50:	ed87 5b00 	vstr	d5, [r7]
 8008f54:	eeb1 7b47 	vneg.f64	d7, d7
 8008f58:	ed87 6b02 	vstr	d6, [r7, #8]
 8008f5c:	e790      	b.n	8008e80 <__kernel_rem_pio2+0x400>
 8008f5e:	bf00      	nop
 8008f60:	00000000 	.word	0x00000000
 8008f64:	41700000 	.word	0x41700000
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	3e700000 	.word	0x3e700000
	...

08008f78 <scalbn>:
 8008f78:	ee10 1a90 	vmov	r1, s1
 8008f7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f80:	b98b      	cbnz	r3, 8008fa6 <scalbn+0x2e>
 8008f82:	ee10 3a10 	vmov	r3, s0
 8008f86:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008f8a:	4319      	orrs	r1, r3
 8008f8c:	d00a      	beq.n	8008fa4 <scalbn+0x2c>
 8008f8e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009040 <scalbn+0xc8>
 8008f92:	4b37      	ldr	r3, [pc, #220]	@ (8009070 <scalbn+0xf8>)
 8008f94:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008f98:	4298      	cmp	r0, r3
 8008f9a:	da0b      	bge.n	8008fb4 <scalbn+0x3c>
 8008f9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009048 <scalbn+0xd0>
 8008fa0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008fa4:	4770      	bx	lr
 8008fa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d107      	bne.n	8008fbe <scalbn+0x46>
 8008fae:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008fb2:	4770      	bx	lr
 8008fb4:	ee10 1a90 	vmov	r1, s1
 8008fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008fbc:	3b36      	subs	r3, #54	@ 0x36
 8008fbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008fc2:	4290      	cmp	r0, r2
 8008fc4:	dd0d      	ble.n	8008fe2 <scalbn+0x6a>
 8008fc6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009050 <scalbn+0xd8>
 8008fca:	ee10 3a90 	vmov	r3, s1
 8008fce:	eeb0 6b47 	vmov.f64	d6, d7
 8008fd2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8009058 <scalbn+0xe0>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8008fdc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8008fe0:	4770      	bx	lr
 8008fe2:	4418      	add	r0, r3
 8008fe4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8008fe8:	4298      	cmp	r0, r3
 8008fea:	dcec      	bgt.n	8008fc6 <scalbn+0x4e>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dd0a      	ble.n	8009006 <scalbn+0x8e>
 8008ff0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8008ff4:	ec53 2b10 	vmov	r2, r3, d0
 8008ff8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8008ffc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8009000:	ec43 2b10 	vmov	d0, r2, r3
 8009004:	4770      	bx	lr
 8009006:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800900a:	da09      	bge.n	8009020 <scalbn+0xa8>
 800900c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8009048 <scalbn+0xd0>
 8009010:	ee10 3a90 	vmov	r3, s1
 8009014:	eeb0 6b47 	vmov.f64	d6, d7
 8009018:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8009060 <scalbn+0xe8>
 800901c:	2b00      	cmp	r3, #0
 800901e:	e7db      	b.n	8008fd8 <scalbn+0x60>
 8009020:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8009024:	ec53 2b10 	vmov	r2, r3, d0
 8009028:	3036      	adds	r0, #54	@ 0x36
 800902a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800902e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8009032:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009068 <scalbn+0xf0>
 8009036:	ec43 2b10 	vmov	d0, r2, r3
 800903a:	e7b1      	b.n	8008fa0 <scalbn+0x28>
 800903c:	f3af 8000 	nop.w
 8009040:	00000000 	.word	0x00000000
 8009044:	43500000 	.word	0x43500000
 8009048:	c2f8f359 	.word	0xc2f8f359
 800904c:	01a56e1f 	.word	0x01a56e1f
 8009050:	8800759c 	.word	0x8800759c
 8009054:	7e37e43c 	.word	0x7e37e43c
 8009058:	8800759c 	.word	0x8800759c
 800905c:	fe37e43c 	.word	0xfe37e43c
 8009060:	c2f8f359 	.word	0xc2f8f359
 8009064:	81a56e1f 	.word	0x81a56e1f
 8009068:	00000000 	.word	0x00000000
 800906c:	3c900000 	.word	0x3c900000
 8009070:	ffff3cb0 	.word	0xffff3cb0
 8009074:	00000000 	.word	0x00000000

08009078 <floor>:
 8009078:	ee10 3a90 	vmov	r3, s1
 800907c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8009080:	ee10 2a10 	vmov	r2, s0
 8009084:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8009088:	2913      	cmp	r1, #19
 800908a:	b530      	push	{r4, r5, lr}
 800908c:	4615      	mov	r5, r2
 800908e:	dc33      	bgt.n	80090f8 <floor+0x80>
 8009090:	2900      	cmp	r1, #0
 8009092:	da18      	bge.n	80090c6 <floor+0x4e>
 8009094:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8009158 <floor+0xe0>
 8009098:	ee30 0b07 	vadd.f64	d0, d0, d7
 800909c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80090a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a4:	dd0a      	ble.n	80090bc <floor+0x44>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da50      	bge.n	800914c <floor+0xd4>
 80090aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090ae:	4313      	orrs	r3, r2
 80090b0:	2200      	movs	r2, #0
 80090b2:	4293      	cmp	r3, r2
 80090b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009160 <floor+0xe8>)
 80090b6:	bf08      	it	eq
 80090b8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	ec41 0b10 	vmov	d0, r0, r1
 80090c4:	e01f      	b.n	8009106 <floor+0x8e>
 80090c6:	4827      	ldr	r0, [pc, #156]	@ (8009164 <floor+0xec>)
 80090c8:	4108      	asrs	r0, r1
 80090ca:	ea03 0400 	and.w	r4, r3, r0
 80090ce:	4314      	orrs	r4, r2
 80090d0:	d019      	beq.n	8009106 <floor+0x8e>
 80090d2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009158 <floor+0xe0>
 80090d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80090da:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80090de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e2:	ddeb      	ble.n	80090bc <floor+0x44>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfbe      	ittt	lt
 80090e8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80090ec:	410a      	asrlt	r2, r1
 80090ee:	189b      	addlt	r3, r3, r2
 80090f0:	ea23 0300 	bic.w	r3, r3, r0
 80090f4:	2200      	movs	r2, #0
 80090f6:	e7e1      	b.n	80090bc <floor+0x44>
 80090f8:	2933      	cmp	r1, #51	@ 0x33
 80090fa:	dd05      	ble.n	8009108 <floor+0x90>
 80090fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009100:	d101      	bne.n	8009106 <floor+0x8e>
 8009102:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009106:	bd30      	pop	{r4, r5, pc}
 8009108:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	40e0      	lsrs	r0, r4
 8009112:	4210      	tst	r0, r2
 8009114:	d0f7      	beq.n	8009106 <floor+0x8e>
 8009116:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009158 <floor+0xe0>
 800911a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800911e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	ddc9      	ble.n	80090bc <floor+0x44>
 8009128:	2b00      	cmp	r3, #0
 800912a:	da02      	bge.n	8009132 <floor+0xba>
 800912c:	2914      	cmp	r1, #20
 800912e:	d103      	bne.n	8009138 <floor+0xc0>
 8009130:	3301      	adds	r3, #1
 8009132:	ea22 0200 	bic.w	r2, r2, r0
 8009136:	e7c1      	b.n	80090bc <floor+0x44>
 8009138:	2401      	movs	r4, #1
 800913a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800913e:	fa04 f101 	lsl.w	r1, r4, r1
 8009142:	440a      	add	r2, r1
 8009144:	42aa      	cmp	r2, r5
 8009146:	bf38      	it	cc
 8009148:	191b      	addcc	r3, r3, r4
 800914a:	e7f2      	b.n	8009132 <floor+0xba>
 800914c:	2200      	movs	r2, #0
 800914e:	4613      	mov	r3, r2
 8009150:	e7b4      	b.n	80090bc <floor+0x44>
 8009152:	bf00      	nop
 8009154:	f3af 8000 	nop.w
 8009158:	8800759c 	.word	0x8800759c
 800915c:	7e37e43c 	.word	0x7e37e43c
 8009160:	bff00000 	.word	0xbff00000
 8009164:	000fffff 	.word	0x000fffff

08009168 <_init>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr

08009174 <_fini>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr
