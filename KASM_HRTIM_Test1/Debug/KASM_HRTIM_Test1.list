
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e958  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800ebf8  0800ebf8  0000fbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f178  0800f178  00010178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f180  0800f180  00010180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f184  0800f184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f188  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002574  240001e0  0800f364  000111e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002754  0800f364  00011754  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ccb7  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002db1  00000000  00000000  0002dec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001758  00000000  00000000  00030c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000126c  00000000  00000000  000323d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a3ce  00000000  00000000  0003363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dd27  00000000  00000000  0006da0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d70b  00000000  00000000  0008b731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00208e3c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074fc  00000000  00000000  00208e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  0021037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ebe0 	.word	0x0800ebe0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800ebe0 	.word	0x0800ebe0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000684:	f001 fd12 	bl	80020ac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f002 fc12 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f96c 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f001 f9b0 	bl	80019f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000694:	f000 fc1a 	bl	8000ecc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000698:	f000 fce8 	bl	800106c <MX_TIM2_Init>
  MX_TIM4_Init();
 800069c:	f000 fd5c 	bl	8001158 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fdf2 	bl	8001288 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fe72 	bl	800138c <MX_TIM8_Init>
  MX_TIM12_Init();
 80006a8:	f000 ff1a 	bl	80014e0 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006ac:	f000 ff90 	bl	80015d0 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b0:	f000 ffdc 	bl	800166c <MX_TIM14_Init>
  MX_TIM15_Init();
 80006b4:	f001 f828 	bl	8001708 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006b8:	f001 f8d6 	bl	8001868 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006bc:	f000 fa02 	bl	8000ac4 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c0:	f000 fbd6 	bl	8000e70 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006c4:	f001 f94a 	bl	800195c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 80006c8:	488b      	ldr	r0, [pc, #556]	@ (80008f8 <main+0x278>)
 80006ca:	f008 f927 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006ce:	2100      	movs	r1, #0
 80006d0:	4889      	ldr	r0, [pc, #548]	@ (80008f8 <main+0x278>)
 80006d2:	f008 f9fd 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	4887      	ldr	r0, [pc, #540]	@ (80008f8 <main+0x278>)
 80006da:	f008 f9f9 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4885      	ldr	r0, [pc, #532]	@ (80008f8 <main+0x278>)
 80006e2:	f008 f9f5 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4883      	ldr	r0, [pc, #524]	@ (80008f8 <main+0x278>)
 80006ea:	f008 f9f1 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	4882      	ldr	r0, [pc, #520]	@ (80008fc <main+0x27c>)
 80006f4:	f003 fd16 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	487f      	ldr	r0, [pc, #508]	@ (80008fc <main+0x27c>)
 80006fe:	f003 fd11 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	487d      	ldr	r0, [pc, #500]	@ (80008fc <main+0x27c>)
 8000708:	f003 fd0c 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	487a      	ldr	r0, [pc, #488]	@ (80008fc <main+0x27c>)
 8000712:	f003 fd07 	bl	8004124 <HAL_GPIO_WritePin>
  //End Timer 1



  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000716:	487a      	ldr	r0, [pc, #488]	@ (8000900 <main+0x280>)
 8000718:	f008 f900 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4878      	ldr	r0, [pc, #480]	@ (8000900 <main+0x280>)
 8000720:	f008 f9d6 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	4874      	ldr	r0, [pc, #464]	@ (80008fc <main+0x27c>)
 800072a:	f003 fcfb 	bl	8004124 <HAL_GPIO_WritePin>
  //End Timer 2



  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 800072e:	4875      	ldr	r0, [pc, #468]	@ (8000904 <main+0x284>)
 8000730:	f008 f8f4 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	4873      	ldr	r0, [pc, #460]	@ (8000904 <main+0x284>)
 8000738:	f008 f9ca 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	4871      	ldr	r0, [pc, #452]	@ (8000904 <main+0x284>)
 8000740:	f008 f9c6 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	486f      	ldr	r0, [pc, #444]	@ (8000904 <main+0x284>)
 8000748:	f008 f9c2 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800074c:	210c      	movs	r1, #12
 800074e:	486d      	ldr	r0, [pc, #436]	@ (8000904 <main+0x284>)
 8000750:	f008 f9be 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	486b      	ldr	r0, [pc, #428]	@ (8000908 <main+0x288>)
 800075c:	f003 fce2 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000766:	4868      	ldr	r0, [pc, #416]	@ (8000908 <main+0x288>)
 8000768:	f003 fcdc 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000772:	4866      	ldr	r0, [pc, #408]	@ (800090c <main+0x28c>)
 8000774:	f003 fcd6 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	4863      	ldr	r0, [pc, #396]	@ (800090c <main+0x28c>)
 8000780:	f003 fcd0 	bl	8004124 <HAL_GPIO_WritePin>
  //End Timer 4



  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 8000784:	4862      	ldr	r0, [pc, #392]	@ (8000910 <main+0x290>)
 8000786:	f008 f8c9 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800078a:	2104      	movs	r1, #4
 800078c:	4860      	ldr	r0, [pc, #384]	@ (8000910 <main+0x290>)
 800078e:	f008 f99f 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000792:	2108      	movs	r1, #8
 8000794:	485e      	ldr	r0, [pc, #376]	@ (8000910 <main+0x290>)
 8000796:	f008 f99b 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	485a      	ldr	r0, [pc, #360]	@ (800090c <main+0x28c>)
 80007a2:	f003 fcbf 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ac:	4857      	ldr	r0, [pc, #348]	@ (800090c <main+0x28c>)
 80007ae:	f003 fcb9 	bl	8004124 <HAL_GPIO_WritePin>
        	   */
  //End Timer 5


  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 80007b2:	4858      	ldr	r0, [pc, #352]	@ (8000914 <main+0x294>)
 80007b4:	f008 f8b2 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	4856      	ldr	r0, [pc, #344]	@ (8000914 <main+0x294>)
 80007bc:	f008 f988 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	484d      	ldr	r0, [pc, #308]	@ (80008fc <main+0x27c>)
 80007c6:	f003 fcad 	bl	8004124 <HAL_GPIO_WritePin>
        	   */
  //End Timer 8


  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 80007ca:	4853      	ldr	r0, [pc, #332]	@ (8000918 <main+0x298>)
 80007cc:	f008 f8a6 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	4851      	ldr	r0, [pc, #324]	@ (8000918 <main+0x298>)
 80007d4:	f008 f97c 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007de:	4847      	ldr	r0, [pc, #284]	@ (80008fc <main+0x27c>)
 80007e0:	f003 fca0 	bl	8004124 <HAL_GPIO_WritePin>
         	   */
  //End Timer 12


  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 80007e4:	484d      	ldr	r0, [pc, #308]	@ (800091c <main+0x29c>)
 80007e6:	f008 f899 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	484b      	ldr	r0, [pc, #300]	@ (800091c <main+0x29c>)
 80007ee:	f008 f96f 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f8:	4840      	ldr	r0, [pc, #256]	@ (80008fc <main+0x27c>)
 80007fa:	f003 fc93 	bl	8004124 <HAL_GPIO_WritePin>
           	   */
  //End Timer 13


  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 80007fe:	4848      	ldr	r0, [pc, #288]	@ (8000920 <main+0x2a0>)
 8000800:	f008 f88c 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	4846      	ldr	r0, [pc, #280]	@ (8000920 <main+0x2a0>)
 8000808:	f008 f962 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	483a      	ldr	r0, [pc, #232]	@ (80008fc <main+0x27c>)
 8000814:	f003 fc86 	bl	8004124 <HAL_GPIO_WritePin>
           	   */
  //End Timer 14


  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 8000818:	4842      	ldr	r0, [pc, #264]	@ (8000924 <main+0x2a4>)
 800081a:	f008 f87f 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	4840      	ldr	r0, [pc, #256]	@ (8000924 <main+0x2a4>)
 8000822:	f008 f955 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	483e      	ldr	r0, [pc, #248]	@ (8000924 <main+0x2a4>)
 800082a:	f008 f951 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000834:	4831      	ldr	r0, [pc, #196]	@ (80008fc <main+0x27c>)
 8000836:	f003 fc75 	bl	8004124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	483a      	ldr	r0, [pc, #232]	@ (8000928 <main+0x2a8>)
 8000840:	f003 fc70 	bl	8004124 <HAL_GPIO_WritePin>
           	   */
  //End Timer 15


  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000844:	4839      	ldr	r0, [pc, #228]	@ (800092c <main+0x2ac>)
 8000846:	f008 f869 	bl	800891c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4837      	ldr	r0, [pc, #220]	@ (800092c <main+0x2ac>)
 800084e:	f008 f93f 	bl	8008ad0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	4834      	ldr	r0, [pc, #208]	@ (8000928 <main+0x2a8>)
 8000858:	f003 fc64 	bl	8004124 <HAL_GPIO_WritePin>
  //End Timer 16


  //HRTIM CODE GOES HERE *******
     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 800085c:	4b34      	ldr	r3, [pc, #208]	@ (8000930 <main+0x2b0>)
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000864:	4b32      	ldr	r3, [pc, #200]	@ (8000930 <main+0x2b0>)
 8000866:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 800086a:	601a      	str	r2, [r3, #0]
              */
  //END HRTIM CODE


  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 800086c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000870:	4830      	ldr	r0, [pc, #192]	@ (8000934 <main+0x2b4>)
 8000872:	f004 fe56 	bl	8005522 <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800087e:	482d      	ldr	r0, [pc, #180]	@ (8000934 <main+0x2b4>)
 8000880:	f004 fe02 	bl	8005488 <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2104      	movs	r1, #4
 8000888:	4827      	ldr	r0, [pc, #156]	@ (8000928 <main+0x2a8>)
 800088a:	f003 fc4b 	bl	8004124 <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 800088e:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <main+0x2b8>)
 8000890:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000894:	619a      	str	r2, [r3, #24]
       	     *
       	     */
  //End Low Power Timer

       	    //Timer Synchronization
       	    TIM1->CNT = 0;
 8000896:	4b29      	ldr	r3, [pc, #164]	@ (800093c <main+0x2bc>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM2->CNT = 0;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM4->CNT = 0;
 80008a4:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <main+0x2c0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM5->CNT = 0;
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <main+0x2c4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM8->CNT = 0;
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <main+0x2c8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM12->CNT = 0;
 80008b6:	4b25      	ldr	r3, [pc, #148]	@ (800094c <main+0x2cc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM13->CNT = 0;
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <main+0x2d0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM14->CNT = 0;
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <main+0x2d4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM15->CNT = 0;
 80008c8:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <main+0x2d8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM16->CNT = 0;
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <main+0x2dc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    LPTIM1->CNT = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <main+0x2b8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
       	        	HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), 10);

       	        	sprintf(buffer, "LPTIM Count: %d \n\r", LPTIM1->CNT);
       	        	HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), 10);
*/
   gen_sine();
 80008da:	f001 fbb1 	bl	8002040 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <main+0x2e0>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d1fb      	bne.n	80008de <main+0x25e>
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <main+0x2e4>)
 80008e8:	ed93 7b00 	vldr	d7, [r3]
 80008ec:	eeb0 0b47 	vmov.f64	d0, d7
 80008f0:	f001 f9b2 	bl	8001c58 <control_update>
 80008f4:	e7f3      	b.n	80008de <main+0x25e>
 80008f6:	bf00      	nop
 80008f8:	24000310 	.word	0x24000310
 80008fc:	58021000 	.word	0x58021000
 8000900:	2400035c 	.word	0x2400035c
 8000904:	240003a8 	.word	0x240003a8
 8000908:	58020400 	.word	0x58020400
 800090c:	58020800 	.word	0x58020800
 8000910:	240003f4 	.word	0x240003f4
 8000914:	24000440 	.word	0x24000440
 8000918:	2400048c 	.word	0x2400048c
 800091c:	240004d8 	.word	0x240004d8
 8000920:	24000524 	.word	0x24000524
 8000924:	24000570 	.word	0x24000570
 8000928:	58020c00 	.word	0x58020c00
 800092c:	240005bc 	.word	0x240005bc
 8000930:	40017400 	.word	0x40017400
 8000934:	240002d8 	.word	0x240002d8
 8000938:	40002400 	.word	0x40002400
 800093c:	40010000 	.word	0x40010000
 8000940:	40000800 	.word	0x40000800
 8000944:	40000c00 	.word	0x40000c00
 8000948:	40010400 	.word	0x40010400
 800094c:	40001800 	.word	0x40001800
 8000950:	40001c00 	.word	0x40001c00
 8000954:	40002000 	.word	0x40002000
 8000958:	40014000 	.word	0x40014000
 800095c:	40014400 	.word	0x40014400
 8000960:	2400069c 	.word	0x2400069c
 8000964:	240006a0 	.word	0x240006a0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09e      	sub	sp, #120	@ 0x78
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	224c      	movs	r2, #76	@ 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00b fcaf 	bl	800c2da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00b fca8 	bl	800c2da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800098a:	2002      	movs	r0, #2
 800098c:	f005 f922 	bl	8005bd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b48      	ldr	r3, [pc, #288]	@ (8000ab8 <SystemClock_Config+0x150>)
 8000996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000998:	4a47      	ldr	r2, [pc, #284]	@ (8000ab8 <SystemClock_Config+0x150>)
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009a0:	4b45      	ldr	r3, [pc, #276]	@ (8000ab8 <SystemClock_Config+0x150>)
 80009a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b44      	ldr	r3, [pc, #272]	@ (8000abc <SystemClock_Config+0x154>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a43      	ldr	r2, [pc, #268]	@ (8000abc <SystemClock_Config+0x154>)
 80009b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b41      	ldr	r3, [pc, #260]	@ (8000abc <SystemClock_Config+0x154>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c2:	bf00      	nop
 80009c4:	4b3d      	ldr	r3, [pc, #244]	@ (8000abc <SystemClock_Config+0x154>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d0:	d1f8      	bne.n	80009c4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac0 <SystemClock_Config+0x158>)
 80009d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d8:	4a39      	ldr	r2, [pc, #228]	@ (8000ac0 <SystemClock_Config+0x158>)
 80009da:	f043 0302 	orr.w	r3, r3, #2
 80009de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009e2:	4b37      	ldr	r3, [pc, #220]	@ (8000ac0 <SystemClock_Config+0x158>)
 80009e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <SystemClock_Config+0x154>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <SystemClock_Config+0x154>)
 80009fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <SystemClock_Config+0x154>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <SystemClock_Config+0x150>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ab8 <SystemClock_Config+0x150>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a16:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <SystemClock_Config+0x150>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a22:	bf00      	nop
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <SystemClock_Config+0x154>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a30:	d1f8      	bne.n	8000a24 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	2302      	movs	r3, #2
 8000a42:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a48:	2350      	movs	r3, #80	@ 0x50
 8000a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 f8ed 	bl	8005c48 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a74:	f001 fb46 	bl	8002104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	233f      	movs	r3, #63	@ 0x3f
 8000a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a84:	2308      	movs	r3, #8
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a88:	2340      	movs	r3, #64	@ 0x40
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8c:	2340      	movs	r3, #64	@ 0x40
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a96:	2340      	movs	r3, #64	@ 0x40
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 fd2b 	bl	80064fc <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000aac:	f001 fb2a 	bl	8002104 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3778      	adds	r7, #120	@ 0x78
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58000400 	.word	0x58000400
 8000abc:	58024800 	.word	0x58024800
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0aa      	sub	sp, #168	@ 0xa8
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000aca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000ada:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000ae8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aec:	2254      	movs	r2, #84	@ 0x54
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00b fbf2 	bl	800c2da <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2220      	movs	r2, #32
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00b fbe6 	bl	800c2da <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000b0e:	4bc4      	ldr	r3, [pc, #784]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b10:	4ac4      	ldr	r2, [pc, #784]	@ (8000e24 <MX_HRTIM_Init+0x360>)
 8000b12:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b14:	4bc2      	ldr	r3, [pc, #776]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b1a:	4bc1      	ldr	r3, [pc, #772]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000b20:	48bf      	ldr	r0, [pc, #764]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b22:	f003 fb19 	bl	8004158 <HAL_HRTIM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f001 faea 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	48bb      	ldr	r0, [pc, #748]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b34:	f003 fc37 	bl	80043a6 <HAL_HRTIM_EventPrescalerConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000b3e:	f001 fae1 	bl	8002104 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000b5a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2101      	movs	r1, #1
 8000b62:	48af      	ldr	r0, [pc, #700]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b64:	f003 fbf0 	bl	8004348 <HAL_HRTIM_EventConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000b6e:	f001 fac9 	bl	8002104 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000b72:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000b76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000b80:	2305      	movs	r3, #5
 8000b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000b86:	2308      	movs	r3, #8
 8000b88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b8c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b90:	461a      	mov	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	48a2      	ldr	r0, [pc, #648]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000b96:	f003 fbaf 	bl	80042f8 <HAL_HRTIM_TimeBaseConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000ba0:	f001 fab0 	bl	8002104 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000bc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bcc:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000be6:	2300      	movs	r3, #0
 8000be8:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000bea:	2300      	movs	r3, #0
 8000bec:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000bf8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c04:	461a      	mov	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	4885      	ldr	r0, [pc, #532]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000c0a:	f003 fc05 	bl	8004418 <HAL_HRTIM_WaveformTimerConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000c14:	f001 fa76 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000c18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2101      	movs	r1, #1
 8000c20:	487f      	ldr	r0, [pc, #508]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000c22:	f003 fbf9 	bl	8004418 <HAL_HRTIM_WaveformTimerConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000c2c:	f001 fa6a 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000c30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c34:	461a      	mov	r2, r3
 8000c36:	2102      	movs	r1, #2
 8000c38:	4879      	ldr	r0, [pc, #484]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000c3a:	f003 fbed 	bl	8004418 <HAL_HRTIM_WaveformTimerConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000c44:	f001 fa5e 	bl	8002104 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000c4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c50:	461a      	mov	r2, r3
 8000c52:	2103      	movs	r1, #3
 8000c54:	4872      	ldr	r0, [pc, #456]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000c56:	f003 fbdf 	bl	8004418 <HAL_HRTIM_WaveformTimerConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000c60:	f001 fa50 	bl	8002104 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000c64:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2100      	movs	r1, #0
 8000c72:	486b      	ldr	r0, [pc, #428]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000c74:	f003 fc42 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000c7e:	f001 fa41 	bl	8002104 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8e:	2202      	movs	r2, #2
 8000c90:	2100      	movs	r1, #0
 8000c92:	4863      	ldr	r0, [pc, #396]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000c94:	f003 fc32 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000c9e:	f001 fa31 	bl	8002104 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	2101      	movs	r1, #1
 8000caa:	485d      	ldr	r0, [pc, #372]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000cac:	f003 fc26 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000cb6:	f001 fa25 	bl	8002104 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4857      	ldr	r0, [pc, #348]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000cc4:	f003 fc1a 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000cce:	f001 fa19 	bl	8002104 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4851      	ldr	r0, [pc, #324]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000cdc:	f003 fc0e 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000ce6:	f001 fa0d 	bl	8002104 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000cee:	4b4e      	ldr	r3, [pc, #312]	@ (8000e28 <MX_HRTIM_Init+0x364>)
 8000cf0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4843      	ldr	r0, [pc, #268]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d12:	f003 fd61 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000d1c:	f001 f9f2 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2204      	movs	r2, #4
 8000d24:	2101      	movs	r1, #1
 8000d26:	483e      	ldr	r0, [pc, #248]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d28:	f003 fd56 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000d32:	f001 f9e7 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2210      	movs	r2, #16
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4838      	ldr	r0, [pc, #224]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d3e:	f003 fd4b 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000d48:	f001 f9dc 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2240      	movs	r2, #64	@ 0x40
 8000d50:	2103      	movs	r1, #3
 8000d52:	4833      	ldr	r0, [pc, #204]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d54:	f003 fd40 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000d5e:	f001 f9d1 	bl	8002104 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000d62:	2310      	movs	r3, #16
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	482c      	ldr	r0, [pc, #176]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d6e:	f003 fd33 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000d78:	f001 f9c4 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2208      	movs	r2, #8
 8000d80:	2101      	movs	r1, #1
 8000d82:	4827      	ldr	r0, [pc, #156]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d84:	f003 fd28 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000d8e:	f001 f9b9 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2220      	movs	r2, #32
 8000d96:	2102      	movs	r1, #2
 8000d98:	4821      	ldr	r0, [pc, #132]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000d9a:	f003 fd1d 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000da4:	f001 f9ae 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	2103      	movs	r1, #3
 8000dae:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000db0:	f003 fd12 	bl	80047d8 <HAL_HRTIM_WaveformOutputConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000dba:	f001 f9a3 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000dbe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4816      	ldr	r0, [pc, #88]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000dc8:	f003 fa96 	bl	80042f8 <HAL_HRTIM_TimeBaseConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000dd2:	f001 f997 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000de0:	f003 fb8c 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000dea:	f001 f98b 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000dee:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000df2:	461a      	mov	r2, r3
 8000df4:	2102      	movs	r1, #2
 8000df6:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000df8:	f003 fa7e 	bl	80042f8 <HAL_HRTIM_TimeBaseConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000e02:	f001 f97f 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_HRTIM_Init+0x35c>)
 8000e10:	f003 fb74 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d008      	beq.n	8000e2c <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000e1a:	f001 f973 	bl	8002104 <Error_Handler>
 8000e1e:	e005      	b.n	8000e2c <MX_HRTIM_Init+0x368>
 8000e20:	240001fc 	.word	0x240001fc
 8000e24:	40017400 	.word	0x40017400
 8000e28:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000e2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e30:	461a      	mov	r2, r3
 8000e32:	2103      	movs	r1, #3
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <MX_HRTIM_Init+0x3a8>)
 8000e36:	f003 fa5f 	bl	80042f8 <HAL_HRTIM_TimeBaseConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000e40:	f001 f960 	bl	8002104 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <MX_HRTIM_Init+0x3a8>)
 8000e4e:	f003 fb55 	bl	80044fc <HAL_HRTIM_WaveformCompareConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000e58:	f001 f954 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <MX_HRTIM_Init+0x3a8>)
 8000e5e:	f001 f9ab 	bl	80021b8 <HAL_HRTIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	37a8      	adds	r7, #168	@ 0xa8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	240001fc 	.word	0x240001fc

08000e70 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e76:	4a14      	ldr	r2, [pc, #80]	@ (8000ec8 <MX_LPTIM1_Init+0x58>)
 8000e78:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e8c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e94:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_LPTIM1_Init+0x54>)
 8000eb0:	f004 fa3a 	bl	8005328 <HAL_LPTIM_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000eba:	f001 f923 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	240002d8 	.word	0x240002d8
 8000ec8:	40002400 	.word	0x40002400

08000ecc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09a      	sub	sp, #104	@ 0x68
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	222c      	movs	r2, #44	@ 0x2c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00b f9e7 	bl	800c2da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f0c:	4b55      	ldr	r3, [pc, #340]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f0e:	4a56      	ldr	r2, [pc, #344]	@ (8001068 <MX_TIM1_Init+0x19c>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f12:	4b54      	ldr	r3, [pc, #336]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000f1e:	4b51      	ldr	r3, [pc, #324]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f20:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b4f      	ldr	r3, [pc, #316]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f32:	4b4c      	ldr	r3, [pc, #304]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f38:	484a      	ldr	r0, [pc, #296]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f3a:	f007 fc97 	bl	800886c <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f001 f8de 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f52:	4619      	mov	r1, r3
 8000f54:	4843      	ldr	r0, [pc, #268]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f56:	f008 f8e5 	bl	8009124 <HAL_TIM_ConfigClockSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f60:	f001 f8d0 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f64:	483f      	ldr	r0, [pc, #252]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f66:	f007 fd51 	bl	8008a0c <HAL_TIM_PWM_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f70:	f001 f8c8 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f74:	2320      	movs	r3, #32
 8000f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4837      	ldr	r0, [pc, #220]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000f88:	f008 fe2c 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f92:	f001 f8b7 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	@ 0x60
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482a      	ldr	r0, [pc, #168]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000fbc:	f007 ff9e 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fc6:	f001 f89d 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4824      	ldr	r0, [pc, #144]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000fd4:	f007 ff92 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000fde:	f001 f891 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fe2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481e      	ldr	r0, [pc, #120]	@ (8001064 <MX_TIM1_Init+0x198>)
 8000fec:	f007 ff86 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000ff6:	f001 f885 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ffa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ffe:	220c      	movs	r2, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4818      	ldr	r0, [pc, #96]	@ (8001064 <MX_TIM1_Init+0x198>)
 8001004:	f007 ff7a 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800100e:	f001 f879 	bl	8002104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001034:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM1_Init+0x198>)
 8001048:	f008 fe5a 	bl	8009d00 <HAL_TIMEx_ConfigBreakDeadTime>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001052:	f001 f857 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM1_Init+0x198>)
 8001058:	f001 facc 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 800105c:	bf00      	nop
 800105e:	3768      	adds	r7, #104	@ 0x68
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	24000310 	.word	0x24000310
 8001068:	40010000 	.word	0x40010000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010b4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010c2:	2280      	movs	r2, #128	@ 0x80
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010c8:	f007 fbd0 	bl	800886c <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010d2:	f001 f817 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010e4:	f008 f81e 	bl	8009124 <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010ee:	f001 f809 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f2:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010f4:	f007 fc8a 	bl	8008a0c <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010fe:	f001 f801 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4810      	ldr	r0, [pc, #64]	@ (8001154 <MX_TIM2_Init+0xe8>)
 8001112:	f008 fd67 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800111c:	f000 fff2 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_TIM2_Init+0xe8>)
 8001138:	f007 fee0 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001142:	f000 ffdf 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <MX_TIM2_Init+0xe8>)
 8001148:	f001 fa54 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3738      	adds	r7, #56	@ 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400035c 	.word	0x2400035c

08001158 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	@ 0x38
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800118a:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <MX_TIM4_Init+0x128>)
 800118c:	4a3d      	ldr	r2, [pc, #244]	@ (8001284 <MX_TIM4_Init+0x12c>)
 800118e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001190:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <MX_TIM4_Init+0x128>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <MX_TIM4_Init+0x128>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <MX_TIM4_Init+0x128>)
 800119e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <MX_TIM4_Init+0x128>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <MX_TIM4_Init+0x128>)
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011b0:	4833      	ldr	r0, [pc, #204]	@ (8001280 <MX_TIM4_Init+0x128>)
 80011b2:	f007 fb5b 	bl	800886c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011bc:	f000 ffa2 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ca:	4619      	mov	r1, r3
 80011cc:	482c      	ldr	r0, [pc, #176]	@ (8001280 <MX_TIM4_Init+0x128>)
 80011ce:	f007 ffa9 	bl	8009124 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80011d8:	f000 ff94 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011dc:	4828      	ldr	r0, [pc, #160]	@ (8001280 <MX_TIM4_Init+0x128>)
 80011de:	f007 fc15 	bl	8008a0c <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80011e8:	f000 ff8c 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4821      	ldr	r0, [pc, #132]	@ (8001280 <MX_TIM4_Init+0x128>)
 80011fc:	f008 fcf2 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001206:	f000 ff7d 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120a:	2360      	movs	r3, #96	@ 0x60
 800120c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4817      	ldr	r0, [pc, #92]	@ (8001280 <MX_TIM4_Init+0x128>)
 8001222:	f007 fe6b 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800122c:	f000 ff6a 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	2204      	movs	r2, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4812      	ldr	r0, [pc, #72]	@ (8001280 <MX_TIM4_Init+0x128>)
 8001238:	f007 fe60 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001242:	f000 ff5f 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	2208      	movs	r2, #8
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <MX_TIM4_Init+0x128>)
 800124e:	f007 fe55 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001258:	f000 ff54 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	220c      	movs	r2, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	@ (8001280 <MX_TIM4_Init+0x128>)
 8001264:	f007 fe4a 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800126e:	f000 ff49 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001272:	4803      	ldr	r0, [pc, #12]	@ (8001280 <MX_TIM4_Init+0x128>)
 8001274:	f001 f9be 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	@ 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	240003a8 	.word	0x240003a8
 8001284:	40000800 	.word	0x40000800

08001288 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	@ 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012ba:	4b32      	ldr	r3, [pc, #200]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012bc:	4a32      	ldr	r2, [pc, #200]	@ (8001388 <MX_TIM5_Init+0x100>)
 80012be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012c0:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 80012cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012ce:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80012d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012dc:	2280      	movs	r2, #128	@ 0x80
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012e0:	4828      	ldr	r0, [pc, #160]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012e2:	f007 fac3 	bl	800886c <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012ec:	f000 ff0a 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4821      	ldr	r0, [pc, #132]	@ (8001384 <MX_TIM5_Init+0xfc>)
 80012fe:	f007 ff11 	bl	8009124 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001308:	f000 fefc 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800130c:	481d      	ldr	r0, [pc, #116]	@ (8001384 <MX_TIM5_Init+0xfc>)
 800130e:	f007 fb7d 	bl	8008a0c <HAL_TIM_PWM_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001318:	f000 fef4 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4816      	ldr	r0, [pc, #88]	@ (8001384 <MX_TIM5_Init+0xfc>)
 800132c:	f008 fc5a 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001336:	f000 fee5 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133a:	2360      	movs	r3, #96	@ 0x60
 800133c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	2204      	movs	r2, #4
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <MX_TIM5_Init+0xfc>)
 8001352:	f007 fdd3 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800135c:	f000 fed2 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	2208      	movs	r2, #8
 8001364:	4619      	mov	r1, r3
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <MX_TIM5_Init+0xfc>)
 8001368:	f007 fdc8 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001372:	f000 fec7 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001376:	4803      	ldr	r0, [pc, #12]	@ (8001384 <MX_TIM5_Init+0xfc>)
 8001378:	f001 f93c 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 800137c:	bf00      	nop
 800137e:	3738      	adds	r7, #56	@ 0x38
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	240003f4 	.word	0x240003f4
 8001388:	40000c00 	.word	0x40000c00

0800138c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b09a      	sub	sp, #104	@ 0x68
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	222c      	movs	r2, #44	@ 0x2c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00a ff87 	bl	800c2da <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013cc:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013ce:	4a43      	ldr	r2, [pc, #268]	@ (80014dc <MX_TIM8_Init+0x150>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013e0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80013e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013ec:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013f8:	4837      	ldr	r0, [pc, #220]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80013fa:	f007 fa37 	bl	800886c <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001404:	f000 fe7e 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001412:	4619      	mov	r1, r3
 8001414:	4830      	ldr	r0, [pc, #192]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 8001416:	f007 fe85 	bl	8009124 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001420:	f000 fe70 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001424:	482c      	ldr	r0, [pc, #176]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 8001426:	f007 faf1 	bl	8008a0c <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001430:	f000 fe68 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001440:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001444:	4619      	mov	r1, r3
 8001446:	4824      	ldr	r0, [pc, #144]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 8001448:	f008 fbcc 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001452:	f000 fe57 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001456:	2360      	movs	r3, #96	@ 0x60
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800146e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001472:	220c      	movs	r2, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 8001478:	f007 fd40 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001482:	f000 fe3f 	bl	8002104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80014bc:	f008 fc20 	bl	8009d00 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80014c6:	f000 fe1d 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <MX_TIM8_Init+0x14c>)
 80014cc:	f001 f892 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3768      	adds	r7, #104	@ 0x68
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	24000440 	.word	0x24000440
 80014dc:	40010400 	.word	0x40010400

080014e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	@ 0x38
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001512:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001514:	4a2d      	ldr	r2, [pc, #180]	@ (80015cc <MX_TIM12_Init+0xec>)
 8001516:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001526:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800152a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001532:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001538:	4823      	ldr	r0, [pc, #140]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 800153a:	f007 f997 	bl	800886c <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001544:	f000 fdde 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001552:	4619      	mov	r1, r3
 8001554:	481c      	ldr	r0, [pc, #112]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001556:	f007 fde5 	bl	8009124 <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001560:	f000 fdd0 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001564:	4818      	ldr	r0, [pc, #96]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001566:	f007 fa51 	bl	8008a0c <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001570:	f000 fdc8 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 8001584:	f008 fb2e 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800158e:	f000 fdb9 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001592:	2360      	movs	r3, #96	@ 0x60
 8001594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	2204      	movs	r2, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 80015aa:	f007 fca7 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 80015b4:	f000 fda6 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <MX_TIM12_Init+0xe8>)
 80015ba:	f001 f81b 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	@ 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2400048c 	.word	0x2400048c
 80015cc:	40001800 	.word	0x40001800

080015d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <MX_TIM13_Init+0x94>)
 80015ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <MX_TIM13_Init+0x98>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_TIM13_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <MX_TIM13_Init+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM13_Init+0x94>)
 80015fc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001600:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MX_TIM13_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_TIM13_Init+0x94>)
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <MX_TIM13_Init+0x94>)
 8001610:	f007 f92c 	bl	800886c <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800161a:	f000 fd73 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800161e:	4811      	ldr	r0, [pc, #68]	@ (8001664 <MX_TIM13_Init+0x94>)
 8001620:	f007 f9f4 	bl	8008a0c <HAL_TIM_PWM_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800162a:	f000 fd6b 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162e:	2360      	movs	r3, #96	@ 0x60
 8001630:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	@ (8001664 <MX_TIM13_Init+0x94>)
 8001646:	f007 fc59 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001650:	f000 fd58 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001654:	4803      	ldr	r0, [pc, #12]	@ (8001664 <MX_TIM13_Init+0x94>)
 8001656:	f000 ffcd 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240004d8 	.word	0x240004d8
 8001668:	40001c00 	.word	0x40001c00

0800166c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <MX_TIM14_Init+0x94>)
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <MX_TIM14_Init+0x98>)
 8001688:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <MX_TIM14_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <MX_TIM14_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <MX_TIM14_Init+0x94>)
 8001698:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800169c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <MX_TIM14_Init+0x94>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <MX_TIM14_Init+0x94>)
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016aa:	4815      	ldr	r0, [pc, #84]	@ (8001700 <MX_TIM14_Init+0x94>)
 80016ac:	f007 f8de 	bl	800886c <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016b6:	f000 fd25 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016ba:	4811      	ldr	r0, [pc, #68]	@ (8001700 <MX_TIM14_Init+0x94>)
 80016bc:	f007 f9a6 	bl	8008a0c <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80016c6:	f000 fd1d 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	@ 0x60
 80016cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	@ (8001700 <MX_TIM14_Init+0x94>)
 80016e2:	f007 fc0b 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80016ec:	f000 fd0a 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <MX_TIM14_Init+0x94>)
 80016f2:	f000 ff7f 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000524 	.word	0x24000524
 8001704:	40002000 	.word	0x40002000

08001708 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b09a      	sub	sp, #104	@ 0x68
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001728:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	222c      	movs	r2, #44	@ 0x2c
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f00a fdc9 	bl	800c2da <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001748:	4b45      	ldr	r3, [pc, #276]	@ (8001860 <MX_TIM15_Init+0x158>)
 800174a:	4a46      	ldr	r2, [pc, #280]	@ (8001864 <MX_TIM15_Init+0x15c>)
 800174c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800174e:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <MX_TIM15_Init+0x158>)
 800175c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001760:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001768:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <MX_TIM15_Init+0x158>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176e:	4b3c      	ldr	r3, [pc, #240]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001774:	483a      	ldr	r0, [pc, #232]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001776:	f007 f879 	bl	800886c <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 fcc0 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001788:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800178e:	4619      	mov	r1, r3
 8001790:	4833      	ldr	r0, [pc, #204]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001792:	f007 fcc7 	bl	8009124 <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800179c:	f000 fcb2 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017a0:	482f      	ldr	r0, [pc, #188]	@ (8001860 <MX_TIM15_Init+0x158>)
 80017a2:	f007 f933 	bl	8008a0c <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017ac:	f000 fcaa 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017bc:	4619      	mov	r1, r3
 80017be:	4828      	ldr	r0, [pc, #160]	@ (8001860 <MX_TIM15_Init+0x158>)
 80017c0:	f008 fa10 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80017ca:	f000 fc9b 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ce:	2360      	movs	r3, #96	@ 0x60
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017da:	2300      	movs	r3, #0
 80017dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	481b      	ldr	r0, [pc, #108]	@ (8001860 <MX_TIM15_Init+0x158>)
 80017f4:	f007 fb82 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80017fe:	f000 fc81 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001802:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001806:	2204      	movs	r2, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4815      	ldr	r0, [pc, #84]	@ (8001860 <MX_TIM15_Init+0x158>)
 800180c:	f007 fb76 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001816:	f000 fc75 	bl	8002104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800182e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001842:	f008 fa5d 	bl	8009d00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800184c:	f000 fc5a 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <MX_TIM15_Init+0x158>)
 8001852:	f000 fecf 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 8001856:	bf00      	nop
 8001858:	3768      	adds	r7, #104	@ 0x68
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24000570 	.word	0x24000570
 8001864:	40014000 	.word	0x40014000

08001868 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b092      	sub	sp, #72	@ 0x48
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800186e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	222c      	movs	r2, #44	@ 0x2c
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f00a fd26 	bl	800c2da <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <MX_TIM16_Init+0xec>)
 8001890:	4a31      	ldr	r2, [pc, #196]	@ (8001958 <MX_TIM16_Init+0xf0>)
 8001892:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001894:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <MX_TIM16_Init+0xec>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <MX_TIM16_Init+0xec>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <MX_TIM16_Init+0xec>)
 80018a2:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <MX_TIM16_Init+0xec>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <MX_TIM16_Init+0xec>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <MX_TIM16_Init+0xec>)
 80018b6:	2280      	movs	r2, #128	@ 0x80
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018ba:	4826      	ldr	r0, [pc, #152]	@ (8001954 <MX_TIM16_Init+0xec>)
 80018bc:	f006 ffd6 	bl	800886c <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018c6:	f000 fc1d 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018ca:	4822      	ldr	r0, [pc, #136]	@ (8001954 <MX_TIM16_Init+0xec>)
 80018cc:	f007 f89e 	bl	8008a0c <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018d6:	f000 fc15 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	@ 0x60
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_TIM16_Init+0xec>)
 8001900:	f007 fafc 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800190a:	f000 fbfb 	bl	8002104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <MX_TIM16_Init+0xec>)
 8001936:	f008 f9e3 	bl	8009d00 <HAL_TIMEx_ConfigBreakDeadTime>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001940:	f000 fbe0 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001944:	4803      	ldr	r0, [pc, #12]	@ (8001954 <MX_TIM16_Init+0xec>)
 8001946:	f000 fe55 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 800194a:	bf00      	nop
 800194c:	3748      	adds	r7, #72	@ 0x48
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240005bc 	.word	0x240005bc
 8001958:	40014400 	.word	0x40014400

0800195c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <MX_UART4_Init+0x90>)
 8001962:	4a23      	ldr	r2, [pc, #140]	@ (80019f0 <MX_UART4_Init+0x94>)
 8001964:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001966:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <MX_UART4_Init+0x90>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <MX_UART4_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <MX_UART4_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800197a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <MX_UART4_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <MX_UART4_Init+0x90>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <MX_UART4_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <MX_UART4_Init+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <MX_UART4_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <MX_UART4_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_UART4_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019a4:	4811      	ldr	r0, [pc, #68]	@ (80019ec <MX_UART4_Init+0x90>)
 80019a6:	f008 fa47 	bl	8009e38 <HAL_UART_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019b0:	f000 fba8 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <MX_UART4_Init+0x90>)
 80019b8:	f009 fe88 	bl	800b6cc <HAL_UARTEx_SetTxFifoThreshold>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80019c2:	f000 fb9f 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4808      	ldr	r0, [pc, #32]	@ (80019ec <MX_UART4_Init+0x90>)
 80019ca:	f009 febd 	bl	800b748 <HAL_UARTEx_SetRxFifoThreshold>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80019d4:	f000 fb96 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <MX_UART4_Init+0x90>)
 80019da:	f009 fe3e 	bl	800b65a <HAL_UARTEx_DisableFifoMode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80019e4:	f000 fb8e 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	24000608 	.word	0x24000608
 80019f0:	40004c00 	.word	0x40004c00

080019f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	@ 0x30
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0a:	4b59      	ldr	r3, [pc, #356]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a10:	4a57      	ldr	r2, [pc, #348]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1a:	4b55      	ldr	r3, [pc, #340]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a28:	4b51      	ldr	r3, [pc, #324]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2e:	4a50      	ldr	r2, [pc, #320]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a38:	4b4d      	ldr	r3, [pc, #308]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4c:	4a48      	ldr	r2, [pc, #288]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a56:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6a:	4a41      	ldr	r2, [pc, #260]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a74:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a88:	4a39      	ldr	r2, [pc, #228]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa0:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa6:	4a32      	ldr	r2, [pc, #200]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <MX_GPIO_Init+0x17c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001ac4:	482b      	ldr	r0, [pc, #172]	@ (8001b74 <MX_GPIO_Init+0x180>)
 8001ac6:	f002 fb2d 	bl	8004124 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ad0:	4829      	ldr	r0, [pc, #164]	@ (8001b78 <MX_GPIO_Init+0x184>)
 8001ad2:	f002 fb27 	bl	8004124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001adc:	4827      	ldr	r0, [pc, #156]	@ (8001b7c <MX_GPIO_Init+0x188>)
 8001ade:	f002 fb21 	bl	8004124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001ae8:	4825      	ldr	r0, [pc, #148]	@ (8001b80 <MX_GPIO_Init+0x18c>)
 8001aea:	f002 fb1b 	bl	8004124 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001aee:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001af2:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	481b      	ldr	r0, [pc, #108]	@ (8001b74 <MX_GPIO_Init+0x180>)
 8001b08:	f002 f95c 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001b0c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4814      	ldr	r0, [pc, #80]	@ (8001b78 <MX_GPIO_Init+0x184>)
 8001b26:	f002 f94d 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001b2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <MX_GPIO_Init+0x188>)
 8001b44:	f002 f93e 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b48:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001b4c:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4807      	ldr	r0, [pc, #28]	@ (8001b80 <MX_GPIO_Init+0x18c>)
 8001b62:	f002 f92f 	bl	8003dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	@ 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	58024400 	.word	0x58024400
 8001b74:	58021000 	.word	0x58021000
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020400 	.word	0x58020400
 8001b80:	58020c00 	.word	0x58020c00
 8001b84:	00000000 	.word	0x00000000

08001b88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b4b0      	push	{r4, r5, r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001b90:	230a      	movs	r3, #10
 8001b92:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001b94:	a32e      	add	r3, pc, #184	@ (adr r3, 8001c50 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f645 51c0 	movw	r1, #24000	@ 0x5dc0
 8001ba8:	1854      	adds	r4, r2, r1
 8001baa:	f143 0500 	adc.w	r5, r3, #0
 8001bae:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bb0:	e9c3 4500 	strd	r4, r5, [r3]

	//Used to account for period in time-scale for UART Output
		period_ticks ++;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bbc:	6013      	str	r3, [r2, #0]


    if (htim==&htim1){
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12d      	bne.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	t+=1;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bce:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	fb93 f2f2 	sdiv	r2, r3, r2
 8001bda:	6979      	ldr	r1, [r7, #20]
 8001bdc:	fb01 f202 	mul.w	r2, r1, r2
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11d      	bne.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bee:	db02      	blt.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	ed93 6b00 	vldr	d6, [r3]
 8001c04:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c0e:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c1a:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bcb0      	pop	{r4, r5, r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	f3af 8000 	nop.w
 8001c30:	240025e8 	.word	0x240025e8
 8001c34:	240025f0 	.word	0x240025f0
 8001c38:	24000310 	.word	0x24000310
 8001c3c:	240025f4 	.word	0x240025f4
 8001c40:	240025f8 	.word	0x240025f8
 8001c44:	240006a8 	.word	0x240006a8
 8001c48:	240006a0 	.word	0x240006a0
 8001c4c:	2400069c 	.word	0x2400069c
 8001c50:	33333333 	.word	0x33333333
 8001c54:	3fd33333 	.word	0x3fd33333

08001c58 <control_update>:

static void control_update(double ref)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 8001c6e:	ed97 7b00 	vldr	d7, [r7]
 8001c72:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	d505      	bpl.n	8001c88 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 8001c7c:	4b01      	ldr	r3, [pc, #4]	@ (8001c84 <control_update+0x2c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e004      	b.n	8001c8e <control_update+0x36>
 8001c84:	24000000 	.word	0x24000000
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001c88:	4ba3      	ldr	r3, [pc, #652]	@ (8001f18 <control_update+0x2c0>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 8001c8e:	4ba2      	ldr	r3, [pc, #648]	@ (8001f18 <control_update+0x2c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	2101      	movs	r1, #1
 8001c98:	48a0      	ldr	r0, [pc, #640]	@ (8001f1c <control_update+0x2c4>)
 8001c9a:	f002 fa43 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8001c9e:	4b9e      	ldr	r3, [pc, #632]	@ (8001f18 <control_update+0x2c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	489c      	ldr	r0, [pc, #624]	@ (8001f1c <control_update+0x2c4>)
 8001caa:	f002 fa3b 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 8001cae:	4b9a      	ldr	r3, [pc, #616]	@ (8001f18 <control_update+0x2c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	4898      	ldr	r0, [pc, #608]	@ (8001f1c <control_update+0x2c4>)
 8001cba:	f002 fa33 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8001cbe:	4b96      	ldr	r3, [pc, #600]	@ (8001f18 <control_update+0x2c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4894      	ldr	r0, [pc, #592]	@ (8001f1c <control_update+0x2c4>)
 8001cca:	f002 fa2b 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 1


		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 8001cce:	4b92      	ldr	r3, [pc, #584]	@ (8001f18 <control_update+0x2c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4890      	ldr	r0, [pc, #576]	@ (8001f1c <control_update+0x2c4>)
 8001cda:	f002 fa23 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 8001cde:	4b8e      	ldr	r3, [pc, #568]	@ (8001f18 <control_update+0x2c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cea:	488d      	ldr	r0, [pc, #564]	@ (8001f20 <control_update+0x2c8>)
 8001cec:	f002 fa1a 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8001cf0:	4b89      	ldr	r3, [pc, #548]	@ (8001f18 <control_update+0x2c0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cfc:	4888      	ldr	r0, [pc, #544]	@ (8001f20 <control_update+0x2c8>)
 8001cfe:	f002 fa11 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 8001d02:	4b85      	ldr	r3, [pc, #532]	@ (8001f18 <control_update+0x2c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d0e:	4885      	ldr	r0, [pc, #532]	@ (8001f24 <control_update+0x2cc>)
 8001d10:	f002 fa08 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8001d14:	4b80      	ldr	r3, [pc, #512]	@ (8001f18 <control_update+0x2c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d20:	4880      	ldr	r0, [pc, #512]	@ (8001f24 <control_update+0x2cc>)
 8001d22:	f002 f9ff 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 8001d26:	4b7c      	ldr	r3, [pc, #496]	@ (8001f18 <control_update+0x2c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d32:	487c      	ldr	r0, [pc, #496]	@ (8001f24 <control_update+0x2cc>)
 8001d34:	f002 f9f6 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8001d38:	4b77      	ldr	r3, [pc, #476]	@ (8001f18 <control_update+0x2c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d44:	4877      	ldr	r0, [pc, #476]	@ (8001f24 <control_update+0x2cc>)
 8001d46:	f002 f9ed 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <control_update+0x2c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	2180      	movs	r1, #128	@ 0x80
 8001d54:	4871      	ldr	r0, [pc, #452]	@ (8001f1c <control_update+0x2c4>)
 8001d56:	f002 f9e5 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <control_update+0x2c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d66:	486d      	ldr	r0, [pc, #436]	@ (8001f1c <control_update+0x2c4>)
 8001d68:	f002 f9dc 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f18 <control_update+0x2c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d78:	4868      	ldr	r0, [pc, #416]	@ (8001f1c <control_update+0x2c4>)
 8001d7a:	f002 f9d3 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 8001d7e:	4b66      	ldr	r3, [pc, #408]	@ (8001f18 <control_update+0x2c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d8a:	4864      	ldr	r0, [pc, #400]	@ (8001f1c <control_update+0x2c4>)
 8001d8c:	f002 f9ca 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8001d90:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <control_update+0x2c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d9c:	485f      	ldr	r0, [pc, #380]	@ (8001f1c <control_update+0x2c4>)
 8001d9e:	f002 f9c1 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 8001da2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f18 <control_update+0x2c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	2101      	movs	r1, #1
 8001dac:	485e      	ldr	r0, [pc, #376]	@ (8001f28 <control_update+0x2d0>)
 8001dae:	f002 f9b9 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 8001db2:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <control_update+0x2c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	2102      	movs	r1, #2
 8001dbc:	485a      	ldr	r0, [pc, #360]	@ (8001f28 <control_update+0x2d0>)
 8001dbe:	f002 f9b1 	bl	8004124 <HAL_GPIO_WritePin>
		//End Timer 16


		//HRTIM CODE HERE **************
		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8001dc2:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <control_update+0x2c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2110      	movs	r1, #16
 8001dcc:	4856      	ldr	r0, [pc, #344]	@ (8001f28 <control_update+0x2d0>)
 8001dce:	f002 f9a9 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8001dd2:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <control_update+0x2c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2120      	movs	r1, #32
 8001ddc:	4852      	ldr	r0, [pc, #328]	@ (8001f28 <control_update+0x2d0>)
 8001dde:	f002 f9a1 	bl	8004124 <HAL_GPIO_WritePin>
		//End High HRTIM CHA

		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 8001de2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f18 <control_update+0x2c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	2140      	movs	r1, #64	@ 0x40
 8001dec:	484e      	ldr	r0, [pc, #312]	@ (8001f28 <control_update+0x2d0>)
 8001dee:	f002 f999 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 8001df2:	4b49      	ldr	r3, [pc, #292]	@ (8001f18 <control_update+0x2c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	484a      	ldr	r0, [pc, #296]	@ (8001f28 <control_update+0x2d0>)
 8001dfe:	f002 f991 	bl	8004124 <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 8001e02:	4b45      	ldr	r3, [pc, #276]	@ (8001f18 <control_update+0x2c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e0e:	4846      	ldr	r0, [pc, #280]	@ (8001f28 <control_update+0x2d0>)
 8001e10:	f002 f988 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 8001e14:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <control_update+0x2c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e20:	4841      	ldr	r0, [pc, #260]	@ (8001f28 <control_update+0x2d0>)
 8001e22:	f002 f97f 	bl	8004124 <HAL_GPIO_WritePin>
		//End High HRTIM CHC

		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 8001e26:	4b3c      	ldr	r3, [pc, #240]	@ (8001f18 <control_update+0x2c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e32:	483d      	ldr	r0, [pc, #244]	@ (8001f28 <control_update+0x2d0>)
 8001e34:	f002 f976 	bl	8004124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8001e38:	4b37      	ldr	r3, [pc, #220]	@ (8001f18 <control_update+0x2c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e44:	4838      	ldr	r0, [pc, #224]	@ (8001f28 <control_update+0x2d0>)
 8001e46:	f002 f96d 	bl	8004124 <HAL_GPIO_WritePin>
		//End High HRTIM CHD
		//END HRTIM CODE


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8001e4a:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <control_update+0x2c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	2104      	movs	r1, #4
 8001e54:	4834      	ldr	r0, [pc, #208]	@ (8001f28 <control_update+0x2d0>)
 8001e56:	f002 f965 	bl	8004124 <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8001e5a:	ed97 7b00 	vldr	d7, [r7]
 8001e5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e62:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8001e66:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8001f10 <control_update+0x2b8>
 8001e6a:	eeb0 1b47 	vmov.f64	d1, d7
 8001e6e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e72:	f000 f8b9 	bl	8001fe8 <calc_dutycycle>
 8001e76:	4603      	mov	r3, r0
 8001e78:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <control_update+0x2d4>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	89fa      	ldrh	r2, [r7, #14]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f000 809b 	beq.w	8001fbc <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 8001e86:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <control_update+0x2d4>)
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <control_update+0x2d4>)
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <control_update+0x2d8>)
 8001e92:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = dutycycle;
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <control_update+0x2d4>)
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <control_update+0x2d8>)
 8001e9a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = dutycycle;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <control_update+0x2d4>)
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <control_update+0x2d8>)
 8001ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = dutycycle;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <control_update+0x2d4>)
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <control_update+0x2d8>)
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 1


		//Timer 2
		TIM2->CCR1 = dutycycle;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <control_update+0x2d4>)
 8001eae:	881a      	ldrh	r2, [r3, #0]
 8001eb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <control_update+0x2d4>)
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <control_update+0x2dc>)
 8001ebc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = dutycycle;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <control_update+0x2d4>)
 8001ec0:	881a      	ldrh	r2, [r3, #0]
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <control_update+0x2dc>)
 8001ec4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR3 = dutycycle;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <control_update+0x2d4>)
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <control_update+0x2dc>)
 8001ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = dutycycle;
 8001ece:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <control_update+0x2d4>)
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <control_update+0x2dc>)
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 4


		//Timer 5
		TIM5->CCR2 = dutycycle;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <control_update+0x2d4>)
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <control_update+0x2e0>)
 8001edc:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = dutycycle;
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <control_update+0x2d4>)
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <control_update+0x2e0>)
 8001ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
		//End Timer 5


		//Timer 8
		TIM8->CCR4 = dutycycle;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <control_update+0x2d4>)
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <control_update+0x2e4>)
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 8


		//Timer 12
		TIM12->CCR2 = dutycycle;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <control_update+0x2d4>)
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <control_update+0x2e8>)
 8001ef4:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 12


		//Timer 13
		TIM13->CCR1 = dutycycle;
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <control_update+0x2d4>)
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <control_update+0x2ec>)
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 13


		//Timer 14
		TIM14->CCR1 = dutycycle;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <control_update+0x2d4>)
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <control_update+0x2f0>)
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 14


		//Timer 15
		TIM15->CCR1 = dutycycle;
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <control_update+0x2d4>)
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	e01f      	b.n	8001f4c <control_update+0x2f4>
 8001f0c:	f3af 8000 	nop.w
 8001f10:	cccccccd 	.word	0xcccccccd
 8001f14:	3ffccccc 	.word	0x3ffccccc
 8001f18:	24000000 	.word	0x24000000
 8001f1c:	58021000 	.word	0x58021000
 8001f20:	58020400 	.word	0x58020400
 8001f24:	58020800 	.word	0x58020800
 8001f28:	58020c00 	.word	0x58020c00
 8001f2c:	240025fc 	.word	0x240025fc
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40010400 	.word	0x40010400
 8001f40:	40001800 	.word	0x40001800
 8001f44:	40001c00 	.word	0x40001c00
 8001f48:	40002000 	.word	0x40002000
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <control_update+0x374>)
 8001f4e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM15->CCR2 = dutycycle;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <control_update+0x378>)
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <control_update+0x374>)
 8001f56:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 15


		//Timer 16
		TIM16->CCR1 = dutycycle;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <control_update+0x378>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <control_update+0x37c>)
 8001f5e:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 16


		//HRTIM CODE GOES HERE ********
		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <control_update+0x378>)
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <control_update+0x380>)
 8001f66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <control_update+0x378>)
 8001f6c:	881a      	ldrh	r2, [r3, #0]
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <control_update+0x380>)
 8001f70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <control_update+0x378>)
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <control_update+0x380>)
 8001f7a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <control_update+0x378>)
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <control_update+0x380>)
 8001f84:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <control_update+0x378>)
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <control_update+0x380>)
 8001f8e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <control_update+0x378>)
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <control_update+0x380>)
 8001f98:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <control_update+0x378>)
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <control_update+0x380>)
 8001fa2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <control_update+0x378>)
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <control_update+0x380>)
 8001fac:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		//End HRTIM CHD
		//END HRTIM CODE HERE


		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <control_update+0x378>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <control_update+0x384>)
 8001fba:	615a      	str	r2, [r3, #20]


	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <control_update+0x388>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	240025fc 	.word	0x240025fc
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40017400 	.word	0x40017400
 8001fdc:	40002400 	.word	0x40002400
 8001fe0:	2400069c 	.word	0x2400069c
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ff2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001ffa:	ed97 5b02 	vldr	d5, [r7, #8]
 8001ffe:	ed97 6b00 	vldr	d6, [r7]
 8002002:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002006:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002038 <calc_dutycycle+0x50>
 800200a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800200e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002012:	ee17 3a90 	vmov	r3, s15
 8002016:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002018:	8afb      	ldrh	r3, [r7, #22]
 800201a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800201e:	4293      	cmp	r3, r2
 8002020:	d902      	bls.n	8002028 <calc_dutycycle+0x40>
 8002022:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8002026:	82fb      	strh	r3, [r7, #22]

	return dc;
 8002028:	8afb      	ldrh	r3, [r7, #22]
}
 800202a:	4618      	mov	r0, r3
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	00000000 	.word	0x00000000
 800203c:	40d76fc0 	.word	0x40d76fc0

08002040 <gen_sine>:

static void gen_sine(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
	int i = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 800204a:	a316      	add	r3, pc, #88	@ (adr r3, 80020a4 <gen_sine+0x64>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e017      	b.n	800208a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002064:	ed97 7b00 	vldr	d7, [r7]
 8002068:	ee26 7b07 	vmul.f64	d7, d6, d7
 800206c:	eeb0 0b47 	vmov.f64	d0, d7
 8002070:	f00b ffea 	bl	800e048 <sin>
 8002074:	eeb0 7b40 	vmov.f64	d7, d0
 8002078:	4a09      	ldr	r2, [pc, #36]	@ (80020a0 <gen_sine+0x60>)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	3301      	adds	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002090:	dbe3      	blt.n	800205a <gen_sine+0x1a>
	}
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	f3af 8000 	nop.w
 80020a0:	240006a8 	.word	0x240006a8
 80020a4:	b68b71c3 	.word	0xb68b71c3
 80020a8:	3f79bc65 	.word	0x3f79bc65

080020ac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020b2:	463b      	mov	r3, r7
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020be:	f001 f8a5 	bl	800320c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020ce:	231f      	movs	r3, #31
 80020d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020d2:	2387      	movs	r3, #135	@ 0x87
 80020d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020da:	2300      	movs	r3, #0
 80020dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020ee:	463b      	mov	r3, r7
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 f8c3 	bl	800327c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020f6:	2004      	movs	r0, #4
 80020f8:	f001 f8a0 	bl	800323c <HAL_MPU_Enable>

}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <Error_Handler+0x8>

08002110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_MspInit+0x30>)
 8002118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800211c:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_MspInit+0x30>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_MspInit+0x30>)
 8002128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	58024400 	.word	0x58024400

08002144 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0b4      	sub	sp, #208	@ 0xd0
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	22c0      	movs	r2, #192	@ 0xc0
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f00a f8c0 	bl	800c2da <memset>
  if(hhrtim->Instance==HRTIM1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_HRTIM_MspInit+0x6c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d121      	bne.n	80021a8 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fd4a 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002186:	f7ff ffbd 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_HRTIM_MspInit+0x70>)
 800218c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002190:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_HRTIM_MspInit+0x70>)
 8002192:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002196:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_HRTIM_MspInit+0x70>)
 800219c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	37d0      	adds	r7, #208	@ 0xd0
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40017400 	.word	0x40017400
 80021b4:	58024400 	.word	0x58024400

080021b8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a23      	ldr	r2, [pc, #140]	@ (8002264 <HAL_HRTIM_MspPostInit+0xac>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d13f      	bne.n	800225a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_HRTIM_MspPostInit+0xb0>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e0:	4a21      	ldr	r2, [pc, #132]	@ (8002268 <HAL_HRTIM_MspPostInit+0xb0>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_HRTIM_MspPostInit+0xb0>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_HRTIM_MspPostInit+0xb0>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002268 <HAL_HRTIM_MspPostInit+0xb0>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <HAL_HRTIM_MspPostInit+0xb0>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002216:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	480e      	ldr	r0, [pc, #56]	@ (800226c <HAL_HRTIM_MspPostInit+0xb4>)
 8002234:	f001 fdc6 	bl	8003dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002238:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800223c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800224a:	2302      	movs	r3, #2
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4806      	ldr	r0, [pc, #24]	@ (8002270 <HAL_HRTIM_MspPostInit+0xb8>)
 8002256:	f001 fdb5 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40017400 	.word	0x40017400
 8002268:	58024400 	.word	0x58024400
 800226c:	58020800 	.word	0x58020800
 8002270:	58020000 	.word	0x58020000

08002274 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ba      	sub	sp, #232	@ 0xe8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	22c0      	movs	r2, #192	@ 0xc0
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00a f820 	bl	800c2da <memset>
  if(hlptim->Instance==LPTIM1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2b      	ldr	r2, [pc, #172]	@ (800234c <HAL_LPTIM_MspInit+0xd8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d14e      	bne.n	8002342 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80022a4:	f04f 0220 	mov.w	r2, #32
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fcaa 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 80022c6:	f7ff ff1d 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80022ca:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_LPTIM_MspInit+0xdc>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002350 <HAL_LPTIM_MspInit+0xdc>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022da:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <HAL_LPTIM_MspInit+0xdc>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_LPTIM_MspInit+0xdc>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <HAL_LPTIM_MspInit+0xdc>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_LPTIM_MspInit+0xdc>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800230a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002320:	2301      	movs	r3, #1
 8002322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002326:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800232a:	4619      	mov	r1, r3
 800232c:	4809      	ldr	r0, [pc, #36]	@ (8002354 <HAL_LPTIM_MspInit+0xe0>)
 800232e:	f001 fd49 	bl	8003dc4 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	205d      	movs	r0, #93	@ 0x5d
 8002338:	f000 ff33 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800233c:	205d      	movs	r0, #93	@ 0x5d
 800233e:	f000 ff4a 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002342:	bf00      	nop
 8002344:	37e8      	adds	r7, #232	@ 0xe8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40002400 	.word	0x40002400
 8002350:	58024400 	.word	0x58024400
 8002354:	58020c00 	.word	0x58020c00

08002358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	@ 0x30
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a99      	ldr	r2, [pc, #612]	@ (80025cc <HAL_TIM_Base_MspInit+0x274>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d117      	bne.n	800239a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800236a:	4b99      	ldr	r3, [pc, #612]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800236c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002370:	4a97      	ldr	r2, [pc, #604]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800237a:	4b95      	ldr	r3, [pc, #596]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800237c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2019      	movs	r0, #25
 800238e:	f000 ff08 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002392:	2019      	movs	r0, #25
 8002394:	f000 ff1f 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002398:	e113      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a2:	d117      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a4:	4b8a      	ldr	r3, [pc, #552]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80023a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023aa:	4a89      	ldr	r2, [pc, #548]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023b4:	4b86      	ldr	r3, [pc, #536]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80023b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	201c      	movs	r0, #28
 80023c8:	f000 feeb 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023cc:	201c      	movs	r0, #28
 80023ce:	f000 ff02 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 80023d2:	e0f6      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a7e      	ldr	r2, [pc, #504]	@ (80025d4 <HAL_TIM_Base_MspInit+0x27c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d117      	bne.n	800240e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023de:	4b7c      	ldr	r3, [pc, #496]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e4:	4a7a      	ldr	r2, [pc, #488]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ee:	4b78      	ldr	r3, [pc, #480]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	201e      	movs	r0, #30
 8002402:	f000 fece 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002406:	201e      	movs	r0, #30
 8002408:	f000 fee5 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 800240c:	e0d9      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a71      	ldr	r2, [pc, #452]	@ (80025d8 <HAL_TIM_Base_MspInit+0x280>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d117      	bne.n	8002448 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002418:	4b6d      	ldr	r3, [pc, #436]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800241a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241e:	4a6c      	ldr	r2, [pc, #432]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002428:	4b69      	ldr	r3, [pc, #420]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800242a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2032      	movs	r0, #50	@ 0x32
 800243c:	f000 feb1 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002440:	2032      	movs	r0, #50	@ 0x32
 8002442:	f000 fec8 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002446:	e0bc      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a63      	ldr	r2, [pc, #396]	@ (80025dc <HAL_TIM_Base_MspInit+0x284>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d127      	bne.n	80024a2 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002452:	4b5f      	ldr	r3, [pc, #380]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002458:	4a5d      	ldr	r2, [pc, #372]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002462:	4b5b      	ldr	r3, [pc, #364]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	202b      	movs	r0, #43	@ 0x2b
 8002476:	f000 fe94 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800247a:	202b      	movs	r0, #43	@ 0x2b
 800247c:	f000 feab 	bl	80031d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	202c      	movs	r0, #44	@ 0x2c
 8002486:	f000 fe8c 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800248a:	202c      	movs	r0, #44	@ 0x2c
 800248c:	f000 fea3 	bl	80031d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	202d      	movs	r0, #45	@ 0x2d
 8002496:	f000 fe84 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800249a:	202d      	movs	r0, #45	@ 0x2d
 800249c:	f000 fe9b 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 80024a0:	e08f      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a4e      	ldr	r2, [pc, #312]	@ (80025e0 <HAL_TIM_Base_MspInit+0x288>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d117      	bne.n	80024dc <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80024ac:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b2:	4a47      	ldr	r2, [pc, #284]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80024b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024bc:	4b44      	ldr	r3, [pc, #272]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80024be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	202b      	movs	r0, #43	@ 0x2b
 80024d0:	f000 fe67 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80024d4:	202b      	movs	r0, #43	@ 0x2b
 80024d6:	f000 fe7e 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 80024da:	e072      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a40      	ldr	r2, [pc, #256]	@ (80025e4 <HAL_TIM_Base_MspInit+0x28c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d117      	bne.n	8002516 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80024e6:	4b3a      	ldr	r3, [pc, #232]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80024e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80024ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024f6:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80024f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	202c      	movs	r0, #44	@ 0x2c
 800250a:	f000 fe4a 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800250e:	202c      	movs	r0, #44	@ 0x2c
 8002510:	f000 fe61 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002514:	e055      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a33      	ldr	r2, [pc, #204]	@ (80025e8 <HAL_TIM_Base_MspInit+0x290>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d117      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002520:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002526:	4a2a      	ldr	r2, [pc, #168]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002530:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	202d      	movs	r0, #45	@ 0x2d
 8002544:	f000 fe2d 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002548:	202d      	movs	r0, #45	@ 0x2d
 800254a:	f000 fe44 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 800254e:	e038      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <HAL_TIM_Base_MspInit+0x294>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d117      	bne.n	800258a <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800255c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002560:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800256c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2074      	movs	r0, #116	@ 0x74
 800257e:	f000 fe10 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002582:	2074      	movs	r0, #116	@ 0x74
 8002584:	f000 fe27 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002588:	e01b      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <HAL_TIM_Base_MspInit+0x298>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d116      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002594:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 8002596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259a:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_TIM_Base_MspInit+0x278>)
 80025a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2075      	movs	r0, #117	@ 0x75
 80025b8:	f000 fdf3 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025bc:	2075      	movs	r0, #117	@ 0x75
 80025be:	f000 fe0a 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3730      	adds	r7, #48	@ 0x30
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40010000 	.word	0x40010000
 80025d0:	58024400 	.word	0x58024400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40010400 	.word	0x40010400
 80025e0:	40001800 	.word	0x40001800
 80025e4:	40001c00 	.word	0x40001c00
 80025e8:	40002000 	.word	0x40002000
 80025ec:	40014000 	.word	0x40014000
 80025f0:	40014400 	.word	0x40014400

080025f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b092      	sub	sp, #72	@ 0x48
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4aa4      	ldr	r2, [pc, #656]	@ (80028a4 <HAL_TIM_MspPostInit+0x2b0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d120      	bne.n	8002658 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002616:	4ba4      	ldr	r3, [pc, #656]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261c:	4aa2      	ldr	r2, [pc, #648]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002626:	4ba0      	ldr	r3, [pc, #640]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002634:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002646:	2301      	movs	r3, #1
 8002648:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800264e:	4619      	mov	r1, r3
 8002650:	4896      	ldr	r0, [pc, #600]	@ (80028ac <HAL_TIM_MspPostInit+0x2b8>)
 8002652:	f001 fbb7 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002656:	e189      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002660:	d11f      	bne.n	80026a2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	4b91      	ldr	r3, [pc, #580]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002668:	4a8f      	ldr	r2, [pc, #572]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002672:	4b8d      	ldr	r3, [pc, #564]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002680:	2301      	movs	r3, #1
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002690:	2301      	movs	r3, #1
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002698:	4619      	mov	r1, r3
 800269a:	4885      	ldr	r0, [pc, #532]	@ (80028b0 <HAL_TIM_MspPostInit+0x2bc>)
 800269c:	f001 fb92 	bl	8003dc4 <HAL_GPIO_Init>
}
 80026a0:	e164      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a83      	ldr	r2, [pc, #524]	@ (80028b4 <HAL_TIM_MspPostInit+0x2c0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d13f      	bne.n	800272c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ac:	4b7e      	ldr	r3, [pc, #504]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b2:	4a7d      	ldr	r2, [pc, #500]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026bc:	4b7a      	ldr	r3, [pc, #488]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	4b77      	ldr	r3, [pc, #476]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d0:	4a75      	ldr	r2, [pc, #468]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026da:	4b73      	ldr	r3, [pc, #460]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80026e8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026fa:	2302      	movs	r3, #2
 80026fc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002702:	4619      	mov	r1, r3
 8002704:	486c      	ldr	r0, [pc, #432]	@ (80028b8 <HAL_TIM_MspPostInit+0x2c4>)
 8002706:	f001 fb5d 	bl	8003dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800271a:	2302      	movs	r3, #2
 800271c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002722:	4619      	mov	r1, r3
 8002724:	4865      	ldr	r0, [pc, #404]	@ (80028bc <HAL_TIM_MspPostInit+0x2c8>)
 8002726:	f001 fb4d 	bl	8003dc4 <HAL_GPIO_Init>
}
 800272a:	e11f      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a63      	ldr	r2, [pc, #396]	@ (80028c0 <HAL_TIM_MspPostInit+0x2cc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11f      	bne.n	8002776 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b5c      	ldr	r3, [pc, #368]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273c:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002746:	4b58      	ldr	r3, [pc, #352]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002754:	2306      	movs	r3, #6
 8002756:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002764:	2302      	movs	r3, #2
 8002766:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800276c:	4619      	mov	r1, r3
 800276e:	4850      	ldr	r0, [pc, #320]	@ (80028b0 <HAL_TIM_MspPostInit+0x2bc>)
 8002770:	f001 fb28 	bl	8003dc4 <HAL_GPIO_Init>
}
 8002774:	e0fa      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a52      	ldr	r2, [pc, #328]	@ (80028c4 <HAL_TIM_MspPostInit+0x2d0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d120      	bne.n	80027c2 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002780:	4b49      	ldr	r3, [pc, #292]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002786:	4a48      	ldr	r2, [pc, #288]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002790:	4b45      	ldr	r3, [pc, #276]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800279e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027b0:	2303      	movs	r3, #3
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027b8:	4619      	mov	r1, r3
 80027ba:	4843      	ldr	r0, [pc, #268]	@ (80028c8 <HAL_TIM_MspPostInit+0x2d4>)
 80027bc:	f001 fb02 	bl	8003dc4 <HAL_GPIO_Init>
}
 80027c0:	e0d4      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a41      	ldr	r2, [pc, #260]	@ (80028cc <HAL_TIM_MspPostInit+0x2d8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d120      	bne.n	800280e <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d2:	4a35      	ldr	r2, [pc, #212]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027dc:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80027fc:	2302      	movs	r3, #2
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002804:	4619      	mov	r1, r3
 8002806:	482d      	ldr	r0, [pc, #180]	@ (80028bc <HAL_TIM_MspPostInit+0x2c8>)
 8002808:	f001 fadc 	bl	8003dc4 <HAL_GPIO_Init>
}
 800280c:	e0ae      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2f      	ldr	r2, [pc, #188]	@ (80028d0 <HAL_TIM_MspPostInit+0x2dc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d11f      	bne.n	8002858 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 800281a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281e:	4a22      	ldr	r2, [pc, #136]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002836:	2340      	movs	r3, #64	@ 0x40
 8002838:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002846:	2309      	movs	r3, #9
 8002848:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800284e:	4619      	mov	r1, r3
 8002850:	4817      	ldr	r0, [pc, #92]	@ (80028b0 <HAL_TIM_MspPostInit+0x2bc>)
 8002852:	f001 fab7 	bl	8003dc4 <HAL_GPIO_Init>
}
 8002856:	e089      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1d      	ldr	r2, [pc, #116]	@ (80028d4 <HAL_TIM_MspPostInit+0x2e0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d13a      	bne.n	80028d8 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002868:	4a0f      	ldr	r2, [pc, #60]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002890:	2309      	movs	r3, #9
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002898:	4619      	mov	r1, r3
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <HAL_TIM_MspPostInit+0x2bc>)
 800289c:	f001 fa92 	bl	8003dc4 <HAL_GPIO_Init>
}
 80028a0:	e064      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	58024400 	.word	0x58024400
 80028ac:	58021000 	.word	0x58021000
 80028b0:	58020000 	.word	0x58020000
 80028b4:	40000800 	.word	0x40000800
 80028b8:	58020c00 	.word	0x58020c00
 80028bc:	58020400 	.word	0x58020400
 80028c0:	40000c00 	.word	0x40000c00
 80028c4:	40010400 	.word	0x40010400
 80028c8:	58020800 	.word	0x58020800
 80028cc:	40001800 	.word	0x40001800
 80028d0:	40001c00 	.word	0x40001c00
 80028d4:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a25      	ldr	r2, [pc, #148]	@ (8002974 <HAL_TIM_MspPostInit+0x380>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d11f      	bne.n	8002922 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <HAL_TIM_MspPostInit+0x384>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e8:	4a23      	ldr	r2, [pc, #140]	@ (8002978 <HAL_TIM_MspPostInit+0x384>)
 80028ea:	f043 0310 	orr.w	r3, r3, #16
 80028ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f2:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_TIM_MspPostInit+0x384>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002900:	2360      	movs	r3, #96	@ 0x60
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002910:	2304      	movs	r3, #4
 8002912:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002914:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002918:	4619      	mov	r1, r3
 800291a:	4818      	ldr	r0, [pc, #96]	@ (800297c <HAL_TIM_MspPostInit+0x388>)
 800291c:	f001 fa52 	bl	8003dc4 <HAL_GPIO_Init>
}
 8002920:	e024      	b.n	800296c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <HAL_TIM_MspPostInit+0x38c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d11f      	bne.n	800296c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_TIM_MspPostInit+0x384>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002932:	4a11      	ldr	r2, [pc, #68]	@ (8002978 <HAL_TIM_MspPostInit+0x384>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800293c:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <HAL_TIM_MspPostInit+0x384>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800294a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800294e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800295c:	2301      	movs	r3, #1
 800295e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002964:	4619      	mov	r1, r3
 8002966:	4807      	ldr	r0, [pc, #28]	@ (8002984 <HAL_TIM_MspPostInit+0x390>)
 8002968:	f001 fa2c 	bl	8003dc4 <HAL_GPIO_Init>
}
 800296c:	bf00      	nop
 800296e:	3748      	adds	r7, #72	@ 0x48
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40014000 	.word	0x40014000
 8002978:	58024400 	.word	0x58024400
 800297c:	58021000 	.word	0x58021000
 8002980:	40014400 	.word	0x40014400
 8002984:	58020400 	.word	0x58020400

08002988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b0ba      	sub	sp, #232	@ 0xe8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	22c0      	movs	r2, #192	@ 0xc0
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f009 fc96 	bl	800c2da <memset>
  if(huart->Instance==UART4)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a60 <HAL_UART_MspInit+0xd8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d14e      	bne.n	8002a56 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029b8:	f04f 0202 	mov.w	r2, #2
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f920 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80029da:	f7ff fb93 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_UART_MspInit+0xdc>)
 80029e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <HAL_UART_MspInit+0xdc>)
 80029e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_UART_MspInit+0xdc>)
 80029f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_UART_MspInit+0xdc>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_UART_MspInit+0xdc>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a0c:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <HAL_UART_MspInit+0xdc>)
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a34:	2308      	movs	r3, #8
 8002a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4809      	ldr	r0, [pc, #36]	@ (8002a68 <HAL_UART_MspInit+0xe0>)
 8002a42:	f001 f9bf 	bl	8003dc4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2034      	movs	r0, #52	@ 0x34
 8002a4c:	f000 fba9 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a50:	2034      	movs	r0, #52	@ 0x34
 8002a52:	f000 fbc0 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002a56:	bf00      	nop
 8002a58:	37e8      	adds	r7, #232	@ 0xe8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40004c00 	.word	0x40004c00
 8002a64:	58024400 	.word	0x58024400
 8002a68:	58020800 	.word	0x58020800

08002a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <NMI_Handler+0x4>

08002a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <MemManage_Handler+0x4>

08002a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <BusFault_Handler+0x4>

08002a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <UsageFault_Handler+0x4>

08002a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac2:	f000 fa67 	bl	8002f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	@ (8002adc <TIM1_UP_IRQHandler+0x10>)
 8002ad2:	f006 f90b 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	24000310 	.word	0x24000310

08002ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <TIM2_IRQHandler+0x10>)
 8002ae6:	f006 f901 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2400035c 	.word	0x2400035c

08002af4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002af8:	4802      	ldr	r0, [pc, #8]	@ (8002b04 <TIM4_IRQHandler+0x10>)
 8002afa:	f006 f8f7 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	240003a8 	.word	0x240003a8

08002b08 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b0c:	4803      	ldr	r0, [pc, #12]	@ (8002b1c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002b0e:	f006 f8ed 	bl	8008cec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002b12:	4803      	ldr	r0, [pc, #12]	@ (8002b20 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002b14:	f006 f8ea 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	24000440 	.word	0x24000440
 8002b20:	2400048c 	.word	0x2400048c

08002b24 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b28:	4803      	ldr	r0, [pc, #12]	@ (8002b38 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002b2a:	f006 f8df 	bl	8008cec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8002b2e:	4803      	ldr	r0, [pc, #12]	@ (8002b3c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002b30:	f006 f8dc 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	24000440 	.word	0x24000440
 8002b3c:	240004d8 	.word	0x240004d8

08002b40 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b44:	4803      	ldr	r0, [pc, #12]	@ (8002b54 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002b46:	f006 f8d1 	bl	8008cec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002b4a:	4803      	ldr	r0, [pc, #12]	@ (8002b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002b4c:	f006 f8ce 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	24000440 	.word	0x24000440
 8002b58:	24000524 	.word	0x24000524

08002b5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <TIM5_IRQHandler+0x10>)
 8002b62:	f006 f8c3 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	240003f4 	.word	0x240003f4

08002b70 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <UART4_IRQHandler+0x10>)
 8002b76:	f007 f9af 	bl	8009ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	24000608 	.word	0x24000608

08002b84 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <LPTIM1_IRQHandler+0x10>)
 8002b8a:	f002 fd31 	bl	80055f0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	240002d8 	.word	0x240002d8

08002b98 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <TIM15_IRQHandler+0x10>)
 8002b9e:	f006 f8a5 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	24000570 	.word	0x24000570

08002bac <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <TIM16_IRQHandler+0x10>)
 8002bb2:	f006 f89b 	bl	8008cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	240005bc 	.word	0x240005bc

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bda:	f009 fbd1 	bl	800c380 <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <_exit+0x12>

08002c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e00a      	b.n	8002c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c18:	f3af 8000 	nop.w
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	60ba      	str	r2, [r7, #8]
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dbf0      	blt.n	8002c18 <_read+0x12>
  }

  return len;
 8002c36:	687b      	ldr	r3, [r7, #4]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e009      	b.n	8002c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	60ba      	str	r2, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dbf1      	blt.n	8002c52 <_write+0x12>
  }
  return len;
 8002c6e:	687b      	ldr	r3, [r7, #4]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_close>:

int _close(int file)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_isatty>:

int _isatty(int file)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f009 fb36 	bl	800c380 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	@ (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	24080000 	.word	0x24080000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	24002600 	.word	0x24002600
 8002d48:	24002758 	.word	0x24002758

08002d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d50:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <SystemInit+0xe4>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	4a36      	ldr	r2, [pc, #216]	@ (8002e30 <SystemInit+0xe4>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d60:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <SystemInit+0xe8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d807      	bhi.n	8002d7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d6c:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <SystemInit+0xe8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 030f 	bic.w	r3, r3, #15
 8002d74:	4a2f      	ldr	r2, [pc, #188]	@ (8002e34 <SystemInit+0xe8>)
 8002d76:	f043 0307 	orr.w	r3, r3, #7
 8002d7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e38 <SystemInit+0xec>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2d      	ldr	r2, [pc, #180]	@ (8002e38 <SystemInit+0xec>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <SystemInit+0xec>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <SystemInit+0xec>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4929      	ldr	r1, [pc, #164]	@ (8002e38 <SystemInit+0xec>)
 8002d94:	4b29      	ldr	r3, [pc, #164]	@ (8002e3c <SystemInit+0xf0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d9a:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <SystemInit+0xe8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002da6:	4b23      	ldr	r3, [pc, #140]	@ (8002e34 <SystemInit+0xe8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 030f 	bic.w	r3, r3, #15
 8002dae:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <SystemInit+0xe8>)
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002db6:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <SystemInit+0xec>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e38 <SystemInit+0xec>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e38 <SystemInit+0xec>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <SystemInit+0xec>)
 8002dca:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <SystemInit+0xf4>)
 8002dcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	@ (8002e38 <SystemInit+0xec>)
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e44 <SystemInit+0xf8>)
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dd4:	4b18      	ldr	r3, [pc, #96]	@ (8002e38 <SystemInit+0xec>)
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <SystemInit+0xfc>)
 8002dd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dda:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <SystemInit+0xec>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002de0:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <SystemInit+0xec>)
 8002de2:	4a19      	ldr	r2, [pc, #100]	@ (8002e48 <SystemInit+0xfc>)
 8002de4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002de6:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <SystemInit+0xec>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <SystemInit+0xec>)
 8002dee:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <SystemInit+0xfc>)
 8002df0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <SystemInit+0xec>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <SystemInit+0xec>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e38 <SystemInit+0xec>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <SystemInit+0xec>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <SystemInit+0x100>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <SystemInit+0x104>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e16:	d202      	bcs.n	8002e1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <SystemInit+0x108>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <SystemInit+0x10c>)
 8002e20:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	52002000 	.word	0x52002000
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e40:	02020200 	.word	0x02020200
 8002e44:	01ff0000 	.word	0x01ff0000
 8002e48:	01010280 	.word	0x01010280
 8002e4c:	5c001000 	.word	0x5c001000
 8002e50:	ffff0000 	.word	0xffff0000
 8002e54:	51008108 	.word	0x51008108
 8002e58:	52004000 	.word	0x52004000

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e60:	f7ff ff74 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	@ (8002e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f009 fa7f 	bl	800c38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7fd fbf7 	bl	8000680 <main>
  bx  lr
 8002e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e9c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002ea0:	0800f188 	.word	0x0800f188
  ldr r2, =_sbss
 8002ea4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002ea8:	24002754 	.word	0x24002754

08002eac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC3_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	f000 f968 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ebc:	f003 fcd4 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_Init+0x68>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	4913      	ldr	r1, [pc, #76]	@ (8002f1c <HAL_Init+0x6c>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_Init+0x68>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <HAL_Init+0x6c>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f20 <HAL_Init+0x70>)
 8002ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f24 <HAL_Init+0x74>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002efa:	200f      	movs	r0, #15
 8002efc:	f000 f814 	bl	8002f28 <HAL_InitTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e002      	b.n	8002f10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f0a:	f7ff f901 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	0800ebf8 	.word	0x0800ebf8
 8002f20:	24000008 	.word	0x24000008
 8002f24:	24000004 	.word	0x24000004

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f30:	4b15      	ldr	r3, [pc, #84]	@ (8002f88 <HAL_InitTick+0x60>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e021      	b.n	8002f80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_InitTick+0x64>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_InitTick+0x60>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f94d 	bl	80031f2 <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00e      	b.n	8002f80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d80a      	bhi.n	8002f7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 f917 	bl	80031a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f74:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <HAL_InitTick+0x68>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	24000010 	.word	0x24000010
 8002f8c:	24000004 	.word	0x24000004
 8002f90:	2400000c 	.word	0x2400000c

08002f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	24000010 	.word	0x24000010
 8002fb8:	24002604 	.word	0x24002604

08002fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	24002604 	.word	0x24002604

08002fd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_GetREVID+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	5c001000 	.word	0x5c001000

08002fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <__NVIC_SetPriorityGrouping+0x40>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	4313      	orrs	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <__NVIC_SetPriorityGrouping+0x40>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	05fa0000 	.word	0x05fa0000

08003034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <__NVIC_GetPriorityGrouping+0x18>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0307 	and.w	r3, r3, #7
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db0b      	blt.n	800307a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4907      	ldr	r1, [pc, #28]	@ (8003088 <__NVIC_EnableIRQ+0x38>)
 800306a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	@ (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
         );
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	@ 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f7ff ff8e 	bl	800308c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff29 	bl	8002fec <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff40 	bl	8003034 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff90 	bl	80030e0 <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5f 	bl	800308c <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff33 	bl	8003050 <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa4 	bl	8003148 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003210:	f3bf 8f5f 	dmb	sy
}
 8003214:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003216:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <HAL_MPU_Disable+0x28>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	4a06      	ldr	r2, [pc, #24]	@ (8003234 <HAL_MPU_Disable+0x28>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003220:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_MPU_Disable+0x2c>)
 8003224:	2200      	movs	r2, #0
 8003226:	605a      	str	r2, [r3, #4]
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	e000ed90 	.word	0xe000ed90

0800323c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003244:	4a0b      	ldr	r2, [pc, #44]	@ (8003274 <HAL_MPU_Enable+0x38>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_MPU_Enable+0x3c>)
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	4a09      	ldr	r2, [pc, #36]	@ (8003278 <HAL_MPU_Enable+0x3c>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003258:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800325a:	f3bf 8f4f 	dsb	sy
}
 800325e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003260:	f3bf 8f6f 	isb	sy
}
 8003264:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000ed90 	.word	0xe000ed90
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	785a      	ldrb	r2, [r3, #1]
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_MPU_ConfigRegion+0x7c>)
 800328a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HAL_MPU_ConfigRegion+0x7c>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_MPU_ConfigRegion+0x7c>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003298:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <HAL_MPU_ConfigRegion+0x7c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7b1b      	ldrb	r3, [r3, #12]
 80032a4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7adb      	ldrb	r3, [r3, #11]
 80032aa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7a9b      	ldrb	r3, [r3, #10]
 80032b2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7b5b      	ldrb	r3, [r3, #13]
 80032ba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7b9b      	ldrb	r3, [r3, #14]
 80032c2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7bdb      	ldrb	r3, [r3, #15]
 80032ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7a5b      	ldrb	r3, [r3, #9]
 80032d2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7a1b      	ldrb	r3, [r3, #8]
 80032da:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032dc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032e4:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032e6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032e8:	6113      	str	r3, [r2, #16]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed90 	.word	0xe000ed90

080032fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff fe5a 	bl	8002fbc <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e2dc      	b.n	80038ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d008      	beq.n	8003332 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2280      	movs	r2, #128	@ 0x80
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e2cd      	b.n	80038ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a76      	ldr	r2, [pc, #472]	@ (8003510 <HAL_DMA_Abort+0x214>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a74      	ldr	r2, [pc, #464]	@ (8003514 <HAL_DMA_Abort+0x218>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	@ (8003518 <HAL_DMA_Abort+0x21c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a71      	ldr	r2, [pc, #452]	@ (800351c <HAL_DMA_Abort+0x220>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a70      	ldr	r2, [pc, #448]	@ (8003520 <HAL_DMA_Abort+0x224>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6e      	ldr	r2, [pc, #440]	@ (8003524 <HAL_DMA_Abort+0x228>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6d      	ldr	r2, [pc, #436]	@ (8003528 <HAL_DMA_Abort+0x22c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6b      	ldr	r2, [pc, #428]	@ (800352c <HAL_DMA_Abort+0x230>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6a      	ldr	r2, [pc, #424]	@ (8003530 <HAL_DMA_Abort+0x234>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a68      	ldr	r2, [pc, #416]	@ (8003534 <HAL_DMA_Abort+0x238>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a67      	ldr	r2, [pc, #412]	@ (8003538 <HAL_DMA_Abort+0x23c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_DMA_Abort+0x240>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a64      	ldr	r2, [pc, #400]	@ (8003540 <HAL_DMA_Abort+0x244>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a62      	ldr	r2, [pc, #392]	@ (8003544 <HAL_DMA_Abort+0x248>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a61      	ldr	r2, [pc, #388]	@ (8003548 <HAL_DMA_Abort+0x24c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Abort+0xd6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a5f      	ldr	r2, [pc, #380]	@ (800354c <HAL_DMA_Abort+0x250>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Abort+0xda>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_Abort+0xdc>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 021e 	bic.w	r2, r2, #30
 80033ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e00a      	b.n	800341a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 020e 	bic.w	r2, r2, #14
 8003412:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_DMA_Abort+0x214>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d072      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3a      	ldr	r2, [pc, #232]	@ (8003514 <HAL_DMA_Abort+0x218>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d06d      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a39      	ldr	r2, [pc, #228]	@ (8003518 <HAL_DMA_Abort+0x21c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d068      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a37      	ldr	r2, [pc, #220]	@ (800351c <HAL_DMA_Abort+0x220>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d063      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a36      	ldr	r2, [pc, #216]	@ (8003520 <HAL_DMA_Abort+0x224>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d05e      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a34      	ldr	r2, [pc, #208]	@ (8003524 <HAL_DMA_Abort+0x228>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d059      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a33      	ldr	r2, [pc, #204]	@ (8003528 <HAL_DMA_Abort+0x22c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d054      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a31      	ldr	r2, [pc, #196]	@ (800352c <HAL_DMA_Abort+0x230>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d04f      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a30      	ldr	r2, [pc, #192]	@ (8003530 <HAL_DMA_Abort+0x234>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2e      	ldr	r2, [pc, #184]	@ (8003534 <HAL_DMA_Abort+0x238>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <HAL_DMA_Abort+0x23c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2b      	ldr	r2, [pc, #172]	@ (800353c <HAL_DMA_Abort+0x240>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2a      	ldr	r2, [pc, #168]	@ (8003540 <HAL_DMA_Abort+0x244>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a28      	ldr	r2, [pc, #160]	@ (8003544 <HAL_DMA_Abort+0x248>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a27      	ldr	r2, [pc, #156]	@ (8003548 <HAL_DMA_Abort+0x24c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a25      	ldr	r2, [pc, #148]	@ (800354c <HAL_DMA_Abort+0x250>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a24      	ldr	r2, [pc, #144]	@ (8003550 <HAL_DMA_Abort+0x254>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <HAL_DMA_Abort+0x258>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	@ (8003558 <HAL_DMA_Abort+0x25c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <HAL_DMA_Abort+0x260>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_DMA_Abort+0x264>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_DMA_Abort+0x268>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_DMA_Abort+0x26c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort+0x20e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	@ (800356c <HAL_DMA_Abort+0x270>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d132      	bne.n	8003570 <HAL_DMA_Abort+0x274>
 800350a:	2301      	movs	r3, #1
 800350c:	e031      	b.n	8003572 <HAL_DMA_Abort+0x276>
 800350e:	bf00      	nop
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
 8003550:	58025408 	.word	0x58025408
 8003554:	5802541c 	.word	0x5802541c
 8003558:	58025430 	.word	0x58025430
 800355c:	58025444 	.word	0x58025444
 8003560:	58025458 	.word	0x58025458
 8003564:	5802546c 	.word	0x5802546c
 8003568:	58025480 	.word	0x58025480
 800356c:	58025494 	.word	0x58025494
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003584:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6d      	ldr	r2, [pc, #436]	@ (8003740 <HAL_DMA_Abort+0x444>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6b      	ldr	r2, [pc, #428]	@ (8003744 <HAL_DMA_Abort+0x448>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6a      	ldr	r2, [pc, #424]	@ (8003748 <HAL_DMA_Abort+0x44c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a68      	ldr	r2, [pc, #416]	@ (800374c <HAL_DMA_Abort+0x450>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a67      	ldr	r2, [pc, #412]	@ (8003750 <HAL_DMA_Abort+0x454>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a65      	ldr	r2, [pc, #404]	@ (8003754 <HAL_DMA_Abort+0x458>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a64      	ldr	r2, [pc, #400]	@ (8003758 <HAL_DMA_Abort+0x45c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a62      	ldr	r2, [pc, #392]	@ (800375c <HAL_DMA_Abort+0x460>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a61      	ldr	r2, [pc, #388]	@ (8003760 <HAL_DMA_Abort+0x464>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003764 <HAL_DMA_Abort+0x468>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003768 <HAL_DMA_Abort+0x46c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a5c      	ldr	r2, [pc, #368]	@ (800376c <HAL_DMA_Abort+0x470>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a5b      	ldr	r2, [pc, #364]	@ (8003770 <HAL_DMA_Abort+0x474>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a59      	ldr	r2, [pc, #356]	@ (8003774 <HAL_DMA_Abort+0x478>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a58      	ldr	r2, [pc, #352]	@ (8003778 <HAL_DMA_Abort+0x47c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Abort+0x32a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a56      	ldr	r2, [pc, #344]	@ (800377c <HAL_DMA_Abort+0x480>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <HAL_DMA_Abort+0x33c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e007      	b.n	8003648 <HAL_DMA_Abort+0x34c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003648:	e013      	b.n	8003672 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800364a:	f7ff fcb7 	bl	8002fbc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b05      	cmp	r3, #5
 8003656:	d90c      	bls.n	8003672 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e12d      	b.n	80038ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e5      	bne.n	800364a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <HAL_DMA_Abort+0x444>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d04a      	beq.n	800371e <HAL_DMA_Abort+0x422>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <HAL_DMA_Abort+0x448>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d045      	beq.n	800371e <HAL_DMA_Abort+0x422>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <HAL_DMA_Abort+0x44c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d040      	beq.n	800371e <HAL_DMA_Abort+0x422>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2a      	ldr	r2, [pc, #168]	@ (800374c <HAL_DMA_Abort+0x450>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d03b      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a29      	ldr	r2, [pc, #164]	@ (8003750 <HAL_DMA_Abort+0x454>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d036      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a27      	ldr	r2, [pc, #156]	@ (8003754 <HAL_DMA_Abort+0x458>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a26      	ldr	r2, [pc, #152]	@ (8003758 <HAL_DMA_Abort+0x45c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d02c      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a24      	ldr	r2, [pc, #144]	@ (800375c <HAL_DMA_Abort+0x460>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a23      	ldr	r2, [pc, #140]	@ (8003760 <HAL_DMA_Abort+0x464>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a21      	ldr	r2, [pc, #132]	@ (8003764 <HAL_DMA_Abort+0x468>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <HAL_DMA_Abort+0x46c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1e      	ldr	r2, [pc, #120]	@ (800376c <HAL_DMA_Abort+0x470>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_DMA_Abort+0x422>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <HAL_DMA_Abort+0x474>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_Abort+0x422>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <HAL_DMA_Abort+0x478>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_DMA_Abort+0x422>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1a      	ldr	r2, [pc, #104]	@ (8003778 <HAL_DMA_Abort+0x47c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_DMA_Abort+0x422>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a18      	ldr	r2, [pc, #96]	@ (800377c <HAL_DMA_Abort+0x480>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_DMA_Abort+0x426>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_DMA_Abort+0x428>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02b      	beq.n	8003780 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	223f      	movs	r2, #63	@ 0x3f
 8003738:	409a      	lsls	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	e02a      	b.n	8003796 <HAL_DMA_Abort+0x49a>
 8003740:	40020010 	.word	0x40020010
 8003744:	40020028 	.word	0x40020028
 8003748:	40020040 	.word	0x40020040
 800374c:	40020058 	.word	0x40020058
 8003750:	40020070 	.word	0x40020070
 8003754:	40020088 	.word	0x40020088
 8003758:	400200a0 	.word	0x400200a0
 800375c:	400200b8 	.word	0x400200b8
 8003760:	40020410 	.word	0x40020410
 8003764:	40020428 	.word	0x40020428
 8003768:	40020440 	.word	0x40020440
 800376c:	40020458 	.word	0x40020458
 8003770:	40020470 	.word	0x40020470
 8003774:	40020488 	.word	0x40020488
 8003778:	400204a0 	.word	0x400204a0
 800377c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a4f      	ldr	r2, [pc, #316]	@ (80038d8 <HAL_DMA_Abort+0x5dc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d072      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4d      	ldr	r2, [pc, #308]	@ (80038dc <HAL_DMA_Abort+0x5e0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d06d      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a4c      	ldr	r2, [pc, #304]	@ (80038e0 <HAL_DMA_Abort+0x5e4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d068      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a4a      	ldr	r2, [pc, #296]	@ (80038e4 <HAL_DMA_Abort+0x5e8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d063      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a49      	ldr	r2, [pc, #292]	@ (80038e8 <HAL_DMA_Abort+0x5ec>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d05e      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a47      	ldr	r2, [pc, #284]	@ (80038ec <HAL_DMA_Abort+0x5f0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d059      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a46      	ldr	r2, [pc, #280]	@ (80038f0 <HAL_DMA_Abort+0x5f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d054      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a44      	ldr	r2, [pc, #272]	@ (80038f4 <HAL_DMA_Abort+0x5f8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04f      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a43      	ldr	r2, [pc, #268]	@ (80038f8 <HAL_DMA_Abort+0x5fc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a41      	ldr	r2, [pc, #260]	@ (80038fc <HAL_DMA_Abort+0x600>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a40      	ldr	r2, [pc, #256]	@ (8003900 <HAL_DMA_Abort+0x604>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a3e      	ldr	r2, [pc, #248]	@ (8003904 <HAL_DMA_Abort+0x608>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3d      	ldr	r2, [pc, #244]	@ (8003908 <HAL_DMA_Abort+0x60c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <HAL_DMA_Abort+0x610>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3a      	ldr	r2, [pc, #232]	@ (8003910 <HAL_DMA_Abort+0x614>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a38      	ldr	r2, [pc, #224]	@ (8003914 <HAL_DMA_Abort+0x618>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a37      	ldr	r2, [pc, #220]	@ (8003918 <HAL_DMA_Abort+0x61c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a35      	ldr	r2, [pc, #212]	@ (800391c <HAL_DMA_Abort+0x620>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a34      	ldr	r2, [pc, #208]	@ (8003920 <HAL_DMA_Abort+0x624>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_DMA_Abort+0x628>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a31      	ldr	r2, [pc, #196]	@ (8003928 <HAL_DMA_Abort+0x62c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <HAL_DMA_Abort+0x630>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2e      	ldr	r2, [pc, #184]	@ (8003930 <HAL_DMA_Abort+0x634>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_Abort+0x58a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2c      	ldr	r2, [pc, #176]	@ (8003934 <HAL_DMA_Abort+0x638>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_DMA_Abort+0x58e>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_DMA_Abort+0x590>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003898:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40020010 	.word	0x40020010
 80038dc:	40020028 	.word	0x40020028
 80038e0:	40020040 	.word	0x40020040
 80038e4:	40020058 	.word	0x40020058
 80038e8:	40020070 	.word	0x40020070
 80038ec:	40020088 	.word	0x40020088
 80038f0:	400200a0 	.word	0x400200a0
 80038f4:	400200b8 	.word	0x400200b8
 80038f8:	40020410 	.word	0x40020410
 80038fc:	40020428 	.word	0x40020428
 8003900:	40020440 	.word	0x40020440
 8003904:	40020458 	.word	0x40020458
 8003908:	40020470 	.word	0x40020470
 800390c:	40020488 	.word	0x40020488
 8003910:	400204a0 	.word	0x400204a0
 8003914:	400204b8 	.word	0x400204b8
 8003918:	58025408 	.word	0x58025408
 800391c:	5802541c 	.word	0x5802541c
 8003920:	58025430 	.word	0x58025430
 8003924:	58025444 	.word	0x58025444
 8003928:	58025458 	.word	0x58025458
 800392c:	5802546c 	.word	0x5802546c
 8003930:	58025480 	.word	0x58025480
 8003934:	58025494 	.word	0x58025494

08003938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e237      	b.n	8003dba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d004      	beq.n	8003960 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2280      	movs	r2, #128	@ 0x80
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e22c      	b.n	8003dba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad8 <HAL_DMA_Abort_IT+0x1a0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d04a      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5b      	ldr	r2, [pc, #364]	@ (8003adc <HAL_DMA_Abort_IT+0x1a4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d045      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a59      	ldr	r2, [pc, #356]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1a8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d040      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1ac>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d03b      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a56      	ldr	r2, [pc, #344]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1b0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d036      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a55      	ldr	r2, [pc, #340]	@ (8003aec <HAL_DMA_Abort_IT+0x1b4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d031      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a53      	ldr	r2, [pc, #332]	@ (8003af0 <HAL_DMA_Abort_IT+0x1b8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d02c      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a52      	ldr	r2, [pc, #328]	@ (8003af4 <HAL_DMA_Abort_IT+0x1bc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d027      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a50      	ldr	r2, [pc, #320]	@ (8003af8 <HAL_DMA_Abort_IT+0x1c0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a4f      	ldr	r2, [pc, #316]	@ (8003afc <HAL_DMA_Abort_IT+0x1c4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d01d      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <HAL_DMA_Abort_IT+0x1c8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003b04 <HAL_DMA_Abort_IT+0x1cc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003b08 <HAL_DMA_Abort_IT+0x1d0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a49      	ldr	r2, [pc, #292]	@ (8003b0c <HAL_DMA_Abort_IT+0x1d4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a47      	ldr	r2, [pc, #284]	@ (8003b10 <HAL_DMA_Abort_IT+0x1d8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a46      	ldr	r2, [pc, #280]	@ (8003b14 <HAL_DMA_Abort_IT+0x1dc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Abort_IT+0xcc>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_DMA_Abort_IT+0xce>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8086 	beq.w	8003b18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad8 <HAL_DMA_Abort_IT+0x1a0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d04a      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2e      	ldr	r2, [pc, #184]	@ (8003adc <HAL_DMA_Abort_IT+0x1a4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d045      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1a8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d040      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1ac>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d03b      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a29      	ldr	r2, [pc, #164]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1b0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d036      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <HAL_DMA_Abort_IT+0x1b4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <HAL_DMA_Abort_IT+0x1b8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02c      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a25      	ldr	r2, [pc, #148]	@ (8003af4 <HAL_DMA_Abort_IT+0x1bc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d027      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	@ (8003af8 <HAL_DMA_Abort_IT+0x1c0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a22      	ldr	r2, [pc, #136]	@ (8003afc <HAL_DMA_Abort_IT+0x1c4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01d      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	@ (8003b00 <HAL_DMA_Abort_IT+0x1c8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <HAL_DMA_Abort_IT+0x1cc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <HAL_DMA_Abort_IT+0x1d0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b0c <HAL_DMA_Abort_IT+0x1d4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b10 <HAL_DMA_Abort_IT+0x1d8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0x17c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a19      	ldr	r2, [pc, #100]	@ (8003b14 <HAL_DMA_Abort_IT+0x1dc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <HAL_DMA_Abort_IT+0x18e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e178      	b.n	8003db8 <HAL_DMA_Abort_IT+0x480>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e16f      	b.n	8003db8 <HAL_DMA_Abort_IT+0x480>
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 020e 	bic.w	r2, r2, #14
 8003b26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6c      	ldr	r2, [pc, #432]	@ (8003ce0 <HAL_DMA_Abort_IT+0x3a8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04a      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6b      	ldr	r2, [pc, #428]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3ac>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d045      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a69      	ldr	r2, [pc, #420]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3b0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d040      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a68      	ldr	r2, [pc, #416]	@ (8003cec <HAL_DMA_Abort_IT+0x3b4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a66      	ldr	r2, [pc, #408]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3b8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d036      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3bc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a63      	ldr	r2, [pc, #396]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3c0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a62      	ldr	r2, [pc, #392]	@ (8003cfc <HAL_DMA_Abort_IT+0x3c4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d027      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a60      	ldr	r2, [pc, #384]	@ (8003d00 <HAL_DMA_Abort_IT+0x3c8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5f      	ldr	r2, [pc, #380]	@ (8003d04 <HAL_DMA_Abort_IT+0x3cc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5d      	ldr	r2, [pc, #372]	@ (8003d08 <HAL_DMA_Abort_IT+0x3d0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a5c      	ldr	r2, [pc, #368]	@ (8003d0c <HAL_DMA_Abort_IT+0x3d4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d10 <HAL_DMA_Abort_IT+0x3d8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a59      	ldr	r2, [pc, #356]	@ (8003d14 <HAL_DMA_Abort_IT+0x3dc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_DMA_Abort_IT+0x3e0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x290>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_DMA_Abort_IT+0x3e4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_Abort_IT+0x2a2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <HAL_DMA_Abort_IT+0x2b2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce0 <HAL_DMA_Abort_IT+0x3a8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d072      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3ac>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d06d      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a39      	ldr	r2, [pc, #228]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3b0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d068      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a37      	ldr	r2, [pc, #220]	@ (8003cec <HAL_DMA_Abort_IT+0x3b4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d063      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a36      	ldr	r2, [pc, #216]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3b8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d05e      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a34      	ldr	r2, [pc, #208]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3bc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d059      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a33      	ldr	r2, [pc, #204]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3c0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d054      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a31      	ldr	r2, [pc, #196]	@ (8003cfc <HAL_DMA_Abort_IT+0x3c4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d04f      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a30      	ldr	r2, [pc, #192]	@ (8003d00 <HAL_DMA_Abort_IT+0x3c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04a      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <HAL_DMA_Abort_IT+0x3cc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d045      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <HAL_DMA_Abort_IT+0x3d0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d0c <HAL_DMA_Abort_IT+0x3d4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <HAL_DMA_Abort_IT+0x3d8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d036      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a28      	ldr	r2, [pc, #160]	@ (8003d14 <HAL_DMA_Abort_IT+0x3dc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d031      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a27      	ldr	r2, [pc, #156]	@ (8003d18 <HAL_DMA_Abort_IT+0x3e0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02c      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <HAL_DMA_Abort_IT+0x3e4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	@ (8003d20 <HAL_DMA_Abort_IT+0x3e8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <HAL_DMA_Abort_IT+0x3ec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	@ (8003d28 <HAL_DMA_Abort_IT+0x3f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	@ (8003d2c <HAL_DMA_Abort_IT+0x3f4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d30 <HAL_DMA_Abort_IT+0x3f8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_DMA_Abort_IT+0x3fc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	@ (8003d38 <HAL_DMA_Abort_IT+0x400>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_Abort_IT+0x3a2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	@ (8003d3c <HAL_DMA_Abort_IT+0x404>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d132      	bne.n	8003d40 <HAL_DMA_Abort_IT+0x408>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e031      	b.n	8003d42 <HAL_DMA_Abort_IT+0x40a>
 8003cde:	bf00      	nop
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8
 8003d20:	58025408 	.word	0x58025408
 8003d24:	5802541c 	.word	0x5802541c
 8003d28:	58025430 	.word	0x58025430
 8003d2c:	58025444 	.word	0x58025444
 8003d30:	58025458 	.word	0x58025458
 8003d34:	5802546c 	.word	0x5802546c
 8003d38:	58025480 	.word	0x58025480
 8003d3c:	58025494 	.word	0x58025494
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d028      	beq.n	8003d98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2201      	movs	r2, #1
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop

08003dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	@ 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dd2:	4b89      	ldr	r3, [pc, #548]	@ (8003ff8 <HAL_GPIO_Init+0x234>)
 8003dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dd6:	e194      	b.n	8004102 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8186 	beq.w	80040fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d005      	beq.n	8003e08 <HAL_GPIO_Init+0x44>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d130      	bne.n	8003e6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e3e:	2201      	movs	r2, #1
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 0201 	and.w	r2, r3, #1
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d017      	beq.n	8003ea6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d123      	bne.n	8003efa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	08da      	lsrs	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3208      	adds	r2, #8
 8003eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	08da      	lsrs	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3208      	adds	r2, #8
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	2203      	movs	r2, #3
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0203 	and.w	r2, r3, #3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80e0 	beq.w	80040fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ffc <HAL_GPIO_Init+0x238>)
 8003f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f42:	4a2e      	ldr	r2, [pc, #184]	@ (8003ffc <HAL_GPIO_Init+0x238>)
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <HAL_GPIO_Init+0x238>)
 8003f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5a:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <HAL_GPIO_Init+0x23c>)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a20      	ldr	r2, [pc, #128]	@ (8004004 <HAL_GPIO_Init+0x240>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d052      	beq.n	800402c <HAL_GPIO_Init+0x268>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1f      	ldr	r2, [pc, #124]	@ (8004008 <HAL_GPIO_Init+0x244>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d031      	beq.n	8003ff2 <HAL_GPIO_Init+0x22e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_GPIO_Init+0x248>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02b      	beq.n	8003fee <HAL_GPIO_Init+0x22a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <HAL_GPIO_Init+0x24c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d025      	beq.n	8003fea <HAL_GPIO_Init+0x226>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004014 <HAL_GPIO_Init+0x250>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_GPIO_Init+0x222>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <HAL_GPIO_Init+0x254>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d019      	beq.n	8003fe2 <HAL_GPIO_Init+0x21e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800401c <HAL_GPIO_Init+0x258>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x21a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <HAL_GPIO_Init+0x25c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00d      	beq.n	8003fda <HAL_GPIO_Init+0x216>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <HAL_GPIO_Init+0x260>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <HAL_GPIO_Init+0x212>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <HAL_GPIO_Init+0x264>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_GPIO_Init+0x20e>
 8003fce:	2309      	movs	r3, #9
 8003fd0:	e02d      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	e02b      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	e029      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fda:	2307      	movs	r3, #7
 8003fdc:	e027      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fde:	2306      	movs	r3, #6
 8003fe0:	e025      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fe2:	2305      	movs	r3, #5
 8003fe4:	e023      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	e021      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fea:	2303      	movs	r3, #3
 8003fec:	e01f      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e01d      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e01b      	b.n	800402e <HAL_GPIO_Init+0x26a>
 8003ff6:	bf00      	nop
 8003ff8:	58000080 	.word	0x58000080
 8003ffc:	58024400 	.word	0x58024400
 8004000:	58000400 	.word	0x58000400
 8004004:	58020000 	.word	0x58020000
 8004008:	58020400 	.word	0x58020400
 800400c:	58020800 	.word	0x58020800
 8004010:	58020c00 	.word	0x58020c00
 8004014:	58021000 	.word	0x58021000
 8004018:	58021400 	.word	0x58021400
 800401c:	58021800 	.word	0x58021800
 8004020:	58021c00 	.word	0x58021c00
 8004024:	58022000 	.word	0x58022000
 8004028:	58022400 	.word	0x58022400
 800402c:	2300      	movs	r3, #0
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	f002 0203 	and.w	r2, r2, #3
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	4093      	lsls	r3, r2
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800403e:	4938      	ldr	r1, [pc, #224]	@ (8004120 <HAL_GPIO_Init+0x35c>)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3302      	adds	r3, #2
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f ae63 	bne.w	8003dd8 <HAL_GPIO_Init+0x14>
  }
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3724      	adds	r7, #36	@ 0x24
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	58000400 	.word	0x58000400

08004124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
 8004130:	4613      	mov	r3, r2
 8004132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004134:	787b      	ldrb	r3, [r7, #1]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800413a:	887a      	ldrh	r2, [r7, #2]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004140:	e003      	b.n	800414a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	041a      	lsls	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	619a      	str	r2, [r3, #24]
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0bd      	b.n	80042e6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d031      	beq.n	8004212 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a4f      	ldr	r2, [pc, #316]	@ (80042f0 <HAL_HRTIM_Init+0x198>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10e      	bne.n	80041d6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80041b8:	4b4e      	ldr	r3, [pc, #312]	@ (80042f4 <HAL_HRTIM_Init+0x19c>)
 80041ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041be:	4a4d      	ldr	r2, [pc, #308]	@ (80042f4 <HAL_HRTIM_Init+0x19c>)
 80041c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041c8:	4b4a      	ldr	r3, [pc, #296]	@ (80042f4 <HAL_HRTIM_Init+0x19c>)
 80041ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80041e4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041fa:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd ff96 	bl	8002144 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004232:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
 800425e:	e03e      	b.n	80042de <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004260:	7dfa      	ldrb	r2, [r7, #23]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3318      	adds	r3, #24
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004274:	7dfa      	ldrb	r2, [r7, #23]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	331c      	adds	r3, #28
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004288:	7dfa      	ldrb	r2, [r7, #23]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3320      	adds	r3, #32
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800429c:	7dfa      	ldrb	r2, [r7, #23]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3324      	adds	r3, #36	@ 0x24
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80042b0:	7dfa      	ldrb	r2, [r7, #23]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	3328      	adds	r3, #40	@ 0x28
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80042c4:	7dfa      	ldrb	r2, [r7, #23]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3330      	adds	r3, #48	@ 0x30
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	3301      	adds	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d9bd      	bls.n	8004260 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40017400 	.word	0x40017400
 80042f4:	58024400 	.word	0x58024400

080042f8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d101      	bne.n	8004314 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	e015      	b.n	8004340 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b05      	cmp	r3, #5
 8004320:	d104      	bne.n	800432c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fa88 	bl	800483a <HRTIM_MasterBase_Config>
 800432a:	e004      	b.n	8004336 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fab1 	bl	8004898 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d101      	bne.n	8004364 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
 8004362:	e01c      	b.n	800439e <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_HRTIM_EventConfig+0x2a>
 800436e:	2302      	movs	r3, #2
 8004370:	e015      	b.n	800439e <HAL_HRTIM_EventConfig+0x56>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fd44 	bl	8004e14 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d101      	bne.n	80043c0 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	e025      	b.n	800440c <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_HRTIM_EventPrescalerConfig+0x28>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e01e      	b.n	800440c <HAL_HRTIM_EventPrescalerConfig+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 80043e6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d101      	bne.n	8004434 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
 8004432:	e05f      	b.n	80044f4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800443e:	2302      	movs	r3, #2
 8004440:	e058      	b.n	80044f4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b05      	cmp	r3, #5
 8004456:	d104      	bne.n	8004462 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fa5c 	bl	8004918 <HRTIM_MasterWaveform_Config>
 8004460:	e004      	b.n	800446c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fabc 	bl	80049e4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4403      	add	r3, r0
 800447e:	3320      	adds	r3, #32
 8004480:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4403      	add	r3, r0
 8004494:	3324      	adds	r3, #36	@ 0x24
 8004496:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4403      	add	r3, r0
 80044aa:	3328      	adds	r3, #40	@ 0x28
 80044ac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	332c      	adds	r3, #44	@ 0x2c
 80044c2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6919      	ldr	r1, [r3, #16]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4403      	add	r3, r0
 80044d6:	3330      	adds	r3, #48	@ 0x30
 80044d8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fec1 	bl	8005264 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d101      	bne.n	800451a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	e157      	b.n	80047ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8004524:	2302      	movs	r3, #2
 8004526:	e150      	b.n	80047ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b05      	cmp	r3, #5
 800453c:	d140      	bne.n	80045c0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3b01      	subs	r3, #1
 8004542:	2b07      	cmp	r3, #7
 8004544:	d82a      	bhi.n	800459c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8004546:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	0800456d 	.word	0x0800456d
 8004550:	08004579 	.word	0x08004579
 8004554:	0800459d 	.word	0x0800459d
 8004558:	08004585 	.word	0x08004585
 800455c:	0800459d 	.word	0x0800459d
 8004560:	0800459d 	.word	0x0800459d
 8004564:	0800459d 	.word	0x0800459d
 8004568:	08004591 	.word	0x08004591
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	61da      	str	r2, [r3, #28]
        break;
 8004576:	e01a      	b.n	80045ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8004582:	e014      	b.n	80045ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800458e:	e00e      	b.n	80045ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800459a:	e008      	b.n	80045ae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2207      	movs	r2, #7
 80045a0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 80045ac:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	f040 80fe 	bne.w	80047b8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e104      	b.n	80047ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	f200 80e3 	bhi.w	8004790 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80045ca:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045f1 	.word	0x080045f1
 80045d4:	08004605 	.word	0x08004605
 80045d8:	08004791 	.word	0x08004791
 80045dc:	080046c1 	.word	0x080046c1
 80045e0:	08004791 	.word	0x08004791
 80045e4:	08004791 	.word	0x08004791
 80045e8:	08004791 	.word	0x08004791
 80045ec:	080046d5 	.word	0x080046d5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	01db      	lsls	r3, r3, #7
 80045fc:	440b      	add	r3, r1
 80045fe:	339c      	adds	r3, #156	@ 0x9c
 8004600:	601a      	str	r2, [r3, #0]
        break;
 8004602:	e0d1      	b.n	80047a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6819      	ldr	r1, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	440b      	add	r3, r1
 8004612:	33a4      	adds	r3, #164	@ 0xa4
 8004614:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03f      	beq.n	800469e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	01db      	lsls	r3, r3, #7
 8004628:	4413      	add	r3, r2
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	6811      	ldr	r1, [r2, #0]
 8004630:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	3301      	adds	r3, #1
 8004638:	01db      	lsls	r3, r3, #7
 800463a:	440b      	add	r3, r1
 800463c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3301      	adds	r3, #1
 8004646:	01db      	lsls	r3, r3, #7
 8004648:	4413      	add	r3, r2
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	6809      	ldr	r1, [r1, #0]
 8004654:	431a      	orrs	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3301      	adds	r3, #1
 800465a:	01db      	lsls	r3, r3, #7
 800465c:	440b      	add	r3, r1
 800465e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004668:	d109      	bne.n	800467e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	01db      	lsls	r3, r3, #7
 8004676:	440b      	add	r3, r1
 8004678:	339c      	adds	r3, #156	@ 0x9c
 800467a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800467c:	e091      	b.n	80047a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004686:	f040 808c 	bne.w	80047a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	01db      	lsls	r3, r3, #7
 8004696:	440b      	add	r3, r1
 8004698:	33a8      	adds	r3, #168	@ 0xa8
 800469a:	601a      	str	r2, [r3, #0]
         break;
 800469c:	e081      	b.n	80047a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3301      	adds	r3, #1
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	4413      	add	r3, r2
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	6811      	ldr	r1, [r2, #0]
 80046b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3301      	adds	r3, #1
 80046b8:	01db      	lsls	r3, r3, #7
 80046ba:	440b      	add	r3, r1
 80046bc:	601a      	str	r2, [r3, #0]
         break;
 80046be:	e070      	b.n	80047a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	440b      	add	r3, r1
 80046ce:	33a8      	adds	r3, #168	@ 0xa8
 80046d0:	601a      	str	r2, [r3, #0]
        break;
 80046d2:	e069      	b.n	80047a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	440b      	add	r3, r1
 80046e2:	33ac      	adds	r3, #172	@ 0xac
 80046e4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d03f      	beq.n	800476e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3301      	adds	r3, #1
 80046f6:	01db      	lsls	r3, r3, #7
 80046f8:	4413      	add	r3, r2
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6811      	ldr	r1, [r2, #0]
 8004700:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3301      	adds	r3, #1
 8004708:	01db      	lsls	r3, r3, #7
 800470a:	440b      	add	r3, r1
 800470c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3301      	adds	r3, #1
 8004716:	01db      	lsls	r3, r3, #7
 8004718:	4413      	add	r3, r2
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	6809      	ldr	r1, [r1, #0]
 8004726:	431a      	orrs	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	3301      	adds	r3, #1
 800472c:	01db      	lsls	r3, r3, #7
 800472e:	440b      	add	r3, r1
 8004730:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473a:	d109      	bne.n	8004750 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	01db      	lsls	r3, r3, #7
 8004748:	440b      	add	r3, r1
 800474a:	339c      	adds	r3, #156	@ 0x9c
 800474c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800474e:	e02a      	b.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004758:	d125      	bne.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	01db      	lsls	r3, r3, #7
 8004766:	440b      	add	r3, r1
 8004768:	33a8      	adds	r3, #168	@ 0xa8
 800476a:	601a      	str	r2, [r3, #0]
         break;
 800476c:	e01b      	b.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3301      	adds	r3, #1
 8004776:	01db      	lsls	r3, r3, #7
 8004778:	4413      	add	r3, r2
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	6811      	ldr	r1, [r2, #0]
 8004780:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	3301      	adds	r3, #1
 8004788:	01db      	lsls	r3, r3, #7
 800478a:	440b      	add	r3, r1
 800478c:	601a      	str	r2, [r3, #0]
         break;
 800478e:	e00a      	b.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2207      	movs	r2, #7
 8004794:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 80047a0:	e002      	b.n	80047a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80047a6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b07      	cmp	r3, #7
 80047b2:	d101      	bne.n	80047b8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e008      	b.n	80047ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop

080047d8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d101      	bne.n	80047f6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
 80047f4:	e01d      	b.n	8004832 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004800:	2302      	movs	r3, #2
 8004802:	e016      	b.n	8004832 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fa22 	bl	8004c64 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0307 	bic.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 0318 	bic.w	r3, r3, #24
 8004864:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	6852      	ldr	r2, [r2, #4]
 800488a:	619a      	str	r2, [r3, #24]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	3301      	adds	r3, #1
 80048ac:	01db      	lsls	r3, r3, #7
 80048ae:	4413      	add	r3, r2
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 0318 	bic.w	r3, r3, #24
 80048cc:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3301      	adds	r3, #1
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4413      	add	r3, r2
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	440b      	add	r3, r1
 80048f6:	3394      	adds	r3, #148	@ 0x94
 80048f8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6819      	ldr	r1, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	01db      	lsls	r3, r3, #7
 8004906:	440b      	add	r3, r1
 8004908:	3398      	adds	r3, #152	@ 0x98
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004932:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0320 	bic.w	r3, r3, #32
 800493a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800494c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800495e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004970:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004982:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004994:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80049a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ba:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b08b      	sub	sp, #44	@ 0x2c
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	3301      	adds	r3, #1
 80049f8:	01db      	lsls	r3, r3, #7
 80049fa:	4413      	add	r3, r2
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	6811      	ldr	r1, [r2, #0]
 8004a02:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	01db      	lsls	r3, r3, #7
 8004a0c:	440b      	add	r3, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3301      	adds	r3, #1
 8004a18:	01db      	lsls	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	4413      	add	r3, r2
 8004a2a:	33e8      	adds	r3, #232	@ 0xe8
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	4413      	add	r3, r2
 8004a3a:	33e4      	adds	r3, #228	@ 0xe4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004a48:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	f023 0320 	bic.w	r3, r3, #32
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ac6:	d103      	bne.n	8004ad0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	4313      	orrs	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b02:	4313      	orrs	r3, r2
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f023 031f 	bic.w	r3, r3, #31
 8004b0c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b22:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	6a3a      	ldr	r2, [r7, #32]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004b50:	d004      	beq.n	8004b5c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004b5a:	d103      	bne.n	8004b64 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d108      	bne.n	8004b76 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004b6a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d843      	bhi.n	8004c0a <HRTIM_TimingUnitWaveform_Config+0x226>
 8004b82:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b9d 	.word	0x08004b9d
 8004b8c:	08004bb3 	.word	0x08004bb3
 8004b90:	08004bc9 	.word	0x08004bc9
 8004b94:	08004bdf 	.word	0x08004bdf
 8004b98:	08004bf5 	.word	0x08004bf5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ba2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]
      break;
 8004bb0:	e02c      	b.n	8004c0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bb8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61fb      	str	r3, [r7, #28]
      break;
 8004bc6:	e021      	b.n	8004c0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004bce:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61fb      	str	r3, [r7, #28]
      break;
 8004bdc:	e016      	b.n	8004c0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004be4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61fb      	str	r3, [r7, #28]
      break;
 8004bf2:	e00b      	b.n	8004c0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bfa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	015b      	lsls	r3, r3, #5
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61fb      	str	r3, [r7, #28]
      break;
 8004c08:	e000      	b.n	8004c0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004c0a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	3301      	adds	r3, #1
 8004c14:	01db      	lsls	r3, r3, #7
 8004c16:	4413      	add	r3, r2
 8004c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	01db      	lsls	r3, r3, #7
 8004c24:	4413      	add	r3, r2
 8004c26:	33e8      	adds	r3, #232	@ 0xe8
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	01db      	lsls	r3, r3, #7
 8004c34:	4413      	add	r3, r2
 8004c36:	33e4      	adds	r3, #228	@ 0xe4
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	4413      	add	r3, r2
 8004c46:	33d4      	adds	r3, #212	@ 0xd4
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004c56:	bf00      	nop
 8004c58:	372c      	adds	r7, #44	@ 0x2c
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop

08004c64 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	@ 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	01db      	lsls	r3, r3, #7
 8004c7e:	4413      	add	r3, r2
 8004c80:	33e4      	adds	r3, #228	@ 0xe4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	01db      	lsls	r3, r3, #7
 8004c8e:	4413      	add	r3, r2
 8004c90:	33b8      	adds	r3, #184	@ 0xb8
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9c:	d04d      	beq.n	8004d3a <HRTIM_OutputConfig+0xd6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca4:	d85e      	bhi.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cac:	d032      	beq.n	8004d14 <HRTIM_OutputConfig+0xb0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb4:	d856      	bhi.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	@ 0x80
 8004cba:	d03e      	beq.n	8004d3a <HRTIM_OutputConfig+0xd6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b80      	cmp	r3, #128	@ 0x80
 8004cc0:	d850      	bhi.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d025      	beq.n	8004d14 <HRTIM_OutputConfig+0xb0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b40      	cmp	r3, #64	@ 0x40
 8004ccc:	d84a      	bhi.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d01f      	beq.n	8004d14 <HRTIM_OutputConfig+0xb0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d044      	beq.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d841      	bhi.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d33e      	bcc.n	8004d64 <HRTIM_OutputConfig+0x100>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3b02      	subs	r3, #2
 8004cea:	2201      	movs	r2, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	4b48      	ldr	r3, [pc, #288]	@ (8004e10 <HRTIM_OutputConfig+0x1ac>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11c      	bne.n	8004d3a <HRTIM_OutputConfig+0xd6>
 8004d00:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d027      	beq.n	8004d64 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	01db      	lsls	r3, r3, #7
 8004d20:	440b      	add	r3, r1
 8004d22:	33bc      	adds	r3, #188	@ 0xbc
 8004d24:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	01db      	lsls	r3, r3, #7
 8004d32:	440b      	add	r3, r1
 8004d34:	33c0      	adds	r3, #192	@ 0xc0
 8004d36:	601a      	str	r2, [r3, #0]
      break;
 8004d38:	e015      	b.n	8004d66 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	01db      	lsls	r3, r3, #7
 8004d46:	440b      	add	r3, r1
 8004d48:	33c4      	adds	r3, #196	@ 0xc4
 8004d4a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	01db      	lsls	r3, r3, #7
 8004d58:	440b      	add	r3, r1
 8004d5a:	33c8      	adds	r3, #200	@ 0xc8
 8004d5c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004d5e:	2310      	movs	r3, #16
 8004d60:	61bb      	str	r3, [r7, #24]
      break;
 8004d62:	e000      	b.n	8004d66 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8004d64:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004d66:	22fe      	movs	r2, #254	@ 0xfe
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d111      	bne.n	8004df2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10c      	bne.n	8004df2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d107      	bne.n	8004df2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	01db      	lsls	r3, r3, #7
 8004dfa:	4413      	add	r3, r2
 8004dfc:	33e4      	adds	r3, #228	@ 0xe4
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3724      	adds	r7, #36	@ 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40000041 	.word	0x40000041

08004e14 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	@ 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8004e28:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8004e32:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8004e3c:	617b      	str	r3, [r7, #20]

  switch (Event)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b0a      	cmp	r3, #10
 8004e42:	f200 8208 	bhi.w	8005256 <HRTIM_EventConfig+0x442>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <HRTIM_EventConfig+0x38>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e99 	.word	0x08004e99
 8004e54:	08004eef 	.word	0x08004eef
 8004e58:	08004f4b 	.word	0x08004f4b
 8004e5c:	08004fa9 	.word	0x08004fa9
 8004e60:	08005007 	.word	0x08005007
 8004e64:	08005065 	.word	0x08005065
 8004e68:	080050c3 	.word	0x080050c3
 8004e6c:	08005127 	.word	0x08005127
 8004e70:	0800518b 	.word	0x0800518b
 8004e74:	080051f1 	.word	0x080051f1
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004e96:	e1df      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e9e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0318 	and.w	r3, r3, #24
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004eec:	e1b4      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8004ef4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	019b      	lsls	r3, r3, #6
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	019b      	lsls	r3, r3, #6
 8004f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004f48:	e186      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f50:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	031b      	lsls	r3, r3, #12
 8004f58:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	031b      	lsls	r3, r3, #12
 8004f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	031b      	lsls	r3, r3, #12
 8004f78:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	031b      	lsls	r3, r3, #12
 8004f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004fa6:	e157      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8004fae:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	049b      	lsls	r3, r3, #18
 8004fb6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	049b      	lsls	r3, r3, #18
 8004fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	049b      	lsls	r3, r3, #18
 8004fd6:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	049b      	lsls	r3, r3, #18
 8004ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005004:	e128      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800500c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	4313      	orrs	r3, r2
 800501c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	4313      	orrs	r3, r2
 800502c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	4313      	orrs	r3, r2
 800503c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	4313      	orrs	r3, r2
 8005056:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005062:	e0f9      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f023 031f 	bic.w	r3, r3, #31
 800506a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0318 	and.w	r3, r3, #24
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 030f 	bic.w	r3, r3, #15
 800509c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80050c0:	e0ca      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 80050c8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	019b      	lsls	r3, r3, #6
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 80050fe:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005124:	e098      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 800512c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	031b      	lsls	r3, r3, #12
 8005134:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	031b      	lsls	r3, r3, #12
 8005144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	031b      	lsls	r3, r3, #12
 8005154:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005164:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	031b      	lsls	r3, r3, #12
 800516c:	b29b      	uxth	r3, r3
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005188:	e066      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005190:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	049b      	lsls	r3, r3, #18
 8005198:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	049b      	lsls	r3, r3, #18
 80051a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	049b      	lsls	r3, r3, #18
 80051b8:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80051c8:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	049b      	lsls	r3, r3, #18
 80051d0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80051ee:	e033      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80051f6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800522e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	061b      	lsls	r3, r3, #24
 8005236:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005254:	e000      	b.n	8005258 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8005256:	bf00      	nop
  }
}
 8005258:	bf00      	nop
 800525a:	3724      	adds	r7, #36	@ 0x24
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d851      	bhi.n	8005318 <HRTIM_ForceRegistersUpdate+0xb4>
 8005274:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <HRTIM_ForceRegistersUpdate+0x18>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	080052ab 	.word	0x080052ab
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052d7 	.word	0x080052d7
 8005288:	080052ed 	.word	0x080052ed
 800528c:	08005303 	.word	0x08005303
 8005290:	08005295 	.word	0x08005295
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052a8:	e037      	b.n	800531a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0202 	orr.w	r2, r2, #2
 80052ba:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052be:	e02c      	b.n	800531a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0204 	orr.w	r2, r2, #4
 80052d0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052d4:	e021      	b.n	800531a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0208 	orr.w	r2, r2, #8
 80052e6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052ea:	e016      	b.n	800531a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0210 	orr.w	r2, r2, #16
 80052fc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005300:	e00b      	b.n	800531a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0220 	orr.w	r2, r2, #32
 8005312:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005316:	e000      	b.n	800531a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8005318:	bf00      	nop
  }
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop

08005328 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e097      	b.n	800546a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fc ff8d 	bl	8002274 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d004      	beq.n	800537c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800537a:	d103      	bne.n	8005384 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 031e 	bic.w	r3, r3, #30
 8005382:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b38      	ldr	r3, [pc, #224]	@ (8005474 <HAL_LPTIM_Init+0x14c>)
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4b37      	ldr	r3, [pc, #220]	@ (8005478 <HAL_LPTIM_Init+0x150>)
 800539c:	4013      	ands	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80053a8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80053ae:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80053b4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80053ba:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80053d2:	4313      	orrs	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d004      	beq.n	80053ec <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ea:	d107      	bne.n	80053fc <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053f4:	4313      	orrs	r3, r2
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005404:	4293      	cmp	r3, r2
 8005406:	d00a      	beq.n	800541e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005410:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005416:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a14      	ldr	r2, [pc, #80]	@ (800547c <HAL_LPTIM_Init+0x154>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_LPTIM_Init+0x112>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a12      	ldr	r2, [pc, #72]	@ (8005480 <HAL_LPTIM_Init+0x158>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d108      	bne.n	800544c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	625a      	str	r2, [r3, #36]	@ 0x24
 800544a:	e009      	b.n	8005460 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0c      	ldr	r2, [pc, #48]	@ (8005484 <HAL_LPTIM_Init+0x15c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d104      	bne.n	8005460 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800545e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	ffff1f3f 	.word	0xffff1f3f
 8005478:	ff19f1fe 	.word	0xff19f1fe
 800547c:	40002400 	.word	0x40002400
 8005480:	58002400 	.word	0x58002400
 8005484:	58002800 	.word	0x58002800

08005488 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80054aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2210      	movs	r2, #16
 80054c2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80054cc:	2110      	movs	r1, #16
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f97e 	bl	80057d0 <LPTIM_WaitForFlag>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d101      	bne.n	80054de <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e01d      	b.n	800551a <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2208      	movs	r2, #8
 80054e4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80054ee:	2108      	movs	r1, #8
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f96d 	bl	80057d0 <LPTIM_WaitForFlag>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d101      	bne.n	8005500 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e00c      	b.n	800551a <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0204 	orr.w	r2, r2, #4
 800550e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d00c      	beq.n	8005556 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005544:	d107      	bne.n	8005556 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005554:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2210      	movs	r2, #16
 800556c:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005576:	2110      	movs	r1, #16
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f929 	bl	80057d0 <LPTIM_WaitForFlag>
 800557e:	4603      	mov	r3, r0
 8005580:	2b03      	cmp	r3, #3
 8005582:	d101      	bne.n	8005588 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e02f      	b.n	80055e8 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f951 	bl	8005830 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f90f 	bl	80057b2 <HAL_LPTIM_GetState>
 8005594:	4603      	mov	r3, r0
 8005596:	2b03      	cmp	r3, #3
 8005598:	d101      	bne.n	800559e <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e024      	b.n	80055e8 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0210 	orr.w	r2, r2, #16
 80055ac:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0202 	orr.w	r2, r2, #2
 80055bc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0204 	orr.w	r2, r2, #4
 80055dc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10d      	bne.n	8005622 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2201      	movs	r2, #1
 800561a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f882 	bl	8005726 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d10d      	bne.n	800564c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d106      	bne.n	800564c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2202      	movs	r2, #2
 8005644:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f877 	bl	800573a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d10d      	bne.n	8005676 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d106      	bne.n	8005676 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2204      	movs	r2, #4
 800566e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f86c 	bl	800574e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d10d      	bne.n	80056a0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b08      	cmp	r3, #8
 8005690:	d106      	bne.n	80056a0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2208      	movs	r2, #8
 8005698:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f861 	bl	8005762 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d10d      	bne.n	80056ca <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d106      	bne.n	80056ca <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2210      	movs	r2, #16
 80056c2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f856 	bl	8005776 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d10d      	bne.n	80056f4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d106      	bne.n	80056f4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2220      	movs	r2, #32
 80056ec:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f84b 	bl	800578a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d10d      	bne.n	800571e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d106      	bne.n	800571e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2240      	movs	r2, #64	@ 0x40
 8005716:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f840 	bl	800579e <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057c0:	b2db      	uxtb	r3, r3
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80057de:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <LPTIM_WaitForFlag+0x58>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a12      	ldr	r2, [pc, #72]	@ (800582c <LPTIM_WaitForFlag+0x5c>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	0b9b      	lsrs	r3, r3, #14
 80057ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	4013      	ands	r3, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d002      	beq.n	800581a <LPTIM_WaitForFlag+0x4a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ec      	bne.n	80057f4 <LPTIM_WaitForFlag+0x24>

  return result;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	24000004 	.word	0x24000004
 800582c:	d1b71759 	.word	0xd1b71759

08005830 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	@ 0x30
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583c:	f3ef 8310 	mrs	r3, PRIMASK
 8005840:	60fb      	str	r3, [r7, #12]
  return(result);
 8005842:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005846:	2301      	movs	r3, #1
 8005848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f383 8810 	msr	PRIMASK, r3
}
 8005850:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a81      	ldr	r2, [pc, #516]	@ (8005a5c <LPTIM_Disable+0x22c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d02d      	beq.n	80058b8 <LPTIM_Disable+0x88>
 800585c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a5c <LPTIM_Disable+0x22c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d830      	bhi.n	80058c4 <LPTIM_Disable+0x94>
 8005862:	4a7f      	ldr	r2, [pc, #508]	@ (8005a60 <LPTIM_Disable+0x230>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d021      	beq.n	80058ac <LPTIM_Disable+0x7c>
 8005868:	4a7d      	ldr	r2, [pc, #500]	@ (8005a60 <LPTIM_Disable+0x230>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d82a      	bhi.n	80058c4 <LPTIM_Disable+0x94>
 800586e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a64 <LPTIM_Disable+0x234>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d015      	beq.n	80058a0 <LPTIM_Disable+0x70>
 8005874:	4a7b      	ldr	r2, [pc, #492]	@ (8005a64 <LPTIM_Disable+0x234>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d824      	bhi.n	80058c4 <LPTIM_Disable+0x94>
 800587a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a68 <LPTIM_Disable+0x238>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <LPTIM_Disable+0x58>
 8005880:	4a7a      	ldr	r2, [pc, #488]	@ (8005a6c <LPTIM_Disable+0x23c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d006      	beq.n	8005894 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005886:	e01d      	b.n	80058c4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005888:	4b79      	ldr	r3, [pc, #484]	@ (8005a70 <LPTIM_Disable+0x240>)
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005892:	e018      	b.n	80058c6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005894:	4b76      	ldr	r3, [pc, #472]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005898:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800589e:	e012      	b.n	80058c6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80058a0:	4b73      	ldr	r3, [pc, #460]	@ (8005a70 <LPTIM_Disable+0x240>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058aa:	e00c      	b.n	80058c6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 80058ac:	4b70      	ldr	r3, [pc, #448]	@ (8005a70 <LPTIM_Disable+0x240>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058b6:	e006      	b.n	80058c6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80058b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005a70 <LPTIM_Disable+0x240>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058c2:	e000      	b.n	80058c6 <LPTIM_Disable+0x96>
      break;
 80058c4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a5a      	ldr	r2, [pc, #360]	@ (8005a5c <LPTIM_Disable+0x22c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d059      	beq.n	80059ac <LPTIM_Disable+0x17c>
 80058f8:	4a58      	ldr	r2, [pc, #352]	@ (8005a5c <LPTIM_Disable+0x22c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d867      	bhi.n	80059ce <LPTIM_Disable+0x19e>
 80058fe:	4a58      	ldr	r2, [pc, #352]	@ (8005a60 <LPTIM_Disable+0x230>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d042      	beq.n	800598a <LPTIM_Disable+0x15a>
 8005904:	4a56      	ldr	r2, [pc, #344]	@ (8005a60 <LPTIM_Disable+0x230>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d861      	bhi.n	80059ce <LPTIM_Disable+0x19e>
 800590a:	4a56      	ldr	r2, [pc, #344]	@ (8005a64 <LPTIM_Disable+0x234>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d02b      	beq.n	8005968 <LPTIM_Disable+0x138>
 8005910:	4a54      	ldr	r2, [pc, #336]	@ (8005a64 <LPTIM_Disable+0x234>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d85b      	bhi.n	80059ce <LPTIM_Disable+0x19e>
 8005916:	4a54      	ldr	r2, [pc, #336]	@ (8005a68 <LPTIM_Disable+0x238>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <LPTIM_Disable+0xf4>
 800591c:	4a53      	ldr	r2, [pc, #332]	@ (8005a6c <LPTIM_Disable+0x23c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d011      	beq.n	8005946 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005922:	e054      	b.n	80059ce <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005924:	4b52      	ldr	r3, [pc, #328]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	4a51      	ldr	r2, [pc, #324]	@ (8005a70 <LPTIM_Disable+0x240>)
 800592c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005934:	4b4e      	ldr	r3, [pc, #312]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593a:	4a4d      	ldr	r2, [pc, #308]	@ (8005a70 <LPTIM_Disable+0x240>)
 800593c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8005944:	e044      	b.n	80059d0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005946:	4b4a      	ldr	r3, [pc, #296]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800594c:	4a48      	ldr	r2, [pc, #288]	@ (8005a70 <LPTIM_Disable+0x240>)
 800594e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005952:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005956:	4b46      	ldr	r3, [pc, #280]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005958:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800595c:	4a44      	ldr	r2, [pc, #272]	@ (8005a70 <LPTIM_Disable+0x240>)
 800595e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005962:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005966:	e033      	b.n	80059d0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8005968:	4b41      	ldr	r3, [pc, #260]	@ (8005a70 <LPTIM_Disable+0x240>)
 800596a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800596e:	4a40      	ldr	r2, [pc, #256]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005970:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005974:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005978:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <LPTIM_Disable+0x240>)
 800597a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800597e:	4a3c      	ldr	r2, [pc, #240]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005980:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005984:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005988:	e022      	b.n	80059d0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800598a:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <LPTIM_Disable+0x240>)
 800598c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005990:	4a37      	ldr	r2, [pc, #220]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005992:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005996:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800599a:	4b35      	ldr	r3, [pc, #212]	@ (8005a70 <LPTIM_Disable+0x240>)
 800599c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a0:	4a33      	ldr	r2, [pc, #204]	@ (8005a70 <LPTIM_Disable+0x240>)
 80059a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80059aa:	e011      	b.n	80059d0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 80059ac:	4b30      	ldr	r3, [pc, #192]	@ (8005a70 <LPTIM_Disable+0x240>)
 80059ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005a70 <LPTIM_Disable+0x240>)
 80059b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80059bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005a70 <LPTIM_Disable+0x240>)
 80059be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <LPTIM_Disable+0x240>)
 80059c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80059cc:	e000      	b.n	80059d0 <LPTIM_Disable+0x1a0>
      break;
 80059ce:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <LPTIM_Disable+0x1ae>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80d1 	beq.w	8005b80 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a5c <LPTIM_Disable+0x22c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d031      	beq.n	8005a4c <LPTIM_Disable+0x21c>
 80059e8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a5c <LPTIM_Disable+0x22c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d842      	bhi.n	8005a74 <LPTIM_Disable+0x244>
 80059ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <LPTIM_Disable+0x230>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d024      	beq.n	8005a3e <LPTIM_Disable+0x20e>
 80059f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a60 <LPTIM_Disable+0x230>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d83c      	bhi.n	8005a74 <LPTIM_Disable+0x244>
 80059fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <LPTIM_Disable+0x234>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d017      	beq.n	8005a30 <LPTIM_Disable+0x200>
 8005a00:	4a18      	ldr	r2, [pc, #96]	@ (8005a64 <LPTIM_Disable+0x234>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d836      	bhi.n	8005a74 <LPTIM_Disable+0x244>
 8005a06:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <LPTIM_Disable+0x238>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <LPTIM_Disable+0x1e4>
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <LPTIM_Disable+0x23c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005a12:	e02f      	b.n	8005a74 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005a14:	4b16      	ldr	r3, [pc, #88]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a18:	4a15      	ldr	r2, [pc, #84]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a1a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005a1e:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005a20:	e029      	b.n	8005a76 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a26:	4a12      	ldr	r2, [pc, #72]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a28:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005a2c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a2e:	e022      	b.n	8005a76 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a34:	4a0e      	ldr	r2, [pc, #56]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a36:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a3a:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a3c:	e01b      	b.n	8005a76 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	4a0b      	ldr	r2, [pc, #44]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a44:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a48:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a4a:	e014      	b.n	8005a76 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005a4c:	4b08      	ldr	r3, [pc, #32]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a50:	4a07      	ldr	r2, [pc, #28]	@ (8005a70 <LPTIM_Disable+0x240>)
 8005a52:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a56:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a58:	e00d      	b.n	8005a76 <LPTIM_Disable+0x246>
 8005a5a:	bf00      	nop
 8005a5c:	58003000 	.word	0x58003000
 8005a60:	58002c00 	.word	0x58002c00
 8005a64:	58002800 	.word	0x58002800
 8005a68:	40002400 	.word	0x40002400
 8005a6c:	58002400 	.word	0x58002400
 8005a70:	58024400 	.word	0x58024400
        break;
 8005a74:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01a      	beq.n	8005ab2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005a94:	2108      	movs	r1, #8
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fe9a 	bl	80057d0 <LPTIM_WaitForFlag>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d103      	bne.n	8005aaa <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2208      	movs	r2, #8
 8005ab0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01a      	beq.n	8005aee <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005ad0:	2110      	movs	r1, #16
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fe7c 	bl	80057d0 <LPTIM_WaitForFlag>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d103      	bne.n	8005ae6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2210      	movs	r2, #16
 8005aec:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a32      	ldr	r2, [pc, #200]	@ (8005bbc <LPTIM_Disable+0x38c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d039      	beq.n	8005b6c <LPTIM_Disable+0x33c>
 8005af8:	4a30      	ldr	r2, [pc, #192]	@ (8005bbc <LPTIM_Disable+0x38c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d83f      	bhi.n	8005b7e <LPTIM_Disable+0x34e>
 8005afe:	4a30      	ldr	r2, [pc, #192]	@ (8005bc0 <LPTIM_Disable+0x390>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d02a      	beq.n	8005b5a <LPTIM_Disable+0x32a>
 8005b04:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc0 <LPTIM_Disable+0x390>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d839      	bhi.n	8005b7e <LPTIM_Disable+0x34e>
 8005b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <LPTIM_Disable+0x394>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01b      	beq.n	8005b48 <LPTIM_Disable+0x318>
 8005b10:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc4 <LPTIM_Disable+0x394>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d833      	bhi.n	8005b7e <LPTIM_Disable+0x34e>
 8005b16:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <LPTIM_Disable+0x398>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <LPTIM_Disable+0x2f4>
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bcc <LPTIM_Disable+0x39c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005b22:	e02c      	b.n	8005b7e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005b24:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b28:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005b2c:	4928      	ldr	r1, [pc, #160]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	4313      	orrs	r3, r2
 8005b32:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8005b34:	e024      	b.n	8005b80 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005b36:	4b26      	ldr	r3, [pc, #152]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b3e:	4924      	ldr	r1, [pc, #144]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	4313      	orrs	r3, r2
 8005b44:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b46:	e01b      	b.n	8005b80 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b50:	491f      	ldr	r1, [pc, #124]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b54:	4313      	orrs	r3, r2
 8005b56:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b58:	e012      	b.n	8005b80 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b62:	491b      	ldr	r1, [pc, #108]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	4313      	orrs	r3, r2
 8005b68:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b6a:	e009      	b.n	8005b80 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8005b6c:	4b18      	ldr	r3, [pc, #96]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b74:	4916      	ldr	r1, [pc, #88]	@ (8005bd0 <LPTIM_Disable+0x3a0>)
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b7c:	e000      	b.n	8005b80 <LPTIM_Disable+0x350>
        break;
 8005b7e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b96:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a3a      	ldr	r2, [r7, #32]
 8005b9e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005bb4:	bf00      	nop
 8005bb6:	3730      	adds	r7, #48	@ 0x30
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	58003000 	.word	0x58003000
 8005bc0:	58002c00 	.word	0x58002c00
 8005bc4:	58002800 	.word	0x58002800
 8005bc8:	40002400 	.word	0x40002400
 8005bcc:	58002400 	.word	0x58002400
 8005bd0:	58024400 	.word	0x58024400

08005bd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005bdc:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <HAL_PWREx_ConfigSupply+0x70>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d00a      	beq.n	8005bfe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005be8:	4b16      	ldr	r3, [pc, #88]	@ (8005c44 <HAL_PWREx_ConfigSupply+0x70>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d001      	beq.n	8005bfa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e01f      	b.n	8005c3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e01d      	b.n	8005c3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bfe:	4b11      	ldr	r3, [pc, #68]	@ (8005c44 <HAL_PWREx_ConfigSupply+0x70>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	490f      	ldr	r1, [pc, #60]	@ (8005c44 <HAL_PWREx_ConfigSupply+0x70>)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c0e:	f7fd f9d5 	bl	8002fbc <HAL_GetTick>
 8005c12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c14:	e009      	b.n	8005c2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c16:	f7fd f9d1 	bl	8002fbc <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c24:	d901      	bls.n	8005c2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e007      	b.n	8005c3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c2a:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_PWREx_ConfigSupply+0x70>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c36:	d1ee      	bne.n	8005c16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	58024800 	.word	0x58024800

08005c48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08c      	sub	sp, #48	@ 0x30
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f000 bc48 	b.w	80064ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8088 	beq.w	8005d7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6a:	4b99      	ldr	r3, [pc, #612]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c74:	4b96      	ldr	r3, [pc, #600]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d007      	beq.n	8005c90 <HAL_RCC_OscConfig+0x48>
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	2b18      	cmp	r3, #24
 8005c84:	d111      	bne.n	8005caa <HAL_RCC_OscConfig+0x62>
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	4b8f      	ldr	r3, [pc, #572]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d06d      	beq.n	8005d78 <HAL_RCC_OscConfig+0x130>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d169      	bne.n	8005d78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f000 bc21 	b.w	80064ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x7a>
 8005cb4:	4b86      	ldr	r3, [pc, #536]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a85      	ldr	r2, [pc, #532]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	e02e      	b.n	8005d20 <HAL_RCC_OscConfig+0xd8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x9c>
 8005cca:	4b81      	ldr	r3, [pc, #516]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a80      	ldr	r2, [pc, #512]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a7d      	ldr	r2, [pc, #500]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e01d      	b.n	8005d20 <HAL_RCC_OscConfig+0xd8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCC_OscConfig+0xc0>
 8005cee:	4b78      	ldr	r3, [pc, #480]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a77      	ldr	r2, [pc, #476]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b75      	ldr	r3, [pc, #468]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a74      	ldr	r2, [pc, #464]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e00b      	b.n	8005d20 <HAL_RCC_OscConfig+0xd8>
 8005d08:	4b71      	ldr	r3, [pc, #452]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a70      	ldr	r2, [pc, #448]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	4b6e      	ldr	r3, [pc, #440]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d013      	beq.n	8005d50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fd f948 	bl	8002fbc <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d30:	f7fd f944 	bl	8002fbc <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	@ 0x64
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e3d4      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d42:	4b63      	ldr	r3, [pc, #396]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0xe8>
 8005d4e:	e014      	b.n	8005d7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fd f934 	bl	8002fbc <HAL_GetTick>
 8005d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d58:	f7fd f930 	bl	8002fbc <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	@ 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e3c0      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d6a:	4b59      	ldr	r3, [pc, #356]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x110>
 8005d76:	e000      	b.n	8005d7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80ca 	beq.w	8005f1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d88:	4b51      	ldr	r3, [pc, #324]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d92:	4b4f      	ldr	r3, [pc, #316]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HAL_RCC_OscConfig+0x166>
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	2b18      	cmp	r3, #24
 8005da2:	d156      	bne.n	8005e52 <HAL_RCC_OscConfig+0x20a>
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d151      	bne.n	8005e52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dae:	4b48      	ldr	r3, [pc, #288]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x17e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e392      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dc6:	4b42      	ldr	r3, [pc, #264]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 0219 	bic.w	r2, r3, #25
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	493f      	ldr	r1, [pc, #252]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd f8f0 	bl	8002fbc <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fd f8ec 	bl	8002fbc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e37c      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005df2:	4b37      	ldr	r3, [pc, #220]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfe:	f7fd f8e9 	bl	8002fd4 <HAL_GetREVID>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d817      	bhi.n	8005e3c <HAL_RCC_OscConfig+0x1f4>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d108      	bne.n	8005e26 <HAL_RCC_OscConfig+0x1de>
 8005e14:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e24:	e07a      	b.n	8005f1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e26:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	031b      	lsls	r3, r3, #12
 8005e34:	4926      	ldr	r1, [pc, #152]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e3a:	e06f      	b.n	8005f1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3c:	4b24      	ldr	r3, [pc, #144]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	4921      	ldr	r1, [pc, #132]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e50:	e064      	b.n	8005f1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d047      	beq.n	8005eea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 0219 	bic.w	r2, r3, #25
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	491a      	ldr	r1, [pc, #104]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fd f8a6 	bl	8002fbc <HAL_GetTick>
 8005e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e74:	f7fd f8a2 	bl	8002fbc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e332      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e86:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e92:	f7fd f89f 	bl	8002fd4 <HAL_GetREVID>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d819      	bhi.n	8005ed4 <HAL_RCC_OscConfig+0x28c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b40      	cmp	r3, #64	@ 0x40
 8005ea6:	d108      	bne.n	8005eba <HAL_RCC_OscConfig+0x272>
 8005ea8:	4b09      	ldr	r3, [pc, #36]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005eb0:	4a07      	ldr	r2, [pc, #28]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb6:	6053      	str	r3, [r2, #4]
 8005eb8:	e030      	b.n	8005f1c <HAL_RCC_OscConfig+0x2d4>
 8005eba:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	031b      	lsls	r3, r3, #12
 8005ec8:	4901      	ldr	r1, [pc, #4]	@ (8005ed0 <HAL_RCC_OscConfig+0x288>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
 8005ece:	e025      	b.n	8005f1c <HAL_RCC_OscConfig+0x2d4>
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	061b      	lsls	r3, r3, #24
 8005ee2:	4997      	ldr	r1, [pc, #604]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	604b      	str	r3, [r1, #4]
 8005ee8:	e018      	b.n	8005f1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eea:	4b95      	ldr	r3, [pc, #596]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a94      	ldr	r2, [pc, #592]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005ef0:	f023 0301 	bic.w	r3, r3, #1
 8005ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef6:	f7fd f861 	bl	8002fbc <HAL_GetTick>
 8005efa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005efe:	f7fd f85d 	bl	8002fbc <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e2ed      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f10:	4b8b      	ldr	r3, [pc, #556]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f0      	bne.n	8005efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a9 	beq.w	800607c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f2a:	4b85      	ldr	r3, [pc, #532]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f34:	4b82      	ldr	r3, [pc, #520]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d007      	beq.n	8005f50 <HAL_RCC_OscConfig+0x308>
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b18      	cmp	r3, #24
 8005f44:	d13a      	bne.n	8005fbc <HAL_RCC_OscConfig+0x374>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d135      	bne.n	8005fbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f50:	4b7b      	ldr	r3, [pc, #492]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_OscConfig+0x320>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	2b80      	cmp	r3, #128	@ 0x80
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e2c1      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f68:	f7fd f834 	bl	8002fd4 <HAL_GetREVID>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d817      	bhi.n	8005fa6 <HAL_RCC_OscConfig+0x35e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d108      	bne.n	8005f90 <HAL_RCC_OscConfig+0x348>
 8005f7e:	4b70      	ldr	r3, [pc, #448]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005f86:	4a6e      	ldr	r2, [pc, #440]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f8e:	e075      	b.n	800607c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f90:	4b6b      	ldr	r3, [pc, #428]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	069b      	lsls	r3, r3, #26
 8005f9e:	4968      	ldr	r1, [pc, #416]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fa4:	e06a      	b.n	800607c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fa6:	4b66      	ldr	r3, [pc, #408]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	061b      	lsls	r3, r3, #24
 8005fb4:	4962      	ldr	r1, [pc, #392]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fba:	e05f      	b.n	800607c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d042      	beq.n	800604a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fc fff4 	bl	8002fbc <HAL_GetTick>
 8005fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005fd8:	f7fc fff0 	bl	8002fbc <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e280      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fea:	4b55      	ldr	r3, [pc, #340]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ff6:	f7fc ffed 	bl	8002fd4 <HAL_GetREVID>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006000:	4293      	cmp	r3, r2
 8006002:	d817      	bhi.n	8006034 <HAL_RCC_OscConfig+0x3ec>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	2b20      	cmp	r3, #32
 800600a:	d108      	bne.n	800601e <HAL_RCC_OscConfig+0x3d6>
 800600c:	4b4c      	ldr	r3, [pc, #304]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006014:	4a4a      	ldr	r2, [pc, #296]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006016:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800601a:	6053      	str	r3, [r2, #4]
 800601c:	e02e      	b.n	800607c <HAL_RCC_OscConfig+0x434>
 800601e:	4b48      	ldr	r3, [pc, #288]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	069b      	lsls	r3, r3, #26
 800602c:	4944      	ldr	r1, [pc, #272]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 800602e:	4313      	orrs	r3, r2
 8006030:	604b      	str	r3, [r1, #4]
 8006032:	e023      	b.n	800607c <HAL_RCC_OscConfig+0x434>
 8006034:	4b42      	ldr	r3, [pc, #264]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	493f      	ldr	r1, [pc, #252]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006044:	4313      	orrs	r3, r2
 8006046:	60cb      	str	r3, [r1, #12]
 8006048:	e018      	b.n	800607c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800604a:	4b3d      	ldr	r3, [pc, #244]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a3c      	ldr	r2, [pc, #240]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fc ffb1 	bl	8002fbc <HAL_GetTick>
 800605a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800605e:	f7fc ffad 	bl	8002fbc <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e23d      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006070:	4b33      	ldr	r3, [pc, #204]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d036      	beq.n	80060f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d019      	beq.n	80060c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006090:	4b2b      	ldr	r3, [pc, #172]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006094:	4a2a      	ldr	r2, [pc, #168]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609c:	f7fc ff8e 	bl	8002fbc <HAL_GetTick>
 80060a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fc ff8a 	bl	8002fbc <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e21a      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060b6:	4b22      	ldr	r3, [pc, #136]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x45c>
 80060c2:	e018      	b.n	80060f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 80060c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d0:	f7fc ff74 	bl	8002fbc <HAL_GetTick>
 80060d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d8:	f7fc ff70 	bl	8002fbc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e200      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 80060ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d039      	beq.n	8006176 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01c      	beq.n	8006144 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a0c      	ldr	r2, [pc, #48]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006114:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006116:	f7fc ff51 	bl	8002fbc <HAL_GetTick>
 800611a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800611e:	f7fc ff4d 	bl	8002fbc <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e1dd      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006130:	4b03      	ldr	r3, [pc, #12]	@ (8006140 <HAL_RCC_OscConfig+0x4f8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x4d6>
 800613c:	e01b      	b.n	8006176 <HAL_RCC_OscConfig+0x52e>
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006144:	4b9b      	ldr	r3, [pc, #620]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a9a      	ldr	r2, [pc, #616]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800614a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800614e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006150:	f7fc ff34 	bl	8002fbc <HAL_GetTick>
 8006154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006158:	f7fc ff30 	bl	8002fbc <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e1c0      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800616a:	4b92      	ldr	r3, [pc, #584]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8081 	beq.w	8006286 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006184:	4b8c      	ldr	r3, [pc, #560]	@ (80063b8 <HAL_RCC_OscConfig+0x770>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a8b      	ldr	r2, [pc, #556]	@ (80063b8 <HAL_RCC_OscConfig+0x770>)
 800618a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800618e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006190:	f7fc ff14 	bl	8002fbc <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006198:	f7fc ff10 	bl	8002fbc <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	@ 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e1a0      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061aa:	4b83      	ldr	r3, [pc, #524]	@ (80063b8 <HAL_RCC_OscConfig+0x770>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d106      	bne.n	80061cc <HAL_RCC_OscConfig+0x584>
 80061be:	4b7d      	ldr	r3, [pc, #500]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c2:	4a7c      	ldr	r2, [pc, #496]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ca:	e02d      	b.n	8006228 <HAL_RCC_OscConfig+0x5e0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10c      	bne.n	80061ee <HAL_RCC_OscConfig+0x5a6>
 80061d4:	4b77      	ldr	r3, [pc, #476]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d8:	4a76      	ldr	r2, [pc, #472]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e0:	4b74      	ldr	r3, [pc, #464]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	4a73      	ldr	r2, [pc, #460]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061e6:	f023 0304 	bic.w	r3, r3, #4
 80061ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ec:	e01c      	b.n	8006228 <HAL_RCC_OscConfig+0x5e0>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d10c      	bne.n	8006210 <HAL_RCC_OscConfig+0x5c8>
 80061f6:	4b6f      	ldr	r3, [pc, #444]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fa:	4a6e      	ldr	r2, [pc, #440]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6713      	str	r3, [r2, #112]	@ 0x70
 8006202:	4b6c      	ldr	r3, [pc, #432]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006206:	4a6b      	ldr	r2, [pc, #428]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6713      	str	r3, [r2, #112]	@ 0x70
 800620e:	e00b      	b.n	8006228 <HAL_RCC_OscConfig+0x5e0>
 8006210:	4b68      	ldr	r3, [pc, #416]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006214:	4a67      	ldr	r2, [pc, #412]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	6713      	str	r3, [r2, #112]	@ 0x70
 800621c:	4b65      	ldr	r3, [pc, #404]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006220:	4a64      	ldr	r2, [pc, #400]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006222:	f023 0304 	bic.w	r3, r3, #4
 8006226:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fc fec4 	bl	8002fbc <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006236:	e00a      	b.n	800624e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006238:	f7fc fec0 	bl	8002fbc <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e14e      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800624e:	4b59      	ldr	r3, [pc, #356]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RCC_OscConfig+0x5f0>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625c:	f7fc feae 	bl	8002fbc <HAL_GetTick>
 8006260:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006262:	e00a      	b.n	800627a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f7fc feaa 	bl	8002fbc <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e138      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800627a:	4b4e      	ldr	r3, [pc, #312]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ee      	bne.n	8006264 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 812d 	beq.w	80064ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006290:	4b48      	ldr	r3, [pc, #288]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006298:	2b18      	cmp	r3, #24
 800629a:	f000 80bd 	beq.w	8006418 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	f040 809e 	bne.w	80063e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a8:	4b42      	ldr	r3, [pc, #264]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a41      	ldr	r2, [pc, #260]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80062ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fc fe82 	bl	8002fbc <HAL_GetTick>
 80062b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fc fe7e 	bl	8002fbc <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e10e      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ce:	4b39      	ldr	r3, [pc, #228]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062da:	4b36      	ldr	r3, [pc, #216]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80062dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062de:	4b37      	ldr	r3, [pc, #220]	@ (80063bc <HAL_RCC_OscConfig+0x774>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062ea:	0112      	lsls	r2, r2, #4
 80062ec:	430a      	orrs	r2, r1
 80062ee:	4931      	ldr	r1, [pc, #196]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	3b01      	subs	r3, #1
 80062fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006302:	3b01      	subs	r3, #1
 8006304:	025b      	lsls	r3, r3, #9
 8006306:	b29b      	uxth	r3, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	3b01      	subs	r3, #1
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	3b01      	subs	r3, #1
 800631e:	061b      	lsls	r3, r3, #24
 8006320:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006324:	4923      	ldr	r1, [pc, #140]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006326:	4313      	orrs	r3, r2
 8006328:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800632a:	4b22      	ldr	r3, [pc, #136]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	4a21      	ldr	r2, [pc, #132]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006336:	4b1f      	ldr	r3, [pc, #124]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800633a:	4b21      	ldr	r3, [pc, #132]	@ (80063c0 <HAL_RCC_OscConfig+0x778>)
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006342:	00d2      	lsls	r2, r2, #3
 8006344:	491b      	ldr	r1, [pc, #108]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	f023 020c 	bic.w	r2, r3, #12
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	4917      	ldr	r1, [pc, #92]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800635c:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	f023 0202 	bic.w	r2, r3, #2
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006368:	4912      	ldr	r1, [pc, #72]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800636a:	4313      	orrs	r3, r2
 800636c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800636e:	4b11      	ldr	r3, [pc, #68]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	4a10      	ldr	r2, [pc, #64]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800637a:	4b0e      	ldr	r3, [pc, #56]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637e:	4a0d      	ldr	r2, [pc, #52]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006386:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	4a0a      	ldr	r2, [pc, #40]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 800638c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006392:	4b08      	ldr	r3, [pc, #32]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006396:	4a07      	ldr	r2, [pc, #28]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <HAL_RCC_OscConfig+0x76c>)
 80063a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063aa:	f7fc fe07 	bl	8002fbc <HAL_GetTick>
 80063ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063b0:	e011      	b.n	80063d6 <HAL_RCC_OscConfig+0x78e>
 80063b2:	bf00      	nop
 80063b4:	58024400 	.word	0x58024400
 80063b8:	58024800 	.word	0x58024800
 80063bc:	fffffc0c 	.word	0xfffffc0c
 80063c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c4:	f7fc fdfa 	bl	8002fbc <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e08a      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063d6:	4b47      	ldr	r3, [pc, #284]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x77c>
 80063e2:	e082      	b.n	80064ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e4:	4b43      	ldr	r3, [pc, #268]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a42      	ldr	r2, [pc, #264]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fc fde4 	bl	8002fbc <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f8:	f7fc fde0 	bl	8002fbc <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e070      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800640a:	4b3a      	ldr	r3, [pc, #232]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x7b0>
 8006416:	e068      	b.n	80064ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006418:	4b36      	ldr	r3, [pc, #216]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800641e:	4b35      	ldr	r3, [pc, #212]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	2b01      	cmp	r3, #1
 800642a:	d031      	beq.n	8006490 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f003 0203 	and.w	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006436:	429a      	cmp	r2, r3
 8006438:	d12a      	bne.n	8006490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006446:	429a      	cmp	r2, r3
 8006448:	d122      	bne.n	8006490 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006456:	429a      	cmp	r2, r3
 8006458:	d11a      	bne.n	8006490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	0a5b      	lsrs	r3, r3, #9
 800645e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d111      	bne.n	8006490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d108      	bne.n	8006490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0e1b      	lsrs	r3, r3, #24
 8006482:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e02b      	b.n	80064ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006494:	4b17      	ldr	r3, [pc, #92]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 8006496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006498:	08db      	lsrs	r3, r3, #3
 800649a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800649e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d01f      	beq.n	80064ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064aa:	4b12      	ldr	r3, [pc, #72]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	4a11      	ldr	r2, [pc, #68]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064b6:	f7fc fd81 	bl	8002fbc <HAL_GetTick>
 80064ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064bc:	bf00      	nop
 80064be:	f7fc fd7d 	bl	8002fbc <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d0f9      	beq.n	80064be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064ca:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80064cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ce:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <HAL_RCC_OscConfig+0x8b0>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80064d6:	00d2      	lsls	r2, r2, #3
 80064d8:	4906      	ldr	r1, [pc, #24]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064de:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	4a04      	ldr	r2, [pc, #16]	@ (80064f4 <HAL_RCC_OscConfig+0x8ac>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3730      	adds	r7, #48	@ 0x30
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	58024400 	.word	0x58024400
 80064f8:	ffff0007 	.word	0xffff0007

080064fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e19c      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006510:	4b8a      	ldr	r3, [pc, #552]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d910      	bls.n	8006540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b87      	ldr	r3, [pc, #540]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 020f 	bic.w	r2, r3, #15
 8006526:	4985      	ldr	r1, [pc, #532]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	4313      	orrs	r3, r2
 800652c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b83      	ldr	r3, [pc, #524]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e184      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d010      	beq.n	800656e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	4b7b      	ldr	r3, [pc, #492]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006558:	429a      	cmp	r2, r3
 800655a:	d908      	bls.n	800656e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800655c:	4b78      	ldr	r3, [pc, #480]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	4975      	ldr	r1, [pc, #468]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800656a:	4313      	orrs	r3, r2
 800656c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	4b70      	ldr	r3, [pc, #448]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006586:	429a      	cmp	r2, r3
 8006588:	d908      	bls.n	800659c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800658a:	4b6d      	ldr	r3, [pc, #436]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	496a      	ldr	r1, [pc, #424]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006598:	4313      	orrs	r3, r2
 800659a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d010      	beq.n	80065ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	4b64      	ldr	r3, [pc, #400]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d908      	bls.n	80065ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065b8:	4b61      	ldr	r3, [pc, #388]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	495e      	ldr	r1, [pc, #376]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69da      	ldr	r2, [r3, #28]
 80065da:	4b59      	ldr	r3, [pc, #356]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d908      	bls.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065e6:	4b56      	ldr	r3, [pc, #344]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4953      	ldr	r1, [pc, #332]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	4b4d      	ldr	r3, [pc, #308]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	429a      	cmp	r2, r3
 8006612:	d908      	bls.n	8006626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006614:	4b4a      	ldr	r3, [pc, #296]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f023 020f 	bic.w	r2, r3, #15
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4947      	ldr	r1, [pc, #284]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006622:	4313      	orrs	r3, r2
 8006624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d055      	beq.n	80066de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006632:	4b43      	ldr	r3, [pc, #268]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4940      	ldr	r1, [pc, #256]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006640:	4313      	orrs	r3, r2
 8006642:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800664c:	4b3c      	ldr	r3, [pc, #240]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d121      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0f6      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d107      	bne.n	8006674 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006664:	4b36      	ldr	r3, [pc, #216]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d115      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0ea      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800667c:	4b30      	ldr	r3, [pc, #192]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0de      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800668c:	4b2c      	ldr	r3, [pc, #176]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0d6      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800669c:	4b28      	ldr	r3, [pc, #160]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f023 0207 	bic.w	r2, r3, #7
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4925      	ldr	r1, [pc, #148]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ae:	f7fc fc85 	bl	8002fbc <HAL_GetTick>
 80066b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b6:	f7fc fc81 	bl	8002fbc <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0be      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	429a      	cmp	r2, r3
 80066dc:	d1eb      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d010      	beq.n	800670c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	4b14      	ldr	r3, [pc, #80]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d208      	bcs.n	800670c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fa:	4b11      	ldr	r3, [pc, #68]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	490e      	ldr	r1, [pc, #56]	@ (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006708:	4313      	orrs	r3, r2
 800670a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800670c:	4b0b      	ldr	r3, [pc, #44]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d214      	bcs.n	8006744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671a:	4b08      	ldr	r3, [pc, #32]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 020f 	bic.w	r2, r3, #15
 8006722:	4906      	ldr	r1, [pc, #24]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	4313      	orrs	r3, r2
 8006728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	4b04      	ldr	r3, [pc, #16]	@ (800673c <HAL_RCC_ClockConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e086      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
 800673c:	52002000 	.word	0x52002000
 8006740:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	4b3f      	ldr	r3, [pc, #252]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800675c:	429a      	cmp	r2, r3
 800675e:	d208      	bcs.n	8006772 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006760:	4b3c      	ldr	r3, [pc, #240]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	4939      	ldr	r1, [pc, #228]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 800676e:	4313      	orrs	r3, r2
 8006770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	4b34      	ldr	r3, [pc, #208]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800678a:	429a      	cmp	r2, r3
 800678c:	d208      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800678e:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	492e      	ldr	r1, [pc, #184]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 800679c:	4313      	orrs	r3, r2
 800679e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	4b28      	ldr	r3, [pc, #160]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d208      	bcs.n	80067ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067bc:	4b25      	ldr	r3, [pc, #148]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4922      	ldr	r1, [pc, #136]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	4b1d      	ldr	r3, [pc, #116]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d208      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4917      	ldr	r1, [pc, #92]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067fc:	f000 f834 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b14      	ldr	r3, [pc, #80]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	4912      	ldr	r1, [pc, #72]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
 8006818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681a:	4b0e      	ldr	r3, [pc, #56]	@ (8006854 <HAL_RCC_ClockConfig+0x358>)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	4a0d      	ldr	r2, [pc, #52]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006824:	5cd3      	ldrb	r3, [r2, r3]
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	4a0a      	ldr	r2, [pc, #40]	@ (800685c <HAL_RCC_ClockConfig+0x360>)
 8006832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006834:	4a0a      	ldr	r2, [pc, #40]	@ (8006860 <HAL_RCC_ClockConfig+0x364>)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_RCC_ClockConfig+0x368>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fc fb72 	bl	8002f28 <HAL_InitTick>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	0800ebf8 	.word	0x0800ebf8
 800685c:	24000008 	.word	0x24000008
 8006860:	24000004 	.word	0x24000004
 8006864:	2400000c 	.word	0x2400000c

08006868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	@ 0x24
 800686c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800686e:	4bb3      	ldr	r3, [pc, #716]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006876:	2b18      	cmp	r3, #24
 8006878:	f200 8155 	bhi.w	8006b26 <HAL_RCC_GetSysClockFreq+0x2be>
 800687c:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	080068e9 	.word	0x080068e9
 8006888:	08006b27 	.word	0x08006b27
 800688c:	08006b27 	.word	0x08006b27
 8006890:	08006b27 	.word	0x08006b27
 8006894:	08006b27 	.word	0x08006b27
 8006898:	08006b27 	.word	0x08006b27
 800689c:	08006b27 	.word	0x08006b27
 80068a0:	08006b27 	.word	0x08006b27
 80068a4:	0800690f 	.word	0x0800690f
 80068a8:	08006b27 	.word	0x08006b27
 80068ac:	08006b27 	.word	0x08006b27
 80068b0:	08006b27 	.word	0x08006b27
 80068b4:	08006b27 	.word	0x08006b27
 80068b8:	08006b27 	.word	0x08006b27
 80068bc:	08006b27 	.word	0x08006b27
 80068c0:	08006b27 	.word	0x08006b27
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006b27 	.word	0x08006b27
 80068cc:	08006b27 	.word	0x08006b27
 80068d0:	08006b27 	.word	0x08006b27
 80068d4:	08006b27 	.word	0x08006b27
 80068d8:	08006b27 	.word	0x08006b27
 80068dc:	08006b27 	.word	0x08006b27
 80068e0:	08006b27 	.word	0x08006b27
 80068e4:	0800691b 	.word	0x0800691b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	4b94      	ldr	r3, [pc, #592]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f4:	4b91      	ldr	r3, [pc, #580]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a90      	ldr	r2, [pc, #576]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006906:	e111      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006908:	4b8d      	ldr	r3, [pc, #564]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800690a:	61bb      	str	r3, [r7, #24]
      break;
 800690c:	e10e      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800690e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006910:	61bb      	str	r3, [r7, #24]
      break;
 8006912:	e10b      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006914:	4b8c      	ldr	r3, [pc, #560]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006916:	61bb      	str	r3, [r7, #24]
      break;
 8006918:	e108      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691a:	4b88      	ldr	r3, [pc, #544]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006924:	4b85      	ldr	r3, [pc, #532]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800692e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006930:	4b82      	ldr	r3, [pc, #520]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800693a:	4b80      	ldr	r3, [pc, #512]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 80e1 	beq.w	8006b20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f000 8083 	beq.w	8006a6c <HAL_RCC_GetSysClockFreq+0x204>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b02      	cmp	r3, #2
 800696a:	f200 80a1 	bhi.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x248>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x114>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d056      	beq.n	8006a28 <HAL_RCC_GetSysClockFreq+0x1c0>
 800697a:	e099      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697c:	4b6f      	ldr	r3, [pc, #444]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02d      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006988:	4b6c      	ldr	r3, [pc, #432]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a6b      	ldr	r2, [pc, #428]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b62      	ldr	r3, [pc, #392]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069e2:	e087      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b51      	ldr	r3, [pc, #324]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a26:	e065      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b40      	ldr	r3, [pc, #256]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a6a:	e043      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006b58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a92:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aae:	e021      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006af2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006af4:	4b11      	ldr	r3, [pc, #68]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afe:	3301      	adds	r3, #1
 8006b00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b18:	ee17 3a90 	vmov	r3, s15
 8006b1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b1e:	e005      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
      break;
 8006b24:	e002      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b26:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b28:	61bb      	str	r3, [r7, #24]
      break;
 8006b2a:	bf00      	nop
  }

  return sysclockfreq;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	03d09000 	.word	0x03d09000
 8006b44:	003d0900 	.word	0x003d0900
 8006b48:	016e3600 	.word	0x016e3600
 8006b4c:	46000000 	.word	0x46000000
 8006b50:	4c742400 	.word	0x4c742400
 8006b54:	4a742400 	.word	0x4a742400
 8006b58:	4bb71b00 	.word	0x4bb71b00

08006b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b62:	f7ff fe81 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <HAL_RCC_GetHCLKFreq+0x50>)
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	0a1b      	lsrs	r3, r3, #8
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	490f      	ldr	r1, [pc, #60]	@ (8006bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b74:	5ccb      	ldrb	r3, [r1, r3]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <HAL_RCC_GetHCLKFreq+0x50>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b8a:	5cd3      	ldrb	r3, [r2, r3]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	4a07      	ldr	r2, [pc, #28]	@ (8006bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b9a:	4a07      	ldr	r2, [pc, #28]	@ (8006bb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	0800ebf8 	.word	0x0800ebf8
 8006bb4:	24000008 	.word	0x24000008
 8006bb8:	24000004 	.word	0x24000004

08006bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bc0:	f7ff ffcc 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	4904      	ldr	r1, [pc, #16]	@ (8006be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	58024400 	.word	0x58024400
 8006be4:	0800ebf8 	.word	0x0800ebf8

08006be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bec:	f7ff ffb6 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	4904      	ldr	r1, [pc, #16]	@ (8006c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bfe:	5ccb      	ldrb	r3, [r1, r3]
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	0800ebf8 	.word	0x0800ebf8

08006c14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c18:	b0ca      	sub	sp, #296	@ 0x128
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c26:	2300      	movs	r3, #0
 8006c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006c38:	2500      	movs	r5, #0
 8006c3a:	ea54 0305 	orrs.w	r3, r4, r5
 8006c3e:	d049      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c4a:	d02f      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c50:	d828      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c56:	d01a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c5c:	d822      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c66:	d007      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c68:	e01c      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c6a:	4bb8      	ldr	r3, [pc, #736]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	4ab7      	ldr	r2, [pc, #732]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c76:	e01a      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	2102      	movs	r1, #2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 fc8f 	bl	80085a4 <RCCEx_PLL2_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c8c:	e00f      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	3328      	adds	r3, #40	@ 0x28
 8006c94:	2102      	movs	r1, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fd36 	bl	8008708 <RCCEx_PLL3_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ca2:	e004      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006caa:	e000      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cb6:	4ba5      	ldr	r3, [pc, #660]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc4:	4aa1      	ldr	r2, [pc, #644]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cca:	e003      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ce0:	f04f 0900 	mov.w	r9, #0
 8006ce4:	ea58 0309 	orrs.w	r3, r8, r9
 8006ce8:	d047      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d82a      	bhi.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d11 	.word	0x08006d11
 8006d00:	08006d1f 	.word	0x08006d1f
 8006d04:	08006d35 	.word	0x08006d35
 8006d08:	08006d53 	.word	0x08006d53
 8006d0c:	08006d53 	.word	0x08006d53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d10:	4b8e      	ldr	r3, [pc, #568]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d14:	4a8d      	ldr	r2, [pc, #564]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d1c:	e01a      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	3308      	adds	r3, #8
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fc3c 	bl	80085a4 <RCCEx_PLL2_Config>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d32:	e00f      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d38:	3328      	adds	r3, #40	@ 0x28
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fce3 	bl	8008708 <RCCEx_PLL3_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d48:	e004      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d50:	e000      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d60:	f023 0107 	bic.w	r1, r3, #7
 8006d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6a:	4a78      	ldr	r2, [pc, #480]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d70:	e003      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006d86:	f04f 0b00 	mov.w	fp, #0
 8006d8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d8e:	d04c      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d9a:	d030      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da0:	d829      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006da4:	d02d      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006da8:	d825      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006daa:	2b80      	cmp	r3, #128	@ 0x80
 8006dac:	d018      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006dae:	2b80      	cmp	r3, #128	@ 0x80
 8006db0:	d821      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006db6:	2b40      	cmp	r3, #64	@ 0x40
 8006db8:	d007      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006dba:	e01c      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dbc:	4b63      	ldr	r3, [pc, #396]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	4a62      	ldr	r2, [pc, #392]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006dc8:	e01c      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	3308      	adds	r3, #8
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fbe6 	bl	80085a4 <RCCEx_PLL2_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006dde:	e011      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de4:	3328      	adds	r3, #40	@ 0x28
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fc8d 	bl	8008708 <RCCEx_PLL3_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e20:	e003      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006e36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006e40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006e44:	460b      	mov	r3, r1
 8006e46:	4313      	orrs	r3, r2
 8006e48:	d053      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e56:	d035      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e5c:	d82e      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e62:	d031      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e68:	d828      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e6e:	d01a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e74:	d822      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e7e:	d007      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006e80:	e01c      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e82:	4b32      	ldr	r3, [pc, #200]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	4a31      	ldr	r2, [pc, #196]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e8e:	e01c      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e94:	3308      	adds	r3, #8
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fb83 	bl	80085a4 <RCCEx_PLL2_Config>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e011      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eaa:	3328      	adds	r3, #40	@ 0x28
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fc2a 	bl	8008708 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eba:	e006      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec2:	e002      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ee8:	e003      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006efe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f02:	2300      	movs	r3, #0
 8006f04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006f08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	d056      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f1e:	d038      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f24:	d831      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f2a:	d034      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006f2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f30:	d82b      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f36:	d01d      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f3c:	d825      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006f42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f46:	d00a      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f48:	e01f      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f50:	4ba2      	ldr	r3, [pc, #648]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f54:	4aa1      	ldr	r2, [pc, #644]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f5c:	e01c      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f62:	3308      	adds	r3, #8
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fb1c 	bl	80085a4 <RCCEx_PLL2_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f72:	e011      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f78:	3328      	adds	r3, #40	@ 0x28
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 fbc3 	bl	8008708 <RCCEx_PLL3_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f88:	e006      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f90:	e002      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006f92:	bf00      	nop
 8006f94:	e000      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006fa0:	4b8e      	ldr	r3, [pc, #568]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fb0:	4a8a      	ldr	r2, [pc, #552]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb6:	e003      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d03a      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe6:	2b30      	cmp	r3, #48	@ 0x30
 8006fe8:	d01f      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006fea:	2b30      	cmp	r3, #48	@ 0x30
 8006fec:	d819      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d00c      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d815      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d019      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d111      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffe:	4b77      	ldr	r3, [pc, #476]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007002:	4a76      	ldr	r2, [pc, #472]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800700a:	e011      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007010:	3308      	adds	r3, #8
 8007012:	2102      	movs	r1, #2
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fac5 	bl	80085a4 <RCCEx_PLL2_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007020:	e006      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007028:	e002      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800702e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007038:	4b68      	ldr	r3, [pc, #416]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800703c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007046:	4a65      	ldr	r2, [pc, #404]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007048:	430b      	orrs	r3, r1
 800704a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800704c:	e003      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007062:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007066:	2300      	movs	r3, #0
 8007068:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800706c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007070:	460b      	mov	r3, r1
 8007072:	4313      	orrs	r3, r2
 8007074:	d051      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800707c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007080:	d035      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007086:	d82e      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007088:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800708c:	d031      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800708e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007092:	d828      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007098:	d01a      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800709a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800709e:	d822      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a8:	d007      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80070aa:	e01c      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ac:	4b4b      	ldr	r3, [pc, #300]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4a4a      	ldr	r2, [pc, #296]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070b8:	e01c      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	3308      	adds	r3, #8
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fa6e 	bl	80085a4 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070ce:	e011      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d4:	3328      	adds	r3, #40	@ 0x28
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fb15 	bl	8008708 <RCCEx_PLL3_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070e4:	e006      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ec:	e002      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80070ee:	bf00      	nop
 80070f0:	e000      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80070f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070fc:	4b37      	ldr	r3, [pc, #220]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007100:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800710a:	4a34      	ldr	r2, [pc, #208]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800710c:	430b      	orrs	r3, r1
 800710e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007110:	e003      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007126:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800712a:	2300      	movs	r3, #0
 800712c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007130:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007134:	460b      	mov	r3, r1
 8007136:	4313      	orrs	r3, r2
 8007138:	d056      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007144:	d033      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007146:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800714a:	d82c      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800714c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007150:	d02f      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007156:	d826      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007158:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800715c:	d02b      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800715e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007162:	d820      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007168:	d012      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800716a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716e:	d81a      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d022      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d115      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	3308      	adds	r3, #8
 8007180:	2101      	movs	r1, #1
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fa0e 	bl	80085a4 <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800718e:	e015      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007194:	3328      	adds	r3, #40	@ 0x28
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fab5 	bl	8008708 <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071a4:	e00a      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071ae:	bf00      	nop
 80071b0:	e004      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071b2:	bf00      	nop
 80071b4:	e002      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d2:	4a02      	ldr	r2, [pc, #8]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80071da:	bf00      	nop
 80071dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80071f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071f8:	2300      	movs	r3, #0
 80071fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007202:	460b      	mov	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	d055      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007214:	d033      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800721a:	d82c      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800721c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007220:	d02f      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007226:	d826      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007228:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800722c:	d02b      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800722e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007232:	d820      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007238:	d012      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800723a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723e:	d81a      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007240:	2b00      	cmp	r3, #0
 8007242:	d022      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007248:	d115      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	3308      	adds	r3, #8
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f001 f9a6 	bl	80085a4 <RCCEx_PLL2_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800725e:	e015      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007264:	3328      	adds	r3, #40	@ 0x28
 8007266:	2101      	movs	r1, #1
 8007268:	4618      	mov	r0, r3
 800726a:	f001 fa4d 	bl	8008708 <RCCEx_PLL3_Config>
 800726e:	4603      	mov	r3, r0
 8007270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007274:	e00a      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800727c:	e006      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800727e:	bf00      	nop
 8007280:	e004      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007282:	bf00      	nop
 8007284:	e002      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800728a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10b      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007294:	4ba3      	ldr	r3, [pc, #652]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072a4:	4a9f      	ldr	r2, [pc, #636]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a6:	430b      	orrs	r3, r1
 80072a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80072aa:	e003      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80072c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072c4:	2300      	movs	r3, #0
 80072c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072ce:	460b      	mov	r3, r1
 80072d0:	4313      	orrs	r3, r2
 80072d2:	d037      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072de:	d00e      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80072e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e4:	d816      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d018      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80072ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ee:	d111      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	4a8b      	ldr	r2, [pc, #556]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80072fc:	e00f      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007302:	3308      	adds	r3, #8
 8007304:	2101      	movs	r1, #1
 8007306:	4618      	mov	r0, r3
 8007308:	f001 f94c 	bl	80085a4 <RCCEx_PLL2_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007312:	e004      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800731c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007326:	4b7f      	ldr	r3, [pc, #508]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800732e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007334:	4a7b      	ldr	r2, [pc, #492]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007336:	430b      	orrs	r3, r1
 8007338:	6513      	str	r3, [r2, #80]	@ 0x50
 800733a:	e003      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800735a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d039      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800736a:	2b03      	cmp	r3, #3
 800736c:	d81c      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800736e:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073b1 	.word	0x080073b1
 8007378:	08007385 	.word	0x08007385
 800737c:	08007393 	.word	0x08007393
 8007380:	080073b1 	.word	0x080073b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007384:	4b67      	ldr	r3, [pc, #412]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	4a66      	ldr	r2, [pc, #408]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800738e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007390:	e00f      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	3308      	adds	r3, #8
 8007398:	2102      	movs	r1, #2
 800739a:	4618      	mov	r0, r3
 800739c:	f001 f902 	bl	80085a4 <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073a6:	e004      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ae:	e000      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80073b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073ba:	4b5a      	ldr	r3, [pc, #360]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073be:	f023 0103 	bic.w	r1, r3, #3
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c8:	4a56      	ldr	r2, [pc, #344]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ca:	430b      	orrs	r3, r1
 80073cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073ce:	e003      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80073e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073e8:	2300      	movs	r3, #0
 80073ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80073f2:	460b      	mov	r3, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f000 809f 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007406:	f7fb fdd9 	bl	8002fbc <HAL_GetTick>
 800740a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800740e:	e00b      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007410:	f7fb fdd4 	bl	8002fbc <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b64      	cmp	r3, #100	@ 0x64
 800741e:	d903      	bls.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007426:	e005      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007428:	4b3f      	ldr	r3, [pc, #252]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0ed      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007438:	2b00      	cmp	r3, #0
 800743a:	d179      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800743c:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007448:	4053      	eors	r3, r2
 800744a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007452:	4b34      	ldr	r3, [pc, #208]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800745a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800745e:	4b31      	ldr	r3, [pc, #196]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007462:	4a30      	ldr	r2, [pc, #192]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007468:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800746a:	4b2e      	ldr	r3, [pc, #184]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	4a2d      	ldr	r2, [pc, #180]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007474:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007476:	4a2b      	ldr	r2, [pc, #172]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800747c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800748a:	d118      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fb fd96 	bl	8002fbc <HAL_GetTick>
 8007490:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007494:	e00d      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fb fd91 	bl	8002fbc <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074a0:	1ad2      	subs	r2, r2, r3
 80074a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80074b0:	e005      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0eb      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d129      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074d6:	d10e      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80074d8:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80074e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074e8:	091a      	lsrs	r2, r3, #4
 80074ea:	4b10      	ldr	r3, [pc, #64]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6113      	str	r3, [r2, #16]
 80074f4:	e005      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80074f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007500:	6113      	str	r3, [r2, #16]
 8007502:	4b08      	ldr	r3, [pc, #32]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007504:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800750e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007512:	4a04      	ldr	r2, [pc, #16]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007514:	430b      	orrs	r3, r1
 8007516:	6713      	str	r3, [r2, #112]	@ 0x70
 8007518:	e00e      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800751a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007522:	e009      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007524:	58024400 	.word	0x58024400
 8007528:	58024800 	.word	0x58024800
 800752c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f002 0301 	and.w	r3, r2, #1
 8007544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007548:	2300      	movs	r3, #0
 800754a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800754e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007552:	460b      	mov	r3, r1
 8007554:	4313      	orrs	r3, r2
 8007556:	f000 8089 	beq.w	800766c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007560:	2b28      	cmp	r3, #40	@ 0x28
 8007562:	d86b      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007564:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	08007645 	.word	0x08007645
 8007570:	0800763d 	.word	0x0800763d
 8007574:	0800763d 	.word	0x0800763d
 8007578:	0800763d 	.word	0x0800763d
 800757c:	0800763d 	.word	0x0800763d
 8007580:	0800763d 	.word	0x0800763d
 8007584:	0800763d 	.word	0x0800763d
 8007588:	0800763d 	.word	0x0800763d
 800758c:	08007611 	.word	0x08007611
 8007590:	0800763d 	.word	0x0800763d
 8007594:	0800763d 	.word	0x0800763d
 8007598:	0800763d 	.word	0x0800763d
 800759c:	0800763d 	.word	0x0800763d
 80075a0:	0800763d 	.word	0x0800763d
 80075a4:	0800763d 	.word	0x0800763d
 80075a8:	0800763d 	.word	0x0800763d
 80075ac:	08007627 	.word	0x08007627
 80075b0:	0800763d 	.word	0x0800763d
 80075b4:	0800763d 	.word	0x0800763d
 80075b8:	0800763d 	.word	0x0800763d
 80075bc:	0800763d 	.word	0x0800763d
 80075c0:	0800763d 	.word	0x0800763d
 80075c4:	0800763d 	.word	0x0800763d
 80075c8:	0800763d 	.word	0x0800763d
 80075cc:	08007645 	.word	0x08007645
 80075d0:	0800763d 	.word	0x0800763d
 80075d4:	0800763d 	.word	0x0800763d
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	0800763d 	.word	0x0800763d
 80075e0:	0800763d 	.word	0x0800763d
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	08007645 	.word	0x08007645
 80075f0:	0800763d 	.word	0x0800763d
 80075f4:	0800763d 	.word	0x0800763d
 80075f8:	0800763d 	.word	0x0800763d
 80075fc:	0800763d 	.word	0x0800763d
 8007600:	0800763d 	.word	0x0800763d
 8007604:	0800763d 	.word	0x0800763d
 8007608:	0800763d 	.word	0x0800763d
 800760c:	08007645 	.word	0x08007645
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	3308      	adds	r3, #8
 8007616:	2101      	movs	r1, #1
 8007618:	4618      	mov	r0, r3
 800761a:	f000 ffc3 	bl	80085a4 <RCCEx_PLL2_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007624:	e00f      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	3328      	adds	r3, #40	@ 0x28
 800762c:	2101      	movs	r1, #1
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f86a 	bl	8008708 <RCCEx_PLL3_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800763a:	e004      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007642:	e000      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800764e:	4bbf      	ldr	r3, [pc, #764]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007652:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800765c:	4abb      	ldr	r2, [pc, #748]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800765e:	430b      	orrs	r3, r1
 8007660:	6553      	str	r3, [r2, #84]	@ 0x54
 8007662:	e003      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f002 0302 	and.w	r3, r2, #2
 8007678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800767c:	2300      	movs	r3, #0
 800767e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007682:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	d041      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007692:	2b05      	cmp	r3, #5
 8007694:	d824      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076e9 	.word	0x080076e9
 80076a0:	080076b5 	.word	0x080076b5
 80076a4:	080076cb 	.word	0x080076cb
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	3308      	adds	r3, #8
 80076ba:	2101      	movs	r1, #1
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 ff71 	bl	80085a4 <RCCEx_PLL2_Config>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076c8:	e00f      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	3328      	adds	r3, #40	@ 0x28
 80076d0:	2101      	movs	r1, #1
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f818 	bl	8008708 <RCCEx_PLL3_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076de:	e004      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076e6:	e000      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80076e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076f2:	4b96      	ldr	r3, [pc, #600]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f6:	f023 0107 	bic.w	r1, r3, #7
 80076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007700:	4a92      	ldr	r2, [pc, #584]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007702:	430b      	orrs	r3, r1
 8007704:	6553      	str	r3, [r2, #84]	@ 0x54
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f002 0304 	and.w	r3, r2, #4
 800771c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007726:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d044      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007738:	2b05      	cmp	r3, #5
 800773a:	d825      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007791 	.word	0x08007791
 8007748:	0800775d 	.word	0x0800775d
 800774c:	08007773 	.word	0x08007773
 8007750:	08007791 	.word	0x08007791
 8007754:	08007791 	.word	0x08007791
 8007758:	08007791 	.word	0x08007791
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	3308      	adds	r3, #8
 8007762:	2101      	movs	r1, #1
 8007764:	4618      	mov	r0, r3
 8007766:	f000 ff1d 	bl	80085a4 <RCCEx_PLL2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007770:	e00f      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007776:	3328      	adds	r3, #40	@ 0x28
 8007778:	2101      	movs	r1, #1
 800777a:	4618      	mov	r0, r3
 800777c:	f000 ffc4 	bl	8008708 <RCCEx_PLL3_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007786:	e004      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800778e:	e000      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800779a:	4b6c      	ldr	r3, [pc, #432]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800779c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779e:	f023 0107 	bic.w	r1, r3, #7
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077aa:	4a68      	ldr	r2, [pc, #416]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077ac:	430b      	orrs	r3, r1
 80077ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80077b0:	e003      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f002 0320 	and.w	r3, r2, #32
 80077c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077ca:	2300      	movs	r3, #0
 80077cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077d4:	460b      	mov	r3, r1
 80077d6:	4313      	orrs	r3, r2
 80077d8:	d055      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077e6:	d033      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80077e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077ec:	d82c      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f2:	d02f      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f8:	d826      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077fe:	d02b      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007800:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007804:	d820      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800780a:	d012      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800780c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007810:	d81a      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d022      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800781a:	d115      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	3308      	adds	r3, #8
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f000 febd 	bl	80085a4 <RCCEx_PLL2_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007830:	e015      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	3328      	adds	r3, #40	@ 0x28
 8007838:	2102      	movs	r1, #2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 ff64 	bl	8008708 <RCCEx_PLL3_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007846:	e00a      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800784e:	e006      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007850:	bf00      	nop
 8007852:	e004      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007854:	bf00      	nop
 8007856:	e002      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007858:	bf00      	nop
 800785a:	e000      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800785c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007866:	4b39      	ldr	r3, [pc, #228]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800786e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007876:	4a35      	ldr	r2, [pc, #212]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007878:	430b      	orrs	r3, r1
 800787a:	6553      	str	r3, [r2, #84]	@ 0x54
 800787c:	e003      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007896:	2300      	movs	r3, #0
 8007898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800789c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4313      	orrs	r3, r2
 80078a4:	d058      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80078b2:	d033      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80078b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80078b8:	d82c      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078be:	d02f      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078c4:	d826      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078ca:	d02b      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80078cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078d0:	d820      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d6:	d012      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80078d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078dc:	d81a      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d022      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80078e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e6:	d115      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ec:	3308      	adds	r3, #8
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fe57 	bl	80085a4 <RCCEx_PLL2_Config>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80078fc:	e015      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007902:	3328      	adds	r3, #40	@ 0x28
 8007904:	2102      	movs	r1, #2
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fefe 	bl	8008708 <RCCEx_PLL3_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007912:	e00a      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800791a:	e006      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800791c:	bf00      	nop
 800791e:	e004      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007920:	bf00      	nop
 8007922:	e002      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007924:	bf00      	nop
 8007926:	e000      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10e      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007932:	4b06      	ldr	r3, [pc, #24]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007936:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007942:	4a02      	ldr	r2, [pc, #8]	@ (800794c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007944:	430b      	orrs	r3, r1
 8007946:	6593      	str	r3, [r2, #88]	@ 0x58
 8007948:	e006      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007968:	2300      	movs	r3, #0
 800796a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800796e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007972:	460b      	mov	r3, r1
 8007974:	4313      	orrs	r3, r2
 8007976:	d055      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007980:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007984:	d033      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007986:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800798a:	d82c      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800798c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007990:	d02f      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007996:	d826      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007998:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800799c:	d02b      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800799e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80079a2:	d820      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079a8:	d012      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80079aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ae:	d81a      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d022      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80079b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b8:	d115      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	3308      	adds	r3, #8
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fdee 	bl	80085a4 <RCCEx_PLL2_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079ce:	e015      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d4:	3328      	adds	r3, #40	@ 0x28
 80079d6:	2102      	movs	r1, #2
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fe95 	bl	8008708 <RCCEx_PLL3_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079e4:	e00a      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ec:	e006      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079ee:	bf00      	nop
 80079f0:	e004      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079f2:	bf00      	nop
 80079f4:	e002      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10b      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a04:	4ba1      	ldr	r3, [pc, #644]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a08:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a14:	4a9d      	ldr	r2, [pc, #628]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a16:	430b      	orrs	r3, r1
 8007a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f002 0308 	and.w	r3, r2, #8
 8007a30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d01e      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a50:	d10c      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	3328      	adds	r3, #40	@ 0x28
 8007a58:	2102      	movs	r1, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fe54 	bl	8008708 <RCCEx_PLL3_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a6c:	4b87      	ldr	r3, [pc, #540]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7c:	4a83      	ldr	r2, [pc, #524]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f002 0310 	and.w	r3, r2, #16
 8007a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a92:	2300      	movs	r3, #0
 8007a94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d01e      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aae:	d10c      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab4:	3328      	adds	r3, #40	@ 0x28
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fe25 	bl	8008708 <RCCEx_PLL3_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007aca:	4b70      	ldr	r3, [pc, #448]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ace:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ada:	4a6c      	ldr	r2, [pc, #432]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007aec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007af0:	2300      	movs	r3, #0
 8007af2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007af6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007afa:	460b      	mov	r3, r1
 8007afc:	4313      	orrs	r3, r2
 8007afe:	d03e      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b0c:	d022      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b12:	d81b      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b1c:	d00b      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007b1e:	e015      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b24:	3308      	adds	r3, #8
 8007b26:	2100      	movs	r1, #0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fd3b 	bl	80085a4 <RCCEx_PLL2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b34:	e00f      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	3328      	adds	r3, #40	@ 0x28
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fde2 	bl	8008708 <RCCEx_PLL3_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b4a:	e004      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b52:	e000      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b6e:	4a47      	ldr	r2, [pc, #284]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b74:	e003      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b94:	460b      	mov	r3, r1
 8007b96:	4313      	orrs	r3, r2
 8007b98:	d03b      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ba6:	d01f      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007ba8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bac:	d818      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb2:	d003      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007bb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bb8:	d007      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007bba:	e011      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bbc:	4b33      	ldr	r3, [pc, #204]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	4a32      	ldr	r2, [pc, #200]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007bc8:	e00f      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bce:	3328      	adds	r3, #40	@ 0x28
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fd98 	bl	8008708 <RCCEx_PLL3_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007bde:	e004      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007be6:	e000      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bf2:	4b26      	ldr	r3, [pc, #152]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c02:	4a22      	ldr	r2, [pc, #136]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c08:	e003      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007c1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c20:	2300      	movs	r3, #0
 8007c22:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d034      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c3c:	d007      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007c3e:	e011      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c40:	4b12      	ldr	r3, [pc, #72]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	4a11      	ldr	r2, [pc, #68]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c4c:	e00e      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c52:	3308      	adds	r3, #8
 8007c54:	2102      	movs	r1, #2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fca4 	bl	80085a4 <RCCEx_PLL2_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c62:	e003      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10d      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c74:	4b05      	ldr	r3, [pc, #20]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c82:	4a02      	ldr	r2, [pc, #8]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c84:	430b      	orrs	r3, r1
 8007c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c88:	e006      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007caa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d00c      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	3328      	adds	r3, #40	@ 0x28
 8007cba:	2102      	movs	r1, #2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fd23 	bl	8008708 <RCCEx_PLL3_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007cda:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cdc:	2300      	movs	r3, #0
 8007cde:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ce0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	d038      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cf6:	d018      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cfc:	d811      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d02:	d014      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d08:	d80b      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d011      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d12:	d106      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d14:	4bc3      	ldr	r3, [pc, #780]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	4ac2      	ldr	r2, [pc, #776]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007d20:	e008      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d28:	e004      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d2a:	bf00      	nop
 8007d2c:	e002      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10b      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d3c:	4bb9      	ldr	r3, [pc, #740]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4c:	4ab5      	ldr	r2, [pc, #724]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d52:	e003      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007d68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d72:	460b      	mov	r3, r1
 8007d74:	4313      	orrs	r3, r2
 8007d76:	d009      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d78:	4baa      	ldr	r3, [pc, #680]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d86:	4aa7      	ldr	r2, [pc, #668]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007d98:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007da2:	460b      	mov	r3, r1
 8007da4:	4313      	orrs	r3, r2
 8007da6:	d00a      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007da8:	4b9e      	ldr	r3, [pc, #632]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007db8:	4a9a      	ldr	r2, [pc, #616]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dcc:	2300      	movs	r3, #0
 8007dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dd0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d009      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dda:	4b92      	ldr	r3, [pc, #584]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dde:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de8:	4a8e      	ldr	r2, [pc, #568]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007dfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e04:	460b      	mov	r3, r1
 8007e06:	4313      	orrs	r3, r2
 8007e08:	d00e      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e0a:	4b86      	ldr	r3, [pc, #536]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	4a85      	ldr	r2, [pc, #532]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e14:	6113      	str	r3, [r2, #16]
 8007e16:	4b83      	ldr	r3, [pc, #524]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e18:	6919      	ldr	r1, [r3, #16]
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e22:	4a80      	ldr	r2, [pc, #512]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e36:	2300      	movs	r3, #0
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d009      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e44:	4b77      	ldr	r3, [pc, #476]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e48:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	4a74      	ldr	r2, [pc, #464]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e66:	2300      	movs	r3, #0
 8007e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4313      	orrs	r3, r2
 8007e72:	d00a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e74:	4b6b      	ldr	r3, [pc, #428]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e78:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e84:	4a67      	ldr	r2, [pc, #412]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	2100      	movs	r1, #0
 8007e94:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	d011      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	3308      	adds	r3, #8
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fb78 	bl	80085a4 <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	6239      	str	r1, [r7, #32]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007edc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	d011      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	3308      	adds	r3, #8
 8007eec:	2101      	movs	r1, #1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fb58 	bl	80085a4 <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	2100      	movs	r1, #0
 8007f14:	61b9      	str	r1, [r7, #24]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f20:	460b      	mov	r3, r1
 8007f22:	4313      	orrs	r3, r2
 8007f24:	d011      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	2102      	movs	r1, #2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fb38 	bl	80085a4 <RCCEx_PLL2_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	2100      	movs	r1, #0
 8007f54:	6139      	str	r1, [r7, #16]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f60:	460b      	mov	r3, r1
 8007f62:	4313      	orrs	r3, r2
 8007f64:	d011      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	3328      	adds	r3, #40	@ 0x28
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fbca 	bl	8008708 <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	2100      	movs	r1, #0
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d011      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	3328      	adds	r3, #40	@ 0x28
 8007fac:	2101      	movs	r1, #1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fbaa 	bl	8008708 <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	d011      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	3328      	adds	r3, #40	@ 0x28
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fb8a 	bl	8008708 <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800800a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e000      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
}
 8008018:	4618      	mov	r0, r3
 800801a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008024:	58024400 	.word	0x58024400

08008028 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800802c:	f7fe fd96 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8008030:	4602      	mov	r2, r0
 8008032:	4b06      	ldr	r3, [pc, #24]	@ (800804c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	4904      	ldr	r1, [pc, #16]	@ (8008050 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800803e:	5ccb      	ldrb	r3, [r1, r3]
 8008040:	f003 031f 	and.w	r3, r3, #31
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008048:	4618      	mov	r0, r3
 800804a:	bd80      	pop	{r7, pc}
 800804c:	58024400 	.word	0x58024400
 8008050:	0800ebf8 	.word	0x0800ebf8

08008054 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	@ 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800805c:	4ba1      	ldr	r3, [pc, #644]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008066:	4b9f      	ldr	r3, [pc, #636]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	0b1b      	lsrs	r3, r3, #12
 800806c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008070:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008072:	4b9c      	ldr	r3, [pc, #624]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800807e:	4b99      	ldr	r3, [pc, #612]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008082:	08db      	lsrs	r3, r3, #3
 8008084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	fb02 f303 	mul.w	r3, r2, r3
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8111 	beq.w	80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f000 8083 	beq.w	80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	f200 80a1 	bhi.w	80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d056      	beq.n	800816c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080be:	e099      	b.n	80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c0:	4b88      	ldr	r3, [pc, #544]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02d      	beq.n	8008128 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080cc:	4b85      	ldr	r3, [pc, #532]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	08db      	lsrs	r3, r3, #3
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	4a84      	ldr	r2, [pc, #528]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
 80080dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f6:	4b7b      	ldr	r3, [pc, #492]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008106:	ed97 6a03 	vldr	s12, [r7, #12]
 800810a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800810e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800811a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800811e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008126:	e087      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008132:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813a:	4b6a      	ldr	r3, [pc, #424]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814a:	ed97 6a03 	vldr	s12, [r7, #12]
 800814e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800815e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800816a:	e065      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800817a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817e:	4b59      	ldr	r3, [pc, #356]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008192:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ae:	e043      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c2:	4b48      	ldr	r3, [pc, #288]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f2:	e021      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008206:	4b37      	ldr	r3, [pc, #220]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008216:	ed97 6a03 	vldr	s12, [r7, #12]
 800821a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800821e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800822a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008236:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008238:	4b2a      	ldr	r3, [pc, #168]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823c:	0a5b      	lsrs	r3, r3, #9
 800823e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800824e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008252:	edd7 6a07 	vldr	s13, [r7, #28]
 8008256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825e:	ee17 2a90 	vmov	r2, s15
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008266:	4b1f      	ldr	r3, [pc, #124]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	0c1b      	lsrs	r3, r3, #16
 800826c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800827c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008280:	edd7 6a07 	vldr	s13, [r7, #28]
 8008284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800828c:	ee17 2a90 	vmov	r2, s15
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008294:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	0e1b      	lsrs	r3, r3, #24
 800829a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ba:	ee17 2a90 	vmov	r2, s15
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082c2:	e008      	b.n	80082d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	@ 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	46000000 	.word	0x46000000
 80082f0:	4c742400 	.word	0x4c742400
 80082f4:	4a742400 	.word	0x4a742400
 80082f8:	4bb71b00 	.word	0x4bb71b00

080082fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	@ 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008304:	4ba1      	ldr	r3, [pc, #644]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800830e:	4b9f      	ldr	r3, [pc, #636]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	0d1b      	lsrs	r3, r3, #20
 8008314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008318:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800831a:	4b9c      	ldr	r3, [pc, #624]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008326:	4b99      	ldr	r3, [pc, #612]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832a:	08db      	lsrs	r3, r3, #3
 800832c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8111 	beq.w	800856c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b02      	cmp	r3, #2
 800834e:	f000 8083 	beq.w	8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b02      	cmp	r3, #2
 8008356:	f200 80a1 	bhi.w	800849c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d056      	beq.n	8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008366:	e099      	b.n	800849c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008368:	4b88      	ldr	r3, [pc, #544]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	d02d      	beq.n	80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008374:	4b85      	ldr	r3, [pc, #532]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	08db      	lsrs	r3, r3, #3
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	4a84      	ldr	r2, [pc, #528]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008380:	fa22 f303 	lsr.w	r3, r2, r3
 8008384:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839e:	4b7b      	ldr	r3, [pc, #492]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083ce:	e087      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b6a      	ldr	r3, [pc, #424]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008412:	e065      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008426:	4b59      	ldr	r3, [pc, #356]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008436:	ed97 6a03 	vldr	s12, [r7, #12]
 800843a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800843e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008456:	e043      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b48      	ldr	r3, [pc, #288]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	ed97 6a03 	vldr	s12, [r7, #12]
 800847e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800849a:	e021      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ae:	4b37      	ldr	r3, [pc, #220]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084be:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084e0:	4b2a      	ldr	r3, [pc, #168]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e4:	0a5b      	lsrs	r3, r3, #9
 80084e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008506:	ee17 2a90 	vmov	r2, s15
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800850e:	4b1f      	ldr	r3, [pc, #124]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	0c1b      	lsrs	r3, r3, #16
 8008514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008528:	edd7 6a07 	vldr	s13, [r7, #28]
 800852c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008534:	ee17 2a90 	vmov	r2, s15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800853c:	4b13      	ldr	r3, [pc, #76]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800853e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008540:	0e1b      	lsrs	r3, r3, #24
 8008542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008556:	edd7 6a07 	vldr	s13, [r7, #28]
 800855a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800855e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008562:	ee17 2a90 	vmov	r2, s15
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800856a:	e008      	b.n	800857e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	609a      	str	r2, [r3, #8]
}
 800857e:	bf00      	nop
 8008580:	3724      	adds	r7, #36	@ 0x24
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	58024400 	.word	0x58024400
 8008590:	03d09000 	.word	0x03d09000
 8008594:	46000000 	.word	0x46000000
 8008598:	4c742400 	.word	0x4c742400
 800859c:	4a742400 	.word	0x4a742400
 80085a0:	4bb71b00 	.word	0x4bb71b00

080085a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085b2:	4b53      	ldr	r3, [pc, #332]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d101      	bne.n	80085c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e099      	b.n	80086f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80085c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ce:	f7fa fcf5 	bl	8002fbc <HAL_GetTick>
 80085d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085d4:	e008      	b.n	80085e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085d6:	f7fa fcf1 	bl	8002fbc <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e086      	b.n	80086f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085e8:	4b45      	ldr	r3, [pc, #276]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f0      	bne.n	80085d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085f4:	4b42      	ldr	r3, [pc, #264]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	031b      	lsls	r3, r3, #12
 8008602:	493f      	ldr	r1, [pc, #252]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008604:	4313      	orrs	r3, r2
 8008606:	628b      	str	r3, [r1, #40]	@ 0x28
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	3b01      	subs	r3, #1
 800860e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	3b01      	subs	r3, #1
 8008618:	025b      	lsls	r3, r3, #9
 800861a:	b29b      	uxth	r3, r3
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	3b01      	subs	r3, #1
 8008624:	041b      	lsls	r3, r3, #16
 8008626:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	3b01      	subs	r3, #1
 8008632:	061b      	lsls	r3, r3, #24
 8008634:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008638:	4931      	ldr	r1, [pc, #196]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 800863a:	4313      	orrs	r3, r2
 800863c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800863e:	4b30      	ldr	r3, [pc, #192]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	492d      	ldr	r1, [pc, #180]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 800864c:	4313      	orrs	r3, r2
 800864e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008650:	4b2b      	ldr	r3, [pc, #172]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	f023 0220 	bic.w	r2, r3, #32
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	4928      	ldr	r1, [pc, #160]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 800865e:	4313      	orrs	r3, r2
 8008660:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008662:	4b27      	ldr	r3, [pc, #156]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	4a26      	ldr	r2, [pc, #152]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008668:	f023 0310 	bic.w	r3, r3, #16
 800866c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800866e:	4b24      	ldr	r3, [pc, #144]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008672:	4b24      	ldr	r3, [pc, #144]	@ (8008704 <RCCEx_PLL2_Config+0x160>)
 8008674:	4013      	ands	r3, r2
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	69d2      	ldr	r2, [r2, #28]
 800867a:	00d2      	lsls	r2, r2, #3
 800867c:	4920      	ldr	r1, [pc, #128]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 800867e:	4313      	orrs	r3, r2
 8008680:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008682:	4b1f      	ldr	r3, [pc, #124]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	4a1e      	ldr	r2, [pc, #120]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008688:	f043 0310 	orr.w	r3, r3, #16
 800868c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008694:	4b1a      	ldr	r3, [pc, #104]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	4a19      	ldr	r2, [pc, #100]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 800869a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800869e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086a0:	e00f      	b.n	80086c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d106      	bne.n	80086b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086a8:	4b15      	ldr	r3, [pc, #84]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ac:	4a14      	ldr	r2, [pc, #80]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086b4:	e005      	b.n	80086c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086b6:	4b12      	ldr	r3, [pc, #72]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ba:	4a11      	ldr	r2, [pc, #68]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ce:	f7fa fc75 	bl	8002fbc <HAL_GetTick>
 80086d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086d4:	e008      	b.n	80086e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086d6:	f7fa fc71 	bl	8002fbc <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d901      	bls.n	80086e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e006      	b.n	80086f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086e8:	4b05      	ldr	r3, [pc, #20]	@ (8008700 <RCCEx_PLL2_Config+0x15c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0f0      	beq.n	80086d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	58024400 	.word	0x58024400
 8008704:	ffff0007 	.word	0xffff0007

08008708 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008716:	4b53      	ldr	r3, [pc, #332]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 8008718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b03      	cmp	r3, #3
 8008720:	d101      	bne.n	8008726 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e099      	b.n	800885a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008726:	4b4f      	ldr	r3, [pc, #316]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a4e      	ldr	r2, [pc, #312]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800872c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008732:	f7fa fc43 	bl	8002fbc <HAL_GetTick>
 8008736:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008738:	e008      	b.n	800874c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800873a:	f7fa fc3f 	bl	8002fbc <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	d901      	bls.n	800874c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e086      	b.n	800885a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800874c:	4b45      	ldr	r3, [pc, #276]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f0      	bne.n	800873a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008758:	4b42      	ldr	r3, [pc, #264]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800875a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	051b      	lsls	r3, r3, #20
 8008766:	493f      	ldr	r1, [pc, #252]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 8008768:	4313      	orrs	r3, r2
 800876a:	628b      	str	r3, [r1, #40]	@ 0x28
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	3b01      	subs	r3, #1
 8008772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	3b01      	subs	r3, #1
 800877c:	025b      	lsls	r3, r3, #9
 800877e:	b29b      	uxth	r3, r3
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	3b01      	subs	r3, #1
 8008788:	041b      	lsls	r3, r3, #16
 800878a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	3b01      	subs	r3, #1
 8008796:	061b      	lsls	r3, r3, #24
 8008798:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800879c:	4931      	ldr	r1, [pc, #196]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087a2:	4b30      	ldr	r3, [pc, #192]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	492d      	ldr	r1, [pc, #180]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	4928      	ldr	r1, [pc, #160]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087c6:	4b27      	ldr	r3, [pc, #156]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	4a26      	ldr	r2, [pc, #152]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087d2:	4b24      	ldr	r3, [pc, #144]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087d6:	4b24      	ldr	r3, [pc, #144]	@ (8008868 <RCCEx_PLL3_Config+0x160>)
 80087d8:	4013      	ands	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	69d2      	ldr	r2, [r2, #28]
 80087de:	00d2      	lsls	r2, r2, #3
 80087e0:	4920      	ldr	r1, [pc, #128]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	4a19      	ldr	r2, [pc, #100]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008802:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008804:	e00f      	b.n	8008826 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d106      	bne.n	800881a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800880c:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008810:	4a14      	ldr	r2, [pc, #80]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 8008812:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008818:	e005      	b.n	8008826 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800881a:	4b12      	ldr	r3, [pc, #72]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800881c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881e:	4a11      	ldr	r2, [pc, #68]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 8008820:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008824:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008826:	4b0f      	ldr	r3, [pc, #60]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a0e      	ldr	r2, [pc, #56]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800882c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008832:	f7fa fbc3 	bl	8002fbc <HAL_GetTick>
 8008836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008838:	e008      	b.n	800884c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800883a:	f7fa fbbf 	bl	8002fbc <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e006      	b.n	800885a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800884c:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <RCCEx_PLL3_Config+0x15c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f0      	beq.n	800883a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
 8008868:	ffff0007 	.word	0xffff0007

0800886c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e049      	b.n	8008912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f9 fd60 	bl	8002358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f000 fd5a 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	d001      	beq.n	8008934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e054      	b.n	80089de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a26      	ldr	r2, [pc, #152]	@ (80089ec <HAL_TIM_Base_Start_IT+0xd0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d022      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800895e:	d01d      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a22      	ldr	r2, [pc, #136]	@ (80089f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d018      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a21      	ldr	r2, [pc, #132]	@ (80089f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1f      	ldr	r2, [pc, #124]	@ (80089f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00e      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1e      	ldr	r2, [pc, #120]	@ (80089fc <HAL_TIM_Base_Start_IT+0xe0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d009      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a1c      	ldr	r2, [pc, #112]	@ (8008a00 <HAL_TIM_Base_Start_IT+0xe4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d004      	beq.n	800899c <HAL_TIM_Base_Start_IT+0x80>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1b      	ldr	r2, [pc, #108]	@ (8008a04 <HAL_TIM_Base_Start_IT+0xe8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d115      	bne.n	80089c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	4b19      	ldr	r3, [pc, #100]	@ (8008a08 <HAL_TIM_Base_Start_IT+0xec>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b06      	cmp	r3, #6
 80089ac:	d015      	beq.n	80089da <HAL_TIM_Base_Start_IT+0xbe>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089b4:	d011      	beq.n	80089da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0201 	orr.w	r2, r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c6:	e008      	b.n	80089da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0201 	orr.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	e000      	b.n	80089dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40010000 	.word	0x40010000
 80089f0:	40000400 	.word	0x40000400
 80089f4:	40000800 	.word	0x40000800
 80089f8:	40000c00 	.word	0x40000c00
 80089fc:	40010400 	.word	0x40010400
 8008a00:	40001800 	.word	0x40001800
 8008a04:	40014000 	.word	0x40014000
 8008a08:	00010007 	.word	0x00010007

08008a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e049      	b.n	8008ab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f841 	bl	8008aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f000 fc8a 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <HAL_TIM_PWM_Start+0x24>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	bf14      	ite	ne
 8008aec:	2301      	movne	r3, #1
 8008aee:	2300      	moveq	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	e03c      	b.n	8008b6e <HAL_TIM_PWM_Start+0x9e>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d109      	bne.n	8008b0e <HAL_TIM_PWM_Start+0x3e>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	bf14      	ite	ne
 8008b06:	2301      	movne	r3, #1
 8008b08:	2300      	moveq	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	e02f      	b.n	8008b6e <HAL_TIM_PWM_Start+0x9e>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d109      	bne.n	8008b28 <HAL_TIM_PWM_Start+0x58>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	bf14      	ite	ne
 8008b20:	2301      	movne	r3, #1
 8008b22:	2300      	moveq	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	e022      	b.n	8008b6e <HAL_TIM_PWM_Start+0x9e>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b0c      	cmp	r3, #12
 8008b2c:	d109      	bne.n	8008b42 <HAL_TIM_PWM_Start+0x72>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	e015      	b.n	8008b6e <HAL_TIM_PWM_Start+0x9e>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b10      	cmp	r3, #16
 8008b46:	d109      	bne.n	8008b5c <HAL_TIM_PWM_Start+0x8c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	bf14      	ite	ne
 8008b54:	2301      	movne	r3, #1
 8008b56:	2300      	moveq	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	e008      	b.n	8008b6e <HAL_TIM_PWM_Start+0x9e>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	bf14      	ite	ne
 8008b68:	2301      	movne	r3, #1
 8008b6a:	2300      	moveq	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e0a1      	b.n	8008cba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_PWM_Start+0xb6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b84:	e023      	b.n	8008bce <HAL_TIM_PWM_Start+0xfe>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_PWM_Start+0xc6>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b94:	e01b      	b.n	8008bce <HAL_TIM_PWM_Start+0xfe>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d104      	bne.n	8008ba6 <HAL_TIM_PWM_Start+0xd6>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ba4:	e013      	b.n	8008bce <HAL_TIM_PWM_Start+0xfe>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b0c      	cmp	r3, #12
 8008baa:	d104      	bne.n	8008bb6 <HAL_TIM_PWM_Start+0xe6>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bb4:	e00b      	b.n	8008bce <HAL_TIM_PWM_Start+0xfe>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d104      	bne.n	8008bc6 <HAL_TIM_PWM_Start+0xf6>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bc4:	e003      	b.n	8008bce <HAL_TIM_PWM_Start+0xfe>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ffde 	bl	8009b98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a38      	ldr	r2, [pc, #224]	@ (8008cc4 <HAL_TIM_PWM_Start+0x1f4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d013      	beq.n	8008c0e <HAL_TIM_PWM_Start+0x13e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a37      	ldr	r2, [pc, #220]	@ (8008cc8 <HAL_TIM_PWM_Start+0x1f8>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00e      	beq.n	8008c0e <HAL_TIM_PWM_Start+0x13e>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a35      	ldr	r2, [pc, #212]	@ (8008ccc <HAL_TIM_PWM_Start+0x1fc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d009      	beq.n	8008c0e <HAL_TIM_PWM_Start+0x13e>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a34      	ldr	r2, [pc, #208]	@ (8008cd0 <HAL_TIM_PWM_Start+0x200>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d004      	beq.n	8008c0e <HAL_TIM_PWM_Start+0x13e>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a32      	ldr	r2, [pc, #200]	@ (8008cd4 <HAL_TIM_PWM_Start+0x204>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d101      	bne.n	8008c12 <HAL_TIM_PWM_Start+0x142>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <HAL_TIM_PWM_Start+0x144>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d007      	beq.n	8008c28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a25      	ldr	r2, [pc, #148]	@ (8008cc4 <HAL_TIM_PWM_Start+0x1f4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d022      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3a:	d01d      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a25      	ldr	r2, [pc, #148]	@ (8008cd8 <HAL_TIM_PWM_Start+0x208>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d018      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a24      	ldr	r2, [pc, #144]	@ (8008cdc <HAL_TIM_PWM_Start+0x20c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d013      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a22      	ldr	r2, [pc, #136]	@ (8008ce0 <HAL_TIM_PWM_Start+0x210>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00e      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc8 <HAL_TIM_PWM_Start+0x1f8>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce4 <HAL_TIM_PWM_Start+0x214>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIM_PWM_Start+0x1a8>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a16      	ldr	r2, [pc, #88]	@ (8008ccc <HAL_TIM_PWM_Start+0x1fc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d115      	bne.n	8008ca4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce8 <HAL_TIM_PWM_Start+0x218>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b06      	cmp	r3, #6
 8008c88:	d015      	beq.n	8008cb6 <HAL_TIM_PWM_Start+0x1e6>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c90:	d011      	beq.n	8008cb6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f042 0201 	orr.w	r2, r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	e008      	b.n	8008cb6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e000      	b.n	8008cb8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40010000 	.word	0x40010000
 8008cc8:	40010400 	.word	0x40010400
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	40000c00 	.word	0x40000c00
 8008ce4:	40001800 	.word	0x40001800
 8008ce8:	00010007 	.word	0x00010007

08008cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d020      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01b      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f06f 0202 	mvn.w	r2, #2
 8008d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 faf6 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008d3c:	e005      	b.n	8008d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fae8 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 faf9 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d020      	beq.n	8008d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0204 	mvn.w	r2, #4
 8008d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fad0 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fac2 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fad3 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d020      	beq.n	8008de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01b      	beq.n	8008de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f06f 0208 	mvn.w	r2, #8
 8008db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 faaa 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008dd4:	e005      	b.n	8008de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa9c 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 faad 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d020      	beq.n	8008e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01b      	beq.n	8008e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0210 	mvn.w	r2, #16
 8008e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2208      	movs	r2, #8
 8008e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa84 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fa76 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa87 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d007      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0201 	mvn.w	r2, #1
 8008e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7f8 fe98 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d104      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00c      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 ffc5 	bl	8009e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00c      	beq.n	8008eaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 ffbd 	bl	8009e24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00c      	beq.n	8008ece <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fa41 	bl	8009350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00c      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f003 0320 	and.w	r3, r3, #32
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d007      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0220 	mvn.w	r2, #32
 8008eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 ff85 	bl	8009dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e0ff      	b.n	800911a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b14      	cmp	r3, #20
 8008f26:	f200 80f0 	bhi.w	800910a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	0800910b 	.word	0x0800910b
 8008f38:	0800910b 	.word	0x0800910b
 8008f3c:	0800910b 	.word	0x0800910b
 8008f40:	08008fc5 	.word	0x08008fc5
 8008f44:	0800910b 	.word	0x0800910b
 8008f48:	0800910b 	.word	0x0800910b
 8008f4c:	0800910b 	.word	0x0800910b
 8008f50:	08009007 	.word	0x08009007
 8008f54:	0800910b 	.word	0x0800910b
 8008f58:	0800910b 	.word	0x0800910b
 8008f5c:	0800910b 	.word	0x0800910b
 8008f60:	08009047 	.word	0x08009047
 8008f64:	0800910b 	.word	0x0800910b
 8008f68:	0800910b 	.word	0x0800910b
 8008f6c:	0800910b 	.word	0x0800910b
 8008f70:	08009089 	.word	0x08009089
 8008f74:	0800910b 	.word	0x0800910b
 8008f78:	0800910b 	.word	0x0800910b
 8008f7c:	0800910b 	.word	0x0800910b
 8008f80:	080090c9 	.word	0x080090c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fa90 	bl	80094b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	699a      	ldr	r2, [r3, #24]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0208 	orr.w	r2, r2, #8
 8008f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699a      	ldr	r2, [r3, #24]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0204 	bic.w	r2, r2, #4
 8008fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6999      	ldr	r1, [r3, #24]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	619a      	str	r2, [r3, #24]
      break;
 8008fc2:	e0a5      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fb00 	bl	80095d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	699a      	ldr	r2, [r3, #24]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	699a      	ldr	r2, [r3, #24]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6999      	ldr	r1, [r3, #24]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	021a      	lsls	r2, r3, #8
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	619a      	str	r2, [r3, #24]
      break;
 8009004:	e084      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fb69 	bl	80096e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69da      	ldr	r2, [r3, #28]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0208 	orr.w	r2, r2, #8
 8009020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0204 	bic.w	r2, r2, #4
 8009030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69d9      	ldr	r1, [r3, #28]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	61da      	str	r2, [r3, #28]
      break;
 8009044:	e064      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fbd1 	bl	80097f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69da      	ldr	r2, [r3, #28]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69d9      	ldr	r1, [r3, #28]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	021a      	lsls	r2, r3, #8
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	61da      	str	r2, [r3, #28]
      break;
 8009086:	e043      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fc1a 	bl	80098c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0208 	orr.w	r2, r2, #8
 80090a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0204 	bic.w	r2, r2, #4
 80090b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80090c6:	e023      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fc5e 	bl	8009990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	021a      	lsls	r2, r3, #8
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009108:	e002      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
      break;
 800910e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop

08009124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_TIM_ConfigClockSource+0x1c>
 800913c:	2302      	movs	r3, #2
 800913e:	e0dc      	b.n	80092fa <HAL_TIM_ConfigClockSource+0x1d6>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	4b6a      	ldr	r3, [pc, #424]	@ (8009304 <HAL_TIM_ConfigClockSource+0x1e0>)
 800915c:	4013      	ands	r3, r2
 800915e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a64      	ldr	r2, [pc, #400]	@ (8009308 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009176:	4293      	cmp	r3, r2
 8009178:	f000 80a9 	beq.w	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 800917c:	4a62      	ldr	r2, [pc, #392]	@ (8009308 <HAL_TIM_ConfigClockSource+0x1e4>)
 800917e:	4293      	cmp	r3, r2
 8009180:	f200 80ae 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009184:	4a61      	ldr	r2, [pc, #388]	@ (800930c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009186:	4293      	cmp	r3, r2
 8009188:	f000 80a1 	beq.w	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 800918c:	4a5f      	ldr	r2, [pc, #380]	@ (800930c <HAL_TIM_ConfigClockSource+0x1e8>)
 800918e:	4293      	cmp	r3, r2
 8009190:	f200 80a6 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009194:	4a5e      	ldr	r2, [pc, #376]	@ (8009310 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009196:	4293      	cmp	r3, r2
 8009198:	f000 8099 	beq.w	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 800919c:	4a5c      	ldr	r2, [pc, #368]	@ (8009310 <HAL_TIM_ConfigClockSource+0x1ec>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	f200 809e 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80091a8:	f000 8091 	beq.w	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 80091ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80091b0:	f200 8096 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091b8:	f000 8089 	beq.w	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 80091bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091c0:	f200 808e 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091c8:	d03e      	beq.n	8009248 <HAL_TIM_ConfigClockSource+0x124>
 80091ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ce:	f200 8087 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091d6:	f000 8086 	beq.w	80092e6 <HAL_TIM_ConfigClockSource+0x1c2>
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091de:	d87f      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091e0:	2b70      	cmp	r3, #112	@ 0x70
 80091e2:	d01a      	beq.n	800921a <HAL_TIM_ConfigClockSource+0xf6>
 80091e4:	2b70      	cmp	r3, #112	@ 0x70
 80091e6:	d87b      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091e8:	2b60      	cmp	r3, #96	@ 0x60
 80091ea:	d050      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x16a>
 80091ec:	2b60      	cmp	r3, #96	@ 0x60
 80091ee:	d877      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091f0:	2b50      	cmp	r3, #80	@ 0x50
 80091f2:	d03c      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x14a>
 80091f4:	2b50      	cmp	r3, #80	@ 0x50
 80091f6:	d873      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091f8:	2b40      	cmp	r3, #64	@ 0x40
 80091fa:	d058      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x18a>
 80091fc:	2b40      	cmp	r3, #64	@ 0x40
 80091fe:	d86f      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009200:	2b30      	cmp	r3, #48	@ 0x30
 8009202:	d064      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009204:	2b30      	cmp	r3, #48	@ 0x30
 8009206:	d86b      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009208:	2b20      	cmp	r3, #32
 800920a:	d060      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 800920c:	2b20      	cmp	r3, #32
 800920e:	d867      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009210:	2b00      	cmp	r3, #0
 8009212:	d05c      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009214:	2b10      	cmp	r3, #16
 8009216:	d05a      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009218:	e062      	b.n	80092e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800922a:	f000 fc95 	bl	8009b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800923c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	609a      	str	r2, [r3, #8]
      break;
 8009246:	e04f      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009258:	f000 fc7e 	bl	8009b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800926a:	609a      	str	r2, [r3, #8]
      break;
 800926c:	e03c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800927a:	461a      	mov	r2, r3
 800927c:	f000 fbee 	bl	8009a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2150      	movs	r1, #80	@ 0x50
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fc48 	bl	8009b1c <TIM_ITRx_SetConfig>
      break;
 800928c:	e02c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800929a:	461a      	mov	r2, r3
 800929c:	f000 fc0d 	bl	8009aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2160      	movs	r1, #96	@ 0x60
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fc38 	bl	8009b1c <TIM_ITRx_SetConfig>
      break;
 80092ac:	e01c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ba:	461a      	mov	r2, r3
 80092bc:	f000 fbce 	bl	8009a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2140      	movs	r1, #64	@ 0x40
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fc28 	bl	8009b1c <TIM_ITRx_SetConfig>
      break;
 80092cc:	e00c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f000 fc1f 	bl	8009b1c <TIM_ITRx_SetConfig>
      break;
 80092de:	e003      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	73fb      	strb	r3, [r7, #15]
      break;
 80092e4:	e000      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80092e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	ffceff88 	.word	0xffceff88
 8009308:	00100040 	.word	0x00100040
 800930c:	00100030 	.word	0x00100030
 8009310:	00100020 	.word	0x00100020

08009314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a46      	ldr	r2, [pc, #280]	@ (8009490 <TIM_Base_SetConfig+0x12c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d013      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009382:	d00f      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a43      	ldr	r2, [pc, #268]	@ (8009494 <TIM_Base_SetConfig+0x130>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00b      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a42      	ldr	r2, [pc, #264]	@ (8009498 <TIM_Base_SetConfig+0x134>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d007      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a41      	ldr	r2, [pc, #260]	@ (800949c <TIM_Base_SetConfig+0x138>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d003      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a40      	ldr	r2, [pc, #256]	@ (80094a0 <TIM_Base_SetConfig+0x13c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d108      	bne.n	80093b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a35      	ldr	r2, [pc, #212]	@ (8009490 <TIM_Base_SetConfig+0x12c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01f      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c4:	d01b      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a32      	ldr	r2, [pc, #200]	@ (8009494 <TIM_Base_SetConfig+0x130>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d017      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a31      	ldr	r2, [pc, #196]	@ (8009498 <TIM_Base_SetConfig+0x134>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a30      	ldr	r2, [pc, #192]	@ (800949c <TIM_Base_SetConfig+0x138>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00f      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a2f      	ldr	r2, [pc, #188]	@ (80094a0 <TIM_Base_SetConfig+0x13c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00b      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a2e      	ldr	r2, [pc, #184]	@ (80094a4 <TIM_Base_SetConfig+0x140>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d007      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a2d      	ldr	r2, [pc, #180]	@ (80094a8 <TIM_Base_SetConfig+0x144>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a2c      	ldr	r2, [pc, #176]	@ (80094ac <TIM_Base_SetConfig+0x148>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d108      	bne.n	8009410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a16      	ldr	r2, [pc, #88]	@ (8009490 <TIM_Base_SetConfig+0x12c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00f      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a18      	ldr	r2, [pc, #96]	@ (80094a0 <TIM_Base_SetConfig+0x13c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00b      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a17      	ldr	r2, [pc, #92]	@ (80094a4 <TIM_Base_SetConfig+0x140>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d007      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a16      	ldr	r2, [pc, #88]	@ (80094a8 <TIM_Base_SetConfig+0x144>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a15      	ldr	r2, [pc, #84]	@ (80094ac <TIM_Base_SetConfig+0x148>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d103      	bne.n	8009464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b01      	cmp	r3, #1
 8009474:	d105      	bne.n	8009482 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f023 0201 	bic.w	r2, r3, #1
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	611a      	str	r2, [r3, #16]
  }
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	40010000 	.word	0x40010000
 8009494:	40000400 	.word	0x40000400
 8009498:	40000800 	.word	0x40000800
 800949c:	40000c00 	.word	0x40000c00
 80094a0:	40010400 	.word	0x40010400
 80094a4:	40014000 	.word	0x40014000
 80094a8:	40014400 	.word	0x40014400
 80094ac:	40014800 	.word	0x40014800

080094b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	f023 0201 	bic.w	r2, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4b37      	ldr	r3, [pc, #220]	@ (80095b8 <TIM_OC1_SetConfig+0x108>)
 80094dc:	4013      	ands	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0303 	bic.w	r3, r3, #3
 80094e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f023 0302 	bic.w	r3, r3, #2
 80094f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a2d      	ldr	r2, [pc, #180]	@ (80095bc <TIM_OC1_SetConfig+0x10c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00f      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a2c      	ldr	r2, [pc, #176]	@ (80095c0 <TIM_OC1_SetConfig+0x110>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d00b      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a2b      	ldr	r2, [pc, #172]	@ (80095c4 <TIM_OC1_SetConfig+0x114>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d007      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a2a      	ldr	r2, [pc, #168]	@ (80095c8 <TIM_OC1_SetConfig+0x118>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a29      	ldr	r2, [pc, #164]	@ (80095cc <TIM_OC1_SetConfig+0x11c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d10c      	bne.n	8009546 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0308 	bic.w	r3, r3, #8
 8009532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f023 0304 	bic.w	r3, r3, #4
 8009544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a1c      	ldr	r2, [pc, #112]	@ (80095bc <TIM_OC1_SetConfig+0x10c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00f      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a1b      	ldr	r2, [pc, #108]	@ (80095c0 <TIM_OC1_SetConfig+0x110>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00b      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a1a      	ldr	r2, [pc, #104]	@ (80095c4 <TIM_OC1_SetConfig+0x114>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d007      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a19      	ldr	r2, [pc, #100]	@ (80095c8 <TIM_OC1_SetConfig+0x118>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a18      	ldr	r2, [pc, #96]	@ (80095cc <TIM_OC1_SetConfig+0x11c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d111      	bne.n	8009592 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800957c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4313      	orrs	r3, r2
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4313      	orrs	r3, r2
 8009590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	621a      	str	r2, [r3, #32]
}
 80095ac:	bf00      	nop
 80095ae:	371c      	adds	r7, #28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	fffeff8f 	.word	0xfffeff8f
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40010400 	.word	0x40010400
 80095c4:	40014000 	.word	0x40014000
 80095c8:	40014400 	.word	0x40014400
 80095cc:	40014800 	.word	0x40014800

080095d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f023 0210 	bic.w	r2, r3, #16
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4b34      	ldr	r3, [pc, #208]	@ (80096cc <TIM_OC2_SetConfig+0xfc>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0320 	bic.w	r3, r3, #32
 800961a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a29      	ldr	r2, [pc, #164]	@ (80096d0 <TIM_OC2_SetConfig+0x100>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d003      	beq.n	8009638 <TIM_OC2_SetConfig+0x68>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a28      	ldr	r2, [pc, #160]	@ (80096d4 <TIM_OC2_SetConfig+0x104>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d10d      	bne.n	8009654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800963e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	4313      	orrs	r3, r2
 800964a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a1e      	ldr	r2, [pc, #120]	@ (80096d0 <TIM_OC2_SetConfig+0x100>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00f      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a1d      	ldr	r2, [pc, #116]	@ (80096d4 <TIM_OC2_SetConfig+0x104>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d00b      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <TIM_OC2_SetConfig+0x108>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d007      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <TIM_OC2_SetConfig+0x10c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d003      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a1a      	ldr	r2, [pc, #104]	@ (80096e0 <TIM_OC2_SetConfig+0x110>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d113      	bne.n	80096a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800968a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	621a      	str	r2, [r3, #32]
}
 80096be:	bf00      	nop
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	feff8fff 	.word	0xfeff8fff
 80096d0:	40010000 	.word	0x40010000
 80096d4:	40010400 	.word	0x40010400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40014400 	.word	0x40014400
 80096e0:	40014800 	.word	0x40014800

080096e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4b33      	ldr	r3, [pc, #204]	@ (80097dc <TIM_OC3_SetConfig+0xf8>)
 8009710:	4013      	ands	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800972c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	021b      	lsls	r3, r3, #8
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a28      	ldr	r2, [pc, #160]	@ (80097e0 <TIM_OC3_SetConfig+0xfc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d003      	beq.n	800974a <TIM_OC3_SetConfig+0x66>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a27      	ldr	r2, [pc, #156]	@ (80097e4 <TIM_OC3_SetConfig+0x100>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d10d      	bne.n	8009766 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a1d      	ldr	r2, [pc, #116]	@ (80097e0 <TIM_OC3_SetConfig+0xfc>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a1c      	ldr	r2, [pc, #112]	@ (80097e4 <TIM_OC3_SetConfig+0x100>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a1b      	ldr	r2, [pc, #108]	@ (80097e8 <TIM_OC3_SetConfig+0x104>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a1a      	ldr	r2, [pc, #104]	@ (80097ec <TIM_OC3_SetConfig+0x108>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a19      	ldr	r2, [pc, #100]	@ (80097f0 <TIM_OC3_SetConfig+0x10c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d113      	bne.n	80097b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800979c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	621a      	str	r2, [r3, #32]
}
 80097d0:	bf00      	nop
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	fffeff8f 	.word	0xfffeff8f
 80097e0:	40010000 	.word	0x40010000
 80097e4:	40010400 	.word	0x40010400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40014400 	.word	0x40014400
 80097f0:	40014800 	.word	0x40014800

080097f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <TIM_OC4_SetConfig+0xbc>)
 8009820:	4013      	ands	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800982a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800983e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a19      	ldr	r2, [pc, #100]	@ (80098b4 <TIM_OC4_SetConfig+0xc0>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00f      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a18      	ldr	r2, [pc, #96]	@ (80098b8 <TIM_OC4_SetConfig+0xc4>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00b      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a17      	ldr	r2, [pc, #92]	@ (80098bc <TIM_OC4_SetConfig+0xc8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a16      	ldr	r2, [pc, #88]	@ (80098c0 <TIM_OC4_SetConfig+0xcc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a15      	ldr	r2, [pc, #84]	@ (80098c4 <TIM_OC4_SetConfig+0xd0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d109      	bne.n	8009888 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800987a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	019b      	lsls	r3, r3, #6
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	feff8fff 	.word	0xfeff8fff
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40010400 	.word	0x40010400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40014400 	.word	0x40014400
 80098c4:	40014800 	.word	0x40014800

080098c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4b21      	ldr	r3, [pc, #132]	@ (8009978 <TIM_OC5_SetConfig+0xb0>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	041b      	lsls	r3, r3, #16
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a18      	ldr	r2, [pc, #96]	@ (800997c <TIM_OC5_SetConfig+0xb4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00f      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a17      	ldr	r2, [pc, #92]	@ (8009980 <TIM_OC5_SetConfig+0xb8>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00b      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a16      	ldr	r2, [pc, #88]	@ (8009984 <TIM_OC5_SetConfig+0xbc>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d007      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <TIM_OC5_SetConfig+0xc0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a14      	ldr	r2, [pc, #80]	@ (800998c <TIM_OC5_SetConfig+0xc4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d109      	bne.n	8009952 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	021b      	lsls	r3, r3, #8
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	621a      	str	r2, [r3, #32]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	fffeff8f 	.word	0xfffeff8f
 800997c:	40010000 	.word	0x40010000
 8009980:	40010400 	.word	0x40010400
 8009984:	40014000 	.word	0x40014000
 8009988:	40014400 	.word	0x40014400
 800998c:	40014800 	.word	0x40014800

08009990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4b22      	ldr	r3, [pc, #136]	@ (8009a44 <TIM_OC6_SetConfig+0xb4>)
 80099bc:	4013      	ands	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	021b      	lsls	r3, r3, #8
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	051b      	lsls	r3, r3, #20
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a19      	ldr	r2, [pc, #100]	@ (8009a48 <TIM_OC6_SetConfig+0xb8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00f      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <TIM_OC6_SetConfig+0xbc>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00b      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a17      	ldr	r2, [pc, #92]	@ (8009a50 <TIM_OC6_SetConfig+0xc0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d007      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a16      	ldr	r2, [pc, #88]	@ (8009a54 <TIM_OC6_SetConfig+0xc4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <TIM_OC6_SetConfig+0xc8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d109      	bne.n	8009a1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	029b      	lsls	r3, r3, #10
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	feff8fff 	.word	0xfeff8fff
 8009a48:	40010000 	.word	0x40010000
 8009a4c:	40010400 	.word	0x40010400
 8009a50:	40014000 	.word	0x40014000
 8009a54:	40014400 	.word	0x40014400
 8009a58:	40014800 	.word	0x40014800

08009a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0201 	bic.w	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	011b      	lsls	r3, r3, #4
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f023 030a 	bic.w	r3, r3, #10
 8009a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b087      	sub	sp, #28
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	60b9      	str	r1, [r7, #8]
 8009ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	f023 0210 	bic.w	r2, r3, #16
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	031b      	lsls	r3, r3, #12
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009af6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	621a      	str	r2, [r3, #32]
}
 8009b0e:	bf00      	nop
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
	...

08009b1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <TIM_ITRx_SetConfig+0x38>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	f043 0307 	orr.w	r3, r3, #7
 8009b3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	609a      	str	r2, [r3, #8]
}
 8009b46:	bf00      	nop
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	ffcfff8f 	.word	0xffcfff8f

08009b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	021a      	lsls	r2, r3, #8
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	609a      	str	r2, [r3, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f003 031f 	and.w	r3, r3, #31
 8009baa:	2201      	movs	r2, #1
 8009bac:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1a      	ldr	r2, [r3, #32]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	401a      	ands	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1a      	ldr	r2, [r3, #32]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	621a      	str	r2, [r3, #32]
}
 8009bd6:	bf00      	nop
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e06d      	b.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a30      	ldr	r2, [pc, #192]	@ (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d004      	beq.n	8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d108      	bne.n	8009c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a20      	ldr	r2, [pc, #128]	@ (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d022      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c6e:	d01d      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1d      	ldr	r2, [pc, #116]	@ (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d018      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d013      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a1a      	ldr	r2, [pc, #104]	@ (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00e      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a15      	ldr	r2, [pc, #84]	@ (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d009      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a16      	ldr	r2, [pc, #88]	@ (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d004      	beq.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a15      	ldr	r2, [pc, #84]	@ (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d10c      	bne.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	40010000 	.word	0x40010000
 8009ce8:	40010400 	.word	0x40010400
 8009cec:	40000400 	.word	0x40000400
 8009cf0:	40000800 	.word	0x40000800
 8009cf4:	40000c00 	.word	0x40000c00
 8009cf8:	40001800 	.word	0x40001800
 8009cfc:	40014000 	.word	0x40014000

08009d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e065      	b.n	8009de8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a16      	ldr	r2, [pc, #88]	@ (8009df4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a14      	ldr	r2, [pc, #80]	@ (8009df8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d115      	bne.n	8009dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db4:	051b      	lsls	r3, r3, #20
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40010400 	.word	0x40010400

08009dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e042      	b.n	8009ed0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d106      	bne.n	8009e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7f8 fd93 	bl	8002988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2224      	movs	r2, #36	@ 0x24
 8009e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0201 	bic.w	r2, r2, #1
 8009e78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 f96a 	bl	800b15c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fbff 	bl	800a68c <UART_SetConfig>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d101      	bne.n	8009e98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e01b      	b.n	8009ed0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0201 	orr.w	r2, r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f9e9 	bl	800b2a0 <UART_CheckIdleState>
 8009ece:	4603      	mov	r3, r0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b0ba      	sub	sp, #232	@ 0xe8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009efe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009f02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009f06:	4013      	ands	r3, r2
 8009f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11b      	bne.n	8009f4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f18:	f003 0320 	and.w	r3, r3, #32
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d015      	beq.n	8009f4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d105      	bne.n	8009f38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d009      	beq.n	8009f4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 8377 	beq.w	800a630 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	4798      	blx	r3
      }
      return;
 8009f4a:	e371      	b.n	800a630 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 8123 	beq.w	800a19c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f5a:	4b8d      	ldr	r3, [pc, #564]	@ (800a190 <HAL_UART_IRQHandler+0x2b8>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d106      	bne.n	8009f70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009f66:	4b8b      	ldr	r3, [pc, #556]	@ (800a194 <HAL_UART_IRQHandler+0x2bc>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8116 	beq.w	800a19c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d011      	beq.n	8009fa0 <HAL_UART_IRQHandler+0xc8>
 8009f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00b      	beq.n	8009fa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f96:	f043 0201 	orr.w	r2, r3, #1
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d011      	beq.n	8009fd0 <HAL_UART_IRQHandler+0xf8>
 8009fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00b      	beq.n	8009fd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fc6:	f043 0204 	orr.w	r2, r3, #4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d011      	beq.n	800a000 <HAL_UART_IRQHandler+0x128>
 8009fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2204      	movs	r2, #4
 8009fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ff6:	f043 0202 	orr.w	r2, r3, #2
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d017      	beq.n	800a03c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d105      	bne.n	800a024 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a018:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a01c:	4b5c      	ldr	r3, [pc, #368]	@ (800a190 <HAL_UART_IRQHandler+0x2b8>)
 800a01e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00b      	beq.n	800a03c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2208      	movs	r2, #8
 800a02a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a032:	f043 0208 	orr.w	r2, r3, #8
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a044:	2b00      	cmp	r3, #0
 800a046:	d012      	beq.n	800a06e <HAL_UART_IRQHandler+0x196>
 800a048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a04c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00c      	beq.n	800a06e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a05c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a064:	f043 0220 	orr.w	r2, r3, #32
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 82dd 	beq.w	800a634 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b00      	cmp	r3, #0
 800a084:	d013      	beq.n	800a0ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c2:	2b40      	cmp	r3, #64	@ 0x40
 800a0c4:	d005      	beq.n	800a0d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d054      	beq.n	800a17c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 f9fc 	bl	800b4d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d146      	bne.n	800a174 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a0fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3308      	adds	r3, #8
 800a10e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a11e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a12a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1d9      	bne.n	800a0e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d017      	beq.n	800a16c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a142:	4a15      	ldr	r2, [pc, #84]	@ (800a198 <HAL_UART_IRQHandler+0x2c0>)
 800a144:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7f9 fbf3 	bl	8003938 <HAL_DMA_Abort_IT>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d019      	beq.n	800a18c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a15e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a166:	4610      	mov	r0, r2
 800a168:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16a:	e00f      	b.n	800a18c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fa77 	bl	800a660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a172:	e00b      	b.n	800a18c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fa73 	bl	800a660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a17a:	e007      	b.n	800a18c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fa6f 	bl	800a660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a18a:	e253      	b.n	800a634 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a18c:	bf00      	nop
    return;
 800a18e:	e251      	b.n	800a634 <HAL_UART_IRQHandler+0x75c>
 800a190:	10000001 	.word	0x10000001
 800a194:	04000120 	.word	0x04000120
 800a198:	0800b59d 	.word	0x0800b59d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	f040 81e7 	bne.w	800a574 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1aa:	f003 0310 	and.w	r3, r3, #16
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 81e0 	beq.w	800a574 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 81d9 	beq.w	800a574 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2210      	movs	r2, #16
 800a1c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d4:	2b40      	cmp	r3, #64	@ 0x40
 800a1d6:	f040 8151 	bne.w	800a47c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a96      	ldr	r2, [pc, #600]	@ (800a43c <HAL_UART_IRQHandler+0x564>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d068      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a93      	ldr	r2, [pc, #588]	@ (800a440 <HAL_UART_IRQHandler+0x568>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d061      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a91      	ldr	r2, [pc, #580]	@ (800a444 <HAL_UART_IRQHandler+0x56c>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d05a      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a8e      	ldr	r2, [pc, #568]	@ (800a448 <HAL_UART_IRQHandler+0x570>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d053      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a8c      	ldr	r2, [pc, #560]	@ (800a44c <HAL_UART_IRQHandler+0x574>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d04c      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a89      	ldr	r2, [pc, #548]	@ (800a450 <HAL_UART_IRQHandler+0x578>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d045      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a87      	ldr	r2, [pc, #540]	@ (800a454 <HAL_UART_IRQHandler+0x57c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d03e      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a84      	ldr	r2, [pc, #528]	@ (800a458 <HAL_UART_IRQHandler+0x580>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d037      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a82      	ldr	r2, [pc, #520]	@ (800a45c <HAL_UART_IRQHandler+0x584>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d030      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a7f      	ldr	r2, [pc, #508]	@ (800a460 <HAL_UART_IRQHandler+0x588>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d029      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a7d      	ldr	r2, [pc, #500]	@ (800a464 <HAL_UART_IRQHandler+0x58c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d022      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a7a      	ldr	r2, [pc, #488]	@ (800a468 <HAL_UART_IRQHandler+0x590>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d01b      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a78      	ldr	r2, [pc, #480]	@ (800a46c <HAL_UART_IRQHandler+0x594>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d014      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a75      	ldr	r2, [pc, #468]	@ (800a470 <HAL_UART_IRQHandler+0x598>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00d      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a73      	ldr	r2, [pc, #460]	@ (800a474 <HAL_UART_IRQHandler+0x59c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d006      	beq.n	800a2ba <HAL_UART_IRQHandler+0x3e2>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a70      	ldr	r2, [pc, #448]	@ (800a478 <HAL_UART_IRQHandler+0x5a0>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d106      	bne.n	800a2c8 <HAL_UART_IRQHandler+0x3f0>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	e005      	b.n	800a2d4 <HAL_UART_IRQHandler+0x3fc>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 81ab 	beq.w	800a638 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	f080 81a3 	bcs.w	800a638 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a308:	f000 8087 	beq.w	800a41a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a33a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1da      	bne.n	800a30c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3308      	adds	r3, #8
 800a35c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3308      	adds	r3, #8
 800a376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a37a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a37e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a386:	e841 2300 	strex	r3, r2, [r1]
 800a38a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a38c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1e1      	bne.n	800a356 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3308      	adds	r3, #8
 800a398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e3      	bne.n	800a392 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3e8:	f023 0310 	bic.w	r3, r3, #16
 800a3ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e4      	bne.n	800a3d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a414:	4618      	mov	r0, r3
 800a416:	f7f8 ff71 	bl	80032fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2202      	movs	r2, #2
 800a41e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	b29b      	uxth	r3, r3
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f91d 	bl	800a674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a43a:	e0fd      	b.n	800a638 <HAL_UART_IRQHandler+0x760>
 800a43c:	40020010 	.word	0x40020010
 800a440:	40020028 	.word	0x40020028
 800a444:	40020040 	.word	0x40020040
 800a448:	40020058 	.word	0x40020058
 800a44c:	40020070 	.word	0x40020070
 800a450:	40020088 	.word	0x40020088
 800a454:	400200a0 	.word	0x400200a0
 800a458:	400200b8 	.word	0x400200b8
 800a45c:	40020410 	.word	0x40020410
 800a460:	40020428 	.word	0x40020428
 800a464:	40020440 	.word	0x40020440
 800a468:	40020458 	.word	0x40020458
 800a46c:	40020470 	.word	0x40020470
 800a470:	40020488 	.word	0x40020488
 800a474:	400204a0 	.word	0x400204a0
 800a478:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a488:	b29b      	uxth	r3, r3
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a496:	b29b      	uxth	r3, r3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80cf 	beq.w	800a63c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a49e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 80ca 	beq.w	800a63c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a4ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e4      	bne.n	800a4a8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ee:	6a3a      	ldr	r2, [r7, #32]
 800a4f0:	4b55      	ldr	r3, [pc, #340]	@ (800a648 <HAL_UART_IRQHandler+0x770>)
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a502:	633a      	str	r2, [r7, #48]	@ 0x30
 800a504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a50a:	e841 2300 	strex	r3, r2, [r1]
 800a50e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e3      	bne.n	800a4de <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	60fb      	str	r3, [r7, #12]
   return(result);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0310 	bic.w	r3, r3, #16
 800a53e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a54c:	61fb      	str	r3, [r7, #28]
 800a54e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	69b9      	ldr	r1, [r7, #24]
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	617b      	str	r3, [r7, #20]
   return(result);
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e4      	bne.n	800a52a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a566:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f881 	bl	800a674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a572:	e063      	b.n	800a63c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <HAL_UART_IRQHandler+0x6c6>
 800a580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f001 f841 	bl	800b61e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a59c:	e051      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d014      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d03a      	beq.n	800a640 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
    }
    return;
 800a5d2:	e035      	b.n	800a640 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d009      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x71c>
 800a5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 ffeb 	bl	800b5c8 <UART_EndTransmit_IT>
    return;
 800a5f2:	e026      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <HAL_UART_IRQHandler+0x73c>
 800a600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a604:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f001 f81a 	bl	800b646 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a612:	e016      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d010      	beq.n	800a642 <HAL_UART_IRQHandler+0x76a>
 800a620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a624:	2b00      	cmp	r3, #0
 800a626:	da0c      	bge.n	800a642 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f802 	bl	800b632 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a62e:	e008      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
      return;
 800a630:	bf00      	nop
 800a632:	e006      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
    return;
 800a634:	bf00      	nop
 800a636:	e004      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
      return;
 800a638:	bf00      	nop
 800a63a:	e002      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
      return;
 800a63c:	bf00      	nop
 800a63e:	e000      	b.n	800a642 <HAL_UART_IRQHandler+0x76a>
    return;
 800a640:	bf00      	nop
  }
}
 800a642:	37e8      	adds	r7, #232	@ 0xe8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	effffffe 	.word	0xeffffffe

0800a64c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a68c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a690:	b092      	sub	sp, #72	@ 0x48
 800a692:	af00      	add	r7, sp, #0
 800a694:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	4bbe      	ldr	r3, [pc, #760]	@ (800a9b4 <UART_SetConfig+0x328>)
 800a6bc:	4013      	ands	r3, r2
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4ab3      	ldr	r2, [pc, #716]	@ (800a9b8 <UART_SetConfig+0x32c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d004      	beq.n	800a6f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	4baf      	ldr	r3, [pc, #700]	@ (800a9bc <UART_SetConfig+0x330>)
 800a700:	4013      	ands	r3, r2
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a708:	430b      	orrs	r3, r1
 800a70a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a712:	f023 010f 	bic.w	r1, r3, #15
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	430a      	orrs	r2, r1
 800a720:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4aa6      	ldr	r2, [pc, #664]	@ (800a9c0 <UART_SetConfig+0x334>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d177      	bne.n	800a81c <UART_SetConfig+0x190>
 800a72c:	4ba5      	ldr	r3, [pc, #660]	@ (800a9c4 <UART_SetConfig+0x338>)
 800a72e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a734:	2b28      	cmp	r3, #40	@ 0x28
 800a736:	d86d      	bhi.n	800a814 <UART_SetConfig+0x188>
 800a738:	a201      	add	r2, pc, #4	@ (adr r2, 800a740 <UART_SetConfig+0xb4>)
 800a73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73e:	bf00      	nop
 800a740:	0800a7e5 	.word	0x0800a7e5
 800a744:	0800a815 	.word	0x0800a815
 800a748:	0800a815 	.word	0x0800a815
 800a74c:	0800a815 	.word	0x0800a815
 800a750:	0800a815 	.word	0x0800a815
 800a754:	0800a815 	.word	0x0800a815
 800a758:	0800a815 	.word	0x0800a815
 800a75c:	0800a815 	.word	0x0800a815
 800a760:	0800a7ed 	.word	0x0800a7ed
 800a764:	0800a815 	.word	0x0800a815
 800a768:	0800a815 	.word	0x0800a815
 800a76c:	0800a815 	.word	0x0800a815
 800a770:	0800a815 	.word	0x0800a815
 800a774:	0800a815 	.word	0x0800a815
 800a778:	0800a815 	.word	0x0800a815
 800a77c:	0800a815 	.word	0x0800a815
 800a780:	0800a7f5 	.word	0x0800a7f5
 800a784:	0800a815 	.word	0x0800a815
 800a788:	0800a815 	.word	0x0800a815
 800a78c:	0800a815 	.word	0x0800a815
 800a790:	0800a815 	.word	0x0800a815
 800a794:	0800a815 	.word	0x0800a815
 800a798:	0800a815 	.word	0x0800a815
 800a79c:	0800a815 	.word	0x0800a815
 800a7a0:	0800a7fd 	.word	0x0800a7fd
 800a7a4:	0800a815 	.word	0x0800a815
 800a7a8:	0800a815 	.word	0x0800a815
 800a7ac:	0800a815 	.word	0x0800a815
 800a7b0:	0800a815 	.word	0x0800a815
 800a7b4:	0800a815 	.word	0x0800a815
 800a7b8:	0800a815 	.word	0x0800a815
 800a7bc:	0800a815 	.word	0x0800a815
 800a7c0:	0800a805 	.word	0x0800a805
 800a7c4:	0800a815 	.word	0x0800a815
 800a7c8:	0800a815 	.word	0x0800a815
 800a7cc:	0800a815 	.word	0x0800a815
 800a7d0:	0800a815 	.word	0x0800a815
 800a7d4:	0800a815 	.word	0x0800a815
 800a7d8:	0800a815 	.word	0x0800a815
 800a7dc:	0800a815 	.word	0x0800a815
 800a7e0:	0800a80d 	.word	0x0800a80d
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e222      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e21e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e21a      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e216      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a804:	2320      	movs	r3, #32
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e212      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a80c:	2340      	movs	r3, #64	@ 0x40
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a812:	e20e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a814:	2380      	movs	r3, #128	@ 0x80
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e20a      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a69      	ldr	r2, [pc, #420]	@ (800a9c8 <UART_SetConfig+0x33c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d130      	bne.n	800a888 <UART_SetConfig+0x1fc>
 800a826:	4b67      	ldr	r3, [pc, #412]	@ (800a9c4 <UART_SetConfig+0x338>)
 800a828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	2b05      	cmp	r3, #5
 800a830:	d826      	bhi.n	800a880 <UART_SetConfig+0x1f4>
 800a832:	a201      	add	r2, pc, #4	@ (adr r2, 800a838 <UART_SetConfig+0x1ac>)
 800a834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a838:	0800a851 	.word	0x0800a851
 800a83c:	0800a859 	.word	0x0800a859
 800a840:	0800a861 	.word	0x0800a861
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a871 	.word	0x0800a871
 800a84c:	0800a879 	.word	0x0800a879
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e1ec      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a858:	2304      	movs	r3, #4
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e1e8      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a860:	2308      	movs	r3, #8
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e1e4      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a868:	2310      	movs	r3, #16
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e1e0      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a870:	2320      	movs	r3, #32
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e1dc      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a878:	2340      	movs	r3, #64	@ 0x40
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e1d8      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a880:	2380      	movs	r3, #128	@ 0x80
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e1d4      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a4f      	ldr	r2, [pc, #316]	@ (800a9cc <UART_SetConfig+0x340>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d130      	bne.n	800a8f4 <UART_SetConfig+0x268>
 800a892:	4b4c      	ldr	r3, [pc, #304]	@ (800a9c4 <UART_SetConfig+0x338>)
 800a894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b05      	cmp	r3, #5
 800a89c:	d826      	bhi.n	800a8ec <UART_SetConfig+0x260>
 800a89e:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a4 <UART_SetConfig+0x218>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a8bd 	.word	0x0800a8bd
 800a8a8:	0800a8c5 	.word	0x0800a8c5
 800a8ac:	0800a8cd 	.word	0x0800a8cd
 800a8b0:	0800a8d5 	.word	0x0800a8d5
 800a8b4:	0800a8dd 	.word	0x0800a8dd
 800a8b8:	0800a8e5 	.word	0x0800a8e5
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e1b6      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e1b2      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e1ae      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e1aa      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8dc:	2320      	movs	r3, #32
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e1a6      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8e4:	2340      	movs	r3, #64	@ 0x40
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e1a2      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8ec:	2380      	movs	r3, #128	@ 0x80
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e19e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a35      	ldr	r2, [pc, #212]	@ (800a9d0 <UART_SetConfig+0x344>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d130      	bne.n	800a960 <UART_SetConfig+0x2d4>
 800a8fe:	4b31      	ldr	r3, [pc, #196]	@ (800a9c4 <UART_SetConfig+0x338>)
 800a900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b05      	cmp	r3, #5
 800a908:	d826      	bhi.n	800a958 <UART_SetConfig+0x2cc>
 800a90a:	a201      	add	r2, pc, #4	@ (adr r2, 800a910 <UART_SetConfig+0x284>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a929 	.word	0x0800a929
 800a914:	0800a931 	.word	0x0800a931
 800a918:	0800a939 	.word	0x0800a939
 800a91c:	0800a941 	.word	0x0800a941
 800a920:	0800a949 	.word	0x0800a949
 800a924:	0800a951 	.word	0x0800a951
 800a928:	2300      	movs	r3, #0
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e180      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a930:	2304      	movs	r3, #4
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e17c      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a938:	2308      	movs	r3, #8
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93e:	e178      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a940:	2310      	movs	r3, #16
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a946:	e174      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a948:	2320      	movs	r3, #32
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94e:	e170      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a950:	2340      	movs	r3, #64	@ 0x40
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e16c      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a958:	2380      	movs	r3, #128	@ 0x80
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e168      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a1b      	ldr	r2, [pc, #108]	@ (800a9d4 <UART_SetConfig+0x348>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d142      	bne.n	800a9f0 <UART_SetConfig+0x364>
 800a96a:	4b16      	ldr	r3, [pc, #88]	@ (800a9c4 <UART_SetConfig+0x338>)
 800a96c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a96e:	f003 0307 	and.w	r3, r3, #7
 800a972:	2b05      	cmp	r3, #5
 800a974:	d838      	bhi.n	800a9e8 <UART_SetConfig+0x35c>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <UART_SetConfig+0x2f0>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a995 	.word	0x0800a995
 800a980:	0800a99d 	.word	0x0800a99d
 800a984:	0800a9a5 	.word	0x0800a9a5
 800a988:	0800a9ad 	.word	0x0800a9ad
 800a98c:	0800a9d9 	.word	0x0800a9d9
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	2300      	movs	r3, #0
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99a:	e14a      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a99c:	2304      	movs	r3, #4
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a2:	e146      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a9a4:	2308      	movs	r3, #8
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9aa:	e142      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b2:	e13e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a9b4:	cfff69f3 	.word	0xcfff69f3
 800a9b8:	58000c00 	.word	0x58000c00
 800a9bc:	11fff4ff 	.word	0x11fff4ff
 800a9c0:	40011000 	.word	0x40011000
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	40004400 	.word	0x40004400
 800a9cc:	40004800 	.word	0x40004800
 800a9d0:	40004c00 	.word	0x40004c00
 800a9d4:	40005000 	.word	0x40005000
 800a9d8:	2320      	movs	r3, #32
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e128      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a9e0:	2340      	movs	r3, #64	@ 0x40
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e124      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a9e8:	2380      	movs	r3, #128	@ 0x80
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e120      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4acb      	ldr	r2, [pc, #812]	@ (800ad24 <UART_SetConfig+0x698>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d176      	bne.n	800aae8 <UART_SetConfig+0x45c>
 800a9fa:	4bcb      	ldr	r3, [pc, #812]	@ (800ad28 <UART_SetConfig+0x69c>)
 800a9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa02:	2b28      	cmp	r3, #40	@ 0x28
 800aa04:	d86c      	bhi.n	800aae0 <UART_SetConfig+0x454>
 800aa06:	a201      	add	r2, pc, #4	@ (adr r2, 800aa0c <UART_SetConfig+0x380>)
 800aa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0c:	0800aab1 	.word	0x0800aab1
 800aa10:	0800aae1 	.word	0x0800aae1
 800aa14:	0800aae1 	.word	0x0800aae1
 800aa18:	0800aae1 	.word	0x0800aae1
 800aa1c:	0800aae1 	.word	0x0800aae1
 800aa20:	0800aae1 	.word	0x0800aae1
 800aa24:	0800aae1 	.word	0x0800aae1
 800aa28:	0800aae1 	.word	0x0800aae1
 800aa2c:	0800aab9 	.word	0x0800aab9
 800aa30:	0800aae1 	.word	0x0800aae1
 800aa34:	0800aae1 	.word	0x0800aae1
 800aa38:	0800aae1 	.word	0x0800aae1
 800aa3c:	0800aae1 	.word	0x0800aae1
 800aa40:	0800aae1 	.word	0x0800aae1
 800aa44:	0800aae1 	.word	0x0800aae1
 800aa48:	0800aae1 	.word	0x0800aae1
 800aa4c:	0800aac1 	.word	0x0800aac1
 800aa50:	0800aae1 	.word	0x0800aae1
 800aa54:	0800aae1 	.word	0x0800aae1
 800aa58:	0800aae1 	.word	0x0800aae1
 800aa5c:	0800aae1 	.word	0x0800aae1
 800aa60:	0800aae1 	.word	0x0800aae1
 800aa64:	0800aae1 	.word	0x0800aae1
 800aa68:	0800aae1 	.word	0x0800aae1
 800aa6c:	0800aac9 	.word	0x0800aac9
 800aa70:	0800aae1 	.word	0x0800aae1
 800aa74:	0800aae1 	.word	0x0800aae1
 800aa78:	0800aae1 	.word	0x0800aae1
 800aa7c:	0800aae1 	.word	0x0800aae1
 800aa80:	0800aae1 	.word	0x0800aae1
 800aa84:	0800aae1 	.word	0x0800aae1
 800aa88:	0800aae1 	.word	0x0800aae1
 800aa8c:	0800aad1 	.word	0x0800aad1
 800aa90:	0800aae1 	.word	0x0800aae1
 800aa94:	0800aae1 	.word	0x0800aae1
 800aa98:	0800aae1 	.word	0x0800aae1
 800aa9c:	0800aae1 	.word	0x0800aae1
 800aaa0:	0800aae1 	.word	0x0800aae1
 800aaa4:	0800aae1 	.word	0x0800aae1
 800aaa8:	0800aae1 	.word	0x0800aae1
 800aaac:	0800aad9 	.word	0x0800aad9
 800aab0:	2301      	movs	r3, #1
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e0bc      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aab8:	2304      	movs	r3, #4
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e0b8      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aac0:	2308      	movs	r3, #8
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e0b4      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aac8:	2310      	movs	r3, #16
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e0b0      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aad0:	2320      	movs	r3, #32
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e0ac      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aad8:	2340      	movs	r3, #64	@ 0x40
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e0a8      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aae0:	2380      	movs	r3, #128	@ 0x80
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae6:	e0a4      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a8f      	ldr	r2, [pc, #572]	@ (800ad2c <UART_SetConfig+0x6a0>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d130      	bne.n	800ab54 <UART_SetConfig+0x4c8>
 800aaf2:	4b8d      	ldr	r3, [pc, #564]	@ (800ad28 <UART_SetConfig+0x69c>)
 800aaf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf6:	f003 0307 	and.w	r3, r3, #7
 800aafa:	2b05      	cmp	r3, #5
 800aafc:	d826      	bhi.n	800ab4c <UART_SetConfig+0x4c0>
 800aafe:	a201      	add	r2, pc, #4	@ (adr r2, 800ab04 <UART_SetConfig+0x478>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab1d 	.word	0x0800ab1d
 800ab08:	0800ab25 	.word	0x0800ab25
 800ab0c:	0800ab2d 	.word	0x0800ab2d
 800ab10:	0800ab35 	.word	0x0800ab35
 800ab14:	0800ab3d 	.word	0x0800ab3d
 800ab18:	0800ab45 	.word	0x0800ab45
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab22:	e086      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab24:	2304      	movs	r3, #4
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e082      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e07e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab34:	2310      	movs	r3, #16
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3a:	e07a      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab42:	e076      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab44:	2340      	movs	r3, #64	@ 0x40
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4a:	e072      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab4c:	2380      	movs	r3, #128	@ 0x80
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab52:	e06e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a75      	ldr	r2, [pc, #468]	@ (800ad30 <UART_SetConfig+0x6a4>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d130      	bne.n	800abc0 <UART_SetConfig+0x534>
 800ab5e:	4b72      	ldr	r3, [pc, #456]	@ (800ad28 <UART_SetConfig+0x69c>)
 800ab60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d826      	bhi.n	800abb8 <UART_SetConfig+0x52c>
 800ab6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab70 <UART_SetConfig+0x4e4>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ab89 	.word	0x0800ab89
 800ab74:	0800ab91 	.word	0x0800ab91
 800ab78:	0800ab99 	.word	0x0800ab99
 800ab7c:	0800aba1 	.word	0x0800aba1
 800ab80:	0800aba9 	.word	0x0800aba9
 800ab84:	0800abb1 	.word	0x0800abb1
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8e:	e050      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab90:	2304      	movs	r3, #4
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab96:	e04c      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9e:	e048      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aba0:	2310      	movs	r3, #16
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba6:	e044      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800aba8:	2320      	movs	r3, #32
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abae:	e040      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800abb0:	2340      	movs	r3, #64	@ 0x40
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb6:	e03c      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800abb8:	2380      	movs	r3, #128	@ 0x80
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abbe:	e038      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a5b      	ldr	r2, [pc, #364]	@ (800ad34 <UART_SetConfig+0x6a8>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d130      	bne.n	800ac2c <UART_SetConfig+0x5a0>
 800abca:	4b57      	ldr	r3, [pc, #348]	@ (800ad28 <UART_SetConfig+0x69c>)
 800abcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	2b05      	cmp	r3, #5
 800abd4:	d826      	bhi.n	800ac24 <UART_SetConfig+0x598>
 800abd6:	a201      	add	r2, pc, #4	@ (adr r2, 800abdc <UART_SetConfig+0x550>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800abfd 	.word	0x0800abfd
 800abe4:	0800ac05 	.word	0x0800ac05
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac15 	.word	0x0800ac15
 800abf0:	0800ac1d 	.word	0x0800ac1d
 800abf4:	2302      	movs	r3, #2
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfa:	e01a      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac02:	e016      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ac04:	2308      	movs	r3, #8
 800ac06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0a:	e012      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac12:	e00e      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ac14:	2320      	movs	r3, #32
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1a:	e00a      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ac1c:	2340      	movs	r3, #64	@ 0x40
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac22:	e006      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ac24:	2380      	movs	r3, #128	@ 0x80
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2a:	e002      	b.n	800ac32 <UART_SetConfig+0x5a6>
 800ac2c:	2380      	movs	r3, #128	@ 0x80
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a3f      	ldr	r2, [pc, #252]	@ (800ad34 <UART_SetConfig+0x6a8>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	f040 80f8 	bne.w	800ae2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	dc46      	bgt.n	800acd4 <UART_SetConfig+0x648>
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	f2c0 8082 	blt.w	800ad50 <UART_SetConfig+0x6c4>
 800ac4c:	3b02      	subs	r3, #2
 800ac4e:	2b1e      	cmp	r3, #30
 800ac50:	d87e      	bhi.n	800ad50 <UART_SetConfig+0x6c4>
 800ac52:	a201      	add	r2, pc, #4	@ (adr r2, 800ac58 <UART_SetConfig+0x5cc>)
 800ac54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac58:	0800acdb 	.word	0x0800acdb
 800ac5c:	0800ad51 	.word	0x0800ad51
 800ac60:	0800ace3 	.word	0x0800ace3
 800ac64:	0800ad51 	.word	0x0800ad51
 800ac68:	0800ad51 	.word	0x0800ad51
 800ac6c:	0800ad51 	.word	0x0800ad51
 800ac70:	0800acf3 	.word	0x0800acf3
 800ac74:	0800ad51 	.word	0x0800ad51
 800ac78:	0800ad51 	.word	0x0800ad51
 800ac7c:	0800ad51 	.word	0x0800ad51
 800ac80:	0800ad51 	.word	0x0800ad51
 800ac84:	0800ad51 	.word	0x0800ad51
 800ac88:	0800ad51 	.word	0x0800ad51
 800ac8c:	0800ad51 	.word	0x0800ad51
 800ac90:	0800ad03 	.word	0x0800ad03
 800ac94:	0800ad51 	.word	0x0800ad51
 800ac98:	0800ad51 	.word	0x0800ad51
 800ac9c:	0800ad51 	.word	0x0800ad51
 800aca0:	0800ad51 	.word	0x0800ad51
 800aca4:	0800ad51 	.word	0x0800ad51
 800aca8:	0800ad51 	.word	0x0800ad51
 800acac:	0800ad51 	.word	0x0800ad51
 800acb0:	0800ad51 	.word	0x0800ad51
 800acb4:	0800ad51 	.word	0x0800ad51
 800acb8:	0800ad51 	.word	0x0800ad51
 800acbc:	0800ad51 	.word	0x0800ad51
 800acc0:	0800ad51 	.word	0x0800ad51
 800acc4:	0800ad51 	.word	0x0800ad51
 800acc8:	0800ad51 	.word	0x0800ad51
 800accc:	0800ad51 	.word	0x0800ad51
 800acd0:	0800ad43 	.word	0x0800ad43
 800acd4:	2b40      	cmp	r3, #64	@ 0x40
 800acd6:	d037      	beq.n	800ad48 <UART_SetConfig+0x6bc>
 800acd8:	e03a      	b.n	800ad50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800acda:	f7fd f9a5 	bl	8008028 <HAL_RCCEx_GetD3PCLK1Freq>
 800acde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ace0:	e03c      	b.n	800ad5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ace2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fd f9b4 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf0:	e034      	b.n	800ad5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf2:	f107 0318 	add.w	r3, r7, #24
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fd fb00 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad00:	e02c      	b.n	800ad5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad02:	4b09      	ldr	r3, [pc, #36]	@ (800ad28 <UART_SetConfig+0x69c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d016      	beq.n	800ad3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad0e:	4b06      	ldr	r3, [pc, #24]	@ (800ad28 <UART_SetConfig+0x69c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	08db      	lsrs	r3, r3, #3
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	4a07      	ldr	r2, [pc, #28]	@ (800ad38 <UART_SetConfig+0x6ac>)
 800ad1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad20:	e01c      	b.n	800ad5c <UART_SetConfig+0x6d0>
 800ad22:	bf00      	nop
 800ad24:	40011400 	.word	0x40011400
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	40007800 	.word	0x40007800
 800ad30:	40007c00 	.word	0x40007c00
 800ad34:	58000c00 	.word	0x58000c00
 800ad38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ad3c:	4b9d      	ldr	r3, [pc, #628]	@ (800afb4 <UART_SetConfig+0x928>)
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	e00c      	b.n	800ad5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad42:	4b9d      	ldr	r3, [pc, #628]	@ (800afb8 <UART_SetConfig+0x92c>)
 800ad44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad46:	e009      	b.n	800ad5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4e:	e005      	b.n	800ad5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 81de 	beq.w	800b120 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad68:	4a94      	ldr	r2, [pc, #592]	@ (800afbc <UART_SetConfig+0x930>)
 800ad6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	4413      	add	r3, r2
 800ad82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d305      	bcc.n	800ad94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d903      	bls.n	800ad9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad9a:	e1c1      	b.n	800b120 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad9e:	2200      	movs	r2, #0
 800ada0:	60bb      	str	r3, [r7, #8]
 800ada2:	60fa      	str	r2, [r7, #12]
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada8:	4a84      	ldr	r2, [pc, #528]	@ (800afbc <UART_SetConfig+0x930>)
 800adaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	2200      	movs	r2, #0
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	607a      	str	r2, [r7, #4]
 800adb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adbe:	f7f5 fae7 	bl	8000390 <__aeabi_uldivmod>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4610      	mov	r0, r2
 800adc8:	4619      	mov	r1, r3
 800adca:	f04f 0200 	mov.w	r2, #0
 800adce:	f04f 0300 	mov.w	r3, #0
 800add2:	020b      	lsls	r3, r1, #8
 800add4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800add8:	0202      	lsls	r2, r0, #8
 800adda:	6979      	ldr	r1, [r7, #20]
 800addc:	6849      	ldr	r1, [r1, #4]
 800adde:	0849      	lsrs	r1, r1, #1
 800ade0:	2000      	movs	r0, #0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4605      	mov	r5, r0
 800ade6:	eb12 0804 	adds.w	r8, r2, r4
 800adea:	eb43 0905 	adc.w	r9, r3, r5
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	469a      	mov	sl, r3
 800adf6:	4693      	mov	fp, r2
 800adf8:	4652      	mov	r2, sl
 800adfa:	465b      	mov	r3, fp
 800adfc:	4640      	mov	r0, r8
 800adfe:	4649      	mov	r1, r9
 800ae00:	f7f5 fac6 	bl	8000390 <__aeabi_uldivmod>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4613      	mov	r3, r2
 800ae0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae12:	d308      	bcc.n	800ae26 <UART_SetConfig+0x79a>
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae1a:	d204      	bcs.n	800ae26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae22:	60da      	str	r2, [r3, #12]
 800ae24:	e17c      	b.n	800b120 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae2c:	e178      	b.n	800b120 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae36:	f040 80c5 	bne.w	800afc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ae3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	dc48      	bgt.n	800aed4 <UART_SetConfig+0x848>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	db7b      	blt.n	800af3e <UART_SetConfig+0x8b2>
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	d879      	bhi.n	800af3e <UART_SetConfig+0x8b2>
 800ae4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae50 <UART_SetConfig+0x7c4>)
 800ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae50:	0800aedb 	.word	0x0800aedb
 800ae54:	0800aee3 	.word	0x0800aee3
 800ae58:	0800af3f 	.word	0x0800af3f
 800ae5c:	0800af3f 	.word	0x0800af3f
 800ae60:	0800aeeb 	.word	0x0800aeeb
 800ae64:	0800af3f 	.word	0x0800af3f
 800ae68:	0800af3f 	.word	0x0800af3f
 800ae6c:	0800af3f 	.word	0x0800af3f
 800ae70:	0800aefb 	.word	0x0800aefb
 800ae74:	0800af3f 	.word	0x0800af3f
 800ae78:	0800af3f 	.word	0x0800af3f
 800ae7c:	0800af3f 	.word	0x0800af3f
 800ae80:	0800af3f 	.word	0x0800af3f
 800ae84:	0800af3f 	.word	0x0800af3f
 800ae88:	0800af3f 	.word	0x0800af3f
 800ae8c:	0800af3f 	.word	0x0800af3f
 800ae90:	0800af0b 	.word	0x0800af0b
 800ae94:	0800af3f 	.word	0x0800af3f
 800ae98:	0800af3f 	.word	0x0800af3f
 800ae9c:	0800af3f 	.word	0x0800af3f
 800aea0:	0800af3f 	.word	0x0800af3f
 800aea4:	0800af3f 	.word	0x0800af3f
 800aea8:	0800af3f 	.word	0x0800af3f
 800aeac:	0800af3f 	.word	0x0800af3f
 800aeb0:	0800af3f 	.word	0x0800af3f
 800aeb4:	0800af3f 	.word	0x0800af3f
 800aeb8:	0800af3f 	.word	0x0800af3f
 800aebc:	0800af3f 	.word	0x0800af3f
 800aec0:	0800af3f 	.word	0x0800af3f
 800aec4:	0800af3f 	.word	0x0800af3f
 800aec8:	0800af3f 	.word	0x0800af3f
 800aecc:	0800af3f 	.word	0x0800af3f
 800aed0:	0800af31 	.word	0x0800af31
 800aed4:	2b40      	cmp	r3, #64	@ 0x40
 800aed6:	d02e      	beq.n	800af36 <UART_SetConfig+0x8aa>
 800aed8:	e031      	b.n	800af3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeda:	f7fb fe6f 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 800aede:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aee0:	e033      	b.n	800af4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee2:	f7fb fe81 	bl	8006be8 <HAL_RCC_GetPCLK2Freq>
 800aee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aee8:	e02f      	b.n	800af4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fd f8b0 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef8:	e027      	b.n	800af4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aefa:	f107 0318 	add.w	r3, r7, #24
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fd f9fc 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af08:	e01f      	b.n	800af4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af0a:	4b2d      	ldr	r3, [pc, #180]	@ (800afc0 <UART_SetConfig+0x934>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af16:	4b2a      	ldr	r3, [pc, #168]	@ (800afc0 <UART_SetConfig+0x934>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	08db      	lsrs	r3, r3, #3
 800af1c:	f003 0303 	and.w	r3, r3, #3
 800af20:	4a24      	ldr	r2, [pc, #144]	@ (800afb4 <UART_SetConfig+0x928>)
 800af22:	fa22 f303 	lsr.w	r3, r2, r3
 800af26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af28:	e00f      	b.n	800af4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af2a:	4b22      	ldr	r3, [pc, #136]	@ (800afb4 <UART_SetConfig+0x928>)
 800af2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2e:	e00c      	b.n	800af4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af30:	4b21      	ldr	r3, [pc, #132]	@ (800afb8 <UART_SetConfig+0x92c>)
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af34:	e009      	b.n	800af4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3c:	e005      	b.n	800af4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 80e7 	beq.w	800b120 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af56:	4a19      	ldr	r2, [pc, #100]	@ (800afbc <UART_SetConfig+0x930>)
 800af58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af5c:	461a      	mov	r2, r3
 800af5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af60:	fbb3 f3f2 	udiv	r3, r3, r2
 800af64:	005a      	lsls	r2, r3, #1
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	085b      	lsrs	r3, r3, #1
 800af6c:	441a      	add	r2, r3
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	fbb2 f3f3 	udiv	r3, r2, r3
 800af76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7a:	2b0f      	cmp	r3, #15
 800af7c:	d916      	bls.n	800afac <UART_SetConfig+0x920>
 800af7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af84:	d212      	bcs.n	800afac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f023 030f 	bic.w	r3, r3, #15
 800af8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	085b      	lsrs	r3, r3, #1
 800af94:	b29b      	uxth	r3, r3
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af9e:	4313      	orrs	r3, r2
 800afa0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800afa8:	60da      	str	r2, [r3, #12]
 800afaa:	e0b9      	b.n	800b120 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800afb2:	e0b5      	b.n	800b120 <UART_SetConfig+0xa94>
 800afb4:	03d09000 	.word	0x03d09000
 800afb8:	003d0900 	.word	0x003d0900
 800afbc:	0800ec08 	.word	0x0800ec08
 800afc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800afc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afc8:	2b20      	cmp	r3, #32
 800afca:	dc49      	bgt.n	800b060 <UART_SetConfig+0x9d4>
 800afcc:	2b00      	cmp	r3, #0
 800afce:	db7c      	blt.n	800b0ca <UART_SetConfig+0xa3e>
 800afd0:	2b20      	cmp	r3, #32
 800afd2:	d87a      	bhi.n	800b0ca <UART_SetConfig+0xa3e>
 800afd4:	a201      	add	r2, pc, #4	@ (adr r2, 800afdc <UART_SetConfig+0x950>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800b067 	.word	0x0800b067
 800afe0:	0800b06f 	.word	0x0800b06f
 800afe4:	0800b0cb 	.word	0x0800b0cb
 800afe8:	0800b0cb 	.word	0x0800b0cb
 800afec:	0800b077 	.word	0x0800b077
 800aff0:	0800b0cb 	.word	0x0800b0cb
 800aff4:	0800b0cb 	.word	0x0800b0cb
 800aff8:	0800b0cb 	.word	0x0800b0cb
 800affc:	0800b087 	.word	0x0800b087
 800b000:	0800b0cb 	.word	0x0800b0cb
 800b004:	0800b0cb 	.word	0x0800b0cb
 800b008:	0800b0cb 	.word	0x0800b0cb
 800b00c:	0800b0cb 	.word	0x0800b0cb
 800b010:	0800b0cb 	.word	0x0800b0cb
 800b014:	0800b0cb 	.word	0x0800b0cb
 800b018:	0800b0cb 	.word	0x0800b0cb
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b0cb 	.word	0x0800b0cb
 800b024:	0800b0cb 	.word	0x0800b0cb
 800b028:	0800b0cb 	.word	0x0800b0cb
 800b02c:	0800b0cb 	.word	0x0800b0cb
 800b030:	0800b0cb 	.word	0x0800b0cb
 800b034:	0800b0cb 	.word	0x0800b0cb
 800b038:	0800b0cb 	.word	0x0800b0cb
 800b03c:	0800b0cb 	.word	0x0800b0cb
 800b040:	0800b0cb 	.word	0x0800b0cb
 800b044:	0800b0cb 	.word	0x0800b0cb
 800b048:	0800b0cb 	.word	0x0800b0cb
 800b04c:	0800b0cb 	.word	0x0800b0cb
 800b050:	0800b0cb 	.word	0x0800b0cb
 800b054:	0800b0cb 	.word	0x0800b0cb
 800b058:	0800b0cb 	.word	0x0800b0cb
 800b05c:	0800b0bd 	.word	0x0800b0bd
 800b060:	2b40      	cmp	r3, #64	@ 0x40
 800b062:	d02e      	beq.n	800b0c2 <UART_SetConfig+0xa36>
 800b064:	e031      	b.n	800b0ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b066:	f7fb fda9 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 800b06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b06c:	e033      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b06e:	f7fb fdbb 	bl	8006be8 <HAL_RCC_GetPCLK2Freq>
 800b072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b074:	e02f      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fc ffea 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b084:	e027      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b086:	f107 0318 	add.w	r3, r7, #24
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fd f936 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	e01f      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b096:	4b2d      	ldr	r3, [pc, #180]	@ (800b14c <UART_SetConfig+0xac0>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b14c <UART_SetConfig+0xac0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	08db      	lsrs	r3, r3, #3
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	4a28      	ldr	r2, [pc, #160]	@ (800b150 <UART_SetConfig+0xac4>)
 800b0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0b4:	e00f      	b.n	800b0d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b0b6:	4b26      	ldr	r3, [pc, #152]	@ (800b150 <UART_SetConfig+0xac4>)
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ba:	e00c      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0bc:	4b25      	ldr	r3, [pc, #148]	@ (800b154 <UART_SetConfig+0xac8>)
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e009      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e005      	b.n	800b0d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0d4:	bf00      	nop
    }

    if (pclk != 0U)
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d021      	beq.n	800b120 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b158 <UART_SetConfig+0xacc>)
 800b0e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	085b      	lsrs	r3, r3, #1
 800b0f4:	441a      	add	r2, r3
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b102:	2b0f      	cmp	r3, #15
 800b104:	d909      	bls.n	800b11a <UART_SetConfig+0xa8e>
 800b106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b10c:	d205      	bcs.n	800b11a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	b29a      	uxth	r2, r3
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	60da      	str	r2, [r3, #12]
 800b118:	e002      	b.n	800b120 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2201      	movs	r2, #1
 800b124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2200      	movs	r2, #0
 800b134:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2200      	movs	r2, #0
 800b13a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b13c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b140:	4618      	mov	r0, r3
 800b142:	3748      	adds	r7, #72	@ 0x48
 800b144:	46bd      	mov	sp, r7
 800b146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b14a:	bf00      	nop
 800b14c:	58024400 	.word	0x58024400
 800b150:	03d09000 	.word	0x03d09000
 800b154:	003d0900 	.word	0x003d0900
 800b158:	0800ec08 	.word	0x0800ec08

0800b15c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b168:	f003 0308 	and.w	r3, r3, #8
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ce:	f003 0304 	and.w	r3, r3, #4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f0:	f003 0310 	and.w	r3, r3, #16
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	f003 0320 	and.w	r3, r3, #32
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d01a      	beq.n	800b272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	430a      	orrs	r2, r1
 800b250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b25a:	d10a      	bne.n	800b272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	430a      	orrs	r2, r1
 800b292:	605a      	str	r2, [r3, #4]
  }
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b098      	sub	sp, #96	@ 0x60
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2b0:	f7f7 fe84 	bl	8002fbc <HAL_GetTick>
 800b2b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d12f      	bne.n	800b324 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f88e 	bl	800b3f4 <UART_WaitOnFlagUntilTimeout>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d022      	beq.n	800b324 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e6      	bne.n	800b2de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e063      	b.n	800b3ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0304 	and.w	r3, r3, #4
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d149      	bne.n	800b3c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b332:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b33a:	2200      	movs	r2, #0
 800b33c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f857 	bl	800b3f4 <UART_WaitOnFlagUntilTimeout>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d03c      	beq.n	800b3c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	e853 3f00 	ldrex	r3, [r3]
 800b358:	623b      	str	r3, [r7, #32]
   return(result);
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b360:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b36a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b36c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e6      	bne.n	800b34c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3308      	adds	r3, #8
 800b384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f023 0301 	bic.w	r3, r3, #1
 800b394:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3308      	adds	r3, #8
 800b39c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b39e:	61fa      	str	r2, [r7, #28]
 800b3a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	69b9      	ldr	r1, [r7, #24]
 800b3a4:	69fa      	ldr	r2, [r7, #28]
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e5      	bne.n	800b37e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e012      	b.n	800b3ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3758      	adds	r7, #88	@ 0x58
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4613      	mov	r3, r2
 800b402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b404:	e04f      	b.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40c:	d04b      	beq.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b40e:	f7f7 fdd5 	bl	8002fbc <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	69ba      	ldr	r2, [r7, #24]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d302      	bcc.n	800b424 <UART_WaitOnFlagUntilTimeout+0x30>
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e04e      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0304 	and.w	r3, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d037      	beq.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b80      	cmp	r3, #128	@ 0x80
 800b43a:	d034      	beq.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b40      	cmp	r3, #64	@ 0x40
 800b440:	d031      	beq.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	f003 0308 	and.w	r3, r3, #8
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d110      	bne.n	800b472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2208      	movs	r2, #8
 800b456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f839 	bl	800b4d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2208      	movs	r2, #8
 800b462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e029      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b47c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b480:	d111      	bne.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b48a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f81f 	bl	800b4d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2220      	movs	r2, #32
 800b496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e00f      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	69da      	ldr	r2, [r3, #28]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	bf0c      	ite	eq
 800b4b6:	2301      	moveq	r3, #1
 800b4b8:	2300      	movne	r3, #0
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	461a      	mov	r2, r3
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d0a0      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b095      	sub	sp, #84	@ 0x54
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e6      	bne.n	800b4d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3308      	adds	r3, #8
 800b510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	61fb      	str	r3, [r7, #28]
   return(result);
 800b51a:	69fa      	ldr	r2, [r7, #28]
 800b51c:	4b1e      	ldr	r3, [pc, #120]	@ (800b598 <UART_EndRxTransfer+0xc8>)
 800b51e:	4013      	ands	r3, r2
 800b520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3308      	adds	r3, #8
 800b528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b52a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b52c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e5      	bne.n	800b50a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b542:	2b01      	cmp	r3, #1
 800b544:	d118      	bne.n	800b578 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	60bb      	str	r3, [r7, #8]
   return(result);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f023 0310 	bic.w	r3, r3, #16
 800b55a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	461a      	mov	r2, r3
 800b562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	6979      	ldr	r1, [r7, #20]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	613b      	str	r3, [r7, #16]
   return(result);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e6      	bne.n	800b546 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b58c:	bf00      	nop
 800b58e:	3754      	adds	r7, #84	@ 0x54
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	effffffe 	.word	0xeffffffe

0800b59c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7ff f850 	bl	800a660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5c0:	bf00      	nop
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5e4:	61fb      	str	r3, [r7, #28]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	61bb      	str	r3, [r7, #24]
 800b5f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e6      	bne.n	800b5d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff f81b 	bl	800a64c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b616:	bf00      	nop
 800b618:	3720      	adds	r7, #32
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b632:	b480      	push	{r7}
 800b634:	b083      	sub	sp, #12
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <HAL_UARTEx_DisableFifoMode+0x16>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e027      	b.n	800b6c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2224      	movs	r2, #36	@ 0x24
 800b67c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0201 	bic.w	r2, r2, #1
 800b696:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b69e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d101      	bne.n	800b6e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e02d      	b.n	800b740 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2224      	movs	r2, #36	@ 0x24
 800b6f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f022 0201 	bic.w	r2, r2, #1
 800b70a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	430a      	orrs	r2, r1
 800b71e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f84f 	bl	800b7c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2220      	movs	r2, #32
 800b732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e02d      	b.n	800b7bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2224      	movs	r2, #36	@ 0x24
 800b76c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f022 0201 	bic.w	r2, r2, #1
 800b786:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	430a      	orrs	r2, r1
 800b79a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f811 	bl	800b7c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d108      	bne.n	800b7e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7e4:	e031      	b.n	800b84a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7e6:	2310      	movs	r3, #16
 800b7e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	0e5b      	lsrs	r3, r3, #25
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	0f5b      	lsrs	r3, r3, #29
 800b806:	b2db      	uxtb	r3, r3
 800b808:	f003 0307 	and.w	r3, r3, #7
 800b80c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
 800b810:	7b3a      	ldrb	r2, [r7, #12]
 800b812:	4911      	ldr	r1, [pc, #68]	@ (800b858 <UARTEx_SetNbDataToProcess+0x94>)
 800b814:	5c8a      	ldrb	r2, [r1, r2]
 800b816:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b81a:	7b3a      	ldrb	r2, [r7, #12]
 800b81c:	490f      	ldr	r1, [pc, #60]	@ (800b85c <UARTEx_SetNbDataToProcess+0x98>)
 800b81e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b820:	fb93 f3f2 	sdiv	r3, r3, r2
 800b824:	b29a      	uxth	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	7b7a      	ldrb	r2, [r7, #13]
 800b830:	4909      	ldr	r1, [pc, #36]	@ (800b858 <UARTEx_SetNbDataToProcess+0x94>)
 800b832:	5c8a      	ldrb	r2, [r1, r2]
 800b834:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b838:	7b7a      	ldrb	r2, [r7, #13]
 800b83a:	4908      	ldr	r1, [pc, #32]	@ (800b85c <UARTEx_SetNbDataToProcess+0x98>)
 800b83c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b83e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b842:	b29a      	uxth	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b84a:	bf00      	nop
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	0800ec20 	.word	0x0800ec20
 800b85c:	0800ec28 	.word	0x0800ec28

0800b860 <__cvt>:
 800b860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b862:	ed2d 8b02 	vpush	{d8}
 800b866:	eeb0 8b40 	vmov.f64	d8, d0
 800b86a:	b085      	sub	sp, #20
 800b86c:	4617      	mov	r7, r2
 800b86e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b870:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b872:	ee18 2a90 	vmov	r2, s17
 800b876:	f025 0520 	bic.w	r5, r5, #32
 800b87a:	2a00      	cmp	r2, #0
 800b87c:	bfb6      	itet	lt
 800b87e:	222d      	movlt	r2, #45	@ 0x2d
 800b880:	2200      	movge	r2, #0
 800b882:	eeb1 8b40 	vneglt.f64	d8, d0
 800b886:	2d46      	cmp	r5, #70	@ 0x46
 800b888:	460c      	mov	r4, r1
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	d004      	beq.n	800b898 <__cvt+0x38>
 800b88e:	2d45      	cmp	r5, #69	@ 0x45
 800b890:	d100      	bne.n	800b894 <__cvt+0x34>
 800b892:	3401      	adds	r4, #1
 800b894:	2102      	movs	r1, #2
 800b896:	e000      	b.n	800b89a <__cvt+0x3a>
 800b898:	2103      	movs	r1, #3
 800b89a:	ab03      	add	r3, sp, #12
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	ab02      	add	r3, sp, #8
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	4622      	mov	r2, r4
 800b8a4:	4633      	mov	r3, r6
 800b8a6:	eeb0 0b48 	vmov.f64	d0, d8
 800b8aa:	f000 fe21 	bl	800c4f0 <_dtoa_r>
 800b8ae:	2d47      	cmp	r5, #71	@ 0x47
 800b8b0:	d114      	bne.n	800b8dc <__cvt+0x7c>
 800b8b2:	07fb      	lsls	r3, r7, #31
 800b8b4:	d50a      	bpl.n	800b8cc <__cvt+0x6c>
 800b8b6:	1902      	adds	r2, r0, r4
 800b8b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	bf08      	it	eq
 800b8c2:	9203      	streq	r2, [sp, #12]
 800b8c4:	2130      	movs	r1, #48	@ 0x30
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d319      	bcc.n	800b900 <__cvt+0xa0>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8d0:	1a1b      	subs	r3, r3, r0
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	b005      	add	sp, #20
 800b8d6:	ecbd 8b02 	vpop	{d8}
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8dc:	2d46      	cmp	r5, #70	@ 0x46
 800b8de:	eb00 0204 	add.w	r2, r0, r4
 800b8e2:	d1e9      	bne.n	800b8b8 <__cvt+0x58>
 800b8e4:	7803      	ldrb	r3, [r0, #0]
 800b8e6:	2b30      	cmp	r3, #48	@ 0x30
 800b8e8:	d107      	bne.n	800b8fa <__cvt+0x9a>
 800b8ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f2:	bf1c      	itt	ne
 800b8f4:	f1c4 0401 	rsbne	r4, r4, #1
 800b8f8:	6034      	strne	r4, [r6, #0]
 800b8fa:	6833      	ldr	r3, [r6, #0]
 800b8fc:	441a      	add	r2, r3
 800b8fe:	e7db      	b.n	800b8b8 <__cvt+0x58>
 800b900:	1c5c      	adds	r4, r3, #1
 800b902:	9403      	str	r4, [sp, #12]
 800b904:	7019      	strb	r1, [r3, #0]
 800b906:	e7de      	b.n	800b8c6 <__cvt+0x66>

0800b908 <__exponent>:
 800b908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b90a:	2900      	cmp	r1, #0
 800b90c:	bfba      	itte	lt
 800b90e:	4249      	neglt	r1, r1
 800b910:	232d      	movlt	r3, #45	@ 0x2d
 800b912:	232b      	movge	r3, #43	@ 0x2b
 800b914:	2909      	cmp	r1, #9
 800b916:	7002      	strb	r2, [r0, #0]
 800b918:	7043      	strb	r3, [r0, #1]
 800b91a:	dd29      	ble.n	800b970 <__exponent+0x68>
 800b91c:	f10d 0307 	add.w	r3, sp, #7
 800b920:	461d      	mov	r5, r3
 800b922:	270a      	movs	r7, #10
 800b924:	461a      	mov	r2, r3
 800b926:	fbb1 f6f7 	udiv	r6, r1, r7
 800b92a:	fb07 1416 	mls	r4, r7, r6, r1
 800b92e:	3430      	adds	r4, #48	@ 0x30
 800b930:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b934:	460c      	mov	r4, r1
 800b936:	2c63      	cmp	r4, #99	@ 0x63
 800b938:	f103 33ff 	add.w	r3, r3, #4294967295
 800b93c:	4631      	mov	r1, r6
 800b93e:	dcf1      	bgt.n	800b924 <__exponent+0x1c>
 800b940:	3130      	adds	r1, #48	@ 0x30
 800b942:	1e94      	subs	r4, r2, #2
 800b944:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b948:	1c41      	adds	r1, r0, #1
 800b94a:	4623      	mov	r3, r4
 800b94c:	42ab      	cmp	r3, r5
 800b94e:	d30a      	bcc.n	800b966 <__exponent+0x5e>
 800b950:	f10d 0309 	add.w	r3, sp, #9
 800b954:	1a9b      	subs	r3, r3, r2
 800b956:	42ac      	cmp	r4, r5
 800b958:	bf88      	it	hi
 800b95a:	2300      	movhi	r3, #0
 800b95c:	3302      	adds	r3, #2
 800b95e:	4403      	add	r3, r0
 800b960:	1a18      	subs	r0, r3, r0
 800b962:	b003      	add	sp, #12
 800b964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b966:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b96a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b96e:	e7ed      	b.n	800b94c <__exponent+0x44>
 800b970:	2330      	movs	r3, #48	@ 0x30
 800b972:	3130      	adds	r1, #48	@ 0x30
 800b974:	7083      	strb	r3, [r0, #2]
 800b976:	70c1      	strb	r1, [r0, #3]
 800b978:	1d03      	adds	r3, r0, #4
 800b97a:	e7f1      	b.n	800b960 <__exponent+0x58>
 800b97c:	0000      	movs	r0, r0
	...

0800b980 <_printf_float>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	b08d      	sub	sp, #52	@ 0x34
 800b986:	460c      	mov	r4, r1
 800b988:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b98c:	4616      	mov	r6, r2
 800b98e:	461f      	mov	r7, r3
 800b990:	4605      	mov	r5, r0
 800b992:	f000 fcab 	bl	800c2ec <_localeconv_r>
 800b996:	f8d0 b000 	ldr.w	fp, [r0]
 800b99a:	4658      	mov	r0, fp
 800b99c:	f7f4 fcf0 	bl	8000380 <strlen>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b9ac:	6822      	ldr	r2, [r4, #0]
 800b9ae:	9005      	str	r0, [sp, #20]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	f023 0307 	bic.w	r3, r3, #7
 800b9b6:	f103 0108 	add.w	r1, r3, #8
 800b9ba:	f8c8 1000 	str.w	r1, [r8]
 800b9be:	ed93 0b00 	vldr	d0, [r3]
 800b9c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bc20 <_printf_float+0x2a0>
 800b9c6:	eeb0 7bc0 	vabs.f64	d7, d0
 800b9ca:	eeb4 7b46 	vcmp.f64	d7, d6
 800b9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b9d6:	dd24      	ble.n	800ba22 <_printf_float+0xa2>
 800b9d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e0:	d502      	bpl.n	800b9e8 <_printf_float+0x68>
 800b9e2:	232d      	movs	r3, #45	@ 0x2d
 800b9e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9e8:	498f      	ldr	r1, [pc, #572]	@ (800bc28 <_printf_float+0x2a8>)
 800b9ea:	4b90      	ldr	r3, [pc, #576]	@ (800bc2c <_printf_float+0x2ac>)
 800b9ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b9f0:	bf94      	ite	ls
 800b9f2:	4688      	movls	r8, r1
 800b9f4:	4698      	movhi	r8, r3
 800b9f6:	f022 0204 	bic.w	r2, r2, #4
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	6123      	str	r3, [r4, #16]
 800b9fe:	6022      	str	r2, [r4, #0]
 800ba00:	f04f 0a00 	mov.w	sl, #0
 800ba04:	9700      	str	r7, [sp, #0]
 800ba06:	4633      	mov	r3, r6
 800ba08:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f000 f9d1 	bl	800bdb4 <_printf_common>
 800ba12:	3001      	adds	r0, #1
 800ba14:	f040 8089 	bne.w	800bb2a <_printf_float+0x1aa>
 800ba18:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1c:	b00d      	add	sp, #52	@ 0x34
 800ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba22:	eeb4 0b40 	vcmp.f64	d0, d0
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	d709      	bvc.n	800ba40 <_printf_float+0xc0>
 800ba2c:	ee10 3a90 	vmov	r3, s1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfbc      	itt	lt
 800ba34:	232d      	movlt	r3, #45	@ 0x2d
 800ba36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba3a:	497d      	ldr	r1, [pc, #500]	@ (800bc30 <_printf_float+0x2b0>)
 800ba3c:	4b7d      	ldr	r3, [pc, #500]	@ (800bc34 <_printf_float+0x2b4>)
 800ba3e:	e7d5      	b.n	800b9ec <_printf_float+0x6c>
 800ba40:	6863      	ldr	r3, [r4, #4]
 800ba42:	1c59      	adds	r1, r3, #1
 800ba44:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ba48:	d139      	bne.n	800babe <_printf_float+0x13e>
 800ba4a:	2306      	movs	r3, #6
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba52:	2300      	movs	r3, #0
 800ba54:	6022      	str	r2, [r4, #0]
 800ba56:	9303      	str	r3, [sp, #12]
 800ba58:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ba5e:	ab09      	add	r3, sp, #36	@ 0x24
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	6861      	ldr	r1, [r4, #4]
 800ba64:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f7ff fef9 	bl	800b860 <__cvt>
 800ba6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba74:	4680      	mov	r8, r0
 800ba76:	d129      	bne.n	800bacc <_printf_float+0x14c>
 800ba78:	1cc8      	adds	r0, r1, #3
 800ba7a:	db02      	blt.n	800ba82 <_printf_float+0x102>
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	4299      	cmp	r1, r3
 800ba80:	dd41      	ble.n	800bb06 <_printf_float+0x186>
 800ba82:	f1a9 0902 	sub.w	r9, r9, #2
 800ba86:	fa5f f989 	uxtb.w	r9, r9
 800ba8a:	3901      	subs	r1, #1
 800ba8c:	464a      	mov	r2, r9
 800ba8e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba94:	f7ff ff38 	bl	800b908 <__exponent>
 800ba98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba9a:	1813      	adds	r3, r2, r0
 800ba9c:	2a01      	cmp	r2, #1
 800ba9e:	4682      	mov	sl, r0
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	dc02      	bgt.n	800baaa <_printf_float+0x12a>
 800baa4:	6822      	ldr	r2, [r4, #0]
 800baa6:	07d2      	lsls	r2, r2, #31
 800baa8:	d501      	bpl.n	800baae <_printf_float+0x12e>
 800baaa:	3301      	adds	r3, #1
 800baac:	6123      	str	r3, [r4, #16]
 800baae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0a6      	beq.n	800ba04 <_printf_float+0x84>
 800bab6:	232d      	movs	r3, #45	@ 0x2d
 800bab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800babc:	e7a2      	b.n	800ba04 <_printf_float+0x84>
 800babe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bac2:	d1c4      	bne.n	800ba4e <_printf_float+0xce>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1c2      	bne.n	800ba4e <_printf_float+0xce>
 800bac8:	2301      	movs	r3, #1
 800baca:	e7bf      	b.n	800ba4c <_printf_float+0xcc>
 800bacc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bad0:	d9db      	bls.n	800ba8a <_printf_float+0x10a>
 800bad2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bad6:	d118      	bne.n	800bb0a <_printf_float+0x18a>
 800bad8:	2900      	cmp	r1, #0
 800bada:	6863      	ldr	r3, [r4, #4]
 800badc:	dd0b      	ble.n	800baf6 <_printf_float+0x176>
 800bade:	6121      	str	r1, [r4, #16]
 800bae0:	b913      	cbnz	r3, 800bae8 <_printf_float+0x168>
 800bae2:	6822      	ldr	r2, [r4, #0]
 800bae4:	07d0      	lsls	r0, r2, #31
 800bae6:	d502      	bpl.n	800baee <_printf_float+0x16e>
 800bae8:	3301      	adds	r3, #1
 800baea:	440b      	add	r3, r1
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	65a1      	str	r1, [r4, #88]	@ 0x58
 800baf0:	f04f 0a00 	mov.w	sl, #0
 800baf4:	e7db      	b.n	800baae <_printf_float+0x12e>
 800baf6:	b913      	cbnz	r3, 800bafe <_printf_float+0x17e>
 800baf8:	6822      	ldr	r2, [r4, #0]
 800bafa:	07d2      	lsls	r2, r2, #31
 800bafc:	d501      	bpl.n	800bb02 <_printf_float+0x182>
 800bafe:	3302      	adds	r3, #2
 800bb00:	e7f4      	b.n	800baec <_printf_float+0x16c>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e7f2      	b.n	800baec <_printf_float+0x16c>
 800bb06:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bb0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	db05      	blt.n	800bb1c <_printf_float+0x19c>
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	6121      	str	r1, [r4, #16]
 800bb14:	07d8      	lsls	r0, r3, #31
 800bb16:	d5ea      	bpl.n	800baee <_printf_float+0x16e>
 800bb18:	1c4b      	adds	r3, r1, #1
 800bb1a:	e7e7      	b.n	800baec <_printf_float+0x16c>
 800bb1c:	2900      	cmp	r1, #0
 800bb1e:	bfd4      	ite	le
 800bb20:	f1c1 0202 	rsble	r2, r1, #2
 800bb24:	2201      	movgt	r2, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	e7e0      	b.n	800baec <_printf_float+0x16c>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	055a      	lsls	r2, r3, #21
 800bb2e:	d407      	bmi.n	800bb40 <_printf_float+0x1c0>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	4642      	mov	r2, r8
 800bb34:	4631      	mov	r1, r6
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d12a      	bne.n	800bb94 <_printf_float+0x214>
 800bb3e:	e76b      	b.n	800ba18 <_printf_float+0x98>
 800bb40:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bb44:	f240 80e0 	bls.w	800bd08 <_printf_float+0x388>
 800bb48:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bb4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	d133      	bne.n	800bbbe <_printf_float+0x23e>
 800bb56:	4a38      	ldr	r2, [pc, #224]	@ (800bc38 <_printf_float+0x2b8>)
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b8      	blx	r7
 800bb60:	3001      	adds	r0, #1
 800bb62:	f43f af59 	beq.w	800ba18 <_printf_float+0x98>
 800bb66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb6a:	4543      	cmp	r3, r8
 800bb6c:	db02      	blt.n	800bb74 <_printf_float+0x1f4>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	07d8      	lsls	r0, r3, #31
 800bb72:	d50f      	bpl.n	800bb94 <_printf_float+0x214>
 800bb74:	9b05      	ldr	r3, [sp, #20]
 800bb76:	465a      	mov	r2, fp
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af4a 	beq.w	800ba18 <_printf_float+0x98>
 800bb84:	f04f 0900 	mov.w	r9, #0
 800bb88:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb8c:	f104 0a1a 	add.w	sl, r4, #26
 800bb90:	45c8      	cmp	r8, r9
 800bb92:	dc09      	bgt.n	800bba8 <_printf_float+0x228>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	079b      	lsls	r3, r3, #30
 800bb98:	f100 8107 	bmi.w	800bdaa <_printf_float+0x42a>
 800bb9c:	68e0      	ldr	r0, [r4, #12]
 800bb9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba0:	4298      	cmp	r0, r3
 800bba2:	bfb8      	it	lt
 800bba4:	4618      	movlt	r0, r3
 800bba6:	e739      	b.n	800ba1c <_printf_float+0x9c>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	4652      	mov	r2, sl
 800bbac:	4631      	mov	r1, r6
 800bbae:	4628      	mov	r0, r5
 800bbb0:	47b8      	blx	r7
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f43f af30 	beq.w	800ba18 <_printf_float+0x98>
 800bbb8:	f109 0901 	add.w	r9, r9, #1
 800bbbc:	e7e8      	b.n	800bb90 <_printf_float+0x210>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	dc3b      	bgt.n	800bc3c <_printf_float+0x2bc>
 800bbc4:	4a1c      	ldr	r2, [pc, #112]	@ (800bc38 <_printf_float+0x2b8>)
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b8      	blx	r7
 800bbce:	3001      	adds	r0, #1
 800bbd0:	f43f af22 	beq.w	800ba18 <_printf_float+0x98>
 800bbd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bbd8:	ea59 0303 	orrs.w	r3, r9, r3
 800bbdc:	d102      	bne.n	800bbe4 <_printf_float+0x264>
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	07d9      	lsls	r1, r3, #31
 800bbe2:	d5d7      	bpl.n	800bb94 <_printf_float+0x214>
 800bbe4:	9b05      	ldr	r3, [sp, #20]
 800bbe6:	465a      	mov	r2, fp
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b8      	blx	r7
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f43f af12 	beq.w	800ba18 <_printf_float+0x98>
 800bbf4:	f04f 0a00 	mov.w	sl, #0
 800bbf8:	f104 0b1a 	add.w	fp, r4, #26
 800bbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbfe:	425b      	negs	r3, r3
 800bc00:	4553      	cmp	r3, sl
 800bc02:	dc01      	bgt.n	800bc08 <_printf_float+0x288>
 800bc04:	464b      	mov	r3, r9
 800bc06:	e794      	b.n	800bb32 <_printf_float+0x1b2>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	465a      	mov	r2, fp
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	f43f af00 	beq.w	800ba18 <_printf_float+0x98>
 800bc18:	f10a 0a01 	add.w	sl, sl, #1
 800bc1c:	e7ee      	b.n	800bbfc <_printf_float+0x27c>
 800bc1e:	bf00      	nop
 800bc20:	ffffffff 	.word	0xffffffff
 800bc24:	7fefffff 	.word	0x7fefffff
 800bc28:	0800ec30 	.word	0x0800ec30
 800bc2c:	0800ec34 	.word	0x0800ec34
 800bc30:	0800ec38 	.word	0x0800ec38
 800bc34:	0800ec3c 	.word	0x0800ec3c
 800bc38:	0800ec40 	.word	0x0800ec40
 800bc3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc42:	4553      	cmp	r3, sl
 800bc44:	bfa8      	it	ge
 800bc46:	4653      	movge	r3, sl
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	4699      	mov	r9, r3
 800bc4c:	dc37      	bgt.n	800bcbe <_printf_float+0x33e>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9307      	str	r3, [sp, #28]
 800bc52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc56:	f104 021a 	add.w	r2, r4, #26
 800bc5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc5c:	9907      	ldr	r1, [sp, #28]
 800bc5e:	9306      	str	r3, [sp, #24]
 800bc60:	eba3 0309 	sub.w	r3, r3, r9
 800bc64:	428b      	cmp	r3, r1
 800bc66:	dc31      	bgt.n	800bccc <_printf_float+0x34c>
 800bc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6a:	459a      	cmp	sl, r3
 800bc6c:	dc3b      	bgt.n	800bce6 <_printf_float+0x366>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	07da      	lsls	r2, r3, #31
 800bc72:	d438      	bmi.n	800bce6 <_printf_float+0x366>
 800bc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc76:	ebaa 0903 	sub.w	r9, sl, r3
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	ebaa 0303 	sub.w	r3, sl, r3
 800bc80:	4599      	cmp	r9, r3
 800bc82:	bfa8      	it	ge
 800bc84:	4699      	movge	r9, r3
 800bc86:	f1b9 0f00 	cmp.w	r9, #0
 800bc8a:	dc34      	bgt.n	800bcf6 <_printf_float+0x376>
 800bc8c:	f04f 0800 	mov.w	r8, #0
 800bc90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc94:	f104 0b1a 	add.w	fp, r4, #26
 800bc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9a:	ebaa 0303 	sub.w	r3, sl, r3
 800bc9e:	eba3 0309 	sub.w	r3, r3, r9
 800bca2:	4543      	cmp	r3, r8
 800bca4:	f77f af76 	ble.w	800bb94 <_printf_float+0x214>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	465a      	mov	r2, fp
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f aeb0 	beq.w	800ba18 <_printf_float+0x98>
 800bcb8:	f108 0801 	add.w	r8, r8, #1
 800bcbc:	e7ec      	b.n	800bc98 <_printf_float+0x318>
 800bcbe:	4642      	mov	r2, r8
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b8      	blx	r7
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	d1c1      	bne.n	800bc4e <_printf_float+0x2ce>
 800bcca:	e6a5      	b.n	800ba18 <_printf_float+0x98>
 800bccc:	2301      	movs	r3, #1
 800bcce:	4631      	mov	r1, r6
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	9206      	str	r2, [sp, #24]
 800bcd4:	47b8      	blx	r7
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	f43f ae9e 	beq.w	800ba18 <_printf_float+0x98>
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	9a06      	ldr	r2, [sp, #24]
 800bce0:	3301      	adds	r3, #1
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	e7b9      	b.n	800bc5a <_printf_float+0x2da>
 800bce6:	9b05      	ldr	r3, [sp, #20]
 800bce8:	465a      	mov	r2, fp
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d1bf      	bne.n	800bc74 <_printf_float+0x2f4>
 800bcf4:	e690      	b.n	800ba18 <_printf_float+0x98>
 800bcf6:	9a06      	ldr	r2, [sp, #24]
 800bcf8:	464b      	mov	r3, r9
 800bcfa:	4442      	add	r2, r8
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	47b8      	blx	r7
 800bd02:	3001      	adds	r0, #1
 800bd04:	d1c2      	bne.n	800bc8c <_printf_float+0x30c>
 800bd06:	e687      	b.n	800ba18 <_printf_float+0x98>
 800bd08:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bd0c:	f1b9 0f01 	cmp.w	r9, #1
 800bd10:	dc01      	bgt.n	800bd16 <_printf_float+0x396>
 800bd12:	07db      	lsls	r3, r3, #31
 800bd14:	d536      	bpl.n	800bd84 <_printf_float+0x404>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4642      	mov	r2, r8
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b8      	blx	r7
 800bd20:	3001      	adds	r0, #1
 800bd22:	f43f ae79 	beq.w	800ba18 <_printf_float+0x98>
 800bd26:	9b05      	ldr	r3, [sp, #20]
 800bd28:	465a      	mov	r2, fp
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	47b8      	blx	r7
 800bd30:	3001      	adds	r0, #1
 800bd32:	f43f ae71 	beq.w	800ba18 <_printf_float+0x98>
 800bd36:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bd3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd46:	d018      	beq.n	800bd7a <_printf_float+0x3fa>
 800bd48:	464b      	mov	r3, r9
 800bd4a:	f108 0201 	add.w	r2, r8, #1
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	d10c      	bne.n	800bd72 <_printf_float+0x3f2>
 800bd58:	e65e      	b.n	800ba18 <_printf_float+0x98>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	465a      	mov	r2, fp
 800bd5e:	4631      	mov	r1, r6
 800bd60:	4628      	mov	r0, r5
 800bd62:	47b8      	blx	r7
 800bd64:	3001      	adds	r0, #1
 800bd66:	f43f ae57 	beq.w	800ba18 <_printf_float+0x98>
 800bd6a:	f108 0801 	add.w	r8, r8, #1
 800bd6e:	45c8      	cmp	r8, r9
 800bd70:	dbf3      	blt.n	800bd5a <_printf_float+0x3da>
 800bd72:	4653      	mov	r3, sl
 800bd74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd78:	e6dc      	b.n	800bb34 <_printf_float+0x1b4>
 800bd7a:	f04f 0800 	mov.w	r8, #0
 800bd7e:	f104 0b1a 	add.w	fp, r4, #26
 800bd82:	e7f4      	b.n	800bd6e <_printf_float+0x3ee>
 800bd84:	2301      	movs	r3, #1
 800bd86:	4642      	mov	r2, r8
 800bd88:	e7e1      	b.n	800bd4e <_printf_float+0x3ce>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	464a      	mov	r2, r9
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4628      	mov	r0, r5
 800bd92:	47b8      	blx	r7
 800bd94:	3001      	adds	r0, #1
 800bd96:	f43f ae3f 	beq.w	800ba18 <_printf_float+0x98>
 800bd9a:	f108 0801 	add.w	r8, r8, #1
 800bd9e:	68e3      	ldr	r3, [r4, #12]
 800bda0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bda2:	1a5b      	subs	r3, r3, r1
 800bda4:	4543      	cmp	r3, r8
 800bda6:	dcf0      	bgt.n	800bd8a <_printf_float+0x40a>
 800bda8:	e6f8      	b.n	800bb9c <_printf_float+0x21c>
 800bdaa:	f04f 0800 	mov.w	r8, #0
 800bdae:	f104 0919 	add.w	r9, r4, #25
 800bdb2:	e7f4      	b.n	800bd9e <_printf_float+0x41e>

0800bdb4 <_printf_common>:
 800bdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb8:	4616      	mov	r6, r2
 800bdba:	4698      	mov	r8, r3
 800bdbc:	688a      	ldr	r2, [r1, #8]
 800bdbe:	690b      	ldr	r3, [r1, #16]
 800bdc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	bfb8      	it	lt
 800bdc8:	4613      	movlt	r3, r2
 800bdca:	6033      	str	r3, [r6, #0]
 800bdcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b10a      	cbz	r2, 800bdda <_printf_common+0x26>
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	6033      	str	r3, [r6, #0]
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	0699      	lsls	r1, r3, #26
 800bdde:	bf42      	ittt	mi
 800bde0:	6833      	ldrmi	r3, [r6, #0]
 800bde2:	3302      	addmi	r3, #2
 800bde4:	6033      	strmi	r3, [r6, #0]
 800bde6:	6825      	ldr	r5, [r4, #0]
 800bde8:	f015 0506 	ands.w	r5, r5, #6
 800bdec:	d106      	bne.n	800bdfc <_printf_common+0x48>
 800bdee:	f104 0a19 	add.w	sl, r4, #25
 800bdf2:	68e3      	ldr	r3, [r4, #12]
 800bdf4:	6832      	ldr	r2, [r6, #0]
 800bdf6:	1a9b      	subs	r3, r3, r2
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	dc26      	bgt.n	800be4a <_printf_common+0x96>
 800bdfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	3b00      	subs	r3, #0
 800be04:	bf18      	it	ne
 800be06:	2301      	movne	r3, #1
 800be08:	0692      	lsls	r2, r2, #26
 800be0a:	d42b      	bmi.n	800be64 <_printf_common+0xb0>
 800be0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be10:	4641      	mov	r1, r8
 800be12:	4638      	mov	r0, r7
 800be14:	47c8      	blx	r9
 800be16:	3001      	adds	r0, #1
 800be18:	d01e      	beq.n	800be58 <_printf_common+0xa4>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	6922      	ldr	r2, [r4, #16]
 800be1e:	f003 0306 	and.w	r3, r3, #6
 800be22:	2b04      	cmp	r3, #4
 800be24:	bf02      	ittt	eq
 800be26:	68e5      	ldreq	r5, [r4, #12]
 800be28:	6833      	ldreq	r3, [r6, #0]
 800be2a:	1aed      	subeq	r5, r5, r3
 800be2c:	68a3      	ldr	r3, [r4, #8]
 800be2e:	bf0c      	ite	eq
 800be30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be34:	2500      	movne	r5, #0
 800be36:	4293      	cmp	r3, r2
 800be38:	bfc4      	itt	gt
 800be3a:	1a9b      	subgt	r3, r3, r2
 800be3c:	18ed      	addgt	r5, r5, r3
 800be3e:	2600      	movs	r6, #0
 800be40:	341a      	adds	r4, #26
 800be42:	42b5      	cmp	r5, r6
 800be44:	d11a      	bne.n	800be7c <_printf_common+0xc8>
 800be46:	2000      	movs	r0, #0
 800be48:	e008      	b.n	800be5c <_printf_common+0xa8>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4652      	mov	r2, sl
 800be4e:	4641      	mov	r1, r8
 800be50:	4638      	mov	r0, r7
 800be52:	47c8      	blx	r9
 800be54:	3001      	adds	r0, #1
 800be56:	d103      	bne.n	800be60 <_printf_common+0xac>
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be60:	3501      	adds	r5, #1
 800be62:	e7c6      	b.n	800bdf2 <_printf_common+0x3e>
 800be64:	18e1      	adds	r1, r4, r3
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	2030      	movs	r0, #48	@ 0x30
 800be6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be6e:	4422      	add	r2, r4
 800be70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be78:	3302      	adds	r3, #2
 800be7a:	e7c7      	b.n	800be0c <_printf_common+0x58>
 800be7c:	2301      	movs	r3, #1
 800be7e:	4622      	mov	r2, r4
 800be80:	4641      	mov	r1, r8
 800be82:	4638      	mov	r0, r7
 800be84:	47c8      	blx	r9
 800be86:	3001      	adds	r0, #1
 800be88:	d0e6      	beq.n	800be58 <_printf_common+0xa4>
 800be8a:	3601      	adds	r6, #1
 800be8c:	e7d9      	b.n	800be42 <_printf_common+0x8e>
	...

0800be90 <_printf_i>:
 800be90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be94:	7e0f      	ldrb	r7, [r1, #24]
 800be96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be98:	2f78      	cmp	r7, #120	@ 0x78
 800be9a:	4691      	mov	r9, r2
 800be9c:	4680      	mov	r8, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	469a      	mov	sl, r3
 800bea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bea6:	d807      	bhi.n	800beb8 <_printf_i+0x28>
 800bea8:	2f62      	cmp	r7, #98	@ 0x62
 800beaa:	d80a      	bhi.n	800bec2 <_printf_i+0x32>
 800beac:	2f00      	cmp	r7, #0
 800beae:	f000 80d2 	beq.w	800c056 <_printf_i+0x1c6>
 800beb2:	2f58      	cmp	r7, #88	@ 0x58
 800beb4:	f000 80b9 	beq.w	800c02a <_printf_i+0x19a>
 800beb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bec0:	e03a      	b.n	800bf38 <_printf_i+0xa8>
 800bec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bec6:	2b15      	cmp	r3, #21
 800bec8:	d8f6      	bhi.n	800beb8 <_printf_i+0x28>
 800beca:	a101      	add	r1, pc, #4	@ (adr r1, 800bed0 <_printf_i+0x40>)
 800becc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bed0:	0800bf29 	.word	0x0800bf29
 800bed4:	0800bf3d 	.word	0x0800bf3d
 800bed8:	0800beb9 	.word	0x0800beb9
 800bedc:	0800beb9 	.word	0x0800beb9
 800bee0:	0800beb9 	.word	0x0800beb9
 800bee4:	0800beb9 	.word	0x0800beb9
 800bee8:	0800bf3d 	.word	0x0800bf3d
 800beec:	0800beb9 	.word	0x0800beb9
 800bef0:	0800beb9 	.word	0x0800beb9
 800bef4:	0800beb9 	.word	0x0800beb9
 800bef8:	0800beb9 	.word	0x0800beb9
 800befc:	0800c03d 	.word	0x0800c03d
 800bf00:	0800bf67 	.word	0x0800bf67
 800bf04:	0800bff7 	.word	0x0800bff7
 800bf08:	0800beb9 	.word	0x0800beb9
 800bf0c:	0800beb9 	.word	0x0800beb9
 800bf10:	0800c05f 	.word	0x0800c05f
 800bf14:	0800beb9 	.word	0x0800beb9
 800bf18:	0800bf67 	.word	0x0800bf67
 800bf1c:	0800beb9 	.word	0x0800beb9
 800bf20:	0800beb9 	.word	0x0800beb9
 800bf24:	0800bfff 	.word	0x0800bfff
 800bf28:	6833      	ldr	r3, [r6, #0]
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6032      	str	r2, [r6, #0]
 800bf30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e09d      	b.n	800c078 <_printf_i+0x1e8>
 800bf3c:	6833      	ldr	r3, [r6, #0]
 800bf3e:	6820      	ldr	r0, [r4, #0]
 800bf40:	1d19      	adds	r1, r3, #4
 800bf42:	6031      	str	r1, [r6, #0]
 800bf44:	0606      	lsls	r6, r0, #24
 800bf46:	d501      	bpl.n	800bf4c <_printf_i+0xbc>
 800bf48:	681d      	ldr	r5, [r3, #0]
 800bf4a:	e003      	b.n	800bf54 <_printf_i+0xc4>
 800bf4c:	0645      	lsls	r5, r0, #25
 800bf4e:	d5fb      	bpl.n	800bf48 <_printf_i+0xb8>
 800bf50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	da03      	bge.n	800bf60 <_printf_i+0xd0>
 800bf58:	232d      	movs	r3, #45	@ 0x2d
 800bf5a:	426d      	negs	r5, r5
 800bf5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf60:	4859      	ldr	r0, [pc, #356]	@ (800c0c8 <_printf_i+0x238>)
 800bf62:	230a      	movs	r3, #10
 800bf64:	e011      	b.n	800bf8a <_printf_i+0xfa>
 800bf66:	6821      	ldr	r1, [r4, #0]
 800bf68:	6833      	ldr	r3, [r6, #0]
 800bf6a:	0608      	lsls	r0, r1, #24
 800bf6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf70:	d402      	bmi.n	800bf78 <_printf_i+0xe8>
 800bf72:	0649      	lsls	r1, r1, #25
 800bf74:	bf48      	it	mi
 800bf76:	b2ad      	uxthmi	r5, r5
 800bf78:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf7a:	4853      	ldr	r0, [pc, #332]	@ (800c0c8 <_printf_i+0x238>)
 800bf7c:	6033      	str	r3, [r6, #0]
 800bf7e:	bf14      	ite	ne
 800bf80:	230a      	movne	r3, #10
 800bf82:	2308      	moveq	r3, #8
 800bf84:	2100      	movs	r1, #0
 800bf86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf8a:	6866      	ldr	r6, [r4, #4]
 800bf8c:	60a6      	str	r6, [r4, #8]
 800bf8e:	2e00      	cmp	r6, #0
 800bf90:	bfa2      	ittt	ge
 800bf92:	6821      	ldrge	r1, [r4, #0]
 800bf94:	f021 0104 	bicge.w	r1, r1, #4
 800bf98:	6021      	strge	r1, [r4, #0]
 800bf9a:	b90d      	cbnz	r5, 800bfa0 <_printf_i+0x110>
 800bf9c:	2e00      	cmp	r6, #0
 800bf9e:	d04b      	beq.n	800c038 <_printf_i+0x1a8>
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfa6:	fb03 5711 	mls	r7, r3, r1, r5
 800bfaa:	5dc7      	ldrb	r7, [r0, r7]
 800bfac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfb0:	462f      	mov	r7, r5
 800bfb2:	42bb      	cmp	r3, r7
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	d9f4      	bls.n	800bfa2 <_printf_i+0x112>
 800bfb8:	2b08      	cmp	r3, #8
 800bfba:	d10b      	bne.n	800bfd4 <_printf_i+0x144>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	07df      	lsls	r7, r3, #31
 800bfc0:	d508      	bpl.n	800bfd4 <_printf_i+0x144>
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	6861      	ldr	r1, [r4, #4]
 800bfc6:	4299      	cmp	r1, r3
 800bfc8:	bfde      	ittt	le
 800bfca:	2330      	movle	r3, #48	@ 0x30
 800bfcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfd4:	1b92      	subs	r2, r2, r6
 800bfd6:	6122      	str	r2, [r4, #16]
 800bfd8:	f8cd a000 	str.w	sl, [sp]
 800bfdc:	464b      	mov	r3, r9
 800bfde:	aa03      	add	r2, sp, #12
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	f7ff fee6 	bl	800bdb4 <_printf_common>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d14a      	bne.n	800c082 <_printf_i+0x1f2>
 800bfec:	f04f 30ff 	mov.w	r0, #4294967295
 800bff0:	b004      	add	sp, #16
 800bff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	f043 0320 	orr.w	r3, r3, #32
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	4833      	ldr	r0, [pc, #204]	@ (800c0cc <_printf_i+0x23c>)
 800c000:	2778      	movs	r7, #120	@ 0x78
 800c002:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	6831      	ldr	r1, [r6, #0]
 800c00a:	061f      	lsls	r7, r3, #24
 800c00c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c010:	d402      	bmi.n	800c018 <_printf_i+0x188>
 800c012:	065f      	lsls	r7, r3, #25
 800c014:	bf48      	it	mi
 800c016:	b2ad      	uxthmi	r5, r5
 800c018:	6031      	str	r1, [r6, #0]
 800c01a:	07d9      	lsls	r1, r3, #31
 800c01c:	bf44      	itt	mi
 800c01e:	f043 0320 	orrmi.w	r3, r3, #32
 800c022:	6023      	strmi	r3, [r4, #0]
 800c024:	b11d      	cbz	r5, 800c02e <_printf_i+0x19e>
 800c026:	2310      	movs	r3, #16
 800c028:	e7ac      	b.n	800bf84 <_printf_i+0xf4>
 800c02a:	4827      	ldr	r0, [pc, #156]	@ (800c0c8 <_printf_i+0x238>)
 800c02c:	e7e9      	b.n	800c002 <_printf_i+0x172>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	f023 0320 	bic.w	r3, r3, #32
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	e7f6      	b.n	800c026 <_printf_i+0x196>
 800c038:	4616      	mov	r6, r2
 800c03a:	e7bd      	b.n	800bfb8 <_printf_i+0x128>
 800c03c:	6833      	ldr	r3, [r6, #0]
 800c03e:	6825      	ldr	r5, [r4, #0]
 800c040:	6961      	ldr	r1, [r4, #20]
 800c042:	1d18      	adds	r0, r3, #4
 800c044:	6030      	str	r0, [r6, #0]
 800c046:	062e      	lsls	r6, r5, #24
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	d501      	bpl.n	800c050 <_printf_i+0x1c0>
 800c04c:	6019      	str	r1, [r3, #0]
 800c04e:	e002      	b.n	800c056 <_printf_i+0x1c6>
 800c050:	0668      	lsls	r0, r5, #25
 800c052:	d5fb      	bpl.n	800c04c <_printf_i+0x1bc>
 800c054:	8019      	strh	r1, [r3, #0]
 800c056:	2300      	movs	r3, #0
 800c058:	6123      	str	r3, [r4, #16]
 800c05a:	4616      	mov	r6, r2
 800c05c:	e7bc      	b.n	800bfd8 <_printf_i+0x148>
 800c05e:	6833      	ldr	r3, [r6, #0]
 800c060:	1d1a      	adds	r2, r3, #4
 800c062:	6032      	str	r2, [r6, #0]
 800c064:	681e      	ldr	r6, [r3, #0]
 800c066:	6862      	ldr	r2, [r4, #4]
 800c068:	2100      	movs	r1, #0
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7f4 f938 	bl	80002e0 <memchr>
 800c070:	b108      	cbz	r0, 800c076 <_printf_i+0x1e6>
 800c072:	1b80      	subs	r0, r0, r6
 800c074:	6060      	str	r0, [r4, #4]
 800c076:	6863      	ldr	r3, [r4, #4]
 800c078:	6123      	str	r3, [r4, #16]
 800c07a:	2300      	movs	r3, #0
 800c07c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c080:	e7aa      	b.n	800bfd8 <_printf_i+0x148>
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	4632      	mov	r2, r6
 800c086:	4649      	mov	r1, r9
 800c088:	4640      	mov	r0, r8
 800c08a:	47d0      	blx	sl
 800c08c:	3001      	adds	r0, #1
 800c08e:	d0ad      	beq.n	800bfec <_printf_i+0x15c>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	079b      	lsls	r3, r3, #30
 800c094:	d413      	bmi.n	800c0be <_printf_i+0x22e>
 800c096:	68e0      	ldr	r0, [r4, #12]
 800c098:	9b03      	ldr	r3, [sp, #12]
 800c09a:	4298      	cmp	r0, r3
 800c09c:	bfb8      	it	lt
 800c09e:	4618      	movlt	r0, r3
 800c0a0:	e7a6      	b.n	800bff0 <_printf_i+0x160>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	47d0      	blx	sl
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d09d      	beq.n	800bfec <_printf_i+0x15c>
 800c0b0:	3501      	adds	r5, #1
 800c0b2:	68e3      	ldr	r3, [r4, #12]
 800c0b4:	9903      	ldr	r1, [sp, #12]
 800c0b6:	1a5b      	subs	r3, r3, r1
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	dcf2      	bgt.n	800c0a2 <_printf_i+0x212>
 800c0bc:	e7eb      	b.n	800c096 <_printf_i+0x206>
 800c0be:	2500      	movs	r5, #0
 800c0c0:	f104 0619 	add.w	r6, r4, #25
 800c0c4:	e7f5      	b.n	800c0b2 <_printf_i+0x222>
 800c0c6:	bf00      	nop
 800c0c8:	0800ec42 	.word	0x0800ec42
 800c0cc:	0800ec53 	.word	0x0800ec53

0800c0d0 <std>:
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	b510      	push	{r4, lr}
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c0da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0de:	6083      	str	r3, [r0, #8]
 800c0e0:	8181      	strh	r1, [r0, #12]
 800c0e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c0e4:	81c2      	strh	r2, [r0, #14]
 800c0e6:	6183      	str	r3, [r0, #24]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	2208      	movs	r2, #8
 800c0ec:	305c      	adds	r0, #92	@ 0x5c
 800c0ee:	f000 f8f4 	bl	800c2da <memset>
 800c0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c128 <std+0x58>)
 800c0f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c12c <std+0x5c>)
 800c0f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c130 <std+0x60>)
 800c0fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <std+0x64>)
 800c100:	6323      	str	r3, [r4, #48]	@ 0x30
 800c102:	4b0d      	ldr	r3, [pc, #52]	@ (800c138 <std+0x68>)
 800c104:	6224      	str	r4, [r4, #32]
 800c106:	429c      	cmp	r4, r3
 800c108:	d006      	beq.n	800c118 <std+0x48>
 800c10a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c10e:	4294      	cmp	r4, r2
 800c110:	d002      	beq.n	800c118 <std+0x48>
 800c112:	33d0      	adds	r3, #208	@ 0xd0
 800c114:	429c      	cmp	r4, r3
 800c116:	d105      	bne.n	800c124 <std+0x54>
 800c118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c120:	f000 b958 	b.w	800c3d4 <__retarget_lock_init_recursive>
 800c124:	bd10      	pop	{r4, pc}
 800c126:	bf00      	nop
 800c128:	0800c255 	.word	0x0800c255
 800c12c:	0800c277 	.word	0x0800c277
 800c130:	0800c2af 	.word	0x0800c2af
 800c134:	0800c2d3 	.word	0x0800c2d3
 800c138:	24002608 	.word	0x24002608

0800c13c <stdio_exit_handler>:
 800c13c:	4a02      	ldr	r2, [pc, #8]	@ (800c148 <stdio_exit_handler+0xc>)
 800c13e:	4903      	ldr	r1, [pc, #12]	@ (800c14c <stdio_exit_handler+0x10>)
 800c140:	4803      	ldr	r0, [pc, #12]	@ (800c150 <stdio_exit_handler+0x14>)
 800c142:	f000 b869 	b.w	800c218 <_fwalk_sglue>
 800c146:	bf00      	nop
 800c148:	24000014 	.word	0x24000014
 800c14c:	0800d9a9 	.word	0x0800d9a9
 800c150:	24000024 	.word	0x24000024

0800c154 <cleanup_stdio>:
 800c154:	6841      	ldr	r1, [r0, #4]
 800c156:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <cleanup_stdio+0x34>)
 800c158:	4299      	cmp	r1, r3
 800c15a:	b510      	push	{r4, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	d001      	beq.n	800c164 <cleanup_stdio+0x10>
 800c160:	f001 fc22 	bl	800d9a8 <_fflush_r>
 800c164:	68a1      	ldr	r1, [r4, #8]
 800c166:	4b09      	ldr	r3, [pc, #36]	@ (800c18c <cleanup_stdio+0x38>)
 800c168:	4299      	cmp	r1, r3
 800c16a:	d002      	beq.n	800c172 <cleanup_stdio+0x1e>
 800c16c:	4620      	mov	r0, r4
 800c16e:	f001 fc1b 	bl	800d9a8 <_fflush_r>
 800c172:	68e1      	ldr	r1, [r4, #12]
 800c174:	4b06      	ldr	r3, [pc, #24]	@ (800c190 <cleanup_stdio+0x3c>)
 800c176:	4299      	cmp	r1, r3
 800c178:	d004      	beq.n	800c184 <cleanup_stdio+0x30>
 800c17a:	4620      	mov	r0, r4
 800c17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c180:	f001 bc12 	b.w	800d9a8 <_fflush_r>
 800c184:	bd10      	pop	{r4, pc}
 800c186:	bf00      	nop
 800c188:	24002608 	.word	0x24002608
 800c18c:	24002670 	.word	0x24002670
 800c190:	240026d8 	.word	0x240026d8

0800c194 <global_stdio_init.part.0>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4b0b      	ldr	r3, [pc, #44]	@ (800c1c4 <global_stdio_init.part.0+0x30>)
 800c198:	4c0b      	ldr	r4, [pc, #44]	@ (800c1c8 <global_stdio_init.part.0+0x34>)
 800c19a:	4a0c      	ldr	r2, [pc, #48]	@ (800c1cc <global_stdio_init.part.0+0x38>)
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2104      	movs	r1, #4
 800c1a4:	f7ff ff94 	bl	800c0d0 <std>
 800c1a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	2109      	movs	r1, #9
 800c1b0:	f7ff ff8e 	bl	800c0d0 <std>
 800c1b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1be:	2112      	movs	r1, #18
 800c1c0:	f7ff bf86 	b.w	800c0d0 <std>
 800c1c4:	24002740 	.word	0x24002740
 800c1c8:	24002608 	.word	0x24002608
 800c1cc:	0800c13d 	.word	0x0800c13d

0800c1d0 <__sfp_lock_acquire>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	@ (800c1d8 <__sfp_lock_acquire+0x8>)
 800c1d2:	f000 b900 	b.w	800c3d6 <__retarget_lock_acquire_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	24002749 	.word	0x24002749

0800c1dc <__sfp_lock_release>:
 800c1dc:	4801      	ldr	r0, [pc, #4]	@ (800c1e4 <__sfp_lock_release+0x8>)
 800c1de:	f000 b8fb 	b.w	800c3d8 <__retarget_lock_release_recursive>
 800c1e2:	bf00      	nop
 800c1e4:	24002749 	.word	0x24002749

0800c1e8 <__sinit>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	f7ff fff0 	bl	800c1d0 <__sfp_lock_acquire>
 800c1f0:	6a23      	ldr	r3, [r4, #32]
 800c1f2:	b11b      	cbz	r3, 800c1fc <__sinit+0x14>
 800c1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1f8:	f7ff bff0 	b.w	800c1dc <__sfp_lock_release>
 800c1fc:	4b04      	ldr	r3, [pc, #16]	@ (800c210 <__sinit+0x28>)
 800c1fe:	6223      	str	r3, [r4, #32]
 800c200:	4b04      	ldr	r3, [pc, #16]	@ (800c214 <__sinit+0x2c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1f5      	bne.n	800c1f4 <__sinit+0xc>
 800c208:	f7ff ffc4 	bl	800c194 <global_stdio_init.part.0>
 800c20c:	e7f2      	b.n	800c1f4 <__sinit+0xc>
 800c20e:	bf00      	nop
 800c210:	0800c155 	.word	0x0800c155
 800c214:	24002740 	.word	0x24002740

0800c218 <_fwalk_sglue>:
 800c218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c21c:	4607      	mov	r7, r0
 800c21e:	4688      	mov	r8, r1
 800c220:	4614      	mov	r4, r2
 800c222:	2600      	movs	r6, #0
 800c224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c228:	f1b9 0901 	subs.w	r9, r9, #1
 800c22c:	d505      	bpl.n	800c23a <_fwalk_sglue+0x22>
 800c22e:	6824      	ldr	r4, [r4, #0]
 800c230:	2c00      	cmp	r4, #0
 800c232:	d1f7      	bne.n	800c224 <_fwalk_sglue+0xc>
 800c234:	4630      	mov	r0, r6
 800c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23a:	89ab      	ldrh	r3, [r5, #12]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d907      	bls.n	800c250 <_fwalk_sglue+0x38>
 800c240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c244:	3301      	adds	r3, #1
 800c246:	d003      	beq.n	800c250 <_fwalk_sglue+0x38>
 800c248:	4629      	mov	r1, r5
 800c24a:	4638      	mov	r0, r7
 800c24c:	47c0      	blx	r8
 800c24e:	4306      	orrs	r6, r0
 800c250:	3568      	adds	r5, #104	@ 0x68
 800c252:	e7e9      	b.n	800c228 <_fwalk_sglue+0x10>

0800c254 <__sread>:
 800c254:	b510      	push	{r4, lr}
 800c256:	460c      	mov	r4, r1
 800c258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25c:	f000 f86c 	bl	800c338 <_read_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	bfab      	itete	ge
 800c264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c266:	89a3      	ldrhlt	r3, [r4, #12]
 800c268:	181b      	addge	r3, r3, r0
 800c26a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c26e:	bfac      	ite	ge
 800c270:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c272:	81a3      	strhlt	r3, [r4, #12]
 800c274:	bd10      	pop	{r4, pc}

0800c276 <__swrite>:
 800c276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27a:	461f      	mov	r7, r3
 800c27c:	898b      	ldrh	r3, [r1, #12]
 800c27e:	05db      	lsls	r3, r3, #23
 800c280:	4605      	mov	r5, r0
 800c282:	460c      	mov	r4, r1
 800c284:	4616      	mov	r6, r2
 800c286:	d505      	bpl.n	800c294 <__swrite+0x1e>
 800c288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28c:	2302      	movs	r3, #2
 800c28e:	2200      	movs	r2, #0
 800c290:	f000 f840 	bl	800c314 <_lseek_r>
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c29a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c29e:	81a3      	strh	r3, [r4, #12]
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	463b      	mov	r3, r7
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2aa:	f000 b857 	b.w	800c35c <_write_r>

0800c2ae <__sseek>:
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b6:	f000 f82d 	bl	800c314 <_lseek_r>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	bf15      	itete	ne
 800c2c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2ca:	81a3      	strheq	r3, [r4, #12]
 800c2cc:	bf18      	it	ne
 800c2ce:	81a3      	strhne	r3, [r4, #12]
 800c2d0:	bd10      	pop	{r4, pc}

0800c2d2 <__sclose>:
 800c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d6:	f000 b80d 	b.w	800c2f4 <_close_r>

0800c2da <memset>:
 800c2da:	4402      	add	r2, r0
 800c2dc:	4603      	mov	r3, r0
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d100      	bne.n	800c2e4 <memset+0xa>
 800c2e2:	4770      	bx	lr
 800c2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800c2e8:	e7f9      	b.n	800c2de <memset+0x4>
	...

0800c2ec <_localeconv_r>:
 800c2ec:	4800      	ldr	r0, [pc, #0]	@ (800c2f0 <_localeconv_r+0x4>)
 800c2ee:	4770      	bx	lr
 800c2f0:	24000160 	.word	0x24000160

0800c2f4 <_close_r>:
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	4d06      	ldr	r5, [pc, #24]	@ (800c310 <_close_r+0x1c>)
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	602b      	str	r3, [r5, #0]
 800c300:	f7f6 fcba 	bl	8002c78 <_close>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_close_r+0x1a>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_close_r+0x1a>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	24002744 	.word	0x24002744

0800c314 <_lseek_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	@ (800c334 <_lseek_r+0x20>)
 800c318:	4604      	mov	r4, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	602a      	str	r2, [r5, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f7f6 fccf 	bl	8002cc6 <_lseek>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_lseek_r+0x1e>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_lseek_r+0x1e>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	24002744 	.word	0x24002744

0800c338 <_read_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d07      	ldr	r5, [pc, #28]	@ (800c358 <_read_r+0x20>)
 800c33c:	4604      	mov	r4, r0
 800c33e:	4608      	mov	r0, r1
 800c340:	4611      	mov	r1, r2
 800c342:	2200      	movs	r2, #0
 800c344:	602a      	str	r2, [r5, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	f7f6 fc5d 	bl	8002c06 <_read>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_read_r+0x1e>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_read_r+0x1e>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	24002744 	.word	0x24002744

0800c35c <_write_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d07      	ldr	r5, [pc, #28]	@ (800c37c <_write_r+0x20>)
 800c360:	4604      	mov	r4, r0
 800c362:	4608      	mov	r0, r1
 800c364:	4611      	mov	r1, r2
 800c366:	2200      	movs	r2, #0
 800c368:	602a      	str	r2, [r5, #0]
 800c36a:	461a      	mov	r2, r3
 800c36c:	f7f6 fc68 	bl	8002c40 <_write>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d102      	bne.n	800c37a <_write_r+0x1e>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b103      	cbz	r3, 800c37a <_write_r+0x1e>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	24002744 	.word	0x24002744

0800c380 <__errno>:
 800c380:	4b01      	ldr	r3, [pc, #4]	@ (800c388 <__errno+0x8>)
 800c382:	6818      	ldr	r0, [r3, #0]
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	24000020 	.word	0x24000020

0800c38c <__libc_init_array>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	4d0d      	ldr	r5, [pc, #52]	@ (800c3c4 <__libc_init_array+0x38>)
 800c390:	4c0d      	ldr	r4, [pc, #52]	@ (800c3c8 <__libc_init_array+0x3c>)
 800c392:	1b64      	subs	r4, r4, r5
 800c394:	10a4      	asrs	r4, r4, #2
 800c396:	2600      	movs	r6, #0
 800c398:	42a6      	cmp	r6, r4
 800c39a:	d109      	bne.n	800c3b0 <__libc_init_array+0x24>
 800c39c:	4d0b      	ldr	r5, [pc, #44]	@ (800c3cc <__libc_init_array+0x40>)
 800c39e:	4c0c      	ldr	r4, [pc, #48]	@ (800c3d0 <__libc_init_array+0x44>)
 800c3a0:	f002 fc1e 	bl	800ebe0 <_init>
 800c3a4:	1b64      	subs	r4, r4, r5
 800c3a6:	10a4      	asrs	r4, r4, #2
 800c3a8:	2600      	movs	r6, #0
 800c3aa:	42a6      	cmp	r6, r4
 800c3ac:	d105      	bne.n	800c3ba <__libc_init_array+0x2e>
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b4:	4798      	blx	r3
 800c3b6:	3601      	adds	r6, #1
 800c3b8:	e7ee      	b.n	800c398 <__libc_init_array+0xc>
 800c3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3be:	4798      	blx	r3
 800c3c0:	3601      	adds	r6, #1
 800c3c2:	e7f2      	b.n	800c3aa <__libc_init_array+0x1e>
 800c3c4:	0800f180 	.word	0x0800f180
 800c3c8:	0800f180 	.word	0x0800f180
 800c3cc:	0800f180 	.word	0x0800f180
 800c3d0:	0800f184 	.word	0x0800f184

0800c3d4 <__retarget_lock_init_recursive>:
 800c3d4:	4770      	bx	lr

0800c3d6 <__retarget_lock_acquire_recursive>:
 800c3d6:	4770      	bx	lr

0800c3d8 <__retarget_lock_release_recursive>:
 800c3d8:	4770      	bx	lr

0800c3da <quorem>:
 800c3da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3de:	6903      	ldr	r3, [r0, #16]
 800c3e0:	690c      	ldr	r4, [r1, #16]
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	db7e      	blt.n	800c4e6 <quorem+0x10c>
 800c3e8:	3c01      	subs	r4, #1
 800c3ea:	f101 0814 	add.w	r8, r1, #20
 800c3ee:	00a3      	lsls	r3, r4, #2
 800c3f0:	f100 0514 	add.w	r5, r0, #20
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c404:	3301      	adds	r3, #1
 800c406:	429a      	cmp	r2, r3
 800c408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c40c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c410:	d32e      	bcc.n	800c470 <quorem+0x96>
 800c412:	f04f 0a00 	mov.w	sl, #0
 800c416:	46c4      	mov	ip, r8
 800c418:	46ae      	mov	lr, r5
 800c41a:	46d3      	mov	fp, sl
 800c41c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c420:	b298      	uxth	r0, r3
 800c422:	fb06 a000 	mla	r0, r6, r0, sl
 800c426:	0c02      	lsrs	r2, r0, #16
 800c428:	0c1b      	lsrs	r3, r3, #16
 800c42a:	fb06 2303 	mla	r3, r6, r3, r2
 800c42e:	f8de 2000 	ldr.w	r2, [lr]
 800c432:	b280      	uxth	r0, r0
 800c434:	b292      	uxth	r2, r2
 800c436:	1a12      	subs	r2, r2, r0
 800c438:	445a      	add	r2, fp
 800c43a:	f8de 0000 	ldr.w	r0, [lr]
 800c43e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c442:	b29b      	uxth	r3, r3
 800c444:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c448:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c44c:	b292      	uxth	r2, r2
 800c44e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c452:	45e1      	cmp	r9, ip
 800c454:	f84e 2b04 	str.w	r2, [lr], #4
 800c458:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c45c:	d2de      	bcs.n	800c41c <quorem+0x42>
 800c45e:	9b00      	ldr	r3, [sp, #0]
 800c460:	58eb      	ldr	r3, [r5, r3]
 800c462:	b92b      	cbnz	r3, 800c470 <quorem+0x96>
 800c464:	9b01      	ldr	r3, [sp, #4]
 800c466:	3b04      	subs	r3, #4
 800c468:	429d      	cmp	r5, r3
 800c46a:	461a      	mov	r2, r3
 800c46c:	d32f      	bcc.n	800c4ce <quorem+0xf4>
 800c46e:	613c      	str	r4, [r7, #16]
 800c470:	4638      	mov	r0, r7
 800c472:	f001 f90d 	bl	800d690 <__mcmp>
 800c476:	2800      	cmp	r0, #0
 800c478:	db25      	blt.n	800c4c6 <quorem+0xec>
 800c47a:	4629      	mov	r1, r5
 800c47c:	2000      	movs	r0, #0
 800c47e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c482:	f8d1 c000 	ldr.w	ip, [r1]
 800c486:	fa1f fe82 	uxth.w	lr, r2
 800c48a:	fa1f f38c 	uxth.w	r3, ip
 800c48e:	eba3 030e 	sub.w	r3, r3, lr
 800c492:	4403      	add	r3, r0
 800c494:	0c12      	lsrs	r2, r2, #16
 800c496:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c49a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4a4:	45c1      	cmp	r9, r8
 800c4a6:	f841 3b04 	str.w	r3, [r1], #4
 800c4aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c4ae:	d2e6      	bcs.n	800c47e <quorem+0xa4>
 800c4b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4b8:	b922      	cbnz	r2, 800c4c4 <quorem+0xea>
 800c4ba:	3b04      	subs	r3, #4
 800c4bc:	429d      	cmp	r5, r3
 800c4be:	461a      	mov	r2, r3
 800c4c0:	d30b      	bcc.n	800c4da <quorem+0x100>
 800c4c2:	613c      	str	r4, [r7, #16]
 800c4c4:	3601      	adds	r6, #1
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	b003      	add	sp, #12
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	6812      	ldr	r2, [r2, #0]
 800c4d0:	3b04      	subs	r3, #4
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	d1cb      	bne.n	800c46e <quorem+0x94>
 800c4d6:	3c01      	subs	r4, #1
 800c4d8:	e7c6      	b.n	800c468 <quorem+0x8e>
 800c4da:	6812      	ldr	r2, [r2, #0]
 800c4dc:	3b04      	subs	r3, #4
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	d1ef      	bne.n	800c4c2 <quorem+0xe8>
 800c4e2:	3c01      	subs	r4, #1
 800c4e4:	e7ea      	b.n	800c4bc <quorem+0xe2>
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	e7ee      	b.n	800c4c8 <quorem+0xee>
 800c4ea:	0000      	movs	r0, r0
 800c4ec:	0000      	movs	r0, r0
	...

0800c4f0 <_dtoa_r>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	ed2d 8b02 	vpush	{d8}
 800c4f8:	69c7      	ldr	r7, [r0, #28]
 800c4fa:	b091      	sub	sp, #68	@ 0x44
 800c4fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c500:	ec55 4b10 	vmov	r4, r5, d0
 800c504:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c506:	9107      	str	r1, [sp, #28]
 800c508:	4681      	mov	r9, r0
 800c50a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c50c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c50e:	b97f      	cbnz	r7, 800c530 <_dtoa_r+0x40>
 800c510:	2010      	movs	r0, #16
 800c512:	f000 fd8d 	bl	800d030 <malloc>
 800c516:	4602      	mov	r2, r0
 800c518:	f8c9 001c 	str.w	r0, [r9, #28]
 800c51c:	b920      	cbnz	r0, 800c528 <_dtoa_r+0x38>
 800c51e:	4ba0      	ldr	r3, [pc, #640]	@ (800c7a0 <_dtoa_r+0x2b0>)
 800c520:	21ef      	movs	r1, #239	@ 0xef
 800c522:	48a0      	ldr	r0, [pc, #640]	@ (800c7a4 <_dtoa_r+0x2b4>)
 800c524:	f001 fa86 	bl	800da34 <__assert_func>
 800c528:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c52c:	6007      	str	r7, [r0, #0]
 800c52e:	60c7      	str	r7, [r0, #12]
 800c530:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	b159      	cbz	r1, 800c550 <_dtoa_r+0x60>
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	604a      	str	r2, [r1, #4]
 800c53c:	2301      	movs	r3, #1
 800c53e:	4093      	lsls	r3, r2
 800c540:	608b      	str	r3, [r1, #8]
 800c542:	4648      	mov	r0, r9
 800c544:	f000 fe6a 	bl	800d21c <_Bfree>
 800c548:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	1e2b      	subs	r3, r5, #0
 800c552:	bfbb      	ittet	lt
 800c554:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c558:	9303      	strlt	r3, [sp, #12]
 800c55a:	2300      	movge	r3, #0
 800c55c:	2201      	movlt	r2, #1
 800c55e:	bfac      	ite	ge
 800c560:	6033      	strge	r3, [r6, #0]
 800c562:	6032      	strlt	r2, [r6, #0]
 800c564:	4b90      	ldr	r3, [pc, #576]	@ (800c7a8 <_dtoa_r+0x2b8>)
 800c566:	9e03      	ldr	r6, [sp, #12]
 800c568:	43b3      	bics	r3, r6
 800c56a:	d110      	bne.n	800c58e <_dtoa_r+0x9e>
 800c56c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c56e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c578:	4323      	orrs	r3, r4
 800c57a:	f000 84de 	beq.w	800cf3a <_dtoa_r+0xa4a>
 800c57e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c580:	4f8a      	ldr	r7, [pc, #552]	@ (800c7ac <_dtoa_r+0x2bc>)
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 84e0 	beq.w	800cf48 <_dtoa_r+0xa58>
 800c588:	1cfb      	adds	r3, r7, #3
 800c58a:	f000 bcdb 	b.w	800cf44 <_dtoa_r+0xa54>
 800c58e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c592:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	d10a      	bne.n	800c5b2 <_dtoa_r+0xc2>
 800c59c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c59e:	2301      	movs	r3, #1
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c5a4:	b113      	cbz	r3, 800c5ac <_dtoa_r+0xbc>
 800c5a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c5a8:	4b81      	ldr	r3, [pc, #516]	@ (800c7b0 <_dtoa_r+0x2c0>)
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	4f81      	ldr	r7, [pc, #516]	@ (800c7b4 <_dtoa_r+0x2c4>)
 800c5ae:	f000 bccb 	b.w	800cf48 <_dtoa_r+0xa58>
 800c5b2:	aa0e      	add	r2, sp, #56	@ 0x38
 800c5b4:	a90f      	add	r1, sp, #60	@ 0x3c
 800c5b6:	4648      	mov	r0, r9
 800c5b8:	eeb0 0b48 	vmov.f64	d0, d8
 800c5bc:	f001 f918 	bl	800d7f0 <__d2b>
 800c5c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c5c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5c6:	9001      	str	r0, [sp, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d045      	beq.n	800c658 <_dtoa_r+0x168>
 800c5cc:	eeb0 7b48 	vmov.f64	d7, d8
 800c5d0:	ee18 1a90 	vmov	r1, s17
 800c5d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c5d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c5dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c5e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c5e4:	2500      	movs	r5, #0
 800c5e6:	ee07 1a90 	vmov	s15, r1
 800c5ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c5ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c788 <_dtoa_r+0x298>
 800c5f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c5f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c790 <_dtoa_r+0x2a0>
 800c5fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c5fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c798 <_dtoa_r+0x2a8>
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c60a:	eeb0 7b46 	vmov.f64	d7, d6
 800c60e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c612:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c616:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61e:	ee16 8a90 	vmov	r8, s13
 800c622:	d508      	bpl.n	800c636 <_dtoa_r+0x146>
 800c624:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c628:	eeb4 6b47 	vcmp.f64	d6, d7
 800c62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c630:	bf18      	it	ne
 800c632:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c636:	f1b8 0f16 	cmp.w	r8, #22
 800c63a:	d82b      	bhi.n	800c694 <_dtoa_r+0x1a4>
 800c63c:	495e      	ldr	r1, [pc, #376]	@ (800c7b8 <_dtoa_r+0x2c8>)
 800c63e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c642:	ed91 7b00 	vldr	d7, [r1]
 800c646:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64e:	d501      	bpl.n	800c654 <_dtoa_r+0x164>
 800c650:	f108 38ff 	add.w	r8, r8, #4294967295
 800c654:	2100      	movs	r1, #0
 800c656:	e01e      	b.n	800c696 <_dtoa_r+0x1a6>
 800c658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c65a:	4413      	add	r3, r2
 800c65c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c660:	2920      	cmp	r1, #32
 800c662:	bfc1      	itttt	gt
 800c664:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c668:	408e      	lslgt	r6, r1
 800c66a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c66e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c672:	bfd6      	itet	le
 800c674:	f1c1 0120 	rsble	r1, r1, #32
 800c678:	4331      	orrgt	r1, r6
 800c67a:	fa04 f101 	lslle.w	r1, r4, r1
 800c67e:	ee07 1a90 	vmov	s15, r1
 800c682:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c686:	3b01      	subs	r3, #1
 800c688:	ee17 1a90 	vmov	r1, s15
 800c68c:	2501      	movs	r5, #1
 800c68e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c692:	e7a8      	b.n	800c5e6 <_dtoa_r+0xf6>
 800c694:	2101      	movs	r1, #1
 800c696:	1ad2      	subs	r2, r2, r3
 800c698:	1e53      	subs	r3, r2, #1
 800c69a:	9306      	str	r3, [sp, #24]
 800c69c:	bf45      	ittet	mi
 800c69e:	f1c2 0301 	rsbmi	r3, r2, #1
 800c6a2:	9305      	strmi	r3, [sp, #20]
 800c6a4:	2300      	movpl	r3, #0
 800c6a6:	2300      	movmi	r3, #0
 800c6a8:	bf4c      	ite	mi
 800c6aa:	9306      	strmi	r3, [sp, #24]
 800c6ac:	9305      	strpl	r3, [sp, #20]
 800c6ae:	f1b8 0f00 	cmp.w	r8, #0
 800c6b2:	910c      	str	r1, [sp, #48]	@ 0x30
 800c6b4:	db18      	blt.n	800c6e8 <_dtoa_r+0x1f8>
 800c6b6:	9b06      	ldr	r3, [sp, #24]
 800c6b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c6bc:	4443      	add	r3, r8
 800c6be:	9306      	str	r3, [sp, #24]
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	9a07      	ldr	r2, [sp, #28]
 800c6c4:	2a09      	cmp	r2, #9
 800c6c6:	d849      	bhi.n	800c75c <_dtoa_r+0x26c>
 800c6c8:	2a05      	cmp	r2, #5
 800c6ca:	bfc4      	itt	gt
 800c6cc:	3a04      	subgt	r2, #4
 800c6ce:	9207      	strgt	r2, [sp, #28]
 800c6d0:	9a07      	ldr	r2, [sp, #28]
 800c6d2:	f1a2 0202 	sub.w	r2, r2, #2
 800c6d6:	bfcc      	ite	gt
 800c6d8:	2400      	movgt	r4, #0
 800c6da:	2401      	movle	r4, #1
 800c6dc:	2a03      	cmp	r2, #3
 800c6de:	d848      	bhi.n	800c772 <_dtoa_r+0x282>
 800c6e0:	e8df f002 	tbb	[pc, r2]
 800c6e4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c6e8:	9b05      	ldr	r3, [sp, #20]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	eba3 0308 	sub.w	r3, r3, r8
 800c6f0:	9305      	str	r3, [sp, #20]
 800c6f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800c6f4:	f1c8 0300 	rsb	r3, r8, #0
 800c6f8:	e7e3      	b.n	800c6c2 <_dtoa_r+0x1d2>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	9208      	str	r2, [sp, #32]
 800c6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c700:	2a00      	cmp	r2, #0
 800c702:	dc39      	bgt.n	800c778 <_dtoa_r+0x288>
 800c704:	f04f 0b01 	mov.w	fp, #1
 800c708:	46da      	mov	sl, fp
 800c70a:	465a      	mov	r2, fp
 800c70c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c710:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c714:	2100      	movs	r1, #0
 800c716:	2004      	movs	r0, #4
 800c718:	f100 0614 	add.w	r6, r0, #20
 800c71c:	4296      	cmp	r6, r2
 800c71e:	d930      	bls.n	800c782 <_dtoa_r+0x292>
 800c720:	6079      	str	r1, [r7, #4]
 800c722:	4648      	mov	r0, r9
 800c724:	9304      	str	r3, [sp, #16]
 800c726:	f000 fd39 	bl	800d19c <_Balloc>
 800c72a:	9b04      	ldr	r3, [sp, #16]
 800c72c:	4607      	mov	r7, r0
 800c72e:	2800      	cmp	r0, #0
 800c730:	d146      	bne.n	800c7c0 <_dtoa_r+0x2d0>
 800c732:	4b22      	ldr	r3, [pc, #136]	@ (800c7bc <_dtoa_r+0x2cc>)
 800c734:	4602      	mov	r2, r0
 800c736:	f240 11af 	movw	r1, #431	@ 0x1af
 800c73a:	e6f2      	b.n	800c522 <_dtoa_r+0x32>
 800c73c:	2201      	movs	r2, #1
 800c73e:	e7dd      	b.n	800c6fc <_dtoa_r+0x20c>
 800c740:	2200      	movs	r2, #0
 800c742:	9208      	str	r2, [sp, #32]
 800c744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c746:	eb08 0b02 	add.w	fp, r8, r2
 800c74a:	f10b 0a01 	add.w	sl, fp, #1
 800c74e:	4652      	mov	r2, sl
 800c750:	2a01      	cmp	r2, #1
 800c752:	bfb8      	it	lt
 800c754:	2201      	movlt	r2, #1
 800c756:	e7db      	b.n	800c710 <_dtoa_r+0x220>
 800c758:	2201      	movs	r2, #1
 800c75a:	e7f2      	b.n	800c742 <_dtoa_r+0x252>
 800c75c:	2401      	movs	r4, #1
 800c75e:	2200      	movs	r2, #0
 800c760:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c764:	f04f 3bff 	mov.w	fp, #4294967295
 800c768:	2100      	movs	r1, #0
 800c76a:	46da      	mov	sl, fp
 800c76c:	2212      	movs	r2, #18
 800c76e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c770:	e7ce      	b.n	800c710 <_dtoa_r+0x220>
 800c772:	2201      	movs	r2, #1
 800c774:	9208      	str	r2, [sp, #32]
 800c776:	e7f5      	b.n	800c764 <_dtoa_r+0x274>
 800c778:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c77c:	46da      	mov	sl, fp
 800c77e:	465a      	mov	r2, fp
 800c780:	e7c6      	b.n	800c710 <_dtoa_r+0x220>
 800c782:	3101      	adds	r1, #1
 800c784:	0040      	lsls	r0, r0, #1
 800c786:	e7c7      	b.n	800c718 <_dtoa_r+0x228>
 800c788:	636f4361 	.word	0x636f4361
 800c78c:	3fd287a7 	.word	0x3fd287a7
 800c790:	8b60c8b3 	.word	0x8b60c8b3
 800c794:	3fc68a28 	.word	0x3fc68a28
 800c798:	509f79fb 	.word	0x509f79fb
 800c79c:	3fd34413 	.word	0x3fd34413
 800c7a0:	0800ec71 	.word	0x0800ec71
 800c7a4:	0800ec88 	.word	0x0800ec88
 800c7a8:	7ff00000 	.word	0x7ff00000
 800c7ac:	0800ec6d 	.word	0x0800ec6d
 800c7b0:	0800ec41 	.word	0x0800ec41
 800c7b4:	0800ec40 	.word	0x0800ec40
 800c7b8:	0800ed80 	.word	0x0800ed80
 800c7bc:	0800ece0 	.word	0x0800ece0
 800c7c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c7c4:	f1ba 0f0e 	cmp.w	sl, #14
 800c7c8:	6010      	str	r0, [r2, #0]
 800c7ca:	d86f      	bhi.n	800c8ac <_dtoa_r+0x3bc>
 800c7cc:	2c00      	cmp	r4, #0
 800c7ce:	d06d      	beq.n	800c8ac <_dtoa_r+0x3bc>
 800c7d0:	f1b8 0f00 	cmp.w	r8, #0
 800c7d4:	f340 80c2 	ble.w	800c95c <_dtoa_r+0x46c>
 800c7d8:	4aca      	ldr	r2, [pc, #808]	@ (800cb04 <_dtoa_r+0x614>)
 800c7da:	f008 010f 	and.w	r1, r8, #15
 800c7de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c7e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c7e6:	ed92 7b00 	vldr	d7, [r2]
 800c7ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c7ee:	f000 80a9 	beq.w	800c944 <_dtoa_r+0x454>
 800c7f2:	4ac5      	ldr	r2, [pc, #788]	@ (800cb08 <_dtoa_r+0x618>)
 800c7f4:	ed92 6b08 	vldr	d6, [r2, #32]
 800c7f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c7fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c800:	f001 010f 	and.w	r1, r1, #15
 800c804:	2203      	movs	r2, #3
 800c806:	48c0      	ldr	r0, [pc, #768]	@ (800cb08 <_dtoa_r+0x618>)
 800c808:	2900      	cmp	r1, #0
 800c80a:	f040 809d 	bne.w	800c948 <_dtoa_r+0x458>
 800c80e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c812:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c816:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c81a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c820:	2900      	cmp	r1, #0
 800c822:	f000 80c1 	beq.w	800c9a8 <_dtoa_r+0x4b8>
 800c826:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c82a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c832:	f140 80b9 	bpl.w	800c9a8 <_dtoa_r+0x4b8>
 800c836:	f1ba 0f00 	cmp.w	sl, #0
 800c83a:	f000 80b5 	beq.w	800c9a8 <_dtoa_r+0x4b8>
 800c83e:	f1bb 0f00 	cmp.w	fp, #0
 800c842:	dd31      	ble.n	800c8a8 <_dtoa_r+0x3b8>
 800c844:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c84c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c850:	f108 31ff 	add.w	r1, r8, #4294967295
 800c854:	9104      	str	r1, [sp, #16]
 800c856:	3201      	adds	r2, #1
 800c858:	465c      	mov	r4, fp
 800c85a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c85e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c862:	ee07 2a90 	vmov	s15, r2
 800c866:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c86a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c86e:	ee15 2a90 	vmov	r2, s11
 800c872:	ec51 0b15 	vmov	r0, r1, d5
 800c876:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	f040 8098 	bne.w	800c9b0 <_dtoa_r+0x4c0>
 800c880:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c884:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c888:	ec41 0b17 	vmov	d7, r0, r1
 800c88c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c894:	f300 8261 	bgt.w	800cd5a <_dtoa_r+0x86a>
 800c898:	eeb1 7b47 	vneg.f64	d7, d7
 800c89c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a4:	f100 80f5 	bmi.w	800ca92 <_dtoa_r+0x5a2>
 800c8a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c8ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8ae:	2a00      	cmp	r2, #0
 800c8b0:	f2c0 812c 	blt.w	800cb0c <_dtoa_r+0x61c>
 800c8b4:	f1b8 0f0e 	cmp.w	r8, #14
 800c8b8:	f300 8128 	bgt.w	800cb0c <_dtoa_r+0x61c>
 800c8bc:	4b91      	ldr	r3, [pc, #580]	@ (800cb04 <_dtoa_r+0x614>)
 800c8be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c8c2:	ed93 6b00 	vldr	d6, [r3]
 800c8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	da03      	bge.n	800c8d4 <_dtoa_r+0x3e4>
 800c8cc:	f1ba 0f00 	cmp.w	sl, #0
 800c8d0:	f340 80d2 	ble.w	800ca78 <_dtoa_r+0x588>
 800c8d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c8d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8dc:	463e      	mov	r6, r7
 800c8de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c8e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c8e6:	ee15 3a10 	vmov	r3, s10
 800c8ea:	3330      	adds	r3, #48	@ 0x30
 800c8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c8f0:	1bf3      	subs	r3, r6, r7
 800c8f2:	459a      	cmp	sl, r3
 800c8f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c8f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c8fc:	f040 80f8 	bne.w	800caf0 <_dtoa_r+0x600>
 800c900:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c904:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90c:	f300 80dd 	bgt.w	800caca <_dtoa_r+0x5da>
 800c910:	eeb4 7b46 	vcmp.f64	d7, d6
 800c914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c918:	d104      	bne.n	800c924 <_dtoa_r+0x434>
 800c91a:	ee15 3a10 	vmov	r3, s10
 800c91e:	07db      	lsls	r3, r3, #31
 800c920:	f100 80d3 	bmi.w	800caca <_dtoa_r+0x5da>
 800c924:	9901      	ldr	r1, [sp, #4]
 800c926:	4648      	mov	r0, r9
 800c928:	f000 fc78 	bl	800d21c <_Bfree>
 800c92c:	2300      	movs	r3, #0
 800c92e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c930:	7033      	strb	r3, [r6, #0]
 800c932:	f108 0301 	add.w	r3, r8, #1
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f000 8304 	beq.w	800cf48 <_dtoa_r+0xa58>
 800c940:	601e      	str	r6, [r3, #0]
 800c942:	e301      	b.n	800cf48 <_dtoa_r+0xa58>
 800c944:	2202      	movs	r2, #2
 800c946:	e75e      	b.n	800c806 <_dtoa_r+0x316>
 800c948:	07cc      	lsls	r4, r1, #31
 800c94a:	d504      	bpl.n	800c956 <_dtoa_r+0x466>
 800c94c:	ed90 6b00 	vldr	d6, [r0]
 800c950:	3201      	adds	r2, #1
 800c952:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c956:	1049      	asrs	r1, r1, #1
 800c958:	3008      	adds	r0, #8
 800c95a:	e755      	b.n	800c808 <_dtoa_r+0x318>
 800c95c:	d022      	beq.n	800c9a4 <_dtoa_r+0x4b4>
 800c95e:	f1c8 0100 	rsb	r1, r8, #0
 800c962:	4a68      	ldr	r2, [pc, #416]	@ (800cb04 <_dtoa_r+0x614>)
 800c964:	f001 000f 	and.w	r0, r1, #15
 800c968:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c96c:	ed92 7b00 	vldr	d7, [r2]
 800c970:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c974:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c978:	4863      	ldr	r0, [pc, #396]	@ (800cb08 <_dtoa_r+0x618>)
 800c97a:	1109      	asrs	r1, r1, #4
 800c97c:	2400      	movs	r4, #0
 800c97e:	2202      	movs	r2, #2
 800c980:	b929      	cbnz	r1, 800c98e <_dtoa_r+0x49e>
 800c982:	2c00      	cmp	r4, #0
 800c984:	f43f af49 	beq.w	800c81a <_dtoa_r+0x32a>
 800c988:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c98c:	e745      	b.n	800c81a <_dtoa_r+0x32a>
 800c98e:	07ce      	lsls	r6, r1, #31
 800c990:	d505      	bpl.n	800c99e <_dtoa_r+0x4ae>
 800c992:	ed90 6b00 	vldr	d6, [r0]
 800c996:	3201      	adds	r2, #1
 800c998:	2401      	movs	r4, #1
 800c99a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c99e:	1049      	asrs	r1, r1, #1
 800c9a0:	3008      	adds	r0, #8
 800c9a2:	e7ed      	b.n	800c980 <_dtoa_r+0x490>
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	e738      	b.n	800c81a <_dtoa_r+0x32a>
 800c9a8:	f8cd 8010 	str.w	r8, [sp, #16]
 800c9ac:	4654      	mov	r4, sl
 800c9ae:	e754      	b.n	800c85a <_dtoa_r+0x36a>
 800c9b0:	4a54      	ldr	r2, [pc, #336]	@ (800cb04 <_dtoa_r+0x614>)
 800c9b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c9b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c9ba:	9a08      	ldr	r2, [sp, #32]
 800c9bc:	ec41 0b17 	vmov	d7, r0, r1
 800c9c0:	443c      	add	r4, r7
 800c9c2:	b34a      	cbz	r2, 800ca18 <_dtoa_r+0x528>
 800c9c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c9c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c9cc:	463e      	mov	r6, r7
 800c9ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c9d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c9d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c9de:	ee14 2a90 	vmov	r2, s9
 800c9e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c9e6:	3230      	adds	r2, #48	@ 0x30
 800c9e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c9ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f4:	f806 2b01 	strb.w	r2, [r6], #1
 800c9f8:	d438      	bmi.n	800ca6c <_dtoa_r+0x57c>
 800c9fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c9fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca06:	d462      	bmi.n	800cace <_dtoa_r+0x5de>
 800ca08:	42a6      	cmp	r6, r4
 800ca0a:	f43f af4d 	beq.w	800c8a8 <_dtoa_r+0x3b8>
 800ca0e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ca12:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ca16:	e7e0      	b.n	800c9da <_dtoa_r+0x4ea>
 800ca18:	4621      	mov	r1, r4
 800ca1a:	463e      	mov	r6, r7
 800ca1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca20:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ca24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ca28:	ee14 2a90 	vmov	r2, s9
 800ca2c:	3230      	adds	r2, #48	@ 0x30
 800ca2e:	f806 2b01 	strb.w	r2, [r6], #1
 800ca32:	42a6      	cmp	r6, r4
 800ca34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ca38:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ca3c:	d119      	bne.n	800ca72 <_dtoa_r+0x582>
 800ca3e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ca42:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ca46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ca4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca4e:	dc3e      	bgt.n	800cace <_dtoa_r+0x5de>
 800ca50:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ca54:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ca58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5c:	f57f af24 	bpl.w	800c8a8 <_dtoa_r+0x3b8>
 800ca60:	460e      	mov	r6, r1
 800ca62:	3901      	subs	r1, #1
 800ca64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca68:	2b30      	cmp	r3, #48	@ 0x30
 800ca6a:	d0f9      	beq.n	800ca60 <_dtoa_r+0x570>
 800ca6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ca70:	e758      	b.n	800c924 <_dtoa_r+0x434>
 800ca72:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ca76:	e7d5      	b.n	800ca24 <_dtoa_r+0x534>
 800ca78:	d10b      	bne.n	800ca92 <_dtoa_r+0x5a2>
 800ca7a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ca7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ca82:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca8e:	f2c0 8161 	blt.w	800cd54 <_dtoa_r+0x864>
 800ca92:	2400      	movs	r4, #0
 800ca94:	4625      	mov	r5, r4
 800ca96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	9304      	str	r3, [sp, #16]
 800ca9c:	463e      	mov	r6, r7
 800ca9e:	f04f 0800 	mov.w	r8, #0
 800caa2:	4621      	mov	r1, r4
 800caa4:	4648      	mov	r0, r9
 800caa6:	f000 fbb9 	bl	800d21c <_Bfree>
 800caaa:	2d00      	cmp	r5, #0
 800caac:	d0de      	beq.n	800ca6c <_dtoa_r+0x57c>
 800caae:	f1b8 0f00 	cmp.w	r8, #0
 800cab2:	d005      	beq.n	800cac0 <_dtoa_r+0x5d0>
 800cab4:	45a8      	cmp	r8, r5
 800cab6:	d003      	beq.n	800cac0 <_dtoa_r+0x5d0>
 800cab8:	4641      	mov	r1, r8
 800caba:	4648      	mov	r0, r9
 800cabc:	f000 fbae 	bl	800d21c <_Bfree>
 800cac0:	4629      	mov	r1, r5
 800cac2:	4648      	mov	r0, r9
 800cac4:	f000 fbaa 	bl	800d21c <_Bfree>
 800cac8:	e7d0      	b.n	800ca6c <_dtoa_r+0x57c>
 800caca:	f8cd 8010 	str.w	r8, [sp, #16]
 800cace:	4633      	mov	r3, r6
 800cad0:	461e      	mov	r6, r3
 800cad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cad6:	2a39      	cmp	r2, #57	@ 0x39
 800cad8:	d106      	bne.n	800cae8 <_dtoa_r+0x5f8>
 800cada:	429f      	cmp	r7, r3
 800cadc:	d1f8      	bne.n	800cad0 <_dtoa_r+0x5e0>
 800cade:	9a04      	ldr	r2, [sp, #16]
 800cae0:	3201      	adds	r2, #1
 800cae2:	9204      	str	r2, [sp, #16]
 800cae4:	2230      	movs	r2, #48	@ 0x30
 800cae6:	703a      	strb	r2, [r7, #0]
 800cae8:	781a      	ldrb	r2, [r3, #0]
 800caea:	3201      	adds	r2, #1
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	e7bd      	b.n	800ca6c <_dtoa_r+0x57c>
 800caf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800caf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800caf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafc:	f47f aeef 	bne.w	800c8de <_dtoa_r+0x3ee>
 800cb00:	e710      	b.n	800c924 <_dtoa_r+0x434>
 800cb02:	bf00      	nop
 800cb04:	0800ed80 	.word	0x0800ed80
 800cb08:	0800ed58 	.word	0x0800ed58
 800cb0c:	9908      	ldr	r1, [sp, #32]
 800cb0e:	2900      	cmp	r1, #0
 800cb10:	f000 80e3 	beq.w	800ccda <_dtoa_r+0x7ea>
 800cb14:	9907      	ldr	r1, [sp, #28]
 800cb16:	2901      	cmp	r1, #1
 800cb18:	f300 80c8 	bgt.w	800ccac <_dtoa_r+0x7bc>
 800cb1c:	2d00      	cmp	r5, #0
 800cb1e:	f000 80c1 	beq.w	800cca4 <_dtoa_r+0x7b4>
 800cb22:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb26:	9e05      	ldr	r6, [sp, #20]
 800cb28:	461c      	mov	r4, r3
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	9b05      	ldr	r3, [sp, #20]
 800cb2e:	4413      	add	r3, r2
 800cb30:	9305      	str	r3, [sp, #20]
 800cb32:	9b06      	ldr	r3, [sp, #24]
 800cb34:	2101      	movs	r1, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	4648      	mov	r0, r9
 800cb3a:	9306      	str	r3, [sp, #24]
 800cb3c:	f000 fc22 	bl	800d384 <__i2b>
 800cb40:	9b04      	ldr	r3, [sp, #16]
 800cb42:	4605      	mov	r5, r0
 800cb44:	b166      	cbz	r6, 800cb60 <_dtoa_r+0x670>
 800cb46:	9a06      	ldr	r2, [sp, #24]
 800cb48:	2a00      	cmp	r2, #0
 800cb4a:	dd09      	ble.n	800cb60 <_dtoa_r+0x670>
 800cb4c:	42b2      	cmp	r2, r6
 800cb4e:	9905      	ldr	r1, [sp, #20]
 800cb50:	bfa8      	it	ge
 800cb52:	4632      	movge	r2, r6
 800cb54:	1a89      	subs	r1, r1, r2
 800cb56:	9105      	str	r1, [sp, #20]
 800cb58:	9906      	ldr	r1, [sp, #24]
 800cb5a:	1ab6      	subs	r6, r6, r2
 800cb5c:	1a8a      	subs	r2, r1, r2
 800cb5e:	9206      	str	r2, [sp, #24]
 800cb60:	b1fb      	cbz	r3, 800cba2 <_dtoa_r+0x6b2>
 800cb62:	9a08      	ldr	r2, [sp, #32]
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	f000 80bc 	beq.w	800cce2 <_dtoa_r+0x7f2>
 800cb6a:	b19c      	cbz	r4, 800cb94 <_dtoa_r+0x6a4>
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4648      	mov	r0, r9
 800cb72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb74:	f000 fcc6 	bl	800d504 <__pow5mult>
 800cb78:	9a01      	ldr	r2, [sp, #4]
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	4648      	mov	r0, r9
 800cb80:	f000 fc16 	bl	800d3b0 <__multiply>
 800cb84:	9901      	ldr	r1, [sp, #4]
 800cb86:	9004      	str	r0, [sp, #16]
 800cb88:	4648      	mov	r0, r9
 800cb8a:	f000 fb47 	bl	800d21c <_Bfree>
 800cb8e:	9a04      	ldr	r2, [sp, #16]
 800cb90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb92:	9201      	str	r2, [sp, #4]
 800cb94:	1b1a      	subs	r2, r3, r4
 800cb96:	d004      	beq.n	800cba2 <_dtoa_r+0x6b2>
 800cb98:	9901      	ldr	r1, [sp, #4]
 800cb9a:	4648      	mov	r0, r9
 800cb9c:	f000 fcb2 	bl	800d504 <__pow5mult>
 800cba0:	9001      	str	r0, [sp, #4]
 800cba2:	2101      	movs	r1, #1
 800cba4:	4648      	mov	r0, r9
 800cba6:	f000 fbed 	bl	800d384 <__i2b>
 800cbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbac:	4604      	mov	r4, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f000 81d0 	beq.w	800cf54 <_dtoa_r+0xa64>
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	4648      	mov	r0, r9
 800cbba:	f000 fca3 	bl	800d504 <__pow5mult>
 800cbbe:	9b07      	ldr	r3, [sp, #28]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	f300 8095 	bgt.w	800ccf2 <_dtoa_r+0x802>
 800cbc8:	9b02      	ldr	r3, [sp, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f040 808b 	bne.w	800cce6 <_dtoa_r+0x7f6>
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	f040 8087 	bne.w	800ccea <_dtoa_r+0x7fa>
 800cbdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cbe0:	0d12      	lsrs	r2, r2, #20
 800cbe2:	0512      	lsls	r2, r2, #20
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	f000 8082 	beq.w	800ccee <_dtoa_r+0x7fe>
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	3301      	adds	r3, #1
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	9b06      	ldr	r3, [sp, #24]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	9306      	str	r3, [sp, #24]
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 81af 	beq.w	800cf60 <_dtoa_r+0xa70>
 800cc02:	6922      	ldr	r2, [r4, #16]
 800cc04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cc08:	6910      	ldr	r0, [r2, #16]
 800cc0a:	f000 fb6f 	bl	800d2ec <__hi0bits>
 800cc0e:	f1c0 0020 	rsb	r0, r0, #32
 800cc12:	9b06      	ldr	r3, [sp, #24]
 800cc14:	4418      	add	r0, r3
 800cc16:	f010 001f 	ands.w	r0, r0, #31
 800cc1a:	d076      	beq.n	800cd0a <_dtoa_r+0x81a>
 800cc1c:	f1c0 0220 	rsb	r2, r0, #32
 800cc20:	2a04      	cmp	r2, #4
 800cc22:	dd69      	ble.n	800ccf8 <_dtoa_r+0x808>
 800cc24:	9b05      	ldr	r3, [sp, #20]
 800cc26:	f1c0 001c 	rsb	r0, r0, #28
 800cc2a:	4403      	add	r3, r0
 800cc2c:	9305      	str	r3, [sp, #20]
 800cc2e:	9b06      	ldr	r3, [sp, #24]
 800cc30:	4406      	add	r6, r0
 800cc32:	4403      	add	r3, r0
 800cc34:	9306      	str	r3, [sp, #24]
 800cc36:	9b05      	ldr	r3, [sp, #20]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dd05      	ble.n	800cc48 <_dtoa_r+0x758>
 800cc3c:	9901      	ldr	r1, [sp, #4]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	4648      	mov	r0, r9
 800cc42:	f000 fcb9 	bl	800d5b8 <__lshift>
 800cc46:	9001      	str	r0, [sp, #4]
 800cc48:	9b06      	ldr	r3, [sp, #24]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	dd05      	ble.n	800cc5a <_dtoa_r+0x76a>
 800cc4e:	4621      	mov	r1, r4
 800cc50:	461a      	mov	r2, r3
 800cc52:	4648      	mov	r0, r9
 800cc54:	f000 fcb0 	bl	800d5b8 <__lshift>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d056      	beq.n	800cd0e <_dtoa_r+0x81e>
 800cc60:	9801      	ldr	r0, [sp, #4]
 800cc62:	4621      	mov	r1, r4
 800cc64:	f000 fd14 	bl	800d690 <__mcmp>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	da50      	bge.n	800cd0e <_dtoa_r+0x81e>
 800cc6c:	f108 33ff 	add.w	r3, r8, #4294967295
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	9901      	ldr	r1, [sp, #4]
 800cc74:	2300      	movs	r3, #0
 800cc76:	220a      	movs	r2, #10
 800cc78:	4648      	mov	r0, r9
 800cc7a:	f000 faf1 	bl	800d260 <__multadd>
 800cc7e:	9b08      	ldr	r3, [sp, #32]
 800cc80:	9001      	str	r0, [sp, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 816e 	beq.w	800cf64 <_dtoa_r+0xa74>
 800cc88:	4629      	mov	r1, r5
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	4648      	mov	r0, r9
 800cc90:	f000 fae6 	bl	800d260 <__multadd>
 800cc94:	f1bb 0f00 	cmp.w	fp, #0
 800cc98:	4605      	mov	r5, r0
 800cc9a:	dc64      	bgt.n	800cd66 <_dtoa_r+0x876>
 800cc9c:	9b07      	ldr	r3, [sp, #28]
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	dc3e      	bgt.n	800cd20 <_dtoa_r+0x830>
 800cca2:	e060      	b.n	800cd66 <_dtoa_r+0x876>
 800cca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cca6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ccaa:	e73c      	b.n	800cb26 <_dtoa_r+0x636>
 800ccac:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ccb0:	42a3      	cmp	r3, r4
 800ccb2:	bfbf      	itttt	lt
 800ccb4:	1ae2      	sublt	r2, r4, r3
 800ccb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ccb8:	189b      	addlt	r3, r3, r2
 800ccba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ccbc:	bfae      	itee	ge
 800ccbe:	1b1c      	subge	r4, r3, r4
 800ccc0:	4623      	movlt	r3, r4
 800ccc2:	2400      	movlt	r4, #0
 800ccc4:	f1ba 0f00 	cmp.w	sl, #0
 800ccc8:	bfb5      	itete	lt
 800ccca:	9a05      	ldrlt	r2, [sp, #20]
 800cccc:	9e05      	ldrge	r6, [sp, #20]
 800ccce:	eba2 060a 	sublt.w	r6, r2, sl
 800ccd2:	4652      	movge	r2, sl
 800ccd4:	bfb8      	it	lt
 800ccd6:	2200      	movlt	r2, #0
 800ccd8:	e727      	b.n	800cb2a <_dtoa_r+0x63a>
 800ccda:	9e05      	ldr	r6, [sp, #20]
 800ccdc:	9d08      	ldr	r5, [sp, #32]
 800ccde:	461c      	mov	r4, r3
 800cce0:	e730      	b.n	800cb44 <_dtoa_r+0x654>
 800cce2:	461a      	mov	r2, r3
 800cce4:	e758      	b.n	800cb98 <_dtoa_r+0x6a8>
 800cce6:	2300      	movs	r3, #0
 800cce8:	e786      	b.n	800cbf8 <_dtoa_r+0x708>
 800ccea:	9b02      	ldr	r3, [sp, #8]
 800ccec:	e784      	b.n	800cbf8 <_dtoa_r+0x708>
 800ccee:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ccf0:	e783      	b.n	800cbfa <_dtoa_r+0x70a>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccf6:	e784      	b.n	800cc02 <_dtoa_r+0x712>
 800ccf8:	d09d      	beq.n	800cc36 <_dtoa_r+0x746>
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	321c      	adds	r2, #28
 800ccfe:	4413      	add	r3, r2
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	4416      	add	r6, r2
 800cd06:	4413      	add	r3, r2
 800cd08:	e794      	b.n	800cc34 <_dtoa_r+0x744>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	e7f5      	b.n	800ccfa <_dtoa_r+0x80a>
 800cd0e:	f1ba 0f00 	cmp.w	sl, #0
 800cd12:	f8cd 8010 	str.w	r8, [sp, #16]
 800cd16:	46d3      	mov	fp, sl
 800cd18:	dc21      	bgt.n	800cd5e <_dtoa_r+0x86e>
 800cd1a:	9b07      	ldr	r3, [sp, #28]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	dd1e      	ble.n	800cd5e <_dtoa_r+0x86e>
 800cd20:	f1bb 0f00 	cmp.w	fp, #0
 800cd24:	f47f aeb7 	bne.w	800ca96 <_dtoa_r+0x5a6>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	465b      	mov	r3, fp
 800cd2c:	2205      	movs	r2, #5
 800cd2e:	4648      	mov	r0, r9
 800cd30:	f000 fa96 	bl	800d260 <__multadd>
 800cd34:	4601      	mov	r1, r0
 800cd36:	4604      	mov	r4, r0
 800cd38:	9801      	ldr	r0, [sp, #4]
 800cd3a:	f000 fca9 	bl	800d690 <__mcmp>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f77f aea9 	ble.w	800ca96 <_dtoa_r+0x5a6>
 800cd44:	463e      	mov	r6, r7
 800cd46:	2331      	movs	r3, #49	@ 0x31
 800cd48:	f806 3b01 	strb.w	r3, [r6], #1
 800cd4c:	9b04      	ldr	r3, [sp, #16]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	9304      	str	r3, [sp, #16]
 800cd52:	e6a4      	b.n	800ca9e <_dtoa_r+0x5ae>
 800cd54:	f8cd 8010 	str.w	r8, [sp, #16]
 800cd58:	4654      	mov	r4, sl
 800cd5a:	4625      	mov	r5, r4
 800cd5c:	e7f2      	b.n	800cd44 <_dtoa_r+0x854>
 800cd5e:	9b08      	ldr	r3, [sp, #32]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 8103 	beq.w	800cf6c <_dtoa_r+0xa7c>
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	dd05      	ble.n	800cd76 <_dtoa_r+0x886>
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	4648      	mov	r0, r9
 800cd70:	f000 fc22 	bl	800d5b8 <__lshift>
 800cd74:	4605      	mov	r5, r0
 800cd76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d058      	beq.n	800ce2e <_dtoa_r+0x93e>
 800cd7c:	6869      	ldr	r1, [r5, #4]
 800cd7e:	4648      	mov	r0, r9
 800cd80:	f000 fa0c 	bl	800d19c <_Balloc>
 800cd84:	4606      	mov	r6, r0
 800cd86:	b928      	cbnz	r0, 800cd94 <_dtoa_r+0x8a4>
 800cd88:	4b82      	ldr	r3, [pc, #520]	@ (800cf94 <_dtoa_r+0xaa4>)
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd90:	f7ff bbc7 	b.w	800c522 <_dtoa_r+0x32>
 800cd94:	692a      	ldr	r2, [r5, #16]
 800cd96:	3202      	adds	r2, #2
 800cd98:	0092      	lsls	r2, r2, #2
 800cd9a:	f105 010c 	add.w	r1, r5, #12
 800cd9e:	300c      	adds	r0, #12
 800cda0:	f000 fe3a 	bl	800da18 <memcpy>
 800cda4:	2201      	movs	r2, #1
 800cda6:	4631      	mov	r1, r6
 800cda8:	4648      	mov	r0, r9
 800cdaa:	f000 fc05 	bl	800d5b8 <__lshift>
 800cdae:	1c7b      	adds	r3, r7, #1
 800cdb0:	9305      	str	r3, [sp, #20]
 800cdb2:	eb07 030b 	add.w	r3, r7, fp
 800cdb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdb8:	9b02      	ldr	r3, [sp, #8]
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	46a8      	mov	r8, r5
 800cdc0:	9308      	str	r3, [sp, #32]
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	9b05      	ldr	r3, [sp, #20]
 800cdc6:	9801      	ldr	r0, [sp, #4]
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f103 3bff 	add.w	fp, r3, #4294967295
 800cdce:	f7ff fb04 	bl	800c3da <quorem>
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	9002      	str	r0, [sp, #8]
 800cdd6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cdda:	9801      	ldr	r0, [sp, #4]
 800cddc:	f000 fc58 	bl	800d690 <__mcmp>
 800cde0:	462a      	mov	r2, r5
 800cde2:	9006      	str	r0, [sp, #24]
 800cde4:	4621      	mov	r1, r4
 800cde6:	4648      	mov	r0, r9
 800cde8:	f000 fc6e 	bl	800d6c8 <__mdiff>
 800cdec:	68c2      	ldr	r2, [r0, #12]
 800cdee:	4606      	mov	r6, r0
 800cdf0:	b9fa      	cbnz	r2, 800ce32 <_dtoa_r+0x942>
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	9801      	ldr	r0, [sp, #4]
 800cdf6:	f000 fc4b 	bl	800d690 <__mcmp>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4648      	mov	r0, r9
 800ce00:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce02:	f000 fa0b 	bl	800d21c <_Bfree>
 800ce06:	9b07      	ldr	r3, [sp, #28]
 800ce08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce0a:	9e05      	ldr	r6, [sp, #20]
 800ce0c:	ea43 0102 	orr.w	r1, r3, r2
 800ce10:	9b08      	ldr	r3, [sp, #32]
 800ce12:	4319      	orrs	r1, r3
 800ce14:	d10f      	bne.n	800ce36 <_dtoa_r+0x946>
 800ce16:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ce1a:	d028      	beq.n	800ce6e <_dtoa_r+0x97e>
 800ce1c:	9b06      	ldr	r3, [sp, #24]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	dd02      	ble.n	800ce28 <_dtoa_r+0x938>
 800ce22:	9b02      	ldr	r3, [sp, #8]
 800ce24:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ce28:	f88b a000 	strb.w	sl, [fp]
 800ce2c:	e639      	b.n	800caa2 <_dtoa_r+0x5b2>
 800ce2e:	4628      	mov	r0, r5
 800ce30:	e7bd      	b.n	800cdae <_dtoa_r+0x8be>
 800ce32:	2201      	movs	r2, #1
 800ce34:	e7e2      	b.n	800cdfc <_dtoa_r+0x90c>
 800ce36:	9b06      	ldr	r3, [sp, #24]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	db04      	blt.n	800ce46 <_dtoa_r+0x956>
 800ce3c:	9907      	ldr	r1, [sp, #28]
 800ce3e:	430b      	orrs	r3, r1
 800ce40:	9908      	ldr	r1, [sp, #32]
 800ce42:	430b      	orrs	r3, r1
 800ce44:	d120      	bne.n	800ce88 <_dtoa_r+0x998>
 800ce46:	2a00      	cmp	r2, #0
 800ce48:	ddee      	ble.n	800ce28 <_dtoa_r+0x938>
 800ce4a:	9901      	ldr	r1, [sp, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	4648      	mov	r0, r9
 800ce50:	f000 fbb2 	bl	800d5b8 <__lshift>
 800ce54:	4621      	mov	r1, r4
 800ce56:	9001      	str	r0, [sp, #4]
 800ce58:	f000 fc1a 	bl	800d690 <__mcmp>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	dc03      	bgt.n	800ce68 <_dtoa_r+0x978>
 800ce60:	d1e2      	bne.n	800ce28 <_dtoa_r+0x938>
 800ce62:	f01a 0f01 	tst.w	sl, #1
 800ce66:	d0df      	beq.n	800ce28 <_dtoa_r+0x938>
 800ce68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ce6c:	d1d9      	bne.n	800ce22 <_dtoa_r+0x932>
 800ce6e:	2339      	movs	r3, #57	@ 0x39
 800ce70:	f88b 3000 	strb.w	r3, [fp]
 800ce74:	4633      	mov	r3, r6
 800ce76:	461e      	mov	r6, r3
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce7e:	2a39      	cmp	r2, #57	@ 0x39
 800ce80:	d053      	beq.n	800cf2a <_dtoa_r+0xa3a>
 800ce82:	3201      	adds	r2, #1
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	e60c      	b.n	800caa2 <_dtoa_r+0x5b2>
 800ce88:	2a00      	cmp	r2, #0
 800ce8a:	dd07      	ble.n	800ce9c <_dtoa_r+0x9ac>
 800ce8c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ce90:	d0ed      	beq.n	800ce6e <_dtoa_r+0x97e>
 800ce92:	f10a 0301 	add.w	r3, sl, #1
 800ce96:	f88b 3000 	strb.w	r3, [fp]
 800ce9a:	e602      	b.n	800caa2 <_dtoa_r+0x5b2>
 800ce9c:	9b05      	ldr	r3, [sp, #20]
 800ce9e:	9a05      	ldr	r2, [sp, #20]
 800cea0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d029      	beq.n	800cefe <_dtoa_r+0xa0e>
 800ceaa:	9901      	ldr	r1, [sp, #4]
 800ceac:	2300      	movs	r3, #0
 800ceae:	220a      	movs	r2, #10
 800ceb0:	4648      	mov	r0, r9
 800ceb2:	f000 f9d5 	bl	800d260 <__multadd>
 800ceb6:	45a8      	cmp	r8, r5
 800ceb8:	9001      	str	r0, [sp, #4]
 800ceba:	f04f 0300 	mov.w	r3, #0
 800cebe:	f04f 020a 	mov.w	r2, #10
 800cec2:	4641      	mov	r1, r8
 800cec4:	4648      	mov	r0, r9
 800cec6:	d107      	bne.n	800ced8 <_dtoa_r+0x9e8>
 800cec8:	f000 f9ca 	bl	800d260 <__multadd>
 800cecc:	4680      	mov	r8, r0
 800cece:	4605      	mov	r5, r0
 800ced0:	9b05      	ldr	r3, [sp, #20]
 800ced2:	3301      	adds	r3, #1
 800ced4:	9305      	str	r3, [sp, #20]
 800ced6:	e775      	b.n	800cdc4 <_dtoa_r+0x8d4>
 800ced8:	f000 f9c2 	bl	800d260 <__multadd>
 800cedc:	4629      	mov	r1, r5
 800cede:	4680      	mov	r8, r0
 800cee0:	2300      	movs	r3, #0
 800cee2:	220a      	movs	r2, #10
 800cee4:	4648      	mov	r0, r9
 800cee6:	f000 f9bb 	bl	800d260 <__multadd>
 800ceea:	4605      	mov	r5, r0
 800ceec:	e7f0      	b.n	800ced0 <_dtoa_r+0x9e0>
 800ceee:	f1bb 0f00 	cmp.w	fp, #0
 800cef2:	bfcc      	ite	gt
 800cef4:	465e      	movgt	r6, fp
 800cef6:	2601      	movle	r6, #1
 800cef8:	443e      	add	r6, r7
 800cefa:	f04f 0800 	mov.w	r8, #0
 800cefe:	9901      	ldr	r1, [sp, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	4648      	mov	r0, r9
 800cf04:	f000 fb58 	bl	800d5b8 <__lshift>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	9001      	str	r0, [sp, #4]
 800cf0c:	f000 fbc0 	bl	800d690 <__mcmp>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	dcaf      	bgt.n	800ce74 <_dtoa_r+0x984>
 800cf14:	d102      	bne.n	800cf1c <_dtoa_r+0xa2c>
 800cf16:	f01a 0f01 	tst.w	sl, #1
 800cf1a:	d1ab      	bne.n	800ce74 <_dtoa_r+0x984>
 800cf1c:	4633      	mov	r3, r6
 800cf1e:	461e      	mov	r6, r3
 800cf20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf24:	2a30      	cmp	r2, #48	@ 0x30
 800cf26:	d0fa      	beq.n	800cf1e <_dtoa_r+0xa2e>
 800cf28:	e5bb      	b.n	800caa2 <_dtoa_r+0x5b2>
 800cf2a:	429f      	cmp	r7, r3
 800cf2c:	d1a3      	bne.n	800ce76 <_dtoa_r+0x986>
 800cf2e:	9b04      	ldr	r3, [sp, #16]
 800cf30:	3301      	adds	r3, #1
 800cf32:	9304      	str	r3, [sp, #16]
 800cf34:	2331      	movs	r3, #49	@ 0x31
 800cf36:	703b      	strb	r3, [r7, #0]
 800cf38:	e5b3      	b.n	800caa2 <_dtoa_r+0x5b2>
 800cf3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf3c:	4f16      	ldr	r7, [pc, #88]	@ (800cf98 <_dtoa_r+0xaa8>)
 800cf3e:	b11b      	cbz	r3, 800cf48 <_dtoa_r+0xa58>
 800cf40:	f107 0308 	add.w	r3, r7, #8
 800cf44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	4638      	mov	r0, r7
 800cf4a:	b011      	add	sp, #68	@ 0x44
 800cf4c:	ecbd 8b02 	vpop	{d8}
 800cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf54:	9b07      	ldr	r3, [sp, #28]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	f77f ae36 	ble.w	800cbc8 <_dtoa_r+0x6d8>
 800cf5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf60:	2001      	movs	r0, #1
 800cf62:	e656      	b.n	800cc12 <_dtoa_r+0x722>
 800cf64:	f1bb 0f00 	cmp.w	fp, #0
 800cf68:	f77f aed7 	ble.w	800cd1a <_dtoa_r+0x82a>
 800cf6c:	463e      	mov	r6, r7
 800cf6e:	9801      	ldr	r0, [sp, #4]
 800cf70:	4621      	mov	r1, r4
 800cf72:	f7ff fa32 	bl	800c3da <quorem>
 800cf76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cf7a:	f806 ab01 	strb.w	sl, [r6], #1
 800cf7e:	1bf2      	subs	r2, r6, r7
 800cf80:	4593      	cmp	fp, r2
 800cf82:	ddb4      	ble.n	800ceee <_dtoa_r+0x9fe>
 800cf84:	9901      	ldr	r1, [sp, #4]
 800cf86:	2300      	movs	r3, #0
 800cf88:	220a      	movs	r2, #10
 800cf8a:	4648      	mov	r0, r9
 800cf8c:	f000 f968 	bl	800d260 <__multadd>
 800cf90:	9001      	str	r0, [sp, #4]
 800cf92:	e7ec      	b.n	800cf6e <_dtoa_r+0xa7e>
 800cf94:	0800ece0 	.word	0x0800ece0
 800cf98:	0800ec64 	.word	0x0800ec64

0800cf9c <_free_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	2900      	cmp	r1, #0
 800cfa2:	d041      	beq.n	800d028 <_free_r+0x8c>
 800cfa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfa8:	1f0c      	subs	r4, r1, #4
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	bfb8      	it	lt
 800cfae:	18e4      	addlt	r4, r4, r3
 800cfb0:	f000 f8e8 	bl	800d184 <__malloc_lock>
 800cfb4:	4a1d      	ldr	r2, [pc, #116]	@ (800d02c <_free_r+0x90>)
 800cfb6:	6813      	ldr	r3, [r2, #0]
 800cfb8:	b933      	cbnz	r3, 800cfc8 <_free_r+0x2c>
 800cfba:	6063      	str	r3, [r4, #4]
 800cfbc:	6014      	str	r4, [r2, #0]
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc4:	f000 b8e4 	b.w	800d190 <__malloc_unlock>
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	d908      	bls.n	800cfde <_free_r+0x42>
 800cfcc:	6820      	ldr	r0, [r4, #0]
 800cfce:	1821      	adds	r1, r4, r0
 800cfd0:	428b      	cmp	r3, r1
 800cfd2:	bf01      	itttt	eq
 800cfd4:	6819      	ldreq	r1, [r3, #0]
 800cfd6:	685b      	ldreq	r3, [r3, #4]
 800cfd8:	1809      	addeq	r1, r1, r0
 800cfda:	6021      	streq	r1, [r4, #0]
 800cfdc:	e7ed      	b.n	800cfba <_free_r+0x1e>
 800cfde:	461a      	mov	r2, r3
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	b10b      	cbz	r3, 800cfe8 <_free_r+0x4c>
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	d9fa      	bls.n	800cfde <_free_r+0x42>
 800cfe8:	6811      	ldr	r1, [r2, #0]
 800cfea:	1850      	adds	r0, r2, r1
 800cfec:	42a0      	cmp	r0, r4
 800cfee:	d10b      	bne.n	800d008 <_free_r+0x6c>
 800cff0:	6820      	ldr	r0, [r4, #0]
 800cff2:	4401      	add	r1, r0
 800cff4:	1850      	adds	r0, r2, r1
 800cff6:	4283      	cmp	r3, r0
 800cff8:	6011      	str	r1, [r2, #0]
 800cffa:	d1e0      	bne.n	800cfbe <_free_r+0x22>
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	6053      	str	r3, [r2, #4]
 800d002:	4408      	add	r0, r1
 800d004:	6010      	str	r0, [r2, #0]
 800d006:	e7da      	b.n	800cfbe <_free_r+0x22>
 800d008:	d902      	bls.n	800d010 <_free_r+0x74>
 800d00a:	230c      	movs	r3, #12
 800d00c:	602b      	str	r3, [r5, #0]
 800d00e:	e7d6      	b.n	800cfbe <_free_r+0x22>
 800d010:	6820      	ldr	r0, [r4, #0]
 800d012:	1821      	adds	r1, r4, r0
 800d014:	428b      	cmp	r3, r1
 800d016:	bf04      	itt	eq
 800d018:	6819      	ldreq	r1, [r3, #0]
 800d01a:	685b      	ldreq	r3, [r3, #4]
 800d01c:	6063      	str	r3, [r4, #4]
 800d01e:	bf04      	itt	eq
 800d020:	1809      	addeq	r1, r1, r0
 800d022:	6021      	streq	r1, [r4, #0]
 800d024:	6054      	str	r4, [r2, #4]
 800d026:	e7ca      	b.n	800cfbe <_free_r+0x22>
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	bf00      	nop
 800d02c:	24002750 	.word	0x24002750

0800d030 <malloc>:
 800d030:	4b02      	ldr	r3, [pc, #8]	@ (800d03c <malloc+0xc>)
 800d032:	4601      	mov	r1, r0
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	f000 b825 	b.w	800d084 <_malloc_r>
 800d03a:	bf00      	nop
 800d03c:	24000020 	.word	0x24000020

0800d040 <sbrk_aligned>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	4e0f      	ldr	r6, [pc, #60]	@ (800d080 <sbrk_aligned+0x40>)
 800d044:	460c      	mov	r4, r1
 800d046:	6831      	ldr	r1, [r6, #0]
 800d048:	4605      	mov	r5, r0
 800d04a:	b911      	cbnz	r1, 800d052 <sbrk_aligned+0x12>
 800d04c:	f000 fcd4 	bl	800d9f8 <_sbrk_r>
 800d050:	6030      	str	r0, [r6, #0]
 800d052:	4621      	mov	r1, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f000 fccf 	bl	800d9f8 <_sbrk_r>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	d103      	bne.n	800d066 <sbrk_aligned+0x26>
 800d05e:	f04f 34ff 	mov.w	r4, #4294967295
 800d062:	4620      	mov	r0, r4
 800d064:	bd70      	pop	{r4, r5, r6, pc}
 800d066:	1cc4      	adds	r4, r0, #3
 800d068:	f024 0403 	bic.w	r4, r4, #3
 800d06c:	42a0      	cmp	r0, r4
 800d06e:	d0f8      	beq.n	800d062 <sbrk_aligned+0x22>
 800d070:	1a21      	subs	r1, r4, r0
 800d072:	4628      	mov	r0, r5
 800d074:	f000 fcc0 	bl	800d9f8 <_sbrk_r>
 800d078:	3001      	adds	r0, #1
 800d07a:	d1f2      	bne.n	800d062 <sbrk_aligned+0x22>
 800d07c:	e7ef      	b.n	800d05e <sbrk_aligned+0x1e>
 800d07e:	bf00      	nop
 800d080:	2400274c 	.word	0x2400274c

0800d084 <_malloc_r>:
 800d084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d088:	1ccd      	adds	r5, r1, #3
 800d08a:	f025 0503 	bic.w	r5, r5, #3
 800d08e:	3508      	adds	r5, #8
 800d090:	2d0c      	cmp	r5, #12
 800d092:	bf38      	it	cc
 800d094:	250c      	movcc	r5, #12
 800d096:	2d00      	cmp	r5, #0
 800d098:	4606      	mov	r6, r0
 800d09a:	db01      	blt.n	800d0a0 <_malloc_r+0x1c>
 800d09c:	42a9      	cmp	r1, r5
 800d09e:	d904      	bls.n	800d0aa <_malloc_r+0x26>
 800d0a0:	230c      	movs	r3, #12
 800d0a2:	6033      	str	r3, [r6, #0]
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d180 <_malloc_r+0xfc>
 800d0ae:	f000 f869 	bl	800d184 <__malloc_lock>
 800d0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0b6:	461c      	mov	r4, r3
 800d0b8:	bb44      	cbnz	r4, 800d10c <_malloc_r+0x88>
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f7ff ffbf 	bl	800d040 <sbrk_aligned>
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	d158      	bne.n	800d17a <_malloc_r+0xf6>
 800d0c8:	f8d8 4000 	ldr.w	r4, [r8]
 800d0cc:	4627      	mov	r7, r4
 800d0ce:	2f00      	cmp	r7, #0
 800d0d0:	d143      	bne.n	800d15a <_malloc_r+0xd6>
 800d0d2:	2c00      	cmp	r4, #0
 800d0d4:	d04b      	beq.n	800d16e <_malloc_r+0xea>
 800d0d6:	6823      	ldr	r3, [r4, #0]
 800d0d8:	4639      	mov	r1, r7
 800d0da:	4630      	mov	r0, r6
 800d0dc:	eb04 0903 	add.w	r9, r4, r3
 800d0e0:	f000 fc8a 	bl	800d9f8 <_sbrk_r>
 800d0e4:	4581      	cmp	r9, r0
 800d0e6:	d142      	bne.n	800d16e <_malloc_r+0xea>
 800d0e8:	6821      	ldr	r1, [r4, #0]
 800d0ea:	1a6d      	subs	r5, r5, r1
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f7ff ffa6 	bl	800d040 <sbrk_aligned>
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d03a      	beq.n	800d16e <_malloc_r+0xea>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	442b      	add	r3, r5
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	f8d8 3000 	ldr.w	r3, [r8]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	bb62      	cbnz	r2, 800d160 <_malloc_r+0xdc>
 800d106:	f8c8 7000 	str.w	r7, [r8]
 800d10a:	e00f      	b.n	800d12c <_malloc_r+0xa8>
 800d10c:	6822      	ldr	r2, [r4, #0]
 800d10e:	1b52      	subs	r2, r2, r5
 800d110:	d420      	bmi.n	800d154 <_malloc_r+0xd0>
 800d112:	2a0b      	cmp	r2, #11
 800d114:	d917      	bls.n	800d146 <_malloc_r+0xc2>
 800d116:	1961      	adds	r1, r4, r5
 800d118:	42a3      	cmp	r3, r4
 800d11a:	6025      	str	r5, [r4, #0]
 800d11c:	bf18      	it	ne
 800d11e:	6059      	strne	r1, [r3, #4]
 800d120:	6863      	ldr	r3, [r4, #4]
 800d122:	bf08      	it	eq
 800d124:	f8c8 1000 	streq.w	r1, [r8]
 800d128:	5162      	str	r2, [r4, r5]
 800d12a:	604b      	str	r3, [r1, #4]
 800d12c:	4630      	mov	r0, r6
 800d12e:	f000 f82f 	bl	800d190 <__malloc_unlock>
 800d132:	f104 000b 	add.w	r0, r4, #11
 800d136:	1d23      	adds	r3, r4, #4
 800d138:	f020 0007 	bic.w	r0, r0, #7
 800d13c:	1ac2      	subs	r2, r0, r3
 800d13e:	bf1c      	itt	ne
 800d140:	1a1b      	subne	r3, r3, r0
 800d142:	50a3      	strne	r3, [r4, r2]
 800d144:	e7af      	b.n	800d0a6 <_malloc_r+0x22>
 800d146:	6862      	ldr	r2, [r4, #4]
 800d148:	42a3      	cmp	r3, r4
 800d14a:	bf0c      	ite	eq
 800d14c:	f8c8 2000 	streq.w	r2, [r8]
 800d150:	605a      	strne	r2, [r3, #4]
 800d152:	e7eb      	b.n	800d12c <_malloc_r+0xa8>
 800d154:	4623      	mov	r3, r4
 800d156:	6864      	ldr	r4, [r4, #4]
 800d158:	e7ae      	b.n	800d0b8 <_malloc_r+0x34>
 800d15a:	463c      	mov	r4, r7
 800d15c:	687f      	ldr	r7, [r7, #4]
 800d15e:	e7b6      	b.n	800d0ce <_malloc_r+0x4a>
 800d160:	461a      	mov	r2, r3
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	42a3      	cmp	r3, r4
 800d166:	d1fb      	bne.n	800d160 <_malloc_r+0xdc>
 800d168:	2300      	movs	r3, #0
 800d16a:	6053      	str	r3, [r2, #4]
 800d16c:	e7de      	b.n	800d12c <_malloc_r+0xa8>
 800d16e:	230c      	movs	r3, #12
 800d170:	6033      	str	r3, [r6, #0]
 800d172:	4630      	mov	r0, r6
 800d174:	f000 f80c 	bl	800d190 <__malloc_unlock>
 800d178:	e794      	b.n	800d0a4 <_malloc_r+0x20>
 800d17a:	6005      	str	r5, [r0, #0]
 800d17c:	e7d6      	b.n	800d12c <_malloc_r+0xa8>
 800d17e:	bf00      	nop
 800d180:	24002750 	.word	0x24002750

0800d184 <__malloc_lock>:
 800d184:	4801      	ldr	r0, [pc, #4]	@ (800d18c <__malloc_lock+0x8>)
 800d186:	f7ff b926 	b.w	800c3d6 <__retarget_lock_acquire_recursive>
 800d18a:	bf00      	nop
 800d18c:	24002748 	.word	0x24002748

0800d190 <__malloc_unlock>:
 800d190:	4801      	ldr	r0, [pc, #4]	@ (800d198 <__malloc_unlock+0x8>)
 800d192:	f7ff b921 	b.w	800c3d8 <__retarget_lock_release_recursive>
 800d196:	bf00      	nop
 800d198:	24002748 	.word	0x24002748

0800d19c <_Balloc>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	69c6      	ldr	r6, [r0, #28]
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	b976      	cbnz	r6, 800d1c4 <_Balloc+0x28>
 800d1a6:	2010      	movs	r0, #16
 800d1a8:	f7ff ff42 	bl	800d030 <malloc>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	61e0      	str	r0, [r4, #28]
 800d1b0:	b920      	cbnz	r0, 800d1bc <_Balloc+0x20>
 800d1b2:	4b18      	ldr	r3, [pc, #96]	@ (800d214 <_Balloc+0x78>)
 800d1b4:	4818      	ldr	r0, [pc, #96]	@ (800d218 <_Balloc+0x7c>)
 800d1b6:	216b      	movs	r1, #107	@ 0x6b
 800d1b8:	f000 fc3c 	bl	800da34 <__assert_func>
 800d1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1c0:	6006      	str	r6, [r0, #0]
 800d1c2:	60c6      	str	r6, [r0, #12]
 800d1c4:	69e6      	ldr	r6, [r4, #28]
 800d1c6:	68f3      	ldr	r3, [r6, #12]
 800d1c8:	b183      	cbz	r3, 800d1ec <_Balloc+0x50>
 800d1ca:	69e3      	ldr	r3, [r4, #28]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1d2:	b9b8      	cbnz	r0, 800d204 <_Balloc+0x68>
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d1da:	1d72      	adds	r2, r6, #5
 800d1dc:	0092      	lsls	r2, r2, #2
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 fc46 	bl	800da70 <_calloc_r>
 800d1e4:	b160      	cbz	r0, 800d200 <_Balloc+0x64>
 800d1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1ea:	e00e      	b.n	800d20a <_Balloc+0x6e>
 800d1ec:	2221      	movs	r2, #33	@ 0x21
 800d1ee:	2104      	movs	r1, #4
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f000 fc3d 	bl	800da70 <_calloc_r>
 800d1f6:	69e3      	ldr	r3, [r4, #28]
 800d1f8:	60f0      	str	r0, [r6, #12]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1e4      	bne.n	800d1ca <_Balloc+0x2e>
 800d200:	2000      	movs	r0, #0
 800d202:	bd70      	pop	{r4, r5, r6, pc}
 800d204:	6802      	ldr	r2, [r0, #0]
 800d206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d20a:	2300      	movs	r3, #0
 800d20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d210:	e7f7      	b.n	800d202 <_Balloc+0x66>
 800d212:	bf00      	nop
 800d214:	0800ec71 	.word	0x0800ec71
 800d218:	0800ecf1 	.word	0x0800ecf1

0800d21c <_Bfree>:
 800d21c:	b570      	push	{r4, r5, r6, lr}
 800d21e:	69c6      	ldr	r6, [r0, #28]
 800d220:	4605      	mov	r5, r0
 800d222:	460c      	mov	r4, r1
 800d224:	b976      	cbnz	r6, 800d244 <_Bfree+0x28>
 800d226:	2010      	movs	r0, #16
 800d228:	f7ff ff02 	bl	800d030 <malloc>
 800d22c:	4602      	mov	r2, r0
 800d22e:	61e8      	str	r0, [r5, #28]
 800d230:	b920      	cbnz	r0, 800d23c <_Bfree+0x20>
 800d232:	4b09      	ldr	r3, [pc, #36]	@ (800d258 <_Bfree+0x3c>)
 800d234:	4809      	ldr	r0, [pc, #36]	@ (800d25c <_Bfree+0x40>)
 800d236:	218f      	movs	r1, #143	@ 0x8f
 800d238:	f000 fbfc 	bl	800da34 <__assert_func>
 800d23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d240:	6006      	str	r6, [r0, #0]
 800d242:	60c6      	str	r6, [r0, #12]
 800d244:	b13c      	cbz	r4, 800d256 <_Bfree+0x3a>
 800d246:	69eb      	ldr	r3, [r5, #28]
 800d248:	6862      	ldr	r2, [r4, #4]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d250:	6021      	str	r1, [r4, #0]
 800d252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d256:	bd70      	pop	{r4, r5, r6, pc}
 800d258:	0800ec71 	.word	0x0800ec71
 800d25c:	0800ecf1 	.word	0x0800ecf1

0800d260 <__multadd>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	690d      	ldr	r5, [r1, #16]
 800d266:	4607      	mov	r7, r0
 800d268:	460c      	mov	r4, r1
 800d26a:	461e      	mov	r6, r3
 800d26c:	f101 0c14 	add.w	ip, r1, #20
 800d270:	2000      	movs	r0, #0
 800d272:	f8dc 3000 	ldr.w	r3, [ip]
 800d276:	b299      	uxth	r1, r3
 800d278:	fb02 6101 	mla	r1, r2, r1, r6
 800d27c:	0c1e      	lsrs	r6, r3, #16
 800d27e:	0c0b      	lsrs	r3, r1, #16
 800d280:	fb02 3306 	mla	r3, r2, r6, r3
 800d284:	b289      	uxth	r1, r1
 800d286:	3001      	adds	r0, #1
 800d288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d28c:	4285      	cmp	r5, r0
 800d28e:	f84c 1b04 	str.w	r1, [ip], #4
 800d292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d296:	dcec      	bgt.n	800d272 <__multadd+0x12>
 800d298:	b30e      	cbz	r6, 800d2de <__multadd+0x7e>
 800d29a:	68a3      	ldr	r3, [r4, #8]
 800d29c:	42ab      	cmp	r3, r5
 800d29e:	dc19      	bgt.n	800d2d4 <__multadd+0x74>
 800d2a0:	6861      	ldr	r1, [r4, #4]
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	3101      	adds	r1, #1
 800d2a6:	f7ff ff79 	bl	800d19c <_Balloc>
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	b928      	cbnz	r0, 800d2ba <__multadd+0x5a>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d2e4 <__multadd+0x84>)
 800d2b2:	480d      	ldr	r0, [pc, #52]	@ (800d2e8 <__multadd+0x88>)
 800d2b4:	21ba      	movs	r1, #186	@ 0xba
 800d2b6:	f000 fbbd 	bl	800da34 <__assert_func>
 800d2ba:	6922      	ldr	r2, [r4, #16]
 800d2bc:	3202      	adds	r2, #2
 800d2be:	f104 010c 	add.w	r1, r4, #12
 800d2c2:	0092      	lsls	r2, r2, #2
 800d2c4:	300c      	adds	r0, #12
 800d2c6:	f000 fba7 	bl	800da18 <memcpy>
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	4638      	mov	r0, r7
 800d2ce:	f7ff ffa5 	bl	800d21c <_Bfree>
 800d2d2:	4644      	mov	r4, r8
 800d2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2d8:	3501      	adds	r5, #1
 800d2da:	615e      	str	r6, [r3, #20]
 800d2dc:	6125      	str	r5, [r4, #16]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e4:	0800ece0 	.word	0x0800ece0
 800d2e8:	0800ecf1 	.word	0x0800ecf1

0800d2ec <__hi0bits>:
 800d2ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	bf36      	itet	cc
 800d2f4:	0403      	lslcc	r3, r0, #16
 800d2f6:	2000      	movcs	r0, #0
 800d2f8:	2010      	movcc	r0, #16
 800d2fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2fe:	bf3c      	itt	cc
 800d300:	021b      	lslcc	r3, r3, #8
 800d302:	3008      	addcc	r0, #8
 800d304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d308:	bf3c      	itt	cc
 800d30a:	011b      	lslcc	r3, r3, #4
 800d30c:	3004      	addcc	r0, #4
 800d30e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d312:	bf3c      	itt	cc
 800d314:	009b      	lslcc	r3, r3, #2
 800d316:	3002      	addcc	r0, #2
 800d318:	2b00      	cmp	r3, #0
 800d31a:	db05      	blt.n	800d328 <__hi0bits+0x3c>
 800d31c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d320:	f100 0001 	add.w	r0, r0, #1
 800d324:	bf08      	it	eq
 800d326:	2020      	moveq	r0, #32
 800d328:	4770      	bx	lr

0800d32a <__lo0bits>:
 800d32a:	6803      	ldr	r3, [r0, #0]
 800d32c:	4602      	mov	r2, r0
 800d32e:	f013 0007 	ands.w	r0, r3, #7
 800d332:	d00b      	beq.n	800d34c <__lo0bits+0x22>
 800d334:	07d9      	lsls	r1, r3, #31
 800d336:	d421      	bmi.n	800d37c <__lo0bits+0x52>
 800d338:	0798      	lsls	r0, r3, #30
 800d33a:	bf49      	itett	mi
 800d33c:	085b      	lsrmi	r3, r3, #1
 800d33e:	089b      	lsrpl	r3, r3, #2
 800d340:	2001      	movmi	r0, #1
 800d342:	6013      	strmi	r3, [r2, #0]
 800d344:	bf5c      	itt	pl
 800d346:	6013      	strpl	r3, [r2, #0]
 800d348:	2002      	movpl	r0, #2
 800d34a:	4770      	bx	lr
 800d34c:	b299      	uxth	r1, r3
 800d34e:	b909      	cbnz	r1, 800d354 <__lo0bits+0x2a>
 800d350:	0c1b      	lsrs	r3, r3, #16
 800d352:	2010      	movs	r0, #16
 800d354:	b2d9      	uxtb	r1, r3
 800d356:	b909      	cbnz	r1, 800d35c <__lo0bits+0x32>
 800d358:	3008      	adds	r0, #8
 800d35a:	0a1b      	lsrs	r3, r3, #8
 800d35c:	0719      	lsls	r1, r3, #28
 800d35e:	bf04      	itt	eq
 800d360:	091b      	lsreq	r3, r3, #4
 800d362:	3004      	addeq	r0, #4
 800d364:	0799      	lsls	r1, r3, #30
 800d366:	bf04      	itt	eq
 800d368:	089b      	lsreq	r3, r3, #2
 800d36a:	3002      	addeq	r0, #2
 800d36c:	07d9      	lsls	r1, r3, #31
 800d36e:	d403      	bmi.n	800d378 <__lo0bits+0x4e>
 800d370:	085b      	lsrs	r3, r3, #1
 800d372:	f100 0001 	add.w	r0, r0, #1
 800d376:	d003      	beq.n	800d380 <__lo0bits+0x56>
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	4770      	bx	lr
 800d37c:	2000      	movs	r0, #0
 800d37e:	4770      	bx	lr
 800d380:	2020      	movs	r0, #32
 800d382:	4770      	bx	lr

0800d384 <__i2b>:
 800d384:	b510      	push	{r4, lr}
 800d386:	460c      	mov	r4, r1
 800d388:	2101      	movs	r1, #1
 800d38a:	f7ff ff07 	bl	800d19c <_Balloc>
 800d38e:	4602      	mov	r2, r0
 800d390:	b928      	cbnz	r0, 800d39e <__i2b+0x1a>
 800d392:	4b05      	ldr	r3, [pc, #20]	@ (800d3a8 <__i2b+0x24>)
 800d394:	4805      	ldr	r0, [pc, #20]	@ (800d3ac <__i2b+0x28>)
 800d396:	f240 1145 	movw	r1, #325	@ 0x145
 800d39a:	f000 fb4b 	bl	800da34 <__assert_func>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	6144      	str	r4, [r0, #20]
 800d3a2:	6103      	str	r3, [r0, #16]
 800d3a4:	bd10      	pop	{r4, pc}
 800d3a6:	bf00      	nop
 800d3a8:	0800ece0 	.word	0x0800ece0
 800d3ac:	0800ecf1 	.word	0x0800ecf1

0800d3b0 <__multiply>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	4614      	mov	r4, r2
 800d3b6:	690a      	ldr	r2, [r1, #16]
 800d3b8:	6923      	ldr	r3, [r4, #16]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	bfa8      	it	ge
 800d3be:	4623      	movge	r3, r4
 800d3c0:	460f      	mov	r7, r1
 800d3c2:	bfa4      	itt	ge
 800d3c4:	460c      	movge	r4, r1
 800d3c6:	461f      	movge	r7, r3
 800d3c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d3cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d3d0:	68a3      	ldr	r3, [r4, #8]
 800d3d2:	6861      	ldr	r1, [r4, #4]
 800d3d4:	eb0a 0609 	add.w	r6, sl, r9
 800d3d8:	42b3      	cmp	r3, r6
 800d3da:	b085      	sub	sp, #20
 800d3dc:	bfb8      	it	lt
 800d3de:	3101      	addlt	r1, #1
 800d3e0:	f7ff fedc 	bl	800d19c <_Balloc>
 800d3e4:	b930      	cbnz	r0, 800d3f4 <__multiply+0x44>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	4b44      	ldr	r3, [pc, #272]	@ (800d4fc <__multiply+0x14c>)
 800d3ea:	4845      	ldr	r0, [pc, #276]	@ (800d500 <__multiply+0x150>)
 800d3ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3f0:	f000 fb20 	bl	800da34 <__assert_func>
 800d3f4:	f100 0514 	add.w	r5, r0, #20
 800d3f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3fc:	462b      	mov	r3, r5
 800d3fe:	2200      	movs	r2, #0
 800d400:	4543      	cmp	r3, r8
 800d402:	d321      	bcc.n	800d448 <__multiply+0x98>
 800d404:	f107 0114 	add.w	r1, r7, #20
 800d408:	f104 0214 	add.w	r2, r4, #20
 800d40c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d410:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d414:	9302      	str	r3, [sp, #8]
 800d416:	1b13      	subs	r3, r2, r4
 800d418:	3b15      	subs	r3, #21
 800d41a:	f023 0303 	bic.w	r3, r3, #3
 800d41e:	3304      	adds	r3, #4
 800d420:	f104 0715 	add.w	r7, r4, #21
 800d424:	42ba      	cmp	r2, r7
 800d426:	bf38      	it	cc
 800d428:	2304      	movcc	r3, #4
 800d42a:	9301      	str	r3, [sp, #4]
 800d42c:	9b02      	ldr	r3, [sp, #8]
 800d42e:	9103      	str	r1, [sp, #12]
 800d430:	428b      	cmp	r3, r1
 800d432:	d80c      	bhi.n	800d44e <__multiply+0x9e>
 800d434:	2e00      	cmp	r6, #0
 800d436:	dd03      	ble.n	800d440 <__multiply+0x90>
 800d438:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d05b      	beq.n	800d4f8 <__multiply+0x148>
 800d440:	6106      	str	r6, [r0, #16]
 800d442:	b005      	add	sp, #20
 800d444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d448:	f843 2b04 	str.w	r2, [r3], #4
 800d44c:	e7d8      	b.n	800d400 <__multiply+0x50>
 800d44e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d452:	f1ba 0f00 	cmp.w	sl, #0
 800d456:	d024      	beq.n	800d4a2 <__multiply+0xf2>
 800d458:	f104 0e14 	add.w	lr, r4, #20
 800d45c:	46a9      	mov	r9, r5
 800d45e:	f04f 0c00 	mov.w	ip, #0
 800d462:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d466:	f8d9 3000 	ldr.w	r3, [r9]
 800d46a:	fa1f fb87 	uxth.w	fp, r7
 800d46e:	b29b      	uxth	r3, r3
 800d470:	fb0a 330b 	mla	r3, sl, fp, r3
 800d474:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d478:	f8d9 7000 	ldr.w	r7, [r9]
 800d47c:	4463      	add	r3, ip
 800d47e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d482:	fb0a c70b 	mla	r7, sl, fp, ip
 800d486:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d490:	4572      	cmp	r2, lr
 800d492:	f849 3b04 	str.w	r3, [r9], #4
 800d496:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d49a:	d8e2      	bhi.n	800d462 <__multiply+0xb2>
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	f845 c003 	str.w	ip, [r5, r3]
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d4a8:	3104      	adds	r1, #4
 800d4aa:	f1b9 0f00 	cmp.w	r9, #0
 800d4ae:	d021      	beq.n	800d4f4 <__multiply+0x144>
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	f104 0c14 	add.w	ip, r4, #20
 800d4b6:	46ae      	mov	lr, r5
 800d4b8:	f04f 0a00 	mov.w	sl, #0
 800d4bc:	f8bc b000 	ldrh.w	fp, [ip]
 800d4c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d4c4:	fb09 770b 	mla	r7, r9, fp, r7
 800d4c8:	4457      	add	r7, sl
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4d0:	f84e 3b04 	str.w	r3, [lr], #4
 800d4d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4dc:	f8be 3000 	ldrh.w	r3, [lr]
 800d4e0:	fb09 330a 	mla	r3, r9, sl, r3
 800d4e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d4e8:	4562      	cmp	r2, ip
 800d4ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4ee:	d8e5      	bhi.n	800d4bc <__multiply+0x10c>
 800d4f0:	9f01      	ldr	r7, [sp, #4]
 800d4f2:	51eb      	str	r3, [r5, r7]
 800d4f4:	3504      	adds	r5, #4
 800d4f6:	e799      	b.n	800d42c <__multiply+0x7c>
 800d4f8:	3e01      	subs	r6, #1
 800d4fa:	e79b      	b.n	800d434 <__multiply+0x84>
 800d4fc:	0800ece0 	.word	0x0800ece0
 800d500:	0800ecf1 	.word	0x0800ecf1

0800d504 <__pow5mult>:
 800d504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d508:	4615      	mov	r5, r2
 800d50a:	f012 0203 	ands.w	r2, r2, #3
 800d50e:	4607      	mov	r7, r0
 800d510:	460e      	mov	r6, r1
 800d512:	d007      	beq.n	800d524 <__pow5mult+0x20>
 800d514:	4c25      	ldr	r4, [pc, #148]	@ (800d5ac <__pow5mult+0xa8>)
 800d516:	3a01      	subs	r2, #1
 800d518:	2300      	movs	r3, #0
 800d51a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d51e:	f7ff fe9f 	bl	800d260 <__multadd>
 800d522:	4606      	mov	r6, r0
 800d524:	10ad      	asrs	r5, r5, #2
 800d526:	d03d      	beq.n	800d5a4 <__pow5mult+0xa0>
 800d528:	69fc      	ldr	r4, [r7, #28]
 800d52a:	b97c      	cbnz	r4, 800d54c <__pow5mult+0x48>
 800d52c:	2010      	movs	r0, #16
 800d52e:	f7ff fd7f 	bl	800d030 <malloc>
 800d532:	4602      	mov	r2, r0
 800d534:	61f8      	str	r0, [r7, #28]
 800d536:	b928      	cbnz	r0, 800d544 <__pow5mult+0x40>
 800d538:	4b1d      	ldr	r3, [pc, #116]	@ (800d5b0 <__pow5mult+0xac>)
 800d53a:	481e      	ldr	r0, [pc, #120]	@ (800d5b4 <__pow5mult+0xb0>)
 800d53c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d540:	f000 fa78 	bl	800da34 <__assert_func>
 800d544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d548:	6004      	str	r4, [r0, #0]
 800d54a:	60c4      	str	r4, [r0, #12]
 800d54c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d554:	b94c      	cbnz	r4, 800d56a <__pow5mult+0x66>
 800d556:	f240 2171 	movw	r1, #625	@ 0x271
 800d55a:	4638      	mov	r0, r7
 800d55c:	f7ff ff12 	bl	800d384 <__i2b>
 800d560:	2300      	movs	r3, #0
 800d562:	f8c8 0008 	str.w	r0, [r8, #8]
 800d566:	4604      	mov	r4, r0
 800d568:	6003      	str	r3, [r0, #0]
 800d56a:	f04f 0900 	mov.w	r9, #0
 800d56e:	07eb      	lsls	r3, r5, #31
 800d570:	d50a      	bpl.n	800d588 <__pow5mult+0x84>
 800d572:	4631      	mov	r1, r6
 800d574:	4622      	mov	r2, r4
 800d576:	4638      	mov	r0, r7
 800d578:	f7ff ff1a 	bl	800d3b0 <__multiply>
 800d57c:	4631      	mov	r1, r6
 800d57e:	4680      	mov	r8, r0
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff fe4b 	bl	800d21c <_Bfree>
 800d586:	4646      	mov	r6, r8
 800d588:	106d      	asrs	r5, r5, #1
 800d58a:	d00b      	beq.n	800d5a4 <__pow5mult+0xa0>
 800d58c:	6820      	ldr	r0, [r4, #0]
 800d58e:	b938      	cbnz	r0, 800d5a0 <__pow5mult+0x9c>
 800d590:	4622      	mov	r2, r4
 800d592:	4621      	mov	r1, r4
 800d594:	4638      	mov	r0, r7
 800d596:	f7ff ff0b 	bl	800d3b0 <__multiply>
 800d59a:	6020      	str	r0, [r4, #0]
 800d59c:	f8c0 9000 	str.w	r9, [r0]
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	e7e4      	b.n	800d56e <__pow5mult+0x6a>
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5aa:	bf00      	nop
 800d5ac:	0800ed4c 	.word	0x0800ed4c
 800d5b0:	0800ec71 	.word	0x0800ec71
 800d5b4:	0800ecf1 	.word	0x0800ecf1

0800d5b8 <__lshift>:
 800d5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5bc:	460c      	mov	r4, r1
 800d5be:	6849      	ldr	r1, [r1, #4]
 800d5c0:	6923      	ldr	r3, [r4, #16]
 800d5c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5c6:	68a3      	ldr	r3, [r4, #8]
 800d5c8:	4607      	mov	r7, r0
 800d5ca:	4691      	mov	r9, r2
 800d5cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5d0:	f108 0601 	add.w	r6, r8, #1
 800d5d4:	42b3      	cmp	r3, r6
 800d5d6:	db0b      	blt.n	800d5f0 <__lshift+0x38>
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7ff fddf 	bl	800d19c <_Balloc>
 800d5de:	4605      	mov	r5, r0
 800d5e0:	b948      	cbnz	r0, 800d5f6 <__lshift+0x3e>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	4b28      	ldr	r3, [pc, #160]	@ (800d688 <__lshift+0xd0>)
 800d5e6:	4829      	ldr	r0, [pc, #164]	@ (800d68c <__lshift+0xd4>)
 800d5e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5ec:	f000 fa22 	bl	800da34 <__assert_func>
 800d5f0:	3101      	adds	r1, #1
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	e7ee      	b.n	800d5d4 <__lshift+0x1c>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f100 0114 	add.w	r1, r0, #20
 800d5fc:	f100 0210 	add.w	r2, r0, #16
 800d600:	4618      	mov	r0, r3
 800d602:	4553      	cmp	r3, sl
 800d604:	db33      	blt.n	800d66e <__lshift+0xb6>
 800d606:	6920      	ldr	r0, [r4, #16]
 800d608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d60c:	f104 0314 	add.w	r3, r4, #20
 800d610:	f019 091f 	ands.w	r9, r9, #31
 800d614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d618:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d61c:	d02b      	beq.n	800d676 <__lshift+0xbe>
 800d61e:	f1c9 0e20 	rsb	lr, r9, #32
 800d622:	468a      	mov	sl, r1
 800d624:	2200      	movs	r2, #0
 800d626:	6818      	ldr	r0, [r3, #0]
 800d628:	fa00 f009 	lsl.w	r0, r0, r9
 800d62c:	4310      	orrs	r0, r2
 800d62e:	f84a 0b04 	str.w	r0, [sl], #4
 800d632:	f853 2b04 	ldr.w	r2, [r3], #4
 800d636:	459c      	cmp	ip, r3
 800d638:	fa22 f20e 	lsr.w	r2, r2, lr
 800d63c:	d8f3      	bhi.n	800d626 <__lshift+0x6e>
 800d63e:	ebac 0304 	sub.w	r3, ip, r4
 800d642:	3b15      	subs	r3, #21
 800d644:	f023 0303 	bic.w	r3, r3, #3
 800d648:	3304      	adds	r3, #4
 800d64a:	f104 0015 	add.w	r0, r4, #21
 800d64e:	4584      	cmp	ip, r0
 800d650:	bf38      	it	cc
 800d652:	2304      	movcc	r3, #4
 800d654:	50ca      	str	r2, [r1, r3]
 800d656:	b10a      	cbz	r2, 800d65c <__lshift+0xa4>
 800d658:	f108 0602 	add.w	r6, r8, #2
 800d65c:	3e01      	subs	r6, #1
 800d65e:	4638      	mov	r0, r7
 800d660:	612e      	str	r6, [r5, #16]
 800d662:	4621      	mov	r1, r4
 800d664:	f7ff fdda 	bl	800d21c <_Bfree>
 800d668:	4628      	mov	r0, r5
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d672:	3301      	adds	r3, #1
 800d674:	e7c5      	b.n	800d602 <__lshift+0x4a>
 800d676:	3904      	subs	r1, #4
 800d678:	f853 2b04 	ldr.w	r2, [r3], #4
 800d67c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d680:	459c      	cmp	ip, r3
 800d682:	d8f9      	bhi.n	800d678 <__lshift+0xc0>
 800d684:	e7ea      	b.n	800d65c <__lshift+0xa4>
 800d686:	bf00      	nop
 800d688:	0800ece0 	.word	0x0800ece0
 800d68c:	0800ecf1 	.word	0x0800ecf1

0800d690 <__mcmp>:
 800d690:	690a      	ldr	r2, [r1, #16]
 800d692:	4603      	mov	r3, r0
 800d694:	6900      	ldr	r0, [r0, #16]
 800d696:	1a80      	subs	r0, r0, r2
 800d698:	b530      	push	{r4, r5, lr}
 800d69a:	d10e      	bne.n	800d6ba <__mcmp+0x2a>
 800d69c:	3314      	adds	r3, #20
 800d69e:	3114      	adds	r1, #20
 800d6a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6b0:	4295      	cmp	r5, r2
 800d6b2:	d003      	beq.n	800d6bc <__mcmp+0x2c>
 800d6b4:	d205      	bcs.n	800d6c2 <__mcmp+0x32>
 800d6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ba:	bd30      	pop	{r4, r5, pc}
 800d6bc:	42a3      	cmp	r3, r4
 800d6be:	d3f3      	bcc.n	800d6a8 <__mcmp+0x18>
 800d6c0:	e7fb      	b.n	800d6ba <__mcmp+0x2a>
 800d6c2:	2001      	movs	r0, #1
 800d6c4:	e7f9      	b.n	800d6ba <__mcmp+0x2a>
	...

0800d6c8 <__mdiff>:
 800d6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6cc:	4689      	mov	r9, r1
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	4611      	mov	r1, r2
 800d6d2:	4648      	mov	r0, r9
 800d6d4:	4614      	mov	r4, r2
 800d6d6:	f7ff ffdb 	bl	800d690 <__mcmp>
 800d6da:	1e05      	subs	r5, r0, #0
 800d6dc:	d112      	bne.n	800d704 <__mdiff+0x3c>
 800d6de:	4629      	mov	r1, r5
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7ff fd5b 	bl	800d19c <_Balloc>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	b928      	cbnz	r0, 800d6f6 <__mdiff+0x2e>
 800d6ea:	4b3f      	ldr	r3, [pc, #252]	@ (800d7e8 <__mdiff+0x120>)
 800d6ec:	f240 2137 	movw	r1, #567	@ 0x237
 800d6f0:	483e      	ldr	r0, [pc, #248]	@ (800d7ec <__mdiff+0x124>)
 800d6f2:	f000 f99f 	bl	800da34 <__assert_func>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	b003      	add	sp, #12
 800d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d704:	bfbc      	itt	lt
 800d706:	464b      	movlt	r3, r9
 800d708:	46a1      	movlt	r9, r4
 800d70a:	4630      	mov	r0, r6
 800d70c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d710:	bfba      	itte	lt
 800d712:	461c      	movlt	r4, r3
 800d714:	2501      	movlt	r5, #1
 800d716:	2500      	movge	r5, #0
 800d718:	f7ff fd40 	bl	800d19c <_Balloc>
 800d71c:	4602      	mov	r2, r0
 800d71e:	b918      	cbnz	r0, 800d728 <__mdiff+0x60>
 800d720:	4b31      	ldr	r3, [pc, #196]	@ (800d7e8 <__mdiff+0x120>)
 800d722:	f240 2145 	movw	r1, #581	@ 0x245
 800d726:	e7e3      	b.n	800d6f0 <__mdiff+0x28>
 800d728:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d72c:	6926      	ldr	r6, [r4, #16]
 800d72e:	60c5      	str	r5, [r0, #12]
 800d730:	f109 0310 	add.w	r3, r9, #16
 800d734:	f109 0514 	add.w	r5, r9, #20
 800d738:	f104 0e14 	add.w	lr, r4, #20
 800d73c:	f100 0b14 	add.w	fp, r0, #20
 800d740:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d744:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	46d9      	mov	r9, fp
 800d74c:	f04f 0c00 	mov.w	ip, #0
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d756:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d75a:	9301      	str	r3, [sp, #4]
 800d75c:	fa1f f38a 	uxth.w	r3, sl
 800d760:	4619      	mov	r1, r3
 800d762:	b283      	uxth	r3, r0
 800d764:	1acb      	subs	r3, r1, r3
 800d766:	0c00      	lsrs	r0, r0, #16
 800d768:	4463      	add	r3, ip
 800d76a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d76e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d772:	b29b      	uxth	r3, r3
 800d774:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d778:	4576      	cmp	r6, lr
 800d77a:	f849 3b04 	str.w	r3, [r9], #4
 800d77e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d782:	d8e5      	bhi.n	800d750 <__mdiff+0x88>
 800d784:	1b33      	subs	r3, r6, r4
 800d786:	3b15      	subs	r3, #21
 800d788:	f023 0303 	bic.w	r3, r3, #3
 800d78c:	3415      	adds	r4, #21
 800d78e:	3304      	adds	r3, #4
 800d790:	42a6      	cmp	r6, r4
 800d792:	bf38      	it	cc
 800d794:	2304      	movcc	r3, #4
 800d796:	441d      	add	r5, r3
 800d798:	445b      	add	r3, fp
 800d79a:	461e      	mov	r6, r3
 800d79c:	462c      	mov	r4, r5
 800d79e:	4544      	cmp	r4, r8
 800d7a0:	d30e      	bcc.n	800d7c0 <__mdiff+0xf8>
 800d7a2:	f108 0103 	add.w	r1, r8, #3
 800d7a6:	1b49      	subs	r1, r1, r5
 800d7a8:	f021 0103 	bic.w	r1, r1, #3
 800d7ac:	3d03      	subs	r5, #3
 800d7ae:	45a8      	cmp	r8, r5
 800d7b0:	bf38      	it	cc
 800d7b2:	2100      	movcc	r1, #0
 800d7b4:	440b      	add	r3, r1
 800d7b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7ba:	b191      	cbz	r1, 800d7e2 <__mdiff+0x11a>
 800d7bc:	6117      	str	r7, [r2, #16]
 800d7be:	e79d      	b.n	800d6fc <__mdiff+0x34>
 800d7c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7c4:	46e6      	mov	lr, ip
 800d7c6:	0c08      	lsrs	r0, r1, #16
 800d7c8:	fa1c fc81 	uxtah	ip, ip, r1
 800d7cc:	4471      	add	r1, lr
 800d7ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d7d2:	b289      	uxth	r1, r1
 800d7d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7d8:	f846 1b04 	str.w	r1, [r6], #4
 800d7dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7e0:	e7dd      	b.n	800d79e <__mdiff+0xd6>
 800d7e2:	3f01      	subs	r7, #1
 800d7e4:	e7e7      	b.n	800d7b6 <__mdiff+0xee>
 800d7e6:	bf00      	nop
 800d7e8:	0800ece0 	.word	0x0800ece0
 800d7ec:	0800ecf1 	.word	0x0800ecf1

0800d7f0 <__d2b>:
 800d7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7f4:	460f      	mov	r7, r1
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	ec59 8b10 	vmov	r8, r9, d0
 800d7fc:	4616      	mov	r6, r2
 800d7fe:	f7ff fccd 	bl	800d19c <_Balloc>
 800d802:	4604      	mov	r4, r0
 800d804:	b930      	cbnz	r0, 800d814 <__d2b+0x24>
 800d806:	4602      	mov	r2, r0
 800d808:	4b23      	ldr	r3, [pc, #140]	@ (800d898 <__d2b+0xa8>)
 800d80a:	4824      	ldr	r0, [pc, #144]	@ (800d89c <__d2b+0xac>)
 800d80c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d810:	f000 f910 	bl	800da34 <__assert_func>
 800d814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d81c:	b10d      	cbz	r5, 800d822 <__d2b+0x32>
 800d81e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	f1b8 0300 	subs.w	r3, r8, #0
 800d828:	d023      	beq.n	800d872 <__d2b+0x82>
 800d82a:	4668      	mov	r0, sp
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	f7ff fd7c 	bl	800d32a <__lo0bits>
 800d832:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d836:	b1d0      	cbz	r0, 800d86e <__d2b+0x7e>
 800d838:	f1c0 0320 	rsb	r3, r0, #32
 800d83c:	fa02 f303 	lsl.w	r3, r2, r3
 800d840:	430b      	orrs	r3, r1
 800d842:	40c2      	lsrs	r2, r0
 800d844:	6163      	str	r3, [r4, #20]
 800d846:	9201      	str	r2, [sp, #4]
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	61a3      	str	r3, [r4, #24]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	bf0c      	ite	eq
 800d850:	2201      	moveq	r2, #1
 800d852:	2202      	movne	r2, #2
 800d854:	6122      	str	r2, [r4, #16]
 800d856:	b1a5      	cbz	r5, 800d882 <__d2b+0x92>
 800d858:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d85c:	4405      	add	r5, r0
 800d85e:	603d      	str	r5, [r7, #0]
 800d860:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d864:	6030      	str	r0, [r6, #0]
 800d866:	4620      	mov	r0, r4
 800d868:	b003      	add	sp, #12
 800d86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d86e:	6161      	str	r1, [r4, #20]
 800d870:	e7ea      	b.n	800d848 <__d2b+0x58>
 800d872:	a801      	add	r0, sp, #4
 800d874:	f7ff fd59 	bl	800d32a <__lo0bits>
 800d878:	9b01      	ldr	r3, [sp, #4]
 800d87a:	6163      	str	r3, [r4, #20]
 800d87c:	3020      	adds	r0, #32
 800d87e:	2201      	movs	r2, #1
 800d880:	e7e8      	b.n	800d854 <__d2b+0x64>
 800d882:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d886:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d88a:	6038      	str	r0, [r7, #0]
 800d88c:	6918      	ldr	r0, [r3, #16]
 800d88e:	f7ff fd2d 	bl	800d2ec <__hi0bits>
 800d892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d896:	e7e5      	b.n	800d864 <__d2b+0x74>
 800d898:	0800ece0 	.word	0x0800ece0
 800d89c:	0800ecf1 	.word	0x0800ecf1

0800d8a0 <__sflush_r>:
 800d8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a8:	0716      	lsls	r6, r2, #28
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	d454      	bmi.n	800d95a <__sflush_r+0xba>
 800d8b0:	684b      	ldr	r3, [r1, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	dc02      	bgt.n	800d8bc <__sflush_r+0x1c>
 800d8b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	dd48      	ble.n	800d94e <__sflush_r+0xae>
 800d8bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8be:	2e00      	cmp	r6, #0
 800d8c0:	d045      	beq.n	800d94e <__sflush_r+0xae>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8c8:	682f      	ldr	r7, [r5, #0]
 800d8ca:	6a21      	ldr	r1, [r4, #32]
 800d8cc:	602b      	str	r3, [r5, #0]
 800d8ce:	d030      	beq.n	800d932 <__sflush_r+0x92>
 800d8d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	0759      	lsls	r1, r3, #29
 800d8d6:	d505      	bpl.n	800d8e4 <__sflush_r+0x44>
 800d8d8:	6863      	ldr	r3, [r4, #4]
 800d8da:	1ad2      	subs	r2, r2, r3
 800d8dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8de:	b10b      	cbz	r3, 800d8e4 <__sflush_r+0x44>
 800d8e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8e2:	1ad2      	subs	r2, r2, r3
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8e8:	6a21      	ldr	r1, [r4, #32]
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	47b0      	blx	r6
 800d8ee:	1c43      	adds	r3, r0, #1
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	d106      	bne.n	800d902 <__sflush_r+0x62>
 800d8f4:	6829      	ldr	r1, [r5, #0]
 800d8f6:	291d      	cmp	r1, #29
 800d8f8:	d82b      	bhi.n	800d952 <__sflush_r+0xb2>
 800d8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800d9a4 <__sflush_r+0x104>)
 800d8fc:	410a      	asrs	r2, r1
 800d8fe:	07d6      	lsls	r6, r2, #31
 800d900:	d427      	bmi.n	800d952 <__sflush_r+0xb2>
 800d902:	2200      	movs	r2, #0
 800d904:	6062      	str	r2, [r4, #4]
 800d906:	04d9      	lsls	r1, r3, #19
 800d908:	6922      	ldr	r2, [r4, #16]
 800d90a:	6022      	str	r2, [r4, #0]
 800d90c:	d504      	bpl.n	800d918 <__sflush_r+0x78>
 800d90e:	1c42      	adds	r2, r0, #1
 800d910:	d101      	bne.n	800d916 <__sflush_r+0x76>
 800d912:	682b      	ldr	r3, [r5, #0]
 800d914:	b903      	cbnz	r3, 800d918 <__sflush_r+0x78>
 800d916:	6560      	str	r0, [r4, #84]	@ 0x54
 800d918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d91a:	602f      	str	r7, [r5, #0]
 800d91c:	b1b9      	cbz	r1, 800d94e <__sflush_r+0xae>
 800d91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d922:	4299      	cmp	r1, r3
 800d924:	d002      	beq.n	800d92c <__sflush_r+0x8c>
 800d926:	4628      	mov	r0, r5
 800d928:	f7ff fb38 	bl	800cf9c <_free_r>
 800d92c:	2300      	movs	r3, #0
 800d92e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d930:	e00d      	b.n	800d94e <__sflush_r+0xae>
 800d932:	2301      	movs	r3, #1
 800d934:	4628      	mov	r0, r5
 800d936:	47b0      	blx	r6
 800d938:	4602      	mov	r2, r0
 800d93a:	1c50      	adds	r0, r2, #1
 800d93c:	d1c9      	bne.n	800d8d2 <__sflush_r+0x32>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d0c6      	beq.n	800d8d2 <__sflush_r+0x32>
 800d944:	2b1d      	cmp	r3, #29
 800d946:	d001      	beq.n	800d94c <__sflush_r+0xac>
 800d948:	2b16      	cmp	r3, #22
 800d94a:	d11e      	bne.n	800d98a <__sflush_r+0xea>
 800d94c:	602f      	str	r7, [r5, #0]
 800d94e:	2000      	movs	r0, #0
 800d950:	e022      	b.n	800d998 <__sflush_r+0xf8>
 800d952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d956:	b21b      	sxth	r3, r3
 800d958:	e01b      	b.n	800d992 <__sflush_r+0xf2>
 800d95a:	690f      	ldr	r7, [r1, #16]
 800d95c:	2f00      	cmp	r7, #0
 800d95e:	d0f6      	beq.n	800d94e <__sflush_r+0xae>
 800d960:	0793      	lsls	r3, r2, #30
 800d962:	680e      	ldr	r6, [r1, #0]
 800d964:	bf08      	it	eq
 800d966:	694b      	ldreq	r3, [r1, #20]
 800d968:	600f      	str	r7, [r1, #0]
 800d96a:	bf18      	it	ne
 800d96c:	2300      	movne	r3, #0
 800d96e:	eba6 0807 	sub.w	r8, r6, r7
 800d972:	608b      	str	r3, [r1, #8]
 800d974:	f1b8 0f00 	cmp.w	r8, #0
 800d978:	dde9      	ble.n	800d94e <__sflush_r+0xae>
 800d97a:	6a21      	ldr	r1, [r4, #32]
 800d97c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d97e:	4643      	mov	r3, r8
 800d980:	463a      	mov	r2, r7
 800d982:	4628      	mov	r0, r5
 800d984:	47b0      	blx	r6
 800d986:	2800      	cmp	r0, #0
 800d988:	dc08      	bgt.n	800d99c <__sflush_r+0xfc>
 800d98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d992:	81a3      	strh	r3, [r4, #12]
 800d994:	f04f 30ff 	mov.w	r0, #4294967295
 800d998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d99c:	4407      	add	r7, r0
 800d99e:	eba8 0800 	sub.w	r8, r8, r0
 800d9a2:	e7e7      	b.n	800d974 <__sflush_r+0xd4>
 800d9a4:	dfbffffe 	.word	0xdfbffffe

0800d9a8 <_fflush_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	690b      	ldr	r3, [r1, #16]
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	460c      	mov	r4, r1
 800d9b0:	b913      	cbnz	r3, 800d9b8 <_fflush_r+0x10>
 800d9b2:	2500      	movs	r5, #0
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	b118      	cbz	r0, 800d9c2 <_fflush_r+0x1a>
 800d9ba:	6a03      	ldr	r3, [r0, #32]
 800d9bc:	b90b      	cbnz	r3, 800d9c2 <_fflush_r+0x1a>
 800d9be:	f7fe fc13 	bl	800c1e8 <__sinit>
 800d9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d0f3      	beq.n	800d9b2 <_fflush_r+0xa>
 800d9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9cc:	07d0      	lsls	r0, r2, #31
 800d9ce:	d404      	bmi.n	800d9da <_fflush_r+0x32>
 800d9d0:	0599      	lsls	r1, r3, #22
 800d9d2:	d402      	bmi.n	800d9da <_fflush_r+0x32>
 800d9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9d6:	f7fe fcfe 	bl	800c3d6 <__retarget_lock_acquire_recursive>
 800d9da:	4628      	mov	r0, r5
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f7ff ff5f 	bl	800d8a0 <__sflush_r>
 800d9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9e4:	07da      	lsls	r2, r3, #31
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	d4e4      	bmi.n	800d9b4 <_fflush_r+0xc>
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	059b      	lsls	r3, r3, #22
 800d9ee:	d4e1      	bmi.n	800d9b4 <_fflush_r+0xc>
 800d9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9f2:	f7fe fcf1 	bl	800c3d8 <__retarget_lock_release_recursive>
 800d9f6:	e7dd      	b.n	800d9b4 <_fflush_r+0xc>

0800d9f8 <_sbrk_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4d06      	ldr	r5, [pc, #24]	@ (800da14 <_sbrk_r+0x1c>)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	602b      	str	r3, [r5, #0]
 800da04:	f7f5 f96c 	bl	8002ce0 <_sbrk>
 800da08:	1c43      	adds	r3, r0, #1
 800da0a:	d102      	bne.n	800da12 <_sbrk_r+0x1a>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	b103      	cbz	r3, 800da12 <_sbrk_r+0x1a>
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	24002744 	.word	0x24002744

0800da18 <memcpy>:
 800da18:	440a      	add	r2, r1
 800da1a:	4291      	cmp	r1, r2
 800da1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800da20:	d100      	bne.n	800da24 <memcpy+0xc>
 800da22:	4770      	bx	lr
 800da24:	b510      	push	{r4, lr}
 800da26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da2e:	4291      	cmp	r1, r2
 800da30:	d1f9      	bne.n	800da26 <memcpy+0xe>
 800da32:	bd10      	pop	{r4, pc}

0800da34 <__assert_func>:
 800da34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da36:	4614      	mov	r4, r2
 800da38:	461a      	mov	r2, r3
 800da3a:	4b09      	ldr	r3, [pc, #36]	@ (800da60 <__assert_func+0x2c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4605      	mov	r5, r0
 800da40:	68d8      	ldr	r0, [r3, #12]
 800da42:	b954      	cbnz	r4, 800da5a <__assert_func+0x26>
 800da44:	4b07      	ldr	r3, [pc, #28]	@ (800da64 <__assert_func+0x30>)
 800da46:	461c      	mov	r4, r3
 800da48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da4c:	9100      	str	r1, [sp, #0]
 800da4e:	462b      	mov	r3, r5
 800da50:	4905      	ldr	r1, [pc, #20]	@ (800da68 <__assert_func+0x34>)
 800da52:	f000 f841 	bl	800dad8 <fiprintf>
 800da56:	f000 f851 	bl	800dafc <abort>
 800da5a:	4b04      	ldr	r3, [pc, #16]	@ (800da6c <__assert_func+0x38>)
 800da5c:	e7f4      	b.n	800da48 <__assert_func+0x14>
 800da5e:	bf00      	nop
 800da60:	24000020 	.word	0x24000020
 800da64:	0800ee8d 	.word	0x0800ee8d
 800da68:	0800ee5f 	.word	0x0800ee5f
 800da6c:	0800ee52 	.word	0x0800ee52

0800da70 <_calloc_r>:
 800da70:	b570      	push	{r4, r5, r6, lr}
 800da72:	fba1 5402 	umull	r5, r4, r1, r2
 800da76:	b93c      	cbnz	r4, 800da88 <_calloc_r+0x18>
 800da78:	4629      	mov	r1, r5
 800da7a:	f7ff fb03 	bl	800d084 <_malloc_r>
 800da7e:	4606      	mov	r6, r0
 800da80:	b928      	cbnz	r0, 800da8e <_calloc_r+0x1e>
 800da82:	2600      	movs	r6, #0
 800da84:	4630      	mov	r0, r6
 800da86:	bd70      	pop	{r4, r5, r6, pc}
 800da88:	220c      	movs	r2, #12
 800da8a:	6002      	str	r2, [r0, #0]
 800da8c:	e7f9      	b.n	800da82 <_calloc_r+0x12>
 800da8e:	462a      	mov	r2, r5
 800da90:	4621      	mov	r1, r4
 800da92:	f7fe fc22 	bl	800c2da <memset>
 800da96:	e7f5      	b.n	800da84 <_calloc_r+0x14>

0800da98 <__ascii_mbtowc>:
 800da98:	b082      	sub	sp, #8
 800da9a:	b901      	cbnz	r1, 800da9e <__ascii_mbtowc+0x6>
 800da9c:	a901      	add	r1, sp, #4
 800da9e:	b142      	cbz	r2, 800dab2 <__ascii_mbtowc+0x1a>
 800daa0:	b14b      	cbz	r3, 800dab6 <__ascii_mbtowc+0x1e>
 800daa2:	7813      	ldrb	r3, [r2, #0]
 800daa4:	600b      	str	r3, [r1, #0]
 800daa6:	7812      	ldrb	r2, [r2, #0]
 800daa8:	1e10      	subs	r0, r2, #0
 800daaa:	bf18      	it	ne
 800daac:	2001      	movne	r0, #1
 800daae:	b002      	add	sp, #8
 800dab0:	4770      	bx	lr
 800dab2:	4610      	mov	r0, r2
 800dab4:	e7fb      	b.n	800daae <__ascii_mbtowc+0x16>
 800dab6:	f06f 0001 	mvn.w	r0, #1
 800daba:	e7f8      	b.n	800daae <__ascii_mbtowc+0x16>

0800dabc <__ascii_wctomb>:
 800dabc:	4603      	mov	r3, r0
 800dabe:	4608      	mov	r0, r1
 800dac0:	b141      	cbz	r1, 800dad4 <__ascii_wctomb+0x18>
 800dac2:	2aff      	cmp	r2, #255	@ 0xff
 800dac4:	d904      	bls.n	800dad0 <__ascii_wctomb+0x14>
 800dac6:	228a      	movs	r2, #138	@ 0x8a
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	f04f 30ff 	mov.w	r0, #4294967295
 800dace:	4770      	bx	lr
 800dad0:	700a      	strb	r2, [r1, #0]
 800dad2:	2001      	movs	r0, #1
 800dad4:	4770      	bx	lr
	...

0800dad8 <fiprintf>:
 800dad8:	b40e      	push	{r1, r2, r3}
 800dada:	b503      	push	{r0, r1, lr}
 800dadc:	4601      	mov	r1, r0
 800dade:	ab03      	add	r3, sp, #12
 800dae0:	4805      	ldr	r0, [pc, #20]	@ (800daf8 <fiprintf+0x20>)
 800dae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae6:	6800      	ldr	r0, [r0, #0]
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	f000 f837 	bl	800db5c <_vfiprintf_r>
 800daee:	b002      	add	sp, #8
 800daf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800daf4:	b003      	add	sp, #12
 800daf6:	4770      	bx	lr
 800daf8:	24000020 	.word	0x24000020

0800dafc <abort>:
 800dafc:	b508      	push	{r3, lr}
 800dafe:	2006      	movs	r0, #6
 800db00:	f000 fa00 	bl	800df04 <raise>
 800db04:	2001      	movs	r0, #1
 800db06:	f7f5 f873 	bl	8002bf0 <_exit>

0800db0a <__sfputc_r>:
 800db0a:	6893      	ldr	r3, [r2, #8]
 800db0c:	3b01      	subs	r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	b410      	push	{r4}
 800db12:	6093      	str	r3, [r2, #8]
 800db14:	da08      	bge.n	800db28 <__sfputc_r+0x1e>
 800db16:	6994      	ldr	r4, [r2, #24]
 800db18:	42a3      	cmp	r3, r4
 800db1a:	db01      	blt.n	800db20 <__sfputc_r+0x16>
 800db1c:	290a      	cmp	r1, #10
 800db1e:	d103      	bne.n	800db28 <__sfputc_r+0x1e>
 800db20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db24:	f000 b932 	b.w	800dd8c <__swbuf_r>
 800db28:	6813      	ldr	r3, [r2, #0]
 800db2a:	1c58      	adds	r0, r3, #1
 800db2c:	6010      	str	r0, [r2, #0]
 800db2e:	7019      	strb	r1, [r3, #0]
 800db30:	4608      	mov	r0, r1
 800db32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <__sfputs_r>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	4606      	mov	r6, r0
 800db3c:	460f      	mov	r7, r1
 800db3e:	4614      	mov	r4, r2
 800db40:	18d5      	adds	r5, r2, r3
 800db42:	42ac      	cmp	r4, r5
 800db44:	d101      	bne.n	800db4a <__sfputs_r+0x12>
 800db46:	2000      	movs	r0, #0
 800db48:	e007      	b.n	800db5a <__sfputs_r+0x22>
 800db4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4e:	463a      	mov	r2, r7
 800db50:	4630      	mov	r0, r6
 800db52:	f7ff ffda 	bl	800db0a <__sfputc_r>
 800db56:	1c43      	adds	r3, r0, #1
 800db58:	d1f3      	bne.n	800db42 <__sfputs_r+0xa>
 800db5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db5c <_vfiprintf_r>:
 800db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	460d      	mov	r5, r1
 800db62:	b09d      	sub	sp, #116	@ 0x74
 800db64:	4614      	mov	r4, r2
 800db66:	4698      	mov	r8, r3
 800db68:	4606      	mov	r6, r0
 800db6a:	b118      	cbz	r0, 800db74 <_vfiprintf_r+0x18>
 800db6c:	6a03      	ldr	r3, [r0, #32]
 800db6e:	b90b      	cbnz	r3, 800db74 <_vfiprintf_r+0x18>
 800db70:	f7fe fb3a 	bl	800c1e8 <__sinit>
 800db74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db76:	07d9      	lsls	r1, r3, #31
 800db78:	d405      	bmi.n	800db86 <_vfiprintf_r+0x2a>
 800db7a:	89ab      	ldrh	r3, [r5, #12]
 800db7c:	059a      	lsls	r2, r3, #22
 800db7e:	d402      	bmi.n	800db86 <_vfiprintf_r+0x2a>
 800db80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db82:	f7fe fc28 	bl	800c3d6 <__retarget_lock_acquire_recursive>
 800db86:	89ab      	ldrh	r3, [r5, #12]
 800db88:	071b      	lsls	r3, r3, #28
 800db8a:	d501      	bpl.n	800db90 <_vfiprintf_r+0x34>
 800db8c:	692b      	ldr	r3, [r5, #16]
 800db8e:	b99b      	cbnz	r3, 800dbb8 <_vfiprintf_r+0x5c>
 800db90:	4629      	mov	r1, r5
 800db92:	4630      	mov	r0, r6
 800db94:	f000 f938 	bl	800de08 <__swsetup_r>
 800db98:	b170      	cbz	r0, 800dbb8 <_vfiprintf_r+0x5c>
 800db9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db9c:	07dc      	lsls	r4, r3, #31
 800db9e:	d504      	bpl.n	800dbaa <_vfiprintf_r+0x4e>
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	b01d      	add	sp, #116	@ 0x74
 800dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbaa:	89ab      	ldrh	r3, [r5, #12]
 800dbac:	0598      	lsls	r0, r3, #22
 800dbae:	d4f7      	bmi.n	800dba0 <_vfiprintf_r+0x44>
 800dbb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbb2:	f7fe fc11 	bl	800c3d8 <__retarget_lock_release_recursive>
 800dbb6:	e7f3      	b.n	800dba0 <_vfiprintf_r+0x44>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbbc:	2320      	movs	r3, #32
 800dbbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbc6:	2330      	movs	r3, #48	@ 0x30
 800dbc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd78 <_vfiprintf_r+0x21c>
 800dbcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbd0:	f04f 0901 	mov.w	r9, #1
 800dbd4:	4623      	mov	r3, r4
 800dbd6:	469a      	mov	sl, r3
 800dbd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbdc:	b10a      	cbz	r2, 800dbe2 <_vfiprintf_r+0x86>
 800dbde:	2a25      	cmp	r2, #37	@ 0x25
 800dbe0:	d1f9      	bne.n	800dbd6 <_vfiprintf_r+0x7a>
 800dbe2:	ebba 0b04 	subs.w	fp, sl, r4
 800dbe6:	d00b      	beq.n	800dc00 <_vfiprintf_r+0xa4>
 800dbe8:	465b      	mov	r3, fp
 800dbea:	4622      	mov	r2, r4
 800dbec:	4629      	mov	r1, r5
 800dbee:	4630      	mov	r0, r6
 800dbf0:	f7ff ffa2 	bl	800db38 <__sfputs_r>
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	f000 80a7 	beq.w	800dd48 <_vfiprintf_r+0x1ec>
 800dbfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbfc:	445a      	add	r2, fp
 800dbfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc00:	f89a 3000 	ldrb.w	r3, [sl]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 809f 	beq.w	800dd48 <_vfiprintf_r+0x1ec>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc14:	f10a 0a01 	add.w	sl, sl, #1
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	9307      	str	r3, [sp, #28]
 800dc1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc20:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc22:	4654      	mov	r4, sl
 800dc24:	2205      	movs	r2, #5
 800dc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc2a:	4853      	ldr	r0, [pc, #332]	@ (800dd78 <_vfiprintf_r+0x21c>)
 800dc2c:	f7f2 fb58 	bl	80002e0 <memchr>
 800dc30:	9a04      	ldr	r2, [sp, #16]
 800dc32:	b9d8      	cbnz	r0, 800dc6c <_vfiprintf_r+0x110>
 800dc34:	06d1      	lsls	r1, r2, #27
 800dc36:	bf44      	itt	mi
 800dc38:	2320      	movmi	r3, #32
 800dc3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc3e:	0713      	lsls	r3, r2, #28
 800dc40:	bf44      	itt	mi
 800dc42:	232b      	movmi	r3, #43	@ 0x2b
 800dc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc48:	f89a 3000 	ldrb.w	r3, [sl]
 800dc4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc4e:	d015      	beq.n	800dc7c <_vfiprintf_r+0x120>
 800dc50:	9a07      	ldr	r2, [sp, #28]
 800dc52:	4654      	mov	r4, sl
 800dc54:	2000      	movs	r0, #0
 800dc56:	f04f 0c0a 	mov.w	ip, #10
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc60:	3b30      	subs	r3, #48	@ 0x30
 800dc62:	2b09      	cmp	r3, #9
 800dc64:	d94b      	bls.n	800dcfe <_vfiprintf_r+0x1a2>
 800dc66:	b1b0      	cbz	r0, 800dc96 <_vfiprintf_r+0x13a>
 800dc68:	9207      	str	r2, [sp, #28]
 800dc6a:	e014      	b.n	800dc96 <_vfiprintf_r+0x13a>
 800dc6c:	eba0 0308 	sub.w	r3, r0, r8
 800dc70:	fa09 f303 	lsl.w	r3, r9, r3
 800dc74:	4313      	orrs	r3, r2
 800dc76:	9304      	str	r3, [sp, #16]
 800dc78:	46a2      	mov	sl, r4
 800dc7a:	e7d2      	b.n	800dc22 <_vfiprintf_r+0xc6>
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	1d19      	adds	r1, r3, #4
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	9103      	str	r1, [sp, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	bfbb      	ittet	lt
 800dc88:	425b      	neglt	r3, r3
 800dc8a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc8e:	9307      	strge	r3, [sp, #28]
 800dc90:	9307      	strlt	r3, [sp, #28]
 800dc92:	bfb8      	it	lt
 800dc94:	9204      	strlt	r2, [sp, #16]
 800dc96:	7823      	ldrb	r3, [r4, #0]
 800dc98:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc9a:	d10a      	bne.n	800dcb2 <_vfiprintf_r+0x156>
 800dc9c:	7863      	ldrb	r3, [r4, #1]
 800dc9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dca0:	d132      	bne.n	800dd08 <_vfiprintf_r+0x1ac>
 800dca2:	9b03      	ldr	r3, [sp, #12]
 800dca4:	1d1a      	adds	r2, r3, #4
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	9203      	str	r2, [sp, #12]
 800dcaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcae:	3402      	adds	r4, #2
 800dcb0:	9305      	str	r3, [sp, #20]
 800dcb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd88 <_vfiprintf_r+0x22c>
 800dcb6:	7821      	ldrb	r1, [r4, #0]
 800dcb8:	2203      	movs	r2, #3
 800dcba:	4650      	mov	r0, sl
 800dcbc:	f7f2 fb10 	bl	80002e0 <memchr>
 800dcc0:	b138      	cbz	r0, 800dcd2 <_vfiprintf_r+0x176>
 800dcc2:	9b04      	ldr	r3, [sp, #16]
 800dcc4:	eba0 000a 	sub.w	r0, r0, sl
 800dcc8:	2240      	movs	r2, #64	@ 0x40
 800dcca:	4082      	lsls	r2, r0
 800dccc:	4313      	orrs	r3, r2
 800dcce:	3401      	adds	r4, #1
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd6:	4829      	ldr	r0, [pc, #164]	@ (800dd7c <_vfiprintf_r+0x220>)
 800dcd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcdc:	2206      	movs	r2, #6
 800dcde:	f7f2 faff 	bl	80002e0 <memchr>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d03f      	beq.n	800dd66 <_vfiprintf_r+0x20a>
 800dce6:	4b26      	ldr	r3, [pc, #152]	@ (800dd80 <_vfiprintf_r+0x224>)
 800dce8:	bb1b      	cbnz	r3, 800dd32 <_vfiprintf_r+0x1d6>
 800dcea:	9b03      	ldr	r3, [sp, #12]
 800dcec:	3307      	adds	r3, #7
 800dcee:	f023 0307 	bic.w	r3, r3, #7
 800dcf2:	3308      	adds	r3, #8
 800dcf4:	9303      	str	r3, [sp, #12]
 800dcf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf8:	443b      	add	r3, r7
 800dcfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcfc:	e76a      	b.n	800dbd4 <_vfiprintf_r+0x78>
 800dcfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd02:	460c      	mov	r4, r1
 800dd04:	2001      	movs	r0, #1
 800dd06:	e7a8      	b.n	800dc5a <_vfiprintf_r+0xfe>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	3401      	adds	r4, #1
 800dd0c:	9305      	str	r3, [sp, #20]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	f04f 0c0a 	mov.w	ip, #10
 800dd14:	4620      	mov	r0, r4
 800dd16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd1a:	3a30      	subs	r2, #48	@ 0x30
 800dd1c:	2a09      	cmp	r2, #9
 800dd1e:	d903      	bls.n	800dd28 <_vfiprintf_r+0x1cc>
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d0c6      	beq.n	800dcb2 <_vfiprintf_r+0x156>
 800dd24:	9105      	str	r1, [sp, #20]
 800dd26:	e7c4      	b.n	800dcb2 <_vfiprintf_r+0x156>
 800dd28:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e7f0      	b.n	800dd14 <_vfiprintf_r+0x1b8>
 800dd32:	ab03      	add	r3, sp, #12
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	462a      	mov	r2, r5
 800dd38:	4b12      	ldr	r3, [pc, #72]	@ (800dd84 <_vfiprintf_r+0x228>)
 800dd3a:	a904      	add	r1, sp, #16
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f7fd fe1f 	bl	800b980 <_printf_float>
 800dd42:	4607      	mov	r7, r0
 800dd44:	1c78      	adds	r0, r7, #1
 800dd46:	d1d6      	bne.n	800dcf6 <_vfiprintf_r+0x19a>
 800dd48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd4a:	07d9      	lsls	r1, r3, #31
 800dd4c:	d405      	bmi.n	800dd5a <_vfiprintf_r+0x1fe>
 800dd4e:	89ab      	ldrh	r3, [r5, #12]
 800dd50:	059a      	lsls	r2, r3, #22
 800dd52:	d402      	bmi.n	800dd5a <_vfiprintf_r+0x1fe>
 800dd54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd56:	f7fe fb3f 	bl	800c3d8 <__retarget_lock_release_recursive>
 800dd5a:	89ab      	ldrh	r3, [r5, #12]
 800dd5c:	065b      	lsls	r3, r3, #25
 800dd5e:	f53f af1f 	bmi.w	800dba0 <_vfiprintf_r+0x44>
 800dd62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd64:	e71e      	b.n	800dba4 <_vfiprintf_r+0x48>
 800dd66:	ab03      	add	r3, sp, #12
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	462a      	mov	r2, r5
 800dd6c:	4b05      	ldr	r3, [pc, #20]	@ (800dd84 <_vfiprintf_r+0x228>)
 800dd6e:	a904      	add	r1, sp, #16
 800dd70:	4630      	mov	r0, r6
 800dd72:	f7fe f88d 	bl	800be90 <_printf_i>
 800dd76:	e7e4      	b.n	800dd42 <_vfiprintf_r+0x1e6>
 800dd78:	0800ef8f 	.word	0x0800ef8f
 800dd7c:	0800ef99 	.word	0x0800ef99
 800dd80:	0800b981 	.word	0x0800b981
 800dd84:	0800db39 	.word	0x0800db39
 800dd88:	0800ef95 	.word	0x0800ef95

0800dd8c <__swbuf_r>:
 800dd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8e:	460e      	mov	r6, r1
 800dd90:	4614      	mov	r4, r2
 800dd92:	4605      	mov	r5, r0
 800dd94:	b118      	cbz	r0, 800dd9e <__swbuf_r+0x12>
 800dd96:	6a03      	ldr	r3, [r0, #32]
 800dd98:	b90b      	cbnz	r3, 800dd9e <__swbuf_r+0x12>
 800dd9a:	f7fe fa25 	bl	800c1e8 <__sinit>
 800dd9e:	69a3      	ldr	r3, [r4, #24]
 800dda0:	60a3      	str	r3, [r4, #8]
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	071a      	lsls	r2, r3, #28
 800dda6:	d501      	bpl.n	800ddac <__swbuf_r+0x20>
 800dda8:	6923      	ldr	r3, [r4, #16]
 800ddaa:	b943      	cbnz	r3, 800ddbe <__swbuf_r+0x32>
 800ddac:	4621      	mov	r1, r4
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f000 f82a 	bl	800de08 <__swsetup_r>
 800ddb4:	b118      	cbz	r0, 800ddbe <__swbuf_r+0x32>
 800ddb6:	f04f 37ff 	mov.w	r7, #4294967295
 800ddba:	4638      	mov	r0, r7
 800ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	6922      	ldr	r2, [r4, #16]
 800ddc2:	1a98      	subs	r0, r3, r2
 800ddc4:	6963      	ldr	r3, [r4, #20]
 800ddc6:	b2f6      	uxtb	r6, r6
 800ddc8:	4283      	cmp	r3, r0
 800ddca:	4637      	mov	r7, r6
 800ddcc:	dc05      	bgt.n	800ddda <__swbuf_r+0x4e>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	f7ff fde9 	bl	800d9a8 <_fflush_r>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d1ed      	bne.n	800ddb6 <__swbuf_r+0x2a>
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	3b01      	subs	r3, #1
 800ddde:	60a3      	str	r3, [r4, #8]
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	6022      	str	r2, [r4, #0]
 800dde6:	701e      	strb	r6, [r3, #0]
 800dde8:	6962      	ldr	r2, [r4, #20]
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d004      	beq.n	800ddfa <__swbuf_r+0x6e>
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	07db      	lsls	r3, r3, #31
 800ddf4:	d5e1      	bpl.n	800ddba <__swbuf_r+0x2e>
 800ddf6:	2e0a      	cmp	r6, #10
 800ddf8:	d1df      	bne.n	800ddba <__swbuf_r+0x2e>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f7ff fdd3 	bl	800d9a8 <_fflush_r>
 800de02:	2800      	cmp	r0, #0
 800de04:	d0d9      	beq.n	800ddba <__swbuf_r+0x2e>
 800de06:	e7d6      	b.n	800ddb6 <__swbuf_r+0x2a>

0800de08 <__swsetup_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4b29      	ldr	r3, [pc, #164]	@ (800deb0 <__swsetup_r+0xa8>)
 800de0c:	4605      	mov	r5, r0
 800de0e:	6818      	ldr	r0, [r3, #0]
 800de10:	460c      	mov	r4, r1
 800de12:	b118      	cbz	r0, 800de1c <__swsetup_r+0x14>
 800de14:	6a03      	ldr	r3, [r0, #32]
 800de16:	b90b      	cbnz	r3, 800de1c <__swsetup_r+0x14>
 800de18:	f7fe f9e6 	bl	800c1e8 <__sinit>
 800de1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de20:	0719      	lsls	r1, r3, #28
 800de22:	d422      	bmi.n	800de6a <__swsetup_r+0x62>
 800de24:	06da      	lsls	r2, r3, #27
 800de26:	d407      	bmi.n	800de38 <__swsetup_r+0x30>
 800de28:	2209      	movs	r2, #9
 800de2a:	602a      	str	r2, [r5, #0]
 800de2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de30:	81a3      	strh	r3, [r4, #12]
 800de32:	f04f 30ff 	mov.w	r0, #4294967295
 800de36:	e033      	b.n	800dea0 <__swsetup_r+0x98>
 800de38:	0758      	lsls	r0, r3, #29
 800de3a:	d512      	bpl.n	800de62 <__swsetup_r+0x5a>
 800de3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de3e:	b141      	cbz	r1, 800de52 <__swsetup_r+0x4a>
 800de40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de44:	4299      	cmp	r1, r3
 800de46:	d002      	beq.n	800de4e <__swsetup_r+0x46>
 800de48:	4628      	mov	r0, r5
 800de4a:	f7ff f8a7 	bl	800cf9c <_free_r>
 800de4e:	2300      	movs	r3, #0
 800de50:	6363      	str	r3, [r4, #52]	@ 0x34
 800de52:	89a3      	ldrh	r3, [r4, #12]
 800de54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de58:	81a3      	strh	r3, [r4, #12]
 800de5a:	2300      	movs	r3, #0
 800de5c:	6063      	str	r3, [r4, #4]
 800de5e:	6923      	ldr	r3, [r4, #16]
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	f043 0308 	orr.w	r3, r3, #8
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	6923      	ldr	r3, [r4, #16]
 800de6c:	b94b      	cbnz	r3, 800de82 <__swsetup_r+0x7a>
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de78:	d003      	beq.n	800de82 <__swsetup_r+0x7a>
 800de7a:	4621      	mov	r1, r4
 800de7c:	4628      	mov	r0, r5
 800de7e:	f000 f883 	bl	800df88 <__smakebuf_r>
 800de82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de86:	f013 0201 	ands.w	r2, r3, #1
 800de8a:	d00a      	beq.n	800dea2 <__swsetup_r+0x9a>
 800de8c:	2200      	movs	r2, #0
 800de8e:	60a2      	str	r2, [r4, #8]
 800de90:	6962      	ldr	r2, [r4, #20]
 800de92:	4252      	negs	r2, r2
 800de94:	61a2      	str	r2, [r4, #24]
 800de96:	6922      	ldr	r2, [r4, #16]
 800de98:	b942      	cbnz	r2, 800deac <__swsetup_r+0xa4>
 800de9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de9e:	d1c5      	bne.n	800de2c <__swsetup_r+0x24>
 800dea0:	bd38      	pop	{r3, r4, r5, pc}
 800dea2:	0799      	lsls	r1, r3, #30
 800dea4:	bf58      	it	pl
 800dea6:	6962      	ldrpl	r2, [r4, #20]
 800dea8:	60a2      	str	r2, [r4, #8]
 800deaa:	e7f4      	b.n	800de96 <__swsetup_r+0x8e>
 800deac:	2000      	movs	r0, #0
 800deae:	e7f7      	b.n	800dea0 <__swsetup_r+0x98>
 800deb0:	24000020 	.word	0x24000020

0800deb4 <_raise_r>:
 800deb4:	291f      	cmp	r1, #31
 800deb6:	b538      	push	{r3, r4, r5, lr}
 800deb8:	4605      	mov	r5, r0
 800deba:	460c      	mov	r4, r1
 800debc:	d904      	bls.n	800dec8 <_raise_r+0x14>
 800debe:	2316      	movs	r3, #22
 800dec0:	6003      	str	r3, [r0, #0]
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800deca:	b112      	cbz	r2, 800ded2 <_raise_r+0x1e>
 800decc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ded0:	b94b      	cbnz	r3, 800dee6 <_raise_r+0x32>
 800ded2:	4628      	mov	r0, r5
 800ded4:	f000 f830 	bl	800df38 <_getpid_r>
 800ded8:	4622      	mov	r2, r4
 800deda:	4601      	mov	r1, r0
 800dedc:	4628      	mov	r0, r5
 800dede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dee2:	f000 b817 	b.w	800df14 <_kill_r>
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d00a      	beq.n	800df00 <_raise_r+0x4c>
 800deea:	1c59      	adds	r1, r3, #1
 800deec:	d103      	bne.n	800def6 <_raise_r+0x42>
 800deee:	2316      	movs	r3, #22
 800def0:	6003      	str	r3, [r0, #0]
 800def2:	2001      	movs	r0, #1
 800def4:	e7e7      	b.n	800dec6 <_raise_r+0x12>
 800def6:	2100      	movs	r1, #0
 800def8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800defc:	4620      	mov	r0, r4
 800defe:	4798      	blx	r3
 800df00:	2000      	movs	r0, #0
 800df02:	e7e0      	b.n	800dec6 <_raise_r+0x12>

0800df04 <raise>:
 800df04:	4b02      	ldr	r3, [pc, #8]	@ (800df10 <raise+0xc>)
 800df06:	4601      	mov	r1, r0
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	f7ff bfd3 	b.w	800deb4 <_raise_r>
 800df0e:	bf00      	nop
 800df10:	24000020 	.word	0x24000020

0800df14 <_kill_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d07      	ldr	r5, [pc, #28]	@ (800df34 <_kill_r+0x20>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	4611      	mov	r1, r2
 800df20:	602b      	str	r3, [r5, #0]
 800df22:	f7f4 fe55 	bl	8002bd0 <_kill>
 800df26:	1c43      	adds	r3, r0, #1
 800df28:	d102      	bne.n	800df30 <_kill_r+0x1c>
 800df2a:	682b      	ldr	r3, [r5, #0]
 800df2c:	b103      	cbz	r3, 800df30 <_kill_r+0x1c>
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	bd38      	pop	{r3, r4, r5, pc}
 800df32:	bf00      	nop
 800df34:	24002744 	.word	0x24002744

0800df38 <_getpid_r>:
 800df38:	f7f4 be42 	b.w	8002bc0 <_getpid>

0800df3c <__swhatbuf_r>:
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	460c      	mov	r4, r1
 800df40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df44:	2900      	cmp	r1, #0
 800df46:	b096      	sub	sp, #88	@ 0x58
 800df48:	4615      	mov	r5, r2
 800df4a:	461e      	mov	r6, r3
 800df4c:	da0d      	bge.n	800df6a <__swhatbuf_r+0x2e>
 800df4e:	89a3      	ldrh	r3, [r4, #12]
 800df50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df54:	f04f 0100 	mov.w	r1, #0
 800df58:	bf14      	ite	ne
 800df5a:	2340      	movne	r3, #64	@ 0x40
 800df5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df60:	2000      	movs	r0, #0
 800df62:	6031      	str	r1, [r6, #0]
 800df64:	602b      	str	r3, [r5, #0]
 800df66:	b016      	add	sp, #88	@ 0x58
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	466a      	mov	r2, sp
 800df6c:	f000 f848 	bl	800e000 <_fstat_r>
 800df70:	2800      	cmp	r0, #0
 800df72:	dbec      	blt.n	800df4e <__swhatbuf_r+0x12>
 800df74:	9901      	ldr	r1, [sp, #4]
 800df76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df7e:	4259      	negs	r1, r3
 800df80:	4159      	adcs	r1, r3
 800df82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df86:	e7eb      	b.n	800df60 <__swhatbuf_r+0x24>

0800df88 <__smakebuf_r>:
 800df88:	898b      	ldrh	r3, [r1, #12]
 800df8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df8c:	079d      	lsls	r5, r3, #30
 800df8e:	4606      	mov	r6, r0
 800df90:	460c      	mov	r4, r1
 800df92:	d507      	bpl.n	800dfa4 <__smakebuf_r+0x1c>
 800df94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	6123      	str	r3, [r4, #16]
 800df9c:	2301      	movs	r3, #1
 800df9e:	6163      	str	r3, [r4, #20]
 800dfa0:	b003      	add	sp, #12
 800dfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa4:	ab01      	add	r3, sp, #4
 800dfa6:	466a      	mov	r2, sp
 800dfa8:	f7ff ffc8 	bl	800df3c <__swhatbuf_r>
 800dfac:	9f00      	ldr	r7, [sp, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f7ff f866 	bl	800d084 <_malloc_r>
 800dfb8:	b948      	cbnz	r0, 800dfce <__smakebuf_r+0x46>
 800dfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfbe:	059a      	lsls	r2, r3, #22
 800dfc0:	d4ee      	bmi.n	800dfa0 <__smakebuf_r+0x18>
 800dfc2:	f023 0303 	bic.w	r3, r3, #3
 800dfc6:	f043 0302 	orr.w	r3, r3, #2
 800dfca:	81a3      	strh	r3, [r4, #12]
 800dfcc:	e7e2      	b.n	800df94 <__smakebuf_r+0xc>
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	6020      	str	r0, [r4, #0]
 800dfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfd6:	81a3      	strh	r3, [r4, #12]
 800dfd8:	9b01      	ldr	r3, [sp, #4]
 800dfda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfde:	b15b      	cbz	r3, 800dff8 <__smakebuf_r+0x70>
 800dfe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f000 f81d 	bl	800e024 <_isatty_r>
 800dfea:	b128      	cbz	r0, 800dff8 <__smakebuf_r+0x70>
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	f023 0303 	bic.w	r3, r3, #3
 800dff2:	f043 0301 	orr.w	r3, r3, #1
 800dff6:	81a3      	strh	r3, [r4, #12]
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	431d      	orrs	r5, r3
 800dffc:	81a5      	strh	r5, [r4, #12]
 800dffe:	e7cf      	b.n	800dfa0 <__smakebuf_r+0x18>

0800e000 <_fstat_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d07      	ldr	r5, [pc, #28]	@ (800e020 <_fstat_r+0x20>)
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	4608      	mov	r0, r1
 800e00a:	4611      	mov	r1, r2
 800e00c:	602b      	str	r3, [r5, #0]
 800e00e:	f7f4 fe3f 	bl	8002c90 <_fstat>
 800e012:	1c43      	adds	r3, r0, #1
 800e014:	d102      	bne.n	800e01c <_fstat_r+0x1c>
 800e016:	682b      	ldr	r3, [r5, #0]
 800e018:	b103      	cbz	r3, 800e01c <_fstat_r+0x1c>
 800e01a:	6023      	str	r3, [r4, #0]
 800e01c:	bd38      	pop	{r3, r4, r5, pc}
 800e01e:	bf00      	nop
 800e020:	24002744 	.word	0x24002744

0800e024 <_isatty_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4d06      	ldr	r5, [pc, #24]	@ (800e040 <_isatty_r+0x1c>)
 800e028:	2300      	movs	r3, #0
 800e02a:	4604      	mov	r4, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	602b      	str	r3, [r5, #0]
 800e030:	f7f4 fe3e 	bl	8002cb0 <_isatty>
 800e034:	1c43      	adds	r3, r0, #1
 800e036:	d102      	bne.n	800e03e <_isatty_r+0x1a>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	b103      	cbz	r3, 800e03e <_isatty_r+0x1a>
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	24002744 	.word	0x24002744
 800e044:	00000000 	.word	0x00000000

0800e048 <sin>:
 800e048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e04a:	eeb0 7b40 	vmov.f64	d7, d0
 800e04e:	ee17 3a90 	vmov	r3, s15
 800e052:	4a21      	ldr	r2, [pc, #132]	@ (800e0d8 <sin+0x90>)
 800e054:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e058:	4293      	cmp	r3, r2
 800e05a:	d807      	bhi.n	800e06c <sin+0x24>
 800e05c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800e0d0 <sin+0x88>
 800e060:	2000      	movs	r0, #0
 800e062:	b005      	add	sp, #20
 800e064:	f85d eb04 	ldr.w	lr, [sp], #4
 800e068:	f000 b8a2 	b.w	800e1b0 <__kernel_sin>
 800e06c:	4a1b      	ldr	r2, [pc, #108]	@ (800e0dc <sin+0x94>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d904      	bls.n	800e07c <sin+0x34>
 800e072:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e076:	b005      	add	sp, #20
 800e078:	f85d fb04 	ldr.w	pc, [sp], #4
 800e07c:	4668      	mov	r0, sp
 800e07e:	f000 f8ef 	bl	800e260 <__ieee754_rem_pio2>
 800e082:	f000 0003 	and.w	r0, r0, #3
 800e086:	2801      	cmp	r0, #1
 800e088:	d00a      	beq.n	800e0a0 <sin+0x58>
 800e08a:	2802      	cmp	r0, #2
 800e08c:	d00f      	beq.n	800e0ae <sin+0x66>
 800e08e:	b9c0      	cbnz	r0, 800e0c2 <sin+0x7a>
 800e090:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e094:	ed9d 0b00 	vldr	d0, [sp]
 800e098:	2001      	movs	r0, #1
 800e09a:	f000 f889 	bl	800e1b0 <__kernel_sin>
 800e09e:	e7ea      	b.n	800e076 <sin+0x2e>
 800e0a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0a4:	ed9d 0b00 	vldr	d0, [sp]
 800e0a8:	f000 f81a 	bl	800e0e0 <__kernel_cos>
 800e0ac:	e7e3      	b.n	800e076 <sin+0x2e>
 800e0ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0b2:	ed9d 0b00 	vldr	d0, [sp]
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	f000 f87a 	bl	800e1b0 <__kernel_sin>
 800e0bc:	eeb1 0b40 	vneg.f64	d0, d0
 800e0c0:	e7d9      	b.n	800e076 <sin+0x2e>
 800e0c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0c6:	ed9d 0b00 	vldr	d0, [sp]
 800e0ca:	f000 f809 	bl	800e0e0 <__kernel_cos>
 800e0ce:	e7f5      	b.n	800e0bc <sin+0x74>
	...
 800e0d8:	3fe921fb 	.word	0x3fe921fb
 800e0dc:	7fefffff 	.word	0x7fefffff

0800e0e0 <__kernel_cos>:
 800e0e0:	eeb0 5b40 	vmov.f64	d5, d0
 800e0e4:	ee15 1a90 	vmov	r1, s11
 800e0e8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e0ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e0f0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800e0f4:	d204      	bcs.n	800e100 <__kernel_cos+0x20>
 800e0f6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800e0fa:	ee17 3a90 	vmov	r3, s15
 800e0fe:	b343      	cbz	r3, 800e152 <__kernel_cos+0x72>
 800e100:	ee25 6b05 	vmul.f64	d6, d5, d5
 800e104:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800e108:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800e178 <__kernel_cos+0x98>
 800e10c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e180 <__kernel_cos+0xa0>
 800e110:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e114:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e188 <__kernel_cos+0xa8>
 800e118:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e11c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e190 <__kernel_cos+0xb0>
 800e120:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e124:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e198 <__kernel_cos+0xb8>
 800e128:	4b1f      	ldr	r3, [pc, #124]	@ (800e1a8 <__kernel_cos+0xc8>)
 800e12a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e12e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e1a0 <__kernel_cos+0xc0>
 800e132:	4299      	cmp	r1, r3
 800e134:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e138:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e13c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800e140:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e144:	eea6 1b04 	vfma.f64	d1, d6, d4
 800e148:	d804      	bhi.n	800e154 <__kernel_cos+0x74>
 800e14a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800e14e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e152:	4770      	bx	lr
 800e154:	4b15      	ldr	r3, [pc, #84]	@ (800e1ac <__kernel_cos+0xcc>)
 800e156:	4299      	cmp	r1, r3
 800e158:	d809      	bhi.n	800e16e <__kernel_cos+0x8e>
 800e15a:	2200      	movs	r2, #0
 800e15c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800e160:	ec43 2b16 	vmov	d6, r2, r3
 800e164:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e168:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e16c:	e7ed      	b.n	800e14a <__kernel_cos+0x6a>
 800e16e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800e172:	e7f7      	b.n	800e164 <__kernel_cos+0x84>
 800e174:	f3af 8000 	nop.w
 800e178:	be8838d4 	.word	0xbe8838d4
 800e17c:	bda8fae9 	.word	0xbda8fae9
 800e180:	bdb4b1c4 	.word	0xbdb4b1c4
 800e184:	3e21ee9e 	.word	0x3e21ee9e
 800e188:	809c52ad 	.word	0x809c52ad
 800e18c:	be927e4f 	.word	0xbe927e4f
 800e190:	19cb1590 	.word	0x19cb1590
 800e194:	3efa01a0 	.word	0x3efa01a0
 800e198:	16c15177 	.word	0x16c15177
 800e19c:	bf56c16c 	.word	0xbf56c16c
 800e1a0:	5555554c 	.word	0x5555554c
 800e1a4:	3fa55555 	.word	0x3fa55555
 800e1a8:	3fd33332 	.word	0x3fd33332
 800e1ac:	3fe90000 	.word	0x3fe90000

0800e1b0 <__kernel_sin>:
 800e1b0:	ee10 3a90 	vmov	r3, s1
 800e1b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e1b8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e1bc:	d204      	bcs.n	800e1c8 <__kernel_sin+0x18>
 800e1be:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e1c2:	ee17 3a90 	vmov	r3, s15
 800e1c6:	b35b      	cbz	r3, 800e220 <__kernel_sin+0x70>
 800e1c8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e1cc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e1d0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800e228 <__kernel_sin+0x78>
 800e1d4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e230 <__kernel_sin+0x80>
 800e1d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e1dc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e238 <__kernel_sin+0x88>
 800e1e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e1e4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e240 <__kernel_sin+0x90>
 800e1e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e1ec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e248 <__kernel_sin+0x98>
 800e1f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e1f4:	b930      	cbnz	r0, 800e204 <__kernel_sin+0x54>
 800e1f6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e250 <__kernel_sin+0xa0>
 800e1fa:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e1fe:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e202:	4770      	bx	lr
 800e204:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e208:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800e20c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e210:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e214:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e258 <__kernel_sin+0xa8>
 800e218:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e21c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	f3af 8000 	nop.w
 800e228:	5acfd57c 	.word	0x5acfd57c
 800e22c:	3de5d93a 	.word	0x3de5d93a
 800e230:	8a2b9ceb 	.word	0x8a2b9ceb
 800e234:	be5ae5e6 	.word	0xbe5ae5e6
 800e238:	57b1fe7d 	.word	0x57b1fe7d
 800e23c:	3ec71de3 	.word	0x3ec71de3
 800e240:	19c161d5 	.word	0x19c161d5
 800e244:	bf2a01a0 	.word	0xbf2a01a0
 800e248:	1110f8a6 	.word	0x1110f8a6
 800e24c:	3f811111 	.word	0x3f811111
 800e250:	55555549 	.word	0x55555549
 800e254:	bfc55555 	.word	0xbfc55555
 800e258:	55555549 	.word	0x55555549
 800e25c:	3fc55555 	.word	0x3fc55555

0800e260 <__ieee754_rem_pio2>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	eeb0 7b40 	vmov.f64	d7, d0
 800e266:	ee17 5a90 	vmov	r5, s15
 800e26a:	4b99      	ldr	r3, [pc, #612]	@ (800e4d0 <__ieee754_rem_pio2+0x270>)
 800e26c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e270:	429e      	cmp	r6, r3
 800e272:	b088      	sub	sp, #32
 800e274:	4604      	mov	r4, r0
 800e276:	d807      	bhi.n	800e288 <__ieee754_rem_pio2+0x28>
 800e278:	2200      	movs	r2, #0
 800e27a:	2300      	movs	r3, #0
 800e27c:	ed84 0b00 	vstr	d0, [r4]
 800e280:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e284:	2000      	movs	r0, #0
 800e286:	e01b      	b.n	800e2c0 <__ieee754_rem_pio2+0x60>
 800e288:	4b92      	ldr	r3, [pc, #584]	@ (800e4d4 <__ieee754_rem_pio2+0x274>)
 800e28a:	429e      	cmp	r6, r3
 800e28c:	d83b      	bhi.n	800e306 <__ieee754_rem_pio2+0xa6>
 800e28e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800e292:	2d00      	cmp	r5, #0
 800e294:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800e490 <__ieee754_rem_pio2+0x230>
 800e298:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800e29c:	dd19      	ble.n	800e2d2 <__ieee754_rem_pio2+0x72>
 800e29e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e2a2:	429e      	cmp	r6, r3
 800e2a4:	d00e      	beq.n	800e2c4 <__ieee754_rem_pio2+0x64>
 800e2a6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800e498 <__ieee754_rem_pio2+0x238>
 800e2aa:	ee37 6b45 	vsub.f64	d6, d7, d5
 800e2ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2b2:	ed84 6b00 	vstr	d6, [r4]
 800e2b6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e2ba:	ed84 7b02 	vstr	d7, [r4, #8]
 800e2be:	2001      	movs	r0, #1
 800e2c0:	b008      	add	sp, #32
 800e2c2:	bd70      	pop	{r4, r5, r6, pc}
 800e2c4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800e4a0 <__ieee754_rem_pio2+0x240>
 800e2c8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800e4a8 <__ieee754_rem_pio2+0x248>
 800e2cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2d0:	e7eb      	b.n	800e2aa <__ieee754_rem_pio2+0x4a>
 800e2d2:	429e      	cmp	r6, r3
 800e2d4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e2d8:	d00e      	beq.n	800e2f8 <__ieee754_rem_pio2+0x98>
 800e2da:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800e498 <__ieee754_rem_pio2+0x238>
 800e2de:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e2e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2e6:	ed84 6b00 	vstr	d6, [r4]
 800e2ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800e2f6:	e7e3      	b.n	800e2c0 <__ieee754_rem_pio2+0x60>
 800e2f8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800e4a0 <__ieee754_rem_pio2+0x240>
 800e2fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800e4a8 <__ieee754_rem_pio2+0x248>
 800e300:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e304:	e7eb      	b.n	800e2de <__ieee754_rem_pio2+0x7e>
 800e306:	4b74      	ldr	r3, [pc, #464]	@ (800e4d8 <__ieee754_rem_pio2+0x278>)
 800e308:	429e      	cmp	r6, r3
 800e30a:	d870      	bhi.n	800e3ee <__ieee754_rem_pio2+0x18e>
 800e30c:	f000 f8ec 	bl	800e4e8 <fabs>
 800e310:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e314:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e4b0 <__ieee754_rem_pio2+0x250>
 800e318:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e31c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e320:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e324:	ee17 0a90 	vmov	r0, s15
 800e328:	eeb1 4b45 	vneg.f64	d4, d5
 800e32c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800e490 <__ieee754_rem_pio2+0x230>
 800e330:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e334:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800e498 <__ieee754_rem_pio2+0x238>
 800e338:	281f      	cmp	r0, #31
 800e33a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e33e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e342:	dc05      	bgt.n	800e350 <__ieee754_rem_pio2+0xf0>
 800e344:	4b65      	ldr	r3, [pc, #404]	@ (800e4dc <__ieee754_rem_pio2+0x27c>)
 800e346:	1e42      	subs	r2, r0, #1
 800e348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34c:	42b3      	cmp	r3, r6
 800e34e:	d109      	bne.n	800e364 <__ieee754_rem_pio2+0x104>
 800e350:	ee16 3a90 	vmov	r3, s13
 800e354:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e358:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e35c:	2b10      	cmp	r3, #16
 800e35e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e362:	dc02      	bgt.n	800e36a <__ieee754_rem_pio2+0x10a>
 800e364:	ed84 6b00 	vstr	d6, [r4]
 800e368:	e01a      	b.n	800e3a0 <__ieee754_rem_pio2+0x140>
 800e36a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800e4a0 <__ieee754_rem_pio2+0x240>
 800e36e:	eeb0 6b40 	vmov.f64	d6, d0
 800e372:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e376:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e37a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e37e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800e4a8 <__ieee754_rem_pio2+0x248>
 800e382:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e386:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e38a:	ee13 3a90 	vmov	r3, s7
 800e38e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	2b31      	cmp	r3, #49	@ 0x31
 800e396:	dc17      	bgt.n	800e3c8 <__ieee754_rem_pio2+0x168>
 800e398:	eeb0 0b46 	vmov.f64	d0, d6
 800e39c:	ed84 3b00 	vstr	d3, [r4]
 800e3a0:	ed94 6b00 	vldr	d6, [r4]
 800e3a4:	2d00      	cmp	r5, #0
 800e3a6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e3aa:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e3ae:	ed84 0b02 	vstr	d0, [r4, #8]
 800e3b2:	da85      	bge.n	800e2c0 <__ieee754_rem_pio2+0x60>
 800e3b4:	eeb1 6b46 	vneg.f64	d6, d6
 800e3b8:	eeb1 0b40 	vneg.f64	d0, d0
 800e3bc:	ed84 6b00 	vstr	d6, [r4]
 800e3c0:	ed84 0b02 	vstr	d0, [r4, #8]
 800e3c4:	4240      	negs	r0, r0
 800e3c6:	e77b      	b.n	800e2c0 <__ieee754_rem_pio2+0x60>
 800e3c8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800e4b8 <__ieee754_rem_pio2+0x258>
 800e3cc:	eeb0 0b46 	vmov.f64	d0, d6
 800e3d0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e3d4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800e3d8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e3dc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800e4c0 <__ieee754_rem_pio2+0x260>
 800e3e0:	eeb0 7b46 	vmov.f64	d7, d6
 800e3e4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800e3e8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e3ec:	e7ba      	b.n	800e364 <__ieee754_rem_pio2+0x104>
 800e3ee:	4b3c      	ldr	r3, [pc, #240]	@ (800e4e0 <__ieee754_rem_pio2+0x280>)
 800e3f0:	429e      	cmp	r6, r3
 800e3f2:	d906      	bls.n	800e402 <__ieee754_rem_pio2+0x1a2>
 800e3f4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e3f8:	ed80 7b02 	vstr	d7, [r0, #8]
 800e3fc:	ed80 7b00 	vstr	d7, [r0]
 800e400:	e740      	b.n	800e284 <__ieee754_rem_pio2+0x24>
 800e402:	ee10 3a10 	vmov	r3, s0
 800e406:	1532      	asrs	r2, r6, #20
 800e408:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800e40c:	4618      	mov	r0, r3
 800e40e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e412:	ec41 0b17 	vmov	d7, r0, r1
 800e416:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e41a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800e4c8 <__ieee754_rem_pio2+0x268>
 800e41e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e422:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e426:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e42a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e42e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e432:	a808      	add	r0, sp, #32
 800e434:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e438:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e43c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e440:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e444:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e448:	2103      	movs	r1, #3
 800e44a:	ed30 7b02 	vldmdb	r0!, {d7}
 800e44e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e456:	460b      	mov	r3, r1
 800e458:	f101 31ff 	add.w	r1, r1, #4294967295
 800e45c:	d0f5      	beq.n	800e44a <__ieee754_rem_pio2+0x1ea>
 800e45e:	4921      	ldr	r1, [pc, #132]	@ (800e4e4 <__ieee754_rem_pio2+0x284>)
 800e460:	9101      	str	r1, [sp, #4]
 800e462:	2102      	movs	r1, #2
 800e464:	9100      	str	r1, [sp, #0]
 800e466:	a802      	add	r0, sp, #8
 800e468:	4621      	mov	r1, r4
 800e46a:	f000 f845 	bl	800e4f8 <__kernel_rem_pio2>
 800e46e:	2d00      	cmp	r5, #0
 800e470:	f6bf af26 	bge.w	800e2c0 <__ieee754_rem_pio2+0x60>
 800e474:	ed94 7b00 	vldr	d7, [r4]
 800e478:	eeb1 7b47 	vneg.f64	d7, d7
 800e47c:	ed84 7b00 	vstr	d7, [r4]
 800e480:	ed94 7b02 	vldr	d7, [r4, #8]
 800e484:	eeb1 7b47 	vneg.f64	d7, d7
 800e488:	ed84 7b02 	vstr	d7, [r4, #8]
 800e48c:	e79a      	b.n	800e3c4 <__ieee754_rem_pio2+0x164>
 800e48e:	bf00      	nop
 800e490:	54400000 	.word	0x54400000
 800e494:	3ff921fb 	.word	0x3ff921fb
 800e498:	1a626331 	.word	0x1a626331
 800e49c:	3dd0b461 	.word	0x3dd0b461
 800e4a0:	1a600000 	.word	0x1a600000
 800e4a4:	3dd0b461 	.word	0x3dd0b461
 800e4a8:	2e037073 	.word	0x2e037073
 800e4ac:	3ba3198a 	.word	0x3ba3198a
 800e4b0:	6dc9c883 	.word	0x6dc9c883
 800e4b4:	3fe45f30 	.word	0x3fe45f30
 800e4b8:	2e000000 	.word	0x2e000000
 800e4bc:	3ba3198a 	.word	0x3ba3198a
 800e4c0:	252049c1 	.word	0x252049c1
 800e4c4:	397b839a 	.word	0x397b839a
 800e4c8:	00000000 	.word	0x00000000
 800e4cc:	41700000 	.word	0x41700000
 800e4d0:	3fe921fb 	.word	0x3fe921fb
 800e4d4:	4002d97b 	.word	0x4002d97b
 800e4d8:	413921fb 	.word	0x413921fb
 800e4dc:	0800efa0 	.word	0x0800efa0
 800e4e0:	7fefffff 	.word	0x7fefffff
 800e4e4:	0800f020 	.word	0x0800f020

0800e4e8 <fabs>:
 800e4e8:	ec51 0b10 	vmov	r0, r1, d0
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e4f2:	ec43 2b10 	vmov	d0, r2, r3
 800e4f6:	4770      	bx	lr

0800e4f8 <__kernel_rem_pio2>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	ed2d 8b06 	vpush	{d8-d10}
 800e500:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800e504:	469b      	mov	fp, r3
 800e506:	9001      	str	r0, [sp, #4]
 800e508:	4bbb      	ldr	r3, [pc, #748]	@ (800e7f8 <__kernel_rem_pio2+0x300>)
 800e50a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800e50c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800e510:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800e514:	f112 0f14 	cmn.w	r2, #20
 800e518:	bfa8      	it	ge
 800e51a:	1ed3      	subge	r3, r2, #3
 800e51c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800e520:	bfb8      	it	lt
 800e522:	2300      	movlt	r3, #0
 800e524:	f06f 0517 	mvn.w	r5, #23
 800e528:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800e7e0 <__kernel_rem_pio2+0x2e8>
 800e52c:	bfa4      	itt	ge
 800e52e:	2018      	movge	r0, #24
 800e530:	fb93 f3f0 	sdivge	r3, r3, r0
 800e534:	fb03 5505 	mla	r5, r3, r5, r5
 800e538:	eba3 040a 	sub.w	r4, r3, sl
 800e53c:	4415      	add	r5, r2
 800e53e:	460f      	mov	r7, r1
 800e540:	eb09 060a 	add.w	r6, r9, sl
 800e544:	a81a      	add	r0, sp, #104	@ 0x68
 800e546:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800e54a:	2200      	movs	r2, #0
 800e54c:	42b2      	cmp	r2, r6
 800e54e:	dd0e      	ble.n	800e56e <__kernel_rem_pio2+0x76>
 800e550:	aa1a      	add	r2, sp, #104	@ 0x68
 800e552:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800e556:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800e55a:	2600      	movs	r6, #0
 800e55c:	454e      	cmp	r6, r9
 800e55e:	dc25      	bgt.n	800e5ac <__kernel_rem_pio2+0xb4>
 800e560:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800e7e0 <__kernel_rem_pio2+0x2e8>
 800e564:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e568:	4614      	mov	r4, r2
 800e56a:	2000      	movs	r0, #0
 800e56c:	e015      	b.n	800e59a <__kernel_rem_pio2+0xa2>
 800e56e:	42d4      	cmn	r4, r2
 800e570:	d409      	bmi.n	800e586 <__kernel_rem_pio2+0x8e>
 800e572:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800e576:	ee07 1a90 	vmov	s15, r1
 800e57a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e57e:	eca0 7b02 	vstmia	r0!, {d7}
 800e582:	3201      	adds	r2, #1
 800e584:	e7e2      	b.n	800e54c <__kernel_rem_pio2+0x54>
 800e586:	eeb0 7b46 	vmov.f64	d7, d6
 800e58a:	e7f8      	b.n	800e57e <__kernel_rem_pio2+0x86>
 800e58c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e590:	ed94 6b00 	vldr	d6, [r4]
 800e594:	3001      	adds	r0, #1
 800e596:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e59a:	4550      	cmp	r0, sl
 800e59c:	f1a4 0408 	sub.w	r4, r4, #8
 800e5a0:	ddf4      	ble.n	800e58c <__kernel_rem_pio2+0x94>
 800e5a2:	ecae 7b02 	vstmia	lr!, {d7}
 800e5a6:	3601      	adds	r6, #1
 800e5a8:	3208      	adds	r2, #8
 800e5aa:	e7d7      	b.n	800e55c <__kernel_rem_pio2+0x64>
 800e5ac:	aa06      	add	r2, sp, #24
 800e5ae:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800e7e8 <__kernel_rem_pio2+0x2f0>
 800e5b2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800e7f0 <__kernel_rem_pio2+0x2f8>
 800e5b6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800e5ba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800e5be:	9203      	str	r2, [sp, #12]
 800e5c0:	9302      	str	r3, [sp, #8]
 800e5c2:	464c      	mov	r4, r9
 800e5c4:	00e3      	lsls	r3, r4, #3
 800e5c6:	9304      	str	r3, [sp, #16]
 800e5c8:	ab92      	add	r3, sp, #584	@ 0x248
 800e5ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5ce:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800e5d2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800e5d4:	ab06      	add	r3, sp, #24
 800e5d6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e5da:	461e      	mov	r6, r3
 800e5dc:	4620      	mov	r0, r4
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f1a2 0208 	sub.w	r2, r2, #8
 800e5e4:	dc4a      	bgt.n	800e67c <__kernel_rem_pio2+0x184>
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	9305      	str	r3, [sp, #20]
 800e5ea:	f000 fa01 	bl	800e9f0 <scalbn>
 800e5ee:	eeb0 8b40 	vmov.f64	d8, d0
 800e5f2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800e5f6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e5fa:	f000 fa79 	bl	800eaf0 <floor>
 800e5fe:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800e602:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e606:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e60a:	2d00      	cmp	r5, #0
 800e60c:	ee17 8a90 	vmov	r8, s15
 800e610:	9b05      	ldr	r3, [sp, #20]
 800e612:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e616:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e61a:	dd41      	ble.n	800e6a0 <__kernel_rem_pio2+0x1a8>
 800e61c:	1e60      	subs	r0, r4, #1
 800e61e:	aa06      	add	r2, sp, #24
 800e620:	f1c5 0c18 	rsb	ip, r5, #24
 800e624:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800e628:	fa46 f20c 	asr.w	r2, r6, ip
 800e62c:	4490      	add	r8, r2
 800e62e:	fa02 f20c 	lsl.w	r2, r2, ip
 800e632:	1ab6      	subs	r6, r6, r2
 800e634:	aa06      	add	r2, sp, #24
 800e636:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800e63a:	f1c5 0217 	rsb	r2, r5, #23
 800e63e:	4116      	asrs	r6, r2
 800e640:	2e00      	cmp	r6, #0
 800e642:	dd3c      	ble.n	800e6be <__kernel_rem_pio2+0x1c6>
 800e644:	f04f 0c00 	mov.w	ip, #0
 800e648:	f108 0801 	add.w	r8, r8, #1
 800e64c:	4660      	mov	r0, ip
 800e64e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800e652:	4564      	cmp	r4, ip
 800e654:	dc66      	bgt.n	800e724 <__kernel_rem_pio2+0x22c>
 800e656:	2d00      	cmp	r5, #0
 800e658:	dd03      	ble.n	800e662 <__kernel_rem_pio2+0x16a>
 800e65a:	2d01      	cmp	r5, #1
 800e65c:	d072      	beq.n	800e744 <__kernel_rem_pio2+0x24c>
 800e65e:	2d02      	cmp	r5, #2
 800e660:	d07a      	beq.n	800e758 <__kernel_rem_pio2+0x260>
 800e662:	2e02      	cmp	r6, #2
 800e664:	d12b      	bne.n	800e6be <__kernel_rem_pio2+0x1c6>
 800e666:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e66a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e66e:	b330      	cbz	r0, 800e6be <__kernel_rem_pio2+0x1c6>
 800e670:	4628      	mov	r0, r5
 800e672:	f000 f9bd 	bl	800e9f0 <scalbn>
 800e676:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e67a:	e020      	b.n	800e6be <__kernel_rem_pio2+0x1c6>
 800e67c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e680:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e684:	3801      	subs	r0, #1
 800e686:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e68a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e68e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e692:	eca6 0a01 	vstmia	r6!, {s0}
 800e696:	ed92 0b00 	vldr	d0, [r2]
 800e69a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e69e:	e79e      	b.n	800e5de <__kernel_rem_pio2+0xe6>
 800e6a0:	d105      	bne.n	800e6ae <__kernel_rem_pio2+0x1b6>
 800e6a2:	1e62      	subs	r2, r4, #1
 800e6a4:	a906      	add	r1, sp, #24
 800e6a6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800e6aa:	15f6      	asrs	r6, r6, #23
 800e6ac:	e7c8      	b.n	800e640 <__kernel_rem_pio2+0x148>
 800e6ae:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e6b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ba:	da31      	bge.n	800e720 <__kernel_rem_pio2+0x228>
 800e6bc:	2600      	movs	r6, #0
 800e6be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c6:	f040 809b 	bne.w	800e800 <__kernel_rem_pio2+0x308>
 800e6ca:	1e62      	subs	r2, r4, #1
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	454a      	cmp	r2, r9
 800e6d0:	da49      	bge.n	800e766 <__kernel_rem_pio2+0x26e>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d062      	beq.n	800e79c <__kernel_rem_pio2+0x2a4>
 800e6d6:	3c01      	subs	r4, #1
 800e6d8:	ab06      	add	r3, sp, #24
 800e6da:	3d18      	subs	r5, #24
 800e6dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d0f8      	beq.n	800e6d6 <__kernel_rem_pio2+0x1de>
 800e6e4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f000 f981 	bl	800e9f0 <scalbn>
 800e6ee:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800e7e8 <__kernel_rem_pio2+0x2f0>
 800e6f2:	1c62      	adds	r2, r4, #1
 800e6f4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e6f6:	00d3      	lsls	r3, r2, #3
 800e6f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	f280 80a8 	bge.w	800e854 <__kernel_rem_pio2+0x35c>
 800e704:	4622      	mov	r2, r4
 800e706:	2a00      	cmp	r2, #0
 800e708:	f2c0 80c6 	blt.w	800e898 <__kernel_rem_pio2+0x3a0>
 800e70c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e70e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e712:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800e7e0 <__kernel_rem_pio2+0x2e8>
 800e716:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800e7fc <__kernel_rem_pio2+0x304>
 800e71a:	2000      	movs	r0, #0
 800e71c:	1aa1      	subs	r1, r4, r2
 800e71e:	e0b0      	b.n	800e882 <__kernel_rem_pio2+0x38a>
 800e720:	2602      	movs	r6, #2
 800e722:	e78f      	b.n	800e644 <__kernel_rem_pio2+0x14c>
 800e724:	f853 2b04 	ldr.w	r2, [r3], #4
 800e728:	b948      	cbnz	r0, 800e73e <__kernel_rem_pio2+0x246>
 800e72a:	b122      	cbz	r2, 800e736 <__kernel_rem_pio2+0x23e>
 800e72c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800e730:	f843 2c04 	str.w	r2, [r3, #-4]
 800e734:	2201      	movs	r2, #1
 800e736:	f10c 0c01 	add.w	ip, ip, #1
 800e73a:	4610      	mov	r0, r2
 800e73c:	e789      	b.n	800e652 <__kernel_rem_pio2+0x15a>
 800e73e:	ebae 0202 	sub.w	r2, lr, r2
 800e742:	e7f5      	b.n	800e730 <__kernel_rem_pio2+0x238>
 800e744:	1e62      	subs	r2, r4, #1
 800e746:	ab06      	add	r3, sp, #24
 800e748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e74c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e750:	a906      	add	r1, sp, #24
 800e752:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e756:	e784      	b.n	800e662 <__kernel_rem_pio2+0x16a>
 800e758:	1e62      	subs	r2, r4, #1
 800e75a:	ab06      	add	r3, sp, #24
 800e75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e760:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e764:	e7f4      	b.n	800e750 <__kernel_rem_pio2+0x258>
 800e766:	ab06      	add	r3, sp, #24
 800e768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e76c:	3a01      	subs	r2, #1
 800e76e:	4318      	orrs	r0, r3
 800e770:	e7ad      	b.n	800e6ce <__kernel_rem_pio2+0x1d6>
 800e772:	3301      	adds	r3, #1
 800e774:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e778:	2800      	cmp	r0, #0
 800e77a:	d0fa      	beq.n	800e772 <__kernel_rem_pio2+0x27a>
 800e77c:	9a04      	ldr	r2, [sp, #16]
 800e77e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800e782:	446a      	add	r2, sp
 800e784:	eb04 000b 	add.w	r0, r4, fp
 800e788:	a91a      	add	r1, sp, #104	@ 0x68
 800e78a:	1c66      	adds	r6, r4, #1
 800e78c:	3a98      	subs	r2, #152	@ 0x98
 800e78e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800e792:	4423      	add	r3, r4
 800e794:	42b3      	cmp	r3, r6
 800e796:	da04      	bge.n	800e7a2 <__kernel_rem_pio2+0x2aa>
 800e798:	461c      	mov	r4, r3
 800e79a:	e713      	b.n	800e5c4 <__kernel_rem_pio2+0xcc>
 800e79c:	9a03      	ldr	r2, [sp, #12]
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e7e8      	b.n	800e774 <__kernel_rem_pio2+0x27c>
 800e7a2:	9902      	ldr	r1, [sp, #8]
 800e7a4:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e7a8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800e7ac:	9104      	str	r1, [sp, #16]
 800e7ae:	ee07 1a90 	vmov	s15, r1
 800e7b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e7b6:	2400      	movs	r4, #0
 800e7b8:	eca0 7b02 	vstmia	r0!, {d7}
 800e7bc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800e7e0 <__kernel_rem_pio2+0x2e8>
 800e7c0:	4686      	mov	lr, r0
 800e7c2:	4554      	cmp	r4, sl
 800e7c4:	dd03      	ble.n	800e7ce <__kernel_rem_pio2+0x2d6>
 800e7c6:	eca2 7b02 	vstmia	r2!, {d7}
 800e7ca:	3601      	adds	r6, #1
 800e7cc:	e7e2      	b.n	800e794 <__kernel_rem_pio2+0x29c>
 800e7ce:	ecbc 5b02 	vldmia	ip!, {d5}
 800e7d2:	ed3e 6b02 	vldmdb	lr!, {d6}
 800e7d6:	3401      	adds	r4, #1
 800e7d8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e7dc:	e7f1      	b.n	800e7c2 <__kernel_rem_pio2+0x2ca>
 800e7de:	bf00      	nop
	...
 800e7ec:	3e700000 	.word	0x3e700000
 800e7f0:	00000000 	.word	0x00000000
 800e7f4:	41700000 	.word	0x41700000
 800e7f8:	0800f168 	.word	0x0800f168
 800e7fc:	0800f128 	.word	0x0800f128
 800e800:	4268      	negs	r0, r5
 800e802:	eeb0 0b48 	vmov.f64	d0, d8
 800e806:	f000 f8f3 	bl	800e9f0 <scalbn>
 800e80a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800e9d8 <__kernel_rem_pio2+0x4e0>
 800e80e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e816:	db17      	blt.n	800e848 <__kernel_rem_pio2+0x350>
 800e818:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800e9e0 <__kernel_rem_pio2+0x4e8>
 800e81c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e820:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e824:	aa06      	add	r2, sp, #24
 800e826:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e82a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e82e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e832:	3518      	adds	r5, #24
 800e834:	ee10 3a10 	vmov	r3, s0
 800e838:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e83c:	ee17 3a10 	vmov	r3, s14
 800e840:	3401      	adds	r4, #1
 800e842:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e846:	e74d      	b.n	800e6e4 <__kernel_rem_pio2+0x1ec>
 800e848:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e84c:	aa06      	add	r2, sp, #24
 800e84e:	ee10 3a10 	vmov	r3, s0
 800e852:	e7f6      	b.n	800e842 <__kernel_rem_pio2+0x34a>
 800e854:	a806      	add	r0, sp, #24
 800e856:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e85a:	9001      	str	r0, [sp, #4]
 800e85c:	ee07 0a90 	vmov	s15, r0
 800e860:	3a01      	subs	r2, #1
 800e862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e866:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e86a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e86e:	ed21 7b02 	vstmdb	r1!, {d7}
 800e872:	e744      	b.n	800e6fe <__kernel_rem_pio2+0x206>
 800e874:	ecbc 5b02 	vldmia	ip!, {d5}
 800e878:	ecb5 6b02 	vldmia	r5!, {d6}
 800e87c:	3001      	adds	r0, #1
 800e87e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e882:	4548      	cmp	r0, r9
 800e884:	dc01      	bgt.n	800e88a <__kernel_rem_pio2+0x392>
 800e886:	4281      	cmp	r1, r0
 800e888:	daf4      	bge.n	800e874 <__kernel_rem_pio2+0x37c>
 800e88a:	a842      	add	r0, sp, #264	@ 0x108
 800e88c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e890:	ed81 7b00 	vstr	d7, [r1]
 800e894:	3a01      	subs	r2, #1
 800e896:	e736      	b.n	800e706 <__kernel_rem_pio2+0x20e>
 800e898:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e89a:	2a02      	cmp	r2, #2
 800e89c:	dc0a      	bgt.n	800e8b4 <__kernel_rem_pio2+0x3bc>
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	dc2d      	bgt.n	800e8fe <__kernel_rem_pio2+0x406>
 800e8a2:	d046      	beq.n	800e932 <__kernel_rem_pio2+0x43a>
 800e8a4:	f008 0007 	and.w	r0, r8, #7
 800e8a8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800e8ac:	ecbd 8b06 	vpop	{d8-d10}
 800e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e8b6:	2a03      	cmp	r2, #3
 800e8b8:	d1f4      	bne.n	800e8a4 <__kernel_rem_pio2+0x3ac>
 800e8ba:	a942      	add	r1, sp, #264	@ 0x108
 800e8bc:	f1a3 0208 	sub.w	r2, r3, #8
 800e8c0:	440a      	add	r2, r1
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	f1a1 0108 	sub.w	r1, r1, #8
 800e8cc:	dc52      	bgt.n	800e974 <__kernel_rem_pio2+0x47c>
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	2901      	cmp	r1, #1
 800e8d2:	f1a2 0208 	sub.w	r2, r2, #8
 800e8d6:	dc5d      	bgt.n	800e994 <__kernel_rem_pio2+0x49c>
 800e8d8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800e9e8 <__kernel_rem_pio2+0x4f0>
 800e8dc:	aa42      	add	r2, sp, #264	@ 0x108
 800e8de:	4413      	add	r3, r2
 800e8e0:	2c01      	cmp	r4, #1
 800e8e2:	dc67      	bgt.n	800e9b4 <__kernel_rem_pio2+0x4bc>
 800e8e4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800e8e8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800e8ec:	2e00      	cmp	r6, #0
 800e8ee:	d167      	bne.n	800e9c0 <__kernel_rem_pio2+0x4c8>
 800e8f0:	ed87 5b00 	vstr	d5, [r7]
 800e8f4:	ed87 6b02 	vstr	d6, [r7, #8]
 800e8f8:	ed87 7b04 	vstr	d7, [r7, #16]
 800e8fc:	e7d2      	b.n	800e8a4 <__kernel_rem_pio2+0x3ac>
 800e8fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800e9e8 <__kernel_rem_pio2+0x4f0>
 800e902:	aa42      	add	r2, sp, #264	@ 0x108
 800e904:	4413      	add	r3, r2
 800e906:	4622      	mov	r2, r4
 800e908:	2a00      	cmp	r2, #0
 800e90a:	da24      	bge.n	800e956 <__kernel_rem_pio2+0x45e>
 800e90c:	b34e      	cbz	r6, 800e962 <__kernel_rem_pio2+0x46a>
 800e90e:	eeb1 7b46 	vneg.f64	d7, d6
 800e912:	ed87 7b00 	vstr	d7, [r7]
 800e916:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800e91a:	aa44      	add	r2, sp, #272	@ 0x110
 800e91c:	2301      	movs	r3, #1
 800e91e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e922:	429c      	cmp	r4, r3
 800e924:	da20      	bge.n	800e968 <__kernel_rem_pio2+0x470>
 800e926:	b10e      	cbz	r6, 800e92c <__kernel_rem_pio2+0x434>
 800e928:	eeb1 7b47 	vneg.f64	d7, d7
 800e92c:	ed87 7b02 	vstr	d7, [r7, #8]
 800e930:	e7b8      	b.n	800e8a4 <__kernel_rem_pio2+0x3ac>
 800e932:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800e9e8 <__kernel_rem_pio2+0x4f0>
 800e936:	aa42      	add	r2, sp, #264	@ 0x108
 800e938:	4413      	add	r3, r2
 800e93a:	2c00      	cmp	r4, #0
 800e93c:	da05      	bge.n	800e94a <__kernel_rem_pio2+0x452>
 800e93e:	b10e      	cbz	r6, 800e944 <__kernel_rem_pio2+0x44c>
 800e940:	eeb1 7b47 	vneg.f64	d7, d7
 800e944:	ed87 7b00 	vstr	d7, [r7]
 800e948:	e7ac      	b.n	800e8a4 <__kernel_rem_pio2+0x3ac>
 800e94a:	ed33 6b02 	vldmdb	r3!, {d6}
 800e94e:	3c01      	subs	r4, #1
 800e950:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e954:	e7f1      	b.n	800e93a <__kernel_rem_pio2+0x442>
 800e956:	ed33 7b02 	vldmdb	r3!, {d7}
 800e95a:	3a01      	subs	r2, #1
 800e95c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e960:	e7d2      	b.n	800e908 <__kernel_rem_pio2+0x410>
 800e962:	eeb0 7b46 	vmov.f64	d7, d6
 800e966:	e7d4      	b.n	800e912 <__kernel_rem_pio2+0x41a>
 800e968:	ecb2 6b02 	vldmia	r2!, {d6}
 800e96c:	3301      	adds	r3, #1
 800e96e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e972:	e7d6      	b.n	800e922 <__kernel_rem_pio2+0x42a>
 800e974:	ed91 7b00 	vldr	d7, [r1]
 800e978:	ed91 5b02 	vldr	d5, [r1, #8]
 800e97c:	3801      	subs	r0, #1
 800e97e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e982:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e986:	ed81 6b00 	vstr	d6, [r1]
 800e98a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e98e:	ed81 7b02 	vstr	d7, [r1, #8]
 800e992:	e798      	b.n	800e8c6 <__kernel_rem_pio2+0x3ce>
 800e994:	ed92 7b00 	vldr	d7, [r2]
 800e998:	ed92 5b02 	vldr	d5, [r2, #8]
 800e99c:	3901      	subs	r1, #1
 800e99e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e9a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9a6:	ed82 6b00 	vstr	d6, [r2]
 800e9aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e9ae:	ed82 7b02 	vstr	d7, [r2, #8]
 800e9b2:	e78d      	b.n	800e8d0 <__kernel_rem_pio2+0x3d8>
 800e9b4:	ed33 6b02 	vldmdb	r3!, {d6}
 800e9b8:	3c01      	subs	r4, #1
 800e9ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e9be:	e78f      	b.n	800e8e0 <__kernel_rem_pio2+0x3e8>
 800e9c0:	eeb1 5b45 	vneg.f64	d5, d5
 800e9c4:	eeb1 6b46 	vneg.f64	d6, d6
 800e9c8:	ed87 5b00 	vstr	d5, [r7]
 800e9cc:	eeb1 7b47 	vneg.f64	d7, d7
 800e9d0:	ed87 6b02 	vstr	d6, [r7, #8]
 800e9d4:	e790      	b.n	800e8f8 <__kernel_rem_pio2+0x400>
 800e9d6:	bf00      	nop
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	41700000 	.word	0x41700000
 800e9e0:	00000000 	.word	0x00000000
 800e9e4:	3e700000 	.word	0x3e700000
	...

0800e9f0 <scalbn>:
 800e9f0:	ee10 1a90 	vmov	r1, s1
 800e9f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9f8:	b98b      	cbnz	r3, 800ea1e <scalbn+0x2e>
 800e9fa:	ee10 3a10 	vmov	r3, s0
 800e9fe:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800ea02:	4319      	orrs	r1, r3
 800ea04:	d00a      	beq.n	800ea1c <scalbn+0x2c>
 800ea06:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800eab8 <scalbn+0xc8>
 800ea0a:	4b37      	ldr	r3, [pc, #220]	@ (800eae8 <scalbn+0xf8>)
 800ea0c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea10:	4298      	cmp	r0, r3
 800ea12:	da0b      	bge.n	800ea2c <scalbn+0x3c>
 800ea14:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800eac0 <scalbn+0xd0>
 800ea18:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea1c:	4770      	bx	lr
 800ea1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d107      	bne.n	800ea36 <scalbn+0x46>
 800ea26:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ea2a:	4770      	bx	lr
 800ea2c:	ee10 1a90 	vmov	r1, s1
 800ea30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea34:	3b36      	subs	r3, #54	@ 0x36
 800ea36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ea3a:	4290      	cmp	r0, r2
 800ea3c:	dd0d      	ble.n	800ea5a <scalbn+0x6a>
 800ea3e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800eac8 <scalbn+0xd8>
 800ea42:	ee10 3a90 	vmov	r3, s1
 800ea46:	eeb0 6b47 	vmov.f64	d6, d7
 800ea4a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800ead0 <scalbn+0xe0>
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	fe27 7b05 	vselge.f64	d7, d7, d5
 800ea54:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ea58:	4770      	bx	lr
 800ea5a:	4418      	add	r0, r3
 800ea5c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800ea60:	4298      	cmp	r0, r3
 800ea62:	dcec      	bgt.n	800ea3e <scalbn+0x4e>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	dd0a      	ble.n	800ea7e <scalbn+0x8e>
 800ea68:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800ea6c:	ec53 2b10 	vmov	r2, r3, d0
 800ea70:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800ea74:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ea78:	ec43 2b10 	vmov	d0, r2, r3
 800ea7c:	4770      	bx	lr
 800ea7e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800ea82:	da09      	bge.n	800ea98 <scalbn+0xa8>
 800ea84:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800eac0 <scalbn+0xd0>
 800ea88:	ee10 3a90 	vmov	r3, s1
 800ea8c:	eeb0 6b47 	vmov.f64	d6, d7
 800ea90:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800ead8 <scalbn+0xe8>
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	e7db      	b.n	800ea50 <scalbn+0x60>
 800ea98:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800ea9c:	ec53 2b10 	vmov	r2, r3, d0
 800eaa0:	3036      	adds	r0, #54	@ 0x36
 800eaa2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800eaa6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800eaaa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800eae0 <scalbn+0xf0>
 800eaae:	ec43 2b10 	vmov	d0, r2, r3
 800eab2:	e7b1      	b.n	800ea18 <scalbn+0x28>
 800eab4:	f3af 8000 	nop.w
 800eab8:	00000000 	.word	0x00000000
 800eabc:	43500000 	.word	0x43500000
 800eac0:	c2f8f359 	.word	0xc2f8f359
 800eac4:	01a56e1f 	.word	0x01a56e1f
 800eac8:	8800759c 	.word	0x8800759c
 800eacc:	7e37e43c 	.word	0x7e37e43c
 800ead0:	8800759c 	.word	0x8800759c
 800ead4:	fe37e43c 	.word	0xfe37e43c
 800ead8:	c2f8f359 	.word	0xc2f8f359
 800eadc:	81a56e1f 	.word	0x81a56e1f
 800eae0:	00000000 	.word	0x00000000
 800eae4:	3c900000 	.word	0x3c900000
 800eae8:	ffff3cb0 	.word	0xffff3cb0
 800eaec:	00000000 	.word	0x00000000

0800eaf0 <floor>:
 800eaf0:	ee10 3a90 	vmov	r3, s1
 800eaf4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800eaf8:	ee10 2a10 	vmov	r2, s0
 800eafc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800eb00:	2913      	cmp	r1, #19
 800eb02:	b530      	push	{r4, r5, lr}
 800eb04:	4615      	mov	r5, r2
 800eb06:	dc33      	bgt.n	800eb70 <floor+0x80>
 800eb08:	2900      	cmp	r1, #0
 800eb0a:	da18      	bge.n	800eb3e <floor+0x4e>
 800eb0c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800ebd0 <floor+0xe0>
 800eb10:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eb14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1c:	dd0a      	ble.n	800eb34 <floor+0x44>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	da50      	bge.n	800ebc4 <floor+0xd4>
 800eb22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb26:	4313      	orrs	r3, r2
 800eb28:	2200      	movs	r2, #0
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	4b2a      	ldr	r3, [pc, #168]	@ (800ebd8 <floor+0xe8>)
 800eb2e:	bf08      	it	eq
 800eb30:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800eb34:	4619      	mov	r1, r3
 800eb36:	4610      	mov	r0, r2
 800eb38:	ec41 0b10 	vmov	d0, r0, r1
 800eb3c:	e01f      	b.n	800eb7e <floor+0x8e>
 800eb3e:	4827      	ldr	r0, [pc, #156]	@ (800ebdc <floor+0xec>)
 800eb40:	4108      	asrs	r0, r1
 800eb42:	ea03 0400 	and.w	r4, r3, r0
 800eb46:	4314      	orrs	r4, r2
 800eb48:	d019      	beq.n	800eb7e <floor+0x8e>
 800eb4a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ebd0 <floor+0xe0>
 800eb4e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eb52:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5a:	ddeb      	ble.n	800eb34 <floor+0x44>
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	bfbe      	ittt	lt
 800eb60:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800eb64:	410a      	asrlt	r2, r1
 800eb66:	189b      	addlt	r3, r3, r2
 800eb68:	ea23 0300 	bic.w	r3, r3, r0
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	e7e1      	b.n	800eb34 <floor+0x44>
 800eb70:	2933      	cmp	r1, #51	@ 0x33
 800eb72:	dd05      	ble.n	800eb80 <floor+0x90>
 800eb74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eb78:	d101      	bne.n	800eb7e <floor+0x8e>
 800eb7a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800eb7e:	bd30      	pop	{r4, r5, pc}
 800eb80:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800eb84:	f04f 30ff 	mov.w	r0, #4294967295
 800eb88:	40e0      	lsrs	r0, r4
 800eb8a:	4210      	tst	r0, r2
 800eb8c:	d0f7      	beq.n	800eb7e <floor+0x8e>
 800eb8e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800ebd0 <floor+0xe0>
 800eb92:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eb96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9e:	ddc9      	ble.n	800eb34 <floor+0x44>
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	da02      	bge.n	800ebaa <floor+0xba>
 800eba4:	2914      	cmp	r1, #20
 800eba6:	d103      	bne.n	800ebb0 <floor+0xc0>
 800eba8:	3301      	adds	r3, #1
 800ebaa:	ea22 0200 	bic.w	r2, r2, r0
 800ebae:	e7c1      	b.n	800eb34 <floor+0x44>
 800ebb0:	2401      	movs	r4, #1
 800ebb2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800ebb6:	fa04 f101 	lsl.w	r1, r4, r1
 800ebba:	440a      	add	r2, r1
 800ebbc:	42aa      	cmp	r2, r5
 800ebbe:	bf38      	it	cc
 800ebc0:	191b      	addcc	r3, r3, r4
 800ebc2:	e7f2      	b.n	800ebaa <floor+0xba>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	e7b4      	b.n	800eb34 <floor+0x44>
 800ebca:	bf00      	nop
 800ebcc:	f3af 8000 	nop.w
 800ebd0:	8800759c 	.word	0x8800759c
 800ebd4:	7e37e43c 	.word	0x7e37e43c
 800ebd8:	bff00000 	.word	0xbff00000
 800ebdc:	000fffff 	.word	0x000fffff

0800ebe0 <_init>:
 800ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebe2:	bf00      	nop
 800ebe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebe6:	bc08      	pop	{r3}
 800ebe8:	469e      	mov	lr, r3
 800ebea:	4770      	bx	lr

0800ebec <_fini>:
 800ebec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebee:	bf00      	nop
 800ebf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebf2:	bc08      	pop	{r3}
 800ebf4:	469e      	mov	lr, r3
 800ebf6:	4770      	bx	lr
