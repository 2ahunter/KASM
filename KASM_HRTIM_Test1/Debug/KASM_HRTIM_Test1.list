
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08010658  08010658  00011658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010bd8  08010bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010be0  08010be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010be4  08010be4  00011be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08010be8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003dc0  240001e8  08010dd0  000121e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003fa8  08010dd0  00012fa8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d108  00000000  00000000  00012216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e2b  00000000  00000000  0002f31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017a8  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012aa  00000000  00000000  000338f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a436  00000000  00000000  00034ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e2c8  00000000  00000000  0006efd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d944  00000000  00000000  0008d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020abe4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007668  00000000  00000000  0020ac28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  00212290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010640 	.word	0x08010640

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08010640 	.word	0x08010640

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000684:	f002 fb32 	bl	8002cec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f003 fa32 	bl	8003af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f98c 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f001 f9d6 	bl	8001a40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000694:	f000 fc3a 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000698:	f000 fd08 	bl	80010ac <MX_TIM2_Init>
  MX_TIM4_Init();
 800069c:	f000 fd7c 	bl	8001198 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fe12 	bl	80012c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fe92 	bl	80013cc <MX_TIM8_Init>
  MX_TIM12_Init();
 80006a8:	f000 ff3a 	bl	8001520 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006ac:	f000 ffb0 	bl	8001610 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b0:	f000 fffc 	bl	80016ac <MX_TIM14_Init>
  MX_TIM15_Init();
 80006b4:	f001 f848 	bl	8001748 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006b8:	f001 f8f6 	bl	80018a8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006bc:	f000 fa22 	bl	8000b04 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c0:	f000 fbf6 	bl	8000eb0 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006c4:	f001 f96a 	bl	800199c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 80006c8:	4896      	ldr	r0, [pc, #600]	@ (8000924 <main+0x2a4>)
 80006ca:	f008 ff47 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006ce:	2100      	movs	r1, #0
 80006d0:	4894      	ldr	r0, [pc, #592]	@ (8000924 <main+0x2a4>)
 80006d2:	f009 f81d 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	4892      	ldr	r0, [pc, #584]	@ (8000924 <main+0x2a4>)
 80006da:	f009 f819 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4890      	ldr	r0, [pc, #576]	@ (8000924 <main+0x2a4>)
 80006e2:	f009 f815 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006e6:	210c      	movs	r1, #12
 80006e8:	488e      	ldr	r0, [pc, #568]	@ (8000924 <main+0x2a4>)
 80006ea:	f009 f811 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	488d      	ldr	r0, [pc, #564]	@ (8000928 <main+0x2a8>)
 80006f4:	f004 fb36 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	488a      	ldr	r0, [pc, #552]	@ (8000928 <main+0x2a8>)
 80006fe:	f004 fb31 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	4888      	ldr	r0, [pc, #544]	@ (8000928 <main+0x2a8>)
 8000708:	f004 fb2c 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	4885      	ldr	r0, [pc, #532]	@ (8000928 <main+0x2a8>)
 8000712:	f004 fb27 	bl	8004d64 <HAL_GPIO_WritePin>
  			 *
  			 */
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000716:	4885      	ldr	r0, [pc, #532]	@ (800092c <main+0x2ac>)
 8000718:	f008 ff20 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4883      	ldr	r0, [pc, #524]	@ (800092c <main+0x2ac>)
 8000720:	f008 fff6 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	487f      	ldr	r0, [pc, #508]	@ (8000928 <main+0x2a8>)
 800072a:	f004 fb1b 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 2

  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 800072e:	4880      	ldr	r0, [pc, #512]	@ (8000930 <main+0x2b0>)
 8000730:	f008 ff14 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	487e      	ldr	r0, [pc, #504]	@ (8000930 <main+0x2b0>)
 8000738:	f008 ffea 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	487c      	ldr	r0, [pc, #496]	@ (8000930 <main+0x2b0>)
 8000740:	f008 ffe6 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	487a      	ldr	r0, [pc, #488]	@ (8000930 <main+0x2b0>)
 8000748:	f008 ffe2 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800074c:	210c      	movs	r1, #12
 800074e:	4878      	ldr	r0, [pc, #480]	@ (8000930 <main+0x2b0>)
 8000750:	f008 ffde 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	4876      	ldr	r0, [pc, #472]	@ (8000934 <main+0x2b4>)
 800075c:	f004 fb02 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000766:	4873      	ldr	r0, [pc, #460]	@ (8000934 <main+0x2b4>)
 8000768:	f004 fafc 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000772:	4871      	ldr	r0, [pc, #452]	@ (8000938 <main+0x2b8>)
 8000774:	f004 faf6 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	486e      	ldr	r0, [pc, #440]	@ (8000938 <main+0x2b8>)
 8000780:	f004 faf0 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 4

  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 8000784:	486d      	ldr	r0, [pc, #436]	@ (800093c <main+0x2bc>)
 8000786:	f008 fee9 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800078a:	2104      	movs	r1, #4
 800078c:	486b      	ldr	r0, [pc, #428]	@ (800093c <main+0x2bc>)
 800078e:	f008 ffbf 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000792:	2108      	movs	r1, #8
 8000794:	4869      	ldr	r0, [pc, #420]	@ (800093c <main+0x2bc>)
 8000796:	f008 ffbb 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4865      	ldr	r0, [pc, #404]	@ (8000938 <main+0x2b8>)
 80007a2:	f004 fadf 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ac:	4862      	ldr	r0, [pc, #392]	@ (8000938 <main+0x2b8>)
 80007ae:	f004 fad9 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 5

  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 80007b2:	4863      	ldr	r0, [pc, #396]	@ (8000940 <main+0x2c0>)
 80007b4:	f008 fed2 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	4861      	ldr	r0, [pc, #388]	@ (8000940 <main+0x2c0>)
 80007bc:	f008 ffa8 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	4858      	ldr	r0, [pc, #352]	@ (8000928 <main+0x2a8>)
 80007c6:	f004 facd 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 8

  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 80007ca:	485e      	ldr	r0, [pc, #376]	@ (8000944 <main+0x2c4>)
 80007cc:	f008 fec6 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	485c      	ldr	r0, [pc, #368]	@ (8000944 <main+0x2c4>)
 80007d4:	f008 ff9c 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007de:	4852      	ldr	r0, [pc, #328]	@ (8000928 <main+0x2a8>)
 80007e0:	f004 fac0 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 12

  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 80007e4:	4858      	ldr	r0, [pc, #352]	@ (8000948 <main+0x2c8>)
 80007e6:	f008 feb9 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4856      	ldr	r0, [pc, #344]	@ (8000948 <main+0x2c8>)
 80007ee:	f008 ff8f 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f8:	484b      	ldr	r0, [pc, #300]	@ (8000928 <main+0x2a8>)
 80007fa:	f004 fab3 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 13

  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 80007fe:	4853      	ldr	r0, [pc, #332]	@ (800094c <main+0x2cc>)
 8000800:	f008 feac 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	4851      	ldr	r0, [pc, #324]	@ (800094c <main+0x2cc>)
 8000808:	f008 ff82 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	4845      	ldr	r0, [pc, #276]	@ (8000928 <main+0x2a8>)
 8000814:	f004 faa6 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 14

  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 8000818:	484d      	ldr	r0, [pc, #308]	@ (8000950 <main+0x2d0>)
 800081a:	f008 fe9f 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	484b      	ldr	r0, [pc, #300]	@ (8000950 <main+0x2d0>)
 8000822:	f008 ff75 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	4849      	ldr	r0, [pc, #292]	@ (8000950 <main+0x2d0>)
 800082a:	f008 ff71 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000834:	483c      	ldr	r0, [pc, #240]	@ (8000928 <main+0x2a8>)
 8000836:	f004 fa95 	bl	8004d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	4845      	ldr	r0, [pc, #276]	@ (8000954 <main+0x2d4>)
 8000840:	f004 fa90 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 15

  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000844:	4844      	ldr	r0, [pc, #272]	@ (8000958 <main+0x2d8>)
 8000846:	f008 fe89 	bl	800955c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4842      	ldr	r0, [pc, #264]	@ (8000958 <main+0x2d8>)
 800084e:	f008 ff5f 	bl	8009710 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	483f      	ldr	r0, [pc, #252]	@ (8000954 <main+0x2d4>)
 8000858:	f004 fa84 	bl	8004d64 <HAL_GPIO_WritePin>
  //End Timer 16

  //HRTIM CODE GOES HERE *******
     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 800085c:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <main+0x2dc>)
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <main+0x2dc>)
 8000866:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 800086a:	601a      	str	r2, [r3, #0]
  //END HRTIM CODE

  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 800086c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000870:	483b      	ldr	r0, [pc, #236]	@ (8000960 <main+0x2e0>)
 8000872:	f005 fc76 	bl	8006162 <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800087e:	4838      	ldr	r0, [pc, #224]	@ (8000960 <main+0x2e0>)
 8000880:	f005 fc22 	bl	80060c8 <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2104      	movs	r1, #4
 8000888:	4832      	ldr	r0, [pc, #200]	@ (8000954 <main+0x2d4>)
 800088a:	f004 fa6b 	bl	8004d64 <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <main+0x2e4>)
 8000890:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000894:	619a      	str	r2, [r3, #24]
  //End Low Power Timer

       	    //Timer Synchronization
       	    TIM1->CNT = 0;
 8000896:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <main+0x2e8>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM2->CNT = 0;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM4->CNT = 0;
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <main+0x2ec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM5->CNT = 0;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <main+0x2f0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM8->CNT = 0;
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <main+0x2f4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM12->CNT = 0;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <main+0x2f8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM13->CNT = 0;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <main+0x2fc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM14->CNT = 0;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <main+0x300>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM15->CNT = 0;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <main+0x304>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM16->CNT = 0;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <main+0x308>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    LPTIM1->CNT = 0;
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <main+0x2e4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]

   gen_sine();
 80008da:	f002 f9d1 	bl	8002c80 <gen_sine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   init_buffer(rxp);
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <main+0x30c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fae1 	bl	8001eaa <init_buffer>
   HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 80008e8:	2201      	movs	r2, #1
 80008ea:	4929      	ldr	r1, [pc, #164]	@ (8000990 <main+0x310>)
 80008ec:	4829      	ldr	r0, [pc, #164]	@ (8000994 <main+0x314>)
 80008ee:	f00a f9a1 	bl	800ac34 <HAL_UART_Receive_IT>

  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref); //Sets flag for timer interrupt
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <main+0x318>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <main+0x288>
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <main+0x31c>)
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	eeb0 0b47 	vmov.f64	d0, d7
 8000904:	f001 fb6c 	bl	8001fe0 <control_update>
	  if(data_ready == TRUE) UART_update(); //Sets flag when a message is received
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <main+0x320>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <main+0x294>
 8000910:	f001 f9b2 	bl	8001c78 <UART_update>
	  if(cmd_ready == TRUE) command_update(); //Sets flag once message is ready to send
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <main+0x324>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d1ea      	bne.n	80008f2 <main+0x272>
 800091c:	f001 f9ca 	bl	8001cb4 <command_update>
	  if(ctrl_tmr_expired == TRUE) control_update(ref); //Sets flag for timer interrupt
 8000920:	e7e7      	b.n	80008f2 <main+0x272>
 8000922:	bf00      	nop
 8000924:	24000318 	.word	0x24000318
 8000928:	58021000 	.word	0x58021000
 800092c:	24000364 	.word	0x24000364
 8000930:	240003b0 	.word	0x240003b0
 8000934:	58020400 	.word	0x58020400
 8000938:	58020800 	.word	0x58020800
 800093c:	240003fc 	.word	0x240003fc
 8000940:	24000448 	.word	0x24000448
 8000944:	24000494 	.word	0x24000494
 8000948:	240004e0 	.word	0x240004e0
 800094c:	2400052c 	.word	0x2400052c
 8000950:	24000578 	.word	0x24000578
 8000954:	58020c00 	.word	0x58020c00
 8000958:	240005c4 	.word	0x240005c4
 800095c:	40017400 	.word	0x40017400
 8000960:	240002e0 	.word	0x240002e0
 8000964:	40002400 	.word	0x40002400
 8000968:	40010000 	.word	0x40010000
 800096c:	40000800 	.word	0x40000800
 8000970:	40000c00 	.word	0x40000c00
 8000974:	40010400 	.word	0x40010400
 8000978:	40001800 	.word	0x40001800
 800097c:	40001c00 	.word	0x40001c00
 8000980:	40002000 	.word	0x40002000
 8000984:	40014000 	.word	0x40014000
 8000988:	40014400 	.word	0x40014400
 800098c:	24000000 	.word	0x24000000
 8000990:	24003e3c 	.word	0x24003e3c
 8000994:	24000610 	.word	0x24000610
 8000998:	240006a4 	.word	0x240006a4
 800099c:	240006a8 	.word	0x240006a8
 80009a0:	240025f0 	.word	0x240025f0
 80009a4:	24003e02 	.word	0x24003e02

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	@ 0x78
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00d f9bf 	bl	800dd3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00d f9b8 	bl	800dd3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f005 ff22 	bl	8006814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b48      	ldr	r3, [pc, #288]	@ (8000af8 <SystemClock_Config+0x150>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	4a47      	ldr	r2, [pc, #284]	@ (8000af8 <SystemClock_Config+0x150>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e0:	4b45      	ldr	r3, [pc, #276]	@ (8000af8 <SystemClock_Config+0x150>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <SystemClock_Config+0x154>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <SystemClock_Config+0x154>)
 80009f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <SystemClock_Config+0x154>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a02:	bf00      	nop
 8000a04:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <SystemClock_Config+0x154>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a10:	d1f8      	bne.n	8000a04 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a39      	ldr	r2, [pc, #228]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <SystemClock_Config+0x154>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <SystemClock_Config+0x154>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0x154>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	2302      	movs	r3, #2
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a88:	2350      	movs	r3, #80	@ 0x50
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 feed 	bl	8006888 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab4:	f002 f946 	bl	8002d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	233f      	movs	r3, #63	@ 0x3f
 8000aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad6:	2340      	movs	r3, #64	@ 0x40
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fb2b 	bl	800713c <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000aec:	f002 f92a 	bl	8002d44 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3778      	adds	r7, #120	@ 0x78
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0aa      	sub	sp, #168	@ 0xa8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000b1a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000b28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2c:	2254      	movs	r2, #84	@ 0x54
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00d f902 	bl	800dd3a <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00d f8f6 	bl	800dd3a <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000b4e:	4bc4      	ldr	r3, [pc, #784]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b50:	4ac4      	ldr	r2, [pc, #784]	@ (8000e64 <MX_HRTIM_Init+0x360>)
 8000b52:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b54:	4bc2      	ldr	r3, [pc, #776]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b5a:	4bc1      	ldr	r3, [pc, #772]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000b60:	48bf      	ldr	r0, [pc, #764]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b62:	f004 f919 	bl	8004d98 <HAL_HRTIM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000b6c:	f002 f8ea 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	48bb      	ldr	r0, [pc, #748]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b74:	f004 fa37 	bl	8004fe6 <HAL_HRTIM_EventPrescalerConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000b7e:	f002 f8e1 	bl	8002d44 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000b9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	48af      	ldr	r0, [pc, #700]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000ba4:	f004 f9f0 	bl	8004f88 <HAL_HRTIM_EventConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000bae:	f002 f8c9 	bl	8002d44 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000bb2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000bcc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	48a2      	ldr	r0, [pc, #648]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000bd6:	f004 f9af 	bl	8004f38 <HAL_HRTIM_TimeBaseConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000be0:	f002 f8b0 	bl	8002d44 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000c08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c0c:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000c38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c44:	461a      	mov	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	4885      	ldr	r0, [pc, #532]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c4a:	f004 fa05 	bl	8005058 <HAL_HRTIM_WaveformTimerConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000c54:	f002 f876 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000c58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2101      	movs	r1, #1
 8000c60:	487f      	ldr	r0, [pc, #508]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c62:	f004 f9f9 	bl	8005058 <HAL_HRTIM_WaveformTimerConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000c6c:	f002 f86a 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000c70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c74:	461a      	mov	r2, r3
 8000c76:	2102      	movs	r1, #2
 8000c78:	4879      	ldr	r0, [pc, #484]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c7a:	f004 f9ed 	bl	8005058 <HAL_HRTIM_WaveformTimerConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000c84:	f002 f85e 	bl	8002d44 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	2103      	movs	r1, #3
 8000c94:	4872      	ldr	r0, [pc, #456]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c96:	f004 f9df 	bl	8005058 <HAL_HRTIM_WaveformTimerConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000ca0:	f002 f850 	bl	8002d44 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000ca4:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	486b      	ldr	r0, [pc, #428]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cb4:	f004 fa42 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000cbe:	f002 f841 	bl	8002d44 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4863      	ldr	r0, [pc, #396]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cd4:	f004 fa32 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000cde:	f002 f831 	bl	8002d44 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2101      	movs	r1, #1
 8000cea:	485d      	ldr	r0, [pc, #372]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cec:	f004 fa26 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000cf6:	f002 f825 	bl	8002d44 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2102      	movs	r1, #2
 8000d02:	4857      	ldr	r0, [pc, #348]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d04:	f004 fa1a 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000d0e:	f002 f819 	bl	8002d44 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	2202      	movs	r2, #2
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4851      	ldr	r0, [pc, #324]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d1c:	f004 fa0e 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000d26:	f002 f80d 	bl	8002d44 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <MX_HRTIM_Init+0x364>)
 8000d30:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4843      	ldr	r0, [pc, #268]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d52:	f004 fb61 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000d5c:	f001 fff2 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2204      	movs	r2, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	483e      	ldr	r0, [pc, #248]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d68:	f004 fb56 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000d72:	f001 ffe7 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2210      	movs	r2, #16
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4838      	ldr	r0, [pc, #224]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d7e:	f004 fb4b 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000d88:	f001 ffdc 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	2103      	movs	r1, #3
 8000d92:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d94:	f004 fb40 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000d9e:	f001 ffd1 	bl	8002d44 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000da2:	2310      	movs	r3, #16
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2202      	movs	r2, #2
 8000daa:	2100      	movs	r1, #0
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dae:	f004 fb33 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000db8:	f001 ffc4 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4827      	ldr	r0, [pc, #156]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dc4:	f004 fb28 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000dce:	f001 ffb9 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4821      	ldr	r0, [pc, #132]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dda:	f004 fb1d 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000de4:	f001 ffae 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	2103      	movs	r1, #3
 8000dee:	481c      	ldr	r0, [pc, #112]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000df0:	f004 fb12 	bl	8005418 <HAL_HRTIM_WaveformOutputConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000dfa:	f001 ffa3 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000dfe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e02:	461a      	mov	r2, r3
 8000e04:	2101      	movs	r1, #1
 8000e06:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e08:	f004 f896 	bl	8004f38 <HAL_HRTIM_TimeBaseConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000e12:	f001 ff97 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e20:	f004 f98c 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000e2a:	f001 ff8b 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000e2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e32:	461a      	mov	r2, r3
 8000e34:	2102      	movs	r1, #2
 8000e36:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e38:	f004 f87e 	bl	8004f38 <HAL_HRTIM_TimeBaseConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000e42:	f001 ff7f 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e50:	f004 f974 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000e5a:	f001 ff73 	bl	8002d44 <Error_Handler>
 8000e5e:	e005      	b.n	8000e6c <MX_HRTIM_Init+0x368>
 8000e60:	24000204 	.word	0x24000204
 8000e64:	40017400 	.word	0x40017400
 8000e68:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000e6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e70:	461a      	mov	r2, r3
 8000e72:	2103      	movs	r1, #3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e76:	f004 f85f 	bl	8004f38 <HAL_HRTIM_TimeBaseConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000e80:	f001 ff60 	bl	8002d44 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e8e:	f004 f955 	bl	800513c <HAL_HRTIM_WaveformCompareConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000e98:	f001 ff54 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e9e:	f001 ffab 	bl	8002df8 <HAL_HRTIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	37a8      	adds	r7, #168	@ 0xa8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000204 	.word	0x24000204

08000eb0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <MX_LPTIM1_Init+0x58>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ecc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ed4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ef0:	f005 f83a 	bl	8005f68 <HAL_LPTIM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000efa:	f001 ff23 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240002e0 	.word	0x240002e0
 8000f08:	40002400 	.word	0x40002400

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09a      	sub	sp, #104	@ 0x68
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	222c      	movs	r2, #44	@ 0x2c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fef7 	bl	800dd3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f4e:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <MX_TIM1_Init+0x19c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f52:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b52      	ldr	r3, [pc, #328]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f60:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b4f      	ldr	r3, [pc, #316]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b4c      	ldr	r3, [pc, #304]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	484a      	ldr	r0, [pc, #296]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f7a:	f008 fa97 	bl	80094ac <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f001 fede 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f92:	4619      	mov	r1, r3
 8000f94:	4843      	ldr	r0, [pc, #268]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f96:	f008 fee5 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fa0:	f001 fed0 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa4:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fa6:	f008 fb51 	bl	800964c <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fb0:	f001 fec8 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4837      	ldr	r0, [pc, #220]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fc8:	f009 fc2c 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fd2:	f001 feb7 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	@ 0x60
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482a      	ldr	r0, [pc, #168]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000ffc:	f008 fd9e 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001006:	f001 fe9d 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001014:	f008 fd92 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800101e:	f001 fe91 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <MX_TIM1_Init+0x198>)
 800102c:	f008 fd86 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001036:	f001 fe85 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800103e:	220c      	movs	r2, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001044:	f008 fd7a 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800104e:	f001 fe79 	bl	8002d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001088:	f009 fc5a 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001092:	f001 fe57 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001098:	f002 f8cc 	bl	8003234 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3768      	adds	r7, #104	@ 0x68
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000318 	.word	0x24000318
 80010a8:	40010000 	.word	0x40010000

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010f4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001106:	4823      	ldr	r0, [pc, #140]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001108:	f008 f9d0 	bl	80094ac <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001112:	f001 fe17 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001120:	4619      	mov	r1, r3
 8001122:	481c      	ldr	r0, [pc, #112]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001124:	f008 fe1e 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800112e:	f001 fe09 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001134:	f008 fa8a 	bl	800964c <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800113e:	f001 fe01 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001152:	f009 fb67 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800115c:	f001 fdf2 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	@ 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001178:	f008 fce0 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001182:	f001 fddf 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001188:	f002 f854 	bl	8003234 <HAL_TIM_MspPostInit>

}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	@ 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000364 	.word	0x24000364

08001198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	@ 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_TIM4_Init+0x12c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011de:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4833      	ldr	r0, [pc, #204]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011f2:	f008 f95b 	bl	80094ac <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011fc:	f001 fda2 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120a:	4619      	mov	r1, r3
 800120c:	482c      	ldr	r0, [pc, #176]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800120e:	f008 fda9 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001218:	f001 fd94 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800121e:	f008 fa15 	bl	800964c <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001228:	f001 fd8c 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800123c:	f009 faf2 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001246:	f001 fd7d 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001262:	f008 fc6b 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800126c:	f001 fd6a 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001278:	f008 fc60 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001282:	f001 fd5f 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800128e:	f008 fc55 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001298:	f001 fd54 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	220c      	movs	r2, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012a4:	f008 fc4a 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80012ae:	f001 fd49 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b2:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012b4:	f001 ffbe 	bl	8003234 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	@ 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240003b0 	.word	0x240003b0
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80012fc:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <MX_TIM5_Init+0x100>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800130e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001322:	f008 f8c3 	bl	80094ac <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800132c:	f001 fd0a 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800133e:	f008 fd11 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001348:	f001 fcfc 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800134e:	f008 f97d 	bl	800964c <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 fcf4 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800136c:	f009 fa5a 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001376:	f001 fce5 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2204      	movs	r2, #4
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001392:	f008 fbd3 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800139c:	f001 fcd2 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2208      	movs	r2, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013a8:	f008 fbc8 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80013b2:	f001 fcc7 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b6:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013b8:	f001 ff3c 	bl	8003234 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	240003fc 	.word	0x240003fc
 80013c8:	40000c00 	.word	0x40000c00

080013cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09a      	sub	sp, #104	@ 0x68
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	222c      	movs	r2, #44	@ 0x2c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00c fc97 	bl	800dd3a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <MX_TIM8_Init+0x150>)
 8001410:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001420:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001424:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142c:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001438:	4837      	ldr	r0, [pc, #220]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800143a:	f008 f837 	bl	80094ac <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001444:	f001 fc7e 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001452:	4619      	mov	r1, r3
 8001454:	4830      	ldr	r0, [pc, #192]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001456:	f008 fc85 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001460:	f001 fc70 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001464:	482c      	ldr	r0, [pc, #176]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001466:	f008 f8f1 	bl	800964c <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001470:	f001 fc68 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001480:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	4824      	ldr	r0, [pc, #144]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001488:	f009 f9cc 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001492:	f001 fc57 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b2:	220c      	movs	r2, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4818      	ldr	r0, [pc, #96]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014b8:	f008 fb40 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80014c2:	f001 fc3f 	bl	8002d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014fc:	f009 fa20 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001506:	f001 fc1d 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800150a:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800150c:	f001 fe92 	bl	8003234 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3768      	adds	r7, #104	@ 0x68
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	24000448 	.word	0x24000448
 800151c:	40010400 	.word	0x40010400

08001520 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001554:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <MX_TIM12_Init+0xec>)
 8001556:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001566:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800156a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001578:	4823      	ldr	r0, [pc, #140]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800157a:	f007 ff97 	bl	80094ac <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001584:	f001 fbde 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001596:	f008 fbe5 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80015a0:	f001 fbd0 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015a4:	4818      	ldr	r0, [pc, #96]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015a6:	f008 f851 	bl	800964c <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80015b0:	f001 fbc8 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015c4:	f009 f92e 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 80015ce:	f001 fbb9 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	@ 0x60
 80015d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015ea:	f008 faa7 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 80015f4:	f001 fba6 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015fa:	f001 fe1b 	bl	8003234 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	@ 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000494 	.word	0x24000494
 800160c:	40001800 	.word	0x40001800

08001610 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <MX_TIM13_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800163c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001640:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001650:	f007 ff2c 	bl	80094ac <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800165a:	f001 fb73 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800165e:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001660:	f007 fff4 	bl	800964c <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800166a:	f001 fb6b 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	@ 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001686:	f008 fa59 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001690:	f001 fb58 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001696:	f001 fdcd 	bl	8003234 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	240004e0 	.word	0x240004e0
 80016a8:	40001c00 	.word	0x40001c00

080016ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001744 <MX_TIM14_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e6:	2280      	movs	r2, #128	@ 0x80
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ea:	4815      	ldr	r0, [pc, #84]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016ec:	f007 fede 	bl	80094ac <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f001 fb25 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016fa:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016fc:	f007 ffa6 	bl	800964c <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001706:	f001 fb1d 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	@ 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001722:	f008 fa0b 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800172c:	f001 fb0a 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001732:	f001 fd7f 	bl	8003234 <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2400052c 	.word	0x2400052c
 8001744:	40002000 	.word	0x40002000

08001748 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09a      	sub	sp, #104	@ 0x68
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	222c      	movs	r2, #44	@ 0x2c
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f00c fad9 	bl	800dd3a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800178a:	4a46      	ldr	r2, [pc, #280]	@ (80018a4 <MX_TIM15_Init+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800178e:	4b44      	ldr	r3, [pc, #272]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800179c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80017a0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017a8:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017b4:	483a      	ldr	r0, [pc, #232]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b6:	f007 fe79 	bl	80094ac <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f001 fac0 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ce:	4619      	mov	r1, r3
 80017d0:	4833      	ldr	r0, [pc, #204]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017d2:	f008 fac7 	bl	8009d64 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017dc:	f001 fab2 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017e0:	482f      	ldr	r0, [pc, #188]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017e2:	f007 ff33 	bl	800964c <HAL_TIM_PWM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017ec:	f001 faaa 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017fc:	4619      	mov	r1, r3
 80017fe:	4828      	ldr	r0, [pc, #160]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001800:	f009 f810 	bl	800a824 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800180a:	f001 fa9b 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001834:	f008 f982 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800183e:	f001 fa81 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001842:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001846:	2204      	movs	r2, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800184c:	f008 f976 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001856:	f001 fa75 	bl	8002d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001872:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001882:	f009 f85d 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800188c:	f001 fa5a 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001892:	f001 fccf 	bl	8003234 <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3768      	adds	r7, #104	@ 0x68
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000578 	.word	0x24000578
 80018a4:	40014000 	.word	0x40014000

080018a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	222c      	movs	r2, #44	@ 0x2c
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00c fa36 	bl	800dd3a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <MX_TIM16_Init+0xf0>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018e2:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018fa:	4826      	ldr	r0, [pc, #152]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018fc:	f007 fdd6 	bl	80094ac <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001906:	f001 fa1d 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <MX_TIM16_Init+0xec>)
 800190c:	f007 fe9e 	bl	800964c <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001916:	f001 fa15 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191a:	2360      	movs	r3, #96	@ 0x60
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4815      	ldr	r0, [pc, #84]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001940:	f008 f8fc 	bl	8009b3c <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800194a:	f001 f9fb 	bl	8002d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001976:	f008 ffe3 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001980:	f001 f9e0 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001986:	f001 fc55 	bl	8003234 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3748      	adds	r7, #72	@ 0x48
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240005c4 	.word	0x240005c4
 8001998:	40014400 	.word	0x40014400

0800199c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <MX_UART4_Init+0xa0>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e4:	4814      	ldr	r0, [pc, #80]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e6:	f009 f847 	bl	800aa78 <HAL_UART_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019f0:	f001 f9a8 	bl	8002d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019f8:	f00b fb97 	bl	800d12a <HAL_UARTEx_SetTxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f001 f99f 	bl	8002d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a0a:	f00b fbcc 	bl	800d1a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f001 f996 	bl	8002d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a18:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a1a:	f00b fb4d 	bl	800d0b8 <HAL_UARTEx_DisableFifoMode>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a24:	f001 f98e 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  UART4->CR1 |= (USART_CR1_TE|USART_CR1_RXNEIE|USART_CR1_RE|USART_CR1_UE);
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a03      	ldr	r2, [pc, #12]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2e:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 8001a32:	6013      	str	r3, [r2, #0]
  /* USER CODE END UART4_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000610 	.word	0x24000610
 8001a3c:	40004c00 	.word	0x40004c00

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a66:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a50      	ldr	r2, [pc, #320]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a92:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a48      	ldr	r2, [pc, #288]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b46      	ldr	r3, [pc, #280]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a41      	ldr	r2, [pc, #260]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a39      	ldr	r2, [pc, #228]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af2:	4a32      	ldr	r2, [pc, #200]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afc:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001b10:	482b      	ldr	r0, [pc, #172]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b12:	f003 f927 	bl	8004d64 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001b1c:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b1e:	f003 f921 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001b28:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b2a:	f003 f91b 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001b34:	4825      	ldr	r0, [pc, #148]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001b36:	f003 f915 	bl	8004d64 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b3a:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001b3e:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b54:	f002 ff56 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001b58:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b72:	f002 ff47 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001b76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480e      	ldr	r0, [pc, #56]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b90:	f002 ff38 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b94:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001b98:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001bae:	f002 ff29 	bl	8004a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58021000 	.word	0x58021000
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001bd8:	230a      	movs	r3, #10
 8001bda:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001bdc:	a324      	add	r3, pc, #144	@ (adr r3, 8001c70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	/*//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
		period_ticks ++;
	*/

    if (htim==&htim1){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12d      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bf6:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb93 f2f2 	sdiv	r2, r3, r2
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	fb01 f202 	mul.w	r2, r1, r2
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11d      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c16:	db02      	blt.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	ed93 6b00 	vldr	d6, [r3]
 8001c2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c36:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c42:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	24000318 	.word	0x24000318
 8001c5c:	24003e40 	.word	0x24003e40
 8001c60:	24003e44 	.word	0x24003e44
 8001c64:	240006b0 	.word	0x240006b0
 8001c68:	240006a8 	.word	0x240006a8
 8001c6c:	240006a4 	.word	0x240006a4
 8001c70:	33333333 	.word	0x33333333
 8001c74:	3fd33333 	.word	0x3fd33333

08001c78 <UART_update>:

/*Writes commands into the circular buffer as they are sent,
once the elements is equal to the command length, a flag is sent*/
void UART_update(){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

	uint8_t c;
	c = UART4->RDR;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <UART_update+0x2c>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	71fb      	strb	r3, [r7, #7]

	run_state_machine(c);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f87a 	bl	8001d80 <run_state_machine>

	HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4906      	ldr	r1, [pc, #24]	@ (8001ca8 <UART_update+0x30>)
 8001c90:	4806      	ldr	r0, [pc, #24]	@ (8001cac <UART_update+0x34>)
 8001c92:	f008 ffcf 	bl	800ac34 <HAL_UART_Receive_IT>
	data_ready = FALSE;
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <UART_update+0x38>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004c00 	.word	0x40004c00
 8001ca8:	24003e3c 	.word	0x24003e3c
 8001cac:	24000610 	.word	0x24000610
 8001cb0:	240025f0 	.word	0x240025f0

08001cb4 <command_update>:

/*Function that is called once the number of elements in the buffer
is equal to the command length. Fills elements into an array to print */
void command_update(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <command_update+0xb4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	801a      	strh	r2, [r3, #0]
 8001cbe:	e017      	b.n	8001cf0 <command_update+0x3c>
		 cmd_bytes[index] = read_from_buffer(rxp);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <command_update+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f968 	bl	8001f9a <read_from_buffer>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <command_update+0xb4>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	b209      	sxth	r1, r1
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <command_update+0xbc>)
 8001cda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <command_update+0xb4>)
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <command_update+0xb4>)
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <command_update+0xb4>)
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	2b36      	cmp	r3, #54	@ 0x36
 8001cf8:	dde2      	ble.n	8001cc0 <command_update+0xc>
	 }

	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <command_update+0xb4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	e021      	b.n	8001d46 <command_update+0x92>
		cmd_ref[index] = (cmd_bytes[(2*index)+1]<<8|cmd_bytes[2*index]);
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <command_update+0xb4>)
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a18      	ldr	r2, [pc, #96]	@ (8001d70 <command_update+0xbc>)
 8001d0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <command_update+0xb4>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4914      	ldr	r1, [pc, #80]	@ (8001d70 <command_update+0xbc>)
 8001d20:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001d24:	4910      	ldr	r1, [pc, #64]	@ (8001d68 <command_update+0xb4>)
 8001d26:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <command_update+0xc0>)
 8001d30:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <command_update+0xb4>)
 8001d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <command_update+0xb4>)
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <command_update+0xb4>)
 8001d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4c:	2b1b      	cmp	r3, #27
 8001d4e:	ddd8      	ble.n	8001d02 <command_update+0x4e>
	}

		HAL_UART_Transmit(&huart4, cmd_bytes, sizeof(cmd_bytes), 10);
 8001d50:	230a      	movs	r3, #10
 8001d52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d56:	4906      	ldr	r1, [pc, #24]	@ (8001d70 <command_update+0xbc>)
 8001d58:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <command_update+0xc4>)
 8001d5a:	f008 fedd 	bl	800ab18 <HAL_UART_Transmit>

	cmd_ready = FALSE;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <command_update+0xc8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	24003e00 	.word	0x24003e00
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	24002e00 	.word	0x24002e00
 8001d74:	24003e04 	.word	0x24003e04
 8001d78:	24000610 	.word	0x24000610
 8001d7c:	24003e02 	.word	0x24003e02

08001d80 <run_state_machine>:


static void run_state_machine(uint8_t byte)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	static int current_state = startByte1;
	static int counter = 0;
	int next_state;

	switch(current_state){
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <run_state_machine+0xdc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d85b      	bhi.n	8001e4a <run_state_machine+0xca>
 8001d92:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <run_state_machine+0x18>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001dad 	.word	0x08001dad
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	08001de1 	.word	0x08001de1
 8001da4:	08001e0d 	.word	0x08001e0d
 8001da8:	08001e23 	.word	0x08001e23
		case startByte1:
			if(byte == start_bytes[0]){
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <run_state_machine+0xe0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d102      	bne.n	8001dbc <run_state_machine+0x3c>
				next_state = startByte2;
 8001db6:	2301      	movs	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
			} else{
				next_state = current_state;
			}
			break;
 8001dba:	e047      	b.n	8001e4c <run_state_machine+0xcc>
				next_state = current_state;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <run_state_machine+0xdc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
			break;
 8001dc2:	e043      	b.n	8001e4c <run_state_machine+0xcc>
		case(startByte2):
			if(byte == start_bytes[1]){
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <run_state_machine+0xe0>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d105      	bne.n	8001dda <run_state_machine+0x5a>
				next_state = storeMessage;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
				counter = 0;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <run_state_machine+0xe4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
			} else{
				next_state = startByte1;
			}
			break;
 8001dd8:	e038      	b.n	8001e4c <run_state_machine+0xcc>
				next_state = startByte1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
			break;
 8001dde:	e035      	b.n	8001e4c <run_state_machine+0xcc>
		case(storeMessage):
			if(counter == CMD_LENGTH-1){
 8001de0:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <run_state_machine+0xe4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b35      	cmp	r3, #53	@ 0x35
 8001de6:	d102      	bne.n	8001dee <run_state_machine+0x6e>
				next_state = endByte1;
 8001de8:	2303      	movs	r3, #3
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e001      	b.n	8001df2 <run_state_machine+0x72>
			}else{
				next_state = storeMessage;
 8001dee:	2302      	movs	r3, #2
 8001df0:	60fb      	str	r3, [r7, #12]
			}
			write_buffer(rxp, byte);
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <run_state_machine+0xe8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f8a8 	bl	8001f50 <write_buffer>
			counter++;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <run_state_machine+0xe4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <run_state_machine+0xe4>)
 8001e08:	6013      	str	r3, [r2, #0]
			break;
 8001e0a:	e01f      	b.n	8001e4c <run_state_machine+0xcc>
		case(endByte1):
			if(byte == end_bytes[0]){
 8001e0c:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <run_state_machine+0xec>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d102      	bne.n	8001e1c <run_state_machine+0x9c>
				next_state = endByte2;
 8001e16:	2304      	movs	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
			}else{
				next_state = startByte1;
			}
			break;
 8001e1a:	e017      	b.n	8001e4c <run_state_machine+0xcc>
				next_state = startByte1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
			break;
 8001e20:	e014      	b.n	8001e4c <run_state_machine+0xcc>
		case(endByte2):
			if(byte == end_bytes[1]){
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <run_state_machine+0xec>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d103      	bne.n	8001e34 <run_state_machine+0xb4>
				cmd_ready = TRUE;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <run_state_machine+0xf0>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <run_state_machine+0xc4>
			}else{
			rxp->read_index = 0;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <run_state_machine+0xe8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
			rxp->write_index = 0;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <run_state_machine+0xe8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
			}
			next_state = startByte1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
			break;
 8001e48:	e000      	b.n	8001e4c <run_state_machine+0xcc>
		default:
			break;
 8001e4a:	bf00      	nop
	}
	current_state = next_state;
 8001e4c:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <run_state_machine+0xdc>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24003e48 	.word	0x24003e48
 8001e60:	24000004 	.word	0x24000004
 8001e64:	24003e4c 	.word	0x24003e4c
 8001e68:	24000000 	.word	0x24000000
 8001e6c:	24000008 	.word	0x24000008
 8001e70:	24003e02 	.word	0x24003e02

08001e74 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	data_ready = TRUE;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <HAL_UART_RxCpltCallback+0x1c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	240025f0 	.word	0x240025f0

08001e94 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef*huart)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 __NOP();
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <init_buffer>:
    }
    return 0; /*no data available*/
}


static void init_buffer(struct circular_buffer *buf) {
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
    int i;
    buf->read_index = 0; /*initialize read index to 0 */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    buf->write_index = 0; /*initialize write index to 0 */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
    buf->size = BUFFER_LENGTH; /*Set size to buffer length const*/
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec4:	609a      	str	r2, [r3, #8]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e008      	b.n	8001ede <init_buffer+0x34>
        buf->data[i] = 0;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	330c      	adds	r3, #12
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee4:	dbf2      	blt.n	8001ecc <init_buffer+0x22>
    } /*end for */
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <is_buffer_empty>:

/* function int is_buffer_empty(struct circular_buffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if they are equal then the buffer is empty
 */
static int8_t is_buffer_empty(struct circular_buffer *buf) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    if (buf->read_index == buf->write_index) { //if read = write then the buffer is empty
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d101      	bne.n	8001f0c <is_buffer_empty+0x18>
        return TRUE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <is_buffer_empty+0x1a>
    }
    return FALSE;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <is_buffer_full>:

/*  bufFull(struct oBuffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if write+1 = read, then the buffer is full.
 */
static int8_t is_buffer_full(struct circular_buffer *buf) {
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
    /* write index +1 == read index is full,  the mod provides wrap around*/
    if ((buf->write_index + 1) % BUFFER_LENGTH == buf->read_index) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	3301      	adds	r3, #1
 8001f28:	425a      	negs	r2, r3
 8001f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f32:	bf58      	it	pl
 8001f34:	4253      	negpl	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <is_buffer_full+0x28>
        return TRUE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <is_buffer_full+0x2a>
    }
    return FALSE;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <write_buffer>:

/* writeBuffer( (struct oBuffer *buf, unsigned char c)
 * takes a pointer to a circular buffer and a char to be written
 * returns SUCCESS or ERROR
 */
static int8_t write_buffer(struct circular_buffer *buf, unsigned char c) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
    if (is_buffer_full(buf) == FALSE) {
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffdc 	bl	8001f1a <is_buffer_full>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <write_buffer+0x40>
        buf->data[buf->write_index] = c;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	731a      	strb	r2, [r3, #12]
        /*increment the write index and wrap using modulus arithmetic */
        buf->write_index = (buf->write_index + 1) % BUFFER_LENGTH;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	425a      	negs	r2, r3
 8001f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f80:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f84:	bf58      	it	pl
 8001f86:	4253      	negpl	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6053      	str	r3, [r2, #4]
        return SUCCESS;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <write_buffer+0x42>
    }
    return ERROR; /*no data written*/
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <read_from_buffer>:
 * takes a pointer to a circular buffer
 * returns the value from the buffer
 * the read index is incremented and wrapped using modulus arithmetic
 * Returns 0 if the buffer is empty or the pointer is invalid
 */
static unsigned char read_from_buffer(struct circular_buffer *buf) {
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
    unsigned char val;
    if (is_buffer_empty(buf) == FALSE) {
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa6 	bl	8001ef4 <is_buffer_empty>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d113      	bne.n	8001fd6 <read_from_buffer+0x3c>
        val = buf->data[buf->read_index]; //get the char from the buffer
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	7b1b      	ldrb	r3, [r3, #12]
 8001fb8:	73fb      	strb	r3, [r7, #15]
        /*increment the read index and wrap using modulus arithmetic*/
        buf->read_index = (buf->read_index + 1) % BUFFER_LENGTH;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	425a      	negs	r2, r3
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001fca:	bf58      	it	pl
 8001fcc:	4253      	negpl	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
        return val;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	e000      	b.n	8001fd8 <read_from_buffer+0x3e>
    }
    return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <control_update>:
    return 0;
}


static void control_update(double ref)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	//uint16_t new_dc;
	double absref = 0;
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 2302 	strd	r2, r3, [r7, #8]


	//Timer 1
		// set the sign of the move (phase)
			if(cmd_ref[T1C1] < 0){
 8001ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8002274 <control_update+0x294>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da03      	bge.n	8002008 <control_update+0x28>
				phase = GPIO_PIN_RESET; // reverse direction
 8002000:	4b9d      	ldr	r3, [pc, #628]	@ (8002278 <control_update+0x298>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e002      	b.n	800200e <control_update+0x2e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002008:	4b9b      	ldr	r3, [pc, #620]	@ (8002278 <control_update+0x298>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 800200e:	4b9a      	ldr	r3, [pc, #616]	@ (8002278 <control_update+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	2101      	movs	r1, #1
 8002018:	4898      	ldr	r0, [pc, #608]	@ (800227c <control_update+0x29c>)
 800201a:	f002 fea3 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C2] < 0){
 800201e:	4b95      	ldr	r3, [pc, #596]	@ (8002274 <control_update+0x294>)
 8002020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da03      	bge.n	8002030 <control_update+0x50>
				phase = GPIO_PIN_RESET; // reverse direction
 8002028:	4b93      	ldr	r3, [pc, #588]	@ (8002278 <control_update+0x298>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e002      	b.n	8002036 <control_update+0x56>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002030:	4b91      	ldr	r3, [pc, #580]	@ (8002278 <control_update+0x298>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8002036:	4b90      	ldr	r3, [pc, #576]	@ (8002278 <control_update+0x298>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	2102      	movs	r1, #2
 8002040:	488e      	ldr	r0, [pc, #568]	@ (800227c <control_update+0x29c>)
 8002042:	f002 fe8f 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C3] < 0){
 8002046:	4b8b      	ldr	r3, [pc, #556]	@ (8002274 <control_update+0x294>)
 8002048:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da03      	bge.n	8002058 <control_update+0x78>
				phase = GPIO_PIN_RESET; // reverse direction
 8002050:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <control_update+0x298>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e002      	b.n	800205e <control_update+0x7e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002058:	4b87      	ldr	r3, [pc, #540]	@ (8002278 <control_update+0x298>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 800205e:	4b86      	ldr	r3, [pc, #536]	@ (8002278 <control_update+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	2104      	movs	r1, #4
 8002068:	4884      	ldr	r0, [pc, #528]	@ (800227c <control_update+0x29c>)
 800206a:	f002 fe7b 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C4] < 0){
 800206e:	4b81      	ldr	r3, [pc, #516]	@ (8002274 <control_update+0x294>)
 8002070:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	da03      	bge.n	8002080 <control_update+0xa0>
				phase = GPIO_PIN_RESET; // reverse direction
 8002078:	4b7f      	ldr	r3, [pc, #508]	@ (8002278 <control_update+0x298>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e002      	b.n	8002086 <control_update+0xa6>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002080:	4b7d      	ldr	r3, [pc, #500]	@ (8002278 <control_update+0x298>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8002086:	4b7c      	ldr	r3, [pc, #496]	@ (8002278 <control_update+0x298>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	2108      	movs	r1, #8
 8002090:	487a      	ldr	r0, [pc, #488]	@ (800227c <control_update+0x29c>)
 8002092:	f002 fe67 	bl	8004d64 <HAL_GPIO_WritePin>
	//End Timer 1

	//Timer 2
		// set the sign of the move (phase)
			if(cmd_ref[T2C1] < 0){
 8002096:	4b77      	ldr	r3, [pc, #476]	@ (8002274 <control_update+0x294>)
 8002098:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da03      	bge.n	80020a8 <control_update+0xc8>
				phase = GPIO_PIN_RESET; // reverse direction
 80020a0:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <control_update+0x298>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e002      	b.n	80020ae <control_update+0xce>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020a8:	4b73      	ldr	r3, [pc, #460]	@ (8002278 <control_update+0x298>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 80020ae:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <control_update+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	2110      	movs	r1, #16
 80020b8:	4870      	ldr	r0, [pc, #448]	@ (800227c <control_update+0x29c>)
 80020ba:	f002 fe53 	bl	8004d64 <HAL_GPIO_WritePin>
	//End Timer 2

	//Timer 4
		// set the sign of the move (phase)
			if(cmd_ref[T4C1] < 0){
 80020be:	4b6d      	ldr	r3, [pc, #436]	@ (8002274 <control_update+0x294>)
 80020c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da03      	bge.n	80020d0 <control_update+0xf0>
				phase = GPIO_PIN_RESET; // reverse direction
 80020c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002278 <control_update+0x298>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e002      	b.n	80020d6 <control_update+0xf6>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020d0:	4b69      	ldr	r3, [pc, #420]	@ (8002278 <control_update+0x298>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 80020d6:	4b68      	ldr	r3, [pc, #416]	@ (8002278 <control_update+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020e2:	4867      	ldr	r0, [pc, #412]	@ (8002280 <control_update+0x2a0>)
 80020e4:	f002 fe3e 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C2] < 0){
 80020e8:	4b62      	ldr	r3, [pc, #392]	@ (8002274 <control_update+0x294>)
 80020ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da03      	bge.n	80020fa <control_update+0x11a>
				phase = GPIO_PIN_RESET; // reverse direction
 80020f2:	4b61      	ldr	r3, [pc, #388]	@ (8002278 <control_update+0x298>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e002      	b.n	8002100 <control_update+0x120>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002278 <control_update+0x298>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8002100:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <control_update+0x298>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800210c:	485c      	ldr	r0, [pc, #368]	@ (8002280 <control_update+0x2a0>)
 800210e:	f002 fe29 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C3] < 0){
 8002112:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <control_update+0x294>)
 8002114:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002118:	2b00      	cmp	r3, #0
 800211a:	da03      	bge.n	8002124 <control_update+0x144>
				phase = GPIO_PIN_RESET; // reverse direction
 800211c:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <control_update+0x298>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e002      	b.n	800212a <control_update+0x14a>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002124:	4b54      	ldr	r3, [pc, #336]	@ (8002278 <control_update+0x298>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 800212a:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <control_update+0x298>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002136:	4853      	ldr	r0, [pc, #332]	@ (8002284 <control_update+0x2a4>)
 8002138:	f002 fe14 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C4] < 0){
 800213c:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <control_update+0x294>)
 800213e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da03      	bge.n	800214e <control_update+0x16e>
				phase = GPIO_PIN_RESET; // reverse direction
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <control_update+0x298>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e002      	b.n	8002154 <control_update+0x174>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800214e:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <control_update+0x298>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8002154:	4b48      	ldr	r3, [pc, #288]	@ (8002278 <control_update+0x298>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002160:	4848      	ldr	r0, [pc, #288]	@ (8002284 <control_update+0x2a4>)
 8002162:	f002 fdff 	bl	8004d64 <HAL_GPIO_WritePin>
	//End Timer 4


	//Timer 5
		// set the sign of the move (phase)
			if(cmd_ref[T5C2] < 0){
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <control_update+0x294>)
 8002168:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da03      	bge.n	8002178 <control_update+0x198>
				phase = GPIO_PIN_RESET; // reverse direction
 8002170:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <control_update+0x298>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e002      	b.n	800217e <control_update+0x19e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002178:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <control_update+0x298>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 800217e:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <control_update+0x298>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800218a:	483e      	ldr	r0, [pc, #248]	@ (8002284 <control_update+0x2a4>)
 800218c:	f002 fdea 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T5C3] < 0){
 8002190:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <control_update+0x294>)
 8002192:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da03      	bge.n	80021a2 <control_update+0x1c2>
				phase = GPIO_PIN_RESET; // reverse direction
 800219a:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <control_update+0x298>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e002      	b.n	80021a8 <control_update+0x1c8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021a2:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <control_update+0x298>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <control_update+0x298>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021b4:	4833      	ldr	r0, [pc, #204]	@ (8002284 <control_update+0x2a4>)
 80021b6:	f002 fdd5 	bl	8004d64 <HAL_GPIO_WritePin>
    //End Timer 5


    //Timer 8
		// set the sign of the move (phase)
			if(cmd_ref[T8C4] < 0){
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <control_update+0x294>)
 80021bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da03      	bge.n	80021cc <control_update+0x1ec>
				phase = GPIO_PIN_RESET; // reverse direction
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <control_update+0x298>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e002      	b.n	80021d2 <control_update+0x1f2>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <control_update+0x298>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <control_update+0x298>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	4827      	ldr	r0, [pc, #156]	@ (800227c <control_update+0x29c>)
 80021de:	f002 fdc1 	bl	8004d64 <HAL_GPIO_WritePin>
	//End Timer 8


    //Timer 12
		// set the sign of the move (phase)
			if(cmd_ref[T12C2] < 0){
 80021e2:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <control_update+0x294>)
 80021e4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da03      	bge.n	80021f4 <control_update+0x214>
				phase = GPIO_PIN_RESET; // reverse direction
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <control_update+0x298>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e002      	b.n	80021fa <control_update+0x21a>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021f4:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <control_update+0x298>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <control_update+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002206:	481d      	ldr	r0, [pc, #116]	@ (800227c <control_update+0x29c>)
 8002208:	f002 fdac 	bl	8004d64 <HAL_GPIO_WritePin>
    //End Timer 12


    //Timer 13
		// set the sign of the move (phase)
			if(cmd_ref[T13C1] < 0){
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <control_update+0x294>)
 800220e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da03      	bge.n	800221e <control_update+0x23e>
				phase = GPIO_PIN_RESET; // reverse direction
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <control_update+0x298>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e002      	b.n	8002224 <control_update+0x244>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <control_update+0x298>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <control_update+0x298>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002230:	4812      	ldr	r0, [pc, #72]	@ (800227c <control_update+0x29c>)
 8002232:	f002 fd97 	bl	8004d64 <HAL_GPIO_WritePin>
    //End Timer 13


    //Timer 14
		// set the sign of the move (phase)
			if(cmd_ref[T14C1] < 0){
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <control_update+0x294>)
 8002238:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da03      	bge.n	8002248 <control_update+0x268>
				phase = GPIO_PIN_RESET; // reverse direction
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <control_update+0x298>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e002      	b.n	800224e <control_update+0x26e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <control_update+0x298>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <control_update+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800225a:	4808      	ldr	r0, [pc, #32]	@ (800227c <control_update+0x29c>)
 800225c:	f002 fd82 	bl	8004d64 <HAL_GPIO_WritePin>
    //End Timer 14


    //Timer 15
		// set the sign of the move (phase)
			if(cmd_ref[T15C1] < 0){
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <control_update+0x294>)
 8002262:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002266:	2b00      	cmp	r3, #0
 8002268:	da0e      	bge.n	8002288 <control_update+0x2a8>
				phase = GPIO_PIN_RESET; // reverse direction
 800226a:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <control_update+0x298>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e00d      	b.n	800228e <control_update+0x2ae>
 8002272:	bf00      	nop
 8002274:	24003e04 	.word	0x24003e04
 8002278:	2400000c 	.word	0x2400000c
 800227c:	58021000 	.word	0x58021000
 8002280:	58020400 	.word	0x58020400
 8002284:	58020800 	.word	0x58020800
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002288:	4b70      	ldr	r3, [pc, #448]	@ (800244c <control_update+0x46c>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 800228e:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <control_update+0x46c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229a:	486d      	ldr	r0, [pc, #436]	@ (8002450 <control_update+0x470>)
 800229c:	f002 fd62 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T15C2] < 0){
 80022a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002454 <control_update+0x474>)
 80022a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da03      	bge.n	80022b2 <control_update+0x2d2>
				phase = GPIO_PIN_RESET; // reverse direction
 80022aa:	4b68      	ldr	r3, [pc, #416]	@ (800244c <control_update+0x46c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e002      	b.n	80022b8 <control_update+0x2d8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80022b2:	4b66      	ldr	r3, [pc, #408]	@ (800244c <control_update+0x46c>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 80022b8:	4b64      	ldr	r3, [pc, #400]	@ (800244c <control_update+0x46c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	2101      	movs	r1, #1
 80022c2:	4865      	ldr	r0, [pc, #404]	@ (8002458 <control_update+0x478>)
 80022c4:	f002 fd4e 	bl	8004d64 <HAL_GPIO_WritePin>
   //End Timer 15


   //Timer 16
		// set the sign of the move (phase)
			if(cmd_ref[T16C1] < 0){
 80022c8:	4b62      	ldr	r3, [pc, #392]	@ (8002454 <control_update+0x474>)
 80022ca:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da03      	bge.n	80022da <control_update+0x2fa>
				phase = GPIO_PIN_RESET; // reverse direction
 80022d2:	4b5e      	ldr	r3, [pc, #376]	@ (800244c <control_update+0x46c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e002      	b.n	80022e0 <control_update+0x300>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80022da:	4b5c      	ldr	r3, [pc, #368]	@ (800244c <control_update+0x46c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80022e0:	4b5a      	ldr	r3, [pc, #360]	@ (800244c <control_update+0x46c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	2102      	movs	r1, #2
 80022ea:	485b      	ldr	r0, [pc, #364]	@ (8002458 <control_update+0x478>)
 80022ec:	f002 fd3a 	bl	8004d64 <HAL_GPIO_WritePin>


    //HRTIM CODE HERE **************
    //High Resolution Timer CHA
		// set the sign of the move (phase)
			if(cmd_ref[HRA1] < 0){
 80022f0:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <control_update+0x474>)
 80022f2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da03      	bge.n	8002302 <control_update+0x322>
				phase = GPIO_PIN_RESET; // reverse direction
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <control_update+0x46c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e002      	b.n	8002308 <control_update+0x328>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002302:	4b52      	ldr	r3, [pc, #328]	@ (800244c <control_update+0x46c>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8002308:	4b50      	ldr	r3, [pc, #320]	@ (800244c <control_update+0x46c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	2110      	movs	r1, #16
 8002312:	4851      	ldr	r0, [pc, #324]	@ (8002458 <control_update+0x478>)
 8002314:	f002 fd26 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRA2] < 0){
 8002318:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <control_update+0x474>)
 800231a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800231e:	2b00      	cmp	r3, #0
 8002320:	da03      	bge.n	800232a <control_update+0x34a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <control_update+0x46c>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e002      	b.n	8002330 <control_update+0x350>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800232a:	4b48      	ldr	r3, [pc, #288]	@ (800244c <control_update+0x46c>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8002330:	4b46      	ldr	r3, [pc, #280]	@ (800244c <control_update+0x46c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	2120      	movs	r1, #32
 800233a:	4847      	ldr	r0, [pc, #284]	@ (8002458 <control_update+0x478>)
 800233c:	f002 fd12 	bl	8004d64 <HAL_GPIO_WritePin>
    //End High HRTIM CHA

    //High Resolution Timer CHB
		// set the sign of the move (phase)
			if(cmd_ref[HRB1] < 0){
 8002340:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <control_update+0x474>)
 8002342:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	da03      	bge.n	8002352 <control_update+0x372>
				phase = GPIO_PIN_RESET; // reverse direction
 800234a:	4b40      	ldr	r3, [pc, #256]	@ (800244c <control_update+0x46c>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e002      	b.n	8002358 <control_update+0x378>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002352:	4b3e      	ldr	r3, [pc, #248]	@ (800244c <control_update+0x46c>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 8002358:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <control_update+0x46c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	2140      	movs	r1, #64	@ 0x40
 8002362:	483d      	ldr	r0, [pc, #244]	@ (8002458 <control_update+0x478>)
 8002364:	f002 fcfe 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRB2] < 0){
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <control_update+0x474>)
 800236a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800236e:	2b00      	cmp	r3, #0
 8002370:	da03      	bge.n	800237a <control_update+0x39a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002372:	4b36      	ldr	r3, [pc, #216]	@ (800244c <control_update+0x46c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e002      	b.n	8002380 <control_update+0x3a0>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800237a:	4b34      	ldr	r3, [pc, #208]	@ (800244c <control_update+0x46c>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <control_update+0x46c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	4833      	ldr	r0, [pc, #204]	@ (8002458 <control_update+0x478>)
 800238c:	f002 fcea 	bl	8004d64 <HAL_GPIO_WritePin>
    //End High HRTIM CHB

    //High Resolution Timer CHC
		// set the sign of the move (phase)
			if(cmd_ref[HRC1] < 0){
 8002390:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <control_update+0x474>)
 8002392:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	da03      	bge.n	80023a2 <control_update+0x3c2>
				phase = GPIO_PIN_RESET; // reverse direction
 800239a:	4b2c      	ldr	r3, [pc, #176]	@ (800244c <control_update+0x46c>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <control_update+0x3c8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <control_update+0x46c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 80023a8:	4b28      	ldr	r3, [pc, #160]	@ (800244c <control_update+0x46c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b4:	4828      	ldr	r0, [pc, #160]	@ (8002458 <control_update+0x478>)
 80023b6:	f002 fcd5 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRC2] < 0){
 80023ba:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <control_update+0x474>)
 80023bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da03      	bge.n	80023cc <control_update+0x3ec>
				phase = GPIO_PIN_RESET; // reverse direction
 80023c4:	4b21      	ldr	r3, [pc, #132]	@ (800244c <control_update+0x46c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e002      	b.n	80023d2 <control_update+0x3f2>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023cc:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <control_update+0x46c>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <control_update+0x46c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023de:	481e      	ldr	r0, [pc, #120]	@ (8002458 <control_update+0x478>)
 80023e0:	f002 fcc0 	bl	8004d64 <HAL_GPIO_WritePin>
    //End High HRTIM CHC

    //High Resolution Timer CHD
		// set the sign of the move (phase)
			if(cmd_ref[HRD1] < 0){
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <control_update+0x474>)
 80023e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da03      	bge.n	80023f6 <control_update+0x416>
				phase = GPIO_PIN_RESET; // reverse direction
 80023ee:	4b17      	ldr	r3, [pc, #92]	@ (800244c <control_update+0x46c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e002      	b.n	80023fc <control_update+0x41c>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <control_update+0x46c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <control_update+0x46c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002408:	4813      	ldr	r0, [pc, #76]	@ (8002458 <control_update+0x478>)
 800240a:	f002 fcab 	bl	8004d64 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRD2] < 0){
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <control_update+0x474>)
 8002410:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002414:	2b00      	cmp	r3, #0
 8002416:	da03      	bge.n	8002420 <control_update+0x440>
				phase = GPIO_PIN_RESET; // reverse direction
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <control_update+0x46c>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e002      	b.n	8002426 <control_update+0x446>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <control_update+0x46c>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <control_update+0x46c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002432:	4809      	ldr	r0, [pc, #36]	@ (8002458 <control_update+0x478>)
 8002434:	f002 fc96 	bl	8004d64 <HAL_GPIO_WritePin>
     //END HRTIM CODE


    //Low Power Timer
		// set the sign of the move (phase)
			if(cmd_ref[LPTIM] < 0){
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <control_update+0x474>)
 800243a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	da0c      	bge.n	800245c <control_update+0x47c>
				phase = GPIO_PIN_RESET; // reverse direction
 8002442:	4b02      	ldr	r3, [pc, #8]	@ (800244c <control_update+0x46c>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e00b      	b.n	8002462 <control_update+0x482>
 800244a:	bf00      	nop
 800244c:	2400000c 	.word	0x2400000c
 8002450:	58021000 	.word	0x58021000
 8002454:	24003e04 	.word	0x24003e04
 8002458:	58020c00 	.word	0x58020c00
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800245c:	4bcc      	ldr	r3, [pc, #816]	@ (8002790 <control_update+0x7b0>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8002462:	4bcb      	ldr	r3, [pc, #812]	@ (8002790 <control_update+0x7b0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	2104      	movs	r1, #4
 800246c:	48c9      	ldr	r0, [pc, #804]	@ (8002794 <control_update+0x7b4>)
 800246e:	f002 fc79 	bl	8004d64 <HAL_GPIO_WritePin>

//	}

	//Timer 1
	// calculate the dutycycle
	absref = fabs(cmd_ref[T1C1]); // duty cycle must be positive
 8002472:	4bc9      	ldr	r3, [pc, #804]	@ (8002798 <control_update+0x7b8>)
 8002474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002480:	eeb0 7bc7 	vabs.f64	d7, d7
 8002484:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002488:	ed97 7b02 	vldr	d7, [r7, #8]
 800248c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002490:	ee17 3a90 	vmov	r3, s15
 8002494:	b29b      	uxth	r3, r3
 8002496:	ed9f 7bbc 	vldr	d7, [pc, #752]	@ 8002788 <control_update+0x7a8>
 800249a:	eeb0 0b47 	vmov.f64	d0, d7
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fbb2 	bl	8002c08 <calc_dutycycle>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4bbc      	ldr	r3, [pc, #752]	@ (800279c <control_update+0x7bc>)
 80024aa:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 80024ac:	4bbb      	ldr	r3, [pc, #748]	@ (800279c <control_update+0x7bc>)
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	4bbb      	ldr	r3, [pc, #748]	@ (80027a0 <control_update+0x7c0>)
 80024b2:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T1C2]); // duty cycle must be positive
 80024b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002798 <control_update+0x7b8>)
 80024b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024c2:	eeb0 7bc7 	vabs.f64	d7, d7
 80024c6:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80024ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80024ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024d2:	ee17 3a90 	vmov	r3, s15
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	ed9f 7bab 	vldr	d7, [pc, #684]	@ 8002788 <control_update+0x7a8>
 80024dc:	eeb0 0b47 	vmov.f64	d0, d7
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fb91 	bl	8002c08 <calc_dutycycle>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4bac      	ldr	r3, [pc, #688]	@ (800279c <control_update+0x7bc>)
 80024ec:	801a      	strh	r2, [r3, #0]
		TIM1->CCR2 = dutycycle;
 80024ee:	4bab      	ldr	r3, [pc, #684]	@ (800279c <control_update+0x7bc>)
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	4bab      	ldr	r3, [pc, #684]	@ (80027a0 <control_update+0x7c0>)
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T1C3]); // duty cycle must be positive
 80024f6:	4ba8      	ldr	r3, [pc, #672]	@ (8002798 <control_update+0x7b8>)
 80024f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002504:	eeb0 7bc7 	vabs.f64	d7, d7
 8002508:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800250c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002510:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002514:	ee17 3a90 	vmov	r3, s15
 8002518:	b29b      	uxth	r3, r3
 800251a:	ed9f 7b9b 	vldr	d7, [pc, #620]	@ 8002788 <control_update+0x7a8>
 800251e:	eeb0 0b47 	vmov.f64	d0, d7
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fb70 	bl	8002c08 <calc_dutycycle>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	4b9b      	ldr	r3, [pc, #620]	@ (800279c <control_update+0x7bc>)
 800252e:	801a      	strh	r2, [r3, #0]
		TIM1->CCR3 = dutycycle;
 8002530:	4b9a      	ldr	r3, [pc, #616]	@ (800279c <control_update+0x7bc>)
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	4b9a      	ldr	r3, [pc, #616]	@ (80027a0 <control_update+0x7c0>)
 8002536:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T1C4]); // duty cycle must be positive
 8002538:	4b97      	ldr	r3, [pc, #604]	@ (8002798 <control_update+0x7b8>)
 800253a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002546:	eeb0 7bc7 	vabs.f64	d7, d7
 800254a:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800254e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002552:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002556:	ee17 3a90 	vmov	r3, s15
 800255a:	b29b      	uxth	r3, r3
 800255c:	ed9f 7b8a 	vldr	d7, [pc, #552]	@ 8002788 <control_update+0x7a8>
 8002560:	eeb0 0b47 	vmov.f64	d0, d7
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fb4f 	bl	8002c08 <calc_dutycycle>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	4b8b      	ldr	r3, [pc, #556]	@ (800279c <control_update+0x7bc>)
 8002570:	801a      	strh	r2, [r3, #0]
		TIM1->CCR4 = dutycycle;
 8002572:	4b8a      	ldr	r3, [pc, #552]	@ (800279c <control_update+0x7bc>)
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	4b8a      	ldr	r3, [pc, #552]	@ (80027a0 <control_update+0x7c0>)
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 1


	//Timer 2
	absref = fabs(cmd_ref[T2C1]); // duty cycle must be positive
 800257a:	4b87      	ldr	r3, [pc, #540]	@ (8002798 <control_update+0x7b8>)
 800257c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002588:	eeb0 7bc7 	vabs.f64	d7, d7
 800258c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002590:	ed97 7b02 	vldr	d7, [r7, #8]
 8002594:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002598:	ee17 3a90 	vmov	r3, s15
 800259c:	b29b      	uxth	r3, r3
 800259e:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 8002788 <control_update+0x7a8>
 80025a2:	eeb0 0b47 	vmov.f64	d0, d7
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb2e 	bl	8002c08 <calc_dutycycle>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b7a      	ldr	r3, [pc, #488]	@ (800279c <control_update+0x7bc>)
 80025b2:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = dutycycle;
 80025b4:	4b79      	ldr	r3, [pc, #484]	@ (800279c <control_update+0x7bc>)
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025bc:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 2


	//Timer 4
	absref = fabs(cmd_ref[T4C1]); // duty cycle must be positive
 80025be:	4b76      	ldr	r3, [pc, #472]	@ (8002798 <control_update+0x7b8>)
 80025c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025cc:	eeb0 7bc7 	vabs.f64	d7, d7
 80025d0:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80025d4:	ed97 7b02 	vldr	d7, [r7, #8]
 80025d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025dc:	ee17 3a90 	vmov	r3, s15
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	ed9f 7b69 	vldr	d7, [pc, #420]	@ 8002788 <control_update+0x7a8>
 80025e6:	eeb0 0b47 	vmov.f64	d0, d7
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fb0c 	bl	8002c08 <calc_dutycycle>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b69      	ldr	r3, [pc, #420]	@ (800279c <control_update+0x7bc>)
 80025f6:	801a      	strh	r2, [r3, #0]
		TIM4->CCR1 = dutycycle;
 80025f8:	4b68      	ldr	r3, [pc, #416]	@ (800279c <control_update+0x7bc>)
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	4b69      	ldr	r3, [pc, #420]	@ (80027a4 <control_update+0x7c4>)
 80025fe:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T4C2]); // duty cycle must be positive
 8002600:	4b65      	ldr	r3, [pc, #404]	@ (8002798 <control_update+0x7b8>)
 8002602:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800260e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002612:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002616:	ed97 7b02 	vldr	d7, [r7, #8]
 800261a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800261e:	ee17 3a90 	vmov	r3, s15
 8002622:	b29b      	uxth	r3, r3
 8002624:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8002788 <control_update+0x7a8>
 8002628:	eeb0 0b47 	vmov.f64	d0, d7
 800262c:	4618      	mov	r0, r3
 800262e:	f000 faeb 	bl	8002c08 <calc_dutycycle>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b59      	ldr	r3, [pc, #356]	@ (800279c <control_update+0x7bc>)
 8002638:	801a      	strh	r2, [r3, #0]
		TIM4->CCR2 = dutycycle;
 800263a:	4b58      	ldr	r3, [pc, #352]	@ (800279c <control_update+0x7bc>)
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	4b59      	ldr	r3, [pc, #356]	@ (80027a4 <control_update+0x7c4>)
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T4C3]); // duty cycle must be positive
 8002642:	4b55      	ldr	r3, [pc, #340]	@ (8002798 <control_update+0x7b8>)
 8002644:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002650:	eeb0 7bc7 	vabs.f64	d7, d7
 8002654:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002658:	ed97 7b02 	vldr	d7, [r7, #8]
 800265c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002660:	ee17 3a90 	vmov	r3, s15
 8002664:	b29b      	uxth	r3, r3
 8002666:	ed9f 7b48 	vldr	d7, [pc, #288]	@ 8002788 <control_update+0x7a8>
 800266a:	eeb0 0b47 	vmov.f64	d0, d7
 800266e:	4618      	mov	r0, r3
 8002670:	f000 faca 	bl	8002c08 <calc_dutycycle>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4b48      	ldr	r3, [pc, #288]	@ (800279c <control_update+0x7bc>)
 800267a:	801a      	strh	r2, [r3, #0]
		TIM4->CCR3 = dutycycle;
 800267c:	4b47      	ldr	r3, [pc, #284]	@ (800279c <control_update+0x7bc>)
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <control_update+0x7c4>)
 8002682:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T4C4]); // duty cycle must be positive
 8002684:	4b44      	ldr	r3, [pc, #272]	@ (8002798 <control_update+0x7b8>)
 8002686:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002692:	eeb0 7bc7 	vabs.f64	d7, d7
 8002696:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800269a:	ed97 7b02 	vldr	d7, [r7, #8]
 800269e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026a2:	ee17 3a90 	vmov	r3, s15
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8002788 <control_update+0x7a8>
 80026ac:	eeb0 0b47 	vmov.f64	d0, d7
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 faa9 	bl	8002c08 <calc_dutycycle>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b38      	ldr	r3, [pc, #224]	@ (800279c <control_update+0x7bc>)
 80026bc:	801a      	strh	r2, [r3, #0]
		TIM4->CCR4 = dutycycle;
 80026be:	4b37      	ldr	r3, [pc, #220]	@ (800279c <control_update+0x7bc>)
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <control_update+0x7c4>)
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 4


	//Timer 5
	absref = fabs(cmd_ref[T5C2]); // duty cycle must be positive
 80026c6:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <control_update+0x7b8>)
 80026c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026d4:	eeb0 7bc7 	vabs.f64	d7, d7
 80026d8:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80026e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026e4:	ee17 3a90 	vmov	r3, s15
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8002788 <control_update+0x7a8>
 80026ee:	eeb0 0b47 	vmov.f64	d0, d7
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fa88 	bl	8002c08 <calc_dutycycle>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b27      	ldr	r3, [pc, #156]	@ (800279c <control_update+0x7bc>)
 80026fe:	801a      	strh	r2, [r3, #0]
		TIM5->CCR2 = dutycycle;
 8002700:	4b26      	ldr	r3, [pc, #152]	@ (800279c <control_update+0x7bc>)
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <control_update+0x7c8>)
 8002706:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T5C3]); // duty cycle must be positive
 8002708:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <control_update+0x7b8>)
 800270a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002716:	eeb0 7bc7 	vabs.f64	d7, d7
 800271a:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800271e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002722:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002726:	ee17 3a90 	vmov	r3, s15
 800272a:	b29b      	uxth	r3, r3
 800272c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002788 <control_update+0x7a8>
 8002730:	eeb0 0b47 	vmov.f64	d0, d7
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa67 	bl	8002c08 <calc_dutycycle>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <control_update+0x7bc>)
 8002740:	801a      	strh	r2, [r3, #0]
		TIM5->CCR3 = dutycycle;
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <control_update+0x7bc>)
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <control_update+0x7c8>)
 8002748:	63da      	str	r2, [r3, #60]	@ 0x3c
	//End Timer 5


	//Timer 8
	absref = fabs(cmd_ref[T8C4]); // duty cycle must be positive
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <control_update+0x7b8>)
 800274c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002758:	eeb0 7bc7 	vabs.f64	d7, d7
 800275c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002760:	ed97 7b02 	vldr	d7, [r7, #8]
 8002764:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002768:	ee17 3a90 	vmov	r3, s15
 800276c:	b29b      	uxth	r3, r3
 800276e:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8002788 <control_update+0x7a8>
 8002772:	eeb0 0b47 	vmov.f64	d0, d7
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fa46 	bl	8002c08 <calc_dutycycle>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <control_update+0x7bc>)
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	e012      	b.n	80027ac <control_update+0x7cc>
 8002786:	bf00      	nop
 8002788:	cccccccd 	.word	0xcccccccd
 800278c:	3ffccccc 	.word	0x3ffccccc
 8002790:	2400000c 	.word	0x2400000c
 8002794:	58020c00 	.word	0x58020c00
 8002798:	24003e04 	.word	0x24003e04
 800279c:	24003e50 	.word	0x24003e50
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
		TIM8->CCR4 = dutycycle;
 80027ac:	4bce      	ldr	r3, [pc, #824]	@ (8002ae8 <control_update+0xb08>)
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	4bce      	ldr	r3, [pc, #824]	@ (8002aec <control_update+0xb0c>)
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 8


	//Timer 12
	absref = fabs(cmd_ref[T12C2]); // duty cycle must be positive
 80027b4:	4bce      	ldr	r3, [pc, #824]	@ (8002af0 <control_update+0xb10>)
 80027b6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027c2:	eeb0 7bc7 	vabs.f64	d7, d7
 80027c6:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80027ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027d2:	ee17 3a90 	vmov	r3, s15
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ed9f 7bc1 	vldr	d7, [pc, #772]	@ 8002ae0 <control_update+0xb00>
 80027dc:	eeb0 0b47 	vmov.f64	d0, d7
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fa11 	bl	8002c08 <calc_dutycycle>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4bbf      	ldr	r3, [pc, #764]	@ (8002ae8 <control_update+0xb08>)
 80027ec:	801a      	strh	r2, [r3, #0]
		TIM12->CCR2 = dutycycle;
 80027ee:	4bbe      	ldr	r3, [pc, #760]	@ (8002ae8 <control_update+0xb08>)
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	4bc0      	ldr	r3, [pc, #768]	@ (8002af4 <control_update+0xb14>)
 80027f4:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 12


	//Timer 13
	absref = fabs(cmd_ref[T13C1]); // duty cycle must be positive
 80027f6:	4bbe      	ldr	r3, [pc, #760]	@ (8002af0 <control_update+0xb10>)
 80027f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002804:	eeb0 7bc7 	vabs.f64	d7, d7
 8002808:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800280c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002810:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002814:	ee17 3a90 	vmov	r3, s15
 8002818:	b29b      	uxth	r3, r3
 800281a:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8002ae0 <control_update+0xb00>
 800281e:	eeb0 0b47 	vmov.f64	d0, d7
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f9f0 	bl	8002c08 <calc_dutycycle>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	4bae      	ldr	r3, [pc, #696]	@ (8002ae8 <control_update+0xb08>)
 800282e:	801a      	strh	r2, [r3, #0]
		TIM13->CCR1 = dutycycle;
 8002830:	4bad      	ldr	r3, [pc, #692]	@ (8002ae8 <control_update+0xb08>)
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	4bb0      	ldr	r3, [pc, #704]	@ (8002af8 <control_update+0xb18>)
 8002836:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 13


	//Timer 14
	absref = fabs(cmd_ref[T14C1]); // duty cycle must be positive
 8002838:	4bad      	ldr	r3, [pc, #692]	@ (8002af0 <control_update+0xb10>)
 800283a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002846:	eeb0 7bc7 	vabs.f64	d7, d7
 800284a:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800284e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002852:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002856:	ee17 3a90 	vmov	r3, s15
 800285a:	b29b      	uxth	r3, r3
 800285c:	ed9f 7ba0 	vldr	d7, [pc, #640]	@ 8002ae0 <control_update+0xb00>
 8002860:	eeb0 0b47 	vmov.f64	d0, d7
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f9cf 	bl	8002c08 <calc_dutycycle>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ae8 <control_update+0xb08>)
 8002870:	801a      	strh	r2, [r3, #0]
		TIM14->CCR1 = dutycycle;
 8002872:	4b9d      	ldr	r3, [pc, #628]	@ (8002ae8 <control_update+0xb08>)
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	4ba1      	ldr	r3, [pc, #644]	@ (8002afc <control_update+0xb1c>)
 8002878:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 14


	//Timer 15
	absref = fabs(cmd_ref[T15C1]); // duty cycle must be positive
 800287a:	4b9d      	ldr	r3, [pc, #628]	@ (8002af0 <control_update+0xb10>)
 800287c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002888:	eeb0 7bc7 	vabs.f64	d7, d7
 800288c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002890:	ed97 7b02 	vldr	d7, [r7, #8]
 8002894:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002898:	ee17 3a90 	vmov	r3, s15
 800289c:	b29b      	uxth	r3, r3
 800289e:	ed9f 7b90 	vldr	d7, [pc, #576]	@ 8002ae0 <control_update+0xb00>
 80028a2:	eeb0 0b47 	vmov.f64	d0, d7
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f9ae 	bl	8002c08 <calc_dutycycle>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae8 <control_update+0xb08>)
 80028b2:	801a      	strh	r2, [r3, #0]
		TIM15->CCR1 = dutycycle;
 80028b4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ae8 <control_update+0xb08>)
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	4b91      	ldr	r3, [pc, #580]	@ (8002b00 <control_update+0xb20>)
 80028ba:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T15C2]); // duty cycle must be positive
 80028bc:	4b8c      	ldr	r3, [pc, #560]	@ (8002af0 <control_update+0xb10>)
 80028be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028ca:	eeb0 7bc7 	vabs.f64	d7, d7
 80028ce:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80028d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80028d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028da:	ee17 3a90 	vmov	r3, s15
 80028de:	b29b      	uxth	r3, r3
 80028e0:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 8002ae0 <control_update+0xb00>
 80028e4:	eeb0 0b47 	vmov.f64	d0, d7
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f98d 	bl	8002c08 <calc_dutycycle>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <control_update+0xb08>)
 80028f4:	801a      	strh	r2, [r3, #0]
		TIM15->CCR2 = dutycycle;
 80028f6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ae8 <control_update+0xb08>)
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	4b81      	ldr	r3, [pc, #516]	@ (8002b00 <control_update+0xb20>)
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 15


	//Timer 16
	absref = fabs(cmd_ref[T16C1]); // duty cycle must be positive
 80028fe:	4b7c      	ldr	r3, [pc, #496]	@ (8002af0 <control_update+0xb10>)
 8002900:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800290c:	eeb0 7bc7 	vabs.f64	d7, d7
 8002910:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002914:	ed97 7b02 	vldr	d7, [r7, #8]
 8002918:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800291c:	ee17 3a90 	vmov	r3, s15
 8002920:	b29b      	uxth	r3, r3
 8002922:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8002ae0 <control_update+0xb00>
 8002926:	eeb0 0b47 	vmov.f64	d0, d7
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f96c 	bl	8002c08 <calc_dutycycle>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <control_update+0xb08>)
 8002936:	801a      	strh	r2, [r3, #0]
		TIM16->CCR1 = dutycycle;
 8002938:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae8 <control_update+0xb08>)
 800293a:	881a      	ldrh	r2, [r3, #0]
 800293c:	4b71      	ldr	r3, [pc, #452]	@ (8002b04 <control_update+0xb24>)
 800293e:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 16


	//HRTIM CODE GOES HERE ********
	//HRTIM CHA
	absref = fabs(cmd_ref[HRA1]); // duty cycle must be positive
 8002940:	4b6b      	ldr	r3, [pc, #428]	@ (8002af0 <control_update+0xb10>)
 8002942:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800294e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002952:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002956:	ed97 7b02 	vldr	d7, [r7, #8]
 800295a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800295e:	ee17 3a90 	vmov	r3, s15
 8002962:	b29b      	uxth	r3, r3
 8002964:	ed9f 7b5e 	vldr	d7, [pc, #376]	@ 8002ae0 <control_update+0xb00>
 8002968:	eeb0 0b47 	vmov.f64	d0, d7
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f94b 	bl	8002c08 <calc_dutycycle>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae8 <control_update+0xb08>)
 8002978:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 800297a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae8 <control_update+0xb08>)
 800297c:	881a      	ldrh	r2, [r3, #0]
 800297e:	4b62      	ldr	r3, [pc, #392]	@ (8002b08 <control_update+0xb28>)
 8002980:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	absref = fabs(cmd_ref[HRA2]); // duty cycle must be positive
 8002984:	4b5a      	ldr	r3, [pc, #360]	@ (8002af0 <control_update+0xb10>)
 8002986:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002992:	eeb0 7bc7 	vabs.f64	d7, d7
 8002996:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800299a:	ed97 7b02 	vldr	d7, [r7, #8]
 800299e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029a2:	ee17 3a90 	vmov	r3, s15
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8002ae0 <control_update+0xb00>
 80029ac:	eeb0 0b47 	vmov.f64	d0, d7
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f929 	bl	8002c08 <calc_dutycycle>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae8 <control_update+0xb08>)
 80029bc:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <control_update+0xb08>)
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	4b51      	ldr	r3, [pc, #324]	@ (8002b08 <control_update+0xb28>)
 80029c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//End HRTIM CHA

	//HRTIM CHB
	absref = fabs(cmd_ref[HRB1]); // duty cycle must be positive
 80029c8:	4b49      	ldr	r3, [pc, #292]	@ (8002af0 <control_update+0xb10>)
 80029ca:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029d6:	eeb0 7bc7 	vabs.f64	d7, d7
 80029da:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029de:	ed97 7b02 	vldr	d7, [r7, #8]
 80029e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029e6:	ee17 3a90 	vmov	r3, s15
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8002ae0 <control_update+0xb00>
 80029f0:	eeb0 0b47 	vmov.f64	d0, d7
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f907 	bl	8002c08 <calc_dutycycle>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae8 <control_update+0xb08>)
 8002a00:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <control_update+0xb08>)
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	4b40      	ldr	r3, [pc, #256]	@ (8002b08 <control_update+0xb28>)
 8002a08:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

	absref = fabs(cmd_ref[HRB2]); // duty cycle must be positive
 8002a0c:	4b38      	ldr	r3, [pc, #224]	@ (8002af0 <control_update+0xb10>)
 8002a0e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a1e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a22:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a2a:	ee17 3a90 	vmov	r3, s15
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8002ae0 <control_update+0xb00>
 8002a34:	eeb0 0b47 	vmov.f64	d0, d7
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f8e5 	bl	8002c08 <calc_dutycycle>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <control_update+0xb08>)
 8002a44:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8002a46:	4b28      	ldr	r3, [pc, #160]	@ (8002ae8 <control_update+0xb08>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <control_update+0xb28>)
 8002a4c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	//End HRTIM CHB

	//HRTIM CHC
	absref = fabs(cmd_ref[HRC1]); // duty cycle must be positive
 8002a50:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <control_update+0xb10>)
 8002a52:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a62:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a66:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a6e:	ee17 3a90 	vmov	r3, s15
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8002ae0 <control_update+0xb00>
 8002a78:	eeb0 0b47 	vmov.f64	d0, d7
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f8c3 	bl	8002c08 <calc_dutycycle>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <control_update+0xb08>)
 8002a88:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8002a8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <control_update+0xb08>)
 8002a8c:	881a      	ldrh	r2, [r3, #0]
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <control_update+0xb28>)
 8002a90:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

	absref = fabs(cmd_ref[HRC2]); // duty cycle must be positive
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <control_update+0xb10>)
 8002a96:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002aa2:	eeb0 7bc7 	vabs.f64	d7, d7
 8002aa6:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002aaa:	ed97 7b02 	vldr	d7, [r7, #8]
 8002aae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ab2:	ee17 3a90 	vmov	r3, s15
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8002ae0 <control_update+0xb00>
 8002abc:	eeb0 0b47 	vmov.f64	d0, d7
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f8a1 	bl	8002c08 <calc_dutycycle>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <control_update+0xb08>)
 8002acc:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <control_update+0xb08>)
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <control_update+0xb28>)
 8002ad4:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 8002ad8:	e018      	b.n	8002b0c <control_update+0xb2c>
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w
 8002ae0:	cccccccd 	.word	0xcccccccd
 8002ae4:	3ffccccc 	.word	0x3ffccccc
 8002ae8:	24003e50 	.word	0x24003e50
 8002aec:	40010400 	.word	0x40010400
 8002af0:	24003e04 	.word	0x24003e04
 8002af4:	40001800 	.word	0x40001800
 8002af8:	40001c00 	.word	0x40001c00
 8002afc:	40002000 	.word	0x40002000
 8002b00:	40014000 	.word	0x40014000
 8002b04:	40014400 	.word	0x40014400
 8002b08:	40017400 	.word	0x40017400
	//End HRTIM CHC

	//HRTIM CHD
	absref = fabs(cmd_ref[HRD1]); // duty cycle must be positive
 8002b0c:	4b38      	ldr	r3, [pc, #224]	@ (8002bf0 <control_update+0xc10>)
 8002b0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8002b1e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002b22:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b2a:	ee17 3a90 	vmov	r3, s15
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8002be8 <control_update+0xc08>
 8002b34:	eeb0 0b47 	vmov.f64	d0, d7
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f865 	bl	8002c08 <calc_dutycycle>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <control_update+0xc14>)
 8002b44:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8002b46:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf4 <control_update+0xc14>)
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <control_update+0xc18>)
 8002b4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	absref = fabs(cmd_ref[HRD2]); // duty cycle must be positive
 8002b50:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <control_update+0xc10>)
 8002b52:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002b62:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002b66:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b6e:	ee17 3a90 	vmov	r3, s15
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8002be8 <control_update+0xc08>
 8002b78:	eeb0 0b47 	vmov.f64	d0, d7
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f843 	bl	8002c08 <calc_dutycycle>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <control_update+0xc14>)
 8002b88:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <control_update+0xc14>)
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <control_update+0xc18>)
 8002b90:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	//End HRTIM CHD
	//END HRTIM CODE HERE


	//LPTIM1
	absref = fabs(cmd_ref[LPTIM]); // duty cycle must be positive
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <control_update+0xc10>)
 8002b96:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ba2:	eeb0 7bc7 	vabs.f64	d7, d7
 8002ba6:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002baa:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bb2:	ee17 3a90 	vmov	r3, s15
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002be8 <control_update+0xc08>
 8002bbc:	eeb0 0b47 	vmov.f64	d0, d7
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f821 	bl	8002c08 <calc_dutycycle>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <control_update+0xc14>)
 8002bcc:	801a      	strh	r2, [r3, #0]
		LPTIM1->CMP = dutycycle/2;
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <control_update+0xc14>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <control_update+0xc1c>)
 8002bd8:	615a      	str	r2, [r3, #20]
	//End LPTIM1

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <control_update+0xc20>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	cccccccd 	.word	0xcccccccd
 8002bec:	3ffccccc 	.word	0x3ffccccc
 8002bf0:	24003e04 	.word	0x24003e04
 8002bf4:	24003e50 	.word	0x24003e50
 8002bf8:	40017400 	.word	0x40017400
 8002bfc:	40002400 	.word	0x40002400
 8002c00:	240006a4 	.word	0x240006a4
 8002c04:	00000000 	.word	0x00000000

08002c08 <calc_dutycycle>:


static uint16_t calc_dutycycle(uint16_t cmd, double vss)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	ed87 0b00 	vstr	d0, [r7]
 8002c14:	81fb      	strh	r3, [r7, #14]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8002c16:	2300      	movs	r3, #0
 8002c18:	83fb      	strh	r3, [r7, #30]
	double scale = 1.8/15000;
 8002c1a:	a317      	add	r3, pc, #92	@ (adr r3, 8002c78 <calc_dutycycle+0x70>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	e9c7 2304 	strd	r2, r3, [r7, #16]


	dc = (uint16_t)((cmd*scale)/vss * (double)PERIOD);
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002c2e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c32:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002c36:	ed97 6b00 	vldr	d6, [r7]
 8002c3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c3e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002c70 <calc_dutycycle+0x68>
 8002c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c4a:	ee17 3a90 	vmov	r3, s15
 8002c4e:	83fb      	strh	r3, [r7, #30]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002c50:	8bfb      	ldrh	r3, [r7, #30]
 8002c52:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d902      	bls.n	8002c60 <calc_dutycycle+0x58>
 8002c5a:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8002c5e:	83fb      	strh	r3, [r7, #30]

	return dc;
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	@ 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	00000000 	.word	0x00000000
 8002c74:	40d76fc0 	.word	0x40d76fc0
 8002c78:	4d551d69 	.word	0x4d551d69
 8002c7c:	3f1f7510 	.word	0x3f1f7510

08002c80 <gen_sine>:

static void gen_sine(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
	int i = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8002c8a:	a316      	add	r3, pc, #88	@ (adr r3, 8002ce4 <gen_sine+0x64>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e017      	b.n	8002cca <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002ca4:	ed97 7b00 	vldr	d7, [r7]
 8002ca8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cac:	eeb0 0b47 	vmov.f64	d0, d7
 8002cb0:	f00c fefa 	bl	800faa8 <sin>
 8002cb4:	eeb0 7b40 	vmov.f64	d7, d0
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <gen_sine+0x60>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cd0:	dbe3      	blt.n	8002c9a <gen_sine+0x1a>
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	240006b0 	.word	0x240006b0
 8002ce4:	b68b71c3 	.word	0xb68b71c3
 8002ce8:	3f79bc65 	.word	0x3f79bc65

08002cec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002cfe:	f001 f8a5 	bl	8003e4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002d0e:	231f      	movs	r3, #31
 8002d10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002d12:	2387      	movs	r3, #135	@ 0x87
 8002d14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002d22:	2301      	movs	r3, #1
 8002d24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d2e:	463b      	mov	r3, r7
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f8c3 	bl	8003ebc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d36:	2004      	movs	r0, #4
 8002d38:	f001 f8a0 	bl	8003e7c <HAL_MPU_Enable>

}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <Error_Handler+0x8>

08002d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_MspInit+0x30>)
 8002d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d5c:	4a08      	ldr	r2, [pc, #32]	@ (8002d80 <HAL_MspInit+0x30>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_MspInit+0x30>)
 8002d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	58024400 	.word	0x58024400

08002d84 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0b4      	sub	sp, #208	@ 0xd0
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	22c0      	movs	r2, #192	@ 0xc0
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f00a ffd0 	bl	800dd3a <memset>
  if(hhrtim->Instance==HRTIM1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <HAL_HRTIM_MspInit+0x6c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d121      	bne.n	8002de8 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 fd4a 	bl	8007854 <HAL_RCCEx_PeriphCLKConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002dc6:	f7ff ffbd 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <HAL_HRTIM_MspInit+0x70>)
 8002dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd0:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_HRTIM_MspInit+0x70>)
 8002dd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_HRTIM_MspInit+0x70>)
 8002ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002de8:	bf00      	nop
 8002dea:	37d0      	adds	r7, #208	@ 0xd0
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40017400 	.word	0x40017400
 8002df4:	58024400 	.word	0x58024400

08002df8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <HAL_HRTIM_MspPostInit+0xac>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d13f      	bne.n	8002e9a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e20:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002e56:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	480e      	ldr	r0, [pc, #56]	@ (8002eac <HAL_HRTIM_MspPostInit+0xb4>)
 8002e74:	f001 fdc6 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e78:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002e7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	4806      	ldr	r0, [pc, #24]	@ (8002eb0 <HAL_HRTIM_MspPostInit+0xb8>)
 8002e96:	f001 fdb5 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	3728      	adds	r7, #40	@ 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40017400 	.word	0x40017400
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	58020800 	.word	0x58020800
 8002eb0:	58020000 	.word	0x58020000

08002eb4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	22c0      	movs	r2, #192	@ 0xc0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f00a ff30 	bl	800dd3a <memset>
  if(hlptim->Instance==LPTIM1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_LPTIM_MspInit+0xd8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d14e      	bne.n	8002f82 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002ee4:	f04f 0220 	mov.w	r2, #32
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 fcaa 	bl	8007854 <HAL_RCCEx_PeriphCLKConfig>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8002f06:	f7ff ff1d 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002f0a:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_LPTIM_MspInit+0xdc>)
 8002f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f10:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <HAL_LPTIM_MspInit+0xdc>)
 8002f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <HAL_LPTIM_MspInit+0xdc>)
 8002f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_LPTIM_MspInit+0xdc>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f2e:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <HAL_LPTIM_MspInit+0xdc>)
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f38:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <HAL_LPTIM_MspInit+0xdc>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4809      	ldr	r0, [pc, #36]	@ (8002f94 <HAL_LPTIM_MspInit+0xe0>)
 8002f6e:	f001 fd49 	bl	8004a04 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	205d      	movs	r0, #93	@ 0x5d
 8002f78:	f000 ff33 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002f7c:	205d      	movs	r0, #93	@ 0x5d
 8002f7e:	f000 ff4a 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002f82:	bf00      	nop
 8002f84:	37e8      	adds	r7, #232	@ 0xe8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40002400 	.word	0x40002400
 8002f90:	58024400 	.word	0x58024400
 8002f94:	58020c00 	.word	0x58020c00

08002f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	@ 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a99      	ldr	r2, [pc, #612]	@ (800320c <HAL_TIM_Base_MspInit+0x274>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d117      	bne.n	8002fda <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002faa:	4b99      	ldr	r3, [pc, #612]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8002fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb0:	4a97      	ldr	r2, [pc, #604]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fba:	4b95      	ldr	r3, [pc, #596]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8002fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2019      	movs	r0, #25
 8002fce:	f000 ff08 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002fd2:	2019      	movs	r0, #25
 8002fd4:	f000 ff1f 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002fd8:	e113      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe2:	d117      	bne.n	8003014 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8002fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fea:	4a89      	ldr	r2, [pc, #548]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ff4:	4b86      	ldr	r3, [pc, #536]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8002ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	201c      	movs	r0, #28
 8003008:	f000 feeb 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800300c:	201c      	movs	r0, #28
 800300e:	f000 ff02 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8003012:	e0f6      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a7e      	ldr	r2, [pc, #504]	@ (8003214 <HAL_TIM_Base_MspInit+0x27c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d117      	bne.n	800304e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800301e:	4b7c      	ldr	r3, [pc, #496]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003024:	4a7a      	ldr	r2, [pc, #488]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800302e:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	201e      	movs	r0, #30
 8003042:	f000 fece 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003046:	201e      	movs	r0, #30
 8003048:	f000 fee5 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 800304c:	e0d9      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a71      	ldr	r2, [pc, #452]	@ (8003218 <HAL_TIM_Base_MspInit+0x280>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d117      	bne.n	8003088 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003058:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 800305a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800305e:	4a6c      	ldr	r2, [pc, #432]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003068:	4b69      	ldr	r3, [pc, #420]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 800306a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2032      	movs	r0, #50	@ 0x32
 800307c:	f000 feb1 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003080:	2032      	movs	r0, #50	@ 0x32
 8003082:	f000 fec8 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8003086:	e0bc      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a63      	ldr	r2, [pc, #396]	@ (800321c <HAL_TIM_Base_MspInit+0x284>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d127      	bne.n	80030e2 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003092:	4b5f      	ldr	r3, [pc, #380]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003098:	4a5d      	ldr	r2, [pc, #372]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80030a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	202b      	movs	r0, #43	@ 0x2b
 80030b6:	f000 fe94 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80030ba:	202b      	movs	r0, #43	@ 0x2b
 80030bc:	f000 feab 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2100      	movs	r1, #0
 80030c4:	202c      	movs	r0, #44	@ 0x2c
 80030c6:	f000 fe8c 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80030ca:	202c      	movs	r0, #44	@ 0x2c
 80030cc:	f000 fea3 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2100      	movs	r1, #0
 80030d4:	202d      	movs	r0, #45	@ 0x2d
 80030d6:	f000 fe84 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80030da:	202d      	movs	r0, #45	@ 0x2d
 80030dc:	f000 fe9b 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 80030e0:	e08f      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003220 <HAL_TIM_Base_MspInit+0x288>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d117      	bne.n	800311c <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030ec:	4b48      	ldr	r3, [pc, #288]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80030ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030f2:	4a47      	ldr	r2, [pc, #284]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80030f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030fc:	4b44      	ldr	r3, [pc, #272]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80030fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	202b      	movs	r0, #43	@ 0x2b
 8003110:	f000 fe67 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003114:	202b      	movs	r0, #43	@ 0x2b
 8003116:	f000 fe7e 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 800311a:	e072      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a40      	ldr	r2, [pc, #256]	@ (8003224 <HAL_TIM_Base_MspInit+0x28c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d117      	bne.n	8003156 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003126:	4b3a      	ldr	r3, [pc, #232]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800312c:	4a38      	ldr	r2, [pc, #224]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003136:	4b36      	ldr	r3, [pc, #216]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800313c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	202c      	movs	r0, #44	@ 0x2c
 800314a:	f000 fe4a 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800314e:	202c      	movs	r0, #44	@ 0x2c
 8003150:	f000 fe61 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8003154:	e055      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a33      	ldr	r2, [pc, #204]	@ (8003228 <HAL_TIM_Base_MspInit+0x290>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d117      	bne.n	8003190 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003166:	4a2a      	ldr	r2, [pc, #168]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003170:	4b27      	ldr	r3, [pc, #156]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 8003172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	202d      	movs	r0, #45	@ 0x2d
 8003184:	f000 fe2d 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003188:	202d      	movs	r0, #45	@ 0x2d
 800318a:	f000 fe44 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 800318e:	e038      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a25      	ldr	r2, [pc, #148]	@ (800322c <HAL_TIM_Base_MspInit+0x294>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d117      	bne.n	80031ca <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800319a:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 800319c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031aa:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80031ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	2074      	movs	r0, #116	@ 0x74
 80031be:	f000 fe10 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80031c2:	2074      	movs	r0, #116	@ 0x74
 80031c4:	f000 fe27 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 80031c8:	e01b      	b.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a18      	ldr	r2, [pc, #96]	@ (8003230 <HAL_TIM_Base_MspInit+0x298>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d116      	bne.n	8003202 <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80031d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80031d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031da:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_TIM_Base_MspInit+0x278>)
 80031e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	2075      	movs	r0, #117	@ 0x75
 80031f8:	f000 fdf3 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80031fc:	2075      	movs	r0, #117	@ 0x75
 80031fe:	f000 fe0a 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3730      	adds	r7, #48	@ 0x30
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40010000 	.word	0x40010000
 8003210:	58024400 	.word	0x58024400
 8003214:	40000800 	.word	0x40000800
 8003218:	40000c00 	.word	0x40000c00
 800321c:	40010400 	.word	0x40010400
 8003220:	40001800 	.word	0x40001800
 8003224:	40001c00 	.word	0x40001c00
 8003228:	40002000 	.word	0x40002000
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400

08003234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b092      	sub	sp, #72	@ 0x48
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4aa4      	ldr	r2, [pc, #656]	@ (80034e4 <HAL_TIM_MspPostInit+0x2b0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d120      	bne.n	8003298 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003256:	4ba4      	ldr	r3, [pc, #656]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800325c:	4aa2      	ldr	r2, [pc, #648]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800325e:	f043 0310 	orr.w	r3, r3, #16
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003266:	4ba0      	ldr	r3, [pc, #640]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	633b      	str	r3, [r7, #48]	@ 0x30
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003274:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003286:	2301      	movs	r3, #1
 8003288:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800328a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800328e:	4619      	mov	r1, r3
 8003290:	4896      	ldr	r0, [pc, #600]	@ (80034ec <HAL_TIM_MspPostInit+0x2b8>)
 8003292:	f001 fbb7 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003296:	e189      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a0:	d11f      	bne.n	80032e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	4b91      	ldr	r3, [pc, #580]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80032a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a8:	4a8f      	ldr	r2, [pc, #572]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032b2:	4b8d      	ldr	r3, [pc, #564]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80032b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032c0:	2301      	movs	r3, #1
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032d0:	2301      	movs	r3, #1
 80032d2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032d8:	4619      	mov	r1, r3
 80032da:	4885      	ldr	r0, [pc, #532]	@ (80034f0 <HAL_TIM_MspPostInit+0x2bc>)
 80032dc:	f001 fb92 	bl	8004a04 <HAL_GPIO_Init>
}
 80032e0:	e164      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a83      	ldr	r2, [pc, #524]	@ (80034f4 <HAL_TIM_MspPostInit+0x2c0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d13f      	bne.n	800336c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ec:	4b7e      	ldr	r3, [pc, #504]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80032ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032f2:	4a7d      	ldr	r2, [pc, #500]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032fc:	4b7a      	ldr	r3, [pc, #488]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80032fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	4b77      	ldr	r3, [pc, #476]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003310:	4a75      	ldr	r2, [pc, #468]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800331a:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8003328:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800333a:	2302      	movs	r3, #2
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003342:	4619      	mov	r1, r3
 8003344:	486c      	ldr	r0, [pc, #432]	@ (80034f8 <HAL_TIM_MspPostInit+0x2c4>)
 8003346:	f001 fb5d 	bl	8004a04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800335a:	2302      	movs	r3, #2
 800335c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003362:	4619      	mov	r1, r3
 8003364:	4865      	ldr	r0, [pc, #404]	@ (80034fc <HAL_TIM_MspPostInit+0x2c8>)
 8003366:	f001 fb4d 	bl	8004a04 <HAL_GPIO_Init>
}
 800336a:	e11f      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a63      	ldr	r2, [pc, #396]	@ (8003500 <HAL_TIM_MspPostInit+0x2cc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d11f      	bne.n	80033b6 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	4b5c      	ldr	r3, [pc, #368]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003386:	4b58      	ldr	r3, [pc, #352]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003394:	2306      	movs	r3, #6
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033a4:	2302      	movs	r3, #2
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033ac:	4619      	mov	r1, r3
 80033ae:	4850      	ldr	r0, [pc, #320]	@ (80034f0 <HAL_TIM_MspPostInit+0x2bc>)
 80033b0:	f001 fb28 	bl	8004a04 <HAL_GPIO_Init>
}
 80033b4:	e0fa      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a52      	ldr	r2, [pc, #328]	@ (8003504 <HAL_TIM_MspPostInit+0x2d0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d120      	bne.n	8003402 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c0:	4b49      	ldr	r3, [pc, #292]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c6:	4a48      	ldr	r2, [pc, #288]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	2300      	movs	r3, #0
 80033ee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033f0:	2303      	movs	r3, #3
 80033f2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033f8:	4619      	mov	r1, r3
 80033fa:	4843      	ldr	r0, [pc, #268]	@ (8003508 <HAL_TIM_MspPostInit+0x2d4>)
 80033fc:	f001 fb02 	bl	8004a04 <HAL_GPIO_Init>
}
 8003400:	e0d4      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a41      	ldr	r2, [pc, #260]	@ (800350c <HAL_TIM_MspPostInit+0x2d8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d120      	bne.n	800344e <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340c:	4b36      	ldr	r3, [pc, #216]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003412:	4a35      	ldr	r2, [pc, #212]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800341c:	4b32      	ldr	r3, [pc, #200]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800341e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800342a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003438:	2300      	movs	r3, #0
 800343a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800343c:	2302      	movs	r3, #2
 800343e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003444:	4619      	mov	r1, r3
 8003446:	482d      	ldr	r0, [pc, #180]	@ (80034fc <HAL_TIM_MspPostInit+0x2c8>)
 8003448:	f001 fadc 	bl	8004a04 <HAL_GPIO_Init>
}
 800344c:	e0ae      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2f      	ldr	r2, [pc, #188]	@ (8003510 <HAL_TIM_MspPostInit+0x2dc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d11f      	bne.n	8003498 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003458:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800345e:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003468:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 800346a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003476:	2340      	movs	r3, #64	@ 0x40
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003486:	2309      	movs	r3, #9
 8003488:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800348e:	4619      	mov	r1, r3
 8003490:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <HAL_TIM_MspPostInit+0x2bc>)
 8003492:	f001 fab7 	bl	8004a04 <HAL_GPIO_Init>
}
 8003496:	e089      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <HAL_TIM_MspPostInit+0x2e0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d13a      	bne.n	8003518 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80034a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a8:	4a0f      	ldr	r2, [pc, #60]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <HAL_TIM_MspPostInit+0x2b4>)
 80034b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80034d0:	2309      	movs	r3, #9
 80034d2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034d8:	4619      	mov	r1, r3
 80034da:	4805      	ldr	r0, [pc, #20]	@ (80034f0 <HAL_TIM_MspPostInit+0x2bc>)
 80034dc:	f001 fa92 	bl	8004a04 <HAL_GPIO_Init>
}
 80034e0:	e064      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	58024400 	.word	0x58024400
 80034ec:	58021000 	.word	0x58021000
 80034f0:	58020000 	.word	0x58020000
 80034f4:	40000800 	.word	0x40000800
 80034f8:	58020c00 	.word	0x58020c00
 80034fc:	58020400 	.word	0x58020400
 8003500:	40000c00 	.word	0x40000c00
 8003504:	40010400 	.word	0x40010400
 8003508:	58020800 	.word	0x58020800
 800350c:	40001800 	.word	0x40001800
 8003510:	40001c00 	.word	0x40001c00
 8003514:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <HAL_TIM_MspPostInit+0x380>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d11f      	bne.n	8003562 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003522:	4b25      	ldr	r3, [pc, #148]	@ (80035b8 <HAL_TIM_MspPostInit+0x384>)
 8003524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003528:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <HAL_TIM_MspPostInit+0x384>)
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003532:	4b21      	ldr	r3, [pc, #132]	@ (80035b8 <HAL_TIM_MspPostInit+0x384>)
 8003534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003540:	2360      	movs	r3, #96	@ 0x60
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003550:	2304      	movs	r3, #4
 8003552:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003554:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003558:	4619      	mov	r1, r3
 800355a:	4818      	ldr	r0, [pc, #96]	@ (80035bc <HAL_TIM_MspPostInit+0x388>)
 800355c:	f001 fa52 	bl	8004a04 <HAL_GPIO_Init>
}
 8003560:	e024      	b.n	80035ac <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	@ (80035c0 <HAL_TIM_MspPostInit+0x38c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d11f      	bne.n	80035ac <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356c:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <HAL_TIM_MspPostInit+0x384>)
 800356e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003572:	4a11      	ldr	r2, [pc, #68]	@ (80035b8 <HAL_TIM_MspPostInit+0x384>)
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800357c:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <HAL_TIM_MspPostInit+0x384>)
 800357e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800358a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800358e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2300      	movs	r3, #0
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800359c:	2301      	movs	r3, #1
 800359e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035a4:	4619      	mov	r1, r3
 80035a6:	4807      	ldr	r0, [pc, #28]	@ (80035c4 <HAL_TIM_MspPostInit+0x390>)
 80035a8:	f001 fa2c 	bl	8004a04 <HAL_GPIO_Init>
}
 80035ac:	bf00      	nop
 80035ae:	3748      	adds	r7, #72	@ 0x48
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40014000 	.word	0x40014000
 80035b8:	58024400 	.word	0x58024400
 80035bc:	58021000 	.word	0x58021000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	58020400 	.word	0x58020400

080035c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b0ba      	sub	sp, #232	@ 0xe8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	22c0      	movs	r2, #192	@ 0xc0
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f00a fba6 	bl	800dd3a <memset>
  if(huart->Instance==UART4)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2b      	ldr	r2, [pc, #172]	@ (80036a0 <HAL_UART_MspInit+0xd8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d14e      	bne.n	8003696 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80035f8:	f04f 0202 	mov.w	r2, #2
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360a:	f107 0310 	add.w	r3, r7, #16
 800360e:	4618      	mov	r0, r3
 8003610:	f004 f920 	bl	8007854 <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800361a:	f7ff fb93 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800361e:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <HAL_UART_MspInit+0xdc>)
 8003620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003624:	4a1f      	ldr	r2, [pc, #124]	@ (80036a4 <HAL_UART_MspInit+0xdc>)
 8003626:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800362a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800362e:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_UART_MspInit+0xdc>)
 8003630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003634:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_UART_MspInit+0xdc>)
 800363e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <HAL_UART_MspInit+0xdc>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800364c:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_UART_MspInit+0xdc>)
 800364e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800365a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800365e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003674:	2308      	movs	r3, #8
 8003676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800367a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800367e:	4619      	mov	r1, r3
 8003680:	4809      	ldr	r0, [pc, #36]	@ (80036a8 <HAL_UART_MspInit+0xe0>)
 8003682:	f001 f9bf 	bl	8004a04 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	2034      	movs	r0, #52	@ 0x34
 800368c:	f000 fba9 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003690:	2034      	movs	r0, #52	@ 0x34
 8003692:	f000 fbc0 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003696:	bf00      	nop
 8003698:	37e8      	adds	r7, #232	@ 0xe8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	58024400 	.word	0x58024400
 80036a8:	58020800 	.word	0x58020800

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <NMI_Handler+0x4>

080036b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <HardFault_Handler+0x4>

080036bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <MemManage_Handler+0x4>

080036c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003702:	f000 fa67 	bl	8003bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003710:	4802      	ldr	r0, [pc, #8]	@ (800371c <TIM1_UP_IRQHandler+0x10>)
 8003712:	f006 f90b 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	24000318 	.word	0x24000318

08003720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003724:	4802      	ldr	r0, [pc, #8]	@ (8003730 <TIM2_IRQHandler+0x10>)
 8003726:	f006 f901 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	24000364 	.word	0x24000364

08003734 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003738:	4802      	ldr	r0, [pc, #8]	@ (8003744 <TIM4_IRQHandler+0x10>)
 800373a:	f006 f8f7 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	240003b0 	.word	0x240003b0

08003748 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800374c:	4803      	ldr	r0, [pc, #12]	@ (800375c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800374e:	f006 f8ed 	bl	800992c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003752:	4803      	ldr	r0, [pc, #12]	@ (8003760 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003754:	f006 f8ea 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	24000448 	.word	0x24000448
 8003760:	24000494 	.word	0x24000494

08003764 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003768:	4803      	ldr	r0, [pc, #12]	@ (8003778 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800376a:	f006 f8df 	bl	800992c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800376e:	4803      	ldr	r0, [pc, #12]	@ (800377c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003770:	f006 f8dc 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	24000448 	.word	0x24000448
 800377c:	240004e0 	.word	0x240004e0

08003780 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003784:	4803      	ldr	r0, [pc, #12]	@ (8003794 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003786:	f006 f8d1 	bl	800992c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800378a:	4803      	ldr	r0, [pc, #12]	@ (8003798 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800378c:	f006 f8ce 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	24000448 	.word	0x24000448
 8003798:	2400052c 	.word	0x2400052c

0800379c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80037a0:	4802      	ldr	r0, [pc, #8]	@ (80037ac <TIM5_IRQHandler+0x10>)
 80037a2:	f006 f8c3 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	240003fc 	.word	0x240003fc

080037b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <UART4_IRQHandler+0x10>)
 80037b6:	f007 fa89 	bl	800accc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	24000610 	.word	0x24000610

080037c4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <LPTIM1_IRQHandler+0x10>)
 80037ca:	f002 fd31 	bl	8006230 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	240002e0 	.word	0x240002e0

080037d8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <TIM15_IRQHandler+0x10>)
 80037de:	f006 f8a5 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	24000578 	.word	0x24000578

080037ec <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <TIM16_IRQHandler+0x10>)
 80037f2:	f006 f89b 	bl	800992c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	240005c4 	.word	0x240005c4

08003800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return 1;
 8003804:	2301      	movs	r3, #1
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_kill>:

int _kill(int pid, int sig)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800381a:	f00a fae1 	bl	800dde0 <__errno>
 800381e:	4603      	mov	r3, r0
 8003820:	2216      	movs	r2, #22
 8003822:	601a      	str	r2, [r3, #0]
  return -1;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <_exit>:

void _exit (int status)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003838:	f04f 31ff 	mov.w	r1, #4294967295
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ffe7 	bl	8003810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003842:	bf00      	nop
 8003844:	e7fd      	b.n	8003842 <_exit+0x12>

08003846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e00a      	b.n	800386e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003858:	f3af 8000 	nop.w
 800385c:	4601      	mov	r1, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	60ba      	str	r2, [r7, #8]
 8003864:	b2ca      	uxtb	r2, r1
 8003866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3301      	adds	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	dbf0      	blt.n	8003858 <_read+0x12>
  }

  return len;
 8003876:	687b      	ldr	r3, [r7, #4]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e009      	b.n	80038a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	60ba      	str	r2, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	dbf1      	blt.n	8003892 <_write+0x12>
  }
  return len;
 80038ae:	687b      	ldr	r3, [r7, #4]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_close>:

int _close(int file)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038e0:	605a      	str	r2, [r3, #4]
  return 0;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_isatty>:

int _isatty(int file)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038f8:	2301      	movs	r3, #1
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003928:	4a14      	ldr	r2, [pc, #80]	@ (800397c <_sbrk+0x5c>)
 800392a:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <_sbrk+0x60>)
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003934:	4b13      	ldr	r3, [pc, #76]	@ (8003984 <_sbrk+0x64>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <_sbrk+0x64>)
 800393e:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <_sbrk+0x68>)
 8003940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <_sbrk+0x64>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d207      	bcs.n	8003960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003950:	f00a fa46 	bl	800dde0 <__errno>
 8003954:	4603      	mov	r3, r0
 8003956:	220c      	movs	r2, #12
 8003958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
 800395e:	e009      	b.n	8003974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <_sbrk+0x64>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003966:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <_sbrk+0x64>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <_sbrk+0x64>)
 8003970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	24080000 	.word	0x24080000
 8003980:	00000400 	.word	0x00000400
 8003984:	24003e54 	.word	0x24003e54
 8003988:	24003fa8 	.word	0x24003fa8

0800398c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003990:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <SystemInit+0xe4>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	4a36      	ldr	r2, [pc, #216]	@ (8003a70 <SystemInit+0xe4>)
 8003998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800399c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <SystemInit+0xe8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d807      	bhi.n	80039bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039ac:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <SystemInit+0xe8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 030f 	bic.w	r3, r3, #15
 80039b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003a74 <SystemInit+0xe8>)
 80039b6:	f043 0307 	orr.w	r3, r3, #7
 80039ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80039bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a78 <SystemInit+0xec>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <SystemInit+0xec>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <SystemInit+0xec>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003a78 <SystemInit+0xec>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4929      	ldr	r1, [pc, #164]	@ (8003a78 <SystemInit+0xec>)
 80039d4:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <SystemInit+0xf0>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039da:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <SystemInit+0xe8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <SystemInit+0xe8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 030f 	bic.w	r3, r3, #15
 80039ee:	4a21      	ldr	r2, [pc, #132]	@ (8003a74 <SystemInit+0xe8>)
 80039f0:	f043 0307 	orr.w	r3, r3, #7
 80039f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <SystemInit+0xec>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <SystemInit+0xec>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003a02:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <SystemInit+0xec>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <SystemInit+0xec>)
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <SystemInit+0xf4>)
 8003a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a78 <SystemInit+0xec>)
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <SystemInit+0xf8>)
 8003a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003a14:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <SystemInit+0xec>)
 8003a16:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <SystemInit+0xfc>)
 8003a18:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003a1a:	4b17      	ldr	r3, [pc, #92]	@ (8003a78 <SystemInit+0xec>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003a20:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <SystemInit+0xec>)
 8003a22:	4a19      	ldr	r2, [pc, #100]	@ (8003a88 <SystemInit+0xfc>)
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <SystemInit+0xec>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <SystemInit+0xec>)
 8003a2e:	4a16      	ldr	r2, [pc, #88]	@ (8003a88 <SystemInit+0xfc>)
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a32:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <SystemInit+0xec>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <SystemInit+0xec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a78 <SystemInit+0xec>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <SystemInit+0xec>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <SystemInit+0x100>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <SystemInit+0x104>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a56:	d202      	bcs.n	8003a5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <SystemInit+0x108>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <SystemInit+0x10c>)
 8003a60:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003a64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000ed00 	.word	0xe000ed00
 8003a74:	52002000 	.word	0x52002000
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a80:	02020200 	.word	0x02020200
 8003a84:	01ff0000 	.word	0x01ff0000
 8003a88:	01010280 	.word	0x01010280
 8003a8c:	5c001000 	.word	0x5c001000
 8003a90:	ffff0000 	.word	0xffff0000
 8003a94:	51008108 	.word	0x51008108
 8003a98:	52004000 	.word	0x52004000

08003a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003aa0:	f7ff ff74 	bl	800398c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aa4:	480c      	ldr	r0, [pc, #48]	@ (8003ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aa6:	490d      	ldr	r1, [pc, #52]	@ (8003adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aac:	e002      	b.n	8003ab4 <LoopCopyDataInit>

08003aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab2:	3304      	adds	r3, #4

08003ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab8:	d3f9      	bcc.n	8003aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003abc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac0:	e001      	b.n	8003ac6 <LoopFillZerobss>

08003ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac4:	3204      	adds	r2, #4

08003ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac8:	d3fb      	bcc.n	8003ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aca:	f00a f98f 	bl	800ddec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ace:	f7fc fdd7 	bl	8000680 <main>
  bx  lr
 8003ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ad4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ad8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003adc:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003ae0:	08010be8 	.word	0x08010be8
  ldr r2, =_sbss
 8003ae4:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003ae8:	24003fa8 	.word	0x24003fa8

08003aec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC3_IRQHandler>
	...

08003af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af6:	2003      	movs	r0, #3
 8003af8:	f000 f968 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003afc:	f003 fcd4 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_Init+0x68>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	4913      	ldr	r1, [pc, #76]	@ (8003b5c <HAL_Init+0x6c>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
 8003b18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <HAL_Init+0x68>)
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	4a0e      	ldr	r2, [pc, #56]	@ (8003b5c <HAL_Init+0x6c>)
 8003b24:	5cd3      	ldrb	r3, [r2, r3]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b30:	4a0b      	ldr	r2, [pc, #44]	@ (8003b60 <HAL_Init+0x70>)
 8003b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b34:	4a0b      	ldr	r2, [pc, #44]	@ (8003b64 <HAL_Init+0x74>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b3a:	200f      	movs	r0, #15
 8003b3c:	f000 f814 	bl	8003b68 <HAL_InitTick>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e002      	b.n	8003b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b4a:	f7ff f901 	bl	8002d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	08010658 	.word	0x08010658
 8003b60:	24000014 	.word	0x24000014
 8003b64:	24000010 	.word	0x24000010

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b70:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <HAL_InitTick+0x60>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e021      	b.n	8003bc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <HAL_InitTick+0x64>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b11      	ldr	r3, [pc, #68]	@ (8003bc8 <HAL_InitTick+0x60>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4619      	mov	r1, r3
 8003b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f94d 	bl	8003e32 <HAL_SYSTICK_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00e      	b.n	8003bc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d80a      	bhi.n	8003bbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	f000 f917 	bl	8003de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb4:	4a06      	ldr	r2, [pc, #24]	@ (8003bd0 <HAL_InitTick+0x68>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	2400001c 	.word	0x2400001c
 8003bcc:	24000010 	.word	0x24000010
 8003bd0:	24000018 	.word	0x24000018

08003bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_IncTick+0x20>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_IncTick+0x24>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	4a04      	ldr	r2, [pc, #16]	@ (8003bf8 <HAL_IncTick+0x24>)
 8003be6:	6013      	str	r3, [r2, #0]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	2400001c 	.word	0x2400001c
 8003bf8:	24003e58 	.word	0x24003e58

08003bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_GetTick+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	24003e58 	.word	0x24003e58

08003c14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003c18:	4b03      	ldr	r3, [pc, #12]	@ (8003c28 <HAL_GetREVID+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	5c001000 	.word	0x5c001000

08003c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <__NVIC_SetPriorityGrouping+0x40>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c54:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <__NVIC_SetPriorityGrouping+0x40>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00
 8003c70:	05fa0000 	.word	0x05fa0000

08003c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__NVIC_GetPriorityGrouping+0x18>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0307 	and.w	r3, r3, #7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db0b      	blt.n	8003cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4907      	ldr	r1, [pc, #28]	@ (8003cc8 <__NVIC_EnableIRQ+0x38>)
 8003caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db0a      	blt.n	8003cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	490c      	ldr	r1, [pc, #48]	@ (8003d18 <__NVIC_SetPriority+0x4c>)
 8003ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf4:	e00a      	b.n	8003d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4908      	ldr	r1, [pc, #32]	@ (8003d1c <__NVIC_SetPriority+0x50>)
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3b04      	subs	r3, #4
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	440b      	add	r3, r1
 8003d0a:	761a      	strb	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	@ 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f1c3 0307 	rsb	r3, r3, #7
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf28      	it	cs
 8003d3e:	2304      	movcs	r3, #4
 8003d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d902      	bls.n	8003d50 <NVIC_EncodePriority+0x30>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3b03      	subs	r3, #3
 8003d4e:	e000      	b.n	8003d52 <NVIC_EncodePriority+0x32>
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	4313      	orrs	r3, r2
         );
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	@ 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d98:	d301      	bcc.n	8003d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00f      	b.n	8003dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <SysTick_Config+0x40>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da6:	210f      	movs	r1, #15
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f7ff ff8e 	bl	8003ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <SysTick_Config+0x40>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db6:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <SysTick_Config+0x40>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff29 	bl	8003c2c <__NVIC_SetPriorityGrouping>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff ff40 	bl	8003c74 <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff90 	bl	8003d20 <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff5f 	bl	8003ccc <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff33 	bl	8003c90 <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ffa4 	bl	8003d88 <SysTick_Config>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e50:	f3bf 8f5f 	dmb	sy
}
 8003e54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_MPU_Disable+0x28>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	4a06      	ldr	r2, [pc, #24]	@ (8003e74 <HAL_MPU_Disable+0x28>)
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_MPU_Disable+0x2c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00
 8003e78:	e000ed90 	.word	0xe000ed90

08003e7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e84:	4a0b      	ldr	r2, [pc, #44]	@ (8003eb4 <HAL_MPU_Enable+0x38>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <HAL_MPU_Enable+0x3c>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <HAL_MPU_Enable+0x3c>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e9a:	f3bf 8f4f 	dsb	sy
}
 8003e9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ea0:	f3bf 8f6f 	isb	sy
}
 8003ea4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000ed90 	.word	0xe000ed90
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	785a      	ldrb	r2, [r3, #1]
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f38 <HAL_MPU_ConfigRegion+0x7c>)
 8003eca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <HAL_MPU_ConfigRegion+0x7c>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <HAL_MPU_ConfigRegion+0x7c>)
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003ed8:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <HAL_MPU_ConfigRegion+0x7c>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7b1b      	ldrb	r3, [r3, #12]
 8003ee4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7adb      	ldrb	r3, [r3, #11]
 8003eea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7a9b      	ldrb	r3, [r3, #10]
 8003ef2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7b5b      	ldrb	r3, [r3, #13]
 8003efa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7b9b      	ldrb	r3, [r3, #14]
 8003f02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7bdb      	ldrb	r3, [r3, #15]
 8003f0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7a5b      	ldrb	r3, [r3, #9]
 8003f12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7a1b      	ldrb	r3, [r3, #8]
 8003f1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	7812      	ldrb	r2, [r2, #0]
 8003f22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f24:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f28:	6113      	str	r3, [r2, #16]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed90 	.word	0xe000ed90

08003f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7ff fe5a 	bl	8003bfc <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e2dc      	b.n	800450e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d008      	beq.n	8003f72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2280      	movs	r2, #128	@ 0x80
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e2cd      	b.n	800450e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a76      	ldr	r2, [pc, #472]	@ (8004150 <HAL_DMA_Abort+0x214>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d04a      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a74      	ldr	r2, [pc, #464]	@ (8004154 <HAL_DMA_Abort+0x218>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d045      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a73      	ldr	r2, [pc, #460]	@ (8004158 <HAL_DMA_Abort+0x21c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d040      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a71      	ldr	r2, [pc, #452]	@ (800415c <HAL_DMA_Abort+0x220>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d03b      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a70      	ldr	r2, [pc, #448]	@ (8004160 <HAL_DMA_Abort+0x224>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d036      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8004164 <HAL_DMA_Abort+0x228>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d031      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6d      	ldr	r2, [pc, #436]	@ (8004168 <HAL_DMA_Abort+0x22c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d02c      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6b      	ldr	r2, [pc, #428]	@ (800416c <HAL_DMA_Abort+0x230>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d027      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004170 <HAL_DMA_Abort+0x234>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d022      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a68      	ldr	r2, [pc, #416]	@ (8004174 <HAL_DMA_Abort+0x238>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01d      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a67      	ldr	r2, [pc, #412]	@ (8004178 <HAL_DMA_Abort+0x23c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d018      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a65      	ldr	r2, [pc, #404]	@ (800417c <HAL_DMA_Abort+0x240>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a64      	ldr	r2, [pc, #400]	@ (8004180 <HAL_DMA_Abort+0x244>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a62      	ldr	r2, [pc, #392]	@ (8004184 <HAL_DMA_Abort+0x248>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a61      	ldr	r2, [pc, #388]	@ (8004188 <HAL_DMA_Abort+0x24c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_DMA_Abort+0xd6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5f      	ldr	r2, [pc, #380]	@ (800418c <HAL_DMA_Abort+0x250>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_DMA_Abort+0xda>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_DMA_Abort+0xdc>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 021e 	bic.w	r2, r2, #30
 800402a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800403a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e00a      	b.n	800405a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 020e 	bic.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a3c      	ldr	r2, [pc, #240]	@ (8004150 <HAL_DMA_Abort+0x214>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d072      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a3a      	ldr	r2, [pc, #232]	@ (8004154 <HAL_DMA_Abort+0x218>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d06d      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a39      	ldr	r2, [pc, #228]	@ (8004158 <HAL_DMA_Abort+0x21c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d068      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a37      	ldr	r2, [pc, #220]	@ (800415c <HAL_DMA_Abort+0x220>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d063      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a36      	ldr	r2, [pc, #216]	@ (8004160 <HAL_DMA_Abort+0x224>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d05e      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a34      	ldr	r2, [pc, #208]	@ (8004164 <HAL_DMA_Abort+0x228>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d059      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <HAL_DMA_Abort+0x22c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d054      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a31      	ldr	r2, [pc, #196]	@ (800416c <HAL_DMA_Abort+0x230>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d04f      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <HAL_DMA_Abort+0x234>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d04a      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004174 <HAL_DMA_Abort+0x238>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d045      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004178 <HAL_DMA_Abort+0x23c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d040      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2b      	ldr	r2, [pc, #172]	@ (800417c <HAL_DMA_Abort+0x240>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d03b      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <HAL_DMA_Abort+0x244>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a28      	ldr	r2, [pc, #160]	@ (8004184 <HAL_DMA_Abort+0x248>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d031      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a27      	ldr	r2, [pc, #156]	@ (8004188 <HAL_DMA_Abort+0x24c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d02c      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a25      	ldr	r2, [pc, #148]	@ (800418c <HAL_DMA_Abort+0x250>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d027      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a24      	ldr	r2, [pc, #144]	@ (8004190 <HAL_DMA_Abort+0x254>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a22      	ldr	r2, [pc, #136]	@ (8004194 <HAL_DMA_Abort+0x258>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	@ (8004198 <HAL_DMA_Abort+0x25c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1f      	ldr	r2, [pc, #124]	@ (800419c <HAL_DMA_Abort+0x260>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <HAL_DMA_Abort+0x264>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1c      	ldr	r2, [pc, #112]	@ (80041a4 <HAL_DMA_Abort+0x268>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1b      	ldr	r2, [pc, #108]	@ (80041a8 <HAL_DMA_Abort+0x26c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_DMA_Abort+0x20e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a19      	ldr	r2, [pc, #100]	@ (80041ac <HAL_DMA_Abort+0x270>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d132      	bne.n	80041b0 <HAL_DMA_Abort+0x274>
 800414a:	2301      	movs	r3, #1
 800414c:	e031      	b.n	80041b2 <HAL_DMA_Abort+0x276>
 800414e:	bf00      	nop
 8004150:	40020010 	.word	0x40020010
 8004154:	40020028 	.word	0x40020028
 8004158:	40020040 	.word	0x40020040
 800415c:	40020058 	.word	0x40020058
 8004160:	40020070 	.word	0x40020070
 8004164:	40020088 	.word	0x40020088
 8004168:	400200a0 	.word	0x400200a0
 800416c:	400200b8 	.word	0x400200b8
 8004170:	40020410 	.word	0x40020410
 8004174:	40020428 	.word	0x40020428
 8004178:	40020440 	.word	0x40020440
 800417c:	40020458 	.word	0x40020458
 8004180:	40020470 	.word	0x40020470
 8004184:	40020488 	.word	0x40020488
 8004188:	400204a0 	.word	0x400204a0
 800418c:	400204b8 	.word	0x400204b8
 8004190:	58025408 	.word	0x58025408
 8004194:	5802541c 	.word	0x5802541c
 8004198:	58025430 	.word	0x58025430
 800419c:	58025444 	.word	0x58025444
 80041a0:	58025458 	.word	0x58025458
 80041a4:	5802546c 	.word	0x5802546c
 80041a8:	58025480 	.word	0x58025480
 80041ac:	58025494 	.word	0x58025494
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004380 <HAL_DMA_Abort+0x444>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04a      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004384 <HAL_DMA_Abort+0x448>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d045      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6a      	ldr	r2, [pc, #424]	@ (8004388 <HAL_DMA_Abort+0x44c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a68      	ldr	r2, [pc, #416]	@ (800438c <HAL_DMA_Abort+0x450>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a67      	ldr	r2, [pc, #412]	@ (8004390 <HAL_DMA_Abort+0x454>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d036      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a65      	ldr	r2, [pc, #404]	@ (8004394 <HAL_DMA_Abort+0x458>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a64      	ldr	r2, [pc, #400]	@ (8004398 <HAL_DMA_Abort+0x45c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d02c      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a62      	ldr	r2, [pc, #392]	@ (800439c <HAL_DMA_Abort+0x460>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d027      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a61      	ldr	r2, [pc, #388]	@ (80043a0 <HAL_DMA_Abort+0x464>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5f      	ldr	r2, [pc, #380]	@ (80043a4 <HAL_DMA_Abort+0x468>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a5e      	ldr	r2, [pc, #376]	@ (80043a8 <HAL_DMA_Abort+0x46c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5c      	ldr	r2, [pc, #368]	@ (80043ac <HAL_DMA_Abort+0x470>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5b      	ldr	r2, [pc, #364]	@ (80043b0 <HAL_DMA_Abort+0x474>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a59      	ldr	r2, [pc, #356]	@ (80043b4 <HAL_DMA_Abort+0x478>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a58      	ldr	r2, [pc, #352]	@ (80043b8 <HAL_DMA_Abort+0x47c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_DMA_Abort+0x32a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a56      	ldr	r2, [pc, #344]	@ (80043bc <HAL_DMA_Abort+0x480>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <HAL_DMA_Abort+0x33c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e007      	b.n	8004288 <HAL_DMA_Abort+0x34c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004288:	e013      	b.n	80042b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800428a:	f7ff fcb7 	bl	8003bfc <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b05      	cmp	r3, #5
 8004296:	d90c      	bls.n	80042b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2203      	movs	r2, #3
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e12d      	b.n	800450e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004380 <HAL_DMA_Abort+0x444>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d04a      	beq.n	800435e <HAL_DMA_Abort+0x422>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004384 <HAL_DMA_Abort+0x448>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d045      	beq.n	800435e <HAL_DMA_Abort+0x422>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004388 <HAL_DMA_Abort+0x44c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d040      	beq.n	800435e <HAL_DMA_Abort+0x422>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <HAL_DMA_Abort+0x450>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d03b      	beq.n	800435e <HAL_DMA_Abort+0x422>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a29      	ldr	r2, [pc, #164]	@ (8004390 <HAL_DMA_Abort+0x454>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d036      	beq.n	800435e <HAL_DMA_Abort+0x422>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a27      	ldr	r2, [pc, #156]	@ (8004394 <HAL_DMA_Abort+0x458>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d031      	beq.n	800435e <HAL_DMA_Abort+0x422>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a26      	ldr	r2, [pc, #152]	@ (8004398 <HAL_DMA_Abort+0x45c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d02c      	beq.n	800435e <HAL_DMA_Abort+0x422>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a24      	ldr	r2, [pc, #144]	@ (800439c <HAL_DMA_Abort+0x460>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d027      	beq.n	800435e <HAL_DMA_Abort+0x422>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <HAL_DMA_Abort+0x464>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d022      	beq.n	800435e <HAL_DMA_Abort+0x422>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <HAL_DMA_Abort+0x468>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01d      	beq.n	800435e <HAL_DMA_Abort+0x422>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <HAL_DMA_Abort+0x46c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d018      	beq.n	800435e <HAL_DMA_Abort+0x422>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <HAL_DMA_Abort+0x470>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_DMA_Abort+0x422>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_DMA_Abort+0x474>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_DMA_Abort+0x422>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <HAL_DMA_Abort+0x478>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_DMA_Abort+0x422>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HAL_DMA_Abort+0x47c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_DMA_Abort+0x422>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_DMA_Abort+0x480>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_DMA_Abort+0x426>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_DMA_Abort+0x428>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02b      	beq.n	80043c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	223f      	movs	r2, #63	@ 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	e02a      	b.n	80043d6 <HAL_DMA_Abort+0x49a>
 8004380:	40020010 	.word	0x40020010
 8004384:	40020028 	.word	0x40020028
 8004388:	40020040 	.word	0x40020040
 800438c:	40020058 	.word	0x40020058
 8004390:	40020070 	.word	0x40020070
 8004394:	40020088 	.word	0x40020088
 8004398:	400200a0 	.word	0x400200a0
 800439c:	400200b8 	.word	0x400200b8
 80043a0:	40020410 	.word	0x40020410
 80043a4:	40020428 	.word	0x40020428
 80043a8:	40020440 	.word	0x40020440
 80043ac:	40020458 	.word	0x40020458
 80043b0:	40020470 	.word	0x40020470
 80043b4:	40020488 	.word	0x40020488
 80043b8:	400204a0 	.word	0x400204a0
 80043bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2201      	movs	r2, #1
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a4f      	ldr	r2, [pc, #316]	@ (8004518 <HAL_DMA_Abort+0x5dc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d072      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a4d      	ldr	r2, [pc, #308]	@ (800451c <HAL_DMA_Abort+0x5e0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d06d      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004520 <HAL_DMA_Abort+0x5e4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d068      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004524 <HAL_DMA_Abort+0x5e8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d063      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a49      	ldr	r2, [pc, #292]	@ (8004528 <HAL_DMA_Abort+0x5ec>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d05e      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a47      	ldr	r2, [pc, #284]	@ (800452c <HAL_DMA_Abort+0x5f0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d059      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a46      	ldr	r2, [pc, #280]	@ (8004530 <HAL_DMA_Abort+0x5f4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d054      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a44      	ldr	r2, [pc, #272]	@ (8004534 <HAL_DMA_Abort+0x5f8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04f      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a43      	ldr	r2, [pc, #268]	@ (8004538 <HAL_DMA_Abort+0x5fc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04a      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a41      	ldr	r2, [pc, #260]	@ (800453c <HAL_DMA_Abort+0x600>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d045      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a40      	ldr	r2, [pc, #256]	@ (8004540 <HAL_DMA_Abort+0x604>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d040      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3e      	ldr	r2, [pc, #248]	@ (8004544 <HAL_DMA_Abort+0x608>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d03b      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a3d      	ldr	r2, [pc, #244]	@ (8004548 <HAL_DMA_Abort+0x60c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d036      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3b      	ldr	r2, [pc, #236]	@ (800454c <HAL_DMA_Abort+0x610>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3a      	ldr	r2, [pc, #232]	@ (8004550 <HAL_DMA_Abort+0x614>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02c      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a38      	ldr	r2, [pc, #224]	@ (8004554 <HAL_DMA_Abort+0x618>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a37      	ldr	r2, [pc, #220]	@ (8004558 <HAL_DMA_Abort+0x61c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a35      	ldr	r2, [pc, #212]	@ (800455c <HAL_DMA_Abort+0x620>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a34      	ldr	r2, [pc, #208]	@ (8004560 <HAL_DMA_Abort+0x624>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a32      	ldr	r2, [pc, #200]	@ (8004564 <HAL_DMA_Abort+0x628>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a31      	ldr	r2, [pc, #196]	@ (8004568 <HAL_DMA_Abort+0x62c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2f      	ldr	r2, [pc, #188]	@ (800456c <HAL_DMA_Abort+0x630>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004570 <HAL_DMA_Abort+0x634>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_DMA_Abort+0x58a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <HAL_DMA_Abort+0x638>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_DMA_Abort+0x58e>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_DMA_Abort+0x590>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d015      	beq.n	80044fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	58025408 	.word	0x58025408
 800455c:	5802541c 	.word	0x5802541c
 8004560:	58025430 	.word	0x58025430
 8004564:	58025444 	.word	0x58025444
 8004568:	58025458 	.word	0x58025458
 800456c:	5802546c 	.word	0x5802546c
 8004570:	58025480 	.word	0x58025480
 8004574:	58025494 	.word	0x58025494

08004578 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e237      	b.n	80049fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d004      	beq.n	80045a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2280      	movs	r2, #128	@ 0x80
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e22c      	b.n	80049fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004718 <HAL_DMA_Abort_IT+0x1a0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d04a      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a5b      	ldr	r2, [pc, #364]	@ (800471c <HAL_DMA_Abort_IT+0x1a4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d045      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a59      	ldr	r2, [pc, #356]	@ (8004720 <HAL_DMA_Abort_IT+0x1a8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d040      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a58      	ldr	r2, [pc, #352]	@ (8004724 <HAL_DMA_Abort_IT+0x1ac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d03b      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a56      	ldr	r2, [pc, #344]	@ (8004728 <HAL_DMA_Abort_IT+0x1b0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a55      	ldr	r2, [pc, #340]	@ (800472c <HAL_DMA_Abort_IT+0x1b4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d031      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a53      	ldr	r2, [pc, #332]	@ (8004730 <HAL_DMA_Abort_IT+0x1b8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a52      	ldr	r2, [pc, #328]	@ (8004734 <HAL_DMA_Abort_IT+0x1bc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a50      	ldr	r2, [pc, #320]	@ (8004738 <HAL_DMA_Abort_IT+0x1c0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4f      	ldr	r2, [pc, #316]	@ (800473c <HAL_DMA_Abort_IT+0x1c4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4d      	ldr	r2, [pc, #308]	@ (8004740 <HAL_DMA_Abort_IT+0x1c8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4c      	ldr	r2, [pc, #304]	@ (8004744 <HAL_DMA_Abort_IT+0x1cc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a4a      	ldr	r2, [pc, #296]	@ (8004748 <HAL_DMA_Abort_IT+0x1d0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a49      	ldr	r2, [pc, #292]	@ (800474c <HAL_DMA_Abort_IT+0x1d4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a47      	ldr	r2, [pc, #284]	@ (8004750 <HAL_DMA_Abort_IT+0x1d8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_DMA_Abort_IT+0xc8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a46      	ldr	r2, [pc, #280]	@ (8004754 <HAL_DMA_Abort_IT+0x1dc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_DMA_Abort_IT+0xcc>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_DMA_Abort_IT+0xce>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8086 	beq.w	8004758 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2204      	movs	r2, #4
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2f      	ldr	r2, [pc, #188]	@ (8004718 <HAL_DMA_Abort_IT+0x1a0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d04a      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2e      	ldr	r2, [pc, #184]	@ (800471c <HAL_DMA_Abort_IT+0x1a4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d045      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2c      	ldr	r2, [pc, #176]	@ (8004720 <HAL_DMA_Abort_IT+0x1a8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d040      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2b      	ldr	r2, [pc, #172]	@ (8004724 <HAL_DMA_Abort_IT+0x1ac>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d03b      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a29      	ldr	r2, [pc, #164]	@ (8004728 <HAL_DMA_Abort_IT+0x1b0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d036      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a28      	ldr	r2, [pc, #160]	@ (800472c <HAL_DMA_Abort_IT+0x1b4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d031      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a26      	ldr	r2, [pc, #152]	@ (8004730 <HAL_DMA_Abort_IT+0x1b8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d02c      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a25      	ldr	r2, [pc, #148]	@ (8004734 <HAL_DMA_Abort_IT+0x1bc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d027      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a23      	ldr	r2, [pc, #140]	@ (8004738 <HAL_DMA_Abort_IT+0x1c0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d022      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a22      	ldr	r2, [pc, #136]	@ (800473c <HAL_DMA_Abort_IT+0x1c4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d01d      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a20      	ldr	r2, [pc, #128]	@ (8004740 <HAL_DMA_Abort_IT+0x1c8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d018      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004744 <HAL_DMA_Abort_IT+0x1cc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d013      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <HAL_DMA_Abort_IT+0x1d0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <HAL_DMA_Abort_IT+0x1d4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004750 <HAL_DMA_Abort_IT+0x1d8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x17c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_DMA_Abort_IT+0x1dc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d108      	bne.n	8004706 <HAL_DMA_Abort_IT+0x18e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e178      	b.n	80049f8 <HAL_DMA_Abort_IT+0x480>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e16f      	b.n	80049f8 <HAL_DMA_Abort_IT+0x480>
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 020e 	bic.w	r2, r2, #14
 8004766:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a6c      	ldr	r2, [pc, #432]	@ (8004920 <HAL_DMA_Abort_IT+0x3a8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d04a      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6b      	ldr	r2, [pc, #428]	@ (8004924 <HAL_DMA_Abort_IT+0x3ac>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d045      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a69      	ldr	r2, [pc, #420]	@ (8004928 <HAL_DMA_Abort_IT+0x3b0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d040      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a68      	ldr	r2, [pc, #416]	@ (800492c <HAL_DMA_Abort_IT+0x3b4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d03b      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a66      	ldr	r2, [pc, #408]	@ (8004930 <HAL_DMA_Abort_IT+0x3b8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d036      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a65      	ldr	r2, [pc, #404]	@ (8004934 <HAL_DMA_Abort_IT+0x3bc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d031      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a63      	ldr	r2, [pc, #396]	@ (8004938 <HAL_DMA_Abort_IT+0x3c0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02c      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a62      	ldr	r2, [pc, #392]	@ (800493c <HAL_DMA_Abort_IT+0x3c4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d027      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a60      	ldr	r2, [pc, #384]	@ (8004940 <HAL_DMA_Abort_IT+0x3c8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004944 <HAL_DMA_Abort_IT+0x3cc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01d      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004948 <HAL_DMA_Abort_IT+0x3d0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5c      	ldr	r2, [pc, #368]	@ (800494c <HAL_DMA_Abort_IT+0x3d4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004950 <HAL_DMA_Abort_IT+0x3d8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a59      	ldr	r2, [pc, #356]	@ (8004954 <HAL_DMA_Abort_IT+0x3dc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a57      	ldr	r2, [pc, #348]	@ (8004958 <HAL_DMA_Abort_IT+0x3e0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_DMA_Abort_IT+0x290>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a56      	ldr	r2, [pc, #344]	@ (800495c <HAL_DMA_Abort_IT+0x3e4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <HAL_DMA_Abort_IT+0x2a2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e007      	b.n	800482a <HAL_DMA_Abort_IT+0x2b2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3c      	ldr	r2, [pc, #240]	@ (8004920 <HAL_DMA_Abort_IT+0x3a8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d072      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a3a      	ldr	r2, [pc, #232]	@ (8004924 <HAL_DMA_Abort_IT+0x3ac>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d06d      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a39      	ldr	r2, [pc, #228]	@ (8004928 <HAL_DMA_Abort_IT+0x3b0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d068      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a37      	ldr	r2, [pc, #220]	@ (800492c <HAL_DMA_Abort_IT+0x3b4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d063      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a36      	ldr	r2, [pc, #216]	@ (8004930 <HAL_DMA_Abort_IT+0x3b8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d05e      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a34      	ldr	r2, [pc, #208]	@ (8004934 <HAL_DMA_Abort_IT+0x3bc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d059      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a33      	ldr	r2, [pc, #204]	@ (8004938 <HAL_DMA_Abort_IT+0x3c0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d054      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a31      	ldr	r2, [pc, #196]	@ (800493c <HAL_DMA_Abort_IT+0x3c4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d04f      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a30      	ldr	r2, [pc, #192]	@ (8004940 <HAL_DMA_Abort_IT+0x3c8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d04a      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2e      	ldr	r2, [pc, #184]	@ (8004944 <HAL_DMA_Abort_IT+0x3cc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d045      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2d      	ldr	r2, [pc, #180]	@ (8004948 <HAL_DMA_Abort_IT+0x3d0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d040      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2b      	ldr	r2, [pc, #172]	@ (800494c <HAL_DMA_Abort_IT+0x3d4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d03b      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004950 <HAL_DMA_Abort_IT+0x3d8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d036      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a28      	ldr	r2, [pc, #160]	@ (8004954 <HAL_DMA_Abort_IT+0x3dc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d031      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <HAL_DMA_Abort_IT+0x3e0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d02c      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a25      	ldr	r2, [pc, #148]	@ (800495c <HAL_DMA_Abort_IT+0x3e4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d027      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <HAL_DMA_Abort_IT+0x3e8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <HAL_DMA_Abort_IT+0x3ec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <HAL_DMA_Abort_IT+0x3f0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1f      	ldr	r2, [pc, #124]	@ (800496c <HAL_DMA_Abort_IT+0x3f4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <HAL_DMA_Abort_IT+0x3f8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_DMA_Abort_IT+0x3fc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <HAL_DMA_Abort_IT+0x400>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_DMA_Abort_IT+0x3a2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_DMA_Abort_IT+0x404>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d132      	bne.n	8004980 <HAL_DMA_Abort_IT+0x408>
 800491a:	2301      	movs	r3, #1
 800491c:	e031      	b.n	8004982 <HAL_DMA_Abort_IT+0x40a>
 800491e:	bf00      	nop
 8004920:	40020010 	.word	0x40020010
 8004924:	40020028 	.word	0x40020028
 8004928:	40020040 	.word	0x40020040
 800492c:	40020058 	.word	0x40020058
 8004930:	40020070 	.word	0x40020070
 8004934:	40020088 	.word	0x40020088
 8004938:	400200a0 	.word	0x400200a0
 800493c:	400200b8 	.word	0x400200b8
 8004940:	40020410 	.word	0x40020410
 8004944:	40020428 	.word	0x40020428
 8004948:	40020440 	.word	0x40020440
 800494c:	40020458 	.word	0x40020458
 8004950:	40020470 	.word	0x40020470
 8004954:	40020488 	.word	0x40020488
 8004958:	400204a0 	.word	0x400204a0
 800495c:	400204b8 	.word	0x400204b8
 8004960:	58025408 	.word	0x58025408
 8004964:	5802541c 	.word	0x5802541c
 8004968:	58025430 	.word	0x58025430
 800496c:	58025444 	.word	0x58025444
 8004970:	58025458 	.word	0x58025458
 8004974:	5802546c 	.word	0x5802546c
 8004978:	58025480 	.word	0x58025480
 800497c:	58025494 	.word	0x58025494
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d028      	beq.n	80049d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004994:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2201      	movs	r2, #1
 80049a6:	409a      	lsls	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	@ 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a12:	4b89      	ldr	r3, [pc, #548]	@ (8004c38 <HAL_GPIO_Init+0x234>)
 8004a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a16:	e194      	b.n	8004d42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	4013      	ands	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8186 	beq.w	8004d3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d005      	beq.n	8004a48 <HAL_GPIO_Init+0x44>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d130      	bne.n	8004aaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	2203      	movs	r2, #3
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a7e:	2201      	movs	r2, #1
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	f003 0201 	and.w	r2, r3, #1
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d017      	beq.n	8004ae6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d123      	bne.n	8004b3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	08da      	lsrs	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3208      	adds	r2, #8
 8004afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	08da      	lsrs	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3208      	adds	r2, #8
 8004b34:	69b9      	ldr	r1, [r7, #24]
 8004b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2203      	movs	r2, #3
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0203 	and.w	r2, r3, #3
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80e0 	beq.w	8004d3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c3c <HAL_GPIO_Init+0x238>)
 8004b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b82:	4a2e      	ldr	r2, [pc, #184]	@ (8004c3c <HAL_GPIO_Init+0x238>)
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c3c <HAL_GPIO_Init+0x238>)
 8004b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b9a:	4a29      	ldr	r2, [pc, #164]	@ (8004c40 <HAL_GPIO_Init+0x23c>)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a20      	ldr	r2, [pc, #128]	@ (8004c44 <HAL_GPIO_Init+0x240>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d052      	beq.n	8004c6c <HAL_GPIO_Init+0x268>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <HAL_GPIO_Init+0x244>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d031      	beq.n	8004c32 <HAL_GPIO_Init+0x22e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c4c <HAL_GPIO_Init+0x248>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d02b      	beq.n	8004c2e <HAL_GPIO_Init+0x22a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_GPIO_Init+0x24c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d025      	beq.n	8004c2a <HAL_GPIO_Init+0x226>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <HAL_GPIO_Init+0x250>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01f      	beq.n	8004c26 <HAL_GPIO_Init+0x222>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_GPIO_Init+0x254>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d019      	beq.n	8004c22 <HAL_GPIO_Init+0x21e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <HAL_GPIO_Init+0x258>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_GPIO_Init+0x21a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_GPIO_Init+0x25c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00d      	beq.n	8004c1a <HAL_GPIO_Init+0x216>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <HAL_GPIO_Init+0x260>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <HAL_GPIO_Init+0x212>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a17      	ldr	r2, [pc, #92]	@ (8004c68 <HAL_GPIO_Init+0x264>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <HAL_GPIO_Init+0x20e>
 8004c0e:	2309      	movs	r3, #9
 8004c10:	e02d      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c12:	230a      	movs	r3, #10
 8004c14:	e02b      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c16:	2308      	movs	r3, #8
 8004c18:	e029      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c1a:	2307      	movs	r3, #7
 8004c1c:	e027      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c1e:	2306      	movs	r3, #6
 8004c20:	e025      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c22:	2305      	movs	r3, #5
 8004c24:	e023      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c26:	2304      	movs	r3, #4
 8004c28:	e021      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e01f      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e01d      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e01b      	b.n	8004c6e <HAL_GPIO_Init+0x26a>
 8004c36:	bf00      	nop
 8004c38:	58000080 	.word	0x58000080
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	58000400 	.word	0x58000400
 8004c44:	58020000 	.word	0x58020000
 8004c48:	58020400 	.word	0x58020400
 8004c4c:	58020800 	.word	0x58020800
 8004c50:	58020c00 	.word	0x58020c00
 8004c54:	58021000 	.word	0x58021000
 8004c58:	58021400 	.word	0x58021400
 8004c5c:	58021800 	.word	0x58021800
 8004c60:	58021c00 	.word	0x58021c00
 8004c64:	58022000 	.word	0x58022000
 8004c68:	58022400 	.word	0x58022400
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	f002 0203 	and.w	r2, r2, #3
 8004c74:	0092      	lsls	r2, r2, #2
 8004c76:	4093      	lsls	r3, r2
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c7e:	4938      	ldr	r1, [pc, #224]	@ (8004d60 <HAL_GPIO_Init+0x35c>)
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	089b      	lsrs	r3, r3, #2
 8004c84:	3302      	adds	r3, #2
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f ae63 	bne.w	8004a18 <HAL_GPIO_Init+0x14>
  }
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	3724      	adds	r7, #36	@ 0x24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	58000400 	.word	0x58000400

08004d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
 8004d70:	4613      	mov	r3, r2
 8004d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d74:	787b      	ldrb	r3, [r7, #1]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d80:	e003      	b.n	8004d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	041a      	lsls	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	619a      	str	r2, [r3, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0bd      	b.n	8004f26 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d031      	beq.n	8004e52 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4f      	ldr	r2, [pc, #316]	@ (8004f30 <HAL_HRTIM_Init+0x198>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d10e      	bne.n	8004e16 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004df8:	4b4e      	ldr	r3, [pc, #312]	@ (8004f34 <HAL_HRTIM_Init+0x19c>)
 8004dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8004f34 <HAL_HRTIM_Init+0x19c>)
 8004e00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e08:	4b4a      	ldr	r3, [pc, #296]	@ (8004f34 <HAL_HRTIM_Init+0x19c>)
 8004e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004e24:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e3a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd ff96 	bl	8002d84 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d012      	beq.n	8004e8a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e72:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
 8004e9e:	e03e      	b.n	8004f1e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004ea0:	7dfa      	ldrb	r2, [r7, #23]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3318      	adds	r3, #24
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004eb4:	7dfa      	ldrb	r2, [r7, #23]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	331c      	adds	r3, #28
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004ec8:	7dfa      	ldrb	r2, [r7, #23]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3320      	adds	r3, #32
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004edc:	7dfa      	ldrb	r2, [r7, #23]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	3324      	adds	r3, #36	@ 0x24
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004ef0:	7dfa      	ldrb	r2, [r7, #23]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3328      	adds	r3, #40	@ 0x28
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004f04:	7dfa      	ldrb	r2, [r7, #23]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	3330      	adds	r3, #48	@ 0x30
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b05      	cmp	r3, #5
 8004f22:	d9bd      	bls.n	8004ea0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40017400 	.word	0x40017400
 8004f34:	58024400 	.word	0x58024400

08004f38 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d101      	bne.n	8004f54 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e015      	b.n	8004f80 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d104      	bne.n	8004f6c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fa88 	bl	800547a <HRTIM_MasterBase_Config>
 8004f6a:	e004      	b.n	8004f76 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fab1 	bl	80054d8 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e01c      	b.n	8004fde <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_HRTIM_EventConfig+0x2a>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e015      	b.n	8004fde <HAL_HRTIM_EventConfig+0x56>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fd44 	bl	8005a54 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d101      	bne.n	8005000 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e025      	b.n	800504c <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_HRTIM_EventPrescalerConfig+0x28>
 800500a:	2302      	movs	r3, #2
 800500c:	e01e      	b.n	800504c <HAL_HRTIM_EventPrescalerConfig+0x66>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8005026:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d101      	bne.n	8005074 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
 8005072:	e05f      	b.n	8005134 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800507e:	2302      	movs	r3, #2
 8005080:	e058      	b.n	8005134 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b05      	cmp	r3, #5
 8005096:	d104      	bne.n	80050a2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 fa5c 	bl	8005558 <HRTIM_MasterWaveform_Config>
 80050a0:	e004      	b.n	80050ac <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fabc 	bl	8005624 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4403      	add	r3, r0
 80050be:	3320      	adds	r3, #32
 80050c0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4403      	add	r3, r0
 80050d4:	3324      	adds	r3, #36	@ 0x24
 80050d6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4403      	add	r3, r0
 80050ea:	3328      	adds	r3, #40	@ 0x28
 80050ec:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68d9      	ldr	r1, [r3, #12]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4403      	add	r3, r0
 8005100:	332c      	adds	r3, #44	@ 0x2c
 8005102:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6919      	ldr	r1, [r3, #16]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4403      	add	r3, r0
 8005116:	3330      	adds	r3, #48	@ 0x30
 8005118:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fec1 	bl	8005ea4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d101      	bne.n	800515a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
 8005158:	e157      	b.n	800540a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005164:	2302      	movs	r3, #2
 8005166:	e150      	b.n	800540a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b05      	cmp	r3, #5
 800517c:	d140      	bne.n	8005200 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3b01      	subs	r3, #1
 8005182:	2b07      	cmp	r3, #7
 8005184:	d82a      	bhi.n	80051dc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005186:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051ad 	.word	0x080051ad
 8005190:	080051b9 	.word	0x080051b9
 8005194:	080051dd 	.word	0x080051dd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051dd 	.word	0x080051dd
 80051a0:	080051dd 	.word	0x080051dd
 80051a4:	080051dd 	.word	0x080051dd
 80051a8:	080051d1 	.word	0x080051d1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	61da      	str	r2, [r3, #28]
        break;
 80051b6:	e01a      	b.n	80051ee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80051c2:	e014      	b.n	80051ee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80051ce:	e00e      	b.n	80051ee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80051da:	e008      	b.n	80051ee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2207      	movs	r2, #7
 80051e0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 80051ec:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b07      	cmp	r3, #7
 80051f8:	f040 80fe 	bne.w	80053f8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e104      	b.n	800540a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3b01      	subs	r3, #1
 8005204:	2b07      	cmp	r3, #7
 8005206:	f200 80e3 	bhi.w	80053d0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005231 	.word	0x08005231
 8005214:	08005245 	.word	0x08005245
 8005218:	080053d1 	.word	0x080053d1
 800521c:	08005301 	.word	0x08005301
 8005220:	080053d1 	.word	0x080053d1
 8005224:	080053d1 	.word	0x080053d1
 8005228:	080053d1 	.word	0x080053d1
 800522c:	08005315 	.word	0x08005315
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	01db      	lsls	r3, r3, #7
 800523c:	440b      	add	r3, r1
 800523e:	339c      	adds	r3, #156	@ 0x9c
 8005240:	601a      	str	r2, [r3, #0]
        break;
 8005242:	e0d1      	b.n	80053e8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	01db      	lsls	r3, r3, #7
 8005250:	440b      	add	r3, r1
 8005252:	33a4      	adds	r3, #164	@ 0xa4
 8005254:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03f      	beq.n	80052de <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	3301      	adds	r3, #1
 8005266:	01db      	lsls	r3, r3, #7
 8005268:	4413      	add	r3, r2
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	6811      	ldr	r1, [r2, #0]
 8005270:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3301      	adds	r3, #1
 8005278:	01db      	lsls	r3, r3, #7
 800527a:	440b      	add	r3, r1
 800527c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3301      	adds	r3, #1
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4413      	add	r3, r2
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	6809      	ldr	r1, [r1, #0]
 8005294:	431a      	orrs	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	3301      	adds	r3, #1
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	440b      	add	r3, r1
 800529e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a8:	d109      	bne.n	80052be <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	01db      	lsls	r3, r3, #7
 80052b6:	440b      	add	r3, r1
 80052b8:	339c      	adds	r3, #156	@ 0x9c
 80052ba:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80052bc:	e091      	b.n	80053e2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052c6:	f040 808c 	bne.w	80053e2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	01db      	lsls	r3, r3, #7
 80052d6:	440b      	add	r3, r1
 80052d8:	33a8      	adds	r3, #168	@ 0xa8
 80052da:	601a      	str	r2, [r3, #0]
         break;
 80052dc:	e081      	b.n	80053e2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3301      	adds	r3, #1
 80052e6:	01db      	lsls	r3, r3, #7
 80052e8:	4413      	add	r3, r2
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	6811      	ldr	r1, [r2, #0]
 80052f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3301      	adds	r3, #1
 80052f8:	01db      	lsls	r3, r3, #7
 80052fa:	440b      	add	r3, r1
 80052fc:	601a      	str	r2, [r3, #0]
         break;
 80052fe:	e070      	b.n	80053e2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	440b      	add	r3, r1
 800530e:	33a8      	adds	r3, #168	@ 0xa8
 8005310:	601a      	str	r2, [r3, #0]
        break;
 8005312:	e069      	b.n	80053e8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	01db      	lsls	r3, r3, #7
 8005320:	440b      	add	r3, r1
 8005322:	33ac      	adds	r3, #172	@ 0xac
 8005324:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03f      	beq.n	80053ae <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	3301      	adds	r3, #1
 8005336:	01db      	lsls	r3, r3, #7
 8005338:	4413      	add	r3, r2
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	6811      	ldr	r1, [r2, #0]
 8005340:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3301      	adds	r3, #1
 8005348:	01db      	lsls	r3, r3, #7
 800534a:	440b      	add	r3, r1
 800534c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	3301      	adds	r3, #1
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	4413      	add	r3, r2
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	6809      	ldr	r1, [r1, #0]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3301      	adds	r3, #1
 800536c:	01db      	lsls	r3, r3, #7
 800536e:	440b      	add	r3, r1
 8005370:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537a:	d109      	bne.n	8005390 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	01db      	lsls	r3, r3, #7
 8005388:	440b      	add	r3, r1
 800538a:	339c      	adds	r3, #156	@ 0x9c
 800538c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800538e:	e02a      	b.n	80053e6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005398:	d125      	bne.n	80053e6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	01db      	lsls	r3, r3, #7
 80053a6:	440b      	add	r3, r1
 80053a8:	33a8      	adds	r3, #168	@ 0xa8
 80053aa:	601a      	str	r2, [r3, #0]
         break;
 80053ac:	e01b      	b.n	80053e6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	3301      	adds	r3, #1
 80053b6:	01db      	lsls	r3, r3, #7
 80053b8:	4413      	add	r3, r2
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	6811      	ldr	r1, [r2, #0]
 80053c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3301      	adds	r3, #1
 80053c8:	01db      	lsls	r3, r3, #7
 80053ca:	440b      	add	r3, r1
 80053cc:	601a      	str	r2, [r3, #0]
         break;
 80053ce:	e00a      	b.n	80053e6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2207      	movs	r2, #7
 80053d4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 80053e0:	e002      	b.n	80053e8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80053e6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	d101      	bne.n	80053f8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e008      	b.n	800540a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop

08005418 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d101      	bne.n	8005436 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
 8005434:	e01d      	b.n	8005472 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005440:	2302      	movs	r3, #2
 8005442:	e016      	b.n	8005472 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa22 	bl	80058a4 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0307 	bic.w	r3, r3, #7
 8005492:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f023 0318 	bic.w	r3, r3, #24
 80054a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6852      	ldr	r2, [r2, #4]
 80054ca:	619a      	str	r2, [r3, #24]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	3301      	adds	r3, #1
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	4413      	add	r3, r2
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 0318 	bic.w	r3, r3, #24
 800550c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	3301      	adds	r3, #1
 8005520:	01db      	lsls	r3, r3, #7
 8005522:	4413      	add	r3, r2
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	01db      	lsls	r3, r3, #7
 8005534:	440b      	add	r3, r1
 8005536:	3394      	adds	r3, #148	@ 0x94
 8005538:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6819      	ldr	r1, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	440b      	add	r3, r1
 8005548:	3398      	adds	r3, #152	@ 0x98
 800554a:	601a      	str	r2, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005572:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0320 	bic.w	r3, r3, #32
 800557a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800558c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800559e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055b0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80055c2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80055d4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80055e8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fa:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005624:	b480      	push	{r7}
 8005626:	b08b      	sub	sp, #44	@ 0x2c
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	3301      	adds	r3, #1
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	6811      	ldr	r1, [r2, #0]
 8005642:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3301      	adds	r3, #1
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	440b      	add	r3, r1
 800564e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3301      	adds	r3, #1
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	4413      	add	r3, r2
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	01db      	lsls	r3, r3, #7
 8005668:	4413      	add	r3, r2
 800566a:	33e8      	adds	r3, #232	@ 0xe8
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	01db      	lsls	r3, r3, #7
 8005678:	4413      	add	r3, r2
 800567a:	33e4      	adds	r3, #228	@ 0xe4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005688:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	f023 0320 	bic.w	r3, r3, #32
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005698:	4313      	orrs	r3, r2
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056aa:	4313      	orrs	r3, r2
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056bc:	4313      	orrs	r3, r2
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ce:	4313      	orrs	r3, r2
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	4313      	orrs	r3, r2
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f2:	4313      	orrs	r3, r2
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005706:	d103      	bne.n	8005710 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571e:	4313      	orrs	r3, r2
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	4313      	orrs	r3, r2
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005742:	4313      	orrs	r3, r2
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f023 031f 	bic.w	r3, r3, #31
 800574c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005762:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d108      	bne.n	8005788 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800577c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	4313      	orrs	r3, r2
 8005786:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005790:	d004      	beq.n	800579c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800579a:	d103      	bne.n	80057a4 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a0:	2b40      	cmp	r3, #64	@ 0x40
 80057a2:	d108      	bne.n	80057b6 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80057aa:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d843      	bhi.n	800584a <HRTIM_TimingUnitWaveform_Config+0x226>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057dd 	.word	0x080057dd
 80057cc:	080057f3 	.word	0x080057f3
 80057d0:	08005809 	.word	0x08005809
 80057d4:	0800581f 	.word	0x0800581f
 80057d8:	08005835 	.word	0x08005835
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057e2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61fb      	str	r3, [r7, #28]
      break;
 80057f0:	e02c      	b.n	800584c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]
      break;
 8005806:	e021      	b.n	800584c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800580e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	4313      	orrs	r3, r2
 800581a:	61fb      	str	r3, [r7, #28]
      break;
 800581c:	e016      	b.n	800584c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005824:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	61fb      	str	r3, [r7, #28]
      break;
 8005832:	e00b      	b.n	800584c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800583a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	015b      	lsls	r3, r3, #5
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	4313      	orrs	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
      break;
 8005848:	e000      	b.n	800584c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800584a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3301      	adds	r3, #1
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	4413      	add	r3, r2
 8005858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	01db      	lsls	r3, r3, #7
 8005864:	4413      	add	r3, r2
 8005866:	33e8      	adds	r3, #232	@ 0xe8
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	01db      	lsls	r3, r3, #7
 8005874:	4413      	add	r3, r2
 8005876:	33e4      	adds	r3, #228	@ 0xe4
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	33d4      	adds	r3, #212	@ 0xd4
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005896:	bf00      	nop
 8005898:	372c      	adds	r7, #44	@ 0x2c
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	@ 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	01db      	lsls	r3, r3, #7
 80058be:	4413      	add	r3, r2
 80058c0:	33e4      	adds	r3, #228	@ 0xe4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	01db      	lsls	r3, r3, #7
 80058ce:	4413      	add	r3, r2
 80058d0:	33b8      	adds	r3, #184	@ 0xb8
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	617b      	str	r3, [r7, #20]

  switch (Output)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058dc:	d04d      	beq.n	800597a <HRTIM_OutputConfig+0xd6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e4:	d85e      	bhi.n	80059a4 <HRTIM_OutputConfig+0x100>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ec:	d032      	beq.n	8005954 <HRTIM_OutputConfig+0xb0>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f4:	d856      	bhi.n	80059a4 <HRTIM_OutputConfig+0x100>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b80      	cmp	r3, #128	@ 0x80
 80058fa:	d03e      	beq.n	800597a <HRTIM_OutputConfig+0xd6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b80      	cmp	r3, #128	@ 0x80
 8005900:	d850      	bhi.n	80059a4 <HRTIM_OutputConfig+0x100>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b40      	cmp	r3, #64	@ 0x40
 8005906:	d025      	beq.n	8005954 <HRTIM_OutputConfig+0xb0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b40      	cmp	r3, #64	@ 0x40
 800590c:	d84a      	bhi.n	80059a4 <HRTIM_OutputConfig+0x100>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d01f      	beq.n	8005954 <HRTIM_OutputConfig+0xb0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d044      	beq.n	80059a4 <HRTIM_OutputConfig+0x100>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b20      	cmp	r3, #32
 800591e:	d841      	bhi.n	80059a4 <HRTIM_OutputConfig+0x100>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d33e      	bcc.n	80059a4 <HRTIM_OutputConfig+0x100>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3b02      	subs	r3, #2
 800592a:	2201      	movs	r2, #1
 800592c:	409a      	lsls	r2, r3
 800592e:	4b48      	ldr	r3, [pc, #288]	@ (8005a50 <HRTIM_OutputConfig+0x1ac>)
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	bf14      	ite	ne
 8005936:	2301      	movne	r3, #1
 8005938:	2300      	moveq	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11c      	bne.n	800597a <HRTIM_OutputConfig+0xd6>
 8005940:	f244 0304 	movw	r3, #16388	@ 0x4004
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d027      	beq.n	80059a4 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	01db      	lsls	r3, r3, #7
 8005960:	440b      	add	r3, r1
 8005962:	33bc      	adds	r3, #188	@ 0xbc
 8005964:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	01db      	lsls	r3, r3, #7
 8005972:	440b      	add	r3, r1
 8005974:	33c0      	adds	r3, #192	@ 0xc0
 8005976:	601a      	str	r2, [r3, #0]
      break;
 8005978:	e015      	b.n	80059a6 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	01db      	lsls	r3, r3, #7
 8005986:	440b      	add	r3, r1
 8005988:	33c4      	adds	r3, #196	@ 0xc4
 800598a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	01db      	lsls	r3, r3, #7
 8005998:	440b      	add	r3, r1
 800599a:	33c8      	adds	r3, #200	@ 0xc8
 800599c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800599e:	2310      	movs	r3, #16
 80059a0:	61bb      	str	r3, [r7, #24]
      break;
 80059a2:	e000      	b.n	80059a6 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 80059a4:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80059a6:	22fe      	movs	r2, #254	@ 0xfe
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d111      	bne.n	8005a32 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10c      	bne.n	8005a32 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d107      	bne.n	8005a32 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	4413      	add	r3, r2
 8005a3c:	33e4      	adds	r3, #228	@ 0xe4
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3724      	adds	r7, #36	@ 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40000041 	.word	0x40000041

08005a54 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	@ 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8005a68:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8005a72:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8005a7c:	617b      	str	r3, [r7, #20]

  switch (Event)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b0a      	cmp	r3, #10
 8005a82:	f200 8208 	bhi.w	8005e96 <HRTIM_EventConfig+0x442>
 8005a86:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <HRTIM_EventConfig+0x38>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005ad9 	.word	0x08005ad9
 8005a94:	08005b2f 	.word	0x08005b2f
 8005a98:	08005b8b 	.word	0x08005b8b
 8005a9c:	08005be9 	.word	0x08005be9
 8005aa0:	08005c47 	.word	0x08005c47
 8005aa4:	08005ca5 	.word	0x08005ca5
 8005aa8:	08005d03 	.word	0x08005d03
 8005aac:	08005d67 	.word	0x08005d67
 8005ab0:	08005dcb 	.word	0x08005dcb
 8005ab4:	08005e31 	.word	0x08005e31
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005ad6:	e1df      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ade:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0318 	and.w	r3, r3, #24
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005b2c:	e1b4      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8005b34:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	019b      	lsls	r3, r3, #6
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	019b      	lsls	r3, r3, #6
 8005b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005b88:	e186      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b90:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	031b      	lsls	r3, r3, #12
 8005b98:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	031b      	lsls	r3, r3, #12
 8005ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	031b      	lsls	r3, r3, #12
 8005bb8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005be6:	e157      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8005bee:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	049b      	lsls	r3, r3, #18
 8005bf6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	049b      	lsls	r3, r3, #18
 8005c06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	049b      	lsls	r3, r3, #18
 8005c16:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	049b      	lsls	r3, r3, #18
 8005c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005c44:	e128      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005c4c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	061b      	lsls	r3, r3, #24
 8005c54:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	061b      	lsls	r3, r3, #24
 8005c74:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	061b      	lsls	r3, r3, #24
 8005c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005ca2:	e0f9      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f023 031f 	bic.w	r3, r3, #31
 8005caa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0318 	and.w	r3, r3, #24
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 030f 	bic.w	r3, r3, #15
 8005cdc:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005d00:	e0ca      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8005d08:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	019b      	lsls	r3, r3, #6
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8005d3e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005d64:	e098      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8005d6c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	031b      	lsls	r3, r3, #12
 8005d74:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	031b      	lsls	r3, r3, #12
 8005d94:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005da4:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	031b      	lsls	r3, r3, #12
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005dc8:	e066      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005dd0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	049b      	lsls	r3, r3, #18
 8005dd8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	049b      	lsls	r3, r3, #18
 8005de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	049b      	lsls	r3, r3, #18
 8005df8:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8005e08:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	049b      	lsls	r3, r3, #18
 8005e10:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005e2e:	e033      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8005e36:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	061b      	lsls	r3, r3, #24
 8005e3e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	061b      	lsls	r3, r3, #24
 8005e5e:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005e6e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005e94:	e000      	b.n	8005e98 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8005e96:	bf00      	nop
  }
}
 8005e98:	bf00      	nop
 8005e9a:	3724      	adds	r7, #36	@ 0x24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b05      	cmp	r3, #5
 8005eb2:	d851      	bhi.n	8005f58 <HRTIM_ForceRegistersUpdate+0xb4>
 8005eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ebc <HRTIM_ForceRegistersUpdate+0x18>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005f01 	.word	0x08005f01
 8005ec4:	08005f17 	.word	0x08005f17
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f43 	.word	0x08005f43
 8005ed0:	08005ed5 	.word	0x08005ed5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005ee8:	e037      	b.n	8005f5a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0202 	orr.w	r2, r2, #2
 8005efa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005efe:	e02c      	b.n	8005f5a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0204 	orr.w	r2, r2, #4
 8005f10:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f14:	e021      	b.n	8005f5a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f2a:	e016      	b.n	8005f5a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0210 	orr.w	r2, r2, #16
 8005f3c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f40:	e00b      	b.n	8005f5a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0220 	orr.w	r2, r2, #32
 8005f52:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f56:	e000      	b.n	8005f5a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8005f58:	bf00      	nop
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e097      	b.n	80060aa <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fc ff8d 	bl	8002eb4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d004      	beq.n	8005fbc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fba:	d103      	bne.n	8005fc4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 031e 	bic.w	r3, r3, #30
 8005fc2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4b38      	ldr	r3, [pc, #224]	@ (80060b4 <HAL_LPTIM_Init+0x14c>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4b37      	ldr	r3, [pc, #220]	@ (80060b8 <HAL_LPTIM_Init+0x150>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005fe8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005fee:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005ff4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8005ffa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d107      	bne.n	800601a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006012:	4313      	orrs	r3, r2
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d004      	beq.n	800602c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800602a:	d107      	bne.n	800603c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006034:	4313      	orrs	r3, r2
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006044:	4293      	cmp	r3, r2
 8006046:	d00a      	beq.n	800605e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006050:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006056:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a14      	ldr	r2, [pc, #80]	@ (80060bc <HAL_LPTIM_Init+0x154>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_LPTIM_Init+0x112>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a12      	ldr	r2, [pc, #72]	@ (80060c0 <HAL_LPTIM_Init+0x158>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	625a      	str	r2, [r3, #36]	@ 0x24
 800608a:	e009      	b.n	80060a0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <HAL_LPTIM_Init+0x15c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d104      	bne.n	80060a0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800609e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	ffff1f3f 	.word	0xffff1f3f
 80060b8:	ff19f1fe 	.word	0xff19f1fe
 80060bc:	40002400 	.word	0x40002400
 80060c0:	58002400 	.word	0x58002400
 80060c4:	58002800 	.word	0x58002800

080060c8 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80060ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2210      	movs	r2, #16
 8006102:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800610c:	2110      	movs	r1, #16
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f97e 	bl	8006410 <LPTIM_WaitForFlag>
 8006114:	4603      	mov	r3, r0
 8006116:	2b03      	cmp	r3, #3
 8006118:	d101      	bne.n	800611e <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e01d      	b.n	800615a <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2208      	movs	r2, #8
 8006124:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800612e:	2108      	movs	r1, #8
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f96d 	bl	8006410 <LPTIM_WaitForFlag>
 8006136:	4603      	mov	r3, r0
 8006138:	2b03      	cmp	r3, #3
 800613a:	d101      	bne.n	8006140 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e00c      	b.n	800615a <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0204 	orr.w	r2, r2, #4
 800614e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d00c      	beq.n	8006196 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006184:	d107      	bne.n	8006196 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8006194:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2210      	movs	r2, #16
 80061ac:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80061b6:	2110      	movs	r1, #16
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f929 	bl	8006410 <LPTIM_WaitForFlag>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d101      	bne.n	80061c8 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e02f      	b.n	8006228 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f951 	bl	8006470 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f90f 	bl	80063f2 <HAL_LPTIM_GetState>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d101      	bne.n	80061de <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e024      	b.n	8006228 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0210 	orr.w	r2, r2, #16
 80061ec:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0202 	orr.w	r2, r2, #2
 80061fc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0201 	orr.w	r2, r2, #1
 800620c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0204 	orr.w	r2, r2, #4
 800621c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10d      	bne.n	8006262 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2201      	movs	r2, #1
 800625a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f882 	bl	8006366 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d10d      	bne.n	800628c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d106      	bne.n	800628c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2202      	movs	r2, #2
 8006284:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f877 	bl	800637a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b04      	cmp	r3, #4
 8006298:	d10d      	bne.n	80062b6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d106      	bne.n	80062b6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2204      	movs	r2, #4
 80062ae:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f86c 	bl	800638e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d10d      	bne.n	80062e0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d106      	bne.n	80062e0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2208      	movs	r2, #8
 80062d8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f861 	bl	80063a2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d10d      	bne.n	800630a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d106      	bne.n	800630a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2210      	movs	r2, #16
 8006302:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f856 	bl	80063b6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b20      	cmp	r3, #32
 8006316:	d10d      	bne.n	8006334 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b20      	cmp	r3, #32
 8006324:	d106      	bne.n	8006334 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2220      	movs	r2, #32
 800632c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f84b 	bl	80063ca <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b40      	cmp	r3, #64	@ 0x40
 8006340:	d10d      	bne.n	800635e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d106      	bne.n	800635e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2240      	movs	r2, #64	@ 0x40
 8006356:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f840 	bl	80063de <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006400:	b2db      	uxtb	r3, r3
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800641e:	4b12      	ldr	r3, [pc, #72]	@ (8006468 <LPTIM_WaitForFlag+0x58>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a12      	ldr	r2, [pc, #72]	@ (800646c <LPTIM_WaitForFlag+0x5c>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	0b9b      	lsrs	r3, r3, #14
 800642a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	3b01      	subs	r3, #1
 8006438:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	4013      	ands	r3, r2
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d002      	beq.n	800645a <LPTIM_WaitForFlag+0x4a>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ec      	bne.n	8006434 <LPTIM_WaitForFlag+0x24>

  return result;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	24000010 	.word	0x24000010
 800646c:	d1b71759 	.word	0xd1b71759

08006470 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	@ 0x30
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647c:	f3ef 8310 	mrs	r3, PRIMASK
 8006480:	60fb      	str	r3, [r7, #12]
  return(result);
 8006482:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006486:	2301      	movs	r3, #1
 8006488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f383 8810 	msr	PRIMASK, r3
}
 8006490:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a81      	ldr	r2, [pc, #516]	@ (800669c <LPTIM_Disable+0x22c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d02d      	beq.n	80064f8 <LPTIM_Disable+0x88>
 800649c:	4a7f      	ldr	r2, [pc, #508]	@ (800669c <LPTIM_Disable+0x22c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d830      	bhi.n	8006504 <LPTIM_Disable+0x94>
 80064a2:	4a7f      	ldr	r2, [pc, #508]	@ (80066a0 <LPTIM_Disable+0x230>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d021      	beq.n	80064ec <LPTIM_Disable+0x7c>
 80064a8:	4a7d      	ldr	r2, [pc, #500]	@ (80066a0 <LPTIM_Disable+0x230>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d82a      	bhi.n	8006504 <LPTIM_Disable+0x94>
 80064ae:	4a7d      	ldr	r2, [pc, #500]	@ (80066a4 <LPTIM_Disable+0x234>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d015      	beq.n	80064e0 <LPTIM_Disable+0x70>
 80064b4:	4a7b      	ldr	r2, [pc, #492]	@ (80066a4 <LPTIM_Disable+0x234>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d824      	bhi.n	8006504 <LPTIM_Disable+0x94>
 80064ba:	4a7b      	ldr	r2, [pc, #492]	@ (80066a8 <LPTIM_Disable+0x238>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <LPTIM_Disable+0x58>
 80064c0:	4a7a      	ldr	r2, [pc, #488]	@ (80066ac <LPTIM_Disable+0x23c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d006      	beq.n	80064d4 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80064c6:	e01d      	b.n	8006504 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80064c8:	4b79      	ldr	r3, [pc, #484]	@ (80066b0 <LPTIM_Disable+0x240>)
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80064d2:	e018      	b.n	8006506 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80064d4:	4b76      	ldr	r3, [pc, #472]	@ (80066b0 <LPTIM_Disable+0x240>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80064dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80064de:	e012      	b.n	8006506 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80064e0:	4b73      	ldr	r3, [pc, #460]	@ (80066b0 <LPTIM_Disable+0x240>)
 80064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80064e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80064ea:	e00c      	b.n	8006506 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 80064ec:	4b70      	ldr	r3, [pc, #448]	@ (80066b0 <LPTIM_Disable+0x240>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80064f6:	e006      	b.n	8006506 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80064f8:	4b6d      	ldr	r3, [pc, #436]	@ (80066b0 <LPTIM_Disable+0x240>)
 80064fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006502:	e000      	b.n	8006506 <LPTIM_Disable+0x96>
      break;
 8006504:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a5a      	ldr	r2, [pc, #360]	@ (800669c <LPTIM_Disable+0x22c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d059      	beq.n	80065ec <LPTIM_Disable+0x17c>
 8006538:	4a58      	ldr	r2, [pc, #352]	@ (800669c <LPTIM_Disable+0x22c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d867      	bhi.n	800660e <LPTIM_Disable+0x19e>
 800653e:	4a58      	ldr	r2, [pc, #352]	@ (80066a0 <LPTIM_Disable+0x230>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d042      	beq.n	80065ca <LPTIM_Disable+0x15a>
 8006544:	4a56      	ldr	r2, [pc, #344]	@ (80066a0 <LPTIM_Disable+0x230>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d861      	bhi.n	800660e <LPTIM_Disable+0x19e>
 800654a:	4a56      	ldr	r2, [pc, #344]	@ (80066a4 <LPTIM_Disable+0x234>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d02b      	beq.n	80065a8 <LPTIM_Disable+0x138>
 8006550:	4a54      	ldr	r2, [pc, #336]	@ (80066a4 <LPTIM_Disable+0x234>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d85b      	bhi.n	800660e <LPTIM_Disable+0x19e>
 8006556:	4a54      	ldr	r2, [pc, #336]	@ (80066a8 <LPTIM_Disable+0x238>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <LPTIM_Disable+0xf4>
 800655c:	4a53      	ldr	r2, [pc, #332]	@ (80066ac <LPTIM_Disable+0x23c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d011      	beq.n	8006586 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8006562:	e054      	b.n	800660e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8006564:	4b52      	ldr	r3, [pc, #328]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	4a51      	ldr	r2, [pc, #324]	@ (80066b0 <LPTIM_Disable+0x240>)
 800656c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006574:	4b4e      	ldr	r3, [pc, #312]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657a:	4a4d      	ldr	r2, [pc, #308]	@ (80066b0 <LPTIM_Disable+0x240>)
 800657c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8006584:	e044      	b.n	8006610 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006586:	4b4a      	ldr	r3, [pc, #296]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800658c:	4a48      	ldr	r2, [pc, #288]	@ (80066b0 <LPTIM_Disable+0x240>)
 800658e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006592:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006596:	4b46      	ldr	r3, [pc, #280]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006598:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659c:	4a44      	ldr	r2, [pc, #272]	@ (80066b0 <LPTIM_Disable+0x240>)
 800659e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80065a6:	e033      	b.n	8006610 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80065a8:	4b41      	ldr	r3, [pc, #260]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065ae:	4a40      	ldr	r2, [pc, #256]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80065b8:	4b3d      	ldr	r3, [pc, #244]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065be:	4a3c      	ldr	r2, [pc, #240]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80065c8:	e022      	b.n	8006610 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 80065ca:	4b39      	ldr	r3, [pc, #228]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d0:	4a37      	ldr	r2, [pc, #220]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80065d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 80065da:	4b35      	ldr	r3, [pc, #212]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e0:	4a33      	ldr	r2, [pc, #204]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80065ea:	e011      	b.n	8006610 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 80065ec:	4b30      	ldr	r3, [pc, #192]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065f2:	4a2f      	ldr	r2, [pc, #188]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065f8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80065fc:	4b2c      	ldr	r3, [pc, #176]	@ (80066b0 <LPTIM_Disable+0x240>)
 80065fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006602:	4a2b      	ldr	r2, [pc, #172]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006604:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006608:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800660c:	e000      	b.n	8006610 <LPTIM_Disable+0x1a0>
      break;
 800660e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <LPTIM_Disable+0x1ae>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80d1 	beq.w	80067c0 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1e      	ldr	r2, [pc, #120]	@ (800669c <LPTIM_Disable+0x22c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d031      	beq.n	800668c <LPTIM_Disable+0x21c>
 8006628:	4a1c      	ldr	r2, [pc, #112]	@ (800669c <LPTIM_Disable+0x22c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d842      	bhi.n	80066b4 <LPTIM_Disable+0x244>
 800662e:	4a1c      	ldr	r2, [pc, #112]	@ (80066a0 <LPTIM_Disable+0x230>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d024      	beq.n	800667e <LPTIM_Disable+0x20e>
 8006634:	4a1a      	ldr	r2, [pc, #104]	@ (80066a0 <LPTIM_Disable+0x230>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d83c      	bhi.n	80066b4 <LPTIM_Disable+0x244>
 800663a:	4a1a      	ldr	r2, [pc, #104]	@ (80066a4 <LPTIM_Disable+0x234>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d017      	beq.n	8006670 <LPTIM_Disable+0x200>
 8006640:	4a18      	ldr	r2, [pc, #96]	@ (80066a4 <LPTIM_Disable+0x234>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d836      	bhi.n	80066b4 <LPTIM_Disable+0x244>
 8006646:	4a18      	ldr	r2, [pc, #96]	@ (80066a8 <LPTIM_Disable+0x238>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <LPTIM_Disable+0x1e4>
 800664c:	4a17      	ldr	r2, [pc, #92]	@ (80066ac <LPTIM_Disable+0x23c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d007      	beq.n	8006662 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8006652:	e02f      	b.n	80066b4 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8006654:	4b16      	ldr	r3, [pc, #88]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006658:	4a15      	ldr	r2, [pc, #84]	@ (80066b0 <LPTIM_Disable+0x240>)
 800665a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800665e:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8006660:	e029      	b.n	80066b6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8006662:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006666:	4a12      	ldr	r2, [pc, #72]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006668:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800666c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800666e:	e022      	b.n	80066b6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8006670:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006674:	4a0e      	ldr	r2, [pc, #56]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006676:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800667a:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800667c:	e01b      	b.n	80066b6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800667e:	4b0c      	ldr	r3, [pc, #48]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006682:	4a0b      	ldr	r2, [pc, #44]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006684:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006688:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800668a:	e014      	b.n	80066b6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800668c:	4b08      	ldr	r3, [pc, #32]	@ (80066b0 <LPTIM_Disable+0x240>)
 800668e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006690:	4a07      	ldr	r2, [pc, #28]	@ (80066b0 <LPTIM_Disable+0x240>)
 8006692:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006696:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8006698:	e00d      	b.n	80066b6 <LPTIM_Disable+0x246>
 800669a:	bf00      	nop
 800669c:	58003000 	.word	0x58003000
 80066a0:	58002c00 	.word	0x58002c00
 80066a4:	58002800 	.word	0x58002800
 80066a8:	40002400 	.word	0x40002400
 80066ac:	58002400 	.word	0x58002400
 80066b0:	58024400 	.word	0x58024400
        break;
 80066b4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01a      	beq.n	80066f2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80066d4:	2108      	movs	r1, #8
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fe9a 	bl	8006410 <LPTIM_WaitForFlag>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d103      	bne.n	80066ea <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2203      	movs	r2, #3
 80066e6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2208      	movs	r2, #8
 80066f0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01a      	beq.n	800672e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006710:	2110      	movs	r1, #16
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fe7c 	bl	8006410 <LPTIM_WaitForFlag>
 8006718:	4603      	mov	r3, r0
 800671a:	2b03      	cmp	r3, #3
 800671c:	d103      	bne.n	8006726 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2203      	movs	r2, #3
 8006722:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2210      	movs	r2, #16
 800672c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a32      	ldr	r2, [pc, #200]	@ (80067fc <LPTIM_Disable+0x38c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d039      	beq.n	80067ac <LPTIM_Disable+0x33c>
 8006738:	4a30      	ldr	r2, [pc, #192]	@ (80067fc <LPTIM_Disable+0x38c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d83f      	bhi.n	80067be <LPTIM_Disable+0x34e>
 800673e:	4a30      	ldr	r2, [pc, #192]	@ (8006800 <LPTIM_Disable+0x390>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02a      	beq.n	800679a <LPTIM_Disable+0x32a>
 8006744:	4a2e      	ldr	r2, [pc, #184]	@ (8006800 <LPTIM_Disable+0x390>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d839      	bhi.n	80067be <LPTIM_Disable+0x34e>
 800674a:	4a2e      	ldr	r2, [pc, #184]	@ (8006804 <LPTIM_Disable+0x394>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d01b      	beq.n	8006788 <LPTIM_Disable+0x318>
 8006750:	4a2c      	ldr	r2, [pc, #176]	@ (8006804 <LPTIM_Disable+0x394>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d833      	bhi.n	80067be <LPTIM_Disable+0x34e>
 8006756:	4a2c      	ldr	r2, [pc, #176]	@ (8006808 <LPTIM_Disable+0x398>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <LPTIM_Disable+0x2f4>
 800675c:	4a2b      	ldr	r2, [pc, #172]	@ (800680c <LPTIM_Disable+0x39c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8006762:	e02c      	b.n	80067be <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006764:	4b2a      	ldr	r3, [pc, #168]	@ (8006810 <LPTIM_Disable+0x3a0>)
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800676c:	4928      	ldr	r1, [pc, #160]	@ (8006810 <LPTIM_Disable+0x3a0>)
 800676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006770:	4313      	orrs	r3, r2
 8006772:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8006774:	e024      	b.n	80067c0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006776:	4b26      	ldr	r3, [pc, #152]	@ (8006810 <LPTIM_Disable+0x3a0>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800677e:	4924      	ldr	r1, [pc, #144]	@ (8006810 <LPTIM_Disable+0x3a0>)
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	4313      	orrs	r3, r2
 8006784:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006786:	e01b      	b.n	80067c0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8006788:	4b21      	ldr	r3, [pc, #132]	@ (8006810 <LPTIM_Disable+0x3a0>)
 800678a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006790:	491f      	ldr	r1, [pc, #124]	@ (8006810 <LPTIM_Disable+0x3a0>)
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	4313      	orrs	r3, r2
 8006796:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006798:	e012      	b.n	80067c0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800679a:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <LPTIM_Disable+0x3a0>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067a2:	491b      	ldr	r1, [pc, #108]	@ (8006810 <LPTIM_Disable+0x3a0>)
 80067a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a6:	4313      	orrs	r3, r2
 80067a8:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80067aa:	e009      	b.n	80067c0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 80067ac:	4b18      	ldr	r3, [pc, #96]	@ (8006810 <LPTIM_Disable+0x3a0>)
 80067ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067b4:	4916      	ldr	r1, [pc, #88]	@ (8006810 <LPTIM_Disable+0x3a0>)
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	4313      	orrs	r3, r2
 80067ba:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80067bc:	e000      	b.n	80067c0 <LPTIM_Disable+0x350>
        break;
 80067be:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f383 8810 	msr	PRIMASK, r3
}
 80067f2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80067f4:	bf00      	nop
 80067f6:	3730      	adds	r7, #48	@ 0x30
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	58003000 	.word	0x58003000
 8006800:	58002c00 	.word	0x58002c00
 8006804:	58002800 	.word	0x58002800
 8006808:	40002400 	.word	0x40002400
 800680c:	58002400 	.word	0x58002400
 8006810:	58024400 	.word	0x58024400

08006814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800681c:	4b19      	ldr	r3, [pc, #100]	@ (8006884 <HAL_PWREx_ConfigSupply+0x70>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b04      	cmp	r3, #4
 8006826:	d00a      	beq.n	800683e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006828:	4b16      	ldr	r3, [pc, #88]	@ (8006884 <HAL_PWREx_ConfigSupply+0x70>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	429a      	cmp	r2, r3
 8006834:	d001      	beq.n	800683a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e01f      	b.n	800687a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e01d      	b.n	800687a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800683e:	4b11      	ldr	r3, [pc, #68]	@ (8006884 <HAL_PWREx_ConfigSupply+0x70>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f023 0207 	bic.w	r2, r3, #7
 8006846:	490f      	ldr	r1, [pc, #60]	@ (8006884 <HAL_PWREx_ConfigSupply+0x70>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4313      	orrs	r3, r2
 800684c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800684e:	f7fd f9d5 	bl	8003bfc <HAL_GetTick>
 8006852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006854:	e009      	b.n	800686a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006856:	f7fd f9d1 	bl	8003bfc <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006864:	d901      	bls.n	800686a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e007      	b.n	800687a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <HAL_PWREx_ConfigSupply+0x70>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006876:	d1ee      	bne.n	8006856 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	58024800 	.word	0x58024800

08006888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08c      	sub	sp, #48	@ 0x30
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f000 bc48 	b.w	800712c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8088 	beq.w	80069ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068aa:	4b99      	ldr	r3, [pc, #612]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068b4:	4b96      	ldr	r3, [pc, #600]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068bc:	2b10      	cmp	r3, #16
 80068be:	d007      	beq.n	80068d0 <HAL_RCC_OscConfig+0x48>
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c2:	2b18      	cmp	r3, #24
 80068c4:	d111      	bne.n	80068ea <HAL_RCC_OscConfig+0x62>
 80068c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d10c      	bne.n	80068ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	4b8f      	ldr	r3, [pc, #572]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d06d      	beq.n	80069b8 <HAL_RCC_OscConfig+0x130>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d169      	bne.n	80069b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f000 bc21 	b.w	800712c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f2:	d106      	bne.n	8006902 <HAL_RCC_OscConfig+0x7a>
 80068f4:	4b86      	ldr	r3, [pc, #536]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a85      	ldr	r2, [pc, #532]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80068fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e02e      	b.n	8006960 <HAL_RCC_OscConfig+0xd8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x9c>
 800690a:	4b81      	ldr	r3, [pc, #516]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a80      	ldr	r2, [pc, #512]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b7e      	ldr	r3, [pc, #504]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a7d      	ldr	r2, [pc, #500]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 800691c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e01d      	b.n	8006960 <HAL_RCC_OscConfig+0xd8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800692c:	d10c      	bne.n	8006948 <HAL_RCC_OscConfig+0xc0>
 800692e:	4b78      	ldr	r3, [pc, #480]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a77      	ldr	r2, [pc, #476]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	4b75      	ldr	r3, [pc, #468]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a74      	ldr	r2, [pc, #464]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e00b      	b.n	8006960 <HAL_RCC_OscConfig+0xd8>
 8006948:	4b71      	ldr	r3, [pc, #452]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a70      	ldr	r2, [pc, #448]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 800694e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b6e      	ldr	r3, [pc, #440]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a6d      	ldr	r2, [pc, #436]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 800695a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800695e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fd f948 	bl	8003bfc <HAL_GetTick>
 800696c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006970:	f7fd f944 	bl	8003bfc <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	@ 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e3d4      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006982:	4b63      	ldr	r3, [pc, #396]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0xe8>
 800698e:	e014      	b.n	80069ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fd f934 	bl	8003bfc <HAL_GetTick>
 8006994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006998:	f7fd f930 	bl	8003bfc <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	@ 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e3c0      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069aa:	4b59      	ldr	r3, [pc, #356]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x110>
 80069b6:	e000      	b.n	80069ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80ca 	beq.w	8006b5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c8:	4b51      	ldr	r3, [pc, #324]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_RCC_OscConfig+0x166>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b18      	cmp	r3, #24
 80069e2:	d156      	bne.n	8006a92 <HAL_RCC_OscConfig+0x20a>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d151      	bne.n	8006a92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ee:	4b48      	ldr	r3, [pc, #288]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_RCC_OscConfig+0x17e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e392      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a06:	4b42      	ldr	r3, [pc, #264]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 0219 	bic.w	r2, r3, #25
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	493f      	ldr	r1, [pc, #252]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7fd f8f0 	bl	8003bfc <HAL_GetTick>
 8006a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a20:	f7fd f8ec 	bl	8003bfc <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e37c      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a32:	4b37      	ldr	r3, [pc, #220]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3e:	f7fd f8e9 	bl	8003c14 <HAL_GetREVID>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d817      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x1f4>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b40      	cmp	r3, #64	@ 0x40
 8006a52:	d108      	bne.n	8006a66 <HAL_RCC_OscConfig+0x1de>
 8006a54:	4b2e      	ldr	r3, [pc, #184]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a64:	e07a      	b.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a66:	4b2a      	ldr	r3, [pc, #168]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	031b      	lsls	r3, r3, #12
 8006a74:	4926      	ldr	r1, [pc, #152]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a7a:	e06f      	b.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7c:	4b24      	ldr	r3, [pc, #144]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	061b      	lsls	r3, r3, #24
 8006a8a:	4921      	ldr	r1, [pc, #132]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a90:	e064      	b.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d047      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f023 0219 	bic.w	r2, r3, #25
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	491a      	ldr	r1, [pc, #104]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd f8a6 	bl	8003bfc <HAL_GetTick>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab4:	f7fd f8a2 	bl	8003bfc <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e332      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac6:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad2:	f7fd f89f 	bl	8003c14 <HAL_GetREVID>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d819      	bhi.n	8006b14 <HAL_RCC_OscConfig+0x28c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	2b40      	cmp	r3, #64	@ 0x40
 8006ae6:	d108      	bne.n	8006afa <HAL_RCC_OscConfig+0x272>
 8006ae8:	4b09      	ldr	r3, [pc, #36]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006af0:	4a07      	ldr	r2, [pc, #28]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	e030      	b.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
 8006afa:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	031b      	lsls	r3, r3, #12
 8006b08:	4901      	ldr	r1, [pc, #4]	@ (8006b10 <HAL_RCC_OscConfig+0x288>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	604b      	str	r3, [r1, #4]
 8006b0e:	e025      	b.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
 8006b10:	58024400 	.word	0x58024400
 8006b14:	4b9a      	ldr	r3, [pc, #616]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	4997      	ldr	r1, [pc, #604]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]
 8006b28:	e018      	b.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b2a:	4b95      	ldr	r3, [pc, #596]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a94      	ldr	r2, [pc, #592]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b36:	f7fd f861 	bl	8003bfc <HAL_GetTick>
 8006b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b3e:	f7fd f85d 	bl	8003bfc <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e2ed      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b50:	4b8b      	ldr	r3, [pc, #556]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80a9 	beq.w	8006cbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b6a:	4b85      	ldr	r3, [pc, #532]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b74:	4b82      	ldr	r3, [pc, #520]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d007      	beq.n	8006b90 <HAL_RCC_OscConfig+0x308>
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b18      	cmp	r3, #24
 8006b84:	d13a      	bne.n	8006bfc <HAL_RCC_OscConfig+0x374>
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d135      	bne.n	8006bfc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b90:	4b7b      	ldr	r3, [pc, #492]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x320>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	2b80      	cmp	r3, #128	@ 0x80
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e2c1      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ba8:	f7fd f834 	bl	8003c14 <HAL_GetREVID>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d817      	bhi.n	8006be6 <HAL_RCC_OscConfig+0x35e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d108      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x348>
 8006bbe:	4b70      	ldr	r3, [pc, #448]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006bc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bcc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bce:	e075      	b.n	8006cbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	069b      	lsls	r3, r3, #26
 8006bde:	4968      	ldr	r1, [pc, #416]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006be4:	e06a      	b.n	8006cbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006be6:	4b66      	ldr	r3, [pc, #408]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	4962      	ldr	r1, [pc, #392]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bfa:	e05f      	b.n	8006cbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d042      	beq.n	8006c8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c04:	4b5e      	ldr	r3, [pc, #376]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a5d      	ldr	r2, [pc, #372]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fc fff4 	bl	8003bfc <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c18:	f7fc fff0 	bl	8003bfc <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e280      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c2a:	4b55      	ldr	r3, [pc, #340]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c36:	f7fc ffed 	bl	8003c14 <HAL_GetREVID>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d817      	bhi.n	8006c74 <HAL_RCC_OscConfig+0x3ec>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d108      	bne.n	8006c5e <HAL_RCC_OscConfig+0x3d6>
 8006c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c54:	4a4a      	ldr	r2, [pc, #296]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c5a:	6053      	str	r3, [r2, #4]
 8006c5c:	e02e      	b.n	8006cbc <HAL_RCC_OscConfig+0x434>
 8006c5e:	4b48      	ldr	r3, [pc, #288]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	069b      	lsls	r3, r3, #26
 8006c6c:	4944      	ldr	r1, [pc, #272]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	604b      	str	r3, [r1, #4]
 8006c72:	e023      	b.n	8006cbc <HAL_RCC_OscConfig+0x434>
 8006c74:	4b42      	ldr	r3, [pc, #264]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	061b      	lsls	r3, r3, #24
 8006c82:	493f      	ldr	r1, [pc, #252]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60cb      	str	r3, [r1, #12]
 8006c88:	e018      	b.n	8006cbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c96:	f7fc ffb1 	bl	8003bfc <HAL_GetTick>
 8006c9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c9e:	f7fc ffad 	bl	8003bfc <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e23d      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cb0:	4b33      	ldr	r3, [pc, #204]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f0      	bne.n	8006c9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d036      	beq.n	8006d36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d019      	beq.n	8006d04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fc ff8e 	bl	8003bfc <HAL_GetTick>
 8006ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ce4:	f7fc ff8a 	bl	8003bfc <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e21a      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cf6:	4b22      	ldr	r3, [pc, #136]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x45c>
 8006d02:	e018      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d04:	4b1e      	ldr	r3, [pc, #120]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d08:	4a1d      	ldr	r2, [pc, #116]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d10:	f7fc ff74 	bl	8003bfc <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d18:	f7fc ff70 	bl	8003bfc <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e200      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d2a:	4b15      	ldr	r3, [pc, #84]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d039      	beq.n	8006db6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01c      	beq.n	8006d84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d56:	f7fc ff51 	bl	8003bfc <HAL_GetTick>
 8006d5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d5e:	f7fc ff4d 	bl	8003bfc <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e1dd      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d70:	4b03      	ldr	r3, [pc, #12]	@ (8006d80 <HAL_RCC_OscConfig+0x4f8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x4d6>
 8006d7c:	e01b      	b.n	8006db6 <HAL_RCC_OscConfig+0x52e>
 8006d7e:	bf00      	nop
 8006d80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d84:	4b9b      	ldr	r3, [pc, #620]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a9a      	ldr	r2, [pc, #616]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d90:	f7fc ff34 	bl	8003bfc <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d98:	f7fc ff30 	bl	8003bfc <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e1c0      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006daa:	4b92      	ldr	r3, [pc, #584]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8081 	beq.w	8006ec6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ff8 <HAL_RCC_OscConfig+0x770>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a8b      	ldr	r2, [pc, #556]	@ (8006ff8 <HAL_RCC_OscConfig+0x770>)
 8006dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dd0:	f7fc ff14 	bl	8003bfc <HAL_GetTick>
 8006dd4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd8:	f7fc ff10 	bl	8003bfc <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	@ 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e1a0      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dea:	4b83      	ldr	r3, [pc, #524]	@ (8006ff8 <HAL_RCC_OscConfig+0x770>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d106      	bne.n	8006e0c <HAL_RCC_OscConfig+0x584>
 8006dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e02:	4a7c      	ldr	r2, [pc, #496]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0a:	e02d      	b.n	8006e68 <HAL_RCC_OscConfig+0x5e0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10c      	bne.n	8006e2e <HAL_RCC_OscConfig+0x5a6>
 8006e14:	4b77      	ldr	r3, [pc, #476]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	4a76      	ldr	r2, [pc, #472]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e20:	4b74      	ldr	r3, [pc, #464]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e24:	4a73      	ldr	r2, [pc, #460]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e26:	f023 0304 	bic.w	r3, r3, #4
 8006e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e2c:	e01c      	b.n	8006e68 <HAL_RCC_OscConfig+0x5e0>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d10c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x5c8>
 8006e36:	4b6f      	ldr	r3, [pc, #444]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e3c:	f043 0304 	orr.w	r3, r3, #4
 8006e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e42:	4b6c      	ldr	r3, [pc, #432]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e46:	4a6b      	ldr	r2, [pc, #428]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e4e:	e00b      	b.n	8006e68 <HAL_RCC_OscConfig+0x5e0>
 8006e50:	4b68      	ldr	r3, [pc, #416]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e54:	4a67      	ldr	r2, [pc, #412]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e5c:	4b65      	ldr	r3, [pc, #404]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e60:	4a64      	ldr	r2, [pc, #400]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e62:	f023 0304 	bic.w	r3, r3, #4
 8006e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d015      	beq.n	8006e9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fc fec4 	bl	8003bfc <HAL_GetTick>
 8006e74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e78:	f7fc fec0 	bl	8003bfc <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e14e      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e8e:	4b59      	ldr	r3, [pc, #356]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ee      	beq.n	8006e78 <HAL_RCC_OscConfig+0x5f0>
 8006e9a:	e014      	b.n	8006ec6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9c:	f7fc feae 	bl	8003bfc <HAL_GetTick>
 8006ea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea4:	f7fc feaa 	bl	8003bfc <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e138      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eba:	4b4e      	ldr	r3, [pc, #312]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1ee      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 812d 	beq.w	800712a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ed0:	4b48      	ldr	r3, [pc, #288]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ed8:	2b18      	cmp	r3, #24
 8006eda:	f000 80bd 	beq.w	8007058 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	f040 809e 	bne.w	8007024 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee8:	4b42      	ldr	r3, [pc, #264]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a41      	ldr	r2, [pc, #260]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef4:	f7fc fe82 	bl	8003bfc <HAL_GetTick>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006efc:	f7fc fe7e 	bl	8003bfc <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e10e      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f0e:	4b39      	ldr	r3, [pc, #228]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f0      	bne.n	8006efc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f1a:	4b36      	ldr	r3, [pc, #216]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f1e:	4b37      	ldr	r3, [pc, #220]	@ (8006ffc <HAL_RCC_OscConfig+0x774>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f2a:	0112      	lsls	r2, r2, #4
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	4931      	ldr	r1, [pc, #196]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f42:	3b01      	subs	r3, #1
 8006f44:	025b      	lsls	r3, r3, #9
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f64:	4923      	ldr	r1, [pc, #140]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f6a:	4b22      	ldr	r3, [pc, #136]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a21      	ldr	r2, [pc, #132]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f76:	4b1f      	ldr	r3, [pc, #124]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f7a:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <HAL_RCC_OscConfig+0x778>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f82:	00d2      	lsls	r2, r2, #3
 8006f84:	491b      	ldr	r1, [pc, #108]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	f023 020c 	bic.w	r2, r3, #12
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	4917      	ldr	r1, [pc, #92]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	f023 0202 	bic.w	r2, r3, #2
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa8:	4912      	ldr	r1, [pc, #72]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fae:	4b11      	ldr	r3, [pc, #68]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	4a10      	ldr	r2, [pc, #64]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fba:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006fd2:	4b08      	ldr	r3, [pc, #32]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd6:	4a07      	ldr	r2, [pc, #28]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fde:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a04      	ldr	r2, [pc, #16]	@ (8006ff4 <HAL_RCC_OscConfig+0x76c>)
 8006fe4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fea:	f7fc fe07 	bl	8003bfc <HAL_GetTick>
 8006fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ff0:	e011      	b.n	8007016 <HAL_RCC_OscConfig+0x78e>
 8006ff2:	bf00      	nop
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	58024800 	.word	0x58024800
 8006ffc:	fffffc0c 	.word	0xfffffc0c
 8007000:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007004:	f7fc fdfa 	bl	8003bfc <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e08a      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007016:	4b47      	ldr	r3, [pc, #284]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0x77c>
 8007022:	e082      	b.n	800712a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007024:	4b43      	ldr	r3, [pc, #268]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a42      	ldr	r2, [pc, #264]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 800702a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800702e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007030:	f7fc fde4 	bl	8003bfc <HAL_GetTick>
 8007034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007036:	e008      	b.n	800704a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007038:	f7fc fde0 	bl	8003bfc <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e070      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800704a:	4b3a      	ldr	r3, [pc, #232]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1f0      	bne.n	8007038 <HAL_RCC_OscConfig+0x7b0>
 8007056:	e068      	b.n	800712a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007058:	4b36      	ldr	r3, [pc, #216]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800705e:	4b35      	ldr	r3, [pc, #212]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007062:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	2b01      	cmp	r3, #1
 800706a:	d031      	beq.n	80070d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f003 0203 	and.w	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007076:	429a      	cmp	r2, r3
 8007078:	d12a      	bne.n	80070d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007086:	429a      	cmp	r2, r3
 8007088:	d122      	bne.n	80070d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007096:	429a      	cmp	r2, r3
 8007098:	d11a      	bne.n	80070d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	0a5b      	lsrs	r3, r3, #9
 800709e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d111      	bne.n	80070d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	0c1b      	lsrs	r3, r3, #16
 80070b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d108      	bne.n	80070d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	0e1b      	lsrs	r3, r3, #24
 80070c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e02b      	b.n	800712c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80070d4:	4b17      	ldr	r3, [pc, #92]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 80070d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d8:	08db      	lsrs	r3, r3, #3
 80070da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d01f      	beq.n	800712a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80070ea:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	4a11      	ldr	r2, [pc, #68]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070f6:	f7fc fd81 	bl	8003bfc <HAL_GetTick>
 80070fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80070fc:	bf00      	nop
 80070fe:	f7fc fd7d 	bl	8003bfc <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	4293      	cmp	r3, r2
 8007108:	d0f9      	beq.n	80070fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800710a:	4b0a      	ldr	r3, [pc, #40]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 800710c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800710e:	4b0a      	ldr	r3, [pc, #40]	@ (8007138 <HAL_RCC_OscConfig+0x8b0>)
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007116:	00d2      	lsls	r2, r2, #3
 8007118:	4906      	ldr	r1, [pc, #24]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 800711a:	4313      	orrs	r3, r2
 800711c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800711e:	4b05      	ldr	r3, [pc, #20]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a04      	ldr	r2, [pc, #16]	@ (8007134 <HAL_RCC_OscConfig+0x8ac>)
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3730      	adds	r7, #48	@ 0x30
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	58024400 	.word	0x58024400
 8007138:	ffff0007 	.word	0xffff0007

0800713c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e19c      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007150:	4b8a      	ldr	r3, [pc, #552]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d910      	bls.n	8007180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715e:	4b87      	ldr	r3, [pc, #540]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 020f 	bic.w	r2, r3, #15
 8007166:	4985      	ldr	r1, [pc, #532]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	4b83      	ldr	r3, [pc, #524]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e184      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	4b7b      	ldr	r3, [pc, #492]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007198:	429a      	cmp	r2, r3
 800719a:	d908      	bls.n	80071ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800719c:	4b78      	ldr	r3, [pc, #480]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	4975      	ldr	r1, [pc, #468]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695a      	ldr	r2, [r3, #20]
 80071be:	4b70      	ldr	r3, [pc, #448]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d908      	bls.n	80071dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	496a      	ldr	r1, [pc, #424]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	4b64      	ldr	r3, [pc, #400]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d908      	bls.n	800720a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071f8:	4b61      	ldr	r3, [pc, #388]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	495e      	ldr	r1, [pc, #376]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007206:	4313      	orrs	r3, r2
 8007208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	4b59      	ldr	r3, [pc, #356]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007222:	429a      	cmp	r2, r3
 8007224:	d908      	bls.n	8007238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007226:	4b56      	ldr	r3, [pc, #344]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	4953      	ldr	r1, [pc, #332]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007234:	4313      	orrs	r3, r2
 8007236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	4b4d      	ldr	r3, [pc, #308]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	429a      	cmp	r2, r3
 8007252:	d908      	bls.n	8007266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007254:	4b4a      	ldr	r3, [pc, #296]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f023 020f 	bic.w	r2, r3, #15
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4947      	ldr	r1, [pc, #284]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007262:	4313      	orrs	r3, r2
 8007264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d055      	beq.n	800731e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007272:	4b43      	ldr	r3, [pc, #268]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4940      	ldr	r1, [pc, #256]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007280:	4313      	orrs	r3, r2
 8007282:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d107      	bne.n	800729c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800728c:	4b3c      	ldr	r3, [pc, #240]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d121      	bne.n	80072dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e0f6      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d107      	bne.n	80072b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072a4:	4b36      	ldr	r3, [pc, #216]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d115      	bne.n	80072dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0ea      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d107      	bne.n	80072cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072bc:	4b30      	ldr	r3, [pc, #192]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0de      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0d6      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072dc:	4b28      	ldr	r3, [pc, #160]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f023 0207 	bic.w	r2, r3, #7
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4925      	ldr	r1, [pc, #148]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ee:	f7fc fc85 	bl	8003bfc <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f4:	e00a      	b.n	800730c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f6:	f7fc fc81 	bl	8003bfc <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e0be      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730c:	4b1c      	ldr	r3, [pc, #112]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	429a      	cmp	r2, r3
 800731c:	d1eb      	bne.n	80072f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d010      	beq.n	800734c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	4b14      	ldr	r3, [pc, #80]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	429a      	cmp	r2, r3
 8007338:	d208      	bcs.n	800734c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800733a:	4b11      	ldr	r3, [pc, #68]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f023 020f 	bic.w	r2, r3, #15
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	490e      	ldr	r1, [pc, #56]	@ (8007380 <HAL_RCC_ClockConfig+0x244>)
 8007348:	4313      	orrs	r3, r2
 800734a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800734c:	4b0b      	ldr	r3, [pc, #44]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d214      	bcs.n	8007384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735a:	4b08      	ldr	r3, [pc, #32]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 020f 	bic.w	r2, r3, #15
 8007362:	4906      	ldr	r1, [pc, #24]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	4313      	orrs	r3, r2
 8007368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b04      	ldr	r3, [pc, #16]	@ (800737c <HAL_RCC_ClockConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d005      	beq.n	8007384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e086      	b.n	800748a <HAL_RCC_ClockConfig+0x34e>
 800737c:	52002000 	.word	0x52002000
 8007380:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d010      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	4b3f      	ldr	r3, [pc, #252]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800739c:	429a      	cmp	r2, r3
 800739e:	d208      	bcs.n	80073b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073a0:	4b3c      	ldr	r3, [pc, #240]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	4939      	ldr	r1, [pc, #228]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d010      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	4b34      	ldr	r3, [pc, #208]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d208      	bcs.n	80073e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ce:	4b31      	ldr	r3, [pc, #196]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	492e      	ldr	r1, [pc, #184]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	4b28      	ldr	r3, [pc, #160]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d208      	bcs.n	800740e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073fc:	4b25      	ldr	r3, [pc, #148]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	4922      	ldr	r1, [pc, #136]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 800740a:	4313      	orrs	r3, r2
 800740c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d010      	beq.n	800743c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69da      	ldr	r2, [r3, #28]
 800741e:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007426:	429a      	cmp	r2, r3
 8007428:	d208      	bcs.n	800743c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800742a:	4b1a      	ldr	r3, [pc, #104]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	4917      	ldr	r1, [pc, #92]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 8007438:	4313      	orrs	r3, r2
 800743a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800743c:	f000 f834 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 8007440:	4602      	mov	r2, r0
 8007442:	4b14      	ldr	r3, [pc, #80]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 030f 	and.w	r3, r3, #15
 800744c:	4912      	ldr	r1, [pc, #72]	@ (8007498 <HAL_RCC_ClockConfig+0x35c>)
 800744e:	5ccb      	ldrb	r3, [r1, r3]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
 8007458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800745a:	4b0e      	ldr	r3, [pc, #56]	@ (8007494 <HAL_RCC_ClockConfig+0x358>)
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	4a0d      	ldr	r2, [pc, #52]	@ (8007498 <HAL_RCC_ClockConfig+0x35c>)
 8007464:	5cd3      	ldrb	r3, [r2, r3]
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	4a0a      	ldr	r2, [pc, #40]	@ (800749c <HAL_RCC_ClockConfig+0x360>)
 8007472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007474:	4a0a      	ldr	r2, [pc, #40]	@ (80074a0 <HAL_RCC_ClockConfig+0x364>)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800747a:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <HAL_RCC_ClockConfig+0x368>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f7fc fb72 	bl	8003b68 <HAL_InitTick>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	08010658 	.word	0x08010658
 800749c:	24000014 	.word	0x24000014
 80074a0:	24000010 	.word	0x24000010
 80074a4:	24000018 	.word	0x24000018

080074a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b089      	sub	sp, #36	@ 0x24
 80074ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ae:	4bb3      	ldr	r3, [pc, #716]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b6:	2b18      	cmp	r3, #24
 80074b8:	f200 8155 	bhi.w	8007766 <HAL_RCC_GetSysClockFreq+0x2be>
 80074bc:	a201      	add	r2, pc, #4	@ (adr r2, 80074c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007529 	.word	0x08007529
 80074c8:	08007767 	.word	0x08007767
 80074cc:	08007767 	.word	0x08007767
 80074d0:	08007767 	.word	0x08007767
 80074d4:	08007767 	.word	0x08007767
 80074d8:	08007767 	.word	0x08007767
 80074dc:	08007767 	.word	0x08007767
 80074e0:	08007767 	.word	0x08007767
 80074e4:	0800754f 	.word	0x0800754f
 80074e8:	08007767 	.word	0x08007767
 80074ec:	08007767 	.word	0x08007767
 80074f0:	08007767 	.word	0x08007767
 80074f4:	08007767 	.word	0x08007767
 80074f8:	08007767 	.word	0x08007767
 80074fc:	08007767 	.word	0x08007767
 8007500:	08007767 	.word	0x08007767
 8007504:	08007555 	.word	0x08007555
 8007508:	08007767 	.word	0x08007767
 800750c:	08007767 	.word	0x08007767
 8007510:	08007767 	.word	0x08007767
 8007514:	08007767 	.word	0x08007767
 8007518:	08007767 	.word	0x08007767
 800751c:	08007767 	.word	0x08007767
 8007520:	08007767 	.word	0x08007767
 8007524:	0800755b 	.word	0x0800755b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007528:	4b94      	ldr	r3, [pc, #592]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007534:	4b91      	ldr	r3, [pc, #580]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	08db      	lsrs	r3, r3, #3
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	4a90      	ldr	r2, [pc, #576]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
 8007544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007546:	e111      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007548:	4b8d      	ldr	r3, [pc, #564]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800754a:	61bb      	str	r3, [r7, #24]
      break;
 800754c:	e10e      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800754e:	4b8d      	ldr	r3, [pc, #564]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007550:	61bb      	str	r3, [r7, #24]
      break;
 8007552:	e10b      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007554:	4b8c      	ldr	r3, [pc, #560]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007556:	61bb      	str	r3, [r7, #24]
      break;
 8007558:	e108      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800755a:	4b88      	ldr	r3, [pc, #544]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007564:	4b85      	ldr	r3, [pc, #532]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800756e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007570:	4b82      	ldr	r3, [pc, #520]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800757a:	4b80      	ldr	r3, [pc, #512]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800757e:	08db      	lsrs	r3, r3, #3
 8007580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	fb02 f303 	mul.w	r3, r2, r3
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80e1 	beq.w	8007760 <HAL_RCC_GetSysClockFreq+0x2b8>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	f000 8083 	beq.w	80076ac <HAL_RCC_GetSysClockFreq+0x204>
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	f200 80a1 	bhi.w	80076f0 <HAL_RCC_GetSysClockFreq+0x248>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_RCC_GetSysClockFreq+0x114>
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d056      	beq.n	8007668 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075ba:	e099      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075bc:	4b6f      	ldr	r3, [pc, #444]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d02d      	beq.n	8007624 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075c8:	4b6c      	ldr	r3, [pc, #432]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	08db      	lsrs	r3, r3, #3
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	4a6b      	ldr	r2, [pc, #428]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075d4:	fa22 f303 	lsr.w	r3, r2, r3
 80075d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f2:	4b62      	ldr	r3, [pc, #392]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007602:	ed97 6a02 	vldr	s12, [r7, #8]
 8007606:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800778c <HAL_RCC_GetSysClockFreq+0x2e4>
 800760a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007622:	e087      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007790 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007636:	4b51      	ldr	r3, [pc, #324]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007646:	ed97 6a02 	vldr	s12, [r7, #8]
 800764a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800778c <HAL_RCC_GetSysClockFreq+0x2e4>
 800764e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800765a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007666:	e065      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007794 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767a:	4b40      	ldr	r3, [pc, #256]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768a:	ed97 6a02 	vldr	s12, [r7, #8]
 800768e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800778c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076aa:	e043      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007798 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076be:	4b2f      	ldr	r3, [pc, #188]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80076d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800778c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ee:	e021      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007794 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007702:	4b1e      	ldr	r3, [pc, #120]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007712:	ed97 6a02 	vldr	s12, [r7, #8]
 8007716:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800778c <HAL_RCC_GetSysClockFreq+0x2e4>
 800771a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007732:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007734:	4b11      	ldr	r3, [pc, #68]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	0a5b      	lsrs	r3, r3, #9
 800773a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773e:	3301      	adds	r3, #1
 8007740:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800774c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007758:	ee17 3a90 	vmov	r3, s15
 800775c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800775e:	e005      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	61bb      	str	r3, [r7, #24]
      break;
 8007764:	e002      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007766:	4b07      	ldr	r3, [pc, #28]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007768:	61bb      	str	r3, [r7, #24]
      break;
 800776a:	bf00      	nop
  }

  return sysclockfreq;
 800776c:	69bb      	ldr	r3, [r7, #24]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3724      	adds	r7, #36	@ 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	58024400 	.word	0x58024400
 8007780:	03d09000 	.word	0x03d09000
 8007784:	003d0900 	.word	0x003d0900
 8007788:	016e3600 	.word	0x016e3600
 800778c:	46000000 	.word	0x46000000
 8007790:	4c742400 	.word	0x4c742400
 8007794:	4a742400 	.word	0x4a742400
 8007798:	4bb71b00 	.word	0x4bb71b00

0800779c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077a2:	f7ff fe81 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 80077a6:	4602      	mov	r2, r0
 80077a8:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <HAL_RCC_GetHCLKFreq+0x50>)
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	490f      	ldr	r1, [pc, #60]	@ (80077f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80077b4:	5ccb      	ldrb	r3, [r1, r3]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	fa22 f303 	lsr.w	r3, r2, r3
 80077be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077c0:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <HAL_RCC_GetHCLKFreq+0x50>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80077ca:	5cd3      	ldrb	r3, [r2, r3]
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	fa22 f303 	lsr.w	r3, r2, r3
 80077d6:	4a07      	ldr	r2, [pc, #28]	@ (80077f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80077d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077da:	4a07      	ldr	r2, [pc, #28]	@ (80077f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077e0:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80077e2:	681b      	ldr	r3, [r3, #0]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	58024400 	.word	0x58024400
 80077f0:	08010658 	.word	0x08010658
 80077f4:	24000014 	.word	0x24000014
 80077f8:	24000010 	.word	0x24000010

080077fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007800:	f7ff ffcc 	bl	800779c <HAL_RCC_GetHCLKFreq>
 8007804:	4602      	mov	r2, r0
 8007806:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	091b      	lsrs	r3, r3, #4
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	4904      	ldr	r1, [pc, #16]	@ (8007824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007812:	5ccb      	ldrb	r3, [r1, r3]
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800781c:	4618      	mov	r0, r3
 800781e:	bd80      	pop	{r7, pc}
 8007820:	58024400 	.word	0x58024400
 8007824:	08010658 	.word	0x08010658

08007828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800782c:	f7ff ffb6 	bl	800779c <HAL_RCC_GetHCLKFreq>
 8007830:	4602      	mov	r2, r0
 8007832:	4b06      	ldr	r3, [pc, #24]	@ (800784c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	4904      	ldr	r1, [pc, #16]	@ (8007850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800783e:	5ccb      	ldrb	r3, [r1, r3]
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd80      	pop	{r7, pc}
 800784c:	58024400 	.word	0x58024400
 8007850:	08010658 	.word	0x08010658

08007854 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007858:	b0ca      	sub	sp, #296	@ 0x128
 800785a:	af00      	add	r7, sp, #0
 800785c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007866:	2300      	movs	r3, #0
 8007868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007878:	2500      	movs	r5, #0
 800787a:	ea54 0305 	orrs.w	r3, r4, r5
 800787e:	d049      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800788a:	d02f      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800788c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007890:	d828      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007896:	d01a      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800789c:	d822      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078a6:	d007      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078a8:	e01c      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078aa:	4bb8      	ldr	r3, [pc, #736]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ae:	4ab7      	ldr	r2, [pc, #732]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078b6:	e01a      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	3308      	adds	r3, #8
 80078be:	2102      	movs	r1, #2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fc8f 	bl	80091e4 <RCCEx_PLL2_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078cc:	e00f      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	3328      	adds	r3, #40	@ 0x28
 80078d4:	2102      	movs	r1, #2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fd36 	bl	8009348 <RCCEx_PLL3_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078e2:	e004      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ea:	e000      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80078ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078f6:	4ba5      	ldr	r3, [pc, #660]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007902:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007904:	4aa1      	ldr	r2, [pc, #644]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007906:	430b      	orrs	r3, r1
 8007908:	6513      	str	r3, [r2, #80]	@ 0x50
 800790a:	e003      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007920:	f04f 0900 	mov.w	r9, #0
 8007924:	ea58 0309 	orrs.w	r3, r8, r9
 8007928:	d047      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007930:	2b04      	cmp	r3, #4
 8007932:	d82a      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007934:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	08007951 	.word	0x08007951
 8007940:	0800795f 	.word	0x0800795f
 8007944:	08007975 	.word	0x08007975
 8007948:	08007993 	.word	0x08007993
 800794c:	08007993 	.word	0x08007993
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007950:	4b8e      	ldr	r3, [pc, #568]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	4a8d      	ldr	r2, [pc, #564]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800795a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800795c:	e01a      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	3308      	adds	r3, #8
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f001 fc3c 	bl	80091e4 <RCCEx_PLL2_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007972:	e00f      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	3328      	adds	r3, #40	@ 0x28
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f001 fce3 	bl	8009348 <RCCEx_PLL3_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007988:	e004      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007990:	e000      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800799c:	4b7b      	ldr	r3, [pc, #492]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800799e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a0:	f023 0107 	bic.w	r1, r3, #7
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079aa:	4a78      	ldr	r2, [pc, #480]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80079b0:	e003      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80079c6:	f04f 0b00 	mov.w	fp, #0
 80079ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80079ce:	d04c      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079da:	d030      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e0:	d829      	bhi.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079e4:	d02d      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80079e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079e8:	d825      	bhi.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079ea:	2b80      	cmp	r3, #128	@ 0x80
 80079ec:	d018      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80079ee:	2b80      	cmp	r3, #128	@ 0x80
 80079f0:	d821      	bhi.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d007      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80079fa:	e01c      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fc:	4b63      	ldr	r3, [pc, #396]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4a62      	ldr	r2, [pc, #392]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a08:	e01c      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	3308      	adds	r3, #8
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fbe6 	bl	80091e4 <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a1e:	e011      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a24:	3328      	adds	r3, #40	@ 0x28
 8007a26:	2100      	movs	r1, #0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f001 fc8d 	bl	8009348 <RCCEx_PLL3_Config>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a34:	e006      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a3c:	e002      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a3e:	bf00      	nop
 8007a40:	e000      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007a76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007a80:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d053      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a96:	d035      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a9c:	d82e      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007aa2:	d031      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007aa8:	d828      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aae:	d01a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ab4:	d822      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007abe:	d007      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007ac0:	e01c      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac2:	4b32      	ldr	r3, [pc, #200]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	4a31      	ldr	r2, [pc, #196]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ace:	e01c      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fb83 	bl	80091e4 <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ae4:	e011      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aea:	3328      	adds	r3, #40	@ 0x28
 8007aec:	2100      	movs	r1, #0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fc2a 	bl	8009348 <RCCEx_PLL3_Config>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007afa:	e006      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b02:	e002      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b04:	bf00      	nop
 8007b06:	e000      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10b      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b12:	4b1e      	ldr	r3, [pc, #120]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b22:	4a1a      	ldr	r2, [pc, #104]	@ (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b28:	e003      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b42:	2300      	movs	r3, #0
 8007b44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	d056      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b5e:	d038      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b64:	d831      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b6a:	d034      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b70:	d82b      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b76:	d01d      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b7c:	d825      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b86:	d00a      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b88:	e01f      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b8a:	bf00      	nop
 8007b8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b90:	4ba2      	ldr	r3, [pc, #648]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	4aa1      	ldr	r2, [pc, #644]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e01c      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fb1c 	bl	80091e4 <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007bb2:	e011      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	3328      	adds	r3, #40	@ 0x28
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fbc3 	bl	8009348 <RCCEx_PLL3_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bc8:	e006      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bd0:	e002      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007be0:	4b8e      	ldr	r3, [pc, #568]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bf0:	4a8a      	ldr	r2, [pc, #552]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bf6:	e003      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c10:	2300      	movs	r3, #0
 8007c12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	d03a      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c26:	2b30      	cmp	r3, #48	@ 0x30
 8007c28:	d01f      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c2a:	2b30      	cmp	r3, #48	@ 0x30
 8007c2c:	d819      	bhi.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d00c      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d815      	bhi.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d019      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d111      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3e:	4b77      	ldr	r3, [pc, #476]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4a76      	ldr	r2, [pc, #472]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c4a:	e011      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	3308      	adds	r3, #8
 8007c52:	2102      	movs	r1, #2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fac5 	bl	80091e4 <RCCEx_PLL2_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c60:	e006      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c68:	e002      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c78:	4b68      	ldr	r3, [pc, #416]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c86:	4a65      	ldr	r2, [pc, #404]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c8c:	e003      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007cac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	d051      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cc0:	d035      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cc6:	d82e      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ccc:	d031      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cd2:	d828      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cd8:	d01a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cde:	d822      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d007      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007cea:	e01c      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cec:	4b4b      	ldr	r3, [pc, #300]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cf8:	e01c      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfe:	3308      	adds	r3, #8
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 fa6e 	bl	80091e4 <RCCEx_PLL2_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d0e:	e011      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d14:	3328      	adds	r3, #40	@ 0x28
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 fb15 	bl	8009348 <RCCEx_PLL3_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d24:	e006      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2c:	e002      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d3c:	4b37      	ldr	r3, [pc, #220]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d4a:	4a34      	ldr	r2, [pc, #208]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d50:	e003      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d74:	460b      	mov	r3, r1
 8007d76:	4313      	orrs	r3, r2
 8007d78:	d056      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d84:	d033      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d8a:	d82c      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d90:	d02f      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d96:	d826      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d9c:	d02b      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007d9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007da2:	d820      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da8:	d012      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dae:	d81a      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d022      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db8:	d115      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 fa0e 	bl	80091e4 <RCCEx_PLL2_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007dce:	e015      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	3328      	adds	r3, #40	@ 0x28
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fab5 	bl	8009348 <RCCEx_PLL3_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007de4:	e00a      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dec:	e006      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dee:	bf00      	nop
 8007df0:	e004      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007df2:	bf00      	nop
 8007df4:	e002      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007df6:	bf00      	nop
 8007df8:	e000      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10d      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e04:	4b05      	ldr	r3, [pc, #20]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e12:	4a02      	ldr	r2, [pc, #8]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e18:	e006      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e1a:	bf00      	nop
 8007e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	d055      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e54:	d033      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e5a:	d82c      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e60:	d02f      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e66:	d826      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e6c:	d02b      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e72:	d820      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e78:	d012      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e7e:	d81a      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d022      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e88:	d115      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8e:	3308      	adds	r3, #8
 8007e90:	2101      	movs	r1, #1
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 f9a6 	bl	80091e4 <RCCEx_PLL2_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e9e:	e015      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea4:	3328      	adds	r3, #40	@ 0x28
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fa4d 	bl	8009348 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007eb4:	e00a      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ebc:	e006      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ebe:	bf00      	nop
 8007ec0:	e004      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ed4:	4ba3      	ldr	r3, [pc, #652]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ee4:	4a9f      	ldr	r2, [pc, #636]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eea:	e003      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4313      	orrs	r3, r2
 8007f12:	d037      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1e:	d00e      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f24:	d816      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d018      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f2e:	d111      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f30:	4b8c      	ldr	r3, [pc, #560]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f34:	4a8b      	ldr	r2, [pc, #556]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f3c:	e00f      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	3308      	adds	r3, #8
 8007f44:	2101      	movs	r1, #1
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f94c 	bl	80091e4 <RCCEx_PLL2_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f52:	e004      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f66:	4b7f      	ldr	r3, [pc, #508]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f74:	4a7b      	ldr	r2, [pc, #492]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f76:	430b      	orrs	r3, r1
 8007f78:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f7a:	e003      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f94:	2300      	movs	r3, #0
 8007f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	d039      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d81c      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007fae:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08007ff1 	.word	0x08007ff1
 8007fb8:	08007fc5 	.word	0x08007fc5
 8007fbc:	08007fd3 	.word	0x08007fd3
 8007fc0:	08007ff1 	.word	0x08007ff1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4b67      	ldr	r3, [pc, #412]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	4a66      	ldr	r2, [pc, #408]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fd0:	e00f      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 f902 	bl	80091e4 <RCCEx_PLL2_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fe6:	e004      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fee:	e000      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffe:	f023 0103 	bic.w	r1, r3, #3
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008008:	4a56      	ldr	r2, [pc, #344]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800800a:	430b      	orrs	r3, r1
 800800c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800800e:	e003      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800802e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008032:	460b      	mov	r3, r1
 8008034:	4313      	orrs	r3, r2
 8008036:	f000 809f 	beq.w	8008178 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800803a:	4b4b      	ldr	r3, [pc, #300]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a4a      	ldr	r2, [pc, #296]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008046:	f7fb fdd9 	bl	8003bfc <HAL_GetTick>
 800804a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800804e:	e00b      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008050:	f7fb fdd4 	bl	8003bfc <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b64      	cmp	r3, #100	@ 0x64
 800805e:	d903      	bls.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008066:	e005      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008068:	4b3f      	ldr	r3, [pc, #252]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0ed      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008078:	2b00      	cmp	r3, #0
 800807a:	d179      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800807c:	4b39      	ldr	r3, [pc, #228]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800807e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008084:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008088:	4053      	eors	r3, r2
 800808a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800808e:	2b00      	cmp	r3, #0
 8008090:	d015      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008092:	4b34      	ldr	r3, [pc, #208]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800809a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800809e:	4b31      	ldr	r3, [pc, #196]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a2:	4a30      	ldr	r2, [pc, #192]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80080bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ca:	d118      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080cc:	f7fb fd96 	bl	8003bfc <HAL_GetTick>
 80080d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080d4:	e00d      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d6:	f7fb fd91 	bl	8003bfc <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080e0:	1ad2      	subs	r2, r2, r3
 80080e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80080f0:	e005      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0eb      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d129      	bne.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800810e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008116:	d10e      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008118:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008128:	091a      	lsrs	r2, r3, #4
 800812a:	4b10      	ldr	r3, [pc, #64]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800812c:	4013      	ands	r3, r2
 800812e:	4a0d      	ldr	r2, [pc, #52]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008130:	430b      	orrs	r3, r1
 8008132:	6113      	str	r3, [r2, #16]
 8008134:	e005      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008136:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	4a0a      	ldr	r2, [pc, #40]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008140:	6113      	str	r3, [r2, #16]
 8008142:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008144:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800814e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008152:	4a04      	ldr	r2, [pc, #16]	@ (8008164 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008154:	430b      	orrs	r3, r1
 8008156:	6713      	str	r3, [r2, #112]	@ 0x70
 8008158:	e00e      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800815a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008162:	e009      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008164:	58024400 	.word	0x58024400
 8008168:	58024800 	.word	0x58024800
 800816c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f002 0301 	and.w	r3, r2, #1
 8008184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008188:	2300      	movs	r3, #0
 800818a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800818e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008192:	460b      	mov	r3, r1
 8008194:	4313      	orrs	r3, r2
 8008196:	f000 8089 	beq.w	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081a0:	2b28      	cmp	r3, #40	@ 0x28
 80081a2:	d86b      	bhi.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80081a4:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	08008285 	.word	0x08008285
 80081b0:	0800827d 	.word	0x0800827d
 80081b4:	0800827d 	.word	0x0800827d
 80081b8:	0800827d 	.word	0x0800827d
 80081bc:	0800827d 	.word	0x0800827d
 80081c0:	0800827d 	.word	0x0800827d
 80081c4:	0800827d 	.word	0x0800827d
 80081c8:	0800827d 	.word	0x0800827d
 80081cc:	08008251 	.word	0x08008251
 80081d0:	0800827d 	.word	0x0800827d
 80081d4:	0800827d 	.word	0x0800827d
 80081d8:	0800827d 	.word	0x0800827d
 80081dc:	0800827d 	.word	0x0800827d
 80081e0:	0800827d 	.word	0x0800827d
 80081e4:	0800827d 	.word	0x0800827d
 80081e8:	0800827d 	.word	0x0800827d
 80081ec:	08008267 	.word	0x08008267
 80081f0:	0800827d 	.word	0x0800827d
 80081f4:	0800827d 	.word	0x0800827d
 80081f8:	0800827d 	.word	0x0800827d
 80081fc:	0800827d 	.word	0x0800827d
 8008200:	0800827d 	.word	0x0800827d
 8008204:	0800827d 	.word	0x0800827d
 8008208:	0800827d 	.word	0x0800827d
 800820c:	08008285 	.word	0x08008285
 8008210:	0800827d 	.word	0x0800827d
 8008214:	0800827d 	.word	0x0800827d
 8008218:	0800827d 	.word	0x0800827d
 800821c:	0800827d 	.word	0x0800827d
 8008220:	0800827d 	.word	0x0800827d
 8008224:	0800827d 	.word	0x0800827d
 8008228:	0800827d 	.word	0x0800827d
 800822c:	08008285 	.word	0x08008285
 8008230:	0800827d 	.word	0x0800827d
 8008234:	0800827d 	.word	0x0800827d
 8008238:	0800827d 	.word	0x0800827d
 800823c:	0800827d 	.word	0x0800827d
 8008240:	0800827d 	.word	0x0800827d
 8008244:	0800827d 	.word	0x0800827d
 8008248:	0800827d 	.word	0x0800827d
 800824c:	08008285 	.word	0x08008285
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	3308      	adds	r3, #8
 8008256:	2101      	movs	r1, #1
 8008258:	4618      	mov	r0, r3
 800825a:	f000 ffc3 	bl	80091e4 <RCCEx_PLL2_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008264:	e00f      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	3328      	adds	r3, #40	@ 0x28
 800826c:	2101      	movs	r1, #1
 800826e:	4618      	mov	r0, r3
 8008270:	f001 f86a 	bl	8009348 <RCCEx_PLL3_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800827a:	e004      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008282:	e000      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800828e:	4bbf      	ldr	r3, [pc, #764]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008292:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829c:	4abb      	ldr	r2, [pc, #748]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800829e:	430b      	orrs	r3, r1
 80082a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80082a2:	e003      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f002 0302 	and.w	r3, r2, #2
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d041      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	d824      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80082d6:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	08008329 	.word	0x08008329
 80082e0:	080082f5 	.word	0x080082f5
 80082e4:	0800830b 	.word	0x0800830b
 80082e8:	08008329 	.word	0x08008329
 80082ec:	08008329 	.word	0x08008329
 80082f0:	08008329 	.word	0x08008329
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f8:	3308      	adds	r3, #8
 80082fa:	2101      	movs	r1, #1
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 ff71 	bl	80091e4 <RCCEx_PLL2_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008308:	e00f      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830e:	3328      	adds	r3, #40	@ 0x28
 8008310:	2101      	movs	r1, #1
 8008312:	4618      	mov	r0, r3
 8008314:	f001 f818 	bl	8009348 <RCCEx_PLL3_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800831e:	e004      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008326:	e000      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008332:	4b96      	ldr	r3, [pc, #600]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008336:	f023 0107 	bic.w	r1, r3, #7
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008340:	4a92      	ldr	r2, [pc, #584]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008342:	430b      	orrs	r3, r1
 8008344:	6553      	str	r3, [r2, #84]	@ 0x54
 8008346:	e003      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f002 0304 	and.w	r3, r2, #4
 800835c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008366:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800836a:	460b      	mov	r3, r1
 800836c:	4313      	orrs	r3, r2
 800836e:	d044      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008378:	2b05      	cmp	r3, #5
 800837a:	d825      	bhi.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800837c:	a201      	add	r2, pc, #4	@ (adr r2, 8008384 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	080083d1 	.word	0x080083d1
 8008388:	0800839d 	.word	0x0800839d
 800838c:	080083b3 	.word	0x080083b3
 8008390:	080083d1 	.word	0x080083d1
 8008394:	080083d1 	.word	0x080083d1
 8008398:	080083d1 	.word	0x080083d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a0:	3308      	adds	r3, #8
 80083a2:	2101      	movs	r1, #1
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 ff1d 	bl	80091e4 <RCCEx_PLL2_Config>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083b0:	e00f      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	3328      	adds	r3, #40	@ 0x28
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ffc4 	bl	8009348 <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083c6:	e004      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80083d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083da:	4b6c      	ldr	r3, [pc, #432]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083de:	f023 0107 	bic.w	r1, r3, #7
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083ea:	4a68      	ldr	r2, [pc, #416]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f002 0320 	and.w	r3, r2, #32
 8008406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008414:	460b      	mov	r3, r1
 8008416:	4313      	orrs	r3, r2
 8008418:	d055      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008426:	d033      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800842c:	d82c      	bhi.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800842e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008432:	d02f      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008438:	d826      	bhi.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800843a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800843e:	d02b      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008444:	d820      	bhi.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800844a:	d012      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800844c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008450:	d81a      	bhi.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d022      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800845a:	d115      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800845c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008460:	3308      	adds	r3, #8
 8008462:	2100      	movs	r1, #0
 8008464:	4618      	mov	r0, r3
 8008466:	f000 febd 	bl	80091e4 <RCCEx_PLL2_Config>
 800846a:	4603      	mov	r3, r0
 800846c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008470:	e015      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	3328      	adds	r3, #40	@ 0x28
 8008478:	2102      	movs	r1, #2
 800847a:	4618      	mov	r0, r3
 800847c:	f000 ff64 	bl	8009348 <RCCEx_PLL3_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008486:	e00a      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800848e:	e006      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008490:	bf00      	nop
 8008492:	e004      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008494:	bf00      	nop
 8008496:	e002      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008498:	bf00      	nop
 800849a:	e000      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800849c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800849e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084a6:	4b39      	ldr	r3, [pc, #228]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b6:	4a35      	ldr	r2, [pc, #212]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084b8:	430b      	orrs	r3, r1
 80084ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80084d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4313      	orrs	r3, r2
 80084e4:	d058      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084f2:	d033      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80084f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084f8:	d82c      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084fe:	d02f      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008504:	d826      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008506:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800850a:	d02b      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800850c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008510:	d820      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008516:	d012      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800851c:	d81a      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d022      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008526:	d115      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852c:	3308      	adds	r3, #8
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fe57 	bl	80091e4 <RCCEx_PLL2_Config>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800853c:	e015      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008542:	3328      	adds	r3, #40	@ 0x28
 8008544:	2102      	movs	r1, #2
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fefe 	bl	8009348 <RCCEx_PLL3_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008552:	e00a      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800855a:	e006      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800855c:	bf00      	nop
 800855e:	e004      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008560:	bf00      	nop
 8008562:	e002      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800856a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10e      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008572:	4b06      	ldr	r3, [pc, #24]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008576:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008582:	4a02      	ldr	r2, [pc, #8]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008584:	430b      	orrs	r3, r1
 8008586:	6593      	str	r3, [r2, #88]	@ 0x58
 8008588:	e006      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800858a:	bf00      	nop
 800858c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80085a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085a8:	2300      	movs	r3, #0
 80085aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80085b2:	460b      	mov	r3, r1
 80085b4:	4313      	orrs	r3, r2
 80085b6:	d055      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085c4:	d033      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80085c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085ca:	d82c      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d0:	d02f      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80085d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d6:	d826      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085dc:	d02b      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80085de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085e2:	d820      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085e8:	d012      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80085ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ee:	d81a      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d022      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80085f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f8:	d115      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fe:	3308      	adds	r3, #8
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fdee 	bl	80091e4 <RCCEx_PLL2_Config>
 8008608:	4603      	mov	r3, r0
 800860a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800860e:	e015      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008614:	3328      	adds	r3, #40	@ 0x28
 8008616:	2102      	movs	r1, #2
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fe95 	bl	8009348 <RCCEx_PLL3_Config>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008624:	e00a      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800862c:	e006      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800862e:	bf00      	nop
 8008630:	e004      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008632:	bf00      	nop
 8008634:	e002      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800863a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008644:	4ba1      	ldr	r3, [pc, #644]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008648:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008654:	4a9d      	ldr	r2, [pc, #628]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008656:	430b      	orrs	r3, r1
 8008658:	6593      	str	r3, [r2, #88]	@ 0x58
 800865a:	e003      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f002 0308 	and.w	r3, r2, #8
 8008670:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008674:	2300      	movs	r3, #0
 8008676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800867a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800867e:	460b      	mov	r3, r1
 8008680:	4313      	orrs	r3, r2
 8008682:	d01e      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800868c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008690:	d10c      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008696:	3328      	adds	r3, #40	@ 0x28
 8008698:	2102      	movs	r1, #2
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fe54 	bl	8009348 <RCCEx_PLL3_Config>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086ac:	4b87      	ldr	r3, [pc, #540]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086bc:	4a83      	ldr	r2, [pc, #524]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086be:	430b      	orrs	r3, r1
 80086c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f002 0310 	and.w	r3, r2, #16
 80086ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086d2:	2300      	movs	r3, #0
 80086d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80086dc:	460b      	mov	r3, r1
 80086de:	4313      	orrs	r3, r2
 80086e0:	d01e      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ee:	d10c      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f4:	3328      	adds	r3, #40	@ 0x28
 80086f6:	2102      	movs	r1, #2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fe25 	bl	8009348 <RCCEx_PLL3_Config>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800870a:	4b70      	ldr	r3, [pc, #448]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800870c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800870e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800871a:	4a6c      	ldr	r2, [pc, #432]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800871c:	430b      	orrs	r3, r1
 800871e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800872c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008730:	2300      	movs	r3, #0
 8008732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008736:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800873a:	460b      	mov	r3, r1
 800873c:	4313      	orrs	r3, r2
 800873e:	d03e      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800874c:	d022      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800874e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008752:	d81b      	bhi.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800875c:	d00b      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800875e:	e015      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008764:	3308      	adds	r3, #8
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fd3b 	bl	80091e4 <RCCEx_PLL2_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008774:	e00f      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877a:	3328      	adds	r3, #40	@ 0x28
 800877c:	2102      	movs	r1, #2
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fde2 	bl	8009348 <RCCEx_PLL3_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800878a:	e004      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008792:	e000      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800879e:	4b4b      	ldr	r3, [pc, #300]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087ae:	4a47      	ldr	r2, [pc, #284]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087b0:	430b      	orrs	r3, r1
 80087b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80087b4:	e003      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80087ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087cc:	2300      	movs	r3, #0
 80087ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80087d4:	460b      	mov	r3, r1
 80087d6:	4313      	orrs	r3, r2
 80087d8:	d03b      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087e6:	d01f      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80087e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087ec:	d818      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80087ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087f2:	d003      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80087f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087f8:	d007      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80087fa:	e011      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087fc:	4b33      	ldr	r3, [pc, #204]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	4a32      	ldr	r2, [pc, #200]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008808:	e00f      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	3328      	adds	r3, #40	@ 0x28
 8008810:	2101      	movs	r1, #1
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fd98 	bl	8009348 <RCCEx_PLL3_Config>
 8008818:	4603      	mov	r3, r0
 800881a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800881e:	e004      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008826:	e000      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008832:	4b26      	ldr	r3, [pc, #152]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008836:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008842:	4a22      	ldr	r2, [pc, #136]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008844:	430b      	orrs	r3, r1
 8008846:	6553      	str	r3, [r2, #84]	@ 0x54
 8008848:	e003      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800884e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800885e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008860:	2300      	movs	r3, #0
 8008862:	677b      	str	r3, [r7, #116]	@ 0x74
 8008864:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008868:	460b      	mov	r3, r1
 800886a:	4313      	orrs	r3, r2
 800886c:	d034      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800887c:	d007      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800887e:	e011      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b12      	ldr	r3, [pc, #72]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	4a11      	ldr	r2, [pc, #68]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800888c:	e00e      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	3308      	adds	r3, #8
 8008894:	2102      	movs	r1, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fca4 	bl	80091e4 <RCCEx_PLL2_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088a2:	e003      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10d      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088b4:	4b05      	ldr	r3, [pc, #20]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c2:	4a02      	ldr	r2, [pc, #8]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088c4:	430b      	orrs	r3, r1
 80088c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088c8:	e006      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80088ca:	bf00      	nop
 80088cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80088e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088e6:	2300      	movs	r3, #0
 80088e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80088ee:	460b      	mov	r3, r1
 80088f0:	4313      	orrs	r3, r2
 80088f2:	d00c      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f8:	3328      	adds	r3, #40	@ 0x28
 80088fa:	2102      	movs	r1, #2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fd23 	bl	8009348 <RCCEx_PLL3_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800891a:	663b      	str	r3, [r7, #96]	@ 0x60
 800891c:	2300      	movs	r3, #0
 800891e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008920:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008924:	460b      	mov	r3, r1
 8008926:	4313      	orrs	r3, r2
 8008928:	d038      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008936:	d018      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800893c:	d811      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800893e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008942:	d014      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008948:	d80b      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d011      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800894e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008952:	d106      	bne.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008954:	4bc3      	ldr	r3, [pc, #780]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	4ac2      	ldr	r2, [pc, #776]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800895a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800895e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008960:	e008      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008968:	e004      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800896a:	bf00      	nop
 800896c:	e002      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800896e:	bf00      	nop
 8008970:	e000      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800897c:	4bb9      	ldr	r3, [pc, #740]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800897e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008980:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898c:	4ab5      	ldr	r2, [pc, #724]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898e:	430b      	orrs	r3, r1
 8008990:	6553      	str	r3, [r2, #84]	@ 0x54
 8008992:	e003      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800899c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80089a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089aa:	2300      	movs	r3, #0
 80089ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80089b2:	460b      	mov	r3, r1
 80089b4:	4313      	orrs	r3, r2
 80089b6:	d009      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089b8:	4baa      	ldr	r3, [pc, #680]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089c6:	4aa7      	ldr	r2, [pc, #668]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089c8:	430b      	orrs	r3, r1
 80089ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80089d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80089da:	2300      	movs	r3, #0
 80089dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80089de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80089e2:	460b      	mov	r3, r1
 80089e4:	4313      	orrs	r3, r2
 80089e6:	d00a      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089e8:	4b9e      	ldr	r3, [pc, #632]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80089f8:	4a9a      	ldr	r2, [pc, #616]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089fa:	430b      	orrs	r3, r1
 80089fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008a14:	460b      	mov	r3, r1
 8008a16:	4313      	orrs	r3, r2
 8008a18:	d009      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a1a:	4b92      	ldr	r3, [pc, #584]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a28:	4a8e      	ldr	r2, [pc, #568]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a44:	460b      	mov	r3, r1
 8008a46:	4313      	orrs	r3, r2
 8008a48:	d00e      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a4a:	4b86      	ldr	r3, [pc, #536]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	4a85      	ldr	r2, [pc, #532]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a54:	6113      	str	r3, [r2, #16]
 8008a56:	4b83      	ldr	r3, [pc, #524]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a58:	6919      	ldr	r1, [r3, #16]
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a62:	4a80      	ldr	r2, [pc, #512]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a76:	2300      	movs	r3, #0
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4313      	orrs	r3, r2
 8008a82:	d009      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a84:	4b77      	ldr	r3, [pc, #476]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a92:	4a74      	ldr	r2, [pc, #464]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a94:	430b      	orrs	r3, r1
 8008a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aaa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	d00a      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac4:	4a67      	ldr	r2, [pc, #412]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008adc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	d011      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aea:	3308      	adds	r3, #8
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fb78 	bl	80091e4 <RCCEx_PLL2_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	2100      	movs	r1, #0
 8008b14:	6239      	str	r1, [r7, #32]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b20:	460b      	mov	r3, r1
 8008b22:	4313      	orrs	r3, r2
 8008b24:	d011      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fb58 	bl	80091e4 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	2100      	movs	r1, #0
 8008b54:	61b9      	str	r1, [r7, #24]
 8008b56:	f003 0304 	and.w	r3, r3, #4
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b60:	460b      	mov	r3, r1
 8008b62:	4313      	orrs	r3, r2
 8008b64:	d011      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	2102      	movs	r1, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fb38 	bl	80091e4 <RCCEx_PLL2_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	2100      	movs	r1, #0
 8008b94:	6139      	str	r1, [r7, #16]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	d011      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008baa:	3328      	adds	r3, #40	@ 0x28
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fbca 	bl	8009348 <RCCEx_PLL3_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008be0:	460b      	mov	r3, r1
 8008be2:	4313      	orrs	r3, r2
 8008be4:	d011      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bea:	3328      	adds	r3, #40	@ 0x28
 8008bec:	2101      	movs	r1, #1
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fbaa 	bl	8009348 <RCCEx_PLL3_Config>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	2100      	movs	r1, #0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	607b      	str	r3, [r7, #4]
 8008c1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c20:	460b      	mov	r3, r1
 8008c22:	4313      	orrs	r3, r2
 8008c24:	d011      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2a:	3328      	adds	r3, #40	@ 0x28
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fb8a 	bl	8009348 <RCCEx_PLL3_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008c4a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	e000      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c64:	58024400 	.word	0x58024400

08008c68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c6c:	f7fe fd96 	bl	800779c <HAL_RCC_GetHCLKFreq>
 8008c70:	4602      	mov	r2, r0
 8008c72:	4b06      	ldr	r3, [pc, #24]	@ (8008c8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	091b      	lsrs	r3, r3, #4
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	4904      	ldr	r1, [pc, #16]	@ (8008c90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c7e:	5ccb      	ldrb	r3, [r1, r3]
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	58024400 	.word	0x58024400
 8008c90:	08010658 	.word	0x08010658

08008c94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b089      	sub	sp, #36	@ 0x24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008caa:	0b1b      	lsrs	r3, r3, #12
 8008cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008cb2:	4b9c      	ldr	r3, [pc, #624]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb6:	091b      	lsrs	r3, r3, #4
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008cbe:	4b99      	ldr	r3, [pc, #612]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc2:	08db      	lsrs	r3, r3, #3
 8008cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8111 	beq.w	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f000 8083 	beq.w	8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	f200 80a1 	bhi.w	8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d056      	beq.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cfe:	e099      	b.n	8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d00:	4b88      	ldr	r3, [pc, #544]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0320 	and.w	r3, r3, #32
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d02d      	beq.n	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d0c:	4b85      	ldr	r3, [pc, #532]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	08db      	lsrs	r3, r3, #3
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	4a84      	ldr	r2, [pc, #528]	@ (8008f28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d18:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d36:	4b7b      	ldr	r3, [pc, #492]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d66:	e087      	b.n	8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008daa:	e065      	b.n	8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbe:	4b59      	ldr	r3, [pc, #356]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dee:	e043      	b.n	8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e02:	4b48      	ldr	r3, [pc, #288]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e32:	e021      	b.n	8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e46:	4b37      	ldr	r3, [pc, #220]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e78:	4b2a      	ldr	r3, [pc, #168]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	0a5b      	lsrs	r3, r3, #9
 8008e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e9e:	ee17 2a90 	vmov	r2, s15
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	0c1b      	lsrs	r3, r3, #16
 8008eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb0:	ee07 3a90 	vmov	s15, r3
 8008eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ecc:	ee17 2a90 	vmov	r2, s15
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ed4:	4b13      	ldr	r3, [pc, #76]	@ (8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed8:	0e1b      	lsrs	r3, r3, #24
 8008eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008efa:	ee17 2a90 	vmov	r2, s15
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f02:	e008      	b.n	8008f16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	609a      	str	r2, [r3, #8]
}
 8008f16:	bf00      	nop
 8008f18:	3724      	adds	r7, #36	@ 0x24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	58024400 	.word	0x58024400
 8008f28:	03d09000 	.word	0x03d09000
 8008f2c:	46000000 	.word	0x46000000
 8008f30:	4c742400 	.word	0x4c742400
 8008f34:	4a742400 	.word	0x4a742400
 8008f38:	4bb71b00 	.word	0x4bb71b00

08008f3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	@ 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f44:	4ba1      	ldr	r3, [pc, #644]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f48:	f003 0303 	and.w	r3, r3, #3
 8008f4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f4e:	4b9f      	ldr	r3, [pc, #636]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f52:	0d1b      	lsrs	r3, r3, #20
 8008f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f5a:	4b9c      	ldr	r3, [pc, #624]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f66:	4b99      	ldr	r3, [pc, #612]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6a:	08db      	lsrs	r3, r3, #3
 8008f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8111 	beq.w	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	f000 8083 	beq.w	8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	f200 80a1 	bhi.w	80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d056      	beq.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fa6:	e099      	b.n	80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fa8:	4b88      	ldr	r3, [pc, #544]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d02d      	beq.n	8009010 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fb4:	4b85      	ldr	r3, [pc, #532]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	08db      	lsrs	r3, r3, #3
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	4a84      	ldr	r2, [pc, #528]	@ (80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fde:	4b7b      	ldr	r3, [pc, #492]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800900e:	e087      	b.n	8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80091d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800901e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009022:	4b6a      	ldr	r3, [pc, #424]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009032:	ed97 6a03 	vldr	s12, [r7, #12]
 8009036:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800903a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009052:	e065      	b.n	8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b59      	ldr	r3, [pc, #356]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a03 	vldr	s12, [r7, #12]
 800907a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009096:	e043      	b.n	8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090aa:	4b48      	ldr	r3, [pc, #288]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80090be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090da:	e021      	b.n	8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ee:	4b37      	ldr	r3, [pc, #220]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009102:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800911e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009120:	4b2a      	ldr	r3, [pc, #168]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009124:	0a5b      	lsrs	r3, r3, #9
 8009126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800913a:	edd7 6a07 	vldr	s13, [r7, #28]
 800913e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009146:	ee17 2a90 	vmov	r2, s15
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800914e:	4b1f      	ldr	r3, [pc, #124]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009152:	0c1b      	lsrs	r3, r3, #16
 8009154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009158:	ee07 3a90 	vmov	s15, r3
 800915c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009168:	edd7 6a07 	vldr	s13, [r7, #28]
 800916c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009174:	ee17 2a90 	vmov	r2, s15
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800917c:	4b13      	ldr	r3, [pc, #76]	@ (80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800917e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009180:	0e1b      	lsrs	r3, r3, #24
 8009182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009196:	edd7 6a07 	vldr	s13, [r7, #28]
 800919a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800919e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a2:	ee17 2a90 	vmov	r2, s15
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091aa:	e008      	b.n	80091be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	609a      	str	r2, [r3, #8]
}
 80091be:	bf00      	nop
 80091c0:	3724      	adds	r7, #36	@ 0x24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	58024400 	.word	0x58024400
 80091d0:	03d09000 	.word	0x03d09000
 80091d4:	46000000 	.word	0x46000000
 80091d8:	4c742400 	.word	0x4c742400
 80091dc:	4a742400 	.word	0x4a742400
 80091e0:	4bb71b00 	.word	0x4bb71b00

080091e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091f2:	4b53      	ldr	r3, [pc, #332]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80091f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d101      	bne.n	8009202 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e099      	b.n	8009336 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009202:	4b4f      	ldr	r3, [pc, #316]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4e      	ldr	r2, [pc, #312]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009208:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800920c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800920e:	f7fa fcf5 	bl	8003bfc <HAL_GetTick>
 8009212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009214:	e008      	b.n	8009228 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009216:	f7fa fcf1 	bl	8003bfc <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d901      	bls.n	8009228 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e086      	b.n	8009336 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009228:	4b45      	ldr	r3, [pc, #276]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f0      	bne.n	8009216 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009234:	4b42      	ldr	r3, [pc, #264]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009238:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	031b      	lsls	r3, r3, #12
 8009242:	493f      	ldr	r1, [pc, #252]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009244:	4313      	orrs	r3, r2
 8009246:	628b      	str	r3, [r1, #40]	@ 0x28
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	3b01      	subs	r3, #1
 800924e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	3b01      	subs	r3, #1
 8009258:	025b      	lsls	r3, r3, #9
 800925a:	b29b      	uxth	r3, r3
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	3b01      	subs	r3, #1
 8009264:	041b      	lsls	r3, r3, #16
 8009266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800926a:	431a      	orrs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	3b01      	subs	r3, #1
 8009272:	061b      	lsls	r3, r3, #24
 8009274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009278:	4931      	ldr	r1, [pc, #196]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 800927a:	4313      	orrs	r3, r2
 800927c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800927e:	4b30      	ldr	r3, [pc, #192]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	492d      	ldr	r1, [pc, #180]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 800928c:	4313      	orrs	r3, r2
 800928e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009290:	4b2b      	ldr	r3, [pc, #172]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009294:	f023 0220 	bic.w	r2, r3, #32
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	4928      	ldr	r1, [pc, #160]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092a2:	4b27      	ldr	r3, [pc, #156]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	4a26      	ldr	r2, [pc, #152]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092a8:	f023 0310 	bic.w	r3, r3, #16
 80092ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092ae:	4b24      	ldr	r3, [pc, #144]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092b2:	4b24      	ldr	r3, [pc, #144]	@ (8009344 <RCCEx_PLL2_Config+0x160>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	69d2      	ldr	r2, [r2, #28]
 80092ba:	00d2      	lsls	r2, r2, #3
 80092bc:	4920      	ldr	r1, [pc, #128]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092c8:	f043 0310 	orr.w	r3, r3, #16
 80092cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d106      	bne.n	80092e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	4a19      	ldr	r2, [pc, #100]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092e0:	e00f      	b.n	8009302 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d106      	bne.n	80092f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092e8:	4b15      	ldr	r3, [pc, #84]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	4a14      	ldr	r2, [pc, #80]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092f4:	e005      	b.n	8009302 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092f6:	4b12      	ldr	r3, [pc, #72]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fa:	4a11      	ldr	r2, [pc, #68]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009300:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009302:	4b0f      	ldr	r3, [pc, #60]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a0e      	ldr	r2, [pc, #56]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 8009308:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800930c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800930e:	f7fa fc75 	bl	8003bfc <HAL_GetTick>
 8009312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009314:	e008      	b.n	8009328 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009316:	f7fa fc71 	bl	8003bfc <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e006      	b.n	8009336 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009328:	4b05      	ldr	r3, [pc, #20]	@ (8009340 <RCCEx_PLL2_Config+0x15c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	58024400 	.word	0x58024400
 8009344:	ffff0007 	.word	0xffff0007

08009348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009356:	4b53      	ldr	r3, [pc, #332]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	2b03      	cmp	r3, #3
 8009360:	d101      	bne.n	8009366 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e099      	b.n	800949a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009366:	4b4f      	ldr	r3, [pc, #316]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a4e      	ldr	r2, [pc, #312]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800936c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009372:	f7fa fc43 	bl	8003bfc <HAL_GetTick>
 8009376:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009378:	e008      	b.n	800938c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800937a:	f7fa fc3f 	bl	8003bfc <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d901      	bls.n	800938c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e086      	b.n	800949a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800938c:	4b45      	ldr	r3, [pc, #276]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1f0      	bne.n	800937a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009398:	4b42      	ldr	r3, [pc, #264]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800939a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	051b      	lsls	r3, r3, #20
 80093a6:	493f      	ldr	r1, [pc, #252]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	025b      	lsls	r3, r3, #9
 80093be:	b29b      	uxth	r3, r3
 80093c0:	431a      	orrs	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	041b      	lsls	r3, r3, #16
 80093ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	061b      	lsls	r3, r3, #24
 80093d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093dc:	4931      	ldr	r1, [pc, #196]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093e2:	4b30      	ldr	r3, [pc, #192]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 80093e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	492d      	ldr	r1, [pc, #180]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093f4:	4b2b      	ldr	r3, [pc, #172]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	4928      	ldr	r1, [pc, #160]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009402:	4313      	orrs	r3, r2
 8009404:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009406:	4b27      	ldr	r3, [pc, #156]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940a:	4a26      	ldr	r2, [pc, #152]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800940c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009410:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009412:	4b24      	ldr	r3, [pc, #144]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009416:	4b24      	ldr	r3, [pc, #144]	@ (80094a8 <RCCEx_PLL3_Config+0x160>)
 8009418:	4013      	ands	r3, r2
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	69d2      	ldr	r2, [r2, #28]
 800941e:	00d2      	lsls	r2, r2, #3
 8009420:	4920      	ldr	r1, [pc, #128]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009422:	4313      	orrs	r3, r2
 8009424:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009426:	4b1f      	ldr	r3, [pc, #124]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942a:	4a1e      	ldr	r2, [pc, #120]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800942c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d106      	bne.n	8009446 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009438:	4b1a      	ldr	r3, [pc, #104]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800943a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943c:	4a19      	ldr	r2, [pc, #100]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800943e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009442:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009444:	e00f      	b.n	8009466 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d106      	bne.n	800945a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800944c:	4b15      	ldr	r3, [pc, #84]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800944e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009450:	4a14      	ldr	r2, [pc, #80]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009452:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009458:	e005      	b.n	8009466 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800945a:	4b12      	ldr	r3, [pc, #72]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945e:	4a11      	ldr	r2, [pc, #68]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009460:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009464:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009466:	4b0f      	ldr	r3, [pc, #60]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a0e      	ldr	r2, [pc, #56]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800946c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009472:	f7fa fbc3 	bl	8003bfc <HAL_GetTick>
 8009476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009478:	e008      	b.n	800948c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800947a:	f7fa fbbf 	bl	8003bfc <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d901      	bls.n	800948c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e006      	b.n	800949a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <RCCEx_PLL3_Config+0x15c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0f0      	beq.n	800947a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	58024400 	.word	0x58024400
 80094a8:	ffff0007 	.word	0xffff0007

080094ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e049      	b.n	8009552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7f9 fd60 	bl	8002f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3304      	adds	r3, #4
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f000 fd5a 	bl	8009fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b01      	cmp	r3, #1
 800956e:	d001      	beq.n	8009574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e054      	b.n	800961e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2202      	movs	r2, #2
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0201 	orr.w	r2, r2, #1
 800958a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a26      	ldr	r2, [pc, #152]	@ (800962c <HAL_TIM_Base_Start_IT+0xd0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d022      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959e:	d01d      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a22      	ldr	r2, [pc, #136]	@ (8009630 <HAL_TIM_Base_Start_IT+0xd4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d018      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a21      	ldr	r2, [pc, #132]	@ (8009634 <HAL_TIM_Base_Start_IT+0xd8>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d013      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a1f      	ldr	r2, [pc, #124]	@ (8009638 <HAL_TIM_Base_Start_IT+0xdc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00e      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a1e      	ldr	r2, [pc, #120]	@ (800963c <HAL_TIM_Base_Start_IT+0xe0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d009      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009640 <HAL_TIM_Base_Start_IT+0xe4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d004      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x80>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009644 <HAL_TIM_Base_Start_IT+0xe8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d115      	bne.n	8009608 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	4b19      	ldr	r3, [pc, #100]	@ (8009648 <HAL_TIM_Base_Start_IT+0xec>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b06      	cmp	r3, #6
 80095ec:	d015      	beq.n	800961a <HAL_TIM_Base_Start_IT+0xbe>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f4:	d011      	beq.n	800961a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0201 	orr.w	r2, r2, #1
 8009604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009606:	e008      	b.n	800961a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	e000      	b.n	800961c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	40010000 	.word	0x40010000
 8009630:	40000400 	.word	0x40000400
 8009634:	40000800 	.word	0x40000800
 8009638:	40000c00 	.word	0x40000c00
 800963c:	40010400 	.word	0x40010400
 8009640:	40001800 	.word	0x40001800
 8009644:	40014000 	.word	0x40014000
 8009648:	00010007 	.word	0x00010007

0800964c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e049      	b.n	80096f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d106      	bne.n	8009678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f841 	bl	80096fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f000 fc8a 	bl	8009fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
	...

08009710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d109      	bne.n	8009734 <HAL_TIM_PWM_Start+0x24>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b01      	cmp	r3, #1
 800972a:	bf14      	ite	ne
 800972c:	2301      	movne	r3, #1
 800972e:	2300      	moveq	r3, #0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	e03c      	b.n	80097ae <HAL_TIM_PWM_Start+0x9e>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b04      	cmp	r3, #4
 8009738:	d109      	bne.n	800974e <HAL_TIM_PWM_Start+0x3e>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b01      	cmp	r3, #1
 8009744:	bf14      	ite	ne
 8009746:	2301      	movne	r3, #1
 8009748:	2300      	moveq	r3, #0
 800974a:	b2db      	uxtb	r3, r3
 800974c:	e02f      	b.n	80097ae <HAL_TIM_PWM_Start+0x9e>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b08      	cmp	r3, #8
 8009752:	d109      	bne.n	8009768 <HAL_TIM_PWM_Start+0x58>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b01      	cmp	r3, #1
 800975e:	bf14      	ite	ne
 8009760:	2301      	movne	r3, #1
 8009762:	2300      	moveq	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	e022      	b.n	80097ae <HAL_TIM_PWM_Start+0x9e>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b0c      	cmp	r3, #12
 800976c:	d109      	bne.n	8009782 <HAL_TIM_PWM_Start+0x72>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b01      	cmp	r3, #1
 8009778:	bf14      	ite	ne
 800977a:	2301      	movne	r3, #1
 800977c:	2300      	moveq	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	e015      	b.n	80097ae <HAL_TIM_PWM_Start+0x9e>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b10      	cmp	r3, #16
 8009786:	d109      	bne.n	800979c <HAL_TIM_PWM_Start+0x8c>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	bf14      	ite	ne
 8009794:	2301      	movne	r3, #1
 8009796:	2300      	moveq	r3, #0
 8009798:	b2db      	uxtb	r3, r3
 800979a:	e008      	b.n	80097ae <HAL_TIM_PWM_Start+0x9e>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	bf14      	ite	ne
 80097a8:	2301      	movne	r3, #1
 80097aa:	2300      	moveq	r3, #0
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e0a1      	b.n	80098fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <HAL_TIM_PWM_Start+0xb6>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097c4:	e023      	b.n	800980e <HAL_TIM_PWM_Start+0xfe>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d104      	bne.n	80097d6 <HAL_TIM_PWM_Start+0xc6>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097d4:	e01b      	b.n	800980e <HAL_TIM_PWM_Start+0xfe>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d104      	bne.n	80097e6 <HAL_TIM_PWM_Start+0xd6>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097e4:	e013      	b.n	800980e <HAL_TIM_PWM_Start+0xfe>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b0c      	cmp	r3, #12
 80097ea:	d104      	bne.n	80097f6 <HAL_TIM_PWM_Start+0xe6>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097f4:	e00b      	b.n	800980e <HAL_TIM_PWM_Start+0xfe>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b10      	cmp	r3, #16
 80097fa:	d104      	bne.n	8009806 <HAL_TIM_PWM_Start+0xf6>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009804:	e003      	b.n	800980e <HAL_TIM_PWM_Start+0xfe>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2202      	movs	r2, #2
 800980a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2201      	movs	r2, #1
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 ffde 	bl	800a7d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a38      	ldr	r2, [pc, #224]	@ (8009904 <HAL_TIM_PWM_Start+0x1f4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d013      	beq.n	800984e <HAL_TIM_PWM_Start+0x13e>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a37      	ldr	r2, [pc, #220]	@ (8009908 <HAL_TIM_PWM_Start+0x1f8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00e      	beq.n	800984e <HAL_TIM_PWM_Start+0x13e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a35      	ldr	r2, [pc, #212]	@ (800990c <HAL_TIM_PWM_Start+0x1fc>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d009      	beq.n	800984e <HAL_TIM_PWM_Start+0x13e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a34      	ldr	r2, [pc, #208]	@ (8009910 <HAL_TIM_PWM_Start+0x200>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d004      	beq.n	800984e <HAL_TIM_PWM_Start+0x13e>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a32      	ldr	r2, [pc, #200]	@ (8009914 <HAL_TIM_PWM_Start+0x204>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d101      	bne.n	8009852 <HAL_TIM_PWM_Start+0x142>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <HAL_TIM_PWM_Start+0x144>
 8009852:	2300      	movs	r3, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d007      	beq.n	8009868 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009866:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a25      	ldr	r2, [pc, #148]	@ (8009904 <HAL_TIM_PWM_Start+0x1f4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d022      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800987a:	d01d      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a25      	ldr	r2, [pc, #148]	@ (8009918 <HAL_TIM_PWM_Start+0x208>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d018      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a24      	ldr	r2, [pc, #144]	@ (800991c <HAL_TIM_PWM_Start+0x20c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d013      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a22      	ldr	r2, [pc, #136]	@ (8009920 <HAL_TIM_PWM_Start+0x210>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00e      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1a      	ldr	r2, [pc, #104]	@ (8009908 <HAL_TIM_PWM_Start+0x1f8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d009      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a1e      	ldr	r2, [pc, #120]	@ (8009924 <HAL_TIM_PWM_Start+0x214>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d004      	beq.n	80098b8 <HAL_TIM_PWM_Start+0x1a8>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a16      	ldr	r2, [pc, #88]	@ (800990c <HAL_TIM_PWM_Start+0x1fc>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d115      	bne.n	80098e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	4b1a      	ldr	r3, [pc, #104]	@ (8009928 <HAL_TIM_PWM_Start+0x218>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	d015      	beq.n	80098f6 <HAL_TIM_PWM_Start+0x1e6>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d0:	d011      	beq.n	80098f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0201 	orr.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e2:	e008      	b.n	80098f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e000      	b.n	80098f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	40010000 	.word	0x40010000
 8009908:	40010400 	.word	0x40010400
 800990c:	40014000 	.word	0x40014000
 8009910:	40014400 	.word	0x40014400
 8009914:	40014800 	.word	0x40014800
 8009918:	40000400 	.word	0x40000400
 800991c:	40000800 	.word	0x40000800
 8009920:	40000c00 	.word	0x40000c00
 8009924:	40001800 	.word	0x40001800
 8009928:	00010007 	.word	0x00010007

0800992c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d020      	beq.n	8009990 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01b      	beq.n	8009990 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f06f 0202 	mvn.w	r2, #2
 8009960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 faf6 	bl	8009f68 <HAL_TIM_IC_CaptureCallback>
 800997c:	e005      	b.n	800998a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fae8 	bl	8009f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 faf9 	bl	8009f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d020      	beq.n	80099dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d01b      	beq.n	80099dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f06f 0204 	mvn.w	r2, #4
 80099ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fad0 	bl	8009f68 <HAL_TIM_IC_CaptureCallback>
 80099c8:	e005      	b.n	80099d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fac2 	bl	8009f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fad3 	bl	8009f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 0308 	and.w	r3, r3, #8
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d020      	beq.n	8009a28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f003 0308 	and.w	r3, r3, #8
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01b      	beq.n	8009a28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f06f 0208 	mvn.w	r2, #8
 80099f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2204      	movs	r2, #4
 80099fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 faaa 	bl	8009f68 <HAL_TIM_IC_CaptureCallback>
 8009a14:	e005      	b.n	8009a22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa9c 	bl	8009f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 faad 	bl	8009f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d020      	beq.n	8009a74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f003 0310 	and.w	r3, r3, #16
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01b      	beq.n	8009a74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f06f 0210 	mvn.w	r2, #16
 8009a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2208      	movs	r2, #8
 8009a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa84 	bl	8009f68 <HAL_TIM_IC_CaptureCallback>
 8009a60:	e005      	b.n	8009a6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa76 	bl	8009f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa87 	bl	8009f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00c      	beq.n	8009a98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f06f 0201 	mvn.w	r2, #1
 8009a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7f8 f89c 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d104      	bne.n	8009aac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00c      	beq.n	8009ac6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d007      	beq.n	8009ac6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 ffc5 	bl	800aa50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00c      	beq.n	8009aea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d007      	beq.n	8009aea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 ffbd 	bl	800aa64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00c      	beq.n	8009b0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d007      	beq.n	8009b0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fa41 	bl	8009f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00c      	beq.n	8009b32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d007      	beq.n	8009b32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f06f 0220 	mvn.w	r2, #32
 8009b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 ff85 	bl	800aa3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d101      	bne.n	8009b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b56:	2302      	movs	r3, #2
 8009b58:	e0ff      	b.n	8009d5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b14      	cmp	r3, #20
 8009b66:	f200 80f0 	bhi.w	8009d4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009bc5 	.word	0x08009bc5
 8009b74:	08009d4b 	.word	0x08009d4b
 8009b78:	08009d4b 	.word	0x08009d4b
 8009b7c:	08009d4b 	.word	0x08009d4b
 8009b80:	08009c05 	.word	0x08009c05
 8009b84:	08009d4b 	.word	0x08009d4b
 8009b88:	08009d4b 	.word	0x08009d4b
 8009b8c:	08009d4b 	.word	0x08009d4b
 8009b90:	08009c47 	.word	0x08009c47
 8009b94:	08009d4b 	.word	0x08009d4b
 8009b98:	08009d4b 	.word	0x08009d4b
 8009b9c:	08009d4b 	.word	0x08009d4b
 8009ba0:	08009c87 	.word	0x08009c87
 8009ba4:	08009d4b 	.word	0x08009d4b
 8009ba8:	08009d4b 	.word	0x08009d4b
 8009bac:	08009d4b 	.word	0x08009d4b
 8009bb0:	08009cc9 	.word	0x08009cc9
 8009bb4:	08009d4b 	.word	0x08009d4b
 8009bb8:	08009d4b 	.word	0x08009d4b
 8009bbc:	08009d4b 	.word	0x08009d4b
 8009bc0:	08009d09 	.word	0x08009d09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fa90 	bl	800a0f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699a      	ldr	r2, [r3, #24]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0208 	orr.w	r2, r2, #8
 8009bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0204 	bic.w	r2, r2, #4
 8009bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6999      	ldr	r1, [r3, #24]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	691a      	ldr	r2, [r3, #16]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	619a      	str	r2, [r3, #24]
      break;
 8009c02:	e0a5      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fb00 	bl	800a210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6999      	ldr	r1, [r3, #24]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	021a      	lsls	r2, r3, #8
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	619a      	str	r2, [r3, #24]
      break;
 8009c44:	e084      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fb69 	bl	800a324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f042 0208 	orr.w	r2, r2, #8
 8009c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0204 	bic.w	r2, r2, #4
 8009c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69d9      	ldr	r1, [r3, #28]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	61da      	str	r2, [r3, #28]
      break;
 8009c84:	e064      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fbd1 	bl	800a434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69da      	ldr	r2, [r3, #28]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69d9      	ldr	r1, [r3, #28]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	021a      	lsls	r2, r3, #8
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	61da      	str	r2, [r3, #28]
      break;
 8009cc6:	e043      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fc1a 	bl	800a508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0208 	orr.w	r2, r2, #8
 8009ce2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0204 	bic.w	r2, r2, #4
 8009cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d06:	e023      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fc5e 	bl	800a5d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	021a      	lsls	r2, r3, #8
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d48:	e002      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop

08009d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_TIM_ConfigClockSource+0x1c>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e0dc      	b.n	8009f3a <HAL_TIM_ConfigClockSource+0x1d6>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8009f44 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a64      	ldr	r2, [pc, #400]	@ (8009f48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	f000 80a9 	beq.w	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009dbc:	4a62      	ldr	r2, [pc, #392]	@ (8009f48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	f200 80ae 	bhi.w	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dc4:	4a61      	ldr	r2, [pc, #388]	@ (8009f4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	f000 80a1 	beq.w	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009dcc:	4a5f      	ldr	r2, [pc, #380]	@ (8009f4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	f200 80a6 	bhi.w	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8009f50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	f000 8099 	beq.w	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8009f50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	f200 809e 	bhi.w	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009de8:	f000 8091 	beq.w	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009dec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009df0:	f200 8096 	bhi.w	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009df8:	f000 8089 	beq.w	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e00:	f200 808e 	bhi.w	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e08:	d03e      	beq.n	8009e88 <HAL_TIM_ConfigClockSource+0x124>
 8009e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e0e:	f200 8087 	bhi.w	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e16:	f000 8086 	beq.w	8009f26 <HAL_TIM_ConfigClockSource+0x1c2>
 8009e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e1e:	d87f      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e20:	2b70      	cmp	r3, #112	@ 0x70
 8009e22:	d01a      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0xf6>
 8009e24:	2b70      	cmp	r3, #112	@ 0x70
 8009e26:	d87b      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e28:	2b60      	cmp	r3, #96	@ 0x60
 8009e2a:	d050      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x16a>
 8009e2c:	2b60      	cmp	r3, #96	@ 0x60
 8009e2e:	d877      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e30:	2b50      	cmp	r3, #80	@ 0x50
 8009e32:	d03c      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x14a>
 8009e34:	2b50      	cmp	r3, #80	@ 0x50
 8009e36:	d873      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d058      	beq.n	8009eee <HAL_TIM_ConfigClockSource+0x18a>
 8009e3c:	2b40      	cmp	r3, #64	@ 0x40
 8009e3e:	d86f      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e40:	2b30      	cmp	r3, #48	@ 0x30
 8009e42:	d064      	beq.n	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e44:	2b30      	cmp	r3, #48	@ 0x30
 8009e46:	d86b      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	d060      	beq.n	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d867      	bhi.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d05c      	beq.n	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e54:	2b10      	cmp	r3, #16
 8009e56:	d05a      	beq.n	8009f0e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e58:	e062      	b.n	8009f20 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e6a:	f000 fc95 	bl	800a798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	609a      	str	r2, [r3, #8]
      break;
 8009e86:	e04f      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e98:	f000 fc7e 	bl	800a798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009eaa:	609a      	str	r2, [r3, #8]
      break;
 8009eac:	e03c      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f000 fbee 	bl	800a69c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2150      	movs	r1, #80	@ 0x50
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fc48 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 8009ecc:	e02c      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eda:	461a      	mov	r2, r3
 8009edc:	f000 fc0d 	bl	800a6fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2160      	movs	r1, #96	@ 0x60
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fc38 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 8009eec:	e01c      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efa:	461a      	mov	r2, r3
 8009efc:	f000 fbce 	bl	800a69c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2140      	movs	r1, #64	@ 0x40
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fc28 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 8009f0c:	e00c      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4619      	mov	r1, r3
 8009f18:	4610      	mov	r0, r2
 8009f1a:	f000 fc1f 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 8009f1e:	e003      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	73fb      	strb	r3, [r7, #15]
      break;
 8009f24:	e000      	b.n	8009f28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	ffceff88 	.word	0xffceff88
 8009f48:	00100040 	.word	0x00100040
 8009f4c:	00100030 	.word	0x00100030
 8009f50:	00100020 	.word	0x00100020

08009f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a46      	ldr	r2, [pc, #280]	@ (800a0d0 <TIM_Base_SetConfig+0x12c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fc2:	d00f      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a43      	ldr	r2, [pc, #268]	@ (800a0d4 <TIM_Base_SetConfig+0x130>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00b      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a42      	ldr	r2, [pc, #264]	@ (800a0d8 <TIM_Base_SetConfig+0x134>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d007      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a41      	ldr	r2, [pc, #260]	@ (800a0dc <TIM_Base_SetConfig+0x138>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d003      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a40      	ldr	r2, [pc, #256]	@ (800a0e0 <TIM_Base_SetConfig+0x13c>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d108      	bne.n	8009ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a35      	ldr	r2, [pc, #212]	@ (800a0d0 <TIM_Base_SetConfig+0x12c>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d01f      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a004:	d01b      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a32      	ldr	r2, [pc, #200]	@ (800a0d4 <TIM_Base_SetConfig+0x130>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d017      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a31      	ldr	r2, [pc, #196]	@ (800a0d8 <TIM_Base_SetConfig+0x134>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d013      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a30      	ldr	r2, [pc, #192]	@ (800a0dc <TIM_Base_SetConfig+0x138>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d00f      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a2f      	ldr	r2, [pc, #188]	@ (800a0e0 <TIM_Base_SetConfig+0x13c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00b      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a2e      	ldr	r2, [pc, #184]	@ (800a0e4 <TIM_Base_SetConfig+0x140>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d007      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a2d      	ldr	r2, [pc, #180]	@ (800a0e8 <TIM_Base_SetConfig+0x144>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d003      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a2c      	ldr	r2, [pc, #176]	@ (800a0ec <TIM_Base_SetConfig+0x148>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d108      	bne.n	800a050 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a16      	ldr	r2, [pc, #88]	@ (800a0d0 <TIM_Base_SetConfig+0x12c>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00f      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a18      	ldr	r2, [pc, #96]	@ (800a0e0 <TIM_Base_SetConfig+0x13c>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d00b      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a17      	ldr	r2, [pc, #92]	@ (800a0e4 <TIM_Base_SetConfig+0x140>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d007      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a16      	ldr	r2, [pc, #88]	@ (800a0e8 <TIM_Base_SetConfig+0x144>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d003      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a15      	ldr	r2, [pc, #84]	@ (800a0ec <TIM_Base_SetConfig+0x148>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d103      	bne.n	800a0a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d105      	bne.n	800a0c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f023 0201 	bic.w	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	611a      	str	r2, [r3, #16]
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40000400 	.word	0x40000400
 800a0d8:	40000800 	.word	0x40000800
 800a0dc:	40000c00 	.word	0x40000c00
 800a0e0:	40010400 	.word	0x40010400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800

0800a0f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	f023 0201 	bic.w	r2, r3, #1
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4b37      	ldr	r3, [pc, #220]	@ (800a1f8 <TIM_OC1_SetConfig+0x108>)
 800a11c:	4013      	ands	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 0303 	bic.w	r3, r3, #3
 800a126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f023 0302 	bic.w	r3, r3, #2
 800a138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a2d      	ldr	r2, [pc, #180]	@ (800a1fc <TIM_OC1_SetConfig+0x10c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00f      	beq.n	800a16c <TIM_OC1_SetConfig+0x7c>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a2c      	ldr	r2, [pc, #176]	@ (800a200 <TIM_OC1_SetConfig+0x110>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00b      	beq.n	800a16c <TIM_OC1_SetConfig+0x7c>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a2b      	ldr	r2, [pc, #172]	@ (800a204 <TIM_OC1_SetConfig+0x114>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d007      	beq.n	800a16c <TIM_OC1_SetConfig+0x7c>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a2a      	ldr	r2, [pc, #168]	@ (800a208 <TIM_OC1_SetConfig+0x118>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d003      	beq.n	800a16c <TIM_OC1_SetConfig+0x7c>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a29      	ldr	r2, [pc, #164]	@ (800a20c <TIM_OC1_SetConfig+0x11c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10c      	bne.n	800a186 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f023 0308 	bic.w	r3, r3, #8
 800a172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f023 0304 	bic.w	r3, r3, #4
 800a184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a1c      	ldr	r2, [pc, #112]	@ (800a1fc <TIM_OC1_SetConfig+0x10c>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d00f      	beq.n	800a1ae <TIM_OC1_SetConfig+0xbe>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a1b      	ldr	r2, [pc, #108]	@ (800a200 <TIM_OC1_SetConfig+0x110>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d00b      	beq.n	800a1ae <TIM_OC1_SetConfig+0xbe>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a1a      	ldr	r2, [pc, #104]	@ (800a204 <TIM_OC1_SetConfig+0x114>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d007      	beq.n	800a1ae <TIM_OC1_SetConfig+0xbe>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a19      	ldr	r2, [pc, #100]	@ (800a208 <TIM_OC1_SetConfig+0x118>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d003      	beq.n	800a1ae <TIM_OC1_SetConfig+0xbe>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a18      	ldr	r2, [pc, #96]	@ (800a20c <TIM_OC1_SetConfig+0x11c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d111      	bne.n	800a1d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	621a      	str	r2, [r3, #32]
}
 800a1ec:	bf00      	nop
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	fffeff8f 	.word	0xfffeff8f
 800a1fc:	40010000 	.word	0x40010000
 800a200:	40010400 	.word	0x40010400
 800a204:	40014000 	.word	0x40014000
 800a208:	40014400 	.word	0x40014400
 800a20c:	40014800 	.word	0x40014800

0800a210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	f023 0210 	bic.w	r2, r3, #16
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	4b34      	ldr	r3, [pc, #208]	@ (800a30c <TIM_OC2_SetConfig+0xfc>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	4313      	orrs	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f023 0320 	bic.w	r3, r3, #32
 800a25a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a29      	ldr	r2, [pc, #164]	@ (800a310 <TIM_OC2_SetConfig+0x100>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d003      	beq.n	800a278 <TIM_OC2_SetConfig+0x68>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a28      	ldr	r2, [pc, #160]	@ (800a314 <TIM_OC2_SetConfig+0x104>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d10d      	bne.n	800a294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a27e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a1e      	ldr	r2, [pc, #120]	@ (800a310 <TIM_OC2_SetConfig+0x100>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00f      	beq.n	800a2bc <TIM_OC2_SetConfig+0xac>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a1d      	ldr	r2, [pc, #116]	@ (800a314 <TIM_OC2_SetConfig+0x104>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00b      	beq.n	800a2bc <TIM_OC2_SetConfig+0xac>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <TIM_OC2_SetConfig+0x108>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d007      	beq.n	800a2bc <TIM_OC2_SetConfig+0xac>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a31c <TIM_OC2_SetConfig+0x10c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d003      	beq.n	800a2bc <TIM_OC2_SetConfig+0xac>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a320 <TIM_OC2_SetConfig+0x110>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d113      	bne.n	800a2e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	621a      	str	r2, [r3, #32]
}
 800a2fe:	bf00      	nop
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	feff8fff 	.word	0xfeff8fff
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400
 800a318:	40014000 	.word	0x40014000
 800a31c:	40014400 	.word	0x40014400
 800a320:	40014800 	.word	0x40014800

0800a324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4b33      	ldr	r3, [pc, #204]	@ (800a41c <TIM_OC3_SetConfig+0xf8>)
 800a350:	4013      	ands	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a36c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a28      	ldr	r2, [pc, #160]	@ (800a420 <TIM_OC3_SetConfig+0xfc>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d003      	beq.n	800a38a <TIM_OC3_SetConfig+0x66>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a27      	ldr	r2, [pc, #156]	@ (800a424 <TIM_OC3_SetConfig+0x100>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d10d      	bne.n	800a3a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a420 <TIM_OC3_SetConfig+0xfc>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00f      	beq.n	800a3ce <TIM_OC3_SetConfig+0xaa>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a424 <TIM_OC3_SetConfig+0x100>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d00b      	beq.n	800a3ce <TIM_OC3_SetConfig+0xaa>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a428 <TIM_OC3_SetConfig+0x104>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d007      	beq.n	800a3ce <TIM_OC3_SetConfig+0xaa>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a42c <TIM_OC3_SetConfig+0x108>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d003      	beq.n	800a3ce <TIM_OC3_SetConfig+0xaa>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a19      	ldr	r2, [pc, #100]	@ (800a430 <TIM_OC3_SetConfig+0x10c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d113      	bne.n	800a3f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	fffeff8f 	.word	0xfffeff8f
 800a420:	40010000 	.word	0x40010000
 800a424:	40010400 	.word	0x40010400
 800a428:	40014000 	.word	0x40014000
 800a42c:	40014400 	.word	0x40014400
 800a430:	40014800 	.word	0x40014800

0800a434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4b24      	ldr	r3, [pc, #144]	@ (800a4f0 <TIM_OC4_SetConfig+0xbc>)
 800a460:	4013      	ands	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	4313      	orrs	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a47e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	031b      	lsls	r3, r3, #12
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	4313      	orrs	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a19      	ldr	r2, [pc, #100]	@ (800a4f4 <TIM_OC4_SetConfig+0xc0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d00f      	beq.n	800a4b4 <TIM_OC4_SetConfig+0x80>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a18      	ldr	r2, [pc, #96]	@ (800a4f8 <TIM_OC4_SetConfig+0xc4>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00b      	beq.n	800a4b4 <TIM_OC4_SetConfig+0x80>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a17      	ldr	r2, [pc, #92]	@ (800a4fc <TIM_OC4_SetConfig+0xc8>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d007      	beq.n	800a4b4 <TIM_OC4_SetConfig+0x80>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a16      	ldr	r2, [pc, #88]	@ (800a500 <TIM_OC4_SetConfig+0xcc>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d003      	beq.n	800a4b4 <TIM_OC4_SetConfig+0x80>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a15      	ldr	r2, [pc, #84]	@ (800a504 <TIM_OC4_SetConfig+0xd0>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d109      	bne.n	800a4c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	019b      	lsls	r3, r3, #6
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	621a      	str	r2, [r3, #32]
}
 800a4e2:	bf00      	nop
 800a4e4:	371c      	adds	r7, #28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	feff8fff 	.word	0xfeff8fff
 800a4f4:	40010000 	.word	0x40010000
 800a4f8:	40010400 	.word	0x40010400
 800a4fc:	40014000 	.word	0x40014000
 800a500:	40014400 	.word	0x40014400
 800a504:	40014800 	.word	0x40014800

0800a508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4b21      	ldr	r3, [pc, #132]	@ (800a5b8 <TIM_OC5_SetConfig+0xb0>)
 800a534:	4013      	ands	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	041b      	lsls	r3, r3, #16
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a18      	ldr	r2, [pc, #96]	@ (800a5bc <TIM_OC5_SetConfig+0xb4>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00f      	beq.n	800a57e <TIM_OC5_SetConfig+0x76>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a17      	ldr	r2, [pc, #92]	@ (800a5c0 <TIM_OC5_SetConfig+0xb8>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00b      	beq.n	800a57e <TIM_OC5_SetConfig+0x76>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a16      	ldr	r2, [pc, #88]	@ (800a5c4 <TIM_OC5_SetConfig+0xbc>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d007      	beq.n	800a57e <TIM_OC5_SetConfig+0x76>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a15      	ldr	r2, [pc, #84]	@ (800a5c8 <TIM_OC5_SetConfig+0xc0>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d003      	beq.n	800a57e <TIM_OC5_SetConfig+0x76>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a14      	ldr	r2, [pc, #80]	@ (800a5cc <TIM_OC5_SetConfig+0xc4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d109      	bne.n	800a592 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	4313      	orrs	r3, r2
 800a590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	621a      	str	r2, [r3, #32]
}
 800a5ac:	bf00      	nop
 800a5ae:	371c      	adds	r7, #28
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	fffeff8f 	.word	0xfffeff8f
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010400 	.word	0x40010400
 800a5c4:	40014000 	.word	0x40014000
 800a5c8:	40014400 	.word	0x40014400
 800a5cc:	40014800 	.word	0x40014800

0800a5d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4b22      	ldr	r3, [pc, #136]	@ (800a684 <TIM_OC6_SetConfig+0xb4>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	021b      	lsls	r3, r3, #8
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	051b      	lsls	r3, r3, #20
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a19      	ldr	r2, [pc, #100]	@ (800a688 <TIM_OC6_SetConfig+0xb8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00f      	beq.n	800a648 <TIM_OC6_SetConfig+0x78>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a18      	ldr	r2, [pc, #96]	@ (800a68c <TIM_OC6_SetConfig+0xbc>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d00b      	beq.n	800a648 <TIM_OC6_SetConfig+0x78>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a17      	ldr	r2, [pc, #92]	@ (800a690 <TIM_OC6_SetConfig+0xc0>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_OC6_SetConfig+0x78>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a16      	ldr	r2, [pc, #88]	@ (800a694 <TIM_OC6_SetConfig+0xc4>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_OC6_SetConfig+0x78>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a15      	ldr	r2, [pc, #84]	@ (800a698 <TIM_OC6_SetConfig+0xc8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d109      	bne.n	800a65c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a64e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	029b      	lsls	r3, r3, #10
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	621a      	str	r2, [r3, #32]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	feff8fff 	.word	0xfeff8fff
 800a688:	40010000 	.word	0x40010000
 800a68c:	40010400 	.word	0x40010400
 800a690:	40014000 	.word	0x40014000
 800a694:	40014400 	.word	0x40014400
 800a698:	40014800 	.word	0x40014800

0800a69c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	f023 0201 	bic.w	r2, r3, #1
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	011b      	lsls	r3, r3, #4
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f023 030a 	bic.w	r3, r3, #10
 800a6d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	621a      	str	r2, [r3, #32]
}
 800a6ee:	bf00      	nop
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b087      	sub	sp, #28
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f023 0210 	bic.w	r2, r3, #16
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	031b      	lsls	r3, r3, #12
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a736:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
	...

0800a75c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4b09      	ldr	r3, [pc, #36]	@ (800a794 <TIM_ITRx_SetConfig+0x38>)
 800a770:	4013      	ands	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4313      	orrs	r3, r2
 800a77a:	f043 0307 	orr.w	r3, r3, #7
 800a77e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	609a      	str	r2, [r3, #8]
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	ffcfff8f 	.word	0xffcfff8f

0800a798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	021a      	lsls	r2, r3, #8
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	609a      	str	r2, [r3, #8]
}
 800a7cc:	bf00      	nop
 800a7ce:	371c      	adds	r7, #28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f003 031f 	and.w	r3, r3, #31
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6a1a      	ldr	r2, [r3, #32]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	43db      	mvns	r3, r3
 800a7fa:	401a      	ands	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a1a      	ldr	r2, [r3, #32]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f003 031f 	and.w	r3, r3, #31
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	fa01 f303 	lsl.w	r3, r1, r3
 800a810:	431a      	orrs	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	621a      	str	r2, [r3, #32]
}
 800a816:	bf00      	nop
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
	...

0800a824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a834:	2b01      	cmp	r3, #1
 800a836:	d101      	bne.n	800a83c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a838:	2302      	movs	r3, #2
 800a83a:	e06d      	b.n	800a918 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a30      	ldr	r2, [pc, #192]	@ (800a924 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d004      	beq.n	800a870 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a2f      	ldr	r2, [pc, #188]	@ (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d108      	bne.n	800a882 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a876:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a888:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	4313      	orrs	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a20      	ldr	r2, [pc, #128]	@ (800a924 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d022      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ae:	d01d      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d018      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a1c      	ldr	r2, [pc, #112]	@ (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d013      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a1a      	ldr	r2, [pc, #104]	@ (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00e      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a15      	ldr	r2, [pc, #84]	@ (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d009      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a16      	ldr	r2, [pc, #88]	@ (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d004      	beq.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a15      	ldr	r2, [pc, #84]	@ (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d10c      	bne.n	800a906 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	40010000 	.word	0x40010000
 800a928:	40010400 	.word	0x40010400
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00
 800a938:	40001800 	.word	0x40001800
 800a93c:	40014000 	.word	0x40014000

0800a940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a958:	2302      	movs	r3, #2
 800a95a:	e065      	b.n	800aa28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a16      	ldr	r2, [pc, #88]	@ (800aa34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d004      	beq.n	800a9ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a14      	ldr	r2, [pc, #80]	@ (800aa38 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d115      	bne.n	800aa16 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	051b      	lsls	r3, r3, #20
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	40010000 	.word	0x40010000
 800aa38:	40010400 	.word	0x40010400

0800aa3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e042      	b.n	800ab10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7f8 fd93 	bl	80035c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2224      	movs	r2, #36	@ 0x24
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f022 0201 	bic.w	r2, r2, #1
 800aab8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 fa3a 	bl	800bf3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fccf 	bl	800b46c <UART_SetConfig>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e01b      	b.n	800ab10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aaf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0201 	orr.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 fab9 	bl	800c080 <UART_CheckIdleState>
 800ab0e:	4603      	mov	r3, r0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08a      	sub	sp, #40	@ 0x28
 800ab1c:	af02      	add	r7, sp, #8
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	4613      	mov	r3, r2
 800ab26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	d17b      	bne.n	800ac2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <HAL_UART_Transmit+0x26>
 800ab38:	88fb      	ldrh	r3, [r7, #6]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e074      	b.n	800ac2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2221      	movs	r2, #33	@ 0x21
 800ab4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab52:	f7f9 f853 	bl	8003bfc <HAL_GetTick>
 800ab56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	88fa      	ldrh	r2, [r7, #6]
 800ab5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	88fa      	ldrh	r2, [r7, #6]
 800ab64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab70:	d108      	bne.n	800ab84 <HAL_UART_Transmit+0x6c>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d104      	bne.n	800ab84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	61bb      	str	r3, [r7, #24]
 800ab82:	e003      	b.n	800ab8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab8c:	e030      	b.n	800abf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	2200      	movs	r2, #0
 800ab96:	2180      	movs	r1, #128	@ 0x80
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f001 fb1b 	bl	800c1d4 <UART_WaitOnFlagUntilTimeout>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e03d      	b.n	800ac2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10b      	bne.n	800abce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	3302      	adds	r3, #2
 800abca:	61bb      	str	r3, [r7, #24]
 800abcc:	e007      	b.n	800abde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	3301      	adds	r3, #1
 800abdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	3b01      	subs	r3, #1
 800abe8:	b29a      	uxth	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1c8      	bne.n	800ab8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2200      	movs	r2, #0
 800ac04:	2140      	movs	r1, #64	@ 0x40
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f001 fae4 	bl	800c1d4 <UART_WaitOnFlagUntilTimeout>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e006      	b.n	800ac2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e000      	b.n	800ac2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ac2a:	2302      	movs	r3, #2
  }
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08a      	sub	sp, #40	@ 0x28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d137      	bne.n	800acbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <HAL_UART_Receive_IT+0x24>
 800ac52:	88fb      	ldrh	r3, [r7, #6]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e030      	b.n	800acbe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a18      	ldr	r2, [pc, #96]	@ (800acc8 <HAL_UART_Receive_IT+0x94>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d01f      	beq.n	800acac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d018      	beq.n	800acac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	613b      	str	r3, [r7, #16]
   return(result);
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	623b      	str	r3, [r7, #32]
 800ac9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	69f9      	ldr	r1, [r7, #28]
 800ac9e:	6a3a      	ldr	r2, [r7, #32]
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e6      	bne.n	800ac7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	461a      	mov	r2, r3
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f001 fafc 	bl	800c2b0 <UART_Start_Receive_IT>
 800acb8:	4603      	mov	r3, r0
 800acba:	e000      	b.n	800acbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800acbc:	2302      	movs	r3, #2
  }
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3728      	adds	r7, #40	@ 0x28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	58000c00 	.word	0x58000c00

0800accc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b0ba      	sub	sp, #232	@ 0xe8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800acf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800acf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800acfa:	4013      	ands	r3, r2
 800acfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d11b      	bne.n	800ad40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d015      	beq.n	800ad40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d105      	bne.n	800ad2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d009      	beq.n	800ad40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 8377 	beq.w	800b424 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
      }
      return;
 800ad3e:	e371      	b.n	800b424 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 8123 	beq.w	800af90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad4e:	4b8d      	ldr	r3, [pc, #564]	@ (800af84 <HAL_UART_IRQHandler+0x2b8>)
 800ad50:	4013      	ands	r3, r2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ad5a:	4b8b      	ldr	r3, [pc, #556]	@ (800af88 <HAL_UART_IRQHandler+0x2bc>)
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 8116 	beq.w	800af90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d011      	beq.n	800ad94 <HAL_UART_IRQHandler+0xc8>
 800ad70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00b      	beq.n	800ad94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2201      	movs	r2, #1
 800ad82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad8a:	f043 0201 	orr.w	r2, r3, #1
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d011      	beq.n	800adc4 <HAL_UART_IRQHandler+0xf8>
 800ada0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2202      	movs	r2, #2
 800adb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adba:	f043 0204 	orr.w	r2, r3, #4
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d011      	beq.n	800adf4 <HAL_UART_IRQHandler+0x128>
 800add0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2204      	movs	r2, #4
 800ade2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adea:	f043 0202 	orr.w	r2, r3, #2
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adf8:	f003 0308 	and.w	r3, r3, #8
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d017      	beq.n	800ae30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae04:	f003 0320 	and.w	r3, r3, #32
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d105      	bne.n	800ae18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae10:	4b5c      	ldr	r3, [pc, #368]	@ (800af84 <HAL_UART_IRQHandler+0x2b8>)
 800ae12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00b      	beq.n	800ae30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae26:	f043 0208 	orr.w	r2, r3, #8
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d012      	beq.n	800ae62 <HAL_UART_IRQHandler+0x196>
 800ae3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae58:	f043 0220 	orr.w	r2, r3, #32
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 82dd 	beq.w	800b428 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d013      	beq.n	800aea2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae7e:	f003 0320 	and.w	r3, r3, #32
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d105      	bne.n	800ae92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb6:	2b40      	cmp	r3, #64	@ 0x40
 800aeb8:	d005      	beq.n	800aec6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aeba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aebe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d054      	beq.n	800af70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fb14 	bl	800c4f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aed6:	2b40      	cmp	r3, #64	@ 0x40
 800aed8:	d146      	bne.n	800af68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3308      	adds	r3, #8
 800af02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af16:	e841 2300 	strex	r3, r2, [r1]
 800af1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1d9      	bne.n	800aeda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d017      	beq.n	800af60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af36:	4a15      	ldr	r2, [pc, #84]	@ (800af8c <HAL_UART_IRQHandler+0x2c0>)
 800af38:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af40:	4618      	mov	r0, r3
 800af42:	f7f9 fb19 	bl	8004578 <HAL_DMA_Abort_IT>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d019      	beq.n	800af80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800af5a:	4610      	mov	r0, r2
 800af5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af5e:	e00f      	b.n	800af80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fa6d 	bl	800b440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af66:	e00b      	b.n	800af80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fa69 	bl	800b440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6e:	e007      	b.n	800af80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa65 	bl	800b440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800af7e:	e253      	b.n	800b428 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af80:	bf00      	nop
    return;
 800af82:	e251      	b.n	800b428 <HAL_UART_IRQHandler+0x75c>
 800af84:	10000001 	.word	0x10000001
 800af88:	04000120 	.word	0x04000120
 800af8c:	0800c5c1 	.word	0x0800c5c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af94:	2b01      	cmp	r3, #1
 800af96:	f040 81e7 	bne.w	800b368 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af9e:	f003 0310 	and.w	r3, r3, #16
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 81e0 	beq.w	800b368 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 81d9 	beq.w	800b368 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2210      	movs	r2, #16
 800afbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afc8:	2b40      	cmp	r3, #64	@ 0x40
 800afca:	f040 8151 	bne.w	800b270 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a96      	ldr	r2, [pc, #600]	@ (800b230 <HAL_UART_IRQHandler+0x564>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d068      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a93      	ldr	r2, [pc, #588]	@ (800b234 <HAL_UART_IRQHandler+0x568>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d061      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a91      	ldr	r2, [pc, #580]	@ (800b238 <HAL_UART_IRQHandler+0x56c>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d05a      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a8e      	ldr	r2, [pc, #568]	@ (800b23c <HAL_UART_IRQHandler+0x570>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d053      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a8c      	ldr	r2, [pc, #560]	@ (800b240 <HAL_UART_IRQHandler+0x574>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d04c      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a89      	ldr	r2, [pc, #548]	@ (800b244 <HAL_UART_IRQHandler+0x578>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d045      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a87      	ldr	r2, [pc, #540]	@ (800b248 <HAL_UART_IRQHandler+0x57c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d03e      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a84      	ldr	r2, [pc, #528]	@ (800b24c <HAL_UART_IRQHandler+0x580>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d037      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a82      	ldr	r2, [pc, #520]	@ (800b250 <HAL_UART_IRQHandler+0x584>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d030      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a7f      	ldr	r2, [pc, #508]	@ (800b254 <HAL_UART_IRQHandler+0x588>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d029      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a7d      	ldr	r2, [pc, #500]	@ (800b258 <HAL_UART_IRQHandler+0x58c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d022      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a7a      	ldr	r2, [pc, #488]	@ (800b25c <HAL_UART_IRQHandler+0x590>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d01b      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a78      	ldr	r2, [pc, #480]	@ (800b260 <HAL_UART_IRQHandler+0x594>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d014      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a75      	ldr	r2, [pc, #468]	@ (800b264 <HAL_UART_IRQHandler+0x598>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d00d      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a73      	ldr	r2, [pc, #460]	@ (800b268 <HAL_UART_IRQHandler+0x59c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d006      	beq.n	800b0ae <HAL_UART_IRQHandler+0x3e2>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a70      	ldr	r2, [pc, #448]	@ (800b26c <HAL_UART_IRQHandler+0x5a0>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d106      	bne.n	800b0bc <HAL_UART_IRQHandler+0x3f0>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	e005      	b.n	800b0c8 <HAL_UART_IRQHandler+0x3fc>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 81ab 	beq.w	800b42c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	f080 81a3 	bcs.w	800b42c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0fc:	f000 8087 	beq.w	800b20e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b11c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b12a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b12e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b136:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1da      	bne.n	800b100 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3308      	adds	r3, #8
 800b150:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b15a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3308      	adds	r3, #8
 800b16a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b16e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b172:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b176:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e1      	bne.n	800b14a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3308      	adds	r3, #8
 800b18c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b190:	e853 3f00 	ldrex	r3, [r3]
 800b194:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b19c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b1aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b1ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b1b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1b2:	e841 2300 	strex	r3, r2, [r1]
 800b1b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b1b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e3      	bne.n	800b186 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1d4:	e853 3f00 	ldrex	r3, [r3]
 800b1d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1dc:	f023 0310 	bic.w	r3, r3, #16
 800b1e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e4      	bne.n	800b1cc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f8 fe97 	bl	8003f3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2202      	movs	r2, #2
 800b212:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b220:	b29b      	uxth	r3, r3
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	b29b      	uxth	r3, r3
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f913 	bl	800b454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b22e:	e0fd      	b.n	800b42c <HAL_UART_IRQHandler+0x760>
 800b230:	40020010 	.word	0x40020010
 800b234:	40020028 	.word	0x40020028
 800b238:	40020040 	.word	0x40020040
 800b23c:	40020058 	.word	0x40020058
 800b240:	40020070 	.word	0x40020070
 800b244:	40020088 	.word	0x40020088
 800b248:	400200a0 	.word	0x400200a0
 800b24c:	400200b8 	.word	0x400200b8
 800b250:	40020410 	.word	0x40020410
 800b254:	40020428 	.word	0x40020428
 800b258:	40020440 	.word	0x40020440
 800b25c:	40020458 	.word	0x40020458
 800b260:	40020470 	.word	0x40020470
 800b264:	40020488 	.word	0x40020488
 800b268:	400204a0 	.word	0x400204a0
 800b26c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 80cf 	beq.w	800b430 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 80ca 	beq.w	800b430 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b2be:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2c6:	e841 2300 	strex	r3, r2, [r1]
 800b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1e4      	bne.n	800b29c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b2e2:	6a3a      	ldr	r2, [r7, #32]
 800b2e4:	4b55      	ldr	r3, [pc, #340]	@ (800b43c <HAL_UART_IRQHandler+0x770>)
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2fe:	e841 2300 	strex	r3, r2, [r1]
 800b302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e3      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	e853 3f00 	ldrex	r3, [r3]
 800b32a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f023 0310 	bic.w	r3, r3, #16
 800b332:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b344:	69b9      	ldr	r1, [r7, #24]
 800b346:	69fa      	ldr	r2, [r7, #28]
 800b348:	e841 2300 	strex	r3, r2, [r1]
 800b34c:	617b      	str	r3, [r7, #20]
   return(result);
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e4      	bne.n	800b31e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b35a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f877 	bl	800b454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b366:	e063      	b.n	800b430 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b36c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00e      	beq.n	800b392 <HAL_UART_IRQHandler+0x6c6>
 800b374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d008      	beq.n	800b392 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b388:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fe76 	bl	800d07c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b390:	e051      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d014      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d008      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d03a      	beq.n	800b434 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4798      	blx	r3
    }
    return;
 800b3c6:	e035      	b.n	800b434 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d009      	beq.n	800b3e8 <HAL_UART_IRQHandler+0x71c>
 800b3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 f903 	bl	800c5ec <UART_EndTransmit_IT>
    return;
 800b3e6:	e026      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <HAL_UART_IRQHandler+0x73c>
 800b3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fe4f 	bl	800d0a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b406:	e016      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b40c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d010      	beq.n	800b436 <HAL_UART_IRQHandler+0x76a>
 800b414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	da0c      	bge.n	800b436 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 fe37 	bl	800d090 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b422:	e008      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
      return;
 800b424:	bf00      	nop
 800b426:	e006      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
    return;
 800b428:	bf00      	nop
 800b42a:	e004      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
      return;
 800b42c:	bf00      	nop
 800b42e:	e002      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
      return;
 800b430:	bf00      	nop
 800b432:	e000      	b.n	800b436 <HAL_UART_IRQHandler+0x76a>
    return;
 800b434:	bf00      	nop
  }
}
 800b436:	37e8      	adds	r7, #232	@ 0xe8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	effffffe 	.word	0xeffffffe

0800b440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b46c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b470:	b092      	sub	sp, #72	@ 0x48
 800b472:	af00      	add	r7, sp, #0
 800b474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	431a      	orrs	r2, r3
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	431a      	orrs	r2, r3
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	4313      	orrs	r3, r2
 800b492:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	4bbe      	ldr	r3, [pc, #760]	@ (800b794 <UART_SetConfig+0x328>)
 800b49c:	4013      	ands	r3, r2
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	6812      	ldr	r2, [r2, #0]
 800b4a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4ab3      	ldr	r2, [pc, #716]	@ (800b798 <UART_SetConfig+0x32c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d004      	beq.n	800b4d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689a      	ldr	r2, [r3, #8]
 800b4de:	4baf      	ldr	r3, [pc, #700]	@ (800b79c <UART_SetConfig+0x330>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b4e8:	430b      	orrs	r3, r1
 800b4ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f2:	f023 010f 	bic.w	r1, r3, #15
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4aa6      	ldr	r2, [pc, #664]	@ (800b7a0 <UART_SetConfig+0x334>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d177      	bne.n	800b5fc <UART_SetConfig+0x190>
 800b50c:	4ba5      	ldr	r3, [pc, #660]	@ (800b7a4 <UART_SetConfig+0x338>)
 800b50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b514:	2b28      	cmp	r3, #40	@ 0x28
 800b516:	d86d      	bhi.n	800b5f4 <UART_SetConfig+0x188>
 800b518:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <UART_SetConfig+0xb4>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b5c5 	.word	0x0800b5c5
 800b524:	0800b5f5 	.word	0x0800b5f5
 800b528:	0800b5f5 	.word	0x0800b5f5
 800b52c:	0800b5f5 	.word	0x0800b5f5
 800b530:	0800b5f5 	.word	0x0800b5f5
 800b534:	0800b5f5 	.word	0x0800b5f5
 800b538:	0800b5f5 	.word	0x0800b5f5
 800b53c:	0800b5f5 	.word	0x0800b5f5
 800b540:	0800b5cd 	.word	0x0800b5cd
 800b544:	0800b5f5 	.word	0x0800b5f5
 800b548:	0800b5f5 	.word	0x0800b5f5
 800b54c:	0800b5f5 	.word	0x0800b5f5
 800b550:	0800b5f5 	.word	0x0800b5f5
 800b554:	0800b5f5 	.word	0x0800b5f5
 800b558:	0800b5f5 	.word	0x0800b5f5
 800b55c:	0800b5f5 	.word	0x0800b5f5
 800b560:	0800b5d5 	.word	0x0800b5d5
 800b564:	0800b5f5 	.word	0x0800b5f5
 800b568:	0800b5f5 	.word	0x0800b5f5
 800b56c:	0800b5f5 	.word	0x0800b5f5
 800b570:	0800b5f5 	.word	0x0800b5f5
 800b574:	0800b5f5 	.word	0x0800b5f5
 800b578:	0800b5f5 	.word	0x0800b5f5
 800b57c:	0800b5f5 	.word	0x0800b5f5
 800b580:	0800b5dd 	.word	0x0800b5dd
 800b584:	0800b5f5 	.word	0x0800b5f5
 800b588:	0800b5f5 	.word	0x0800b5f5
 800b58c:	0800b5f5 	.word	0x0800b5f5
 800b590:	0800b5f5 	.word	0x0800b5f5
 800b594:	0800b5f5 	.word	0x0800b5f5
 800b598:	0800b5f5 	.word	0x0800b5f5
 800b59c:	0800b5f5 	.word	0x0800b5f5
 800b5a0:	0800b5e5 	.word	0x0800b5e5
 800b5a4:	0800b5f5 	.word	0x0800b5f5
 800b5a8:	0800b5f5 	.word	0x0800b5f5
 800b5ac:	0800b5f5 	.word	0x0800b5f5
 800b5b0:	0800b5f5 	.word	0x0800b5f5
 800b5b4:	0800b5f5 	.word	0x0800b5f5
 800b5b8:	0800b5f5 	.word	0x0800b5f5
 800b5bc:	0800b5f5 	.word	0x0800b5f5
 800b5c0:	0800b5ed 	.word	0x0800b5ed
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ca:	e222      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5cc:	2304      	movs	r3, #4
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5d2:	e21e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5d4:	2308      	movs	r3, #8
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5da:	e21a      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5dc:	2310      	movs	r3, #16
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5e2:	e216      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5e4:	2320      	movs	r3, #32
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e212      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5ec:	2340      	movs	r3, #64	@ 0x40
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e20e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5f4:	2380      	movs	r3, #128	@ 0x80
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e20a      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a69      	ldr	r2, [pc, #420]	@ (800b7a8 <UART_SetConfig+0x33c>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d130      	bne.n	800b668 <UART_SetConfig+0x1fc>
 800b606:	4b67      	ldr	r3, [pc, #412]	@ (800b7a4 <UART_SetConfig+0x338>)
 800b608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	2b05      	cmp	r3, #5
 800b610:	d826      	bhi.n	800b660 <UART_SetConfig+0x1f4>
 800b612:	a201      	add	r2, pc, #4	@ (adr r2, 800b618 <UART_SetConfig+0x1ac>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b631 	.word	0x0800b631
 800b61c:	0800b639 	.word	0x0800b639
 800b620:	0800b641 	.word	0x0800b641
 800b624:	0800b649 	.word	0x0800b649
 800b628:	0800b651 	.word	0x0800b651
 800b62c:	0800b659 	.word	0x0800b659
 800b630:	2300      	movs	r3, #0
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b636:	e1ec      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63e:	e1e8      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b640:	2308      	movs	r3, #8
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b646:	e1e4      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b648:	2310      	movs	r3, #16
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64e:	e1e0      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b650:	2320      	movs	r3, #32
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b656:	e1dc      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b658:	2340      	movs	r3, #64	@ 0x40
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65e:	e1d8      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b660:	2380      	movs	r3, #128	@ 0x80
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e1d4      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a4f      	ldr	r2, [pc, #316]	@ (800b7ac <UART_SetConfig+0x340>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d130      	bne.n	800b6d4 <UART_SetConfig+0x268>
 800b672:	4b4c      	ldr	r3, [pc, #304]	@ (800b7a4 <UART_SetConfig+0x338>)
 800b674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	2b05      	cmp	r3, #5
 800b67c:	d826      	bhi.n	800b6cc <UART_SetConfig+0x260>
 800b67e:	a201      	add	r2, pc, #4	@ (adr r2, 800b684 <UART_SetConfig+0x218>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b69d 	.word	0x0800b69d
 800b688:	0800b6a5 	.word	0x0800b6a5
 800b68c:	0800b6ad 	.word	0x0800b6ad
 800b690:	0800b6b5 	.word	0x0800b6b5
 800b694:	0800b6bd 	.word	0x0800b6bd
 800b698:	0800b6c5 	.word	0x0800b6c5
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	e1b6      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6a4:	2304      	movs	r3, #4
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6aa:	e1b2      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6ac:	2308      	movs	r3, #8
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b2:	e1ae      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6b4:	2310      	movs	r3, #16
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ba:	e1aa      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6bc:	2320      	movs	r3, #32
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c2:	e1a6      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6c4:	2340      	movs	r3, #64	@ 0x40
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ca:	e1a2      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6cc:	2380      	movs	r3, #128	@ 0x80
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e19e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a35      	ldr	r2, [pc, #212]	@ (800b7b0 <UART_SetConfig+0x344>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d130      	bne.n	800b740 <UART_SetConfig+0x2d4>
 800b6de:	4b31      	ldr	r3, [pc, #196]	@ (800b7a4 <UART_SetConfig+0x338>)
 800b6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e2:	f003 0307 	and.w	r3, r3, #7
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	d826      	bhi.n	800b738 <UART_SetConfig+0x2cc>
 800b6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f0 <UART_SetConfig+0x284>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b709 	.word	0x0800b709
 800b6f4:	0800b711 	.word	0x0800b711
 800b6f8:	0800b719 	.word	0x0800b719
 800b6fc:	0800b721 	.word	0x0800b721
 800b700:	0800b729 	.word	0x0800b729
 800b704:	0800b731 	.word	0x0800b731
 800b708:	2300      	movs	r3, #0
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e180      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b710:	2304      	movs	r3, #4
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e17c      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b718:	2308      	movs	r3, #8
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e178      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b720:	2310      	movs	r3, #16
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b726:	e174      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b728:	2320      	movs	r3, #32
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e170      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b730:	2340      	movs	r3, #64	@ 0x40
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e16c      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b738:	2380      	movs	r3, #128	@ 0x80
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e168      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a1b      	ldr	r2, [pc, #108]	@ (800b7b4 <UART_SetConfig+0x348>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d142      	bne.n	800b7d0 <UART_SetConfig+0x364>
 800b74a:	4b16      	ldr	r3, [pc, #88]	@ (800b7a4 <UART_SetConfig+0x338>)
 800b74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b74e:	f003 0307 	and.w	r3, r3, #7
 800b752:	2b05      	cmp	r3, #5
 800b754:	d838      	bhi.n	800b7c8 <UART_SetConfig+0x35c>
 800b756:	a201      	add	r2, pc, #4	@ (adr r2, 800b75c <UART_SetConfig+0x2f0>)
 800b758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75c:	0800b775 	.word	0x0800b775
 800b760:	0800b77d 	.word	0x0800b77d
 800b764:	0800b785 	.word	0x0800b785
 800b768:	0800b78d 	.word	0x0800b78d
 800b76c:	0800b7b9 	.word	0x0800b7b9
 800b770:	0800b7c1 	.word	0x0800b7c1
 800b774:	2300      	movs	r3, #0
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e14a      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b77c:	2304      	movs	r3, #4
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e146      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b784:	2308      	movs	r3, #8
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e142      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b78c:	2310      	movs	r3, #16
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e13e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b794:	cfff69f3 	.word	0xcfff69f3
 800b798:	58000c00 	.word	0x58000c00
 800b79c:	11fff4ff 	.word	0x11fff4ff
 800b7a0:	40011000 	.word	0x40011000
 800b7a4:	58024400 	.word	0x58024400
 800b7a8:	40004400 	.word	0x40004400
 800b7ac:	40004800 	.word	0x40004800
 800b7b0:	40004c00 	.word	0x40004c00
 800b7b4:	40005000 	.word	0x40005000
 800b7b8:	2320      	movs	r3, #32
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7be:	e128      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b7c0:	2340      	movs	r3, #64	@ 0x40
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c6:	e124      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b7c8:	2380      	movs	r3, #128	@ 0x80
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e120      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4acb      	ldr	r2, [pc, #812]	@ (800bb04 <UART_SetConfig+0x698>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d176      	bne.n	800b8c8 <UART_SetConfig+0x45c>
 800b7da:	4bcb      	ldr	r3, [pc, #812]	@ (800bb08 <UART_SetConfig+0x69c>)
 800b7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7e2:	2b28      	cmp	r3, #40	@ 0x28
 800b7e4:	d86c      	bhi.n	800b8c0 <UART_SetConfig+0x454>
 800b7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7ec <UART_SetConfig+0x380>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b891 	.word	0x0800b891
 800b7f0:	0800b8c1 	.word	0x0800b8c1
 800b7f4:	0800b8c1 	.word	0x0800b8c1
 800b7f8:	0800b8c1 	.word	0x0800b8c1
 800b7fc:	0800b8c1 	.word	0x0800b8c1
 800b800:	0800b8c1 	.word	0x0800b8c1
 800b804:	0800b8c1 	.word	0x0800b8c1
 800b808:	0800b8c1 	.word	0x0800b8c1
 800b80c:	0800b899 	.word	0x0800b899
 800b810:	0800b8c1 	.word	0x0800b8c1
 800b814:	0800b8c1 	.word	0x0800b8c1
 800b818:	0800b8c1 	.word	0x0800b8c1
 800b81c:	0800b8c1 	.word	0x0800b8c1
 800b820:	0800b8c1 	.word	0x0800b8c1
 800b824:	0800b8c1 	.word	0x0800b8c1
 800b828:	0800b8c1 	.word	0x0800b8c1
 800b82c:	0800b8a1 	.word	0x0800b8a1
 800b830:	0800b8c1 	.word	0x0800b8c1
 800b834:	0800b8c1 	.word	0x0800b8c1
 800b838:	0800b8c1 	.word	0x0800b8c1
 800b83c:	0800b8c1 	.word	0x0800b8c1
 800b840:	0800b8c1 	.word	0x0800b8c1
 800b844:	0800b8c1 	.word	0x0800b8c1
 800b848:	0800b8c1 	.word	0x0800b8c1
 800b84c:	0800b8a9 	.word	0x0800b8a9
 800b850:	0800b8c1 	.word	0x0800b8c1
 800b854:	0800b8c1 	.word	0x0800b8c1
 800b858:	0800b8c1 	.word	0x0800b8c1
 800b85c:	0800b8c1 	.word	0x0800b8c1
 800b860:	0800b8c1 	.word	0x0800b8c1
 800b864:	0800b8c1 	.word	0x0800b8c1
 800b868:	0800b8c1 	.word	0x0800b8c1
 800b86c:	0800b8b1 	.word	0x0800b8b1
 800b870:	0800b8c1 	.word	0x0800b8c1
 800b874:	0800b8c1 	.word	0x0800b8c1
 800b878:	0800b8c1 	.word	0x0800b8c1
 800b87c:	0800b8c1 	.word	0x0800b8c1
 800b880:	0800b8c1 	.word	0x0800b8c1
 800b884:	0800b8c1 	.word	0x0800b8c1
 800b888:	0800b8c1 	.word	0x0800b8c1
 800b88c:	0800b8b9 	.word	0x0800b8b9
 800b890:	2301      	movs	r3, #1
 800b892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b896:	e0bc      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b898:	2304      	movs	r3, #4
 800b89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89e:	e0b8      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b8a0:	2308      	movs	r3, #8
 800b8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a6:	e0b4      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b8a8:	2310      	movs	r3, #16
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ae:	e0b0      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b8b0:	2320      	movs	r3, #32
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b6:	e0ac      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b8b8:	2340      	movs	r3, #64	@ 0x40
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8be:	e0a8      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b8c0:	2380      	movs	r3, #128	@ 0x80
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c6:	e0a4      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a8f      	ldr	r2, [pc, #572]	@ (800bb0c <UART_SetConfig+0x6a0>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d130      	bne.n	800b934 <UART_SetConfig+0x4c8>
 800b8d2:	4b8d      	ldr	r3, [pc, #564]	@ (800bb08 <UART_SetConfig+0x69c>)
 800b8d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b05      	cmp	r3, #5
 800b8dc:	d826      	bhi.n	800b92c <UART_SetConfig+0x4c0>
 800b8de:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e4 <UART_SetConfig+0x478>)
 800b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e4:	0800b8fd 	.word	0x0800b8fd
 800b8e8:	0800b905 	.word	0x0800b905
 800b8ec:	0800b90d 	.word	0x0800b90d
 800b8f0:	0800b915 	.word	0x0800b915
 800b8f4:	0800b91d 	.word	0x0800b91d
 800b8f8:	0800b925 	.word	0x0800b925
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b902:	e086      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b904:	2304      	movs	r3, #4
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90a:	e082      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b90c:	2308      	movs	r3, #8
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b912:	e07e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b914:	2310      	movs	r3, #16
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91a:	e07a      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b91c:	2320      	movs	r3, #32
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e076      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b924:	2340      	movs	r3, #64	@ 0x40
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e072      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b92c:	2380      	movs	r3, #128	@ 0x80
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e06e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a75      	ldr	r2, [pc, #468]	@ (800bb10 <UART_SetConfig+0x6a4>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d130      	bne.n	800b9a0 <UART_SetConfig+0x534>
 800b93e:	4b72      	ldr	r3, [pc, #456]	@ (800bb08 <UART_SetConfig+0x69c>)
 800b940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b05      	cmp	r3, #5
 800b948:	d826      	bhi.n	800b998 <UART_SetConfig+0x52c>
 800b94a:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <UART_SetConfig+0x4e4>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b969 	.word	0x0800b969
 800b954:	0800b971 	.word	0x0800b971
 800b958:	0800b979 	.word	0x0800b979
 800b95c:	0800b981 	.word	0x0800b981
 800b960:	0800b989 	.word	0x0800b989
 800b964:	0800b991 	.word	0x0800b991
 800b968:	2300      	movs	r3, #0
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e050      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b970:	2304      	movs	r3, #4
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e04c      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b978:	2308      	movs	r3, #8
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e048      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b980:	2310      	movs	r3, #16
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e044      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b988:	2320      	movs	r3, #32
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e040      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b990:	2340      	movs	r3, #64	@ 0x40
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e03c      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b998:	2380      	movs	r3, #128	@ 0x80
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99e:	e038      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a5b      	ldr	r2, [pc, #364]	@ (800bb14 <UART_SetConfig+0x6a8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d130      	bne.n	800ba0c <UART_SetConfig+0x5a0>
 800b9aa:	4b57      	ldr	r3, [pc, #348]	@ (800bb08 <UART_SetConfig+0x69c>)
 800b9ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	2b05      	cmp	r3, #5
 800b9b4:	d826      	bhi.n	800ba04 <UART_SetConfig+0x598>
 800b9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9bc <UART_SetConfig+0x550>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800b9d5 	.word	0x0800b9d5
 800b9c0:	0800b9dd 	.word	0x0800b9dd
 800b9c4:	0800b9e5 	.word	0x0800b9e5
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800b9f5 	.word	0x0800b9f5
 800b9d0:	0800b9fd 	.word	0x0800b9fd
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e01a      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b9dc:	2304      	movs	r3, #4
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e016      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b9e4:	2308      	movs	r3, #8
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e012      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e00e      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e00a      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800b9fc:	2340      	movs	r3, #64	@ 0x40
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e006      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800ba04:	2380      	movs	r3, #128	@ 0x80
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0a:	e002      	b.n	800ba12 <UART_SetConfig+0x5a6>
 800ba0c:	2380      	movs	r3, #128	@ 0x80
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a3f      	ldr	r2, [pc, #252]	@ (800bb14 <UART_SetConfig+0x6a8>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	f040 80f8 	bne.w	800bc0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ba1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba22:	2b20      	cmp	r3, #32
 800ba24:	dc46      	bgt.n	800bab4 <UART_SetConfig+0x648>
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	f2c0 8082 	blt.w	800bb30 <UART_SetConfig+0x6c4>
 800ba2c:	3b02      	subs	r3, #2
 800ba2e:	2b1e      	cmp	r3, #30
 800ba30:	d87e      	bhi.n	800bb30 <UART_SetConfig+0x6c4>
 800ba32:	a201      	add	r2, pc, #4	@ (adr r2, 800ba38 <UART_SetConfig+0x5cc>)
 800ba34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba38:	0800babb 	.word	0x0800babb
 800ba3c:	0800bb31 	.word	0x0800bb31
 800ba40:	0800bac3 	.word	0x0800bac3
 800ba44:	0800bb31 	.word	0x0800bb31
 800ba48:	0800bb31 	.word	0x0800bb31
 800ba4c:	0800bb31 	.word	0x0800bb31
 800ba50:	0800bad3 	.word	0x0800bad3
 800ba54:	0800bb31 	.word	0x0800bb31
 800ba58:	0800bb31 	.word	0x0800bb31
 800ba5c:	0800bb31 	.word	0x0800bb31
 800ba60:	0800bb31 	.word	0x0800bb31
 800ba64:	0800bb31 	.word	0x0800bb31
 800ba68:	0800bb31 	.word	0x0800bb31
 800ba6c:	0800bb31 	.word	0x0800bb31
 800ba70:	0800bae3 	.word	0x0800bae3
 800ba74:	0800bb31 	.word	0x0800bb31
 800ba78:	0800bb31 	.word	0x0800bb31
 800ba7c:	0800bb31 	.word	0x0800bb31
 800ba80:	0800bb31 	.word	0x0800bb31
 800ba84:	0800bb31 	.word	0x0800bb31
 800ba88:	0800bb31 	.word	0x0800bb31
 800ba8c:	0800bb31 	.word	0x0800bb31
 800ba90:	0800bb31 	.word	0x0800bb31
 800ba94:	0800bb31 	.word	0x0800bb31
 800ba98:	0800bb31 	.word	0x0800bb31
 800ba9c:	0800bb31 	.word	0x0800bb31
 800baa0:	0800bb31 	.word	0x0800bb31
 800baa4:	0800bb31 	.word	0x0800bb31
 800baa8:	0800bb31 	.word	0x0800bb31
 800baac:	0800bb31 	.word	0x0800bb31
 800bab0:	0800bb23 	.word	0x0800bb23
 800bab4:	2b40      	cmp	r3, #64	@ 0x40
 800bab6:	d037      	beq.n	800bb28 <UART_SetConfig+0x6bc>
 800bab8:	e03a      	b.n	800bb30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800baba:	f7fd f8d5 	bl	8008c68 <HAL_RCCEx_GetD3PCLK1Freq>
 800babe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bac0:	e03c      	b.n	800bb3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fd f8e4 	bl	8008c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad0:	e034      	b.n	800bb3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bad2:	f107 0318 	add.w	r3, r7, #24
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fd fa30 	bl	8008f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae0:	e02c      	b.n	800bb3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bae2:	4b09      	ldr	r3, [pc, #36]	@ (800bb08 <UART_SetConfig+0x69c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b00      	cmp	r3, #0
 800baec:	d016      	beq.n	800bb1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baee:	4b06      	ldr	r3, [pc, #24]	@ (800bb08 <UART_SetConfig+0x69c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	08db      	lsrs	r3, r3, #3
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	4a07      	ldr	r2, [pc, #28]	@ (800bb18 <UART_SetConfig+0x6ac>)
 800bafa:	fa22 f303 	lsr.w	r3, r2, r3
 800bafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb00:	e01c      	b.n	800bb3c <UART_SetConfig+0x6d0>
 800bb02:	bf00      	nop
 800bb04:	40011400 	.word	0x40011400
 800bb08:	58024400 	.word	0x58024400
 800bb0c:	40007800 	.word	0x40007800
 800bb10:	40007c00 	.word	0x40007c00
 800bb14:	58000c00 	.word	0x58000c00
 800bb18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bb1c:	4b9d      	ldr	r3, [pc, #628]	@ (800bd94 <UART_SetConfig+0x928>)
 800bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb20:	e00c      	b.n	800bb3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb22:	4b9d      	ldr	r3, [pc, #628]	@ (800bd98 <UART_SetConfig+0x92c>)
 800bb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb26:	e009      	b.n	800bb3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2e:	e005      	b.n	800bb3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 81de 	beq.w	800bf00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb48:	4a94      	ldr	r2, [pc, #592]	@ (800bd9c <UART_SetConfig+0x930>)
 800bb4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb52:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	4413      	add	r3, r2
 800bb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d305      	bcc.n	800bb74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d903      	bls.n	800bb7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb7a:	e1c1      	b.n	800bf00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb7e:	2200      	movs	r2, #0
 800bb80:	60bb      	str	r3, [r7, #8]
 800bb82:	60fa      	str	r2, [r7, #12]
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb88:	4a84      	ldr	r2, [pc, #528]	@ (800bd9c <UART_SetConfig+0x930>)
 800bb8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	2200      	movs	r2, #0
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb9e:	f7f4 fbf7 	bl	8000390 <__aeabi_uldivmod>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4610      	mov	r0, r2
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f04f 0200 	mov.w	r2, #0
 800bbae:	f04f 0300 	mov.w	r3, #0
 800bbb2:	020b      	lsls	r3, r1, #8
 800bbb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbb8:	0202      	lsls	r2, r0, #8
 800bbba:	6979      	ldr	r1, [r7, #20]
 800bbbc:	6849      	ldr	r1, [r1, #4]
 800bbbe:	0849      	lsrs	r1, r1, #1
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	eb12 0804 	adds.w	r8, r2, r4
 800bbca:	eb43 0905 	adc.w	r9, r3, r5
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	469a      	mov	sl, r3
 800bbd6:	4693      	mov	fp, r2
 800bbd8:	4652      	mov	r2, sl
 800bbda:	465b      	mov	r3, fp
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7f4 fbd6 	bl	8000390 <__aeabi_uldivmod>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4613      	mov	r3, r2
 800bbea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bbf2:	d308      	bcc.n	800bc06 <UART_SetConfig+0x79a>
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbfa:	d204      	bcs.n	800bc06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc02:	60da      	str	r2, [r3, #12]
 800bc04:	e17c      	b.n	800bf00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bc0c:	e178      	b.n	800bf00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc16:	f040 80c5 	bne.w	800bda4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bc1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc1e:	2b20      	cmp	r3, #32
 800bc20:	dc48      	bgt.n	800bcb4 <UART_SetConfig+0x848>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	db7b      	blt.n	800bd1e <UART_SetConfig+0x8b2>
 800bc26:	2b20      	cmp	r3, #32
 800bc28:	d879      	bhi.n	800bd1e <UART_SetConfig+0x8b2>
 800bc2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc30 <UART_SetConfig+0x7c4>)
 800bc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc30:	0800bcbb 	.word	0x0800bcbb
 800bc34:	0800bcc3 	.word	0x0800bcc3
 800bc38:	0800bd1f 	.word	0x0800bd1f
 800bc3c:	0800bd1f 	.word	0x0800bd1f
 800bc40:	0800bccb 	.word	0x0800bccb
 800bc44:	0800bd1f 	.word	0x0800bd1f
 800bc48:	0800bd1f 	.word	0x0800bd1f
 800bc4c:	0800bd1f 	.word	0x0800bd1f
 800bc50:	0800bcdb 	.word	0x0800bcdb
 800bc54:	0800bd1f 	.word	0x0800bd1f
 800bc58:	0800bd1f 	.word	0x0800bd1f
 800bc5c:	0800bd1f 	.word	0x0800bd1f
 800bc60:	0800bd1f 	.word	0x0800bd1f
 800bc64:	0800bd1f 	.word	0x0800bd1f
 800bc68:	0800bd1f 	.word	0x0800bd1f
 800bc6c:	0800bd1f 	.word	0x0800bd1f
 800bc70:	0800bceb 	.word	0x0800bceb
 800bc74:	0800bd1f 	.word	0x0800bd1f
 800bc78:	0800bd1f 	.word	0x0800bd1f
 800bc7c:	0800bd1f 	.word	0x0800bd1f
 800bc80:	0800bd1f 	.word	0x0800bd1f
 800bc84:	0800bd1f 	.word	0x0800bd1f
 800bc88:	0800bd1f 	.word	0x0800bd1f
 800bc8c:	0800bd1f 	.word	0x0800bd1f
 800bc90:	0800bd1f 	.word	0x0800bd1f
 800bc94:	0800bd1f 	.word	0x0800bd1f
 800bc98:	0800bd1f 	.word	0x0800bd1f
 800bc9c:	0800bd1f 	.word	0x0800bd1f
 800bca0:	0800bd1f 	.word	0x0800bd1f
 800bca4:	0800bd1f 	.word	0x0800bd1f
 800bca8:	0800bd1f 	.word	0x0800bd1f
 800bcac:	0800bd1f 	.word	0x0800bd1f
 800bcb0:	0800bd11 	.word	0x0800bd11
 800bcb4:	2b40      	cmp	r3, #64	@ 0x40
 800bcb6:	d02e      	beq.n	800bd16 <UART_SetConfig+0x8aa>
 800bcb8:	e031      	b.n	800bd1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcba:	f7fb fd9f 	bl	80077fc <HAL_RCC_GetPCLK1Freq>
 800bcbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcc0:	e033      	b.n	800bd2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcc2:	f7fb fdb1 	bl	8007828 <HAL_RCC_GetPCLK2Freq>
 800bcc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcc8:	e02f      	b.n	800bd2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fc ffe0 	bl	8008c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd8:	e027      	b.n	800bd2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcda:	f107 0318 	add.w	r3, r7, #24
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fd f92c 	bl	8008f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce8:	e01f      	b.n	800bd2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcea:	4b2d      	ldr	r3, [pc, #180]	@ (800bda0 <UART_SetConfig+0x934>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d009      	beq.n	800bd0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcf6:	4b2a      	ldr	r3, [pc, #168]	@ (800bda0 <UART_SetConfig+0x934>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	08db      	lsrs	r3, r3, #3
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	4a24      	ldr	r2, [pc, #144]	@ (800bd94 <UART_SetConfig+0x928>)
 800bd02:	fa22 f303 	lsr.w	r3, r2, r3
 800bd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd08:	e00f      	b.n	800bd2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bd0a:	4b22      	ldr	r3, [pc, #136]	@ (800bd94 <UART_SetConfig+0x928>)
 800bd0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd0e:	e00c      	b.n	800bd2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd10:	4b21      	ldr	r3, [pc, #132]	@ (800bd98 <UART_SetConfig+0x92c>)
 800bd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd14:	e009      	b.n	800bd2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd1c:	e005      	b.n	800bd2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 80e7 	beq.w	800bf00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd36:	4a19      	ldr	r2, [pc, #100]	@ (800bd9c <UART_SetConfig+0x930>)
 800bd38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd40:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd44:	005a      	lsls	r2, r3, #1
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	085b      	lsrs	r3, r3, #1
 800bd4c:	441a      	add	r2, r3
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	2b0f      	cmp	r3, #15
 800bd5c:	d916      	bls.n	800bd8c <UART_SetConfig+0x920>
 800bd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd64:	d212      	bcs.n	800bd8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	f023 030f 	bic.w	r3, r3, #15
 800bd6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	085b      	lsrs	r3, r3, #1
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bd88:	60da      	str	r2, [r3, #12]
 800bd8a:	e0b9      	b.n	800bf00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd92:	e0b5      	b.n	800bf00 <UART_SetConfig+0xa94>
 800bd94:	03d09000 	.word	0x03d09000
 800bd98:	003d0900 	.word	0x003d0900
 800bd9c:	08010668 	.word	0x08010668
 800bda0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bda4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bda8:	2b20      	cmp	r3, #32
 800bdaa:	dc49      	bgt.n	800be40 <UART_SetConfig+0x9d4>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	db7c      	blt.n	800beaa <UART_SetConfig+0xa3e>
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	d87a      	bhi.n	800beaa <UART_SetConfig+0xa3e>
 800bdb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <UART_SetConfig+0x950>)
 800bdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdba:	bf00      	nop
 800bdbc:	0800be47 	.word	0x0800be47
 800bdc0:	0800be4f 	.word	0x0800be4f
 800bdc4:	0800beab 	.word	0x0800beab
 800bdc8:	0800beab 	.word	0x0800beab
 800bdcc:	0800be57 	.word	0x0800be57
 800bdd0:	0800beab 	.word	0x0800beab
 800bdd4:	0800beab 	.word	0x0800beab
 800bdd8:	0800beab 	.word	0x0800beab
 800bddc:	0800be67 	.word	0x0800be67
 800bde0:	0800beab 	.word	0x0800beab
 800bde4:	0800beab 	.word	0x0800beab
 800bde8:	0800beab 	.word	0x0800beab
 800bdec:	0800beab 	.word	0x0800beab
 800bdf0:	0800beab 	.word	0x0800beab
 800bdf4:	0800beab 	.word	0x0800beab
 800bdf8:	0800beab 	.word	0x0800beab
 800bdfc:	0800be77 	.word	0x0800be77
 800be00:	0800beab 	.word	0x0800beab
 800be04:	0800beab 	.word	0x0800beab
 800be08:	0800beab 	.word	0x0800beab
 800be0c:	0800beab 	.word	0x0800beab
 800be10:	0800beab 	.word	0x0800beab
 800be14:	0800beab 	.word	0x0800beab
 800be18:	0800beab 	.word	0x0800beab
 800be1c:	0800beab 	.word	0x0800beab
 800be20:	0800beab 	.word	0x0800beab
 800be24:	0800beab 	.word	0x0800beab
 800be28:	0800beab 	.word	0x0800beab
 800be2c:	0800beab 	.word	0x0800beab
 800be30:	0800beab 	.word	0x0800beab
 800be34:	0800beab 	.word	0x0800beab
 800be38:	0800beab 	.word	0x0800beab
 800be3c:	0800be9d 	.word	0x0800be9d
 800be40:	2b40      	cmp	r3, #64	@ 0x40
 800be42:	d02e      	beq.n	800bea2 <UART_SetConfig+0xa36>
 800be44:	e031      	b.n	800beaa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be46:	f7fb fcd9 	bl	80077fc <HAL_RCC_GetPCLK1Freq>
 800be4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be4c:	e033      	b.n	800beb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be4e:	f7fb fceb 	bl	8007828 <HAL_RCC_GetPCLK2Freq>
 800be52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be54:	e02f      	b.n	800beb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fc ff1a 	bl	8008c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be64:	e027      	b.n	800beb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be66:	f107 0318 	add.w	r3, r7, #24
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fd f866 	bl	8008f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be74:	e01f      	b.n	800beb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be76:	4b2d      	ldr	r3, [pc, #180]	@ (800bf2c <UART_SetConfig+0xac0>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 0320 	and.w	r3, r3, #32
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d009      	beq.n	800be96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be82:	4b2a      	ldr	r3, [pc, #168]	@ (800bf2c <UART_SetConfig+0xac0>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	08db      	lsrs	r3, r3, #3
 800be88:	f003 0303 	and.w	r3, r3, #3
 800be8c:	4a28      	ldr	r2, [pc, #160]	@ (800bf30 <UART_SetConfig+0xac4>)
 800be8e:	fa22 f303 	lsr.w	r3, r2, r3
 800be92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be94:	e00f      	b.n	800beb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800be96:	4b26      	ldr	r3, [pc, #152]	@ (800bf30 <UART_SetConfig+0xac4>)
 800be98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be9a:	e00c      	b.n	800beb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be9c:	4b25      	ldr	r3, [pc, #148]	@ (800bf34 <UART_SetConfig+0xac8>)
 800be9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bea0:	e009      	b.n	800beb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bea8:	e005      	b.n	800beb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800beb4:	bf00      	nop
    }

    if (pclk != 0U)
 800beb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d021      	beq.n	800bf00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf38 <UART_SetConfig+0xacc>)
 800bec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bec6:	461a      	mov	r2, r3
 800bec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beca:	fbb3 f2f2 	udiv	r2, r3, r2
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	085b      	lsrs	r3, r3, #1
 800bed4:	441a      	add	r2, r3
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bede:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee2:	2b0f      	cmp	r3, #15
 800bee4:	d909      	bls.n	800befa <UART_SetConfig+0xa8e>
 800bee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beec:	d205      	bcs.n	800befa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800beee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	60da      	str	r2, [r3, #12]
 800bef8:	e002      	b.n	800bf00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2200      	movs	r2, #0
 800bf14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bf1c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3748      	adds	r7, #72	@ 0x48
 800bf24:	46bd      	mov	sp, r7
 800bf26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf2a:	bf00      	nop
 800bf2c:	58024400 	.word	0x58024400
 800bf30:	03d09000 	.word	0x03d09000
 800bf34:	003d0900 	.word	0x003d0900
 800bf38:	08010668 	.word	0x08010668

0800bf3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf48:	f003 0308 	and.w	r3, r3, #8
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00a      	beq.n	800bf66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00a      	beq.n	800bf88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf8c:	f003 0302 	and.w	r3, r3, #2
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00a      	beq.n	800bfaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfae:	f003 0304 	and.w	r3, r3, #4
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00a      	beq.n	800bfcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	430a      	orrs	r2, r1
 800bfca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd0:	f003 0310 	and.w	r3, r3, #16
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00a      	beq.n	800bfee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d01a      	beq.n	800c052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c03a:	d10a      	bne.n	800c052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	430a      	orrs	r2, r1
 800c050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00a      	beq.n	800c074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	430a      	orrs	r2, r1
 800c072:	605a      	str	r2, [r3, #4]
  }
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b098      	sub	sp, #96	@ 0x60
 800c084:	af02      	add	r7, sp, #8
 800c086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c090:	f7f7 fdb4 	bl	8003bfc <HAL_GetTick>
 800c094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 0308 	and.w	r3, r3, #8
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	d12f      	bne.n	800c104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f88e 	bl	800c1d4 <UART_WaitOnFlagUntilTimeout>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d022      	beq.n	800c104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c6:	e853 3f00 	ldrex	r3, [r3]
 800c0ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0e4:	e841 2300 	strex	r3, r2, [r1]
 800c0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1e6      	bne.n	800c0be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2220      	movs	r2, #32
 800c0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c100:	2303      	movs	r3, #3
 800c102:	e063      	b.n	800c1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 0304 	and.w	r3, r3, #4
 800c10e:	2b04      	cmp	r3, #4
 800c110:	d149      	bne.n	800c1a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c11a:	2200      	movs	r2, #0
 800c11c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f857 	bl	800c1d4 <UART_WaitOnFlagUntilTimeout>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d03c      	beq.n	800c1a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c134:	e853 3f00 	ldrex	r3, [r3]
 800c138:	623b      	str	r3, [r7, #32]
   return(result);
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c14c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e6      	bne.n	800c12c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f023 0301 	bic.w	r3, r3, #1
 800c174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c17e:	61fa      	str	r2, [r7, #28]
 800c180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c182:	69b9      	ldr	r1, [r7, #24]
 800c184:	69fa      	ldr	r2, [r7, #28]
 800c186:	e841 2300 	strex	r3, r2, [r1]
 800c18a:	617b      	str	r3, [r7, #20]
   return(result);
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1e5      	bne.n	800c15e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2220      	movs	r2, #32
 800c196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	e012      	b.n	800c1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2220      	movs	r2, #32
 800c1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3758      	adds	r7, #88	@ 0x58
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1e4:	e04f      	b.n	800c286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ec:	d04b      	beq.n	800c286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ee:	f7f7 fd05 	bl	8003bfc <HAL_GetTick>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d302      	bcc.n	800c204 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c204:	2303      	movs	r3, #3
 800c206:	e04e      	b.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 0304 	and.w	r3, r3, #4
 800c212:	2b00      	cmp	r3, #0
 800c214:	d037      	beq.n	800c286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b80      	cmp	r3, #128	@ 0x80
 800c21a:	d034      	beq.n	800c286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2b40      	cmp	r3, #64	@ 0x40
 800c220:	d031      	beq.n	800c286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	f003 0308 	and.w	r3, r3, #8
 800c22c:	2b08      	cmp	r3, #8
 800c22e:	d110      	bne.n	800c252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2208      	movs	r2, #8
 800c236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f000 f95b 	bl	800c4f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2208      	movs	r2, #8
 800c242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	e029      	b.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c25c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c260:	d111      	bne.n	800c286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c26a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f941 	bl	800c4f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2220      	movs	r2, #32
 800c276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e00f      	b.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	69da      	ldr	r2, [r3, #28]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	4013      	ands	r3, r2
 800c290:	68ba      	ldr	r2, [r7, #8]
 800c292:	429a      	cmp	r2, r3
 800c294:	bf0c      	ite	eq
 800c296:	2301      	moveq	r3, #1
 800c298:	2300      	movne	r3, #0
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	461a      	mov	r2, r3
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d0a0      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b0a3      	sub	sp, #140	@ 0x8c
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	88fa      	ldrh	r2, [r7, #6]
 800c2c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	88fa      	ldrh	r2, [r7, #6]
 800c2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2e2:	d10e      	bne.n	800c302 <UART_Start_Receive_IT+0x52>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d105      	bne.n	800c2f8 <UART_Start_Receive_IT+0x48>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c2f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2f6:	e02d      	b.n	800c354 <UART_Start_Receive_IT+0xa4>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	22ff      	movs	r2, #255	@ 0xff
 800c2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c300:	e028      	b.n	800c354 <UART_Start_Receive_IT+0xa4>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10d      	bne.n	800c326 <UART_Start_Receive_IT+0x76>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d104      	bne.n	800c31c <UART_Start_Receive_IT+0x6c>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	22ff      	movs	r2, #255	@ 0xff
 800c316:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c31a:	e01b      	b.n	800c354 <UART_Start_Receive_IT+0xa4>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	227f      	movs	r2, #127	@ 0x7f
 800c320:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c324:	e016      	b.n	800c354 <UART_Start_Receive_IT+0xa4>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c32e:	d10d      	bne.n	800c34c <UART_Start_Receive_IT+0x9c>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d104      	bne.n	800c342 <UART_Start_Receive_IT+0x92>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	227f      	movs	r2, #127	@ 0x7f
 800c33c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c340:	e008      	b.n	800c354 <UART_Start_Receive_IT+0xa4>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	223f      	movs	r2, #63	@ 0x3f
 800c346:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c34a:	e003      	b.n	800c354 <UART_Start_Receive_IT+0xa4>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2222      	movs	r2, #34	@ 0x22
 800c360:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3308      	adds	r3, #8
 800c36a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c36e:	e853 3f00 	ldrex	r3, [r3]
 800c372:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c376:	f043 0301 	orr.w	r3, r3, #1
 800c37a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3308      	adds	r3, #8
 800c384:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c388:	673a      	str	r2, [r7, #112]	@ 0x70
 800c38a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c38e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c390:	e841 2300 	strex	r3, r2, [r1]
 800c394:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1e3      	bne.n	800c364 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3a4:	d14f      	bne.n	800c446 <UART_Start_Receive_IT+0x196>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c3ac:	88fa      	ldrh	r2, [r7, #6]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d349      	bcc.n	800c446 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3ba:	d107      	bne.n	800c3cc <UART_Start_Receive_IT+0x11c>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d103      	bne.n	800c3cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4a47      	ldr	r2, [pc, #284]	@ (800c4e4 <UART_Start_Receive_IT+0x234>)
 800c3c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800c3ca:	e002      	b.n	800c3d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4a46      	ldr	r2, [pc, #280]	@ (800c4e8 <UART_Start_Receive_IT+0x238>)
 800c3d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01a      	beq.n	800c410 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c3fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c402:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e4      	bne.n	800c3da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3308      	adds	r3, #8
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3308      	adds	r3, #8
 800c42e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c430:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c432:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c438:	e841 2300 	strex	r3, r2, [r1]
 800c43c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e5      	bne.n	800c410 <UART_Start_Receive_IT+0x160>
 800c444:	e046      	b.n	800c4d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c44e:	d107      	bne.n	800c460 <UART_Start_Receive_IT+0x1b0>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4a24      	ldr	r2, [pc, #144]	@ (800c4ec <UART_Start_Receive_IT+0x23c>)
 800c45c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c45e:	e002      	b.n	800c466 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a23      	ldr	r2, [pc, #140]	@ (800c4f0 <UART_Start_Receive_IT+0x240>)
 800c464:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d019      	beq.n	800c4a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c476:	e853 3f00 	ldrex	r3, [r3]
 800c47a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c482:	677b      	str	r3, [r7, #116]	@ 0x74
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e6      	bne.n	800c46e <UART_Start_Receive_IT+0x1be>
 800c4a0:	e018      	b.n	800c4d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f043 0320 	orr.w	r3, r3, #32
 800c4b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4c0:	623b      	str	r3, [r7, #32]
 800c4c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	69f9      	ldr	r1, [r7, #28]
 800c4c6:	6a3a      	ldr	r2, [r7, #32]
 800c4c8:	e841 2300 	strex	r3, r2, [r1]
 800c4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1e6      	bne.n	800c4a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	378c      	adds	r7, #140	@ 0x8c
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	0800cd15 	.word	0x0800cd15
 800c4e8:	0800c9b5 	.word	0x0800c9b5
 800c4ec:	0800c7fd 	.word	0x0800c7fd
 800c4f0:	0800c645 	.word	0x0800c645

0800c4f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b095      	sub	sp, #84	@ 0x54
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c51a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c51c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c520:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e6      	bne.n	800c4fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3308      	adds	r3, #8
 800c534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c53e:	69fa      	ldr	r2, [r7, #28]
 800c540:	4b1e      	ldr	r3, [pc, #120]	@ (800c5bc <UART_EndRxTransfer+0xc8>)
 800c542:	4013      	ands	r3, r2
 800c544:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3308      	adds	r3, #8
 800c54c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c54e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c556:	e841 2300 	strex	r3, r2, [r1]
 800c55a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1e5      	bne.n	800c52e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c566:	2b01      	cmp	r3, #1
 800c568:	d118      	bne.n	800c59c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	e853 3f00 	ldrex	r3, [r3]
 800c576:	60bb      	str	r3, [r7, #8]
   return(result);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f023 0310 	bic.w	r3, r3, #16
 800c57e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	461a      	mov	r2, r3
 800c586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c588:	61bb      	str	r3, [r7, #24]
 800c58a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58c:	6979      	ldr	r1, [r7, #20]
 800c58e:	69ba      	ldr	r2, [r7, #24]
 800c590:	e841 2300 	strex	r3, r2, [r1]
 800c594:	613b      	str	r3, [r7, #16]
   return(result);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e6      	bne.n	800c56a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2220      	movs	r2, #32
 800c5a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c5b0:	bf00      	nop
 800c5b2:	3754      	adds	r7, #84	@ 0x54
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	effffffe 	.word	0xeffffffe

0800c5c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7fe ff2e 	bl	800b440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e4:	bf00      	nop
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b088      	sub	sp, #32
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	e853 3f00 	ldrex	r3, [r3]
 800c600:	60bb      	str	r3, [r7, #8]
   return(result);
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c608:	61fb      	str	r3, [r7, #28]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	61bb      	str	r3, [r7, #24]
 800c614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c616:	6979      	ldr	r1, [r7, #20]
 800c618:	69ba      	ldr	r2, [r7, #24]
 800c61a:	e841 2300 	strex	r3, r2, [r1]
 800c61e:	613b      	str	r3, [r7, #16]
   return(result);
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1e6      	bne.n	800c5f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2220      	movs	r2, #32
 800c62a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7f5 fc2d 	bl	8001e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c63a:	bf00      	nop
 800c63c:	3720      	adds	r7, #32
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
	...

0800c644 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b09c      	sub	sp, #112	@ 0x70
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c652:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c65c:	2b22      	cmp	r3, #34	@ 0x22
 800c65e:	f040 80be 	bne.w	800c7de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c668:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c66c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c670:	b2d9      	uxtb	r1, r3
 800c672:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c676:	b2da      	uxtb	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c67c:	400a      	ands	r2, r1
 800c67e:	b2d2      	uxtb	r2, r2
 800c680:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c692:	b29b      	uxth	r3, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f040 80a1 	bne.w	800c7ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c6ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6d2:	e841 2300 	strex	r3, r2, [r1]
 800c6d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c6d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1e6      	bne.n	800c6ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e8:	e853 3f00 	ldrex	r3, [r3]
 800c6ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f0:	f023 0301 	bic.w	r3, r3, #1
 800c6f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c6fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800c700:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c702:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c706:	e841 2300 	strex	r3, r2, [r1]
 800c70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1e5      	bne.n	800c6de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2220      	movs	r2, #32
 800c716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a33      	ldr	r2, [pc, #204]	@ (800c7f8 <UART_RxISR_8BIT+0x1b4>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d01f      	beq.n	800c770 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d018      	beq.n	800c770 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	e853 3f00 	ldrex	r3, [r3]
 800c74a:	623b      	str	r3, [r7, #32]
   return(result);
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c752:	663b      	str	r3, [r7, #96]	@ 0x60
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	461a      	mov	r2, r3
 800c75a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c75c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c75e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c764:	e841 2300 	strex	r3, r2, [r1]
 800c768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e6      	bne.n	800c73e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c774:	2b01      	cmp	r3, #1
 800c776:	d12e      	bne.n	800c7d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	e853 3f00 	ldrex	r3, [r3]
 800c78a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f023 0310 	bic.w	r3, r3, #16
 800c792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	461a      	mov	r2, r3
 800c79a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	69b9      	ldr	r1, [r7, #24]
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e6      	bne.n	800c77e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	f003 0310 	and.w	r3, r3, #16
 800c7ba:	2b10      	cmp	r3, #16
 800c7bc:	d103      	bne.n	800c7c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2210      	movs	r2, #16
 800c7c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7fe fe40 	bl	800b454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7d4:	e00b      	b.n	800c7ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7f5 fb4c 	bl	8001e74 <HAL_UART_RxCpltCallback>
}
 800c7dc:	e007      	b.n	800c7ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	699a      	ldr	r2, [r3, #24]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f042 0208 	orr.w	r2, r2, #8
 800c7ec:	619a      	str	r2, [r3, #24]
}
 800c7ee:	bf00      	nop
 800c7f0:	3770      	adds	r7, #112	@ 0x70
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	58000c00 	.word	0x58000c00

0800c7fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b09c      	sub	sp, #112	@ 0x70
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c80a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c814:	2b22      	cmp	r3, #34	@ 0x22
 800c816:	f040 80be 	bne.w	800c996 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c820:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c828:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c82a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c82e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c832:	4013      	ands	r3, r2
 800c834:	b29a      	uxth	r2, r3
 800c836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c838:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c83e:	1c9a      	adds	r2, r3, #2
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	3b01      	subs	r3, #1
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 80a1 	bne.w	800c9a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c878:	667b      	str	r3, [r7, #100]	@ 0x64
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c882:	657b      	str	r3, [r7, #84]	@ 0x54
 800c884:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c888:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e6      	bne.n	800c864 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3308      	adds	r3, #8
 800c89c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a8:	f023 0301 	bic.w	r3, r3, #1
 800c8ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c8b6:	643a      	str	r2, [r7, #64]	@ 0x40
 800c8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8be:	e841 2300 	strex	r3, r2, [r1]
 800c8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e5      	bne.n	800c896 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a33      	ldr	r2, [pc, #204]	@ (800c9b0 <UART_RxISR_16BIT+0x1b4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d01f      	beq.n	800c928 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d018      	beq.n	800c928 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	e853 3f00 	ldrex	r3, [r3]
 800c902:	61fb      	str	r3, [r7, #28]
   return(result);
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c90a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	461a      	mov	r2, r3
 800c912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c916:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c91a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c91c:	e841 2300 	strex	r3, r2, [r1]
 800c920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1e6      	bne.n	800c8f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d12e      	bne.n	800c98e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	60bb      	str	r3, [r7, #8]
   return(result);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f023 0310 	bic.w	r3, r3, #16
 800c94a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	6979      	ldr	r1, [r7, #20]
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	613b      	str	r3, [r7, #16]
   return(result);
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e6      	bne.n	800c936 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	f003 0310 	and.w	r3, r3, #16
 800c972:	2b10      	cmp	r3, #16
 800c974:	d103      	bne.n	800c97e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2210      	movs	r2, #16
 800c97c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7fe fd64 	bl	800b454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c98c:	e00b      	b.n	800c9a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7f5 fa70 	bl	8001e74 <HAL_UART_RxCpltCallback>
}
 800c994:	e007      	b.n	800c9a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	699a      	ldr	r2, [r3, #24]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f042 0208 	orr.w	r2, r2, #8
 800c9a4:	619a      	str	r2, [r3, #24]
}
 800c9a6:	bf00      	nop
 800c9a8:	3770      	adds	r7, #112	@ 0x70
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	58000c00 	.word	0x58000c00

0800c9b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b0ac      	sub	sp, #176	@ 0xb0
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69db      	ldr	r3, [r3, #28]
 800c9cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c9ea:	2b22      	cmp	r3, #34	@ 0x22
 800c9ec:	f040 8180 	bne.w	800ccf0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9fa:	e123      	b.n	800cc44 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca02:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca06:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ca0a:	b2d9      	uxtb	r1, r3
 800ca0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca16:	400a      	ands	r2, r1
 800ca18:	b2d2      	uxtb	r2, r2
 800ca1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d053      	beq.n	800caf6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d011      	beq.n	800ca7e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ca5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ca5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00b      	beq.n	800ca7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca74:	f043 0201 	orr.w	r2, r3, #1
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d011      	beq.n	800caae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ca8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00b      	beq.n	800caae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caa4:	f043 0204 	orr.w	r2, r3, #4
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cab2:	f003 0304 	and.w	r3, r3, #4
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d011      	beq.n	800cade <UART_RxISR_8BIT_FIFOEN+0x12a>
 800caba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00b      	beq.n	800cade <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2204      	movs	r2, #4
 800cacc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cad4:	f043 0202 	orr.w	r2, r3, #2
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d006      	beq.n	800caf6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7fe fca9 	bl	800b440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f040 80a0 	bne.w	800cc44 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb0c:	e853 3f00 	ldrex	r3, [r3]
 800cb10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cb12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	461a      	mov	r2, r3
 800cb22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb28:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cb2c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cb2e:	e841 2300 	strex	r3, r2, [r1]
 800cb32:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cb34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1e4      	bne.n	800cb04 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3308      	adds	r3, #8
 800cb40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb44:	e853 3f00 	ldrex	r3, [r3]
 800cb48:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cb4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb4c:	4b6e      	ldr	r3, [pc, #440]	@ (800cd08 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800cb4e:	4013      	ands	r3, r2
 800cb50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3308      	adds	r3, #8
 800cb5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb5e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cb60:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cb64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cb6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e3      	bne.n	800cb3a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2220      	movs	r2, #32
 800cb76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a60      	ldr	r2, [pc, #384]	@ (800cd0c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d021      	beq.n	800cbd4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01a      	beq.n	800cbd4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cbb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cbc0:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbc2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cbc8:	e841 2300 	strex	r3, r2, [r1]
 800cbcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cbce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1e4      	bne.n	800cb9e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d130      	bne.n	800cc3e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	f023 0310 	bic.w	r3, r3, #16
 800cbf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc04:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e4      	bne.n	800cbe2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f003 0310 	and.w	r3, r3, #16
 800cc22:	2b10      	cmp	r3, #16
 800cc24:	d103      	bne.n	800cc2e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2210      	movs	r2, #16
 800cc2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7fe fc0c 	bl	800b454 <HAL_UARTEx_RxEventCallback>
 800cc3c:	e002      	b.n	800cc44 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f5 f918 	bl	8001e74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc44:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d006      	beq.n	800cc5a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800cc4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc50:	f003 0320 	and.w	r3, r3, #32
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f47f aed1 	bne.w	800c9fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d049      	beq.n	800cd00 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc72:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d242      	bcs.n	800cd00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3308      	adds	r3, #8
 800cc80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	e853 3f00 	ldrex	r3, [r3]
 800cc88:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cc9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cca6:	e841 2300 	strex	r3, r2, [r1]
 800ccaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1e3      	bne.n	800cc7a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a16      	ldr	r2, [pc, #88]	@ (800cd10 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ccb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	e853 3f00 	ldrex	r3, [r3]
 800ccc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f043 0320 	orr.w	r3, r3, #32
 800cccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ccda:	61bb      	str	r3, [r7, #24]
 800ccdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccde:	6979      	ldr	r1, [r7, #20]
 800cce0:	69ba      	ldr	r2, [r7, #24]
 800cce2:	e841 2300 	strex	r3, r2, [r1]
 800cce6:	613b      	str	r3, [r7, #16]
   return(result);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1e4      	bne.n	800ccb8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ccee:	e007      	b.n	800cd00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	699a      	ldr	r2, [r3, #24]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f042 0208 	orr.w	r2, r2, #8
 800ccfe:	619a      	str	r2, [r3, #24]
}
 800cd00:	bf00      	nop
 800cd02:	37b0      	adds	r7, #176	@ 0xb0
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	effffffe 	.word	0xeffffffe
 800cd0c:	58000c00 	.word	0x58000c00
 800cd10:	0800c645 	.word	0x0800c645

0800cd14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b0ae      	sub	sp, #184	@ 0xb8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	69db      	ldr	r3, [r3, #28]
 800cd2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd4a:	2b22      	cmp	r3, #34	@ 0x22
 800cd4c:	f040 8184 	bne.w	800d058 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cd56:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd5a:	e127      	b.n	800cfac <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd62:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cd6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cd72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cd76:	4013      	ands	r3, r2
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd84:	1c9a      	adds	r2, r3, #2
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	69db      	ldr	r3, [r3, #28]
 800cda2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cda6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d053      	beq.n	800ce5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d011      	beq.n	800cde2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cdbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00b      	beq.n	800cde2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdd8:	f043 0201 	orr.w	r2, r3, #1
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cde2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d011      	beq.n	800ce12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cdee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00b      	beq.n	800ce12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce08:	f043 0204 	orr.w	r2, r3, #4
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce16:	f003 0304 	and.w	r3, r3, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d011      	beq.n	800ce42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ce1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00b      	beq.n	800ce42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2204      	movs	r2, #4
 800ce30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce38:	f043 0202 	orr.w	r2, r3, #2
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d006      	beq.n	800ce5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7fe faf7 	bl	800b440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f040 80a2 	bne.w	800cfac <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce70:	e853 3f00 	ldrex	r3, [r3]
 800ce74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ce76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	461a      	mov	r2, r3
 800ce86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ce92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ce9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e2      	bne.n	800ce68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3308      	adds	r3, #8
 800cea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ceac:	e853 3f00 	ldrex	r3, [r3]
 800ceb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ceb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ceb4:	4b6e      	ldr	r3, [pc, #440]	@ (800d070 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3308      	adds	r3, #8
 800cec2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cec6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cecc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cece:	e841 2300 	strex	r3, r2, [r1]
 800ced2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ced4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1e3      	bne.n	800cea2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2220      	movs	r2, #32
 800cede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a60      	ldr	r2, [pc, #384]	@ (800d074 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d021      	beq.n	800cf3c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d01a      	beq.n	800cf3c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf0e:	e853 3f00 	ldrex	r3, [r3]
 800cf12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	461a      	mov	r2, r3
 800cf24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cf28:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf30:	e841 2300 	strex	r3, r2, [r1]
 800cf34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1e4      	bne.n	800cf06 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d130      	bne.n	800cfa6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	e853 3f00 	ldrex	r3, [r3]
 800cf56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf5a:	f023 0310 	bic.w	r3, r3, #16
 800cf5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	461a      	mov	r2, r3
 800cf68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cf6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf74:	e841 2300 	strex	r3, r2, [r1]
 800cf78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e4      	bne.n	800cf4a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	69db      	ldr	r3, [r3, #28]
 800cf86:	f003 0310 	and.w	r3, r3, #16
 800cf8a:	2b10      	cmp	r3, #16
 800cf8c:	d103      	bne.n	800cf96 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2210      	movs	r2, #16
 800cf94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7fe fa58 	bl	800b454 <HAL_UARTEx_RxEventCallback>
 800cfa4:	e002      	b.n	800cfac <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f7f4 ff64 	bl	8001e74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cfac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d006      	beq.n	800cfc2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800cfb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfb8:	f003 0320 	and.w	r3, r3, #32
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f47f aecd 	bne.w	800cd5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfc8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cfcc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d049      	beq.n	800d068 <UART_RxISR_16BIT_FIFOEN+0x354>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cfda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d242      	bcs.n	800d068 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3308      	adds	r3, #8
 800cfe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	e853 3f00 	ldrex	r3, [r3]
 800cff0:	623b      	str	r3, [r7, #32]
   return(result);
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3308      	adds	r3, #8
 800d002:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d006:	633a      	str	r2, [r7, #48]	@ 0x30
 800d008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d00c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d00e:	e841 2300 	strex	r3, r2, [r1]
 800d012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1e3      	bne.n	800cfe2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a16      	ldr	r2, [pc, #88]	@ (800d078 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d01e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	e853 3f00 	ldrex	r3, [r3]
 800d02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f043 0320 	orr.w	r3, r3, #32
 800d034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	461a      	mov	r2, r3
 800d03e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d042:	61fb      	str	r3, [r7, #28]
 800d044:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d046:	69b9      	ldr	r1, [r7, #24]
 800d048:	69fa      	ldr	r2, [r7, #28]
 800d04a:	e841 2300 	strex	r3, r2, [r1]
 800d04e:	617b      	str	r3, [r7, #20]
   return(result);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1e4      	bne.n	800d020 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d056:	e007      	b.n	800d068 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	699a      	ldr	r2, [r3, #24]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f042 0208 	orr.w	r2, r2, #8
 800d066:	619a      	str	r2, [r3, #24]
}
 800d068:	bf00      	nop
 800d06a:	37b8      	adds	r7, #184	@ 0xb8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	effffffe 	.word	0xeffffffe
 800d074:	58000c00 	.word	0x58000c00
 800d078:	0800c7fd 	.word	0x0800c7fd

0800d07c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d101      	bne.n	800d0ce <HAL_UARTEx_DisableFifoMode+0x16>
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	e027      	b.n	800d11e <HAL_UARTEx_DisableFifoMode+0x66>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2224      	movs	r2, #36	@ 0x24
 800d0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f022 0201 	bic.w	r2, r2, #1
 800d0f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d0fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2220      	movs	r2, #32
 800d110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d13e:	2302      	movs	r3, #2
 800d140:	e02d      	b.n	800d19e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2224      	movs	r2, #36	@ 0x24
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f022 0201 	bic.w	r2, r2, #1
 800d168:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f850 	bl	800d224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2220      	movs	r2, #32
 800d190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d101      	bne.n	800d1be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e02d      	b.n	800d21a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2224      	movs	r2, #36	@ 0x24
 800d1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f022 0201 	bic.w	r2, r2, #1
 800d1e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f812 	bl	800d224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2220      	movs	r2, #32
 800d20c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d230:	2b00      	cmp	r3, #0
 800d232:	d108      	bne.n	800d246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d244:	e031      	b.n	800d2aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d246:	2310      	movs	r3, #16
 800d248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d24a:	2310      	movs	r3, #16
 800d24c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	0e5b      	lsrs	r3, r3, #25
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f003 0307 	and.w	r3, r3, #7
 800d25c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	0f5b      	lsrs	r3, r3, #29
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 0307 	and.w	r3, r3, #7
 800d26c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d26e:	7bbb      	ldrb	r3, [r7, #14]
 800d270:	7b3a      	ldrb	r2, [r7, #12]
 800d272:	4911      	ldr	r1, [pc, #68]	@ (800d2b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d274:	5c8a      	ldrb	r2, [r1, r2]
 800d276:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d27a:	7b3a      	ldrb	r2, [r7, #12]
 800d27c:	490f      	ldr	r1, [pc, #60]	@ (800d2bc <UARTEx_SetNbDataToProcess+0x98>)
 800d27e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d280:	fb93 f3f2 	sdiv	r3, r3, r2
 800d284:	b29a      	uxth	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
 800d28e:	7b7a      	ldrb	r2, [r7, #13]
 800d290:	4909      	ldr	r1, [pc, #36]	@ (800d2b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d292:	5c8a      	ldrb	r2, [r1, r2]
 800d294:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d298:	7b7a      	ldrb	r2, [r7, #13]
 800d29a:	4908      	ldr	r1, [pc, #32]	@ (800d2bc <UARTEx_SetNbDataToProcess+0x98>)
 800d29c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d29e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d2aa:	bf00      	nop
 800d2ac:	3714      	adds	r7, #20
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	08010680 	.word	0x08010680
 800d2bc:	08010688 	.word	0x08010688

0800d2c0 <__cvt>:
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	ed2d 8b02 	vpush	{d8}
 800d2c6:	eeb0 8b40 	vmov.f64	d8, d0
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	4617      	mov	r7, r2
 800d2ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d2d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2d2:	ee18 2a90 	vmov	r2, s17
 800d2d6:	f025 0520 	bic.w	r5, r5, #32
 800d2da:	2a00      	cmp	r2, #0
 800d2dc:	bfb6      	itet	lt
 800d2de:	222d      	movlt	r2, #45	@ 0x2d
 800d2e0:	2200      	movge	r2, #0
 800d2e2:	eeb1 8b40 	vneglt.f64	d8, d0
 800d2e6:	2d46      	cmp	r5, #70	@ 0x46
 800d2e8:	460c      	mov	r4, r1
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	d004      	beq.n	800d2f8 <__cvt+0x38>
 800d2ee:	2d45      	cmp	r5, #69	@ 0x45
 800d2f0:	d100      	bne.n	800d2f4 <__cvt+0x34>
 800d2f2:	3401      	adds	r4, #1
 800d2f4:	2102      	movs	r1, #2
 800d2f6:	e000      	b.n	800d2fa <__cvt+0x3a>
 800d2f8:	2103      	movs	r1, #3
 800d2fa:	ab03      	add	r3, sp, #12
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	ab02      	add	r3, sp, #8
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	4622      	mov	r2, r4
 800d304:	4633      	mov	r3, r6
 800d306:	eeb0 0b48 	vmov.f64	d0, d8
 800d30a:	f000 fe21 	bl	800df50 <_dtoa_r>
 800d30e:	2d47      	cmp	r5, #71	@ 0x47
 800d310:	d114      	bne.n	800d33c <__cvt+0x7c>
 800d312:	07fb      	lsls	r3, r7, #31
 800d314:	d50a      	bpl.n	800d32c <__cvt+0x6c>
 800d316:	1902      	adds	r2, r0, r4
 800d318:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d320:	bf08      	it	eq
 800d322:	9203      	streq	r2, [sp, #12]
 800d324:	2130      	movs	r1, #48	@ 0x30
 800d326:	9b03      	ldr	r3, [sp, #12]
 800d328:	4293      	cmp	r3, r2
 800d32a:	d319      	bcc.n	800d360 <__cvt+0xa0>
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d330:	1a1b      	subs	r3, r3, r0
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	b005      	add	sp, #20
 800d336:	ecbd 8b02 	vpop	{d8}
 800d33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d33c:	2d46      	cmp	r5, #70	@ 0x46
 800d33e:	eb00 0204 	add.w	r2, r0, r4
 800d342:	d1e9      	bne.n	800d318 <__cvt+0x58>
 800d344:	7803      	ldrb	r3, [r0, #0]
 800d346:	2b30      	cmp	r3, #48	@ 0x30
 800d348:	d107      	bne.n	800d35a <__cvt+0x9a>
 800d34a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d352:	bf1c      	itt	ne
 800d354:	f1c4 0401 	rsbne	r4, r4, #1
 800d358:	6034      	strne	r4, [r6, #0]
 800d35a:	6833      	ldr	r3, [r6, #0]
 800d35c:	441a      	add	r2, r3
 800d35e:	e7db      	b.n	800d318 <__cvt+0x58>
 800d360:	1c5c      	adds	r4, r3, #1
 800d362:	9403      	str	r4, [sp, #12]
 800d364:	7019      	strb	r1, [r3, #0]
 800d366:	e7de      	b.n	800d326 <__cvt+0x66>

0800d368 <__exponent>:
 800d368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d36a:	2900      	cmp	r1, #0
 800d36c:	bfba      	itte	lt
 800d36e:	4249      	neglt	r1, r1
 800d370:	232d      	movlt	r3, #45	@ 0x2d
 800d372:	232b      	movge	r3, #43	@ 0x2b
 800d374:	2909      	cmp	r1, #9
 800d376:	7002      	strb	r2, [r0, #0]
 800d378:	7043      	strb	r3, [r0, #1]
 800d37a:	dd29      	ble.n	800d3d0 <__exponent+0x68>
 800d37c:	f10d 0307 	add.w	r3, sp, #7
 800d380:	461d      	mov	r5, r3
 800d382:	270a      	movs	r7, #10
 800d384:	461a      	mov	r2, r3
 800d386:	fbb1 f6f7 	udiv	r6, r1, r7
 800d38a:	fb07 1416 	mls	r4, r7, r6, r1
 800d38e:	3430      	adds	r4, #48	@ 0x30
 800d390:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d394:	460c      	mov	r4, r1
 800d396:	2c63      	cmp	r4, #99	@ 0x63
 800d398:	f103 33ff 	add.w	r3, r3, #4294967295
 800d39c:	4631      	mov	r1, r6
 800d39e:	dcf1      	bgt.n	800d384 <__exponent+0x1c>
 800d3a0:	3130      	adds	r1, #48	@ 0x30
 800d3a2:	1e94      	subs	r4, r2, #2
 800d3a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d3a8:	1c41      	adds	r1, r0, #1
 800d3aa:	4623      	mov	r3, r4
 800d3ac:	42ab      	cmp	r3, r5
 800d3ae:	d30a      	bcc.n	800d3c6 <__exponent+0x5e>
 800d3b0:	f10d 0309 	add.w	r3, sp, #9
 800d3b4:	1a9b      	subs	r3, r3, r2
 800d3b6:	42ac      	cmp	r4, r5
 800d3b8:	bf88      	it	hi
 800d3ba:	2300      	movhi	r3, #0
 800d3bc:	3302      	adds	r3, #2
 800d3be:	4403      	add	r3, r0
 800d3c0:	1a18      	subs	r0, r3, r0
 800d3c2:	b003      	add	sp, #12
 800d3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d3ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d3ce:	e7ed      	b.n	800d3ac <__exponent+0x44>
 800d3d0:	2330      	movs	r3, #48	@ 0x30
 800d3d2:	3130      	adds	r1, #48	@ 0x30
 800d3d4:	7083      	strb	r3, [r0, #2]
 800d3d6:	70c1      	strb	r1, [r0, #3]
 800d3d8:	1d03      	adds	r3, r0, #4
 800d3da:	e7f1      	b.n	800d3c0 <__exponent+0x58>
 800d3dc:	0000      	movs	r0, r0
	...

0800d3e0 <_printf_float>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	b08d      	sub	sp, #52	@ 0x34
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d3ec:	4616      	mov	r6, r2
 800d3ee:	461f      	mov	r7, r3
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	f000 fcab 	bl	800dd4c <_localeconv_r>
 800d3f6:	f8d0 b000 	ldr.w	fp, [r0]
 800d3fa:	4658      	mov	r0, fp
 800d3fc:	f7f2 ffc0 	bl	8000380 <strlen>
 800d400:	2300      	movs	r3, #0
 800d402:	930a      	str	r3, [sp, #40]	@ 0x28
 800d404:	f8d8 3000 	ldr.w	r3, [r8]
 800d408:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d40c:	6822      	ldr	r2, [r4, #0]
 800d40e:	9005      	str	r0, [sp, #20]
 800d410:	3307      	adds	r3, #7
 800d412:	f023 0307 	bic.w	r3, r3, #7
 800d416:	f103 0108 	add.w	r1, r3, #8
 800d41a:	f8c8 1000 	str.w	r1, [r8]
 800d41e:	ed93 0b00 	vldr	d0, [r3]
 800d422:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d680 <_printf_float+0x2a0>
 800d426:	eeb0 7bc0 	vabs.f64	d7, d0
 800d42a:	eeb4 7b46 	vcmp.f64	d7, d6
 800d42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d432:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d436:	dd24      	ble.n	800d482 <_printf_float+0xa2>
 800d438:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d440:	d502      	bpl.n	800d448 <_printf_float+0x68>
 800d442:	232d      	movs	r3, #45	@ 0x2d
 800d444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d448:	498f      	ldr	r1, [pc, #572]	@ (800d688 <_printf_float+0x2a8>)
 800d44a:	4b90      	ldr	r3, [pc, #576]	@ (800d68c <_printf_float+0x2ac>)
 800d44c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d450:	bf94      	ite	ls
 800d452:	4688      	movls	r8, r1
 800d454:	4698      	movhi	r8, r3
 800d456:	f022 0204 	bic.w	r2, r2, #4
 800d45a:	2303      	movs	r3, #3
 800d45c:	6123      	str	r3, [r4, #16]
 800d45e:	6022      	str	r2, [r4, #0]
 800d460:	f04f 0a00 	mov.w	sl, #0
 800d464:	9700      	str	r7, [sp, #0]
 800d466:	4633      	mov	r3, r6
 800d468:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d46a:	4621      	mov	r1, r4
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 f9d1 	bl	800d814 <_printf_common>
 800d472:	3001      	adds	r0, #1
 800d474:	f040 8089 	bne.w	800d58a <_printf_float+0x1aa>
 800d478:	f04f 30ff 	mov.w	r0, #4294967295
 800d47c:	b00d      	add	sp, #52	@ 0x34
 800d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d482:	eeb4 0b40 	vcmp.f64	d0, d0
 800d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48a:	d709      	bvc.n	800d4a0 <_printf_float+0xc0>
 800d48c:	ee10 3a90 	vmov	r3, s1
 800d490:	2b00      	cmp	r3, #0
 800d492:	bfbc      	itt	lt
 800d494:	232d      	movlt	r3, #45	@ 0x2d
 800d496:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d49a:	497d      	ldr	r1, [pc, #500]	@ (800d690 <_printf_float+0x2b0>)
 800d49c:	4b7d      	ldr	r3, [pc, #500]	@ (800d694 <_printf_float+0x2b4>)
 800d49e:	e7d5      	b.n	800d44c <_printf_float+0x6c>
 800d4a0:	6863      	ldr	r3, [r4, #4]
 800d4a2:	1c59      	adds	r1, r3, #1
 800d4a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d4a8:	d139      	bne.n	800d51e <_printf_float+0x13e>
 800d4aa:	2306      	movs	r3, #6
 800d4ac:	6063      	str	r3, [r4, #4]
 800d4ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	6022      	str	r2, [r4, #0]
 800d4b6:	9303      	str	r3, [sp, #12]
 800d4b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800d4ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d4be:	ab09      	add	r3, sp, #36	@ 0x24
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	6861      	ldr	r1, [r4, #4]
 800d4c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f7ff fef9 	bl	800d2c0 <__cvt>
 800d4ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d4d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	d129      	bne.n	800d52c <_printf_float+0x14c>
 800d4d8:	1cc8      	adds	r0, r1, #3
 800d4da:	db02      	blt.n	800d4e2 <_printf_float+0x102>
 800d4dc:	6863      	ldr	r3, [r4, #4]
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	dd41      	ble.n	800d566 <_printf_float+0x186>
 800d4e2:	f1a9 0902 	sub.w	r9, r9, #2
 800d4e6:	fa5f f989 	uxtb.w	r9, r9
 800d4ea:	3901      	subs	r1, #1
 800d4ec:	464a      	mov	r2, r9
 800d4ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d4f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4f4:	f7ff ff38 	bl	800d368 <__exponent>
 800d4f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4fa:	1813      	adds	r3, r2, r0
 800d4fc:	2a01      	cmp	r2, #1
 800d4fe:	4682      	mov	sl, r0
 800d500:	6123      	str	r3, [r4, #16]
 800d502:	dc02      	bgt.n	800d50a <_printf_float+0x12a>
 800d504:	6822      	ldr	r2, [r4, #0]
 800d506:	07d2      	lsls	r2, r2, #31
 800d508:	d501      	bpl.n	800d50e <_printf_float+0x12e>
 800d50a:	3301      	adds	r3, #1
 800d50c:	6123      	str	r3, [r4, #16]
 800d50e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d512:	2b00      	cmp	r3, #0
 800d514:	d0a6      	beq.n	800d464 <_printf_float+0x84>
 800d516:	232d      	movs	r3, #45	@ 0x2d
 800d518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d51c:	e7a2      	b.n	800d464 <_printf_float+0x84>
 800d51e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d522:	d1c4      	bne.n	800d4ae <_printf_float+0xce>
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1c2      	bne.n	800d4ae <_printf_float+0xce>
 800d528:	2301      	movs	r3, #1
 800d52a:	e7bf      	b.n	800d4ac <_printf_float+0xcc>
 800d52c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d530:	d9db      	bls.n	800d4ea <_printf_float+0x10a>
 800d532:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d536:	d118      	bne.n	800d56a <_printf_float+0x18a>
 800d538:	2900      	cmp	r1, #0
 800d53a:	6863      	ldr	r3, [r4, #4]
 800d53c:	dd0b      	ble.n	800d556 <_printf_float+0x176>
 800d53e:	6121      	str	r1, [r4, #16]
 800d540:	b913      	cbnz	r3, 800d548 <_printf_float+0x168>
 800d542:	6822      	ldr	r2, [r4, #0]
 800d544:	07d0      	lsls	r0, r2, #31
 800d546:	d502      	bpl.n	800d54e <_printf_float+0x16e>
 800d548:	3301      	adds	r3, #1
 800d54a:	440b      	add	r3, r1
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d550:	f04f 0a00 	mov.w	sl, #0
 800d554:	e7db      	b.n	800d50e <_printf_float+0x12e>
 800d556:	b913      	cbnz	r3, 800d55e <_printf_float+0x17e>
 800d558:	6822      	ldr	r2, [r4, #0]
 800d55a:	07d2      	lsls	r2, r2, #31
 800d55c:	d501      	bpl.n	800d562 <_printf_float+0x182>
 800d55e:	3302      	adds	r3, #2
 800d560:	e7f4      	b.n	800d54c <_printf_float+0x16c>
 800d562:	2301      	movs	r3, #1
 800d564:	e7f2      	b.n	800d54c <_printf_float+0x16c>
 800d566:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d56c:	4299      	cmp	r1, r3
 800d56e:	db05      	blt.n	800d57c <_printf_float+0x19c>
 800d570:	6823      	ldr	r3, [r4, #0]
 800d572:	6121      	str	r1, [r4, #16]
 800d574:	07d8      	lsls	r0, r3, #31
 800d576:	d5ea      	bpl.n	800d54e <_printf_float+0x16e>
 800d578:	1c4b      	adds	r3, r1, #1
 800d57a:	e7e7      	b.n	800d54c <_printf_float+0x16c>
 800d57c:	2900      	cmp	r1, #0
 800d57e:	bfd4      	ite	le
 800d580:	f1c1 0202 	rsble	r2, r1, #2
 800d584:	2201      	movgt	r2, #1
 800d586:	4413      	add	r3, r2
 800d588:	e7e0      	b.n	800d54c <_printf_float+0x16c>
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	055a      	lsls	r2, r3, #21
 800d58e:	d407      	bmi.n	800d5a0 <_printf_float+0x1c0>
 800d590:	6923      	ldr	r3, [r4, #16]
 800d592:	4642      	mov	r2, r8
 800d594:	4631      	mov	r1, r6
 800d596:	4628      	mov	r0, r5
 800d598:	47b8      	blx	r7
 800d59a:	3001      	adds	r0, #1
 800d59c:	d12a      	bne.n	800d5f4 <_printf_float+0x214>
 800d59e:	e76b      	b.n	800d478 <_printf_float+0x98>
 800d5a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d5a4:	f240 80e0 	bls.w	800d768 <_printf_float+0x388>
 800d5a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d5ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b4:	d133      	bne.n	800d61e <_printf_float+0x23e>
 800d5b6:	4a38      	ldr	r2, [pc, #224]	@ (800d698 <_printf_float+0x2b8>)
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	4631      	mov	r1, r6
 800d5bc:	4628      	mov	r0, r5
 800d5be:	47b8      	blx	r7
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	f43f af59 	beq.w	800d478 <_printf_float+0x98>
 800d5c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d5ca:	4543      	cmp	r3, r8
 800d5cc:	db02      	blt.n	800d5d4 <_printf_float+0x1f4>
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	07d8      	lsls	r0, r3, #31
 800d5d2:	d50f      	bpl.n	800d5f4 <_printf_float+0x214>
 800d5d4:	9b05      	ldr	r3, [sp, #20]
 800d5d6:	465a      	mov	r2, fp
 800d5d8:	4631      	mov	r1, r6
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b8      	blx	r7
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f43f af4a 	beq.w	800d478 <_printf_float+0x98>
 800d5e4:	f04f 0900 	mov.w	r9, #0
 800d5e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5ec:	f104 0a1a 	add.w	sl, r4, #26
 800d5f0:	45c8      	cmp	r8, r9
 800d5f2:	dc09      	bgt.n	800d608 <_printf_float+0x228>
 800d5f4:	6823      	ldr	r3, [r4, #0]
 800d5f6:	079b      	lsls	r3, r3, #30
 800d5f8:	f100 8107 	bmi.w	800d80a <_printf_float+0x42a>
 800d5fc:	68e0      	ldr	r0, [r4, #12]
 800d5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d600:	4298      	cmp	r0, r3
 800d602:	bfb8      	it	lt
 800d604:	4618      	movlt	r0, r3
 800d606:	e739      	b.n	800d47c <_printf_float+0x9c>
 800d608:	2301      	movs	r3, #1
 800d60a:	4652      	mov	r2, sl
 800d60c:	4631      	mov	r1, r6
 800d60e:	4628      	mov	r0, r5
 800d610:	47b8      	blx	r7
 800d612:	3001      	adds	r0, #1
 800d614:	f43f af30 	beq.w	800d478 <_printf_float+0x98>
 800d618:	f109 0901 	add.w	r9, r9, #1
 800d61c:	e7e8      	b.n	800d5f0 <_printf_float+0x210>
 800d61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d620:	2b00      	cmp	r3, #0
 800d622:	dc3b      	bgt.n	800d69c <_printf_float+0x2bc>
 800d624:	4a1c      	ldr	r2, [pc, #112]	@ (800d698 <_printf_float+0x2b8>)
 800d626:	2301      	movs	r3, #1
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b8      	blx	r7
 800d62e:	3001      	adds	r0, #1
 800d630:	f43f af22 	beq.w	800d478 <_printf_float+0x98>
 800d634:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d638:	ea59 0303 	orrs.w	r3, r9, r3
 800d63c:	d102      	bne.n	800d644 <_printf_float+0x264>
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	07d9      	lsls	r1, r3, #31
 800d642:	d5d7      	bpl.n	800d5f4 <_printf_float+0x214>
 800d644:	9b05      	ldr	r3, [sp, #20]
 800d646:	465a      	mov	r2, fp
 800d648:	4631      	mov	r1, r6
 800d64a:	4628      	mov	r0, r5
 800d64c:	47b8      	blx	r7
 800d64e:	3001      	adds	r0, #1
 800d650:	f43f af12 	beq.w	800d478 <_printf_float+0x98>
 800d654:	f04f 0a00 	mov.w	sl, #0
 800d658:	f104 0b1a 	add.w	fp, r4, #26
 800d65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d65e:	425b      	negs	r3, r3
 800d660:	4553      	cmp	r3, sl
 800d662:	dc01      	bgt.n	800d668 <_printf_float+0x288>
 800d664:	464b      	mov	r3, r9
 800d666:	e794      	b.n	800d592 <_printf_float+0x1b2>
 800d668:	2301      	movs	r3, #1
 800d66a:	465a      	mov	r2, fp
 800d66c:	4631      	mov	r1, r6
 800d66e:	4628      	mov	r0, r5
 800d670:	47b8      	blx	r7
 800d672:	3001      	adds	r0, #1
 800d674:	f43f af00 	beq.w	800d478 <_printf_float+0x98>
 800d678:	f10a 0a01 	add.w	sl, sl, #1
 800d67c:	e7ee      	b.n	800d65c <_printf_float+0x27c>
 800d67e:	bf00      	nop
 800d680:	ffffffff 	.word	0xffffffff
 800d684:	7fefffff 	.word	0x7fefffff
 800d688:	08010690 	.word	0x08010690
 800d68c:	08010694 	.word	0x08010694
 800d690:	08010698 	.word	0x08010698
 800d694:	0801069c 	.word	0x0801069c
 800d698:	080106a0 	.word	0x080106a0
 800d69c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d69e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d6a2:	4553      	cmp	r3, sl
 800d6a4:	bfa8      	it	ge
 800d6a6:	4653      	movge	r3, sl
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	4699      	mov	r9, r3
 800d6ac:	dc37      	bgt.n	800d71e <_printf_float+0x33e>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	9307      	str	r3, [sp, #28]
 800d6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6b6:	f104 021a 	add.w	r2, r4, #26
 800d6ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d6bc:	9907      	ldr	r1, [sp, #28]
 800d6be:	9306      	str	r3, [sp, #24]
 800d6c0:	eba3 0309 	sub.w	r3, r3, r9
 800d6c4:	428b      	cmp	r3, r1
 800d6c6:	dc31      	bgt.n	800d72c <_printf_float+0x34c>
 800d6c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ca:	459a      	cmp	sl, r3
 800d6cc:	dc3b      	bgt.n	800d746 <_printf_float+0x366>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	07da      	lsls	r2, r3, #31
 800d6d2:	d438      	bmi.n	800d746 <_printf_float+0x366>
 800d6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d6:	ebaa 0903 	sub.w	r9, sl, r3
 800d6da:	9b06      	ldr	r3, [sp, #24]
 800d6dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d6e0:	4599      	cmp	r9, r3
 800d6e2:	bfa8      	it	ge
 800d6e4:	4699      	movge	r9, r3
 800d6e6:	f1b9 0f00 	cmp.w	r9, #0
 800d6ea:	dc34      	bgt.n	800d756 <_printf_float+0x376>
 800d6ec:	f04f 0800 	mov.w	r8, #0
 800d6f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6f4:	f104 0b1a 	add.w	fp, r4, #26
 800d6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6fa:	ebaa 0303 	sub.w	r3, sl, r3
 800d6fe:	eba3 0309 	sub.w	r3, r3, r9
 800d702:	4543      	cmp	r3, r8
 800d704:	f77f af76 	ble.w	800d5f4 <_printf_float+0x214>
 800d708:	2301      	movs	r3, #1
 800d70a:	465a      	mov	r2, fp
 800d70c:	4631      	mov	r1, r6
 800d70e:	4628      	mov	r0, r5
 800d710:	47b8      	blx	r7
 800d712:	3001      	adds	r0, #1
 800d714:	f43f aeb0 	beq.w	800d478 <_printf_float+0x98>
 800d718:	f108 0801 	add.w	r8, r8, #1
 800d71c:	e7ec      	b.n	800d6f8 <_printf_float+0x318>
 800d71e:	4642      	mov	r2, r8
 800d720:	4631      	mov	r1, r6
 800d722:	4628      	mov	r0, r5
 800d724:	47b8      	blx	r7
 800d726:	3001      	adds	r0, #1
 800d728:	d1c1      	bne.n	800d6ae <_printf_float+0x2ce>
 800d72a:	e6a5      	b.n	800d478 <_printf_float+0x98>
 800d72c:	2301      	movs	r3, #1
 800d72e:	4631      	mov	r1, r6
 800d730:	4628      	mov	r0, r5
 800d732:	9206      	str	r2, [sp, #24]
 800d734:	47b8      	blx	r7
 800d736:	3001      	adds	r0, #1
 800d738:	f43f ae9e 	beq.w	800d478 <_printf_float+0x98>
 800d73c:	9b07      	ldr	r3, [sp, #28]
 800d73e:	9a06      	ldr	r2, [sp, #24]
 800d740:	3301      	adds	r3, #1
 800d742:	9307      	str	r3, [sp, #28]
 800d744:	e7b9      	b.n	800d6ba <_printf_float+0x2da>
 800d746:	9b05      	ldr	r3, [sp, #20]
 800d748:	465a      	mov	r2, fp
 800d74a:	4631      	mov	r1, r6
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b8      	blx	r7
 800d750:	3001      	adds	r0, #1
 800d752:	d1bf      	bne.n	800d6d4 <_printf_float+0x2f4>
 800d754:	e690      	b.n	800d478 <_printf_float+0x98>
 800d756:	9a06      	ldr	r2, [sp, #24]
 800d758:	464b      	mov	r3, r9
 800d75a:	4442      	add	r2, r8
 800d75c:	4631      	mov	r1, r6
 800d75e:	4628      	mov	r0, r5
 800d760:	47b8      	blx	r7
 800d762:	3001      	adds	r0, #1
 800d764:	d1c2      	bne.n	800d6ec <_printf_float+0x30c>
 800d766:	e687      	b.n	800d478 <_printf_float+0x98>
 800d768:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d76c:	f1b9 0f01 	cmp.w	r9, #1
 800d770:	dc01      	bgt.n	800d776 <_printf_float+0x396>
 800d772:	07db      	lsls	r3, r3, #31
 800d774:	d536      	bpl.n	800d7e4 <_printf_float+0x404>
 800d776:	2301      	movs	r3, #1
 800d778:	4642      	mov	r2, r8
 800d77a:	4631      	mov	r1, r6
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b8      	blx	r7
 800d780:	3001      	adds	r0, #1
 800d782:	f43f ae79 	beq.w	800d478 <_printf_float+0x98>
 800d786:	9b05      	ldr	r3, [sp, #20]
 800d788:	465a      	mov	r2, fp
 800d78a:	4631      	mov	r1, r6
 800d78c:	4628      	mov	r0, r5
 800d78e:	47b8      	blx	r7
 800d790:	3001      	adds	r0, #1
 800d792:	f43f ae71 	beq.w	800d478 <_printf_float+0x98>
 800d796:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d79a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800d7a6:	d018      	beq.n	800d7da <_printf_float+0x3fa>
 800d7a8:	464b      	mov	r3, r9
 800d7aa:	f108 0201 	add.w	r2, r8, #1
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	47b8      	blx	r7
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d10c      	bne.n	800d7d2 <_printf_float+0x3f2>
 800d7b8:	e65e      	b.n	800d478 <_printf_float+0x98>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	465a      	mov	r2, fp
 800d7be:	4631      	mov	r1, r6
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	47b8      	blx	r7
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	f43f ae57 	beq.w	800d478 <_printf_float+0x98>
 800d7ca:	f108 0801 	add.w	r8, r8, #1
 800d7ce:	45c8      	cmp	r8, r9
 800d7d0:	dbf3      	blt.n	800d7ba <_printf_float+0x3da>
 800d7d2:	4653      	mov	r3, sl
 800d7d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d7d8:	e6dc      	b.n	800d594 <_printf_float+0x1b4>
 800d7da:	f04f 0800 	mov.w	r8, #0
 800d7de:	f104 0b1a 	add.w	fp, r4, #26
 800d7e2:	e7f4      	b.n	800d7ce <_printf_float+0x3ee>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4642      	mov	r2, r8
 800d7e8:	e7e1      	b.n	800d7ae <_printf_float+0x3ce>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	464a      	mov	r2, r9
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	47b8      	blx	r7
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	f43f ae3f 	beq.w	800d478 <_printf_float+0x98>
 800d7fa:	f108 0801 	add.w	r8, r8, #1
 800d7fe:	68e3      	ldr	r3, [r4, #12]
 800d800:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d802:	1a5b      	subs	r3, r3, r1
 800d804:	4543      	cmp	r3, r8
 800d806:	dcf0      	bgt.n	800d7ea <_printf_float+0x40a>
 800d808:	e6f8      	b.n	800d5fc <_printf_float+0x21c>
 800d80a:	f04f 0800 	mov.w	r8, #0
 800d80e:	f104 0919 	add.w	r9, r4, #25
 800d812:	e7f4      	b.n	800d7fe <_printf_float+0x41e>

0800d814 <_printf_common>:
 800d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d818:	4616      	mov	r6, r2
 800d81a:	4698      	mov	r8, r3
 800d81c:	688a      	ldr	r2, [r1, #8]
 800d81e:	690b      	ldr	r3, [r1, #16]
 800d820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d824:	4293      	cmp	r3, r2
 800d826:	bfb8      	it	lt
 800d828:	4613      	movlt	r3, r2
 800d82a:	6033      	str	r3, [r6, #0]
 800d82c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d830:	4607      	mov	r7, r0
 800d832:	460c      	mov	r4, r1
 800d834:	b10a      	cbz	r2, 800d83a <_printf_common+0x26>
 800d836:	3301      	adds	r3, #1
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	0699      	lsls	r1, r3, #26
 800d83e:	bf42      	ittt	mi
 800d840:	6833      	ldrmi	r3, [r6, #0]
 800d842:	3302      	addmi	r3, #2
 800d844:	6033      	strmi	r3, [r6, #0]
 800d846:	6825      	ldr	r5, [r4, #0]
 800d848:	f015 0506 	ands.w	r5, r5, #6
 800d84c:	d106      	bne.n	800d85c <_printf_common+0x48>
 800d84e:	f104 0a19 	add.w	sl, r4, #25
 800d852:	68e3      	ldr	r3, [r4, #12]
 800d854:	6832      	ldr	r2, [r6, #0]
 800d856:	1a9b      	subs	r3, r3, r2
 800d858:	42ab      	cmp	r3, r5
 800d85a:	dc26      	bgt.n	800d8aa <_printf_common+0x96>
 800d85c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d860:	6822      	ldr	r2, [r4, #0]
 800d862:	3b00      	subs	r3, #0
 800d864:	bf18      	it	ne
 800d866:	2301      	movne	r3, #1
 800d868:	0692      	lsls	r2, r2, #26
 800d86a:	d42b      	bmi.n	800d8c4 <_printf_common+0xb0>
 800d86c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d870:	4641      	mov	r1, r8
 800d872:	4638      	mov	r0, r7
 800d874:	47c8      	blx	r9
 800d876:	3001      	adds	r0, #1
 800d878:	d01e      	beq.n	800d8b8 <_printf_common+0xa4>
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	6922      	ldr	r2, [r4, #16]
 800d87e:	f003 0306 	and.w	r3, r3, #6
 800d882:	2b04      	cmp	r3, #4
 800d884:	bf02      	ittt	eq
 800d886:	68e5      	ldreq	r5, [r4, #12]
 800d888:	6833      	ldreq	r3, [r6, #0]
 800d88a:	1aed      	subeq	r5, r5, r3
 800d88c:	68a3      	ldr	r3, [r4, #8]
 800d88e:	bf0c      	ite	eq
 800d890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d894:	2500      	movne	r5, #0
 800d896:	4293      	cmp	r3, r2
 800d898:	bfc4      	itt	gt
 800d89a:	1a9b      	subgt	r3, r3, r2
 800d89c:	18ed      	addgt	r5, r5, r3
 800d89e:	2600      	movs	r6, #0
 800d8a0:	341a      	adds	r4, #26
 800d8a2:	42b5      	cmp	r5, r6
 800d8a4:	d11a      	bne.n	800d8dc <_printf_common+0xc8>
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	e008      	b.n	800d8bc <_printf_common+0xa8>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	4652      	mov	r2, sl
 800d8ae:	4641      	mov	r1, r8
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	47c8      	blx	r9
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	d103      	bne.n	800d8c0 <_printf_common+0xac>
 800d8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c0:	3501      	adds	r5, #1
 800d8c2:	e7c6      	b.n	800d852 <_printf_common+0x3e>
 800d8c4:	18e1      	adds	r1, r4, r3
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	2030      	movs	r0, #48	@ 0x30
 800d8ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8ce:	4422      	add	r2, r4
 800d8d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8d8:	3302      	adds	r3, #2
 800d8da:	e7c7      	b.n	800d86c <_printf_common+0x58>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	4622      	mov	r2, r4
 800d8e0:	4641      	mov	r1, r8
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	47c8      	blx	r9
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d0e6      	beq.n	800d8b8 <_printf_common+0xa4>
 800d8ea:	3601      	adds	r6, #1
 800d8ec:	e7d9      	b.n	800d8a2 <_printf_common+0x8e>
	...

0800d8f0 <_printf_i>:
 800d8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f4:	7e0f      	ldrb	r7, [r1, #24]
 800d8f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8f8:	2f78      	cmp	r7, #120	@ 0x78
 800d8fa:	4691      	mov	r9, r2
 800d8fc:	4680      	mov	r8, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	469a      	mov	sl, r3
 800d902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d906:	d807      	bhi.n	800d918 <_printf_i+0x28>
 800d908:	2f62      	cmp	r7, #98	@ 0x62
 800d90a:	d80a      	bhi.n	800d922 <_printf_i+0x32>
 800d90c:	2f00      	cmp	r7, #0
 800d90e:	f000 80d2 	beq.w	800dab6 <_printf_i+0x1c6>
 800d912:	2f58      	cmp	r7, #88	@ 0x58
 800d914:	f000 80b9 	beq.w	800da8a <_printf_i+0x19a>
 800d918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d91c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d920:	e03a      	b.n	800d998 <_printf_i+0xa8>
 800d922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d926:	2b15      	cmp	r3, #21
 800d928:	d8f6      	bhi.n	800d918 <_printf_i+0x28>
 800d92a:	a101      	add	r1, pc, #4	@ (adr r1, 800d930 <_printf_i+0x40>)
 800d92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d930:	0800d989 	.word	0x0800d989
 800d934:	0800d99d 	.word	0x0800d99d
 800d938:	0800d919 	.word	0x0800d919
 800d93c:	0800d919 	.word	0x0800d919
 800d940:	0800d919 	.word	0x0800d919
 800d944:	0800d919 	.word	0x0800d919
 800d948:	0800d99d 	.word	0x0800d99d
 800d94c:	0800d919 	.word	0x0800d919
 800d950:	0800d919 	.word	0x0800d919
 800d954:	0800d919 	.word	0x0800d919
 800d958:	0800d919 	.word	0x0800d919
 800d95c:	0800da9d 	.word	0x0800da9d
 800d960:	0800d9c7 	.word	0x0800d9c7
 800d964:	0800da57 	.word	0x0800da57
 800d968:	0800d919 	.word	0x0800d919
 800d96c:	0800d919 	.word	0x0800d919
 800d970:	0800dabf 	.word	0x0800dabf
 800d974:	0800d919 	.word	0x0800d919
 800d978:	0800d9c7 	.word	0x0800d9c7
 800d97c:	0800d919 	.word	0x0800d919
 800d980:	0800d919 	.word	0x0800d919
 800d984:	0800da5f 	.word	0x0800da5f
 800d988:	6833      	ldr	r3, [r6, #0]
 800d98a:	1d1a      	adds	r2, r3, #4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6032      	str	r2, [r6, #0]
 800d990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d998:	2301      	movs	r3, #1
 800d99a:	e09d      	b.n	800dad8 <_printf_i+0x1e8>
 800d99c:	6833      	ldr	r3, [r6, #0]
 800d99e:	6820      	ldr	r0, [r4, #0]
 800d9a0:	1d19      	adds	r1, r3, #4
 800d9a2:	6031      	str	r1, [r6, #0]
 800d9a4:	0606      	lsls	r6, r0, #24
 800d9a6:	d501      	bpl.n	800d9ac <_printf_i+0xbc>
 800d9a8:	681d      	ldr	r5, [r3, #0]
 800d9aa:	e003      	b.n	800d9b4 <_printf_i+0xc4>
 800d9ac:	0645      	lsls	r5, r0, #25
 800d9ae:	d5fb      	bpl.n	800d9a8 <_printf_i+0xb8>
 800d9b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9b4:	2d00      	cmp	r5, #0
 800d9b6:	da03      	bge.n	800d9c0 <_printf_i+0xd0>
 800d9b8:	232d      	movs	r3, #45	@ 0x2d
 800d9ba:	426d      	negs	r5, r5
 800d9bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9c0:	4859      	ldr	r0, [pc, #356]	@ (800db28 <_printf_i+0x238>)
 800d9c2:	230a      	movs	r3, #10
 800d9c4:	e011      	b.n	800d9ea <_printf_i+0xfa>
 800d9c6:	6821      	ldr	r1, [r4, #0]
 800d9c8:	6833      	ldr	r3, [r6, #0]
 800d9ca:	0608      	lsls	r0, r1, #24
 800d9cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9d0:	d402      	bmi.n	800d9d8 <_printf_i+0xe8>
 800d9d2:	0649      	lsls	r1, r1, #25
 800d9d4:	bf48      	it	mi
 800d9d6:	b2ad      	uxthmi	r5, r5
 800d9d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9da:	4853      	ldr	r0, [pc, #332]	@ (800db28 <_printf_i+0x238>)
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	bf14      	ite	ne
 800d9e0:	230a      	movne	r3, #10
 800d9e2:	2308      	moveq	r3, #8
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9ea:	6866      	ldr	r6, [r4, #4]
 800d9ec:	60a6      	str	r6, [r4, #8]
 800d9ee:	2e00      	cmp	r6, #0
 800d9f0:	bfa2      	ittt	ge
 800d9f2:	6821      	ldrge	r1, [r4, #0]
 800d9f4:	f021 0104 	bicge.w	r1, r1, #4
 800d9f8:	6021      	strge	r1, [r4, #0]
 800d9fa:	b90d      	cbnz	r5, 800da00 <_printf_i+0x110>
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	d04b      	beq.n	800da98 <_printf_i+0x1a8>
 800da00:	4616      	mov	r6, r2
 800da02:	fbb5 f1f3 	udiv	r1, r5, r3
 800da06:	fb03 5711 	mls	r7, r3, r1, r5
 800da0a:	5dc7      	ldrb	r7, [r0, r7]
 800da0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da10:	462f      	mov	r7, r5
 800da12:	42bb      	cmp	r3, r7
 800da14:	460d      	mov	r5, r1
 800da16:	d9f4      	bls.n	800da02 <_printf_i+0x112>
 800da18:	2b08      	cmp	r3, #8
 800da1a:	d10b      	bne.n	800da34 <_printf_i+0x144>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	07df      	lsls	r7, r3, #31
 800da20:	d508      	bpl.n	800da34 <_printf_i+0x144>
 800da22:	6923      	ldr	r3, [r4, #16]
 800da24:	6861      	ldr	r1, [r4, #4]
 800da26:	4299      	cmp	r1, r3
 800da28:	bfde      	ittt	le
 800da2a:	2330      	movle	r3, #48	@ 0x30
 800da2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da34:	1b92      	subs	r2, r2, r6
 800da36:	6122      	str	r2, [r4, #16]
 800da38:	f8cd a000 	str.w	sl, [sp]
 800da3c:	464b      	mov	r3, r9
 800da3e:	aa03      	add	r2, sp, #12
 800da40:	4621      	mov	r1, r4
 800da42:	4640      	mov	r0, r8
 800da44:	f7ff fee6 	bl	800d814 <_printf_common>
 800da48:	3001      	adds	r0, #1
 800da4a:	d14a      	bne.n	800dae2 <_printf_i+0x1f2>
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	b004      	add	sp, #16
 800da52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	f043 0320 	orr.w	r3, r3, #32
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	4833      	ldr	r0, [pc, #204]	@ (800db2c <_printf_i+0x23c>)
 800da60:	2778      	movs	r7, #120	@ 0x78
 800da62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	6831      	ldr	r1, [r6, #0]
 800da6a:	061f      	lsls	r7, r3, #24
 800da6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800da70:	d402      	bmi.n	800da78 <_printf_i+0x188>
 800da72:	065f      	lsls	r7, r3, #25
 800da74:	bf48      	it	mi
 800da76:	b2ad      	uxthmi	r5, r5
 800da78:	6031      	str	r1, [r6, #0]
 800da7a:	07d9      	lsls	r1, r3, #31
 800da7c:	bf44      	itt	mi
 800da7e:	f043 0320 	orrmi.w	r3, r3, #32
 800da82:	6023      	strmi	r3, [r4, #0]
 800da84:	b11d      	cbz	r5, 800da8e <_printf_i+0x19e>
 800da86:	2310      	movs	r3, #16
 800da88:	e7ac      	b.n	800d9e4 <_printf_i+0xf4>
 800da8a:	4827      	ldr	r0, [pc, #156]	@ (800db28 <_printf_i+0x238>)
 800da8c:	e7e9      	b.n	800da62 <_printf_i+0x172>
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	f023 0320 	bic.w	r3, r3, #32
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	e7f6      	b.n	800da86 <_printf_i+0x196>
 800da98:	4616      	mov	r6, r2
 800da9a:	e7bd      	b.n	800da18 <_printf_i+0x128>
 800da9c:	6833      	ldr	r3, [r6, #0]
 800da9e:	6825      	ldr	r5, [r4, #0]
 800daa0:	6961      	ldr	r1, [r4, #20]
 800daa2:	1d18      	adds	r0, r3, #4
 800daa4:	6030      	str	r0, [r6, #0]
 800daa6:	062e      	lsls	r6, r5, #24
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	d501      	bpl.n	800dab0 <_printf_i+0x1c0>
 800daac:	6019      	str	r1, [r3, #0]
 800daae:	e002      	b.n	800dab6 <_printf_i+0x1c6>
 800dab0:	0668      	lsls	r0, r5, #25
 800dab2:	d5fb      	bpl.n	800daac <_printf_i+0x1bc>
 800dab4:	8019      	strh	r1, [r3, #0]
 800dab6:	2300      	movs	r3, #0
 800dab8:	6123      	str	r3, [r4, #16]
 800daba:	4616      	mov	r6, r2
 800dabc:	e7bc      	b.n	800da38 <_printf_i+0x148>
 800dabe:	6833      	ldr	r3, [r6, #0]
 800dac0:	1d1a      	adds	r2, r3, #4
 800dac2:	6032      	str	r2, [r6, #0]
 800dac4:	681e      	ldr	r6, [r3, #0]
 800dac6:	6862      	ldr	r2, [r4, #4]
 800dac8:	2100      	movs	r1, #0
 800daca:	4630      	mov	r0, r6
 800dacc:	f7f2 fc08 	bl	80002e0 <memchr>
 800dad0:	b108      	cbz	r0, 800dad6 <_printf_i+0x1e6>
 800dad2:	1b80      	subs	r0, r0, r6
 800dad4:	6060      	str	r0, [r4, #4]
 800dad6:	6863      	ldr	r3, [r4, #4]
 800dad8:	6123      	str	r3, [r4, #16]
 800dada:	2300      	movs	r3, #0
 800dadc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dae0:	e7aa      	b.n	800da38 <_printf_i+0x148>
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	4632      	mov	r2, r6
 800dae6:	4649      	mov	r1, r9
 800dae8:	4640      	mov	r0, r8
 800daea:	47d0      	blx	sl
 800daec:	3001      	adds	r0, #1
 800daee:	d0ad      	beq.n	800da4c <_printf_i+0x15c>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	079b      	lsls	r3, r3, #30
 800daf4:	d413      	bmi.n	800db1e <_printf_i+0x22e>
 800daf6:	68e0      	ldr	r0, [r4, #12]
 800daf8:	9b03      	ldr	r3, [sp, #12]
 800dafa:	4298      	cmp	r0, r3
 800dafc:	bfb8      	it	lt
 800dafe:	4618      	movlt	r0, r3
 800db00:	e7a6      	b.n	800da50 <_printf_i+0x160>
 800db02:	2301      	movs	r3, #1
 800db04:	4632      	mov	r2, r6
 800db06:	4649      	mov	r1, r9
 800db08:	4640      	mov	r0, r8
 800db0a:	47d0      	blx	sl
 800db0c:	3001      	adds	r0, #1
 800db0e:	d09d      	beq.n	800da4c <_printf_i+0x15c>
 800db10:	3501      	adds	r5, #1
 800db12:	68e3      	ldr	r3, [r4, #12]
 800db14:	9903      	ldr	r1, [sp, #12]
 800db16:	1a5b      	subs	r3, r3, r1
 800db18:	42ab      	cmp	r3, r5
 800db1a:	dcf2      	bgt.n	800db02 <_printf_i+0x212>
 800db1c:	e7eb      	b.n	800daf6 <_printf_i+0x206>
 800db1e:	2500      	movs	r5, #0
 800db20:	f104 0619 	add.w	r6, r4, #25
 800db24:	e7f5      	b.n	800db12 <_printf_i+0x222>
 800db26:	bf00      	nop
 800db28:	080106a2 	.word	0x080106a2
 800db2c:	080106b3 	.word	0x080106b3

0800db30 <std>:
 800db30:	2300      	movs	r3, #0
 800db32:	b510      	push	{r4, lr}
 800db34:	4604      	mov	r4, r0
 800db36:	e9c0 3300 	strd	r3, r3, [r0]
 800db3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db3e:	6083      	str	r3, [r0, #8]
 800db40:	8181      	strh	r1, [r0, #12]
 800db42:	6643      	str	r3, [r0, #100]	@ 0x64
 800db44:	81c2      	strh	r2, [r0, #14]
 800db46:	6183      	str	r3, [r0, #24]
 800db48:	4619      	mov	r1, r3
 800db4a:	2208      	movs	r2, #8
 800db4c:	305c      	adds	r0, #92	@ 0x5c
 800db4e:	f000 f8f4 	bl	800dd3a <memset>
 800db52:	4b0d      	ldr	r3, [pc, #52]	@ (800db88 <std+0x58>)
 800db54:	6263      	str	r3, [r4, #36]	@ 0x24
 800db56:	4b0d      	ldr	r3, [pc, #52]	@ (800db8c <std+0x5c>)
 800db58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db5a:	4b0d      	ldr	r3, [pc, #52]	@ (800db90 <std+0x60>)
 800db5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db5e:	4b0d      	ldr	r3, [pc, #52]	@ (800db94 <std+0x64>)
 800db60:	6323      	str	r3, [r4, #48]	@ 0x30
 800db62:	4b0d      	ldr	r3, [pc, #52]	@ (800db98 <std+0x68>)
 800db64:	6224      	str	r4, [r4, #32]
 800db66:	429c      	cmp	r4, r3
 800db68:	d006      	beq.n	800db78 <std+0x48>
 800db6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db6e:	4294      	cmp	r4, r2
 800db70:	d002      	beq.n	800db78 <std+0x48>
 800db72:	33d0      	adds	r3, #208	@ 0xd0
 800db74:	429c      	cmp	r4, r3
 800db76:	d105      	bne.n	800db84 <std+0x54>
 800db78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db80:	f000 b958 	b.w	800de34 <__retarget_lock_init_recursive>
 800db84:	bd10      	pop	{r4, pc}
 800db86:	bf00      	nop
 800db88:	0800dcb5 	.word	0x0800dcb5
 800db8c:	0800dcd7 	.word	0x0800dcd7
 800db90:	0800dd0f 	.word	0x0800dd0f
 800db94:	0800dd33 	.word	0x0800dd33
 800db98:	24003e5c 	.word	0x24003e5c

0800db9c <stdio_exit_handler>:
 800db9c:	4a02      	ldr	r2, [pc, #8]	@ (800dba8 <stdio_exit_handler+0xc>)
 800db9e:	4903      	ldr	r1, [pc, #12]	@ (800dbac <stdio_exit_handler+0x10>)
 800dba0:	4803      	ldr	r0, [pc, #12]	@ (800dbb0 <stdio_exit_handler+0x14>)
 800dba2:	f000 b869 	b.w	800dc78 <_fwalk_sglue>
 800dba6:	bf00      	nop
 800dba8:	24000020 	.word	0x24000020
 800dbac:	0800f409 	.word	0x0800f409
 800dbb0:	24000030 	.word	0x24000030

0800dbb4 <cleanup_stdio>:
 800dbb4:	6841      	ldr	r1, [r0, #4]
 800dbb6:	4b0c      	ldr	r3, [pc, #48]	@ (800dbe8 <cleanup_stdio+0x34>)
 800dbb8:	4299      	cmp	r1, r3
 800dbba:	b510      	push	{r4, lr}
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	d001      	beq.n	800dbc4 <cleanup_stdio+0x10>
 800dbc0:	f001 fc22 	bl	800f408 <_fflush_r>
 800dbc4:	68a1      	ldr	r1, [r4, #8]
 800dbc6:	4b09      	ldr	r3, [pc, #36]	@ (800dbec <cleanup_stdio+0x38>)
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	d002      	beq.n	800dbd2 <cleanup_stdio+0x1e>
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f001 fc1b 	bl	800f408 <_fflush_r>
 800dbd2:	68e1      	ldr	r1, [r4, #12]
 800dbd4:	4b06      	ldr	r3, [pc, #24]	@ (800dbf0 <cleanup_stdio+0x3c>)
 800dbd6:	4299      	cmp	r1, r3
 800dbd8:	d004      	beq.n	800dbe4 <cleanup_stdio+0x30>
 800dbda:	4620      	mov	r0, r4
 800dbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbe0:	f001 bc12 	b.w	800f408 <_fflush_r>
 800dbe4:	bd10      	pop	{r4, pc}
 800dbe6:	bf00      	nop
 800dbe8:	24003e5c 	.word	0x24003e5c
 800dbec:	24003ec4 	.word	0x24003ec4
 800dbf0:	24003f2c 	.word	0x24003f2c

0800dbf4 <global_stdio_init.part.0>:
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800dc24 <global_stdio_init.part.0+0x30>)
 800dbf8:	4c0b      	ldr	r4, [pc, #44]	@ (800dc28 <global_stdio_init.part.0+0x34>)
 800dbfa:	4a0c      	ldr	r2, [pc, #48]	@ (800dc2c <global_stdio_init.part.0+0x38>)
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	4620      	mov	r0, r4
 800dc00:	2200      	movs	r2, #0
 800dc02:	2104      	movs	r1, #4
 800dc04:	f7ff ff94 	bl	800db30 <std>
 800dc08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	2109      	movs	r1, #9
 800dc10:	f7ff ff8e 	bl	800db30 <std>
 800dc14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc18:	2202      	movs	r2, #2
 800dc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc1e:	2112      	movs	r1, #18
 800dc20:	f7ff bf86 	b.w	800db30 <std>
 800dc24:	24003f94 	.word	0x24003f94
 800dc28:	24003e5c 	.word	0x24003e5c
 800dc2c:	0800db9d 	.word	0x0800db9d

0800dc30 <__sfp_lock_acquire>:
 800dc30:	4801      	ldr	r0, [pc, #4]	@ (800dc38 <__sfp_lock_acquire+0x8>)
 800dc32:	f000 b900 	b.w	800de36 <__retarget_lock_acquire_recursive>
 800dc36:	bf00      	nop
 800dc38:	24003f9d 	.word	0x24003f9d

0800dc3c <__sfp_lock_release>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	@ (800dc44 <__sfp_lock_release+0x8>)
 800dc3e:	f000 b8fb 	b.w	800de38 <__retarget_lock_release_recursive>
 800dc42:	bf00      	nop
 800dc44:	24003f9d 	.word	0x24003f9d

0800dc48 <__sinit>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	f7ff fff0 	bl	800dc30 <__sfp_lock_acquire>
 800dc50:	6a23      	ldr	r3, [r4, #32]
 800dc52:	b11b      	cbz	r3, 800dc5c <__sinit+0x14>
 800dc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc58:	f7ff bff0 	b.w	800dc3c <__sfp_lock_release>
 800dc5c:	4b04      	ldr	r3, [pc, #16]	@ (800dc70 <__sinit+0x28>)
 800dc5e:	6223      	str	r3, [r4, #32]
 800dc60:	4b04      	ldr	r3, [pc, #16]	@ (800dc74 <__sinit+0x2c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1f5      	bne.n	800dc54 <__sinit+0xc>
 800dc68:	f7ff ffc4 	bl	800dbf4 <global_stdio_init.part.0>
 800dc6c:	e7f2      	b.n	800dc54 <__sinit+0xc>
 800dc6e:	bf00      	nop
 800dc70:	0800dbb5 	.word	0x0800dbb5
 800dc74:	24003f94 	.word	0x24003f94

0800dc78 <_fwalk_sglue>:
 800dc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	4688      	mov	r8, r1
 800dc80:	4614      	mov	r4, r2
 800dc82:	2600      	movs	r6, #0
 800dc84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc88:	f1b9 0901 	subs.w	r9, r9, #1
 800dc8c:	d505      	bpl.n	800dc9a <_fwalk_sglue+0x22>
 800dc8e:	6824      	ldr	r4, [r4, #0]
 800dc90:	2c00      	cmp	r4, #0
 800dc92:	d1f7      	bne.n	800dc84 <_fwalk_sglue+0xc>
 800dc94:	4630      	mov	r0, r6
 800dc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc9a:	89ab      	ldrh	r3, [r5, #12]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d907      	bls.n	800dcb0 <_fwalk_sglue+0x38>
 800dca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dca4:	3301      	adds	r3, #1
 800dca6:	d003      	beq.n	800dcb0 <_fwalk_sglue+0x38>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4638      	mov	r0, r7
 800dcac:	47c0      	blx	r8
 800dcae:	4306      	orrs	r6, r0
 800dcb0:	3568      	adds	r5, #104	@ 0x68
 800dcb2:	e7e9      	b.n	800dc88 <_fwalk_sglue+0x10>

0800dcb4 <__sread>:
 800dcb4:	b510      	push	{r4, lr}
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcbc:	f000 f86c 	bl	800dd98 <_read_r>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	bfab      	itete	ge
 800dcc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcc6:	89a3      	ldrhlt	r3, [r4, #12]
 800dcc8:	181b      	addge	r3, r3, r0
 800dcca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dcce:	bfac      	ite	ge
 800dcd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dcd2:	81a3      	strhlt	r3, [r4, #12]
 800dcd4:	bd10      	pop	{r4, pc}

0800dcd6 <__swrite>:
 800dcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcda:	461f      	mov	r7, r3
 800dcdc:	898b      	ldrh	r3, [r1, #12]
 800dcde:	05db      	lsls	r3, r3, #23
 800dce0:	4605      	mov	r5, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	4616      	mov	r6, r2
 800dce6:	d505      	bpl.n	800dcf4 <__swrite+0x1e>
 800dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcec:	2302      	movs	r3, #2
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f000 f840 	bl	800dd74 <_lseek_r>
 800dcf4:	89a3      	ldrh	r3, [r4, #12]
 800dcf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dcfe:	81a3      	strh	r3, [r4, #12]
 800dd00:	4632      	mov	r2, r6
 800dd02:	463b      	mov	r3, r7
 800dd04:	4628      	mov	r0, r5
 800dd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0a:	f000 b857 	b.w	800ddbc <_write_r>

0800dd0e <__sseek>:
 800dd0e:	b510      	push	{r4, lr}
 800dd10:	460c      	mov	r4, r1
 800dd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd16:	f000 f82d 	bl	800dd74 <_lseek_r>
 800dd1a:	1c43      	adds	r3, r0, #1
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	bf15      	itete	ne
 800dd20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd2a:	81a3      	strheq	r3, [r4, #12]
 800dd2c:	bf18      	it	ne
 800dd2e:	81a3      	strhne	r3, [r4, #12]
 800dd30:	bd10      	pop	{r4, pc}

0800dd32 <__sclose>:
 800dd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd36:	f000 b80d 	b.w	800dd54 <_close_r>

0800dd3a <memset>:
 800dd3a:	4402      	add	r2, r0
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d100      	bne.n	800dd44 <memset+0xa>
 800dd42:	4770      	bx	lr
 800dd44:	f803 1b01 	strb.w	r1, [r3], #1
 800dd48:	e7f9      	b.n	800dd3e <memset+0x4>
	...

0800dd4c <_localeconv_r>:
 800dd4c:	4800      	ldr	r0, [pc, #0]	@ (800dd50 <_localeconv_r+0x4>)
 800dd4e:	4770      	bx	lr
 800dd50:	2400016c 	.word	0x2400016c

0800dd54 <_close_r>:
 800dd54:	b538      	push	{r3, r4, r5, lr}
 800dd56:	4d06      	ldr	r5, [pc, #24]	@ (800dd70 <_close_r+0x1c>)
 800dd58:	2300      	movs	r3, #0
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	4608      	mov	r0, r1
 800dd5e:	602b      	str	r3, [r5, #0]
 800dd60:	f7f5 fdaa 	bl	80038b8 <_close>
 800dd64:	1c43      	adds	r3, r0, #1
 800dd66:	d102      	bne.n	800dd6e <_close_r+0x1a>
 800dd68:	682b      	ldr	r3, [r5, #0]
 800dd6a:	b103      	cbz	r3, 800dd6e <_close_r+0x1a>
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	bd38      	pop	{r3, r4, r5, pc}
 800dd70:	24003f98 	.word	0x24003f98

0800dd74 <_lseek_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d07      	ldr	r5, [pc, #28]	@ (800dd94 <_lseek_r+0x20>)
 800dd78:	4604      	mov	r4, r0
 800dd7a:	4608      	mov	r0, r1
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	2200      	movs	r2, #0
 800dd80:	602a      	str	r2, [r5, #0]
 800dd82:	461a      	mov	r2, r3
 800dd84:	f7f5 fdbf 	bl	8003906 <_lseek>
 800dd88:	1c43      	adds	r3, r0, #1
 800dd8a:	d102      	bne.n	800dd92 <_lseek_r+0x1e>
 800dd8c:	682b      	ldr	r3, [r5, #0]
 800dd8e:	b103      	cbz	r3, 800dd92 <_lseek_r+0x1e>
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	bd38      	pop	{r3, r4, r5, pc}
 800dd94:	24003f98 	.word	0x24003f98

0800dd98 <_read_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	4d07      	ldr	r5, [pc, #28]	@ (800ddb8 <_read_r+0x20>)
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	4608      	mov	r0, r1
 800dda0:	4611      	mov	r1, r2
 800dda2:	2200      	movs	r2, #0
 800dda4:	602a      	str	r2, [r5, #0]
 800dda6:	461a      	mov	r2, r3
 800dda8:	f7f5 fd4d 	bl	8003846 <_read>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d102      	bne.n	800ddb6 <_read_r+0x1e>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	b103      	cbz	r3, 800ddb6 <_read_r+0x1e>
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	24003f98 	.word	0x24003f98

0800ddbc <_write_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d07      	ldr	r5, [pc, #28]	@ (800dddc <_write_r+0x20>)
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	4608      	mov	r0, r1
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	602a      	str	r2, [r5, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	f7f5 fd58 	bl	8003880 <_write>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d102      	bne.n	800ddda <_write_r+0x1e>
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	b103      	cbz	r3, 800ddda <_write_r+0x1e>
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	bd38      	pop	{r3, r4, r5, pc}
 800dddc:	24003f98 	.word	0x24003f98

0800dde0 <__errno>:
 800dde0:	4b01      	ldr	r3, [pc, #4]	@ (800dde8 <__errno+0x8>)
 800dde2:	6818      	ldr	r0, [r3, #0]
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	2400002c 	.word	0x2400002c

0800ddec <__libc_init_array>:
 800ddec:	b570      	push	{r4, r5, r6, lr}
 800ddee:	4d0d      	ldr	r5, [pc, #52]	@ (800de24 <__libc_init_array+0x38>)
 800ddf0:	4c0d      	ldr	r4, [pc, #52]	@ (800de28 <__libc_init_array+0x3c>)
 800ddf2:	1b64      	subs	r4, r4, r5
 800ddf4:	10a4      	asrs	r4, r4, #2
 800ddf6:	2600      	movs	r6, #0
 800ddf8:	42a6      	cmp	r6, r4
 800ddfa:	d109      	bne.n	800de10 <__libc_init_array+0x24>
 800ddfc:	4d0b      	ldr	r5, [pc, #44]	@ (800de2c <__libc_init_array+0x40>)
 800ddfe:	4c0c      	ldr	r4, [pc, #48]	@ (800de30 <__libc_init_array+0x44>)
 800de00:	f002 fc1e 	bl	8010640 <_init>
 800de04:	1b64      	subs	r4, r4, r5
 800de06:	10a4      	asrs	r4, r4, #2
 800de08:	2600      	movs	r6, #0
 800de0a:	42a6      	cmp	r6, r4
 800de0c:	d105      	bne.n	800de1a <__libc_init_array+0x2e>
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
 800de10:	f855 3b04 	ldr.w	r3, [r5], #4
 800de14:	4798      	blx	r3
 800de16:	3601      	adds	r6, #1
 800de18:	e7ee      	b.n	800ddf8 <__libc_init_array+0xc>
 800de1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1e:	4798      	blx	r3
 800de20:	3601      	adds	r6, #1
 800de22:	e7f2      	b.n	800de0a <__libc_init_array+0x1e>
 800de24:	08010be0 	.word	0x08010be0
 800de28:	08010be0 	.word	0x08010be0
 800de2c:	08010be0 	.word	0x08010be0
 800de30:	08010be4 	.word	0x08010be4

0800de34 <__retarget_lock_init_recursive>:
 800de34:	4770      	bx	lr

0800de36 <__retarget_lock_acquire_recursive>:
 800de36:	4770      	bx	lr

0800de38 <__retarget_lock_release_recursive>:
 800de38:	4770      	bx	lr

0800de3a <quorem>:
 800de3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3e:	6903      	ldr	r3, [r0, #16]
 800de40:	690c      	ldr	r4, [r1, #16]
 800de42:	42a3      	cmp	r3, r4
 800de44:	4607      	mov	r7, r0
 800de46:	db7e      	blt.n	800df46 <quorem+0x10c>
 800de48:	3c01      	subs	r4, #1
 800de4a:	f101 0814 	add.w	r8, r1, #20
 800de4e:	00a3      	lsls	r3, r4, #2
 800de50:	f100 0514 	add.w	r5, r0, #20
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de64:	3301      	adds	r3, #1
 800de66:	429a      	cmp	r2, r3
 800de68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800de70:	d32e      	bcc.n	800ded0 <quorem+0x96>
 800de72:	f04f 0a00 	mov.w	sl, #0
 800de76:	46c4      	mov	ip, r8
 800de78:	46ae      	mov	lr, r5
 800de7a:	46d3      	mov	fp, sl
 800de7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de80:	b298      	uxth	r0, r3
 800de82:	fb06 a000 	mla	r0, r6, r0, sl
 800de86:	0c02      	lsrs	r2, r0, #16
 800de88:	0c1b      	lsrs	r3, r3, #16
 800de8a:	fb06 2303 	mla	r3, r6, r3, r2
 800de8e:	f8de 2000 	ldr.w	r2, [lr]
 800de92:	b280      	uxth	r0, r0
 800de94:	b292      	uxth	r2, r2
 800de96:	1a12      	subs	r2, r2, r0
 800de98:	445a      	add	r2, fp
 800de9a:	f8de 0000 	ldr.w	r0, [lr]
 800de9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dea8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800deac:	b292      	uxth	r2, r2
 800deae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800deb2:	45e1      	cmp	r9, ip
 800deb4:	f84e 2b04 	str.w	r2, [lr], #4
 800deb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800debc:	d2de      	bcs.n	800de7c <quorem+0x42>
 800debe:	9b00      	ldr	r3, [sp, #0]
 800dec0:	58eb      	ldr	r3, [r5, r3]
 800dec2:	b92b      	cbnz	r3, 800ded0 <quorem+0x96>
 800dec4:	9b01      	ldr	r3, [sp, #4]
 800dec6:	3b04      	subs	r3, #4
 800dec8:	429d      	cmp	r5, r3
 800deca:	461a      	mov	r2, r3
 800decc:	d32f      	bcc.n	800df2e <quorem+0xf4>
 800dece:	613c      	str	r4, [r7, #16]
 800ded0:	4638      	mov	r0, r7
 800ded2:	f001 f90d 	bl	800f0f0 <__mcmp>
 800ded6:	2800      	cmp	r0, #0
 800ded8:	db25      	blt.n	800df26 <quorem+0xec>
 800deda:	4629      	mov	r1, r5
 800dedc:	2000      	movs	r0, #0
 800dede:	f858 2b04 	ldr.w	r2, [r8], #4
 800dee2:	f8d1 c000 	ldr.w	ip, [r1]
 800dee6:	fa1f fe82 	uxth.w	lr, r2
 800deea:	fa1f f38c 	uxth.w	r3, ip
 800deee:	eba3 030e 	sub.w	r3, r3, lr
 800def2:	4403      	add	r3, r0
 800def4:	0c12      	lsrs	r2, r2, #16
 800def6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800defa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800defe:	b29b      	uxth	r3, r3
 800df00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df04:	45c1      	cmp	r9, r8
 800df06:	f841 3b04 	str.w	r3, [r1], #4
 800df0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df0e:	d2e6      	bcs.n	800dede <quorem+0xa4>
 800df10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df18:	b922      	cbnz	r2, 800df24 <quorem+0xea>
 800df1a:	3b04      	subs	r3, #4
 800df1c:	429d      	cmp	r5, r3
 800df1e:	461a      	mov	r2, r3
 800df20:	d30b      	bcc.n	800df3a <quorem+0x100>
 800df22:	613c      	str	r4, [r7, #16]
 800df24:	3601      	adds	r6, #1
 800df26:	4630      	mov	r0, r6
 800df28:	b003      	add	sp, #12
 800df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2e:	6812      	ldr	r2, [r2, #0]
 800df30:	3b04      	subs	r3, #4
 800df32:	2a00      	cmp	r2, #0
 800df34:	d1cb      	bne.n	800dece <quorem+0x94>
 800df36:	3c01      	subs	r4, #1
 800df38:	e7c6      	b.n	800dec8 <quorem+0x8e>
 800df3a:	6812      	ldr	r2, [r2, #0]
 800df3c:	3b04      	subs	r3, #4
 800df3e:	2a00      	cmp	r2, #0
 800df40:	d1ef      	bne.n	800df22 <quorem+0xe8>
 800df42:	3c01      	subs	r4, #1
 800df44:	e7ea      	b.n	800df1c <quorem+0xe2>
 800df46:	2000      	movs	r0, #0
 800df48:	e7ee      	b.n	800df28 <quorem+0xee>
 800df4a:	0000      	movs	r0, r0
 800df4c:	0000      	movs	r0, r0
	...

0800df50 <_dtoa_r>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	ed2d 8b02 	vpush	{d8}
 800df58:	69c7      	ldr	r7, [r0, #28]
 800df5a:	b091      	sub	sp, #68	@ 0x44
 800df5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df60:	ec55 4b10 	vmov	r4, r5, d0
 800df64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800df66:	9107      	str	r1, [sp, #28]
 800df68:	4681      	mov	r9, r0
 800df6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800df6c:	930d      	str	r3, [sp, #52]	@ 0x34
 800df6e:	b97f      	cbnz	r7, 800df90 <_dtoa_r+0x40>
 800df70:	2010      	movs	r0, #16
 800df72:	f000 fd8d 	bl	800ea90 <malloc>
 800df76:	4602      	mov	r2, r0
 800df78:	f8c9 001c 	str.w	r0, [r9, #28]
 800df7c:	b920      	cbnz	r0, 800df88 <_dtoa_r+0x38>
 800df7e:	4ba0      	ldr	r3, [pc, #640]	@ (800e200 <_dtoa_r+0x2b0>)
 800df80:	21ef      	movs	r1, #239	@ 0xef
 800df82:	48a0      	ldr	r0, [pc, #640]	@ (800e204 <_dtoa_r+0x2b4>)
 800df84:	f001 fa86 	bl	800f494 <__assert_func>
 800df88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df8c:	6007      	str	r7, [r0, #0]
 800df8e:	60c7      	str	r7, [r0, #12]
 800df90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df94:	6819      	ldr	r1, [r3, #0]
 800df96:	b159      	cbz	r1, 800dfb0 <_dtoa_r+0x60>
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	604a      	str	r2, [r1, #4]
 800df9c:	2301      	movs	r3, #1
 800df9e:	4093      	lsls	r3, r2
 800dfa0:	608b      	str	r3, [r1, #8]
 800dfa2:	4648      	mov	r0, r9
 800dfa4:	f000 fe6a 	bl	800ec7c <_Bfree>
 800dfa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	1e2b      	subs	r3, r5, #0
 800dfb2:	bfbb      	ittet	lt
 800dfb4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dfb8:	9303      	strlt	r3, [sp, #12]
 800dfba:	2300      	movge	r3, #0
 800dfbc:	2201      	movlt	r2, #1
 800dfbe:	bfac      	ite	ge
 800dfc0:	6033      	strge	r3, [r6, #0]
 800dfc2:	6032      	strlt	r2, [r6, #0]
 800dfc4:	4b90      	ldr	r3, [pc, #576]	@ (800e208 <_dtoa_r+0x2b8>)
 800dfc6:	9e03      	ldr	r6, [sp, #12]
 800dfc8:	43b3      	bics	r3, r6
 800dfca:	d110      	bne.n	800dfee <_dtoa_r+0x9e>
 800dfcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfce:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800dfd8:	4323      	orrs	r3, r4
 800dfda:	f000 84de 	beq.w	800e99a <_dtoa_r+0xa4a>
 800dfde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dfe0:	4f8a      	ldr	r7, [pc, #552]	@ (800e20c <_dtoa_r+0x2bc>)
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f000 84e0 	beq.w	800e9a8 <_dtoa_r+0xa58>
 800dfe8:	1cfb      	adds	r3, r7, #3
 800dfea:	f000 bcdb 	b.w	800e9a4 <_dtoa_r+0xa54>
 800dfee:	ed9d 8b02 	vldr	d8, [sp, #8]
 800dff2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dffa:	d10a      	bne.n	800e012 <_dtoa_r+0xc2>
 800dffc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dffe:	2301      	movs	r3, #1
 800e000:	6013      	str	r3, [r2, #0]
 800e002:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e004:	b113      	cbz	r3, 800e00c <_dtoa_r+0xbc>
 800e006:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e008:	4b81      	ldr	r3, [pc, #516]	@ (800e210 <_dtoa_r+0x2c0>)
 800e00a:	6013      	str	r3, [r2, #0]
 800e00c:	4f81      	ldr	r7, [pc, #516]	@ (800e214 <_dtoa_r+0x2c4>)
 800e00e:	f000 bccb 	b.w	800e9a8 <_dtoa_r+0xa58>
 800e012:	aa0e      	add	r2, sp, #56	@ 0x38
 800e014:	a90f      	add	r1, sp, #60	@ 0x3c
 800e016:	4648      	mov	r0, r9
 800e018:	eeb0 0b48 	vmov.f64	d0, d8
 800e01c:	f001 f918 	bl	800f250 <__d2b>
 800e020:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800e024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e026:	9001      	str	r0, [sp, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d045      	beq.n	800e0b8 <_dtoa_r+0x168>
 800e02c:	eeb0 7b48 	vmov.f64	d7, d8
 800e030:	ee18 1a90 	vmov	r1, s17
 800e034:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e038:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800e03c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e040:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e044:	2500      	movs	r5, #0
 800e046:	ee07 1a90 	vmov	s15, r1
 800e04a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800e04e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e1e8 <_dtoa_r+0x298>
 800e052:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e056:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e1f0 <_dtoa_r+0x2a0>
 800e05a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e05e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e1f8 <_dtoa_r+0x2a8>
 800e062:	ee07 3a90 	vmov	s15, r3
 800e066:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e06a:	eeb0 7b46 	vmov.f64	d7, d6
 800e06e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e072:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e076:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07e:	ee16 8a90 	vmov	r8, s13
 800e082:	d508      	bpl.n	800e096 <_dtoa_r+0x146>
 800e084:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e088:	eeb4 6b47 	vcmp.f64	d6, d7
 800e08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e090:	bf18      	it	ne
 800e092:	f108 38ff 	addne.w	r8, r8, #4294967295
 800e096:	f1b8 0f16 	cmp.w	r8, #22
 800e09a:	d82b      	bhi.n	800e0f4 <_dtoa_r+0x1a4>
 800e09c:	495e      	ldr	r1, [pc, #376]	@ (800e218 <_dtoa_r+0x2c8>)
 800e09e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800e0a2:	ed91 7b00 	vldr	d7, [r1]
 800e0a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ae:	d501      	bpl.n	800e0b4 <_dtoa_r+0x164>
 800e0b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	e01e      	b.n	800e0f6 <_dtoa_r+0x1a6>
 800e0b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800e0c0:	2920      	cmp	r1, #32
 800e0c2:	bfc1      	itttt	gt
 800e0c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800e0c8:	408e      	lslgt	r6, r1
 800e0ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800e0ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 800e0d2:	bfd6      	itet	le
 800e0d4:	f1c1 0120 	rsble	r1, r1, #32
 800e0d8:	4331      	orrgt	r1, r6
 800e0da:	fa04 f101 	lslle.w	r1, r4, r1
 800e0de:	ee07 1a90 	vmov	s15, r1
 800e0e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	ee17 1a90 	vmov	r1, s15
 800e0ec:	2501      	movs	r5, #1
 800e0ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800e0f2:	e7a8      	b.n	800e046 <_dtoa_r+0xf6>
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	1ad2      	subs	r2, r2, r3
 800e0f8:	1e53      	subs	r3, r2, #1
 800e0fa:	9306      	str	r3, [sp, #24]
 800e0fc:	bf45      	ittet	mi
 800e0fe:	f1c2 0301 	rsbmi	r3, r2, #1
 800e102:	9305      	strmi	r3, [sp, #20]
 800e104:	2300      	movpl	r3, #0
 800e106:	2300      	movmi	r3, #0
 800e108:	bf4c      	ite	mi
 800e10a:	9306      	strmi	r3, [sp, #24]
 800e10c:	9305      	strpl	r3, [sp, #20]
 800e10e:	f1b8 0f00 	cmp.w	r8, #0
 800e112:	910c      	str	r1, [sp, #48]	@ 0x30
 800e114:	db18      	blt.n	800e148 <_dtoa_r+0x1f8>
 800e116:	9b06      	ldr	r3, [sp, #24]
 800e118:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e11c:	4443      	add	r3, r8
 800e11e:	9306      	str	r3, [sp, #24]
 800e120:	2300      	movs	r3, #0
 800e122:	9a07      	ldr	r2, [sp, #28]
 800e124:	2a09      	cmp	r2, #9
 800e126:	d849      	bhi.n	800e1bc <_dtoa_r+0x26c>
 800e128:	2a05      	cmp	r2, #5
 800e12a:	bfc4      	itt	gt
 800e12c:	3a04      	subgt	r2, #4
 800e12e:	9207      	strgt	r2, [sp, #28]
 800e130:	9a07      	ldr	r2, [sp, #28]
 800e132:	f1a2 0202 	sub.w	r2, r2, #2
 800e136:	bfcc      	ite	gt
 800e138:	2400      	movgt	r4, #0
 800e13a:	2401      	movle	r4, #1
 800e13c:	2a03      	cmp	r2, #3
 800e13e:	d848      	bhi.n	800e1d2 <_dtoa_r+0x282>
 800e140:	e8df f002 	tbb	[pc, r2]
 800e144:	3a2c2e0b 	.word	0x3a2c2e0b
 800e148:	9b05      	ldr	r3, [sp, #20]
 800e14a:	2200      	movs	r2, #0
 800e14c:	eba3 0308 	sub.w	r3, r3, r8
 800e150:	9305      	str	r3, [sp, #20]
 800e152:	920a      	str	r2, [sp, #40]	@ 0x28
 800e154:	f1c8 0300 	rsb	r3, r8, #0
 800e158:	e7e3      	b.n	800e122 <_dtoa_r+0x1d2>
 800e15a:	2200      	movs	r2, #0
 800e15c:	9208      	str	r2, [sp, #32]
 800e15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e160:	2a00      	cmp	r2, #0
 800e162:	dc39      	bgt.n	800e1d8 <_dtoa_r+0x288>
 800e164:	f04f 0b01 	mov.w	fp, #1
 800e168:	46da      	mov	sl, fp
 800e16a:	465a      	mov	r2, fp
 800e16c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800e170:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800e174:	2100      	movs	r1, #0
 800e176:	2004      	movs	r0, #4
 800e178:	f100 0614 	add.w	r6, r0, #20
 800e17c:	4296      	cmp	r6, r2
 800e17e:	d930      	bls.n	800e1e2 <_dtoa_r+0x292>
 800e180:	6079      	str	r1, [r7, #4]
 800e182:	4648      	mov	r0, r9
 800e184:	9304      	str	r3, [sp, #16]
 800e186:	f000 fd39 	bl	800ebfc <_Balloc>
 800e18a:	9b04      	ldr	r3, [sp, #16]
 800e18c:	4607      	mov	r7, r0
 800e18e:	2800      	cmp	r0, #0
 800e190:	d146      	bne.n	800e220 <_dtoa_r+0x2d0>
 800e192:	4b22      	ldr	r3, [pc, #136]	@ (800e21c <_dtoa_r+0x2cc>)
 800e194:	4602      	mov	r2, r0
 800e196:	f240 11af 	movw	r1, #431	@ 0x1af
 800e19a:	e6f2      	b.n	800df82 <_dtoa_r+0x32>
 800e19c:	2201      	movs	r2, #1
 800e19e:	e7dd      	b.n	800e15c <_dtoa_r+0x20c>
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	9208      	str	r2, [sp, #32]
 800e1a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1a6:	eb08 0b02 	add.w	fp, r8, r2
 800e1aa:	f10b 0a01 	add.w	sl, fp, #1
 800e1ae:	4652      	mov	r2, sl
 800e1b0:	2a01      	cmp	r2, #1
 800e1b2:	bfb8      	it	lt
 800e1b4:	2201      	movlt	r2, #1
 800e1b6:	e7db      	b.n	800e170 <_dtoa_r+0x220>
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	e7f2      	b.n	800e1a2 <_dtoa_r+0x252>
 800e1bc:	2401      	movs	r4, #1
 800e1be:	2200      	movs	r2, #0
 800e1c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e1c4:	f04f 3bff 	mov.w	fp, #4294967295
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	46da      	mov	sl, fp
 800e1cc:	2212      	movs	r2, #18
 800e1ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1d0:	e7ce      	b.n	800e170 <_dtoa_r+0x220>
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	9208      	str	r2, [sp, #32]
 800e1d6:	e7f5      	b.n	800e1c4 <_dtoa_r+0x274>
 800e1d8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800e1dc:	46da      	mov	sl, fp
 800e1de:	465a      	mov	r2, fp
 800e1e0:	e7c6      	b.n	800e170 <_dtoa_r+0x220>
 800e1e2:	3101      	adds	r1, #1
 800e1e4:	0040      	lsls	r0, r0, #1
 800e1e6:	e7c7      	b.n	800e178 <_dtoa_r+0x228>
 800e1e8:	636f4361 	.word	0x636f4361
 800e1ec:	3fd287a7 	.word	0x3fd287a7
 800e1f0:	8b60c8b3 	.word	0x8b60c8b3
 800e1f4:	3fc68a28 	.word	0x3fc68a28
 800e1f8:	509f79fb 	.word	0x509f79fb
 800e1fc:	3fd34413 	.word	0x3fd34413
 800e200:	080106d1 	.word	0x080106d1
 800e204:	080106e8 	.word	0x080106e8
 800e208:	7ff00000 	.word	0x7ff00000
 800e20c:	080106cd 	.word	0x080106cd
 800e210:	080106a1 	.word	0x080106a1
 800e214:	080106a0 	.word	0x080106a0
 800e218:	080107e0 	.word	0x080107e0
 800e21c:	08010740 	.word	0x08010740
 800e220:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800e224:	f1ba 0f0e 	cmp.w	sl, #14
 800e228:	6010      	str	r0, [r2, #0]
 800e22a:	d86f      	bhi.n	800e30c <_dtoa_r+0x3bc>
 800e22c:	2c00      	cmp	r4, #0
 800e22e:	d06d      	beq.n	800e30c <_dtoa_r+0x3bc>
 800e230:	f1b8 0f00 	cmp.w	r8, #0
 800e234:	f340 80c2 	ble.w	800e3bc <_dtoa_r+0x46c>
 800e238:	4aca      	ldr	r2, [pc, #808]	@ (800e564 <_dtoa_r+0x614>)
 800e23a:	f008 010f 	and.w	r1, r8, #15
 800e23e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e242:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800e246:	ed92 7b00 	vldr	d7, [r2]
 800e24a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800e24e:	f000 80a9 	beq.w	800e3a4 <_dtoa_r+0x454>
 800e252:	4ac5      	ldr	r2, [pc, #788]	@ (800e568 <_dtoa_r+0x618>)
 800e254:	ed92 6b08 	vldr	d6, [r2, #32]
 800e258:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e25c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e260:	f001 010f 	and.w	r1, r1, #15
 800e264:	2203      	movs	r2, #3
 800e266:	48c0      	ldr	r0, [pc, #768]	@ (800e568 <_dtoa_r+0x618>)
 800e268:	2900      	cmp	r1, #0
 800e26a:	f040 809d 	bne.w	800e3a8 <_dtoa_r+0x458>
 800e26e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e272:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e276:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e27a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e27c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e280:	2900      	cmp	r1, #0
 800e282:	f000 80c1 	beq.w	800e408 <_dtoa_r+0x4b8>
 800e286:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800e28a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e292:	f140 80b9 	bpl.w	800e408 <_dtoa_r+0x4b8>
 800e296:	f1ba 0f00 	cmp.w	sl, #0
 800e29a:	f000 80b5 	beq.w	800e408 <_dtoa_r+0x4b8>
 800e29e:	f1bb 0f00 	cmp.w	fp, #0
 800e2a2:	dd31      	ble.n	800e308 <_dtoa_r+0x3b8>
 800e2a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e2a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e2b0:	f108 31ff 	add.w	r1, r8, #4294967295
 800e2b4:	9104      	str	r1, [sp, #16]
 800e2b6:	3201      	adds	r2, #1
 800e2b8:	465c      	mov	r4, fp
 800e2ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e2be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800e2c2:	ee07 2a90 	vmov	s15, r2
 800e2c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e2ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e2ce:	ee15 2a90 	vmov	r2, s11
 800e2d2:	ec51 0b15 	vmov	r0, r1, d5
 800e2d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800e2da:	2c00      	cmp	r4, #0
 800e2dc:	f040 8098 	bne.w	800e410 <_dtoa_r+0x4c0>
 800e2e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e2e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e2e8:	ec41 0b17 	vmov	d7, r0, r1
 800e2ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f4:	f300 8261 	bgt.w	800e7ba <_dtoa_r+0x86a>
 800e2f8:	eeb1 7b47 	vneg.f64	d7, d7
 800e2fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e304:	f100 80f5 	bmi.w	800e4f2 <_dtoa_r+0x5a2>
 800e308:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e30c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e30e:	2a00      	cmp	r2, #0
 800e310:	f2c0 812c 	blt.w	800e56c <_dtoa_r+0x61c>
 800e314:	f1b8 0f0e 	cmp.w	r8, #14
 800e318:	f300 8128 	bgt.w	800e56c <_dtoa_r+0x61c>
 800e31c:	4b91      	ldr	r3, [pc, #580]	@ (800e564 <_dtoa_r+0x614>)
 800e31e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e322:	ed93 6b00 	vldr	d6, [r3]
 800e326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	da03      	bge.n	800e334 <_dtoa_r+0x3e4>
 800e32c:	f1ba 0f00 	cmp.w	sl, #0
 800e330:	f340 80d2 	ble.w	800e4d8 <_dtoa_r+0x588>
 800e334:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800e338:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e33c:	463e      	mov	r6, r7
 800e33e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e342:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e346:	ee15 3a10 	vmov	r3, s10
 800e34a:	3330      	adds	r3, #48	@ 0x30
 800e34c:	f806 3b01 	strb.w	r3, [r6], #1
 800e350:	1bf3      	subs	r3, r6, r7
 800e352:	459a      	cmp	sl, r3
 800e354:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e358:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e35c:	f040 80f8 	bne.w	800e550 <_dtoa_r+0x600>
 800e360:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e364:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36c:	f300 80dd 	bgt.w	800e52a <_dtoa_r+0x5da>
 800e370:	eeb4 7b46 	vcmp.f64	d7, d6
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	d104      	bne.n	800e384 <_dtoa_r+0x434>
 800e37a:	ee15 3a10 	vmov	r3, s10
 800e37e:	07db      	lsls	r3, r3, #31
 800e380:	f100 80d3 	bmi.w	800e52a <_dtoa_r+0x5da>
 800e384:	9901      	ldr	r1, [sp, #4]
 800e386:	4648      	mov	r0, r9
 800e388:	f000 fc78 	bl	800ec7c <_Bfree>
 800e38c:	2300      	movs	r3, #0
 800e38e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e390:	7033      	strb	r3, [r6, #0]
 800e392:	f108 0301 	add.w	r3, r8, #1
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f000 8304 	beq.w	800e9a8 <_dtoa_r+0xa58>
 800e3a0:	601e      	str	r6, [r3, #0]
 800e3a2:	e301      	b.n	800e9a8 <_dtoa_r+0xa58>
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	e75e      	b.n	800e266 <_dtoa_r+0x316>
 800e3a8:	07cc      	lsls	r4, r1, #31
 800e3aa:	d504      	bpl.n	800e3b6 <_dtoa_r+0x466>
 800e3ac:	ed90 6b00 	vldr	d6, [r0]
 800e3b0:	3201      	adds	r2, #1
 800e3b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3b6:	1049      	asrs	r1, r1, #1
 800e3b8:	3008      	adds	r0, #8
 800e3ba:	e755      	b.n	800e268 <_dtoa_r+0x318>
 800e3bc:	d022      	beq.n	800e404 <_dtoa_r+0x4b4>
 800e3be:	f1c8 0100 	rsb	r1, r8, #0
 800e3c2:	4a68      	ldr	r2, [pc, #416]	@ (800e564 <_dtoa_r+0x614>)
 800e3c4:	f001 000f 	and.w	r0, r1, #15
 800e3c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e3cc:	ed92 7b00 	vldr	d7, [r2]
 800e3d0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e3d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3d8:	4863      	ldr	r0, [pc, #396]	@ (800e568 <_dtoa_r+0x618>)
 800e3da:	1109      	asrs	r1, r1, #4
 800e3dc:	2400      	movs	r4, #0
 800e3de:	2202      	movs	r2, #2
 800e3e0:	b929      	cbnz	r1, 800e3ee <_dtoa_r+0x49e>
 800e3e2:	2c00      	cmp	r4, #0
 800e3e4:	f43f af49 	beq.w	800e27a <_dtoa_r+0x32a>
 800e3e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3ec:	e745      	b.n	800e27a <_dtoa_r+0x32a>
 800e3ee:	07ce      	lsls	r6, r1, #31
 800e3f0:	d505      	bpl.n	800e3fe <_dtoa_r+0x4ae>
 800e3f2:	ed90 6b00 	vldr	d6, [r0]
 800e3f6:	3201      	adds	r2, #1
 800e3f8:	2401      	movs	r4, #1
 800e3fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3fe:	1049      	asrs	r1, r1, #1
 800e400:	3008      	adds	r0, #8
 800e402:	e7ed      	b.n	800e3e0 <_dtoa_r+0x490>
 800e404:	2202      	movs	r2, #2
 800e406:	e738      	b.n	800e27a <_dtoa_r+0x32a>
 800e408:	f8cd 8010 	str.w	r8, [sp, #16]
 800e40c:	4654      	mov	r4, sl
 800e40e:	e754      	b.n	800e2ba <_dtoa_r+0x36a>
 800e410:	4a54      	ldr	r2, [pc, #336]	@ (800e564 <_dtoa_r+0x614>)
 800e412:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e416:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e41a:	9a08      	ldr	r2, [sp, #32]
 800e41c:	ec41 0b17 	vmov	d7, r0, r1
 800e420:	443c      	add	r4, r7
 800e422:	b34a      	cbz	r2, 800e478 <_dtoa_r+0x528>
 800e424:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800e428:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800e42c:	463e      	mov	r6, r7
 800e42e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e432:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e436:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e43a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e43e:	ee14 2a90 	vmov	r2, s9
 800e442:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e446:	3230      	adds	r2, #48	@ 0x30
 800e448:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e44c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	f806 2b01 	strb.w	r2, [r6], #1
 800e458:	d438      	bmi.n	800e4cc <_dtoa_r+0x57c>
 800e45a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e45e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e466:	d462      	bmi.n	800e52e <_dtoa_r+0x5de>
 800e468:	42a6      	cmp	r6, r4
 800e46a:	f43f af4d 	beq.w	800e308 <_dtoa_r+0x3b8>
 800e46e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e472:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e476:	e7e0      	b.n	800e43a <_dtoa_r+0x4ea>
 800e478:	4621      	mov	r1, r4
 800e47a:	463e      	mov	r6, r7
 800e47c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e480:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e484:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e488:	ee14 2a90 	vmov	r2, s9
 800e48c:	3230      	adds	r2, #48	@ 0x30
 800e48e:	f806 2b01 	strb.w	r2, [r6], #1
 800e492:	42a6      	cmp	r6, r4
 800e494:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e498:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e49c:	d119      	bne.n	800e4d2 <_dtoa_r+0x582>
 800e49e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800e4a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e4a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ae:	dc3e      	bgt.n	800e52e <_dtoa_r+0x5de>
 800e4b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e4b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4bc:	f57f af24 	bpl.w	800e308 <_dtoa_r+0x3b8>
 800e4c0:	460e      	mov	r6, r1
 800e4c2:	3901      	subs	r1, #1
 800e4c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4c8:	2b30      	cmp	r3, #48	@ 0x30
 800e4ca:	d0f9      	beq.n	800e4c0 <_dtoa_r+0x570>
 800e4cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e4d0:	e758      	b.n	800e384 <_dtoa_r+0x434>
 800e4d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e4d6:	e7d5      	b.n	800e484 <_dtoa_r+0x534>
 800e4d8:	d10b      	bne.n	800e4f2 <_dtoa_r+0x5a2>
 800e4da:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e4de:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e4e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e4e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	f2c0 8161 	blt.w	800e7b4 <_dtoa_r+0x864>
 800e4f2:	2400      	movs	r4, #0
 800e4f4:	4625      	mov	r5, r4
 800e4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f8:	43db      	mvns	r3, r3
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	463e      	mov	r6, r7
 800e4fe:	f04f 0800 	mov.w	r8, #0
 800e502:	4621      	mov	r1, r4
 800e504:	4648      	mov	r0, r9
 800e506:	f000 fbb9 	bl	800ec7c <_Bfree>
 800e50a:	2d00      	cmp	r5, #0
 800e50c:	d0de      	beq.n	800e4cc <_dtoa_r+0x57c>
 800e50e:	f1b8 0f00 	cmp.w	r8, #0
 800e512:	d005      	beq.n	800e520 <_dtoa_r+0x5d0>
 800e514:	45a8      	cmp	r8, r5
 800e516:	d003      	beq.n	800e520 <_dtoa_r+0x5d0>
 800e518:	4641      	mov	r1, r8
 800e51a:	4648      	mov	r0, r9
 800e51c:	f000 fbae 	bl	800ec7c <_Bfree>
 800e520:	4629      	mov	r1, r5
 800e522:	4648      	mov	r0, r9
 800e524:	f000 fbaa 	bl	800ec7c <_Bfree>
 800e528:	e7d0      	b.n	800e4cc <_dtoa_r+0x57c>
 800e52a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e52e:	4633      	mov	r3, r6
 800e530:	461e      	mov	r6, r3
 800e532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e536:	2a39      	cmp	r2, #57	@ 0x39
 800e538:	d106      	bne.n	800e548 <_dtoa_r+0x5f8>
 800e53a:	429f      	cmp	r7, r3
 800e53c:	d1f8      	bne.n	800e530 <_dtoa_r+0x5e0>
 800e53e:	9a04      	ldr	r2, [sp, #16]
 800e540:	3201      	adds	r2, #1
 800e542:	9204      	str	r2, [sp, #16]
 800e544:	2230      	movs	r2, #48	@ 0x30
 800e546:	703a      	strb	r2, [r7, #0]
 800e548:	781a      	ldrb	r2, [r3, #0]
 800e54a:	3201      	adds	r2, #1
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	e7bd      	b.n	800e4cc <_dtoa_r+0x57c>
 800e550:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e554:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55c:	f47f aeef 	bne.w	800e33e <_dtoa_r+0x3ee>
 800e560:	e710      	b.n	800e384 <_dtoa_r+0x434>
 800e562:	bf00      	nop
 800e564:	080107e0 	.word	0x080107e0
 800e568:	080107b8 	.word	0x080107b8
 800e56c:	9908      	ldr	r1, [sp, #32]
 800e56e:	2900      	cmp	r1, #0
 800e570:	f000 80e3 	beq.w	800e73a <_dtoa_r+0x7ea>
 800e574:	9907      	ldr	r1, [sp, #28]
 800e576:	2901      	cmp	r1, #1
 800e578:	f300 80c8 	bgt.w	800e70c <_dtoa_r+0x7bc>
 800e57c:	2d00      	cmp	r5, #0
 800e57e:	f000 80c1 	beq.w	800e704 <_dtoa_r+0x7b4>
 800e582:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e586:	9e05      	ldr	r6, [sp, #20]
 800e588:	461c      	mov	r4, r3
 800e58a:	9304      	str	r3, [sp, #16]
 800e58c:	9b05      	ldr	r3, [sp, #20]
 800e58e:	4413      	add	r3, r2
 800e590:	9305      	str	r3, [sp, #20]
 800e592:	9b06      	ldr	r3, [sp, #24]
 800e594:	2101      	movs	r1, #1
 800e596:	4413      	add	r3, r2
 800e598:	4648      	mov	r0, r9
 800e59a:	9306      	str	r3, [sp, #24]
 800e59c:	f000 fc22 	bl	800ede4 <__i2b>
 800e5a0:	9b04      	ldr	r3, [sp, #16]
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	b166      	cbz	r6, 800e5c0 <_dtoa_r+0x670>
 800e5a6:	9a06      	ldr	r2, [sp, #24]
 800e5a8:	2a00      	cmp	r2, #0
 800e5aa:	dd09      	ble.n	800e5c0 <_dtoa_r+0x670>
 800e5ac:	42b2      	cmp	r2, r6
 800e5ae:	9905      	ldr	r1, [sp, #20]
 800e5b0:	bfa8      	it	ge
 800e5b2:	4632      	movge	r2, r6
 800e5b4:	1a89      	subs	r1, r1, r2
 800e5b6:	9105      	str	r1, [sp, #20]
 800e5b8:	9906      	ldr	r1, [sp, #24]
 800e5ba:	1ab6      	subs	r6, r6, r2
 800e5bc:	1a8a      	subs	r2, r1, r2
 800e5be:	9206      	str	r2, [sp, #24]
 800e5c0:	b1fb      	cbz	r3, 800e602 <_dtoa_r+0x6b2>
 800e5c2:	9a08      	ldr	r2, [sp, #32]
 800e5c4:	2a00      	cmp	r2, #0
 800e5c6:	f000 80bc 	beq.w	800e742 <_dtoa_r+0x7f2>
 800e5ca:	b19c      	cbz	r4, 800e5f4 <_dtoa_r+0x6a4>
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	4648      	mov	r0, r9
 800e5d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5d4:	f000 fcc6 	bl	800ef64 <__pow5mult>
 800e5d8:	9a01      	ldr	r2, [sp, #4]
 800e5da:	4601      	mov	r1, r0
 800e5dc:	4605      	mov	r5, r0
 800e5de:	4648      	mov	r0, r9
 800e5e0:	f000 fc16 	bl	800ee10 <__multiply>
 800e5e4:	9901      	ldr	r1, [sp, #4]
 800e5e6:	9004      	str	r0, [sp, #16]
 800e5e8:	4648      	mov	r0, r9
 800e5ea:	f000 fb47 	bl	800ec7c <_Bfree>
 800e5ee:	9a04      	ldr	r2, [sp, #16]
 800e5f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5f2:	9201      	str	r2, [sp, #4]
 800e5f4:	1b1a      	subs	r2, r3, r4
 800e5f6:	d004      	beq.n	800e602 <_dtoa_r+0x6b2>
 800e5f8:	9901      	ldr	r1, [sp, #4]
 800e5fa:	4648      	mov	r0, r9
 800e5fc:	f000 fcb2 	bl	800ef64 <__pow5mult>
 800e600:	9001      	str	r0, [sp, #4]
 800e602:	2101      	movs	r1, #1
 800e604:	4648      	mov	r0, r9
 800e606:	f000 fbed 	bl	800ede4 <__i2b>
 800e60a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e60c:	4604      	mov	r4, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 81d0 	beq.w	800e9b4 <_dtoa_r+0xa64>
 800e614:	461a      	mov	r2, r3
 800e616:	4601      	mov	r1, r0
 800e618:	4648      	mov	r0, r9
 800e61a:	f000 fca3 	bl	800ef64 <__pow5mult>
 800e61e:	9b07      	ldr	r3, [sp, #28]
 800e620:	2b01      	cmp	r3, #1
 800e622:	4604      	mov	r4, r0
 800e624:	f300 8095 	bgt.w	800e752 <_dtoa_r+0x802>
 800e628:	9b02      	ldr	r3, [sp, #8]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f040 808b 	bne.w	800e746 <_dtoa_r+0x7f6>
 800e630:	9b03      	ldr	r3, [sp, #12]
 800e632:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e636:	2a00      	cmp	r2, #0
 800e638:	f040 8087 	bne.w	800e74a <_dtoa_r+0x7fa>
 800e63c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e640:	0d12      	lsrs	r2, r2, #20
 800e642:	0512      	lsls	r2, r2, #20
 800e644:	2a00      	cmp	r2, #0
 800e646:	f000 8082 	beq.w	800e74e <_dtoa_r+0x7fe>
 800e64a:	9b05      	ldr	r3, [sp, #20]
 800e64c:	3301      	adds	r3, #1
 800e64e:	9305      	str	r3, [sp, #20]
 800e650:	9b06      	ldr	r3, [sp, #24]
 800e652:	3301      	adds	r3, #1
 800e654:	9306      	str	r3, [sp, #24]
 800e656:	2301      	movs	r3, #1
 800e658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e65a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 81af 	beq.w	800e9c0 <_dtoa_r+0xa70>
 800e662:	6922      	ldr	r2, [r4, #16]
 800e664:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e668:	6910      	ldr	r0, [r2, #16]
 800e66a:	f000 fb6f 	bl	800ed4c <__hi0bits>
 800e66e:	f1c0 0020 	rsb	r0, r0, #32
 800e672:	9b06      	ldr	r3, [sp, #24]
 800e674:	4418      	add	r0, r3
 800e676:	f010 001f 	ands.w	r0, r0, #31
 800e67a:	d076      	beq.n	800e76a <_dtoa_r+0x81a>
 800e67c:	f1c0 0220 	rsb	r2, r0, #32
 800e680:	2a04      	cmp	r2, #4
 800e682:	dd69      	ble.n	800e758 <_dtoa_r+0x808>
 800e684:	9b05      	ldr	r3, [sp, #20]
 800e686:	f1c0 001c 	rsb	r0, r0, #28
 800e68a:	4403      	add	r3, r0
 800e68c:	9305      	str	r3, [sp, #20]
 800e68e:	9b06      	ldr	r3, [sp, #24]
 800e690:	4406      	add	r6, r0
 800e692:	4403      	add	r3, r0
 800e694:	9306      	str	r3, [sp, #24]
 800e696:	9b05      	ldr	r3, [sp, #20]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	dd05      	ble.n	800e6a8 <_dtoa_r+0x758>
 800e69c:	9901      	ldr	r1, [sp, #4]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	4648      	mov	r0, r9
 800e6a2:	f000 fcb9 	bl	800f018 <__lshift>
 800e6a6:	9001      	str	r0, [sp, #4]
 800e6a8:	9b06      	ldr	r3, [sp, #24]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	dd05      	ble.n	800e6ba <_dtoa_r+0x76a>
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	4648      	mov	r0, r9
 800e6b4:	f000 fcb0 	bl	800f018 <__lshift>
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d056      	beq.n	800e76e <_dtoa_r+0x81e>
 800e6c0:	9801      	ldr	r0, [sp, #4]
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	f000 fd14 	bl	800f0f0 <__mcmp>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	da50      	bge.n	800e76e <_dtoa_r+0x81e>
 800e6cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800e6d0:	9304      	str	r3, [sp, #16]
 800e6d2:	9901      	ldr	r1, [sp, #4]
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	220a      	movs	r2, #10
 800e6d8:	4648      	mov	r0, r9
 800e6da:	f000 faf1 	bl	800ecc0 <__multadd>
 800e6de:	9b08      	ldr	r3, [sp, #32]
 800e6e0:	9001      	str	r0, [sp, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f000 816e 	beq.w	800e9c4 <_dtoa_r+0xa74>
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	220a      	movs	r2, #10
 800e6ee:	4648      	mov	r0, r9
 800e6f0:	f000 fae6 	bl	800ecc0 <__multadd>
 800e6f4:	f1bb 0f00 	cmp.w	fp, #0
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	dc64      	bgt.n	800e7c6 <_dtoa_r+0x876>
 800e6fc:	9b07      	ldr	r3, [sp, #28]
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	dc3e      	bgt.n	800e780 <_dtoa_r+0x830>
 800e702:	e060      	b.n	800e7c6 <_dtoa_r+0x876>
 800e704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e706:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e70a:	e73c      	b.n	800e586 <_dtoa_r+0x636>
 800e70c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e710:	42a3      	cmp	r3, r4
 800e712:	bfbf      	itttt	lt
 800e714:	1ae2      	sublt	r2, r4, r3
 800e716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e718:	189b      	addlt	r3, r3, r2
 800e71a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e71c:	bfae      	itee	ge
 800e71e:	1b1c      	subge	r4, r3, r4
 800e720:	4623      	movlt	r3, r4
 800e722:	2400      	movlt	r4, #0
 800e724:	f1ba 0f00 	cmp.w	sl, #0
 800e728:	bfb5      	itete	lt
 800e72a:	9a05      	ldrlt	r2, [sp, #20]
 800e72c:	9e05      	ldrge	r6, [sp, #20]
 800e72e:	eba2 060a 	sublt.w	r6, r2, sl
 800e732:	4652      	movge	r2, sl
 800e734:	bfb8      	it	lt
 800e736:	2200      	movlt	r2, #0
 800e738:	e727      	b.n	800e58a <_dtoa_r+0x63a>
 800e73a:	9e05      	ldr	r6, [sp, #20]
 800e73c:	9d08      	ldr	r5, [sp, #32]
 800e73e:	461c      	mov	r4, r3
 800e740:	e730      	b.n	800e5a4 <_dtoa_r+0x654>
 800e742:	461a      	mov	r2, r3
 800e744:	e758      	b.n	800e5f8 <_dtoa_r+0x6a8>
 800e746:	2300      	movs	r3, #0
 800e748:	e786      	b.n	800e658 <_dtoa_r+0x708>
 800e74a:	9b02      	ldr	r3, [sp, #8]
 800e74c:	e784      	b.n	800e658 <_dtoa_r+0x708>
 800e74e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e750:	e783      	b.n	800e65a <_dtoa_r+0x70a>
 800e752:	2300      	movs	r3, #0
 800e754:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e756:	e784      	b.n	800e662 <_dtoa_r+0x712>
 800e758:	d09d      	beq.n	800e696 <_dtoa_r+0x746>
 800e75a:	9b05      	ldr	r3, [sp, #20]
 800e75c:	321c      	adds	r2, #28
 800e75e:	4413      	add	r3, r2
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	9b06      	ldr	r3, [sp, #24]
 800e764:	4416      	add	r6, r2
 800e766:	4413      	add	r3, r2
 800e768:	e794      	b.n	800e694 <_dtoa_r+0x744>
 800e76a:	4602      	mov	r2, r0
 800e76c:	e7f5      	b.n	800e75a <_dtoa_r+0x80a>
 800e76e:	f1ba 0f00 	cmp.w	sl, #0
 800e772:	f8cd 8010 	str.w	r8, [sp, #16]
 800e776:	46d3      	mov	fp, sl
 800e778:	dc21      	bgt.n	800e7be <_dtoa_r+0x86e>
 800e77a:	9b07      	ldr	r3, [sp, #28]
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	dd1e      	ble.n	800e7be <_dtoa_r+0x86e>
 800e780:	f1bb 0f00 	cmp.w	fp, #0
 800e784:	f47f aeb7 	bne.w	800e4f6 <_dtoa_r+0x5a6>
 800e788:	4621      	mov	r1, r4
 800e78a:	465b      	mov	r3, fp
 800e78c:	2205      	movs	r2, #5
 800e78e:	4648      	mov	r0, r9
 800e790:	f000 fa96 	bl	800ecc0 <__multadd>
 800e794:	4601      	mov	r1, r0
 800e796:	4604      	mov	r4, r0
 800e798:	9801      	ldr	r0, [sp, #4]
 800e79a:	f000 fca9 	bl	800f0f0 <__mcmp>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f77f aea9 	ble.w	800e4f6 <_dtoa_r+0x5a6>
 800e7a4:	463e      	mov	r6, r7
 800e7a6:	2331      	movs	r3, #49	@ 0x31
 800e7a8:	f806 3b01 	strb.w	r3, [r6], #1
 800e7ac:	9b04      	ldr	r3, [sp, #16]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	e6a4      	b.n	800e4fe <_dtoa_r+0x5ae>
 800e7b4:	f8cd 8010 	str.w	r8, [sp, #16]
 800e7b8:	4654      	mov	r4, sl
 800e7ba:	4625      	mov	r5, r4
 800e7bc:	e7f2      	b.n	800e7a4 <_dtoa_r+0x854>
 800e7be:	9b08      	ldr	r3, [sp, #32]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 8103 	beq.w	800e9cc <_dtoa_r+0xa7c>
 800e7c6:	2e00      	cmp	r6, #0
 800e7c8:	dd05      	ble.n	800e7d6 <_dtoa_r+0x886>
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	4648      	mov	r0, r9
 800e7d0:	f000 fc22 	bl	800f018 <__lshift>
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d058      	beq.n	800e88e <_dtoa_r+0x93e>
 800e7dc:	6869      	ldr	r1, [r5, #4]
 800e7de:	4648      	mov	r0, r9
 800e7e0:	f000 fa0c 	bl	800ebfc <_Balloc>
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	b928      	cbnz	r0, 800e7f4 <_dtoa_r+0x8a4>
 800e7e8:	4b82      	ldr	r3, [pc, #520]	@ (800e9f4 <_dtoa_r+0xaa4>)
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e7f0:	f7ff bbc7 	b.w	800df82 <_dtoa_r+0x32>
 800e7f4:	692a      	ldr	r2, [r5, #16]
 800e7f6:	3202      	adds	r2, #2
 800e7f8:	0092      	lsls	r2, r2, #2
 800e7fa:	f105 010c 	add.w	r1, r5, #12
 800e7fe:	300c      	adds	r0, #12
 800e800:	f000 fe3a 	bl	800f478 <memcpy>
 800e804:	2201      	movs	r2, #1
 800e806:	4631      	mov	r1, r6
 800e808:	4648      	mov	r0, r9
 800e80a:	f000 fc05 	bl	800f018 <__lshift>
 800e80e:	1c7b      	adds	r3, r7, #1
 800e810:	9305      	str	r3, [sp, #20]
 800e812:	eb07 030b 	add.w	r3, r7, fp
 800e816:	9309      	str	r3, [sp, #36]	@ 0x24
 800e818:	9b02      	ldr	r3, [sp, #8]
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	46a8      	mov	r8, r5
 800e820:	9308      	str	r3, [sp, #32]
 800e822:	4605      	mov	r5, r0
 800e824:	9b05      	ldr	r3, [sp, #20]
 800e826:	9801      	ldr	r0, [sp, #4]
 800e828:	4621      	mov	r1, r4
 800e82a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e82e:	f7ff fb04 	bl	800de3a <quorem>
 800e832:	4641      	mov	r1, r8
 800e834:	9002      	str	r0, [sp, #8]
 800e836:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e83a:	9801      	ldr	r0, [sp, #4]
 800e83c:	f000 fc58 	bl	800f0f0 <__mcmp>
 800e840:	462a      	mov	r2, r5
 800e842:	9006      	str	r0, [sp, #24]
 800e844:	4621      	mov	r1, r4
 800e846:	4648      	mov	r0, r9
 800e848:	f000 fc6e 	bl	800f128 <__mdiff>
 800e84c:	68c2      	ldr	r2, [r0, #12]
 800e84e:	4606      	mov	r6, r0
 800e850:	b9fa      	cbnz	r2, 800e892 <_dtoa_r+0x942>
 800e852:	4601      	mov	r1, r0
 800e854:	9801      	ldr	r0, [sp, #4]
 800e856:	f000 fc4b 	bl	800f0f0 <__mcmp>
 800e85a:	4602      	mov	r2, r0
 800e85c:	4631      	mov	r1, r6
 800e85e:	4648      	mov	r0, r9
 800e860:	920a      	str	r2, [sp, #40]	@ 0x28
 800e862:	f000 fa0b 	bl	800ec7c <_Bfree>
 800e866:	9b07      	ldr	r3, [sp, #28]
 800e868:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e86a:	9e05      	ldr	r6, [sp, #20]
 800e86c:	ea43 0102 	orr.w	r1, r3, r2
 800e870:	9b08      	ldr	r3, [sp, #32]
 800e872:	4319      	orrs	r1, r3
 800e874:	d10f      	bne.n	800e896 <_dtoa_r+0x946>
 800e876:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e87a:	d028      	beq.n	800e8ce <_dtoa_r+0x97e>
 800e87c:	9b06      	ldr	r3, [sp, #24]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	dd02      	ble.n	800e888 <_dtoa_r+0x938>
 800e882:	9b02      	ldr	r3, [sp, #8]
 800e884:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e888:	f88b a000 	strb.w	sl, [fp]
 800e88c:	e639      	b.n	800e502 <_dtoa_r+0x5b2>
 800e88e:	4628      	mov	r0, r5
 800e890:	e7bd      	b.n	800e80e <_dtoa_r+0x8be>
 800e892:	2201      	movs	r2, #1
 800e894:	e7e2      	b.n	800e85c <_dtoa_r+0x90c>
 800e896:	9b06      	ldr	r3, [sp, #24]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	db04      	blt.n	800e8a6 <_dtoa_r+0x956>
 800e89c:	9907      	ldr	r1, [sp, #28]
 800e89e:	430b      	orrs	r3, r1
 800e8a0:	9908      	ldr	r1, [sp, #32]
 800e8a2:	430b      	orrs	r3, r1
 800e8a4:	d120      	bne.n	800e8e8 <_dtoa_r+0x998>
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	ddee      	ble.n	800e888 <_dtoa_r+0x938>
 800e8aa:	9901      	ldr	r1, [sp, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	4648      	mov	r0, r9
 800e8b0:	f000 fbb2 	bl	800f018 <__lshift>
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	9001      	str	r0, [sp, #4]
 800e8b8:	f000 fc1a 	bl	800f0f0 <__mcmp>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	dc03      	bgt.n	800e8c8 <_dtoa_r+0x978>
 800e8c0:	d1e2      	bne.n	800e888 <_dtoa_r+0x938>
 800e8c2:	f01a 0f01 	tst.w	sl, #1
 800e8c6:	d0df      	beq.n	800e888 <_dtoa_r+0x938>
 800e8c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e8cc:	d1d9      	bne.n	800e882 <_dtoa_r+0x932>
 800e8ce:	2339      	movs	r3, #57	@ 0x39
 800e8d0:	f88b 3000 	strb.w	r3, [fp]
 800e8d4:	4633      	mov	r3, r6
 800e8d6:	461e      	mov	r6, r3
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8de:	2a39      	cmp	r2, #57	@ 0x39
 800e8e0:	d053      	beq.n	800e98a <_dtoa_r+0xa3a>
 800e8e2:	3201      	adds	r2, #1
 800e8e4:	701a      	strb	r2, [r3, #0]
 800e8e6:	e60c      	b.n	800e502 <_dtoa_r+0x5b2>
 800e8e8:	2a00      	cmp	r2, #0
 800e8ea:	dd07      	ble.n	800e8fc <_dtoa_r+0x9ac>
 800e8ec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e8f0:	d0ed      	beq.n	800e8ce <_dtoa_r+0x97e>
 800e8f2:	f10a 0301 	add.w	r3, sl, #1
 800e8f6:	f88b 3000 	strb.w	r3, [fp]
 800e8fa:	e602      	b.n	800e502 <_dtoa_r+0x5b2>
 800e8fc:	9b05      	ldr	r3, [sp, #20]
 800e8fe:	9a05      	ldr	r2, [sp, #20]
 800e900:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e906:	4293      	cmp	r3, r2
 800e908:	d029      	beq.n	800e95e <_dtoa_r+0xa0e>
 800e90a:	9901      	ldr	r1, [sp, #4]
 800e90c:	2300      	movs	r3, #0
 800e90e:	220a      	movs	r2, #10
 800e910:	4648      	mov	r0, r9
 800e912:	f000 f9d5 	bl	800ecc0 <__multadd>
 800e916:	45a8      	cmp	r8, r5
 800e918:	9001      	str	r0, [sp, #4]
 800e91a:	f04f 0300 	mov.w	r3, #0
 800e91e:	f04f 020a 	mov.w	r2, #10
 800e922:	4641      	mov	r1, r8
 800e924:	4648      	mov	r0, r9
 800e926:	d107      	bne.n	800e938 <_dtoa_r+0x9e8>
 800e928:	f000 f9ca 	bl	800ecc0 <__multadd>
 800e92c:	4680      	mov	r8, r0
 800e92e:	4605      	mov	r5, r0
 800e930:	9b05      	ldr	r3, [sp, #20]
 800e932:	3301      	adds	r3, #1
 800e934:	9305      	str	r3, [sp, #20]
 800e936:	e775      	b.n	800e824 <_dtoa_r+0x8d4>
 800e938:	f000 f9c2 	bl	800ecc0 <__multadd>
 800e93c:	4629      	mov	r1, r5
 800e93e:	4680      	mov	r8, r0
 800e940:	2300      	movs	r3, #0
 800e942:	220a      	movs	r2, #10
 800e944:	4648      	mov	r0, r9
 800e946:	f000 f9bb 	bl	800ecc0 <__multadd>
 800e94a:	4605      	mov	r5, r0
 800e94c:	e7f0      	b.n	800e930 <_dtoa_r+0x9e0>
 800e94e:	f1bb 0f00 	cmp.w	fp, #0
 800e952:	bfcc      	ite	gt
 800e954:	465e      	movgt	r6, fp
 800e956:	2601      	movle	r6, #1
 800e958:	443e      	add	r6, r7
 800e95a:	f04f 0800 	mov.w	r8, #0
 800e95e:	9901      	ldr	r1, [sp, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	4648      	mov	r0, r9
 800e964:	f000 fb58 	bl	800f018 <__lshift>
 800e968:	4621      	mov	r1, r4
 800e96a:	9001      	str	r0, [sp, #4]
 800e96c:	f000 fbc0 	bl	800f0f0 <__mcmp>
 800e970:	2800      	cmp	r0, #0
 800e972:	dcaf      	bgt.n	800e8d4 <_dtoa_r+0x984>
 800e974:	d102      	bne.n	800e97c <_dtoa_r+0xa2c>
 800e976:	f01a 0f01 	tst.w	sl, #1
 800e97a:	d1ab      	bne.n	800e8d4 <_dtoa_r+0x984>
 800e97c:	4633      	mov	r3, r6
 800e97e:	461e      	mov	r6, r3
 800e980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e984:	2a30      	cmp	r2, #48	@ 0x30
 800e986:	d0fa      	beq.n	800e97e <_dtoa_r+0xa2e>
 800e988:	e5bb      	b.n	800e502 <_dtoa_r+0x5b2>
 800e98a:	429f      	cmp	r7, r3
 800e98c:	d1a3      	bne.n	800e8d6 <_dtoa_r+0x986>
 800e98e:	9b04      	ldr	r3, [sp, #16]
 800e990:	3301      	adds	r3, #1
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	2331      	movs	r3, #49	@ 0x31
 800e996:	703b      	strb	r3, [r7, #0]
 800e998:	e5b3      	b.n	800e502 <_dtoa_r+0x5b2>
 800e99a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e99c:	4f16      	ldr	r7, [pc, #88]	@ (800e9f8 <_dtoa_r+0xaa8>)
 800e99e:	b11b      	cbz	r3, 800e9a8 <_dtoa_r+0xa58>
 800e9a0:	f107 0308 	add.w	r3, r7, #8
 800e9a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	b011      	add	sp, #68	@ 0x44
 800e9ac:	ecbd 8b02 	vpop	{d8}
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	9b07      	ldr	r3, [sp, #28]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	f77f ae36 	ble.w	800e628 <_dtoa_r+0x6d8>
 800e9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9c0:	2001      	movs	r0, #1
 800e9c2:	e656      	b.n	800e672 <_dtoa_r+0x722>
 800e9c4:	f1bb 0f00 	cmp.w	fp, #0
 800e9c8:	f77f aed7 	ble.w	800e77a <_dtoa_r+0x82a>
 800e9cc:	463e      	mov	r6, r7
 800e9ce:	9801      	ldr	r0, [sp, #4]
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	f7ff fa32 	bl	800de3a <quorem>
 800e9d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e9da:	f806 ab01 	strb.w	sl, [r6], #1
 800e9de:	1bf2      	subs	r2, r6, r7
 800e9e0:	4593      	cmp	fp, r2
 800e9e2:	ddb4      	ble.n	800e94e <_dtoa_r+0x9fe>
 800e9e4:	9901      	ldr	r1, [sp, #4]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	220a      	movs	r2, #10
 800e9ea:	4648      	mov	r0, r9
 800e9ec:	f000 f968 	bl	800ecc0 <__multadd>
 800e9f0:	9001      	str	r0, [sp, #4]
 800e9f2:	e7ec      	b.n	800e9ce <_dtoa_r+0xa7e>
 800e9f4:	08010740 	.word	0x08010740
 800e9f8:	080106c4 	.word	0x080106c4

0800e9fc <_free_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	4605      	mov	r5, r0
 800ea00:	2900      	cmp	r1, #0
 800ea02:	d041      	beq.n	800ea88 <_free_r+0x8c>
 800ea04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea08:	1f0c      	subs	r4, r1, #4
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bfb8      	it	lt
 800ea0e:	18e4      	addlt	r4, r4, r3
 800ea10:	f000 f8e8 	bl	800ebe4 <__malloc_lock>
 800ea14:	4a1d      	ldr	r2, [pc, #116]	@ (800ea8c <_free_r+0x90>)
 800ea16:	6813      	ldr	r3, [r2, #0]
 800ea18:	b933      	cbnz	r3, 800ea28 <_free_r+0x2c>
 800ea1a:	6063      	str	r3, [r4, #4]
 800ea1c:	6014      	str	r4, [r2, #0]
 800ea1e:	4628      	mov	r0, r5
 800ea20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea24:	f000 b8e4 	b.w	800ebf0 <__malloc_unlock>
 800ea28:	42a3      	cmp	r3, r4
 800ea2a:	d908      	bls.n	800ea3e <_free_r+0x42>
 800ea2c:	6820      	ldr	r0, [r4, #0]
 800ea2e:	1821      	adds	r1, r4, r0
 800ea30:	428b      	cmp	r3, r1
 800ea32:	bf01      	itttt	eq
 800ea34:	6819      	ldreq	r1, [r3, #0]
 800ea36:	685b      	ldreq	r3, [r3, #4]
 800ea38:	1809      	addeq	r1, r1, r0
 800ea3a:	6021      	streq	r1, [r4, #0]
 800ea3c:	e7ed      	b.n	800ea1a <_free_r+0x1e>
 800ea3e:	461a      	mov	r2, r3
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	b10b      	cbz	r3, 800ea48 <_free_r+0x4c>
 800ea44:	42a3      	cmp	r3, r4
 800ea46:	d9fa      	bls.n	800ea3e <_free_r+0x42>
 800ea48:	6811      	ldr	r1, [r2, #0]
 800ea4a:	1850      	adds	r0, r2, r1
 800ea4c:	42a0      	cmp	r0, r4
 800ea4e:	d10b      	bne.n	800ea68 <_free_r+0x6c>
 800ea50:	6820      	ldr	r0, [r4, #0]
 800ea52:	4401      	add	r1, r0
 800ea54:	1850      	adds	r0, r2, r1
 800ea56:	4283      	cmp	r3, r0
 800ea58:	6011      	str	r1, [r2, #0]
 800ea5a:	d1e0      	bne.n	800ea1e <_free_r+0x22>
 800ea5c:	6818      	ldr	r0, [r3, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	6053      	str	r3, [r2, #4]
 800ea62:	4408      	add	r0, r1
 800ea64:	6010      	str	r0, [r2, #0]
 800ea66:	e7da      	b.n	800ea1e <_free_r+0x22>
 800ea68:	d902      	bls.n	800ea70 <_free_r+0x74>
 800ea6a:	230c      	movs	r3, #12
 800ea6c:	602b      	str	r3, [r5, #0]
 800ea6e:	e7d6      	b.n	800ea1e <_free_r+0x22>
 800ea70:	6820      	ldr	r0, [r4, #0]
 800ea72:	1821      	adds	r1, r4, r0
 800ea74:	428b      	cmp	r3, r1
 800ea76:	bf04      	itt	eq
 800ea78:	6819      	ldreq	r1, [r3, #0]
 800ea7a:	685b      	ldreq	r3, [r3, #4]
 800ea7c:	6063      	str	r3, [r4, #4]
 800ea7e:	bf04      	itt	eq
 800ea80:	1809      	addeq	r1, r1, r0
 800ea82:	6021      	streq	r1, [r4, #0]
 800ea84:	6054      	str	r4, [r2, #4]
 800ea86:	e7ca      	b.n	800ea1e <_free_r+0x22>
 800ea88:	bd38      	pop	{r3, r4, r5, pc}
 800ea8a:	bf00      	nop
 800ea8c:	24003fa4 	.word	0x24003fa4

0800ea90 <malloc>:
 800ea90:	4b02      	ldr	r3, [pc, #8]	@ (800ea9c <malloc+0xc>)
 800ea92:	4601      	mov	r1, r0
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	f000 b825 	b.w	800eae4 <_malloc_r>
 800ea9a:	bf00      	nop
 800ea9c:	2400002c 	.word	0x2400002c

0800eaa0 <sbrk_aligned>:
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	4e0f      	ldr	r6, [pc, #60]	@ (800eae0 <sbrk_aligned+0x40>)
 800eaa4:	460c      	mov	r4, r1
 800eaa6:	6831      	ldr	r1, [r6, #0]
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	b911      	cbnz	r1, 800eab2 <sbrk_aligned+0x12>
 800eaac:	f000 fcd4 	bl	800f458 <_sbrk_r>
 800eab0:	6030      	str	r0, [r6, #0]
 800eab2:	4621      	mov	r1, r4
 800eab4:	4628      	mov	r0, r5
 800eab6:	f000 fccf 	bl	800f458 <_sbrk_r>
 800eaba:	1c43      	adds	r3, r0, #1
 800eabc:	d103      	bne.n	800eac6 <sbrk_aligned+0x26>
 800eabe:	f04f 34ff 	mov.w	r4, #4294967295
 800eac2:	4620      	mov	r0, r4
 800eac4:	bd70      	pop	{r4, r5, r6, pc}
 800eac6:	1cc4      	adds	r4, r0, #3
 800eac8:	f024 0403 	bic.w	r4, r4, #3
 800eacc:	42a0      	cmp	r0, r4
 800eace:	d0f8      	beq.n	800eac2 <sbrk_aligned+0x22>
 800ead0:	1a21      	subs	r1, r4, r0
 800ead2:	4628      	mov	r0, r5
 800ead4:	f000 fcc0 	bl	800f458 <_sbrk_r>
 800ead8:	3001      	adds	r0, #1
 800eada:	d1f2      	bne.n	800eac2 <sbrk_aligned+0x22>
 800eadc:	e7ef      	b.n	800eabe <sbrk_aligned+0x1e>
 800eade:	bf00      	nop
 800eae0:	24003fa0 	.word	0x24003fa0

0800eae4 <_malloc_r>:
 800eae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae8:	1ccd      	adds	r5, r1, #3
 800eaea:	f025 0503 	bic.w	r5, r5, #3
 800eaee:	3508      	adds	r5, #8
 800eaf0:	2d0c      	cmp	r5, #12
 800eaf2:	bf38      	it	cc
 800eaf4:	250c      	movcc	r5, #12
 800eaf6:	2d00      	cmp	r5, #0
 800eaf8:	4606      	mov	r6, r0
 800eafa:	db01      	blt.n	800eb00 <_malloc_r+0x1c>
 800eafc:	42a9      	cmp	r1, r5
 800eafe:	d904      	bls.n	800eb0a <_malloc_r+0x26>
 800eb00:	230c      	movs	r3, #12
 800eb02:	6033      	str	r3, [r6, #0]
 800eb04:	2000      	movs	r0, #0
 800eb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebe0 <_malloc_r+0xfc>
 800eb0e:	f000 f869 	bl	800ebe4 <__malloc_lock>
 800eb12:	f8d8 3000 	ldr.w	r3, [r8]
 800eb16:	461c      	mov	r4, r3
 800eb18:	bb44      	cbnz	r4, 800eb6c <_malloc_r+0x88>
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f7ff ffbf 	bl	800eaa0 <sbrk_aligned>
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	4604      	mov	r4, r0
 800eb26:	d158      	bne.n	800ebda <_malloc_r+0xf6>
 800eb28:	f8d8 4000 	ldr.w	r4, [r8]
 800eb2c:	4627      	mov	r7, r4
 800eb2e:	2f00      	cmp	r7, #0
 800eb30:	d143      	bne.n	800ebba <_malloc_r+0xd6>
 800eb32:	2c00      	cmp	r4, #0
 800eb34:	d04b      	beq.n	800ebce <_malloc_r+0xea>
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	4639      	mov	r1, r7
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	eb04 0903 	add.w	r9, r4, r3
 800eb40:	f000 fc8a 	bl	800f458 <_sbrk_r>
 800eb44:	4581      	cmp	r9, r0
 800eb46:	d142      	bne.n	800ebce <_malloc_r+0xea>
 800eb48:	6821      	ldr	r1, [r4, #0]
 800eb4a:	1a6d      	subs	r5, r5, r1
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4630      	mov	r0, r6
 800eb50:	f7ff ffa6 	bl	800eaa0 <sbrk_aligned>
 800eb54:	3001      	adds	r0, #1
 800eb56:	d03a      	beq.n	800ebce <_malloc_r+0xea>
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	442b      	add	r3, r5
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	bb62      	cbnz	r2, 800ebc0 <_malloc_r+0xdc>
 800eb66:	f8c8 7000 	str.w	r7, [r8]
 800eb6a:	e00f      	b.n	800eb8c <_malloc_r+0xa8>
 800eb6c:	6822      	ldr	r2, [r4, #0]
 800eb6e:	1b52      	subs	r2, r2, r5
 800eb70:	d420      	bmi.n	800ebb4 <_malloc_r+0xd0>
 800eb72:	2a0b      	cmp	r2, #11
 800eb74:	d917      	bls.n	800eba6 <_malloc_r+0xc2>
 800eb76:	1961      	adds	r1, r4, r5
 800eb78:	42a3      	cmp	r3, r4
 800eb7a:	6025      	str	r5, [r4, #0]
 800eb7c:	bf18      	it	ne
 800eb7e:	6059      	strne	r1, [r3, #4]
 800eb80:	6863      	ldr	r3, [r4, #4]
 800eb82:	bf08      	it	eq
 800eb84:	f8c8 1000 	streq.w	r1, [r8]
 800eb88:	5162      	str	r2, [r4, r5]
 800eb8a:	604b      	str	r3, [r1, #4]
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f000 f82f 	bl	800ebf0 <__malloc_unlock>
 800eb92:	f104 000b 	add.w	r0, r4, #11
 800eb96:	1d23      	adds	r3, r4, #4
 800eb98:	f020 0007 	bic.w	r0, r0, #7
 800eb9c:	1ac2      	subs	r2, r0, r3
 800eb9e:	bf1c      	itt	ne
 800eba0:	1a1b      	subne	r3, r3, r0
 800eba2:	50a3      	strne	r3, [r4, r2]
 800eba4:	e7af      	b.n	800eb06 <_malloc_r+0x22>
 800eba6:	6862      	ldr	r2, [r4, #4]
 800eba8:	42a3      	cmp	r3, r4
 800ebaa:	bf0c      	ite	eq
 800ebac:	f8c8 2000 	streq.w	r2, [r8]
 800ebb0:	605a      	strne	r2, [r3, #4]
 800ebb2:	e7eb      	b.n	800eb8c <_malloc_r+0xa8>
 800ebb4:	4623      	mov	r3, r4
 800ebb6:	6864      	ldr	r4, [r4, #4]
 800ebb8:	e7ae      	b.n	800eb18 <_malloc_r+0x34>
 800ebba:	463c      	mov	r4, r7
 800ebbc:	687f      	ldr	r7, [r7, #4]
 800ebbe:	e7b6      	b.n	800eb2e <_malloc_r+0x4a>
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	d1fb      	bne.n	800ebc0 <_malloc_r+0xdc>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	6053      	str	r3, [r2, #4]
 800ebcc:	e7de      	b.n	800eb8c <_malloc_r+0xa8>
 800ebce:	230c      	movs	r3, #12
 800ebd0:	6033      	str	r3, [r6, #0]
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f000 f80c 	bl	800ebf0 <__malloc_unlock>
 800ebd8:	e794      	b.n	800eb04 <_malloc_r+0x20>
 800ebda:	6005      	str	r5, [r0, #0]
 800ebdc:	e7d6      	b.n	800eb8c <_malloc_r+0xa8>
 800ebde:	bf00      	nop
 800ebe0:	24003fa4 	.word	0x24003fa4

0800ebe4 <__malloc_lock>:
 800ebe4:	4801      	ldr	r0, [pc, #4]	@ (800ebec <__malloc_lock+0x8>)
 800ebe6:	f7ff b926 	b.w	800de36 <__retarget_lock_acquire_recursive>
 800ebea:	bf00      	nop
 800ebec:	24003f9c 	.word	0x24003f9c

0800ebf0 <__malloc_unlock>:
 800ebf0:	4801      	ldr	r0, [pc, #4]	@ (800ebf8 <__malloc_unlock+0x8>)
 800ebf2:	f7ff b921 	b.w	800de38 <__retarget_lock_release_recursive>
 800ebf6:	bf00      	nop
 800ebf8:	24003f9c 	.word	0x24003f9c

0800ebfc <_Balloc>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	69c6      	ldr	r6, [r0, #28]
 800ec00:	4604      	mov	r4, r0
 800ec02:	460d      	mov	r5, r1
 800ec04:	b976      	cbnz	r6, 800ec24 <_Balloc+0x28>
 800ec06:	2010      	movs	r0, #16
 800ec08:	f7ff ff42 	bl	800ea90 <malloc>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	61e0      	str	r0, [r4, #28]
 800ec10:	b920      	cbnz	r0, 800ec1c <_Balloc+0x20>
 800ec12:	4b18      	ldr	r3, [pc, #96]	@ (800ec74 <_Balloc+0x78>)
 800ec14:	4818      	ldr	r0, [pc, #96]	@ (800ec78 <_Balloc+0x7c>)
 800ec16:	216b      	movs	r1, #107	@ 0x6b
 800ec18:	f000 fc3c 	bl	800f494 <__assert_func>
 800ec1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec20:	6006      	str	r6, [r0, #0]
 800ec22:	60c6      	str	r6, [r0, #12]
 800ec24:	69e6      	ldr	r6, [r4, #28]
 800ec26:	68f3      	ldr	r3, [r6, #12]
 800ec28:	b183      	cbz	r3, 800ec4c <_Balloc+0x50>
 800ec2a:	69e3      	ldr	r3, [r4, #28]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec32:	b9b8      	cbnz	r0, 800ec64 <_Balloc+0x68>
 800ec34:	2101      	movs	r1, #1
 800ec36:	fa01 f605 	lsl.w	r6, r1, r5
 800ec3a:	1d72      	adds	r2, r6, #5
 800ec3c:	0092      	lsls	r2, r2, #2
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f000 fc46 	bl	800f4d0 <_calloc_r>
 800ec44:	b160      	cbz	r0, 800ec60 <_Balloc+0x64>
 800ec46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec4a:	e00e      	b.n	800ec6a <_Balloc+0x6e>
 800ec4c:	2221      	movs	r2, #33	@ 0x21
 800ec4e:	2104      	movs	r1, #4
 800ec50:	4620      	mov	r0, r4
 800ec52:	f000 fc3d 	bl	800f4d0 <_calloc_r>
 800ec56:	69e3      	ldr	r3, [r4, #28]
 800ec58:	60f0      	str	r0, [r6, #12]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1e4      	bne.n	800ec2a <_Balloc+0x2e>
 800ec60:	2000      	movs	r0, #0
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	6802      	ldr	r2, [r0, #0]
 800ec66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec70:	e7f7      	b.n	800ec62 <_Balloc+0x66>
 800ec72:	bf00      	nop
 800ec74:	080106d1 	.word	0x080106d1
 800ec78:	08010751 	.word	0x08010751

0800ec7c <_Bfree>:
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	69c6      	ldr	r6, [r0, #28]
 800ec80:	4605      	mov	r5, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	b976      	cbnz	r6, 800eca4 <_Bfree+0x28>
 800ec86:	2010      	movs	r0, #16
 800ec88:	f7ff ff02 	bl	800ea90 <malloc>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	61e8      	str	r0, [r5, #28]
 800ec90:	b920      	cbnz	r0, 800ec9c <_Bfree+0x20>
 800ec92:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <_Bfree+0x3c>)
 800ec94:	4809      	ldr	r0, [pc, #36]	@ (800ecbc <_Bfree+0x40>)
 800ec96:	218f      	movs	r1, #143	@ 0x8f
 800ec98:	f000 fbfc 	bl	800f494 <__assert_func>
 800ec9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eca0:	6006      	str	r6, [r0, #0]
 800eca2:	60c6      	str	r6, [r0, #12]
 800eca4:	b13c      	cbz	r4, 800ecb6 <_Bfree+0x3a>
 800eca6:	69eb      	ldr	r3, [r5, #28]
 800eca8:	6862      	ldr	r2, [r4, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecb0:	6021      	str	r1, [r4, #0]
 800ecb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	080106d1 	.word	0x080106d1
 800ecbc:	08010751 	.word	0x08010751

0800ecc0 <__multadd>:
 800ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc4:	690d      	ldr	r5, [r1, #16]
 800ecc6:	4607      	mov	r7, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	461e      	mov	r6, r3
 800eccc:	f101 0c14 	add.w	ip, r1, #20
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f8dc 3000 	ldr.w	r3, [ip]
 800ecd6:	b299      	uxth	r1, r3
 800ecd8:	fb02 6101 	mla	r1, r2, r1, r6
 800ecdc:	0c1e      	lsrs	r6, r3, #16
 800ecde:	0c0b      	lsrs	r3, r1, #16
 800ece0:	fb02 3306 	mla	r3, r2, r6, r3
 800ece4:	b289      	uxth	r1, r1
 800ece6:	3001      	adds	r0, #1
 800ece8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecec:	4285      	cmp	r5, r0
 800ecee:	f84c 1b04 	str.w	r1, [ip], #4
 800ecf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecf6:	dcec      	bgt.n	800ecd2 <__multadd+0x12>
 800ecf8:	b30e      	cbz	r6, 800ed3e <__multadd+0x7e>
 800ecfa:	68a3      	ldr	r3, [r4, #8]
 800ecfc:	42ab      	cmp	r3, r5
 800ecfe:	dc19      	bgt.n	800ed34 <__multadd+0x74>
 800ed00:	6861      	ldr	r1, [r4, #4]
 800ed02:	4638      	mov	r0, r7
 800ed04:	3101      	adds	r1, #1
 800ed06:	f7ff ff79 	bl	800ebfc <_Balloc>
 800ed0a:	4680      	mov	r8, r0
 800ed0c:	b928      	cbnz	r0, 800ed1a <__multadd+0x5a>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	4b0c      	ldr	r3, [pc, #48]	@ (800ed44 <__multadd+0x84>)
 800ed12:	480d      	ldr	r0, [pc, #52]	@ (800ed48 <__multadd+0x88>)
 800ed14:	21ba      	movs	r1, #186	@ 0xba
 800ed16:	f000 fbbd 	bl	800f494 <__assert_func>
 800ed1a:	6922      	ldr	r2, [r4, #16]
 800ed1c:	3202      	adds	r2, #2
 800ed1e:	f104 010c 	add.w	r1, r4, #12
 800ed22:	0092      	lsls	r2, r2, #2
 800ed24:	300c      	adds	r0, #12
 800ed26:	f000 fba7 	bl	800f478 <memcpy>
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7ff ffa5 	bl	800ec7c <_Bfree>
 800ed32:	4644      	mov	r4, r8
 800ed34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed38:	3501      	adds	r5, #1
 800ed3a:	615e      	str	r6, [r3, #20]
 800ed3c:	6125      	str	r5, [r4, #16]
 800ed3e:	4620      	mov	r0, r4
 800ed40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed44:	08010740 	.word	0x08010740
 800ed48:	08010751 	.word	0x08010751

0800ed4c <__hi0bits>:
 800ed4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ed50:	4603      	mov	r3, r0
 800ed52:	bf36      	itet	cc
 800ed54:	0403      	lslcc	r3, r0, #16
 800ed56:	2000      	movcs	r0, #0
 800ed58:	2010      	movcc	r0, #16
 800ed5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed5e:	bf3c      	itt	cc
 800ed60:	021b      	lslcc	r3, r3, #8
 800ed62:	3008      	addcc	r0, #8
 800ed64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed68:	bf3c      	itt	cc
 800ed6a:	011b      	lslcc	r3, r3, #4
 800ed6c:	3004      	addcc	r0, #4
 800ed6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed72:	bf3c      	itt	cc
 800ed74:	009b      	lslcc	r3, r3, #2
 800ed76:	3002      	addcc	r0, #2
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	db05      	blt.n	800ed88 <__hi0bits+0x3c>
 800ed7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed80:	f100 0001 	add.w	r0, r0, #1
 800ed84:	bf08      	it	eq
 800ed86:	2020      	moveq	r0, #32
 800ed88:	4770      	bx	lr

0800ed8a <__lo0bits>:
 800ed8a:	6803      	ldr	r3, [r0, #0]
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	f013 0007 	ands.w	r0, r3, #7
 800ed92:	d00b      	beq.n	800edac <__lo0bits+0x22>
 800ed94:	07d9      	lsls	r1, r3, #31
 800ed96:	d421      	bmi.n	800eddc <__lo0bits+0x52>
 800ed98:	0798      	lsls	r0, r3, #30
 800ed9a:	bf49      	itett	mi
 800ed9c:	085b      	lsrmi	r3, r3, #1
 800ed9e:	089b      	lsrpl	r3, r3, #2
 800eda0:	2001      	movmi	r0, #1
 800eda2:	6013      	strmi	r3, [r2, #0]
 800eda4:	bf5c      	itt	pl
 800eda6:	6013      	strpl	r3, [r2, #0]
 800eda8:	2002      	movpl	r0, #2
 800edaa:	4770      	bx	lr
 800edac:	b299      	uxth	r1, r3
 800edae:	b909      	cbnz	r1, 800edb4 <__lo0bits+0x2a>
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	2010      	movs	r0, #16
 800edb4:	b2d9      	uxtb	r1, r3
 800edb6:	b909      	cbnz	r1, 800edbc <__lo0bits+0x32>
 800edb8:	3008      	adds	r0, #8
 800edba:	0a1b      	lsrs	r3, r3, #8
 800edbc:	0719      	lsls	r1, r3, #28
 800edbe:	bf04      	itt	eq
 800edc0:	091b      	lsreq	r3, r3, #4
 800edc2:	3004      	addeq	r0, #4
 800edc4:	0799      	lsls	r1, r3, #30
 800edc6:	bf04      	itt	eq
 800edc8:	089b      	lsreq	r3, r3, #2
 800edca:	3002      	addeq	r0, #2
 800edcc:	07d9      	lsls	r1, r3, #31
 800edce:	d403      	bmi.n	800edd8 <__lo0bits+0x4e>
 800edd0:	085b      	lsrs	r3, r3, #1
 800edd2:	f100 0001 	add.w	r0, r0, #1
 800edd6:	d003      	beq.n	800ede0 <__lo0bits+0x56>
 800edd8:	6013      	str	r3, [r2, #0]
 800edda:	4770      	bx	lr
 800eddc:	2000      	movs	r0, #0
 800edde:	4770      	bx	lr
 800ede0:	2020      	movs	r0, #32
 800ede2:	4770      	bx	lr

0800ede4 <__i2b>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	460c      	mov	r4, r1
 800ede8:	2101      	movs	r1, #1
 800edea:	f7ff ff07 	bl	800ebfc <_Balloc>
 800edee:	4602      	mov	r2, r0
 800edf0:	b928      	cbnz	r0, 800edfe <__i2b+0x1a>
 800edf2:	4b05      	ldr	r3, [pc, #20]	@ (800ee08 <__i2b+0x24>)
 800edf4:	4805      	ldr	r0, [pc, #20]	@ (800ee0c <__i2b+0x28>)
 800edf6:	f240 1145 	movw	r1, #325	@ 0x145
 800edfa:	f000 fb4b 	bl	800f494 <__assert_func>
 800edfe:	2301      	movs	r3, #1
 800ee00:	6144      	str	r4, [r0, #20]
 800ee02:	6103      	str	r3, [r0, #16]
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	bf00      	nop
 800ee08:	08010740 	.word	0x08010740
 800ee0c:	08010751 	.word	0x08010751

0800ee10 <__multiply>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	4614      	mov	r4, r2
 800ee16:	690a      	ldr	r2, [r1, #16]
 800ee18:	6923      	ldr	r3, [r4, #16]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	bfa8      	it	ge
 800ee1e:	4623      	movge	r3, r4
 800ee20:	460f      	mov	r7, r1
 800ee22:	bfa4      	itt	ge
 800ee24:	460c      	movge	r4, r1
 800ee26:	461f      	movge	r7, r3
 800ee28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ee2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ee30:	68a3      	ldr	r3, [r4, #8]
 800ee32:	6861      	ldr	r1, [r4, #4]
 800ee34:	eb0a 0609 	add.w	r6, sl, r9
 800ee38:	42b3      	cmp	r3, r6
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	bfb8      	it	lt
 800ee3e:	3101      	addlt	r1, #1
 800ee40:	f7ff fedc 	bl	800ebfc <_Balloc>
 800ee44:	b930      	cbnz	r0, 800ee54 <__multiply+0x44>
 800ee46:	4602      	mov	r2, r0
 800ee48:	4b44      	ldr	r3, [pc, #272]	@ (800ef5c <__multiply+0x14c>)
 800ee4a:	4845      	ldr	r0, [pc, #276]	@ (800ef60 <__multiply+0x150>)
 800ee4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ee50:	f000 fb20 	bl	800f494 <__assert_func>
 800ee54:	f100 0514 	add.w	r5, r0, #20
 800ee58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee5c:	462b      	mov	r3, r5
 800ee5e:	2200      	movs	r2, #0
 800ee60:	4543      	cmp	r3, r8
 800ee62:	d321      	bcc.n	800eea8 <__multiply+0x98>
 800ee64:	f107 0114 	add.w	r1, r7, #20
 800ee68:	f104 0214 	add.w	r2, r4, #20
 800ee6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ee70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ee74:	9302      	str	r3, [sp, #8]
 800ee76:	1b13      	subs	r3, r2, r4
 800ee78:	3b15      	subs	r3, #21
 800ee7a:	f023 0303 	bic.w	r3, r3, #3
 800ee7e:	3304      	adds	r3, #4
 800ee80:	f104 0715 	add.w	r7, r4, #21
 800ee84:	42ba      	cmp	r2, r7
 800ee86:	bf38      	it	cc
 800ee88:	2304      	movcc	r3, #4
 800ee8a:	9301      	str	r3, [sp, #4]
 800ee8c:	9b02      	ldr	r3, [sp, #8]
 800ee8e:	9103      	str	r1, [sp, #12]
 800ee90:	428b      	cmp	r3, r1
 800ee92:	d80c      	bhi.n	800eeae <__multiply+0x9e>
 800ee94:	2e00      	cmp	r6, #0
 800ee96:	dd03      	ble.n	800eea0 <__multiply+0x90>
 800ee98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d05b      	beq.n	800ef58 <__multiply+0x148>
 800eea0:	6106      	str	r6, [r0, #16]
 800eea2:	b005      	add	sp, #20
 800eea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea8:	f843 2b04 	str.w	r2, [r3], #4
 800eeac:	e7d8      	b.n	800ee60 <__multiply+0x50>
 800eeae:	f8b1 a000 	ldrh.w	sl, [r1]
 800eeb2:	f1ba 0f00 	cmp.w	sl, #0
 800eeb6:	d024      	beq.n	800ef02 <__multiply+0xf2>
 800eeb8:	f104 0e14 	add.w	lr, r4, #20
 800eebc:	46a9      	mov	r9, r5
 800eebe:	f04f 0c00 	mov.w	ip, #0
 800eec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eec6:	f8d9 3000 	ldr.w	r3, [r9]
 800eeca:	fa1f fb87 	uxth.w	fp, r7
 800eece:	b29b      	uxth	r3, r3
 800eed0:	fb0a 330b 	mla	r3, sl, fp, r3
 800eed4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eed8:	f8d9 7000 	ldr.w	r7, [r9]
 800eedc:	4463      	add	r3, ip
 800eede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eee2:	fb0a c70b 	mla	r7, sl, fp, ip
 800eee6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eef0:	4572      	cmp	r2, lr
 800eef2:	f849 3b04 	str.w	r3, [r9], #4
 800eef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eefa:	d8e2      	bhi.n	800eec2 <__multiply+0xb2>
 800eefc:	9b01      	ldr	r3, [sp, #4]
 800eefe:	f845 c003 	str.w	ip, [r5, r3]
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef08:	3104      	adds	r1, #4
 800ef0a:	f1b9 0f00 	cmp.w	r9, #0
 800ef0e:	d021      	beq.n	800ef54 <__multiply+0x144>
 800ef10:	682b      	ldr	r3, [r5, #0]
 800ef12:	f104 0c14 	add.w	ip, r4, #20
 800ef16:	46ae      	mov	lr, r5
 800ef18:	f04f 0a00 	mov.w	sl, #0
 800ef1c:	f8bc b000 	ldrh.w	fp, [ip]
 800ef20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ef24:	fb09 770b 	mla	r7, r9, fp, r7
 800ef28:	4457      	add	r7, sl
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef30:	f84e 3b04 	str.w	r3, [lr], #4
 800ef34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef3c:	f8be 3000 	ldrh.w	r3, [lr]
 800ef40:	fb09 330a 	mla	r3, r9, sl, r3
 800ef44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ef48:	4562      	cmp	r2, ip
 800ef4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef4e:	d8e5      	bhi.n	800ef1c <__multiply+0x10c>
 800ef50:	9f01      	ldr	r7, [sp, #4]
 800ef52:	51eb      	str	r3, [r5, r7]
 800ef54:	3504      	adds	r5, #4
 800ef56:	e799      	b.n	800ee8c <__multiply+0x7c>
 800ef58:	3e01      	subs	r6, #1
 800ef5a:	e79b      	b.n	800ee94 <__multiply+0x84>
 800ef5c:	08010740 	.word	0x08010740
 800ef60:	08010751 	.word	0x08010751

0800ef64 <__pow5mult>:
 800ef64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef68:	4615      	mov	r5, r2
 800ef6a:	f012 0203 	ands.w	r2, r2, #3
 800ef6e:	4607      	mov	r7, r0
 800ef70:	460e      	mov	r6, r1
 800ef72:	d007      	beq.n	800ef84 <__pow5mult+0x20>
 800ef74:	4c25      	ldr	r4, [pc, #148]	@ (800f00c <__pow5mult+0xa8>)
 800ef76:	3a01      	subs	r2, #1
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef7e:	f7ff fe9f 	bl	800ecc0 <__multadd>
 800ef82:	4606      	mov	r6, r0
 800ef84:	10ad      	asrs	r5, r5, #2
 800ef86:	d03d      	beq.n	800f004 <__pow5mult+0xa0>
 800ef88:	69fc      	ldr	r4, [r7, #28]
 800ef8a:	b97c      	cbnz	r4, 800efac <__pow5mult+0x48>
 800ef8c:	2010      	movs	r0, #16
 800ef8e:	f7ff fd7f 	bl	800ea90 <malloc>
 800ef92:	4602      	mov	r2, r0
 800ef94:	61f8      	str	r0, [r7, #28]
 800ef96:	b928      	cbnz	r0, 800efa4 <__pow5mult+0x40>
 800ef98:	4b1d      	ldr	r3, [pc, #116]	@ (800f010 <__pow5mult+0xac>)
 800ef9a:	481e      	ldr	r0, [pc, #120]	@ (800f014 <__pow5mult+0xb0>)
 800ef9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800efa0:	f000 fa78 	bl	800f494 <__assert_func>
 800efa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800efa8:	6004      	str	r4, [r0, #0]
 800efaa:	60c4      	str	r4, [r0, #12]
 800efac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800efb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efb4:	b94c      	cbnz	r4, 800efca <__pow5mult+0x66>
 800efb6:	f240 2171 	movw	r1, #625	@ 0x271
 800efba:	4638      	mov	r0, r7
 800efbc:	f7ff ff12 	bl	800ede4 <__i2b>
 800efc0:	2300      	movs	r3, #0
 800efc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800efc6:	4604      	mov	r4, r0
 800efc8:	6003      	str	r3, [r0, #0]
 800efca:	f04f 0900 	mov.w	r9, #0
 800efce:	07eb      	lsls	r3, r5, #31
 800efd0:	d50a      	bpl.n	800efe8 <__pow5mult+0x84>
 800efd2:	4631      	mov	r1, r6
 800efd4:	4622      	mov	r2, r4
 800efd6:	4638      	mov	r0, r7
 800efd8:	f7ff ff1a 	bl	800ee10 <__multiply>
 800efdc:	4631      	mov	r1, r6
 800efde:	4680      	mov	r8, r0
 800efe0:	4638      	mov	r0, r7
 800efe2:	f7ff fe4b 	bl	800ec7c <_Bfree>
 800efe6:	4646      	mov	r6, r8
 800efe8:	106d      	asrs	r5, r5, #1
 800efea:	d00b      	beq.n	800f004 <__pow5mult+0xa0>
 800efec:	6820      	ldr	r0, [r4, #0]
 800efee:	b938      	cbnz	r0, 800f000 <__pow5mult+0x9c>
 800eff0:	4622      	mov	r2, r4
 800eff2:	4621      	mov	r1, r4
 800eff4:	4638      	mov	r0, r7
 800eff6:	f7ff ff0b 	bl	800ee10 <__multiply>
 800effa:	6020      	str	r0, [r4, #0]
 800effc:	f8c0 9000 	str.w	r9, [r0]
 800f000:	4604      	mov	r4, r0
 800f002:	e7e4      	b.n	800efce <__pow5mult+0x6a>
 800f004:	4630      	mov	r0, r6
 800f006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f00a:	bf00      	nop
 800f00c:	080107ac 	.word	0x080107ac
 800f010:	080106d1 	.word	0x080106d1
 800f014:	08010751 	.word	0x08010751

0800f018 <__lshift>:
 800f018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f01c:	460c      	mov	r4, r1
 800f01e:	6849      	ldr	r1, [r1, #4]
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f026:	68a3      	ldr	r3, [r4, #8]
 800f028:	4607      	mov	r7, r0
 800f02a:	4691      	mov	r9, r2
 800f02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f030:	f108 0601 	add.w	r6, r8, #1
 800f034:	42b3      	cmp	r3, r6
 800f036:	db0b      	blt.n	800f050 <__lshift+0x38>
 800f038:	4638      	mov	r0, r7
 800f03a:	f7ff fddf 	bl	800ebfc <_Balloc>
 800f03e:	4605      	mov	r5, r0
 800f040:	b948      	cbnz	r0, 800f056 <__lshift+0x3e>
 800f042:	4602      	mov	r2, r0
 800f044:	4b28      	ldr	r3, [pc, #160]	@ (800f0e8 <__lshift+0xd0>)
 800f046:	4829      	ldr	r0, [pc, #164]	@ (800f0ec <__lshift+0xd4>)
 800f048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f04c:	f000 fa22 	bl	800f494 <__assert_func>
 800f050:	3101      	adds	r1, #1
 800f052:	005b      	lsls	r3, r3, #1
 800f054:	e7ee      	b.n	800f034 <__lshift+0x1c>
 800f056:	2300      	movs	r3, #0
 800f058:	f100 0114 	add.w	r1, r0, #20
 800f05c:	f100 0210 	add.w	r2, r0, #16
 800f060:	4618      	mov	r0, r3
 800f062:	4553      	cmp	r3, sl
 800f064:	db33      	blt.n	800f0ce <__lshift+0xb6>
 800f066:	6920      	ldr	r0, [r4, #16]
 800f068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f06c:	f104 0314 	add.w	r3, r4, #20
 800f070:	f019 091f 	ands.w	r9, r9, #31
 800f074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f07c:	d02b      	beq.n	800f0d6 <__lshift+0xbe>
 800f07e:	f1c9 0e20 	rsb	lr, r9, #32
 800f082:	468a      	mov	sl, r1
 800f084:	2200      	movs	r2, #0
 800f086:	6818      	ldr	r0, [r3, #0]
 800f088:	fa00 f009 	lsl.w	r0, r0, r9
 800f08c:	4310      	orrs	r0, r2
 800f08e:	f84a 0b04 	str.w	r0, [sl], #4
 800f092:	f853 2b04 	ldr.w	r2, [r3], #4
 800f096:	459c      	cmp	ip, r3
 800f098:	fa22 f20e 	lsr.w	r2, r2, lr
 800f09c:	d8f3      	bhi.n	800f086 <__lshift+0x6e>
 800f09e:	ebac 0304 	sub.w	r3, ip, r4
 800f0a2:	3b15      	subs	r3, #21
 800f0a4:	f023 0303 	bic.w	r3, r3, #3
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	f104 0015 	add.w	r0, r4, #21
 800f0ae:	4584      	cmp	ip, r0
 800f0b0:	bf38      	it	cc
 800f0b2:	2304      	movcc	r3, #4
 800f0b4:	50ca      	str	r2, [r1, r3]
 800f0b6:	b10a      	cbz	r2, 800f0bc <__lshift+0xa4>
 800f0b8:	f108 0602 	add.w	r6, r8, #2
 800f0bc:	3e01      	subs	r6, #1
 800f0be:	4638      	mov	r0, r7
 800f0c0:	612e      	str	r6, [r5, #16]
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	f7ff fdda 	bl	800ec7c <_Bfree>
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	e7c5      	b.n	800f062 <__lshift+0x4a>
 800f0d6:	3904      	subs	r1, #4
 800f0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0e0:	459c      	cmp	ip, r3
 800f0e2:	d8f9      	bhi.n	800f0d8 <__lshift+0xc0>
 800f0e4:	e7ea      	b.n	800f0bc <__lshift+0xa4>
 800f0e6:	bf00      	nop
 800f0e8:	08010740 	.word	0x08010740
 800f0ec:	08010751 	.word	0x08010751

0800f0f0 <__mcmp>:
 800f0f0:	690a      	ldr	r2, [r1, #16]
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	6900      	ldr	r0, [r0, #16]
 800f0f6:	1a80      	subs	r0, r0, r2
 800f0f8:	b530      	push	{r4, r5, lr}
 800f0fa:	d10e      	bne.n	800f11a <__mcmp+0x2a>
 800f0fc:	3314      	adds	r3, #20
 800f0fe:	3114      	adds	r1, #20
 800f100:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f108:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f10c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f110:	4295      	cmp	r5, r2
 800f112:	d003      	beq.n	800f11c <__mcmp+0x2c>
 800f114:	d205      	bcs.n	800f122 <__mcmp+0x32>
 800f116:	f04f 30ff 	mov.w	r0, #4294967295
 800f11a:	bd30      	pop	{r4, r5, pc}
 800f11c:	42a3      	cmp	r3, r4
 800f11e:	d3f3      	bcc.n	800f108 <__mcmp+0x18>
 800f120:	e7fb      	b.n	800f11a <__mcmp+0x2a>
 800f122:	2001      	movs	r0, #1
 800f124:	e7f9      	b.n	800f11a <__mcmp+0x2a>
	...

0800f128 <__mdiff>:
 800f128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f12c:	4689      	mov	r9, r1
 800f12e:	4606      	mov	r6, r0
 800f130:	4611      	mov	r1, r2
 800f132:	4648      	mov	r0, r9
 800f134:	4614      	mov	r4, r2
 800f136:	f7ff ffdb 	bl	800f0f0 <__mcmp>
 800f13a:	1e05      	subs	r5, r0, #0
 800f13c:	d112      	bne.n	800f164 <__mdiff+0x3c>
 800f13e:	4629      	mov	r1, r5
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff fd5b 	bl	800ebfc <_Balloc>
 800f146:	4602      	mov	r2, r0
 800f148:	b928      	cbnz	r0, 800f156 <__mdiff+0x2e>
 800f14a:	4b3f      	ldr	r3, [pc, #252]	@ (800f248 <__mdiff+0x120>)
 800f14c:	f240 2137 	movw	r1, #567	@ 0x237
 800f150:	483e      	ldr	r0, [pc, #248]	@ (800f24c <__mdiff+0x124>)
 800f152:	f000 f99f 	bl	800f494 <__assert_func>
 800f156:	2301      	movs	r3, #1
 800f158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f15c:	4610      	mov	r0, r2
 800f15e:	b003      	add	sp, #12
 800f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f164:	bfbc      	itt	lt
 800f166:	464b      	movlt	r3, r9
 800f168:	46a1      	movlt	r9, r4
 800f16a:	4630      	mov	r0, r6
 800f16c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f170:	bfba      	itte	lt
 800f172:	461c      	movlt	r4, r3
 800f174:	2501      	movlt	r5, #1
 800f176:	2500      	movge	r5, #0
 800f178:	f7ff fd40 	bl	800ebfc <_Balloc>
 800f17c:	4602      	mov	r2, r0
 800f17e:	b918      	cbnz	r0, 800f188 <__mdiff+0x60>
 800f180:	4b31      	ldr	r3, [pc, #196]	@ (800f248 <__mdiff+0x120>)
 800f182:	f240 2145 	movw	r1, #581	@ 0x245
 800f186:	e7e3      	b.n	800f150 <__mdiff+0x28>
 800f188:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f18c:	6926      	ldr	r6, [r4, #16]
 800f18e:	60c5      	str	r5, [r0, #12]
 800f190:	f109 0310 	add.w	r3, r9, #16
 800f194:	f109 0514 	add.w	r5, r9, #20
 800f198:	f104 0e14 	add.w	lr, r4, #20
 800f19c:	f100 0b14 	add.w	fp, r0, #20
 800f1a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f1a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	46d9      	mov	r9, fp
 800f1ac:	f04f 0c00 	mov.w	ip, #0
 800f1b0:	9b01      	ldr	r3, [sp, #4]
 800f1b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f1b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f1ba:	9301      	str	r3, [sp, #4]
 800f1bc:	fa1f f38a 	uxth.w	r3, sl
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	b283      	uxth	r3, r0
 800f1c4:	1acb      	subs	r3, r1, r3
 800f1c6:	0c00      	lsrs	r0, r0, #16
 800f1c8:	4463      	add	r3, ip
 800f1ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f1ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f1d8:	4576      	cmp	r6, lr
 800f1da:	f849 3b04 	str.w	r3, [r9], #4
 800f1de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1e2:	d8e5      	bhi.n	800f1b0 <__mdiff+0x88>
 800f1e4:	1b33      	subs	r3, r6, r4
 800f1e6:	3b15      	subs	r3, #21
 800f1e8:	f023 0303 	bic.w	r3, r3, #3
 800f1ec:	3415      	adds	r4, #21
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	42a6      	cmp	r6, r4
 800f1f2:	bf38      	it	cc
 800f1f4:	2304      	movcc	r3, #4
 800f1f6:	441d      	add	r5, r3
 800f1f8:	445b      	add	r3, fp
 800f1fa:	461e      	mov	r6, r3
 800f1fc:	462c      	mov	r4, r5
 800f1fe:	4544      	cmp	r4, r8
 800f200:	d30e      	bcc.n	800f220 <__mdiff+0xf8>
 800f202:	f108 0103 	add.w	r1, r8, #3
 800f206:	1b49      	subs	r1, r1, r5
 800f208:	f021 0103 	bic.w	r1, r1, #3
 800f20c:	3d03      	subs	r5, #3
 800f20e:	45a8      	cmp	r8, r5
 800f210:	bf38      	it	cc
 800f212:	2100      	movcc	r1, #0
 800f214:	440b      	add	r3, r1
 800f216:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f21a:	b191      	cbz	r1, 800f242 <__mdiff+0x11a>
 800f21c:	6117      	str	r7, [r2, #16]
 800f21e:	e79d      	b.n	800f15c <__mdiff+0x34>
 800f220:	f854 1b04 	ldr.w	r1, [r4], #4
 800f224:	46e6      	mov	lr, ip
 800f226:	0c08      	lsrs	r0, r1, #16
 800f228:	fa1c fc81 	uxtah	ip, ip, r1
 800f22c:	4471      	add	r1, lr
 800f22e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f232:	b289      	uxth	r1, r1
 800f234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f238:	f846 1b04 	str.w	r1, [r6], #4
 800f23c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f240:	e7dd      	b.n	800f1fe <__mdiff+0xd6>
 800f242:	3f01      	subs	r7, #1
 800f244:	e7e7      	b.n	800f216 <__mdiff+0xee>
 800f246:	bf00      	nop
 800f248:	08010740 	.word	0x08010740
 800f24c:	08010751 	.word	0x08010751

0800f250 <__d2b>:
 800f250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f254:	460f      	mov	r7, r1
 800f256:	2101      	movs	r1, #1
 800f258:	ec59 8b10 	vmov	r8, r9, d0
 800f25c:	4616      	mov	r6, r2
 800f25e:	f7ff fccd 	bl	800ebfc <_Balloc>
 800f262:	4604      	mov	r4, r0
 800f264:	b930      	cbnz	r0, 800f274 <__d2b+0x24>
 800f266:	4602      	mov	r2, r0
 800f268:	4b23      	ldr	r3, [pc, #140]	@ (800f2f8 <__d2b+0xa8>)
 800f26a:	4824      	ldr	r0, [pc, #144]	@ (800f2fc <__d2b+0xac>)
 800f26c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f270:	f000 f910 	bl	800f494 <__assert_func>
 800f274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f27c:	b10d      	cbz	r5, 800f282 <__d2b+0x32>
 800f27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f282:	9301      	str	r3, [sp, #4]
 800f284:	f1b8 0300 	subs.w	r3, r8, #0
 800f288:	d023      	beq.n	800f2d2 <__d2b+0x82>
 800f28a:	4668      	mov	r0, sp
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	f7ff fd7c 	bl	800ed8a <__lo0bits>
 800f292:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f296:	b1d0      	cbz	r0, 800f2ce <__d2b+0x7e>
 800f298:	f1c0 0320 	rsb	r3, r0, #32
 800f29c:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a0:	430b      	orrs	r3, r1
 800f2a2:	40c2      	lsrs	r2, r0
 800f2a4:	6163      	str	r3, [r4, #20]
 800f2a6:	9201      	str	r2, [sp, #4]
 800f2a8:	9b01      	ldr	r3, [sp, #4]
 800f2aa:	61a3      	str	r3, [r4, #24]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bf0c      	ite	eq
 800f2b0:	2201      	moveq	r2, #1
 800f2b2:	2202      	movne	r2, #2
 800f2b4:	6122      	str	r2, [r4, #16]
 800f2b6:	b1a5      	cbz	r5, 800f2e2 <__d2b+0x92>
 800f2b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f2bc:	4405      	add	r5, r0
 800f2be:	603d      	str	r5, [r7, #0]
 800f2c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f2c4:	6030      	str	r0, [r6, #0]
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	b003      	add	sp, #12
 800f2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2ce:	6161      	str	r1, [r4, #20]
 800f2d0:	e7ea      	b.n	800f2a8 <__d2b+0x58>
 800f2d2:	a801      	add	r0, sp, #4
 800f2d4:	f7ff fd59 	bl	800ed8a <__lo0bits>
 800f2d8:	9b01      	ldr	r3, [sp, #4]
 800f2da:	6163      	str	r3, [r4, #20]
 800f2dc:	3020      	adds	r0, #32
 800f2de:	2201      	movs	r2, #1
 800f2e0:	e7e8      	b.n	800f2b4 <__d2b+0x64>
 800f2e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f2e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f2ea:	6038      	str	r0, [r7, #0]
 800f2ec:	6918      	ldr	r0, [r3, #16]
 800f2ee:	f7ff fd2d 	bl	800ed4c <__hi0bits>
 800f2f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f2f6:	e7e5      	b.n	800f2c4 <__d2b+0x74>
 800f2f8:	08010740 	.word	0x08010740
 800f2fc:	08010751 	.word	0x08010751

0800f300 <__sflush_r>:
 800f300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f308:	0716      	lsls	r6, r2, #28
 800f30a:	4605      	mov	r5, r0
 800f30c:	460c      	mov	r4, r1
 800f30e:	d454      	bmi.n	800f3ba <__sflush_r+0xba>
 800f310:	684b      	ldr	r3, [r1, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	dc02      	bgt.n	800f31c <__sflush_r+0x1c>
 800f316:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dd48      	ble.n	800f3ae <__sflush_r+0xae>
 800f31c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f31e:	2e00      	cmp	r6, #0
 800f320:	d045      	beq.n	800f3ae <__sflush_r+0xae>
 800f322:	2300      	movs	r3, #0
 800f324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f328:	682f      	ldr	r7, [r5, #0]
 800f32a:	6a21      	ldr	r1, [r4, #32]
 800f32c:	602b      	str	r3, [r5, #0]
 800f32e:	d030      	beq.n	800f392 <__sflush_r+0x92>
 800f330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	0759      	lsls	r1, r3, #29
 800f336:	d505      	bpl.n	800f344 <__sflush_r+0x44>
 800f338:	6863      	ldr	r3, [r4, #4]
 800f33a:	1ad2      	subs	r2, r2, r3
 800f33c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f33e:	b10b      	cbz	r3, 800f344 <__sflush_r+0x44>
 800f340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f342:	1ad2      	subs	r2, r2, r3
 800f344:	2300      	movs	r3, #0
 800f346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f348:	6a21      	ldr	r1, [r4, #32]
 800f34a:	4628      	mov	r0, r5
 800f34c:	47b0      	blx	r6
 800f34e:	1c43      	adds	r3, r0, #1
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	d106      	bne.n	800f362 <__sflush_r+0x62>
 800f354:	6829      	ldr	r1, [r5, #0]
 800f356:	291d      	cmp	r1, #29
 800f358:	d82b      	bhi.n	800f3b2 <__sflush_r+0xb2>
 800f35a:	4a2a      	ldr	r2, [pc, #168]	@ (800f404 <__sflush_r+0x104>)
 800f35c:	410a      	asrs	r2, r1
 800f35e:	07d6      	lsls	r6, r2, #31
 800f360:	d427      	bmi.n	800f3b2 <__sflush_r+0xb2>
 800f362:	2200      	movs	r2, #0
 800f364:	6062      	str	r2, [r4, #4]
 800f366:	04d9      	lsls	r1, r3, #19
 800f368:	6922      	ldr	r2, [r4, #16]
 800f36a:	6022      	str	r2, [r4, #0]
 800f36c:	d504      	bpl.n	800f378 <__sflush_r+0x78>
 800f36e:	1c42      	adds	r2, r0, #1
 800f370:	d101      	bne.n	800f376 <__sflush_r+0x76>
 800f372:	682b      	ldr	r3, [r5, #0]
 800f374:	b903      	cbnz	r3, 800f378 <__sflush_r+0x78>
 800f376:	6560      	str	r0, [r4, #84]	@ 0x54
 800f378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f37a:	602f      	str	r7, [r5, #0]
 800f37c:	b1b9      	cbz	r1, 800f3ae <__sflush_r+0xae>
 800f37e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f382:	4299      	cmp	r1, r3
 800f384:	d002      	beq.n	800f38c <__sflush_r+0x8c>
 800f386:	4628      	mov	r0, r5
 800f388:	f7ff fb38 	bl	800e9fc <_free_r>
 800f38c:	2300      	movs	r3, #0
 800f38e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f390:	e00d      	b.n	800f3ae <__sflush_r+0xae>
 800f392:	2301      	movs	r3, #1
 800f394:	4628      	mov	r0, r5
 800f396:	47b0      	blx	r6
 800f398:	4602      	mov	r2, r0
 800f39a:	1c50      	adds	r0, r2, #1
 800f39c:	d1c9      	bne.n	800f332 <__sflush_r+0x32>
 800f39e:	682b      	ldr	r3, [r5, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d0c6      	beq.n	800f332 <__sflush_r+0x32>
 800f3a4:	2b1d      	cmp	r3, #29
 800f3a6:	d001      	beq.n	800f3ac <__sflush_r+0xac>
 800f3a8:	2b16      	cmp	r3, #22
 800f3aa:	d11e      	bne.n	800f3ea <__sflush_r+0xea>
 800f3ac:	602f      	str	r7, [r5, #0]
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	e022      	b.n	800f3f8 <__sflush_r+0xf8>
 800f3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3b6:	b21b      	sxth	r3, r3
 800f3b8:	e01b      	b.n	800f3f2 <__sflush_r+0xf2>
 800f3ba:	690f      	ldr	r7, [r1, #16]
 800f3bc:	2f00      	cmp	r7, #0
 800f3be:	d0f6      	beq.n	800f3ae <__sflush_r+0xae>
 800f3c0:	0793      	lsls	r3, r2, #30
 800f3c2:	680e      	ldr	r6, [r1, #0]
 800f3c4:	bf08      	it	eq
 800f3c6:	694b      	ldreq	r3, [r1, #20]
 800f3c8:	600f      	str	r7, [r1, #0]
 800f3ca:	bf18      	it	ne
 800f3cc:	2300      	movne	r3, #0
 800f3ce:	eba6 0807 	sub.w	r8, r6, r7
 800f3d2:	608b      	str	r3, [r1, #8]
 800f3d4:	f1b8 0f00 	cmp.w	r8, #0
 800f3d8:	dde9      	ble.n	800f3ae <__sflush_r+0xae>
 800f3da:	6a21      	ldr	r1, [r4, #32]
 800f3dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f3de:	4643      	mov	r3, r8
 800f3e0:	463a      	mov	r2, r7
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b0      	blx	r6
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	dc08      	bgt.n	800f3fc <__sflush_r+0xfc>
 800f3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3f2:	81a3      	strh	r3, [r4, #12]
 800f3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3fc:	4407      	add	r7, r0
 800f3fe:	eba8 0800 	sub.w	r8, r8, r0
 800f402:	e7e7      	b.n	800f3d4 <__sflush_r+0xd4>
 800f404:	dfbffffe 	.word	0xdfbffffe

0800f408 <_fflush_r>:
 800f408:	b538      	push	{r3, r4, r5, lr}
 800f40a:	690b      	ldr	r3, [r1, #16]
 800f40c:	4605      	mov	r5, r0
 800f40e:	460c      	mov	r4, r1
 800f410:	b913      	cbnz	r3, 800f418 <_fflush_r+0x10>
 800f412:	2500      	movs	r5, #0
 800f414:	4628      	mov	r0, r5
 800f416:	bd38      	pop	{r3, r4, r5, pc}
 800f418:	b118      	cbz	r0, 800f422 <_fflush_r+0x1a>
 800f41a:	6a03      	ldr	r3, [r0, #32]
 800f41c:	b90b      	cbnz	r3, 800f422 <_fflush_r+0x1a>
 800f41e:	f7fe fc13 	bl	800dc48 <__sinit>
 800f422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d0f3      	beq.n	800f412 <_fflush_r+0xa>
 800f42a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f42c:	07d0      	lsls	r0, r2, #31
 800f42e:	d404      	bmi.n	800f43a <_fflush_r+0x32>
 800f430:	0599      	lsls	r1, r3, #22
 800f432:	d402      	bmi.n	800f43a <_fflush_r+0x32>
 800f434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f436:	f7fe fcfe 	bl	800de36 <__retarget_lock_acquire_recursive>
 800f43a:	4628      	mov	r0, r5
 800f43c:	4621      	mov	r1, r4
 800f43e:	f7ff ff5f 	bl	800f300 <__sflush_r>
 800f442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f444:	07da      	lsls	r2, r3, #31
 800f446:	4605      	mov	r5, r0
 800f448:	d4e4      	bmi.n	800f414 <_fflush_r+0xc>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	059b      	lsls	r3, r3, #22
 800f44e:	d4e1      	bmi.n	800f414 <_fflush_r+0xc>
 800f450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f452:	f7fe fcf1 	bl	800de38 <__retarget_lock_release_recursive>
 800f456:	e7dd      	b.n	800f414 <_fflush_r+0xc>

0800f458 <_sbrk_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4d06      	ldr	r5, [pc, #24]	@ (800f474 <_sbrk_r+0x1c>)
 800f45c:	2300      	movs	r3, #0
 800f45e:	4604      	mov	r4, r0
 800f460:	4608      	mov	r0, r1
 800f462:	602b      	str	r3, [r5, #0]
 800f464:	f7f4 fa5c 	bl	8003920 <_sbrk>
 800f468:	1c43      	adds	r3, r0, #1
 800f46a:	d102      	bne.n	800f472 <_sbrk_r+0x1a>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	b103      	cbz	r3, 800f472 <_sbrk_r+0x1a>
 800f470:	6023      	str	r3, [r4, #0]
 800f472:	bd38      	pop	{r3, r4, r5, pc}
 800f474:	24003f98 	.word	0x24003f98

0800f478 <memcpy>:
 800f478:	440a      	add	r2, r1
 800f47a:	4291      	cmp	r1, r2
 800f47c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f480:	d100      	bne.n	800f484 <memcpy+0xc>
 800f482:	4770      	bx	lr
 800f484:	b510      	push	{r4, lr}
 800f486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f48a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f48e:	4291      	cmp	r1, r2
 800f490:	d1f9      	bne.n	800f486 <memcpy+0xe>
 800f492:	bd10      	pop	{r4, pc}

0800f494 <__assert_func>:
 800f494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f496:	4614      	mov	r4, r2
 800f498:	461a      	mov	r2, r3
 800f49a:	4b09      	ldr	r3, [pc, #36]	@ (800f4c0 <__assert_func+0x2c>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4605      	mov	r5, r0
 800f4a0:	68d8      	ldr	r0, [r3, #12]
 800f4a2:	b954      	cbnz	r4, 800f4ba <__assert_func+0x26>
 800f4a4:	4b07      	ldr	r3, [pc, #28]	@ (800f4c4 <__assert_func+0x30>)
 800f4a6:	461c      	mov	r4, r3
 800f4a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4ac:	9100      	str	r1, [sp, #0]
 800f4ae:	462b      	mov	r3, r5
 800f4b0:	4905      	ldr	r1, [pc, #20]	@ (800f4c8 <__assert_func+0x34>)
 800f4b2:	f000 f841 	bl	800f538 <fiprintf>
 800f4b6:	f000 f851 	bl	800f55c <abort>
 800f4ba:	4b04      	ldr	r3, [pc, #16]	@ (800f4cc <__assert_func+0x38>)
 800f4bc:	e7f4      	b.n	800f4a8 <__assert_func+0x14>
 800f4be:	bf00      	nop
 800f4c0:	2400002c 	.word	0x2400002c
 800f4c4:	080108ed 	.word	0x080108ed
 800f4c8:	080108bf 	.word	0x080108bf
 800f4cc:	080108b2 	.word	0x080108b2

0800f4d0 <_calloc_r>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	fba1 5402 	umull	r5, r4, r1, r2
 800f4d6:	b93c      	cbnz	r4, 800f4e8 <_calloc_r+0x18>
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7ff fb03 	bl	800eae4 <_malloc_r>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	b928      	cbnz	r0, 800f4ee <_calloc_r+0x1e>
 800f4e2:	2600      	movs	r6, #0
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	220c      	movs	r2, #12
 800f4ea:	6002      	str	r2, [r0, #0]
 800f4ec:	e7f9      	b.n	800f4e2 <_calloc_r+0x12>
 800f4ee:	462a      	mov	r2, r5
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	f7fe fc22 	bl	800dd3a <memset>
 800f4f6:	e7f5      	b.n	800f4e4 <_calloc_r+0x14>

0800f4f8 <__ascii_mbtowc>:
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	b901      	cbnz	r1, 800f4fe <__ascii_mbtowc+0x6>
 800f4fc:	a901      	add	r1, sp, #4
 800f4fe:	b142      	cbz	r2, 800f512 <__ascii_mbtowc+0x1a>
 800f500:	b14b      	cbz	r3, 800f516 <__ascii_mbtowc+0x1e>
 800f502:	7813      	ldrb	r3, [r2, #0]
 800f504:	600b      	str	r3, [r1, #0]
 800f506:	7812      	ldrb	r2, [r2, #0]
 800f508:	1e10      	subs	r0, r2, #0
 800f50a:	bf18      	it	ne
 800f50c:	2001      	movne	r0, #1
 800f50e:	b002      	add	sp, #8
 800f510:	4770      	bx	lr
 800f512:	4610      	mov	r0, r2
 800f514:	e7fb      	b.n	800f50e <__ascii_mbtowc+0x16>
 800f516:	f06f 0001 	mvn.w	r0, #1
 800f51a:	e7f8      	b.n	800f50e <__ascii_mbtowc+0x16>

0800f51c <__ascii_wctomb>:
 800f51c:	4603      	mov	r3, r0
 800f51e:	4608      	mov	r0, r1
 800f520:	b141      	cbz	r1, 800f534 <__ascii_wctomb+0x18>
 800f522:	2aff      	cmp	r2, #255	@ 0xff
 800f524:	d904      	bls.n	800f530 <__ascii_wctomb+0x14>
 800f526:	228a      	movs	r2, #138	@ 0x8a
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	f04f 30ff 	mov.w	r0, #4294967295
 800f52e:	4770      	bx	lr
 800f530:	700a      	strb	r2, [r1, #0]
 800f532:	2001      	movs	r0, #1
 800f534:	4770      	bx	lr
	...

0800f538 <fiprintf>:
 800f538:	b40e      	push	{r1, r2, r3}
 800f53a:	b503      	push	{r0, r1, lr}
 800f53c:	4601      	mov	r1, r0
 800f53e:	ab03      	add	r3, sp, #12
 800f540:	4805      	ldr	r0, [pc, #20]	@ (800f558 <fiprintf+0x20>)
 800f542:	f853 2b04 	ldr.w	r2, [r3], #4
 800f546:	6800      	ldr	r0, [r0, #0]
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	f000 f837 	bl	800f5bc <_vfiprintf_r>
 800f54e:	b002      	add	sp, #8
 800f550:	f85d eb04 	ldr.w	lr, [sp], #4
 800f554:	b003      	add	sp, #12
 800f556:	4770      	bx	lr
 800f558:	2400002c 	.word	0x2400002c

0800f55c <abort>:
 800f55c:	b508      	push	{r3, lr}
 800f55e:	2006      	movs	r0, #6
 800f560:	f000 fa00 	bl	800f964 <raise>
 800f564:	2001      	movs	r0, #1
 800f566:	f7f4 f963 	bl	8003830 <_exit>

0800f56a <__sfputc_r>:
 800f56a:	6893      	ldr	r3, [r2, #8]
 800f56c:	3b01      	subs	r3, #1
 800f56e:	2b00      	cmp	r3, #0
 800f570:	b410      	push	{r4}
 800f572:	6093      	str	r3, [r2, #8]
 800f574:	da08      	bge.n	800f588 <__sfputc_r+0x1e>
 800f576:	6994      	ldr	r4, [r2, #24]
 800f578:	42a3      	cmp	r3, r4
 800f57a:	db01      	blt.n	800f580 <__sfputc_r+0x16>
 800f57c:	290a      	cmp	r1, #10
 800f57e:	d103      	bne.n	800f588 <__sfputc_r+0x1e>
 800f580:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f584:	f000 b932 	b.w	800f7ec <__swbuf_r>
 800f588:	6813      	ldr	r3, [r2, #0]
 800f58a:	1c58      	adds	r0, r3, #1
 800f58c:	6010      	str	r0, [r2, #0]
 800f58e:	7019      	strb	r1, [r3, #0]
 800f590:	4608      	mov	r0, r1
 800f592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <__sfputs_r>:
 800f598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59a:	4606      	mov	r6, r0
 800f59c:	460f      	mov	r7, r1
 800f59e:	4614      	mov	r4, r2
 800f5a0:	18d5      	adds	r5, r2, r3
 800f5a2:	42ac      	cmp	r4, r5
 800f5a4:	d101      	bne.n	800f5aa <__sfputs_r+0x12>
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	e007      	b.n	800f5ba <__sfputs_r+0x22>
 800f5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ae:	463a      	mov	r2, r7
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f7ff ffda 	bl	800f56a <__sfputc_r>
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	d1f3      	bne.n	800f5a2 <__sfputs_r+0xa>
 800f5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5bc <_vfiprintf_r>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	b09d      	sub	sp, #116	@ 0x74
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	4698      	mov	r8, r3
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	b118      	cbz	r0, 800f5d4 <_vfiprintf_r+0x18>
 800f5cc:	6a03      	ldr	r3, [r0, #32]
 800f5ce:	b90b      	cbnz	r3, 800f5d4 <_vfiprintf_r+0x18>
 800f5d0:	f7fe fb3a 	bl	800dc48 <__sinit>
 800f5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5d6:	07d9      	lsls	r1, r3, #31
 800f5d8:	d405      	bmi.n	800f5e6 <_vfiprintf_r+0x2a>
 800f5da:	89ab      	ldrh	r3, [r5, #12]
 800f5dc:	059a      	lsls	r2, r3, #22
 800f5de:	d402      	bmi.n	800f5e6 <_vfiprintf_r+0x2a>
 800f5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5e2:	f7fe fc28 	bl	800de36 <__retarget_lock_acquire_recursive>
 800f5e6:	89ab      	ldrh	r3, [r5, #12]
 800f5e8:	071b      	lsls	r3, r3, #28
 800f5ea:	d501      	bpl.n	800f5f0 <_vfiprintf_r+0x34>
 800f5ec:	692b      	ldr	r3, [r5, #16]
 800f5ee:	b99b      	cbnz	r3, 800f618 <_vfiprintf_r+0x5c>
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f000 f938 	bl	800f868 <__swsetup_r>
 800f5f8:	b170      	cbz	r0, 800f618 <_vfiprintf_r+0x5c>
 800f5fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5fc:	07dc      	lsls	r4, r3, #31
 800f5fe:	d504      	bpl.n	800f60a <_vfiprintf_r+0x4e>
 800f600:	f04f 30ff 	mov.w	r0, #4294967295
 800f604:	b01d      	add	sp, #116	@ 0x74
 800f606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60a:	89ab      	ldrh	r3, [r5, #12]
 800f60c:	0598      	lsls	r0, r3, #22
 800f60e:	d4f7      	bmi.n	800f600 <_vfiprintf_r+0x44>
 800f610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f612:	f7fe fc11 	bl	800de38 <__retarget_lock_release_recursive>
 800f616:	e7f3      	b.n	800f600 <_vfiprintf_r+0x44>
 800f618:	2300      	movs	r3, #0
 800f61a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f61c:	2320      	movs	r3, #32
 800f61e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f622:	f8cd 800c 	str.w	r8, [sp, #12]
 800f626:	2330      	movs	r3, #48	@ 0x30
 800f628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7d8 <_vfiprintf_r+0x21c>
 800f62c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f630:	f04f 0901 	mov.w	r9, #1
 800f634:	4623      	mov	r3, r4
 800f636:	469a      	mov	sl, r3
 800f638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f63c:	b10a      	cbz	r2, 800f642 <_vfiprintf_r+0x86>
 800f63e:	2a25      	cmp	r2, #37	@ 0x25
 800f640:	d1f9      	bne.n	800f636 <_vfiprintf_r+0x7a>
 800f642:	ebba 0b04 	subs.w	fp, sl, r4
 800f646:	d00b      	beq.n	800f660 <_vfiprintf_r+0xa4>
 800f648:	465b      	mov	r3, fp
 800f64a:	4622      	mov	r2, r4
 800f64c:	4629      	mov	r1, r5
 800f64e:	4630      	mov	r0, r6
 800f650:	f7ff ffa2 	bl	800f598 <__sfputs_r>
 800f654:	3001      	adds	r0, #1
 800f656:	f000 80a7 	beq.w	800f7a8 <_vfiprintf_r+0x1ec>
 800f65a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f65c:	445a      	add	r2, fp
 800f65e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f660:	f89a 3000 	ldrb.w	r3, [sl]
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 809f 	beq.w	800f7a8 <_vfiprintf_r+0x1ec>
 800f66a:	2300      	movs	r3, #0
 800f66c:	f04f 32ff 	mov.w	r2, #4294967295
 800f670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f674:	f10a 0a01 	add.w	sl, sl, #1
 800f678:	9304      	str	r3, [sp, #16]
 800f67a:	9307      	str	r3, [sp, #28]
 800f67c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f680:	931a      	str	r3, [sp, #104]	@ 0x68
 800f682:	4654      	mov	r4, sl
 800f684:	2205      	movs	r2, #5
 800f686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f68a:	4853      	ldr	r0, [pc, #332]	@ (800f7d8 <_vfiprintf_r+0x21c>)
 800f68c:	f7f0 fe28 	bl	80002e0 <memchr>
 800f690:	9a04      	ldr	r2, [sp, #16]
 800f692:	b9d8      	cbnz	r0, 800f6cc <_vfiprintf_r+0x110>
 800f694:	06d1      	lsls	r1, r2, #27
 800f696:	bf44      	itt	mi
 800f698:	2320      	movmi	r3, #32
 800f69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f69e:	0713      	lsls	r3, r2, #28
 800f6a0:	bf44      	itt	mi
 800f6a2:	232b      	movmi	r3, #43	@ 0x2b
 800f6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6ae:	d015      	beq.n	800f6dc <_vfiprintf_r+0x120>
 800f6b0:	9a07      	ldr	r2, [sp, #28]
 800f6b2:	4654      	mov	r4, sl
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	f04f 0c0a 	mov.w	ip, #10
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6c0:	3b30      	subs	r3, #48	@ 0x30
 800f6c2:	2b09      	cmp	r3, #9
 800f6c4:	d94b      	bls.n	800f75e <_vfiprintf_r+0x1a2>
 800f6c6:	b1b0      	cbz	r0, 800f6f6 <_vfiprintf_r+0x13a>
 800f6c8:	9207      	str	r2, [sp, #28]
 800f6ca:	e014      	b.n	800f6f6 <_vfiprintf_r+0x13a>
 800f6cc:	eba0 0308 	sub.w	r3, r0, r8
 800f6d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	9304      	str	r3, [sp, #16]
 800f6d8:	46a2      	mov	sl, r4
 800f6da:	e7d2      	b.n	800f682 <_vfiprintf_r+0xc6>
 800f6dc:	9b03      	ldr	r3, [sp, #12]
 800f6de:	1d19      	adds	r1, r3, #4
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	9103      	str	r1, [sp, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	bfbb      	ittet	lt
 800f6e8:	425b      	neglt	r3, r3
 800f6ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f6ee:	9307      	strge	r3, [sp, #28]
 800f6f0:	9307      	strlt	r3, [sp, #28]
 800f6f2:	bfb8      	it	lt
 800f6f4:	9204      	strlt	r2, [sp, #16]
 800f6f6:	7823      	ldrb	r3, [r4, #0]
 800f6f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6fa:	d10a      	bne.n	800f712 <_vfiprintf_r+0x156>
 800f6fc:	7863      	ldrb	r3, [r4, #1]
 800f6fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f700:	d132      	bne.n	800f768 <_vfiprintf_r+0x1ac>
 800f702:	9b03      	ldr	r3, [sp, #12]
 800f704:	1d1a      	adds	r2, r3, #4
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	9203      	str	r2, [sp, #12]
 800f70a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f70e:	3402      	adds	r4, #2
 800f710:	9305      	str	r3, [sp, #20]
 800f712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7e8 <_vfiprintf_r+0x22c>
 800f716:	7821      	ldrb	r1, [r4, #0]
 800f718:	2203      	movs	r2, #3
 800f71a:	4650      	mov	r0, sl
 800f71c:	f7f0 fde0 	bl	80002e0 <memchr>
 800f720:	b138      	cbz	r0, 800f732 <_vfiprintf_r+0x176>
 800f722:	9b04      	ldr	r3, [sp, #16]
 800f724:	eba0 000a 	sub.w	r0, r0, sl
 800f728:	2240      	movs	r2, #64	@ 0x40
 800f72a:	4082      	lsls	r2, r0
 800f72c:	4313      	orrs	r3, r2
 800f72e:	3401      	adds	r4, #1
 800f730:	9304      	str	r3, [sp, #16]
 800f732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f736:	4829      	ldr	r0, [pc, #164]	@ (800f7dc <_vfiprintf_r+0x220>)
 800f738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f73c:	2206      	movs	r2, #6
 800f73e:	f7f0 fdcf 	bl	80002e0 <memchr>
 800f742:	2800      	cmp	r0, #0
 800f744:	d03f      	beq.n	800f7c6 <_vfiprintf_r+0x20a>
 800f746:	4b26      	ldr	r3, [pc, #152]	@ (800f7e0 <_vfiprintf_r+0x224>)
 800f748:	bb1b      	cbnz	r3, 800f792 <_vfiprintf_r+0x1d6>
 800f74a:	9b03      	ldr	r3, [sp, #12]
 800f74c:	3307      	adds	r3, #7
 800f74e:	f023 0307 	bic.w	r3, r3, #7
 800f752:	3308      	adds	r3, #8
 800f754:	9303      	str	r3, [sp, #12]
 800f756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f758:	443b      	add	r3, r7
 800f75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f75c:	e76a      	b.n	800f634 <_vfiprintf_r+0x78>
 800f75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f762:	460c      	mov	r4, r1
 800f764:	2001      	movs	r0, #1
 800f766:	e7a8      	b.n	800f6ba <_vfiprintf_r+0xfe>
 800f768:	2300      	movs	r3, #0
 800f76a:	3401      	adds	r4, #1
 800f76c:	9305      	str	r3, [sp, #20]
 800f76e:	4619      	mov	r1, r3
 800f770:	f04f 0c0a 	mov.w	ip, #10
 800f774:	4620      	mov	r0, r4
 800f776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f77a:	3a30      	subs	r2, #48	@ 0x30
 800f77c:	2a09      	cmp	r2, #9
 800f77e:	d903      	bls.n	800f788 <_vfiprintf_r+0x1cc>
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0c6      	beq.n	800f712 <_vfiprintf_r+0x156>
 800f784:	9105      	str	r1, [sp, #20]
 800f786:	e7c4      	b.n	800f712 <_vfiprintf_r+0x156>
 800f788:	fb0c 2101 	mla	r1, ip, r1, r2
 800f78c:	4604      	mov	r4, r0
 800f78e:	2301      	movs	r3, #1
 800f790:	e7f0      	b.n	800f774 <_vfiprintf_r+0x1b8>
 800f792:	ab03      	add	r3, sp, #12
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	462a      	mov	r2, r5
 800f798:	4b12      	ldr	r3, [pc, #72]	@ (800f7e4 <_vfiprintf_r+0x228>)
 800f79a:	a904      	add	r1, sp, #16
 800f79c:	4630      	mov	r0, r6
 800f79e:	f7fd fe1f 	bl	800d3e0 <_printf_float>
 800f7a2:	4607      	mov	r7, r0
 800f7a4:	1c78      	adds	r0, r7, #1
 800f7a6:	d1d6      	bne.n	800f756 <_vfiprintf_r+0x19a>
 800f7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7aa:	07d9      	lsls	r1, r3, #31
 800f7ac:	d405      	bmi.n	800f7ba <_vfiprintf_r+0x1fe>
 800f7ae:	89ab      	ldrh	r3, [r5, #12]
 800f7b0:	059a      	lsls	r2, r3, #22
 800f7b2:	d402      	bmi.n	800f7ba <_vfiprintf_r+0x1fe>
 800f7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7b6:	f7fe fb3f 	bl	800de38 <__retarget_lock_release_recursive>
 800f7ba:	89ab      	ldrh	r3, [r5, #12]
 800f7bc:	065b      	lsls	r3, r3, #25
 800f7be:	f53f af1f 	bmi.w	800f600 <_vfiprintf_r+0x44>
 800f7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7c4:	e71e      	b.n	800f604 <_vfiprintf_r+0x48>
 800f7c6:	ab03      	add	r3, sp, #12
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	462a      	mov	r2, r5
 800f7cc:	4b05      	ldr	r3, [pc, #20]	@ (800f7e4 <_vfiprintf_r+0x228>)
 800f7ce:	a904      	add	r1, sp, #16
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f7fe f88d 	bl	800d8f0 <_printf_i>
 800f7d6:	e7e4      	b.n	800f7a2 <_vfiprintf_r+0x1e6>
 800f7d8:	080109ef 	.word	0x080109ef
 800f7dc:	080109f9 	.word	0x080109f9
 800f7e0:	0800d3e1 	.word	0x0800d3e1
 800f7e4:	0800f599 	.word	0x0800f599
 800f7e8:	080109f5 	.word	0x080109f5

0800f7ec <__swbuf_r>:
 800f7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ee:	460e      	mov	r6, r1
 800f7f0:	4614      	mov	r4, r2
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	b118      	cbz	r0, 800f7fe <__swbuf_r+0x12>
 800f7f6:	6a03      	ldr	r3, [r0, #32]
 800f7f8:	b90b      	cbnz	r3, 800f7fe <__swbuf_r+0x12>
 800f7fa:	f7fe fa25 	bl	800dc48 <__sinit>
 800f7fe:	69a3      	ldr	r3, [r4, #24]
 800f800:	60a3      	str	r3, [r4, #8]
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	071a      	lsls	r2, r3, #28
 800f806:	d501      	bpl.n	800f80c <__swbuf_r+0x20>
 800f808:	6923      	ldr	r3, [r4, #16]
 800f80a:	b943      	cbnz	r3, 800f81e <__swbuf_r+0x32>
 800f80c:	4621      	mov	r1, r4
 800f80e:	4628      	mov	r0, r5
 800f810:	f000 f82a 	bl	800f868 <__swsetup_r>
 800f814:	b118      	cbz	r0, 800f81e <__swbuf_r+0x32>
 800f816:	f04f 37ff 	mov.w	r7, #4294967295
 800f81a:	4638      	mov	r0, r7
 800f81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	6922      	ldr	r2, [r4, #16]
 800f822:	1a98      	subs	r0, r3, r2
 800f824:	6963      	ldr	r3, [r4, #20]
 800f826:	b2f6      	uxtb	r6, r6
 800f828:	4283      	cmp	r3, r0
 800f82a:	4637      	mov	r7, r6
 800f82c:	dc05      	bgt.n	800f83a <__swbuf_r+0x4e>
 800f82e:	4621      	mov	r1, r4
 800f830:	4628      	mov	r0, r5
 800f832:	f7ff fde9 	bl	800f408 <_fflush_r>
 800f836:	2800      	cmp	r0, #0
 800f838:	d1ed      	bne.n	800f816 <__swbuf_r+0x2a>
 800f83a:	68a3      	ldr	r3, [r4, #8]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	60a3      	str	r3, [r4, #8]
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	6022      	str	r2, [r4, #0]
 800f846:	701e      	strb	r6, [r3, #0]
 800f848:	6962      	ldr	r2, [r4, #20]
 800f84a:	1c43      	adds	r3, r0, #1
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d004      	beq.n	800f85a <__swbuf_r+0x6e>
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	07db      	lsls	r3, r3, #31
 800f854:	d5e1      	bpl.n	800f81a <__swbuf_r+0x2e>
 800f856:	2e0a      	cmp	r6, #10
 800f858:	d1df      	bne.n	800f81a <__swbuf_r+0x2e>
 800f85a:	4621      	mov	r1, r4
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7ff fdd3 	bl	800f408 <_fflush_r>
 800f862:	2800      	cmp	r0, #0
 800f864:	d0d9      	beq.n	800f81a <__swbuf_r+0x2e>
 800f866:	e7d6      	b.n	800f816 <__swbuf_r+0x2a>

0800f868 <__swsetup_r>:
 800f868:	b538      	push	{r3, r4, r5, lr}
 800f86a:	4b29      	ldr	r3, [pc, #164]	@ (800f910 <__swsetup_r+0xa8>)
 800f86c:	4605      	mov	r5, r0
 800f86e:	6818      	ldr	r0, [r3, #0]
 800f870:	460c      	mov	r4, r1
 800f872:	b118      	cbz	r0, 800f87c <__swsetup_r+0x14>
 800f874:	6a03      	ldr	r3, [r0, #32]
 800f876:	b90b      	cbnz	r3, 800f87c <__swsetup_r+0x14>
 800f878:	f7fe f9e6 	bl	800dc48 <__sinit>
 800f87c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f880:	0719      	lsls	r1, r3, #28
 800f882:	d422      	bmi.n	800f8ca <__swsetup_r+0x62>
 800f884:	06da      	lsls	r2, r3, #27
 800f886:	d407      	bmi.n	800f898 <__swsetup_r+0x30>
 800f888:	2209      	movs	r2, #9
 800f88a:	602a      	str	r2, [r5, #0]
 800f88c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f890:	81a3      	strh	r3, [r4, #12]
 800f892:	f04f 30ff 	mov.w	r0, #4294967295
 800f896:	e033      	b.n	800f900 <__swsetup_r+0x98>
 800f898:	0758      	lsls	r0, r3, #29
 800f89a:	d512      	bpl.n	800f8c2 <__swsetup_r+0x5a>
 800f89c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f89e:	b141      	cbz	r1, 800f8b2 <__swsetup_r+0x4a>
 800f8a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8a4:	4299      	cmp	r1, r3
 800f8a6:	d002      	beq.n	800f8ae <__swsetup_r+0x46>
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7ff f8a7 	bl	800e9fc <_free_r>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8b8:	81a3      	strh	r3, [r4, #12]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	6063      	str	r3, [r4, #4]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	6023      	str	r3, [r4, #0]
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	f043 0308 	orr.w	r3, r3, #8
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	6923      	ldr	r3, [r4, #16]
 800f8cc:	b94b      	cbnz	r3, 800f8e2 <__swsetup_r+0x7a>
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8d8:	d003      	beq.n	800f8e2 <__swsetup_r+0x7a>
 800f8da:	4621      	mov	r1, r4
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f000 f883 	bl	800f9e8 <__smakebuf_r>
 800f8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8e6:	f013 0201 	ands.w	r2, r3, #1
 800f8ea:	d00a      	beq.n	800f902 <__swsetup_r+0x9a>
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	60a2      	str	r2, [r4, #8]
 800f8f0:	6962      	ldr	r2, [r4, #20]
 800f8f2:	4252      	negs	r2, r2
 800f8f4:	61a2      	str	r2, [r4, #24]
 800f8f6:	6922      	ldr	r2, [r4, #16]
 800f8f8:	b942      	cbnz	r2, 800f90c <__swsetup_r+0xa4>
 800f8fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8fe:	d1c5      	bne.n	800f88c <__swsetup_r+0x24>
 800f900:	bd38      	pop	{r3, r4, r5, pc}
 800f902:	0799      	lsls	r1, r3, #30
 800f904:	bf58      	it	pl
 800f906:	6962      	ldrpl	r2, [r4, #20]
 800f908:	60a2      	str	r2, [r4, #8]
 800f90a:	e7f4      	b.n	800f8f6 <__swsetup_r+0x8e>
 800f90c:	2000      	movs	r0, #0
 800f90e:	e7f7      	b.n	800f900 <__swsetup_r+0x98>
 800f910:	2400002c 	.word	0x2400002c

0800f914 <_raise_r>:
 800f914:	291f      	cmp	r1, #31
 800f916:	b538      	push	{r3, r4, r5, lr}
 800f918:	4605      	mov	r5, r0
 800f91a:	460c      	mov	r4, r1
 800f91c:	d904      	bls.n	800f928 <_raise_r+0x14>
 800f91e:	2316      	movs	r3, #22
 800f920:	6003      	str	r3, [r0, #0]
 800f922:	f04f 30ff 	mov.w	r0, #4294967295
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f92a:	b112      	cbz	r2, 800f932 <_raise_r+0x1e>
 800f92c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f930:	b94b      	cbnz	r3, 800f946 <_raise_r+0x32>
 800f932:	4628      	mov	r0, r5
 800f934:	f000 f830 	bl	800f998 <_getpid_r>
 800f938:	4622      	mov	r2, r4
 800f93a:	4601      	mov	r1, r0
 800f93c:	4628      	mov	r0, r5
 800f93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f942:	f000 b817 	b.w	800f974 <_kill_r>
 800f946:	2b01      	cmp	r3, #1
 800f948:	d00a      	beq.n	800f960 <_raise_r+0x4c>
 800f94a:	1c59      	adds	r1, r3, #1
 800f94c:	d103      	bne.n	800f956 <_raise_r+0x42>
 800f94e:	2316      	movs	r3, #22
 800f950:	6003      	str	r3, [r0, #0]
 800f952:	2001      	movs	r0, #1
 800f954:	e7e7      	b.n	800f926 <_raise_r+0x12>
 800f956:	2100      	movs	r1, #0
 800f958:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f95c:	4620      	mov	r0, r4
 800f95e:	4798      	blx	r3
 800f960:	2000      	movs	r0, #0
 800f962:	e7e0      	b.n	800f926 <_raise_r+0x12>

0800f964 <raise>:
 800f964:	4b02      	ldr	r3, [pc, #8]	@ (800f970 <raise+0xc>)
 800f966:	4601      	mov	r1, r0
 800f968:	6818      	ldr	r0, [r3, #0]
 800f96a:	f7ff bfd3 	b.w	800f914 <_raise_r>
 800f96e:	bf00      	nop
 800f970:	2400002c 	.word	0x2400002c

0800f974 <_kill_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4d07      	ldr	r5, [pc, #28]	@ (800f994 <_kill_r+0x20>)
 800f978:	2300      	movs	r3, #0
 800f97a:	4604      	mov	r4, r0
 800f97c:	4608      	mov	r0, r1
 800f97e:	4611      	mov	r1, r2
 800f980:	602b      	str	r3, [r5, #0]
 800f982:	f7f3 ff45 	bl	8003810 <_kill>
 800f986:	1c43      	adds	r3, r0, #1
 800f988:	d102      	bne.n	800f990 <_kill_r+0x1c>
 800f98a:	682b      	ldr	r3, [r5, #0]
 800f98c:	b103      	cbz	r3, 800f990 <_kill_r+0x1c>
 800f98e:	6023      	str	r3, [r4, #0]
 800f990:	bd38      	pop	{r3, r4, r5, pc}
 800f992:	bf00      	nop
 800f994:	24003f98 	.word	0x24003f98

0800f998 <_getpid_r>:
 800f998:	f7f3 bf32 	b.w	8003800 <_getpid>

0800f99c <__swhatbuf_r>:
 800f99c:	b570      	push	{r4, r5, r6, lr}
 800f99e:	460c      	mov	r4, r1
 800f9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a4:	2900      	cmp	r1, #0
 800f9a6:	b096      	sub	sp, #88	@ 0x58
 800f9a8:	4615      	mov	r5, r2
 800f9aa:	461e      	mov	r6, r3
 800f9ac:	da0d      	bge.n	800f9ca <__swhatbuf_r+0x2e>
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9b4:	f04f 0100 	mov.w	r1, #0
 800f9b8:	bf14      	ite	ne
 800f9ba:	2340      	movne	r3, #64	@ 0x40
 800f9bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	6031      	str	r1, [r6, #0]
 800f9c4:	602b      	str	r3, [r5, #0]
 800f9c6:	b016      	add	sp, #88	@ 0x58
 800f9c8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ca:	466a      	mov	r2, sp
 800f9cc:	f000 f848 	bl	800fa60 <_fstat_r>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	dbec      	blt.n	800f9ae <__swhatbuf_r+0x12>
 800f9d4:	9901      	ldr	r1, [sp, #4]
 800f9d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9de:	4259      	negs	r1, r3
 800f9e0:	4159      	adcs	r1, r3
 800f9e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9e6:	e7eb      	b.n	800f9c0 <__swhatbuf_r+0x24>

0800f9e8 <__smakebuf_r>:
 800f9e8:	898b      	ldrh	r3, [r1, #12]
 800f9ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ec:	079d      	lsls	r5, r3, #30
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	d507      	bpl.n	800fa04 <__smakebuf_r+0x1c>
 800f9f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f9f8:	6023      	str	r3, [r4, #0]
 800f9fa:	6123      	str	r3, [r4, #16]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	6163      	str	r3, [r4, #20]
 800fa00:	b003      	add	sp, #12
 800fa02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa04:	ab01      	add	r3, sp, #4
 800fa06:	466a      	mov	r2, sp
 800fa08:	f7ff ffc8 	bl	800f99c <__swhatbuf_r>
 800fa0c:	9f00      	ldr	r7, [sp, #0]
 800fa0e:	4605      	mov	r5, r0
 800fa10:	4639      	mov	r1, r7
 800fa12:	4630      	mov	r0, r6
 800fa14:	f7ff f866 	bl	800eae4 <_malloc_r>
 800fa18:	b948      	cbnz	r0, 800fa2e <__smakebuf_r+0x46>
 800fa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1e:	059a      	lsls	r2, r3, #22
 800fa20:	d4ee      	bmi.n	800fa00 <__smakebuf_r+0x18>
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	f043 0302 	orr.w	r3, r3, #2
 800fa2a:	81a3      	strh	r3, [r4, #12]
 800fa2c:	e7e2      	b.n	800f9f4 <__smakebuf_r+0xc>
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	6020      	str	r0, [r4, #0]
 800fa32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa36:	81a3      	strh	r3, [r4, #12]
 800fa38:	9b01      	ldr	r3, [sp, #4]
 800fa3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa3e:	b15b      	cbz	r3, 800fa58 <__smakebuf_r+0x70>
 800fa40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa44:	4630      	mov	r0, r6
 800fa46:	f000 f81d 	bl	800fa84 <_isatty_r>
 800fa4a:	b128      	cbz	r0, 800fa58 <__smakebuf_r+0x70>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	f023 0303 	bic.w	r3, r3, #3
 800fa52:	f043 0301 	orr.w	r3, r3, #1
 800fa56:	81a3      	strh	r3, [r4, #12]
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	431d      	orrs	r5, r3
 800fa5c:	81a5      	strh	r5, [r4, #12]
 800fa5e:	e7cf      	b.n	800fa00 <__smakebuf_r+0x18>

0800fa60 <_fstat_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d07      	ldr	r5, [pc, #28]	@ (800fa80 <_fstat_r+0x20>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	f7f3 ff2f 	bl	80038d0 <_fstat>
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	d102      	bne.n	800fa7c <_fstat_r+0x1c>
 800fa76:	682b      	ldr	r3, [r5, #0]
 800fa78:	b103      	cbz	r3, 800fa7c <_fstat_r+0x1c>
 800fa7a:	6023      	str	r3, [r4, #0]
 800fa7c:	bd38      	pop	{r3, r4, r5, pc}
 800fa7e:	bf00      	nop
 800fa80:	24003f98 	.word	0x24003f98

0800fa84 <_isatty_r>:
 800fa84:	b538      	push	{r3, r4, r5, lr}
 800fa86:	4d06      	ldr	r5, [pc, #24]	@ (800faa0 <_isatty_r+0x1c>)
 800fa88:	2300      	movs	r3, #0
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	4608      	mov	r0, r1
 800fa8e:	602b      	str	r3, [r5, #0]
 800fa90:	f7f3 ff2e 	bl	80038f0 <_isatty>
 800fa94:	1c43      	adds	r3, r0, #1
 800fa96:	d102      	bne.n	800fa9e <_isatty_r+0x1a>
 800fa98:	682b      	ldr	r3, [r5, #0]
 800fa9a:	b103      	cbz	r3, 800fa9e <_isatty_r+0x1a>
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	bd38      	pop	{r3, r4, r5, pc}
 800faa0:	24003f98 	.word	0x24003f98
 800faa4:	00000000 	.word	0x00000000

0800faa8 <sin>:
 800faa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faaa:	eeb0 7b40 	vmov.f64	d7, d0
 800faae:	ee17 3a90 	vmov	r3, s15
 800fab2:	4a21      	ldr	r2, [pc, #132]	@ (800fb38 <sin+0x90>)
 800fab4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fab8:	4293      	cmp	r3, r2
 800faba:	d807      	bhi.n	800facc <sin+0x24>
 800fabc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800fb30 <sin+0x88>
 800fac0:	2000      	movs	r0, #0
 800fac2:	b005      	add	sp, #20
 800fac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac8:	f000 b8a2 	b.w	800fc10 <__kernel_sin>
 800facc:	4a1b      	ldr	r2, [pc, #108]	@ (800fb3c <sin+0x94>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d904      	bls.n	800fadc <sin+0x34>
 800fad2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fad6:	b005      	add	sp, #20
 800fad8:	f85d fb04 	ldr.w	pc, [sp], #4
 800fadc:	4668      	mov	r0, sp
 800fade:	f000 f8ef 	bl	800fcc0 <__ieee754_rem_pio2>
 800fae2:	f000 0003 	and.w	r0, r0, #3
 800fae6:	2801      	cmp	r0, #1
 800fae8:	d00a      	beq.n	800fb00 <sin+0x58>
 800faea:	2802      	cmp	r0, #2
 800faec:	d00f      	beq.n	800fb0e <sin+0x66>
 800faee:	b9c0      	cbnz	r0, 800fb22 <sin+0x7a>
 800faf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800faf4:	ed9d 0b00 	vldr	d0, [sp]
 800faf8:	2001      	movs	r0, #1
 800fafa:	f000 f889 	bl	800fc10 <__kernel_sin>
 800fafe:	e7ea      	b.n	800fad6 <sin+0x2e>
 800fb00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb04:	ed9d 0b00 	vldr	d0, [sp]
 800fb08:	f000 f81a 	bl	800fb40 <__kernel_cos>
 800fb0c:	e7e3      	b.n	800fad6 <sin+0x2e>
 800fb0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb12:	ed9d 0b00 	vldr	d0, [sp]
 800fb16:	2001      	movs	r0, #1
 800fb18:	f000 f87a 	bl	800fc10 <__kernel_sin>
 800fb1c:	eeb1 0b40 	vneg.f64	d0, d0
 800fb20:	e7d9      	b.n	800fad6 <sin+0x2e>
 800fb22:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb26:	ed9d 0b00 	vldr	d0, [sp]
 800fb2a:	f000 f809 	bl	800fb40 <__kernel_cos>
 800fb2e:	e7f5      	b.n	800fb1c <sin+0x74>
	...
 800fb38:	3fe921fb 	.word	0x3fe921fb
 800fb3c:	7fefffff 	.word	0x7fefffff

0800fb40 <__kernel_cos>:
 800fb40:	eeb0 5b40 	vmov.f64	d5, d0
 800fb44:	ee15 1a90 	vmov	r1, s11
 800fb48:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800fb4c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800fb50:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800fb54:	d204      	bcs.n	800fb60 <__kernel_cos+0x20>
 800fb56:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800fb5a:	ee17 3a90 	vmov	r3, s15
 800fb5e:	b343      	cbz	r3, 800fbb2 <__kernel_cos+0x72>
 800fb60:	ee25 6b05 	vmul.f64	d6, d5, d5
 800fb64:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800fb68:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800fbd8 <__kernel_cos+0x98>
 800fb6c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fbe0 <__kernel_cos+0xa0>
 800fb70:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fb74:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fbe8 <__kernel_cos+0xa8>
 800fb78:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fb7c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fbf0 <__kernel_cos+0xb0>
 800fb80:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fb84:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fbf8 <__kernel_cos+0xb8>
 800fb88:	4b1f      	ldr	r3, [pc, #124]	@ (800fc08 <__kernel_cos+0xc8>)
 800fb8a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fb8e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fc00 <__kernel_cos+0xc0>
 800fb92:	4299      	cmp	r1, r3
 800fb94:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fb98:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fb9c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800fba0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fba4:	eea6 1b04 	vfma.f64	d1, d6, d4
 800fba8:	d804      	bhi.n	800fbb4 <__kernel_cos+0x74>
 800fbaa:	ee37 7b41 	vsub.f64	d7, d7, d1
 800fbae:	ee30 0b47 	vsub.f64	d0, d0, d7
 800fbb2:	4770      	bx	lr
 800fbb4:	4b15      	ldr	r3, [pc, #84]	@ (800fc0c <__kernel_cos+0xcc>)
 800fbb6:	4299      	cmp	r1, r3
 800fbb8:	d809      	bhi.n	800fbce <__kernel_cos+0x8e>
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800fbc0:	ec43 2b16 	vmov	d6, r2, r3
 800fbc4:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fbc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbcc:	e7ed      	b.n	800fbaa <__kernel_cos+0x6a>
 800fbce:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800fbd2:	e7f7      	b.n	800fbc4 <__kernel_cos+0x84>
 800fbd4:	f3af 8000 	nop.w
 800fbd8:	be8838d4 	.word	0xbe8838d4
 800fbdc:	bda8fae9 	.word	0xbda8fae9
 800fbe0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fbe4:	3e21ee9e 	.word	0x3e21ee9e
 800fbe8:	809c52ad 	.word	0x809c52ad
 800fbec:	be927e4f 	.word	0xbe927e4f
 800fbf0:	19cb1590 	.word	0x19cb1590
 800fbf4:	3efa01a0 	.word	0x3efa01a0
 800fbf8:	16c15177 	.word	0x16c15177
 800fbfc:	bf56c16c 	.word	0xbf56c16c
 800fc00:	5555554c 	.word	0x5555554c
 800fc04:	3fa55555 	.word	0x3fa55555
 800fc08:	3fd33332 	.word	0x3fd33332
 800fc0c:	3fe90000 	.word	0x3fe90000

0800fc10 <__kernel_sin>:
 800fc10:	ee10 3a90 	vmov	r3, s1
 800fc14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc18:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fc1c:	d204      	bcs.n	800fc28 <__kernel_sin+0x18>
 800fc1e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fc22:	ee17 3a90 	vmov	r3, s15
 800fc26:	b35b      	cbz	r3, 800fc80 <__kernel_sin+0x70>
 800fc28:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fc2c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fc30:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800fc88 <__kernel_sin+0x78>
 800fc34:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fc90 <__kernel_sin+0x80>
 800fc38:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fc3c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fc98 <__kernel_sin+0x88>
 800fc40:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fc44:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fca0 <__kernel_sin+0x90>
 800fc48:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fc4c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fca8 <__kernel_sin+0x98>
 800fc50:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fc54:	b930      	cbnz	r0, 800fc64 <__kernel_sin+0x54>
 800fc56:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fcb0 <__kernel_sin+0xa0>
 800fc5a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fc5e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800fc62:	4770      	bx	lr
 800fc64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800fc68:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800fc6c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800fc70:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800fc74:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800fcb8 <__kernel_sin+0xa8>
 800fc78:	eea5 1b07 	vfma.f64	d1, d5, d7
 800fc7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	f3af 8000 	nop.w
 800fc88:	5acfd57c 	.word	0x5acfd57c
 800fc8c:	3de5d93a 	.word	0x3de5d93a
 800fc90:	8a2b9ceb 	.word	0x8a2b9ceb
 800fc94:	be5ae5e6 	.word	0xbe5ae5e6
 800fc98:	57b1fe7d 	.word	0x57b1fe7d
 800fc9c:	3ec71de3 	.word	0x3ec71de3
 800fca0:	19c161d5 	.word	0x19c161d5
 800fca4:	bf2a01a0 	.word	0xbf2a01a0
 800fca8:	1110f8a6 	.word	0x1110f8a6
 800fcac:	3f811111 	.word	0x3f811111
 800fcb0:	55555549 	.word	0x55555549
 800fcb4:	bfc55555 	.word	0xbfc55555
 800fcb8:	55555549 	.word	0x55555549
 800fcbc:	3fc55555 	.word	0x3fc55555

0800fcc0 <__ieee754_rem_pio2>:
 800fcc0:	b570      	push	{r4, r5, r6, lr}
 800fcc2:	eeb0 7b40 	vmov.f64	d7, d0
 800fcc6:	ee17 5a90 	vmov	r5, s15
 800fcca:	4b99      	ldr	r3, [pc, #612]	@ (800ff30 <__ieee754_rem_pio2+0x270>)
 800fccc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fcd0:	429e      	cmp	r6, r3
 800fcd2:	b088      	sub	sp, #32
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	d807      	bhi.n	800fce8 <__ieee754_rem_pio2+0x28>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	2300      	movs	r3, #0
 800fcdc:	ed84 0b00 	vstr	d0, [r4]
 800fce0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fce4:	2000      	movs	r0, #0
 800fce6:	e01b      	b.n	800fd20 <__ieee754_rem_pio2+0x60>
 800fce8:	4b92      	ldr	r3, [pc, #584]	@ (800ff34 <__ieee754_rem_pio2+0x274>)
 800fcea:	429e      	cmp	r6, r3
 800fcec:	d83b      	bhi.n	800fd66 <__ieee754_rem_pio2+0xa6>
 800fcee:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800fcf2:	2d00      	cmp	r5, #0
 800fcf4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800fef0 <__ieee754_rem_pio2+0x230>
 800fcf8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800fcfc:	dd19      	ble.n	800fd32 <__ieee754_rem_pio2+0x72>
 800fcfe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fd02:	429e      	cmp	r6, r3
 800fd04:	d00e      	beq.n	800fd24 <__ieee754_rem_pio2+0x64>
 800fd06:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800fef8 <__ieee754_rem_pio2+0x238>
 800fd0a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800fd0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd12:	ed84 6b00 	vstr	d6, [r4]
 800fd16:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fd1a:	ed84 7b02 	vstr	d7, [r4, #8]
 800fd1e:	2001      	movs	r0, #1
 800fd20:	b008      	add	sp, #32
 800fd22:	bd70      	pop	{r4, r5, r6, pc}
 800fd24:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ff00 <__ieee754_rem_pio2+0x240>
 800fd28:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ff08 <__ieee754_rem_pio2+0x248>
 800fd2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd30:	e7eb      	b.n	800fd0a <__ieee754_rem_pio2+0x4a>
 800fd32:	429e      	cmp	r6, r3
 800fd34:	ee30 7b06 	vadd.f64	d7, d0, d6
 800fd38:	d00e      	beq.n	800fd58 <__ieee754_rem_pio2+0x98>
 800fd3a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800fef8 <__ieee754_rem_pio2+0x238>
 800fd3e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fd42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd46:	ed84 6b00 	vstr	d6, [r4]
 800fd4a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd52:	ed84 7b02 	vstr	d7, [r4, #8]
 800fd56:	e7e3      	b.n	800fd20 <__ieee754_rem_pio2+0x60>
 800fd58:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ff00 <__ieee754_rem_pio2+0x240>
 800fd5c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ff08 <__ieee754_rem_pio2+0x248>
 800fd60:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd64:	e7eb      	b.n	800fd3e <__ieee754_rem_pio2+0x7e>
 800fd66:	4b74      	ldr	r3, [pc, #464]	@ (800ff38 <__ieee754_rem_pio2+0x278>)
 800fd68:	429e      	cmp	r6, r3
 800fd6a:	d870      	bhi.n	800fe4e <__ieee754_rem_pio2+0x18e>
 800fd6c:	f000 f8ec 	bl	800ff48 <fabs>
 800fd70:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fd74:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ff10 <__ieee754_rem_pio2+0x250>
 800fd78:	eea0 7b06 	vfma.f64	d7, d0, d6
 800fd7c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fd80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fd84:	ee17 0a90 	vmov	r0, s15
 800fd88:	eeb1 4b45 	vneg.f64	d4, d5
 800fd8c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800fef0 <__ieee754_rem_pio2+0x230>
 800fd90:	eea5 0b47 	vfms.f64	d0, d5, d7
 800fd94:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800fef8 <__ieee754_rem_pio2+0x238>
 800fd98:	281f      	cmp	r0, #31
 800fd9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fd9e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fda2:	dc05      	bgt.n	800fdb0 <__ieee754_rem_pio2+0xf0>
 800fda4:	4b65      	ldr	r3, [pc, #404]	@ (800ff3c <__ieee754_rem_pio2+0x27c>)
 800fda6:	1e42      	subs	r2, r0, #1
 800fda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdac:	42b3      	cmp	r3, r6
 800fdae:	d109      	bne.n	800fdc4 <__ieee754_rem_pio2+0x104>
 800fdb0:	ee16 3a90 	vmov	r3, s13
 800fdb4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fdb8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800fdbc:	2b10      	cmp	r3, #16
 800fdbe:	ea4f 5226 	mov.w	r2, r6, asr #20
 800fdc2:	dc02      	bgt.n	800fdca <__ieee754_rem_pio2+0x10a>
 800fdc4:	ed84 6b00 	vstr	d6, [r4]
 800fdc8:	e01a      	b.n	800fe00 <__ieee754_rem_pio2+0x140>
 800fdca:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ff00 <__ieee754_rem_pio2+0x240>
 800fdce:	eeb0 6b40 	vmov.f64	d6, d0
 800fdd2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800fdd6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fdda:	eea4 7b03 	vfma.f64	d7, d4, d3
 800fdde:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ff08 <__ieee754_rem_pio2+0x248>
 800fde2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800fde6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800fdea:	ee13 3a90 	vmov	r3, s7
 800fdee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	2b31      	cmp	r3, #49	@ 0x31
 800fdf6:	dc17      	bgt.n	800fe28 <__ieee754_rem_pio2+0x168>
 800fdf8:	eeb0 0b46 	vmov.f64	d0, d6
 800fdfc:	ed84 3b00 	vstr	d3, [r4]
 800fe00:	ed94 6b00 	vldr	d6, [r4]
 800fe04:	2d00      	cmp	r5, #0
 800fe06:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fe0a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800fe0e:	ed84 0b02 	vstr	d0, [r4, #8]
 800fe12:	da85      	bge.n	800fd20 <__ieee754_rem_pio2+0x60>
 800fe14:	eeb1 6b46 	vneg.f64	d6, d6
 800fe18:	eeb1 0b40 	vneg.f64	d0, d0
 800fe1c:	ed84 6b00 	vstr	d6, [r4]
 800fe20:	ed84 0b02 	vstr	d0, [r4, #8]
 800fe24:	4240      	negs	r0, r0
 800fe26:	e77b      	b.n	800fd20 <__ieee754_rem_pio2+0x60>
 800fe28:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ff18 <__ieee754_rem_pio2+0x258>
 800fe2c:	eeb0 0b46 	vmov.f64	d0, d6
 800fe30:	eea4 0b07 	vfma.f64	d0, d4, d7
 800fe34:	ee36 6b40 	vsub.f64	d6, d6, d0
 800fe38:	eea4 6b07 	vfma.f64	d6, d4, d7
 800fe3c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ff20 <__ieee754_rem_pio2+0x260>
 800fe40:	eeb0 7b46 	vmov.f64	d7, d6
 800fe44:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800fe48:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fe4c:	e7ba      	b.n	800fdc4 <__ieee754_rem_pio2+0x104>
 800fe4e:	4b3c      	ldr	r3, [pc, #240]	@ (800ff40 <__ieee754_rem_pio2+0x280>)
 800fe50:	429e      	cmp	r6, r3
 800fe52:	d906      	bls.n	800fe62 <__ieee754_rem_pio2+0x1a2>
 800fe54:	ee30 7b40 	vsub.f64	d7, d0, d0
 800fe58:	ed80 7b02 	vstr	d7, [r0, #8]
 800fe5c:	ed80 7b00 	vstr	d7, [r0]
 800fe60:	e740      	b.n	800fce4 <__ieee754_rem_pio2+0x24>
 800fe62:	ee10 3a10 	vmov	r3, s0
 800fe66:	1532      	asrs	r2, r6, #20
 800fe68:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800fe72:	ec41 0b17 	vmov	d7, r0, r1
 800fe76:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fe7a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ff28 <__ieee754_rem_pio2+0x268>
 800fe7e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fe82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe86:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fe8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fe8e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fe92:	a808      	add	r0, sp, #32
 800fe94:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fe98:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe9c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fea0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fea8:	2103      	movs	r1, #3
 800feaa:	ed30 7b02 	vldmdb	r0!, {d7}
 800feae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800feb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb6:	460b      	mov	r3, r1
 800feb8:	f101 31ff 	add.w	r1, r1, #4294967295
 800febc:	d0f5      	beq.n	800feaa <__ieee754_rem_pio2+0x1ea>
 800febe:	4921      	ldr	r1, [pc, #132]	@ (800ff44 <__ieee754_rem_pio2+0x284>)
 800fec0:	9101      	str	r1, [sp, #4]
 800fec2:	2102      	movs	r1, #2
 800fec4:	9100      	str	r1, [sp, #0]
 800fec6:	a802      	add	r0, sp, #8
 800fec8:	4621      	mov	r1, r4
 800feca:	f000 f845 	bl	800ff58 <__kernel_rem_pio2>
 800fece:	2d00      	cmp	r5, #0
 800fed0:	f6bf af26 	bge.w	800fd20 <__ieee754_rem_pio2+0x60>
 800fed4:	ed94 7b00 	vldr	d7, [r4]
 800fed8:	eeb1 7b47 	vneg.f64	d7, d7
 800fedc:	ed84 7b00 	vstr	d7, [r4]
 800fee0:	ed94 7b02 	vldr	d7, [r4, #8]
 800fee4:	eeb1 7b47 	vneg.f64	d7, d7
 800fee8:	ed84 7b02 	vstr	d7, [r4, #8]
 800feec:	e79a      	b.n	800fe24 <__ieee754_rem_pio2+0x164>
 800feee:	bf00      	nop
 800fef0:	54400000 	.word	0x54400000
 800fef4:	3ff921fb 	.word	0x3ff921fb
 800fef8:	1a626331 	.word	0x1a626331
 800fefc:	3dd0b461 	.word	0x3dd0b461
 800ff00:	1a600000 	.word	0x1a600000
 800ff04:	3dd0b461 	.word	0x3dd0b461
 800ff08:	2e037073 	.word	0x2e037073
 800ff0c:	3ba3198a 	.word	0x3ba3198a
 800ff10:	6dc9c883 	.word	0x6dc9c883
 800ff14:	3fe45f30 	.word	0x3fe45f30
 800ff18:	2e000000 	.word	0x2e000000
 800ff1c:	3ba3198a 	.word	0x3ba3198a
 800ff20:	252049c1 	.word	0x252049c1
 800ff24:	397b839a 	.word	0x397b839a
 800ff28:	00000000 	.word	0x00000000
 800ff2c:	41700000 	.word	0x41700000
 800ff30:	3fe921fb 	.word	0x3fe921fb
 800ff34:	4002d97b 	.word	0x4002d97b
 800ff38:	413921fb 	.word	0x413921fb
 800ff3c:	08010a00 	.word	0x08010a00
 800ff40:	7fefffff 	.word	0x7fefffff
 800ff44:	08010a80 	.word	0x08010a80

0800ff48 <fabs>:
 800ff48:	ec51 0b10 	vmov	r0, r1, d0
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ff52:	ec43 2b10 	vmov	d0, r2, r3
 800ff56:	4770      	bx	lr

0800ff58 <__kernel_rem_pio2>:
 800ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	ed2d 8b06 	vpush	{d8-d10}
 800ff60:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ff64:	469b      	mov	fp, r3
 800ff66:	9001      	str	r0, [sp, #4]
 800ff68:	4bbb      	ldr	r3, [pc, #748]	@ (8010258 <__kernel_rem_pio2+0x300>)
 800ff6a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800ff6c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800ff70:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800ff74:	f112 0f14 	cmn.w	r2, #20
 800ff78:	bfa8      	it	ge
 800ff7a:	1ed3      	subge	r3, r2, #3
 800ff7c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ff80:	bfb8      	it	lt
 800ff82:	2300      	movlt	r3, #0
 800ff84:	f06f 0517 	mvn.w	r5, #23
 800ff88:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8010240 <__kernel_rem_pio2+0x2e8>
 800ff8c:	bfa4      	itt	ge
 800ff8e:	2018      	movge	r0, #24
 800ff90:	fb93 f3f0 	sdivge	r3, r3, r0
 800ff94:	fb03 5505 	mla	r5, r3, r5, r5
 800ff98:	eba3 040a 	sub.w	r4, r3, sl
 800ff9c:	4415      	add	r5, r2
 800ff9e:	460f      	mov	r7, r1
 800ffa0:	eb09 060a 	add.w	r6, r9, sl
 800ffa4:	a81a      	add	r0, sp, #104	@ 0x68
 800ffa6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800ffaa:	2200      	movs	r2, #0
 800ffac:	42b2      	cmp	r2, r6
 800ffae:	dd0e      	ble.n	800ffce <__kernel_rem_pio2+0x76>
 800ffb0:	aa1a      	add	r2, sp, #104	@ 0x68
 800ffb2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ffb6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800ffba:	2600      	movs	r6, #0
 800ffbc:	454e      	cmp	r6, r9
 800ffbe:	dc25      	bgt.n	801000c <__kernel_rem_pio2+0xb4>
 800ffc0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8010240 <__kernel_rem_pio2+0x2e8>
 800ffc4:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ffc8:	4614      	mov	r4, r2
 800ffca:	2000      	movs	r0, #0
 800ffcc:	e015      	b.n	800fffa <__kernel_rem_pio2+0xa2>
 800ffce:	42d4      	cmn	r4, r2
 800ffd0:	d409      	bmi.n	800ffe6 <__kernel_rem_pio2+0x8e>
 800ffd2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800ffd6:	ee07 1a90 	vmov	s15, r1
 800ffda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ffde:	eca0 7b02 	vstmia	r0!, {d7}
 800ffe2:	3201      	adds	r2, #1
 800ffe4:	e7e2      	b.n	800ffac <__kernel_rem_pio2+0x54>
 800ffe6:	eeb0 7b46 	vmov.f64	d7, d6
 800ffea:	e7f8      	b.n	800ffde <__kernel_rem_pio2+0x86>
 800ffec:	ecbc 5b02 	vldmia	ip!, {d5}
 800fff0:	ed94 6b00 	vldr	d6, [r4]
 800fff4:	3001      	adds	r0, #1
 800fff6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fffa:	4550      	cmp	r0, sl
 800fffc:	f1a4 0408 	sub.w	r4, r4, #8
 8010000:	ddf4      	ble.n	800ffec <__kernel_rem_pio2+0x94>
 8010002:	ecae 7b02 	vstmia	lr!, {d7}
 8010006:	3601      	adds	r6, #1
 8010008:	3208      	adds	r2, #8
 801000a:	e7d7      	b.n	800ffbc <__kernel_rem_pio2+0x64>
 801000c:	aa06      	add	r2, sp, #24
 801000e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8010248 <__kernel_rem_pio2+0x2f0>
 8010012:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8010250 <__kernel_rem_pio2+0x2f8>
 8010016:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801001a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801001e:	9203      	str	r2, [sp, #12]
 8010020:	9302      	str	r3, [sp, #8]
 8010022:	464c      	mov	r4, r9
 8010024:	00e3      	lsls	r3, r4, #3
 8010026:	9304      	str	r3, [sp, #16]
 8010028:	ab92      	add	r3, sp, #584	@ 0x248
 801002a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801002e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8010032:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8010034:	ab06      	add	r3, sp, #24
 8010036:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801003a:	461e      	mov	r6, r3
 801003c:	4620      	mov	r0, r4
 801003e:	2800      	cmp	r0, #0
 8010040:	f1a2 0208 	sub.w	r2, r2, #8
 8010044:	dc4a      	bgt.n	80100dc <__kernel_rem_pio2+0x184>
 8010046:	4628      	mov	r0, r5
 8010048:	9305      	str	r3, [sp, #20]
 801004a:	f000 fa01 	bl	8010450 <scalbn>
 801004e:	eeb0 8b40 	vmov.f64	d8, d0
 8010052:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8010056:	ee28 0b00 	vmul.f64	d0, d8, d0
 801005a:	f000 fa79 	bl	8010550 <floor>
 801005e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8010062:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010066:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801006a:	2d00      	cmp	r5, #0
 801006c:	ee17 8a90 	vmov	r8, s15
 8010070:	9b05      	ldr	r3, [sp, #20]
 8010072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010076:	ee38 8b47 	vsub.f64	d8, d8, d7
 801007a:	dd41      	ble.n	8010100 <__kernel_rem_pio2+0x1a8>
 801007c:	1e60      	subs	r0, r4, #1
 801007e:	aa06      	add	r2, sp, #24
 8010080:	f1c5 0c18 	rsb	ip, r5, #24
 8010084:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8010088:	fa46 f20c 	asr.w	r2, r6, ip
 801008c:	4490      	add	r8, r2
 801008e:	fa02 f20c 	lsl.w	r2, r2, ip
 8010092:	1ab6      	subs	r6, r6, r2
 8010094:	aa06      	add	r2, sp, #24
 8010096:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801009a:	f1c5 0217 	rsb	r2, r5, #23
 801009e:	4116      	asrs	r6, r2
 80100a0:	2e00      	cmp	r6, #0
 80100a2:	dd3c      	ble.n	801011e <__kernel_rem_pio2+0x1c6>
 80100a4:	f04f 0c00 	mov.w	ip, #0
 80100a8:	f108 0801 	add.w	r8, r8, #1
 80100ac:	4660      	mov	r0, ip
 80100ae:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 80100b2:	4564      	cmp	r4, ip
 80100b4:	dc66      	bgt.n	8010184 <__kernel_rem_pio2+0x22c>
 80100b6:	2d00      	cmp	r5, #0
 80100b8:	dd03      	ble.n	80100c2 <__kernel_rem_pio2+0x16a>
 80100ba:	2d01      	cmp	r5, #1
 80100bc:	d072      	beq.n	80101a4 <__kernel_rem_pio2+0x24c>
 80100be:	2d02      	cmp	r5, #2
 80100c0:	d07a      	beq.n	80101b8 <__kernel_rem_pio2+0x260>
 80100c2:	2e02      	cmp	r6, #2
 80100c4:	d12b      	bne.n	801011e <__kernel_rem_pio2+0x1c6>
 80100c6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80100ca:	ee30 8b48 	vsub.f64	d8, d0, d8
 80100ce:	b330      	cbz	r0, 801011e <__kernel_rem_pio2+0x1c6>
 80100d0:	4628      	mov	r0, r5
 80100d2:	f000 f9bd 	bl	8010450 <scalbn>
 80100d6:	ee38 8b40 	vsub.f64	d8, d8, d0
 80100da:	e020      	b.n	801011e <__kernel_rem_pio2+0x1c6>
 80100dc:	ee20 7b09 	vmul.f64	d7, d0, d9
 80100e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80100e4:	3801      	subs	r0, #1
 80100e6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80100ea:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80100ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80100f2:	eca6 0a01 	vstmia	r6!, {s0}
 80100f6:	ed92 0b00 	vldr	d0, [r2]
 80100fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80100fe:	e79e      	b.n	801003e <__kernel_rem_pio2+0xe6>
 8010100:	d105      	bne.n	801010e <__kernel_rem_pio2+0x1b6>
 8010102:	1e62      	subs	r2, r4, #1
 8010104:	a906      	add	r1, sp, #24
 8010106:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801010a:	15f6      	asrs	r6, r6, #23
 801010c:	e7c8      	b.n	80100a0 <__kernel_rem_pio2+0x148>
 801010e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8010112:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011a:	da31      	bge.n	8010180 <__kernel_rem_pio2+0x228>
 801011c:	2600      	movs	r6, #0
 801011e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	f040 809b 	bne.w	8010260 <__kernel_rem_pio2+0x308>
 801012a:	1e62      	subs	r2, r4, #1
 801012c:	2000      	movs	r0, #0
 801012e:	454a      	cmp	r2, r9
 8010130:	da49      	bge.n	80101c6 <__kernel_rem_pio2+0x26e>
 8010132:	2800      	cmp	r0, #0
 8010134:	d062      	beq.n	80101fc <__kernel_rem_pio2+0x2a4>
 8010136:	3c01      	subs	r4, #1
 8010138:	ab06      	add	r3, sp, #24
 801013a:	3d18      	subs	r5, #24
 801013c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d0f8      	beq.n	8010136 <__kernel_rem_pio2+0x1de>
 8010144:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010148:	4628      	mov	r0, r5
 801014a:	f000 f981 	bl	8010450 <scalbn>
 801014e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8010248 <__kernel_rem_pio2+0x2f0>
 8010152:	1c62      	adds	r2, r4, #1
 8010154:	a96a      	add	r1, sp, #424	@ 0x1a8
 8010156:	00d3      	lsls	r3, r2, #3
 8010158:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801015c:	4622      	mov	r2, r4
 801015e:	2a00      	cmp	r2, #0
 8010160:	f280 80a8 	bge.w	80102b4 <__kernel_rem_pio2+0x35c>
 8010164:	4622      	mov	r2, r4
 8010166:	2a00      	cmp	r2, #0
 8010168:	f2c0 80c6 	blt.w	80102f8 <__kernel_rem_pio2+0x3a0>
 801016c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801016e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010172:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8010240 <__kernel_rem_pio2+0x2e8>
 8010176:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801025c <__kernel_rem_pio2+0x304>
 801017a:	2000      	movs	r0, #0
 801017c:	1aa1      	subs	r1, r4, r2
 801017e:	e0b0      	b.n	80102e2 <__kernel_rem_pio2+0x38a>
 8010180:	2602      	movs	r6, #2
 8010182:	e78f      	b.n	80100a4 <__kernel_rem_pio2+0x14c>
 8010184:	f853 2b04 	ldr.w	r2, [r3], #4
 8010188:	b948      	cbnz	r0, 801019e <__kernel_rem_pio2+0x246>
 801018a:	b122      	cbz	r2, 8010196 <__kernel_rem_pio2+0x23e>
 801018c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8010190:	f843 2c04 	str.w	r2, [r3, #-4]
 8010194:	2201      	movs	r2, #1
 8010196:	f10c 0c01 	add.w	ip, ip, #1
 801019a:	4610      	mov	r0, r2
 801019c:	e789      	b.n	80100b2 <__kernel_rem_pio2+0x15a>
 801019e:	ebae 0202 	sub.w	r2, lr, r2
 80101a2:	e7f5      	b.n	8010190 <__kernel_rem_pio2+0x238>
 80101a4:	1e62      	subs	r2, r4, #1
 80101a6:	ab06      	add	r3, sp, #24
 80101a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80101b0:	a906      	add	r1, sp, #24
 80101b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80101b6:	e784      	b.n	80100c2 <__kernel_rem_pio2+0x16a>
 80101b8:	1e62      	subs	r2, r4, #1
 80101ba:	ab06      	add	r3, sp, #24
 80101bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80101c4:	e7f4      	b.n	80101b0 <__kernel_rem_pio2+0x258>
 80101c6:	ab06      	add	r3, sp, #24
 80101c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101cc:	3a01      	subs	r2, #1
 80101ce:	4318      	orrs	r0, r3
 80101d0:	e7ad      	b.n	801012e <__kernel_rem_pio2+0x1d6>
 80101d2:	3301      	adds	r3, #1
 80101d4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80101d8:	2800      	cmp	r0, #0
 80101da:	d0fa      	beq.n	80101d2 <__kernel_rem_pio2+0x27a>
 80101dc:	9a04      	ldr	r2, [sp, #16]
 80101de:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80101e2:	446a      	add	r2, sp
 80101e4:	eb04 000b 	add.w	r0, r4, fp
 80101e8:	a91a      	add	r1, sp, #104	@ 0x68
 80101ea:	1c66      	adds	r6, r4, #1
 80101ec:	3a98      	subs	r2, #152	@ 0x98
 80101ee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80101f2:	4423      	add	r3, r4
 80101f4:	42b3      	cmp	r3, r6
 80101f6:	da04      	bge.n	8010202 <__kernel_rem_pio2+0x2aa>
 80101f8:	461c      	mov	r4, r3
 80101fa:	e713      	b.n	8010024 <__kernel_rem_pio2+0xcc>
 80101fc:	9a03      	ldr	r2, [sp, #12]
 80101fe:	2301      	movs	r3, #1
 8010200:	e7e8      	b.n	80101d4 <__kernel_rem_pio2+0x27c>
 8010202:	9902      	ldr	r1, [sp, #8]
 8010204:	f8dd c004 	ldr.w	ip, [sp, #4]
 8010208:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801020c:	9104      	str	r1, [sp, #16]
 801020e:	ee07 1a90 	vmov	s15, r1
 8010212:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010216:	2400      	movs	r4, #0
 8010218:	eca0 7b02 	vstmia	r0!, {d7}
 801021c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010240 <__kernel_rem_pio2+0x2e8>
 8010220:	4686      	mov	lr, r0
 8010222:	4554      	cmp	r4, sl
 8010224:	dd03      	ble.n	801022e <__kernel_rem_pio2+0x2d6>
 8010226:	eca2 7b02 	vstmia	r2!, {d7}
 801022a:	3601      	adds	r6, #1
 801022c:	e7e2      	b.n	80101f4 <__kernel_rem_pio2+0x29c>
 801022e:	ecbc 5b02 	vldmia	ip!, {d5}
 8010232:	ed3e 6b02 	vldmdb	lr!, {d6}
 8010236:	3401      	adds	r4, #1
 8010238:	eea5 7b06 	vfma.f64	d7, d5, d6
 801023c:	e7f1      	b.n	8010222 <__kernel_rem_pio2+0x2ca>
 801023e:	bf00      	nop
	...
 801024c:	3e700000 	.word	0x3e700000
 8010250:	00000000 	.word	0x00000000
 8010254:	41700000 	.word	0x41700000
 8010258:	08010bc8 	.word	0x08010bc8
 801025c:	08010b88 	.word	0x08010b88
 8010260:	4268      	negs	r0, r5
 8010262:	eeb0 0b48 	vmov.f64	d0, d8
 8010266:	f000 f8f3 	bl	8010450 <scalbn>
 801026a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8010438 <__kernel_rem_pio2+0x4e0>
 801026e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010276:	db17      	blt.n	80102a8 <__kernel_rem_pio2+0x350>
 8010278:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8010440 <__kernel_rem_pio2+0x4e8>
 801027c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010280:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010284:	aa06      	add	r2, sp, #24
 8010286:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801028a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801028e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010292:	3518      	adds	r5, #24
 8010294:	ee10 3a10 	vmov	r3, s0
 8010298:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801029c:	ee17 3a10 	vmov	r3, s14
 80102a0:	3401      	adds	r4, #1
 80102a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80102a6:	e74d      	b.n	8010144 <__kernel_rem_pio2+0x1ec>
 80102a8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80102ac:	aa06      	add	r2, sp, #24
 80102ae:	ee10 3a10 	vmov	r3, s0
 80102b2:	e7f6      	b.n	80102a2 <__kernel_rem_pio2+0x34a>
 80102b4:	a806      	add	r0, sp, #24
 80102b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80102ba:	9001      	str	r0, [sp, #4]
 80102bc:	ee07 0a90 	vmov	s15, r0
 80102c0:	3a01      	subs	r2, #1
 80102c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80102c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80102ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 80102ce:	ed21 7b02 	vstmdb	r1!, {d7}
 80102d2:	e744      	b.n	801015e <__kernel_rem_pio2+0x206>
 80102d4:	ecbc 5b02 	vldmia	ip!, {d5}
 80102d8:	ecb5 6b02 	vldmia	r5!, {d6}
 80102dc:	3001      	adds	r0, #1
 80102de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80102e2:	4548      	cmp	r0, r9
 80102e4:	dc01      	bgt.n	80102ea <__kernel_rem_pio2+0x392>
 80102e6:	4281      	cmp	r1, r0
 80102e8:	daf4      	bge.n	80102d4 <__kernel_rem_pio2+0x37c>
 80102ea:	a842      	add	r0, sp, #264	@ 0x108
 80102ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80102f0:	ed81 7b00 	vstr	d7, [r1]
 80102f4:	3a01      	subs	r2, #1
 80102f6:	e736      	b.n	8010166 <__kernel_rem_pio2+0x20e>
 80102f8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80102fa:	2a02      	cmp	r2, #2
 80102fc:	dc0a      	bgt.n	8010314 <__kernel_rem_pio2+0x3bc>
 80102fe:	2a00      	cmp	r2, #0
 8010300:	dc2d      	bgt.n	801035e <__kernel_rem_pio2+0x406>
 8010302:	d046      	beq.n	8010392 <__kernel_rem_pio2+0x43a>
 8010304:	f008 0007 	and.w	r0, r8, #7
 8010308:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801030c:	ecbd 8b06 	vpop	{d8-d10}
 8010310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010314:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010316:	2a03      	cmp	r2, #3
 8010318:	d1f4      	bne.n	8010304 <__kernel_rem_pio2+0x3ac>
 801031a:	a942      	add	r1, sp, #264	@ 0x108
 801031c:	f1a3 0208 	sub.w	r2, r3, #8
 8010320:	440a      	add	r2, r1
 8010322:	4611      	mov	r1, r2
 8010324:	4620      	mov	r0, r4
 8010326:	2800      	cmp	r0, #0
 8010328:	f1a1 0108 	sub.w	r1, r1, #8
 801032c:	dc52      	bgt.n	80103d4 <__kernel_rem_pio2+0x47c>
 801032e:	4621      	mov	r1, r4
 8010330:	2901      	cmp	r1, #1
 8010332:	f1a2 0208 	sub.w	r2, r2, #8
 8010336:	dc5d      	bgt.n	80103f4 <__kernel_rem_pio2+0x49c>
 8010338:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8010448 <__kernel_rem_pio2+0x4f0>
 801033c:	aa42      	add	r2, sp, #264	@ 0x108
 801033e:	4413      	add	r3, r2
 8010340:	2c01      	cmp	r4, #1
 8010342:	dc67      	bgt.n	8010414 <__kernel_rem_pio2+0x4bc>
 8010344:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8010348:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801034c:	2e00      	cmp	r6, #0
 801034e:	d167      	bne.n	8010420 <__kernel_rem_pio2+0x4c8>
 8010350:	ed87 5b00 	vstr	d5, [r7]
 8010354:	ed87 6b02 	vstr	d6, [r7, #8]
 8010358:	ed87 7b04 	vstr	d7, [r7, #16]
 801035c:	e7d2      	b.n	8010304 <__kernel_rem_pio2+0x3ac>
 801035e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8010448 <__kernel_rem_pio2+0x4f0>
 8010362:	aa42      	add	r2, sp, #264	@ 0x108
 8010364:	4413      	add	r3, r2
 8010366:	4622      	mov	r2, r4
 8010368:	2a00      	cmp	r2, #0
 801036a:	da24      	bge.n	80103b6 <__kernel_rem_pio2+0x45e>
 801036c:	b34e      	cbz	r6, 80103c2 <__kernel_rem_pio2+0x46a>
 801036e:	eeb1 7b46 	vneg.f64	d7, d6
 8010372:	ed87 7b00 	vstr	d7, [r7]
 8010376:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801037a:	aa44      	add	r2, sp, #272	@ 0x110
 801037c:	2301      	movs	r3, #1
 801037e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010382:	429c      	cmp	r4, r3
 8010384:	da20      	bge.n	80103c8 <__kernel_rem_pio2+0x470>
 8010386:	b10e      	cbz	r6, 801038c <__kernel_rem_pio2+0x434>
 8010388:	eeb1 7b47 	vneg.f64	d7, d7
 801038c:	ed87 7b02 	vstr	d7, [r7, #8]
 8010390:	e7b8      	b.n	8010304 <__kernel_rem_pio2+0x3ac>
 8010392:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8010448 <__kernel_rem_pio2+0x4f0>
 8010396:	aa42      	add	r2, sp, #264	@ 0x108
 8010398:	4413      	add	r3, r2
 801039a:	2c00      	cmp	r4, #0
 801039c:	da05      	bge.n	80103aa <__kernel_rem_pio2+0x452>
 801039e:	b10e      	cbz	r6, 80103a4 <__kernel_rem_pio2+0x44c>
 80103a0:	eeb1 7b47 	vneg.f64	d7, d7
 80103a4:	ed87 7b00 	vstr	d7, [r7]
 80103a8:	e7ac      	b.n	8010304 <__kernel_rem_pio2+0x3ac>
 80103aa:	ed33 6b02 	vldmdb	r3!, {d6}
 80103ae:	3c01      	subs	r4, #1
 80103b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80103b4:	e7f1      	b.n	801039a <__kernel_rem_pio2+0x442>
 80103b6:	ed33 7b02 	vldmdb	r3!, {d7}
 80103ba:	3a01      	subs	r2, #1
 80103bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80103c0:	e7d2      	b.n	8010368 <__kernel_rem_pio2+0x410>
 80103c2:	eeb0 7b46 	vmov.f64	d7, d6
 80103c6:	e7d4      	b.n	8010372 <__kernel_rem_pio2+0x41a>
 80103c8:	ecb2 6b02 	vldmia	r2!, {d6}
 80103cc:	3301      	adds	r3, #1
 80103ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80103d2:	e7d6      	b.n	8010382 <__kernel_rem_pio2+0x42a>
 80103d4:	ed91 7b00 	vldr	d7, [r1]
 80103d8:	ed91 5b02 	vldr	d5, [r1, #8]
 80103dc:	3801      	subs	r0, #1
 80103de:	ee37 6b05 	vadd.f64	d6, d7, d5
 80103e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103e6:	ed81 6b00 	vstr	d6, [r1]
 80103ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 80103ee:	ed81 7b02 	vstr	d7, [r1, #8]
 80103f2:	e798      	b.n	8010326 <__kernel_rem_pio2+0x3ce>
 80103f4:	ed92 7b00 	vldr	d7, [r2]
 80103f8:	ed92 5b02 	vldr	d5, [r2, #8]
 80103fc:	3901      	subs	r1, #1
 80103fe:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010402:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010406:	ed82 6b00 	vstr	d6, [r2]
 801040a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801040e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010412:	e78d      	b.n	8010330 <__kernel_rem_pio2+0x3d8>
 8010414:	ed33 6b02 	vldmdb	r3!, {d6}
 8010418:	3c01      	subs	r4, #1
 801041a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801041e:	e78f      	b.n	8010340 <__kernel_rem_pio2+0x3e8>
 8010420:	eeb1 5b45 	vneg.f64	d5, d5
 8010424:	eeb1 6b46 	vneg.f64	d6, d6
 8010428:	ed87 5b00 	vstr	d5, [r7]
 801042c:	eeb1 7b47 	vneg.f64	d7, d7
 8010430:	ed87 6b02 	vstr	d6, [r7, #8]
 8010434:	e790      	b.n	8010358 <__kernel_rem_pio2+0x400>
 8010436:	bf00      	nop
 8010438:	00000000 	.word	0x00000000
 801043c:	41700000 	.word	0x41700000
 8010440:	00000000 	.word	0x00000000
 8010444:	3e700000 	.word	0x3e700000
	...

08010450 <scalbn>:
 8010450:	ee10 1a90 	vmov	r1, s1
 8010454:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010458:	b98b      	cbnz	r3, 801047e <scalbn+0x2e>
 801045a:	ee10 3a10 	vmov	r3, s0
 801045e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010462:	4319      	orrs	r1, r3
 8010464:	d00a      	beq.n	801047c <scalbn+0x2c>
 8010466:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010518 <scalbn+0xc8>
 801046a:	4b37      	ldr	r3, [pc, #220]	@ (8010548 <scalbn+0xf8>)
 801046c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010470:	4298      	cmp	r0, r3
 8010472:	da0b      	bge.n	801048c <scalbn+0x3c>
 8010474:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010520 <scalbn+0xd0>
 8010478:	ee20 0b07 	vmul.f64	d0, d0, d7
 801047c:	4770      	bx	lr
 801047e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010482:	4293      	cmp	r3, r2
 8010484:	d107      	bne.n	8010496 <scalbn+0x46>
 8010486:	ee30 0b00 	vadd.f64	d0, d0, d0
 801048a:	4770      	bx	lr
 801048c:	ee10 1a90 	vmov	r1, s1
 8010490:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010494:	3b36      	subs	r3, #54	@ 0x36
 8010496:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801049a:	4290      	cmp	r0, r2
 801049c:	dd0d      	ble.n	80104ba <scalbn+0x6a>
 801049e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010528 <scalbn+0xd8>
 80104a2:	ee10 3a90 	vmov	r3, s1
 80104a6:	eeb0 6b47 	vmov.f64	d6, d7
 80104aa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8010530 <scalbn+0xe0>
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80104b4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80104b8:	4770      	bx	lr
 80104ba:	4418      	add	r0, r3
 80104bc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80104c0:	4298      	cmp	r0, r3
 80104c2:	dcec      	bgt.n	801049e <scalbn+0x4e>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	dd0a      	ble.n	80104de <scalbn+0x8e>
 80104c8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80104cc:	ec53 2b10 	vmov	r2, r3, d0
 80104d0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80104d4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80104d8:	ec43 2b10 	vmov	d0, r2, r3
 80104dc:	4770      	bx	lr
 80104de:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80104e2:	da09      	bge.n	80104f8 <scalbn+0xa8>
 80104e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8010520 <scalbn+0xd0>
 80104e8:	ee10 3a90 	vmov	r3, s1
 80104ec:	eeb0 6b47 	vmov.f64	d6, d7
 80104f0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8010538 <scalbn+0xe8>
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	e7db      	b.n	80104b0 <scalbn+0x60>
 80104f8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80104fc:	ec53 2b10 	vmov	r2, r3, d0
 8010500:	3036      	adds	r0, #54	@ 0x36
 8010502:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010506:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801050a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010540 <scalbn+0xf0>
 801050e:	ec43 2b10 	vmov	d0, r2, r3
 8010512:	e7b1      	b.n	8010478 <scalbn+0x28>
 8010514:	f3af 8000 	nop.w
 8010518:	00000000 	.word	0x00000000
 801051c:	43500000 	.word	0x43500000
 8010520:	c2f8f359 	.word	0xc2f8f359
 8010524:	01a56e1f 	.word	0x01a56e1f
 8010528:	8800759c 	.word	0x8800759c
 801052c:	7e37e43c 	.word	0x7e37e43c
 8010530:	8800759c 	.word	0x8800759c
 8010534:	fe37e43c 	.word	0xfe37e43c
 8010538:	c2f8f359 	.word	0xc2f8f359
 801053c:	81a56e1f 	.word	0x81a56e1f
 8010540:	00000000 	.word	0x00000000
 8010544:	3c900000 	.word	0x3c900000
 8010548:	ffff3cb0 	.word	0xffff3cb0
 801054c:	00000000 	.word	0x00000000

08010550 <floor>:
 8010550:	ee10 3a90 	vmov	r3, s1
 8010554:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8010558:	ee10 2a10 	vmov	r2, s0
 801055c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8010560:	2913      	cmp	r1, #19
 8010562:	b530      	push	{r4, r5, lr}
 8010564:	4615      	mov	r5, r2
 8010566:	dc33      	bgt.n	80105d0 <floor+0x80>
 8010568:	2900      	cmp	r1, #0
 801056a:	da18      	bge.n	801059e <floor+0x4e>
 801056c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8010630 <floor+0xe0>
 8010570:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010574:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	dd0a      	ble.n	8010594 <floor+0x44>
 801057e:	2b00      	cmp	r3, #0
 8010580:	da50      	bge.n	8010624 <floor+0xd4>
 8010582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010586:	4313      	orrs	r3, r2
 8010588:	2200      	movs	r2, #0
 801058a:	4293      	cmp	r3, r2
 801058c:	4b2a      	ldr	r3, [pc, #168]	@ (8010638 <floor+0xe8>)
 801058e:	bf08      	it	eq
 8010590:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010594:	4619      	mov	r1, r3
 8010596:	4610      	mov	r0, r2
 8010598:	ec41 0b10 	vmov	d0, r0, r1
 801059c:	e01f      	b.n	80105de <floor+0x8e>
 801059e:	4827      	ldr	r0, [pc, #156]	@ (801063c <floor+0xec>)
 80105a0:	4108      	asrs	r0, r1
 80105a2:	ea03 0400 	and.w	r4, r3, r0
 80105a6:	4314      	orrs	r4, r2
 80105a8:	d019      	beq.n	80105de <floor+0x8e>
 80105aa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010630 <floor+0xe0>
 80105ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 80105b2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80105b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ba:	ddeb      	ble.n	8010594 <floor+0x44>
 80105bc:	2b00      	cmp	r3, #0
 80105be:	bfbe      	ittt	lt
 80105c0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80105c4:	410a      	asrlt	r2, r1
 80105c6:	189b      	addlt	r3, r3, r2
 80105c8:	ea23 0300 	bic.w	r3, r3, r0
 80105cc:	2200      	movs	r2, #0
 80105ce:	e7e1      	b.n	8010594 <floor+0x44>
 80105d0:	2933      	cmp	r1, #51	@ 0x33
 80105d2:	dd05      	ble.n	80105e0 <floor+0x90>
 80105d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80105d8:	d101      	bne.n	80105de <floor+0x8e>
 80105da:	ee30 0b00 	vadd.f64	d0, d0, d0
 80105de:	bd30      	pop	{r4, r5, pc}
 80105e0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80105e4:	f04f 30ff 	mov.w	r0, #4294967295
 80105e8:	40e0      	lsrs	r0, r4
 80105ea:	4210      	tst	r0, r2
 80105ec:	d0f7      	beq.n	80105de <floor+0x8e>
 80105ee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8010630 <floor+0xe0>
 80105f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80105f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80105fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fe:	ddc9      	ble.n	8010594 <floor+0x44>
 8010600:	2b00      	cmp	r3, #0
 8010602:	da02      	bge.n	801060a <floor+0xba>
 8010604:	2914      	cmp	r1, #20
 8010606:	d103      	bne.n	8010610 <floor+0xc0>
 8010608:	3301      	adds	r3, #1
 801060a:	ea22 0200 	bic.w	r2, r2, r0
 801060e:	e7c1      	b.n	8010594 <floor+0x44>
 8010610:	2401      	movs	r4, #1
 8010612:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8010616:	fa04 f101 	lsl.w	r1, r4, r1
 801061a:	440a      	add	r2, r1
 801061c:	42aa      	cmp	r2, r5
 801061e:	bf38      	it	cc
 8010620:	191b      	addcc	r3, r3, r4
 8010622:	e7f2      	b.n	801060a <floor+0xba>
 8010624:	2200      	movs	r2, #0
 8010626:	4613      	mov	r3, r2
 8010628:	e7b4      	b.n	8010594 <floor+0x44>
 801062a:	bf00      	nop
 801062c:	f3af 8000 	nop.w
 8010630:	8800759c 	.word	0x8800759c
 8010634:	7e37e43c 	.word	0x7e37e43c
 8010638:	bff00000 	.word	0xbff00000
 801063c:	000fffff 	.word	0x000fffff

08010640 <_init>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	bf00      	nop
 8010644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010646:	bc08      	pop	{r3}
 8010648:	469e      	mov	lr, r3
 801064a:	4770      	bx	lr

0801064c <_fini>:
 801064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064e:	bf00      	nop
 8010650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010652:	bc08      	pop	{r3}
 8010654:	469e      	mov	lr, r3
 8010656:	4770      	bx	lr
