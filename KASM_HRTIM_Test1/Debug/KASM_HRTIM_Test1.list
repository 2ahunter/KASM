
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1a0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800f440  0800f440  00010440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb10  0800fb10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb18  0800fb18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fb1c  0800fb1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800fb20  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000025f4  240001e0  0800fcfc  000111e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240027d4  0800fcfc  000117d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cd4b  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002db4  00000000  00000000  0002df55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001768  00000000  00000000  00030d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001279  00000000  00000000  00032478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a43c  00000000  00000000  000336f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dd53  00000000  00000000  0006db2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d788  00000000  00000000  0008b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00209008  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076c0  00000000  00000000  0020904c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  0021070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f428 	.word	0x0800f428

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800f428 	.word	0x0800f428

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <read_TIM1_sec>:

//Counter for UART Output in Time-Scale
	static long int period_ticks = 0;
	char buffer[64];

	float read_TIM1_sec(){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
		float time = 0;
 8000686:	f04f 0300 	mov.w	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
		time = period_ticks * PERIOD_SCALE + TIM1->CNT * TICK_SCALE;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <read_TIM1_sec+0x2c>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
		return time;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	ee07 3a90 	vmov	s15, r3
	}
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40010000 	.word	0x40010000

080006b0 <read_TIM1>:



//Counter for UART Output in clock ticks
		uint64_t read_TIM1() {
 80006b0:	b4b0      	push	{r4, r5, r7}
 80006b2:	af00      	add	r7, sp, #0
		//return TIM1->CNT;
		 return TIM1->CNT + sys_timer;
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <read_TIM1+0x28>)
 80006b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b8:	2200      	movs	r2, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	4611      	mov	r1, r2
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <read_TIM1+0x2c>)
 80006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c4:	1884      	adds	r4, r0, r2
 80006c6:	eb41 0503 	adc.w	r5, r1, r3
 80006ca:	4622      	mov	r2, r4
 80006cc:	462b      	mov	r3, r5
	  }
 80006ce:	4610      	mov	r0, r2
 80006d0:	4619      	mov	r1, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bcb0      	pop	{r4, r5, r7}
 80006d6:	4770      	bx	lr
 80006d8:	40010000 	.word	0x40010000
 80006dc:	240025e8 	.word	0x240025e8

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e4:	f001 fe42 	bl	800236c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f002 fd4c 	bl	8003184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 fad6 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f001 fae0 	bl	8001cb4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006f4:	f000 fd82 	bl	80011fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f8:	f000 fe50 	bl	800139c <MX_TIM2_Init>
  MX_TIM4_Init();
 80006fc:	f000 fea8 	bl	8001450 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000700:	f000 ff3e 	bl	8001580 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000704:	f000 ffbe 	bl	8001684 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000708:	f001 f84a 	bl	80017a0 <MX_TIM12_Init>
  MX_TIM13_Init();
 800070c:	f001 f8c0 	bl	8001890 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000710:	f001 f90c 	bl	800192c <MX_TIM14_Init>
  MX_TIM15_Init();
 8000714:	f001 f958 	bl	80019c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000718:	f001 fa06 	bl	8001b28 <MX_TIM16_Init>
  MX_HRTIM_Init();
 800071c:	f000 fb6c 	bl	8000df8 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 8000720:	f000 fd40 	bl	80011a4 <MX_LPTIM1_Init>
  MX_UART4_Init();
 8000724:	f001 fa7a 	bl	8001c1c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start(&htim1);
 8000728:	48c4      	ldr	r0, [pc, #784]	@ (8000a3c <main+0x35c>)
 800072a:	f008 fa61 	bl	8008bf0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 800072e:	48c3      	ldr	r0, [pc, #780]	@ (8000a3c <main+0x35c>)
 8000730:	f008 face 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000734:	2100      	movs	r1, #0
 8000736:	48c1      	ldr	r0, [pc, #772]	@ (8000a3c <main+0x35c>)
 8000738:	f008 fb9a 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	48bf      	ldr	r0, [pc, #764]	@ (8000a3c <main+0x35c>)
 8000740:	f008 fb96 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	48bd      	ldr	r0, [pc, #756]	@ (8000a3c <main+0x35c>)
 8000748:	f008 fb92 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800074c:	210c      	movs	r1, #12
 800074e:	48bb      	ldr	r0, [pc, #748]	@ (8000a3c <main+0x35c>)
 8000750:	f008 fb8e 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000754:	2201      	movs	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	48b9      	ldr	r0, [pc, #740]	@ (8000a40 <main+0x360>)
 800075a:	f003 fe4d 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2102      	movs	r1, #2
 8000762:	48b7      	ldr	r0, [pc, #732]	@ (8000a40 <main+0x360>)
 8000764:	f003 fe48 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2104      	movs	r1, #4
 800076c:	48b4      	ldr	r0, [pc, #720]	@ (8000a40 <main+0x360>)
 800076e:	f003 fe43 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2108      	movs	r1, #8
 8000776:	48b2      	ldr	r0, [pc, #712]	@ (8000a40 <main+0x360>)
 8000778:	f003 fe3e 	bl	80043f8 <HAL_GPIO_WritePin>

			//Timer 1 Init. Message Over UART

			sprintf(message, "Tim1 Init: %d \n\r", read_TIM1());
 800077c:	f7ff ff98 	bl	80006b0 <read_TIM1>
 8000780:	4602      	mov	r2, r0
 8000782:	460b      	mov	r3, r1
 8000784:	49af      	ldr	r1, [pc, #700]	@ (8000a44 <main+0x364>)
 8000786:	48b0      	ldr	r0, [pc, #704]	@ (8000a48 <main+0x368>)
 8000788:	f00b ffc0 	bl	800c70c <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 800078c:	2364      	movs	r3, #100	@ 0x64
 800078e:	2240      	movs	r2, #64	@ 0x40
 8000790:	49ad      	ldr	r1, [pc, #692]	@ (8000a48 <main+0x368>)
 8000792:	48ae      	ldr	r0, [pc, #696]	@ (8000a4c <main+0x36c>)
 8000794:	f009 fd70 	bl	800a278 <HAL_UART_Transmit>


  	  	  	sprintf(buffer, "Tim1 sec: %e \n\r", read_TIM1_sec());
 8000798:	f7ff ff72 	bl	8000680 <read_TIM1_sec>
 800079c:	eef0 7a40 	vmov.f32	s15, s0
 80007a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a4:	ec53 2b17 	vmov	r2, r3, d7
 80007a8:	49a9      	ldr	r1, [pc, #676]	@ (8000a50 <main+0x370>)
 80007aa:	48aa      	ldr	r0, [pc, #680]	@ (8000a54 <main+0x374>)
 80007ac:	f00b ffae 	bl	800c70c <siprintf>
  			HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	2240      	movs	r2, #64	@ 0x40
 80007b6:	49a7      	ldr	r1, [pc, #668]	@ (8000a54 <main+0x374>)
 80007b8:	48a4      	ldr	r0, [pc, #656]	@ (8000a4c <main+0x36c>)
 80007ba:	f009 fd5d 	bl	800a278 <HAL_UART_Transmit>
  			sprintf(buffer, "Tim1 Cnt: %d \n\r", TIM1->CNT);
 80007be:	4ba6      	ldr	r3, [pc, #664]	@ (8000a58 <main+0x378>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007c2:	461a      	mov	r2, r3
 80007c4:	49a5      	ldr	r1, [pc, #660]	@ (8000a5c <main+0x37c>)
 80007c6:	48a3      	ldr	r0, [pc, #652]	@ (8000a54 <main+0x374>)
 80007c8:	f00b ffa0 	bl	800c70c <siprintf>
  			HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	2240      	movs	r2, #64	@ 0x40
 80007d2:	49a0      	ldr	r1, [pc, #640]	@ (8000a54 <main+0x374>)
 80007d4:	489d      	ldr	r0, [pc, #628]	@ (8000a4c <main+0x36c>)
 80007d6:	f009 fd4f 	bl	800a278 <HAL_UART_Transmit>
  			sprintf(buffer, "Per Cnt: %d \n\r", period_ticks);
 80007da:	4ba1      	ldr	r3, [pc, #644]	@ (8000a60 <main+0x380>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	49a0      	ldr	r1, [pc, #640]	@ (8000a64 <main+0x384>)
 80007e2:	489c      	ldr	r0, [pc, #624]	@ (8000a54 <main+0x374>)
 80007e4:	f00b ff92 	bl	800c70c <siprintf>
  			HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2240      	movs	r2, #64	@ 0x40
 80007ee:	4999      	ldr	r1, [pc, #612]	@ (8000a54 <main+0x374>)
 80007f0:	4896      	ldr	r0, [pc, #600]	@ (8000a4c <main+0x36c>)
 80007f2:	f009 fd41 	bl	800a278 <HAL_UART_Transmit>
  //End Timer 1



  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 80007f6:	489c      	ldr	r0, [pc, #624]	@ (8000a68 <main+0x388>)
 80007f8:	f008 fa6a 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007fc:	2100      	movs	r1, #0
 80007fe:	489a      	ldr	r0, [pc, #616]	@ (8000a68 <main+0x388>)
 8000800:	f008 fb36 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2110      	movs	r1, #16
 8000808:	488d      	ldr	r0, [pc, #564]	@ (8000a40 <main+0x360>)
 800080a:	f003 fdf5 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	//Timer 2 Init. Message Over UART

  			sprintf(message, "Tim2 Init: %d \n\r", read_TIM1());
 800080e:	f7ff ff4f 	bl	80006b0 <read_TIM1>
 8000812:	4602      	mov	r2, r0
 8000814:	460b      	mov	r3, r1
 8000816:	4995      	ldr	r1, [pc, #596]	@ (8000a6c <main+0x38c>)
 8000818:	488b      	ldr	r0, [pc, #556]	@ (8000a48 <main+0x368>)
 800081a:	f00b ff77 	bl	800c70c <siprintf>
  			HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 800081e:	2364      	movs	r3, #100	@ 0x64
 8000820:	2240      	movs	r2, #64	@ 0x40
 8000822:	4989      	ldr	r1, [pc, #548]	@ (8000a48 <main+0x368>)
 8000824:	4889      	ldr	r0, [pc, #548]	@ (8000a4c <main+0x36c>)
 8000826:	f009 fd27 	bl	800a278 <HAL_UART_Transmit>

  	  	  	sprintf(buffer, "Tim2 sec: %e \n\r", read_TIM1_sec());
 800082a:	f7ff ff29 	bl	8000680 <read_TIM1_sec>
 800082e:	eef0 7a40 	vmov.f32	s15, s0
 8000832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000836:	ec53 2b17 	vmov	r2, r3, d7
 800083a:	498d      	ldr	r1, [pc, #564]	@ (8000a70 <main+0x390>)
 800083c:	4885      	ldr	r0, [pc, #532]	@ (8000a54 <main+0x374>)
 800083e:	f00b ff65 	bl	800c70c <siprintf>
    		HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	2240      	movs	r2, #64	@ 0x40
 8000848:	4982      	ldr	r1, [pc, #520]	@ (8000a54 <main+0x374>)
 800084a:	4880      	ldr	r0, [pc, #512]	@ (8000a4c <main+0x36c>)
 800084c:	f009 fd14 	bl	800a278 <HAL_UART_Transmit>
    		sprintf(buffer, "Tim1 Cnt: %d \n\r", TIM1->CNT);
 8000850:	4b81      	ldr	r3, [pc, #516]	@ (8000a58 <main+0x378>)
 8000852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000854:	461a      	mov	r2, r3
 8000856:	4981      	ldr	r1, [pc, #516]	@ (8000a5c <main+0x37c>)
 8000858:	487e      	ldr	r0, [pc, #504]	@ (8000a54 <main+0x374>)
 800085a:	f00b ff57 	bl	800c70c <siprintf>
    		HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2240      	movs	r2, #64	@ 0x40
 8000864:	497b      	ldr	r1, [pc, #492]	@ (8000a54 <main+0x374>)
 8000866:	4879      	ldr	r0, [pc, #484]	@ (8000a4c <main+0x36c>)
 8000868:	f009 fd06 	bl	800a278 <HAL_UART_Transmit>
    		sprintf(buffer, "Per Cnt: %d \n\r", period_ticks);
 800086c:	4b7c      	ldr	r3, [pc, #496]	@ (8000a60 <main+0x380>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	497c      	ldr	r1, [pc, #496]	@ (8000a64 <main+0x384>)
 8000874:	4877      	ldr	r0, [pc, #476]	@ (8000a54 <main+0x374>)
 8000876:	f00b ff49 	bl	800c70c <siprintf>
    		HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	2240      	movs	r2, #64	@ 0x40
 8000880:	4974      	ldr	r1, [pc, #464]	@ (8000a54 <main+0x374>)
 8000882:	4872      	ldr	r0, [pc, #456]	@ (8000a4c <main+0x36c>)
 8000884:	f009 fcf8 	bl	800a278 <HAL_UART_Transmit>
  //End Timer 2



  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <main+0x394>)
 800088a:	f008 fa21 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800088e:	2100      	movs	r1, #0
 8000890:	4878      	ldr	r0, [pc, #480]	@ (8000a74 <main+0x394>)
 8000892:	f008 faed 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000896:	2104      	movs	r1, #4
 8000898:	4876      	ldr	r0, [pc, #472]	@ (8000a74 <main+0x394>)
 800089a:	f008 fae9 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800089e:	2108      	movs	r1, #8
 80008a0:	4874      	ldr	r0, [pc, #464]	@ (8000a74 <main+0x394>)
 80008a2:	f008 fae5 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008a6:	210c      	movs	r1, #12
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <main+0x394>)
 80008aa:	f008 fae1 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b4:	4870      	ldr	r0, [pc, #448]	@ (8000a78 <main+0x398>)
 80008b6:	f003 fd9f 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c0:	486d      	ldr	r0, [pc, #436]	@ (8000a78 <main+0x398>)
 80008c2:	f003 fd99 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <main+0x39c>)
 80008ce:	f003 fd93 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d8:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <main+0x39c>)
 80008da:	f003 fd8d 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 4 Init. Message Over UART
    		  sprintf(message, "Tim4 Init: %d \n\r", read_TIM1());
 80008de:	f7ff fee7 	bl	80006b0 <read_TIM1>
 80008e2:	4602      	mov	r2, r0
 80008e4:	460b      	mov	r3, r1
 80008e6:	4966      	ldr	r1, [pc, #408]	@ (8000a80 <main+0x3a0>)
 80008e8:	4857      	ldr	r0, [pc, #348]	@ (8000a48 <main+0x368>)
 80008ea:	f00b ff0f 	bl	800c70c <siprintf>
    		  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 80008ee:	2364      	movs	r3, #100	@ 0x64
 80008f0:	2240      	movs	r2, #64	@ 0x40
 80008f2:	4955      	ldr	r1, [pc, #340]	@ (8000a48 <main+0x368>)
 80008f4:	4855      	ldr	r0, [pc, #340]	@ (8000a4c <main+0x36c>)
 80008f6:	f009 fcbf 	bl	800a278 <HAL_UART_Transmit>


  	  	  	  sprintf(buffer, "Tim4 sec: %e \n\r", read_TIM1_sec());
 80008fa:	f7ff fec1 	bl	8000680 <read_TIM1_sec>
 80008fe:	eef0 7a40 	vmov.f32	s15, s0
 8000902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000906:	ec53 2b17 	vmov	r2, r3, d7
 800090a:	495e      	ldr	r1, [pc, #376]	@ (8000a84 <main+0x3a4>)
 800090c:	4851      	ldr	r0, [pc, #324]	@ (8000a54 <main+0x374>)
 800090e:	f00b fefd 	bl	800c70c <siprintf>
      		  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	2240      	movs	r2, #64	@ 0x40
 8000918:	494e      	ldr	r1, [pc, #312]	@ (8000a54 <main+0x374>)
 800091a:	484c      	ldr	r0, [pc, #304]	@ (8000a4c <main+0x36c>)
 800091c:	f009 fcac 	bl	800a278 <HAL_UART_Transmit>
      		  sprintf(buffer, "Tim1 Cnt: %d \n\r", TIM1->CNT);
 8000920:	4b4d      	ldr	r3, [pc, #308]	@ (8000a58 <main+0x378>)
 8000922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000924:	461a      	mov	r2, r3
 8000926:	494d      	ldr	r1, [pc, #308]	@ (8000a5c <main+0x37c>)
 8000928:	484a      	ldr	r0, [pc, #296]	@ (8000a54 <main+0x374>)
 800092a:	f00b feef 	bl	800c70c <siprintf>
      		  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	2240      	movs	r2, #64	@ 0x40
 8000934:	4947      	ldr	r1, [pc, #284]	@ (8000a54 <main+0x374>)
 8000936:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <main+0x36c>)
 8000938:	f009 fc9e 	bl	800a278 <HAL_UART_Transmit>
      		  sprintf(buffer, "Per Cnt: %d \n\r", period_ticks);
 800093c:	4b48      	ldr	r3, [pc, #288]	@ (8000a60 <main+0x380>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4948      	ldr	r1, [pc, #288]	@ (8000a64 <main+0x384>)
 8000944:	4843      	ldr	r0, [pc, #268]	@ (8000a54 <main+0x374>)
 8000946:	f00b fee1 	bl	800c70c <siprintf>
      		  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2240      	movs	r2, #64	@ 0x40
 8000950:	4940      	ldr	r1, [pc, #256]	@ (8000a54 <main+0x374>)
 8000952:	483e      	ldr	r0, [pc, #248]	@ (8000a4c <main+0x36c>)
 8000954:	f009 fc90 	bl	800a278 <HAL_UART_Transmit>
  //End Timer 4



  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 8000958:	484b      	ldr	r0, [pc, #300]	@ (8000a88 <main+0x3a8>)
 800095a:	f008 f9b9 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800095e:	2104      	movs	r1, #4
 8000960:	4849      	ldr	r0, [pc, #292]	@ (8000a88 <main+0x3a8>)
 8000962:	f008 fa85 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000966:	2108      	movs	r1, #8
 8000968:	4847      	ldr	r0, [pc, #284]	@ (8000a88 <main+0x3a8>)
 800096a:	f008 fa81 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000974:	4841      	ldr	r0, [pc, #260]	@ (8000a7c <main+0x39c>)
 8000976:	f003 fd3f 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000980:	483e      	ldr	r0, [pc, #248]	@ (8000a7c <main+0x39c>)
 8000982:	f003 fd39 	bl	80043f8 <HAL_GPIO_WritePin>


  	  	  	  //Timer 5 Init. Message Over UART
      		  sprintf(message, "Tim5 Init: %d \n\r", read_TIM1());
 8000986:	f7ff fe93 	bl	80006b0 <read_TIM1>
 800098a:	4602      	mov	r2, r0
 800098c:	460b      	mov	r3, r1
 800098e:	493f      	ldr	r1, [pc, #252]	@ (8000a8c <main+0x3ac>)
 8000990:	482d      	ldr	r0, [pc, #180]	@ (8000a48 <main+0x368>)
 8000992:	f00b febb 	bl	800c70c <siprintf>
      		  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000996:	2364      	movs	r3, #100	@ 0x64
 8000998:	2240      	movs	r2, #64	@ 0x40
 800099a:	492b      	ldr	r1, [pc, #172]	@ (8000a48 <main+0x368>)
 800099c:	482b      	ldr	r0, [pc, #172]	@ (8000a4c <main+0x36c>)
 800099e:	f009 fc6b 	bl	800a278 <HAL_UART_Transmit>


  	  	  	  sprintf(buffer, "Tim5 sec: %e \n\r", read_TIM1_sec());
 80009a2:	f7ff fe6d 	bl	8000680 <read_TIM1_sec>
 80009a6:	eef0 7a40 	vmov.f32	s15, s0
 80009aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ae:	ec53 2b17 	vmov	r2, r3, d7
 80009b2:	4937      	ldr	r1, [pc, #220]	@ (8000a90 <main+0x3b0>)
 80009b4:	4827      	ldr	r0, [pc, #156]	@ (8000a54 <main+0x374>)
 80009b6:	f00b fea9 	bl	800c70c <siprintf>
        	  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2240      	movs	r2, #64	@ 0x40
 80009c0:	4924      	ldr	r1, [pc, #144]	@ (8000a54 <main+0x374>)
 80009c2:	4822      	ldr	r0, [pc, #136]	@ (8000a4c <main+0x36c>)
 80009c4:	f009 fc58 	bl	800a278 <HAL_UART_Transmit>
        	  sprintf(buffer, "Tim1 Cnt: %d \n\r", TIM1->CNT);
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <main+0x378>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009cc:	461a      	mov	r2, r3
 80009ce:	4923      	ldr	r1, [pc, #140]	@ (8000a5c <main+0x37c>)
 80009d0:	4820      	ldr	r0, [pc, #128]	@ (8000a54 <main+0x374>)
 80009d2:	f00b fe9b 	bl	800c70c <siprintf>
        	  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	2240      	movs	r2, #64	@ 0x40
 80009dc:	491d      	ldr	r1, [pc, #116]	@ (8000a54 <main+0x374>)
 80009de:	481b      	ldr	r0, [pc, #108]	@ (8000a4c <main+0x36c>)
 80009e0:	f009 fc4a 	bl	800a278 <HAL_UART_Transmit>
        	  sprintf(buffer, "Per Cnt: %d \n\r", period_ticks);
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <main+0x380>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	491e      	ldr	r1, [pc, #120]	@ (8000a64 <main+0x384>)
 80009ec:	4819      	ldr	r0, [pc, #100]	@ (8000a54 <main+0x374>)
 80009ee:	f00b fe8d 	bl	800c70c <siprintf>
        	  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	2240      	movs	r2, #64	@ 0x40
 80009f8:	4916      	ldr	r1, [pc, #88]	@ (8000a54 <main+0x374>)
 80009fa:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <main+0x36c>)
 80009fc:	f009 fc3c 	bl	800a278 <HAL_UART_Transmit>
        	  //End UART Transmit
  //End Timer 5


  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 8000a00:	4824      	ldr	r0, [pc, #144]	@ (8000a94 <main+0x3b4>)
 8000a02:	f008 f965 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a06:	210c      	movs	r1, #12
 8000a08:	4822      	ldr	r0, [pc, #136]	@ (8000a94 <main+0x3b4>)
 8000a0a:	f008 fa31 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <main+0x360>)
 8000a14:	f003 fcf0 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 8 Init. Message Over UART

        	  sprintf(message, "Tim8 Init: %d \n\r", read_TIM1());
 8000a18:	f7ff fe4a 	bl	80006b0 <read_TIM1>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	460b      	mov	r3, r1
 8000a20:	491d      	ldr	r1, [pc, #116]	@ (8000a98 <main+0x3b8>)
 8000a22:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <main+0x368>)
 8000a24:	f00b fe72 	bl	800c70c <siprintf>
        	  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	2240      	movs	r2, #64	@ 0x40
 8000a2c:	4906      	ldr	r1, [pc, #24]	@ (8000a48 <main+0x368>)
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <main+0x36c>)
 8000a30:	f009 fc22 	bl	800a278 <HAL_UART_Transmit>

  //End Timer 8


  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 8000a34:	4819      	ldr	r0, [pc, #100]	@ (8000a9c <main+0x3bc>)
 8000a36:	f008 f94b 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
 8000a3a:	e031      	b.n	8000aa0 <main+0x3c0>
 8000a3c:	24000310 	.word	0x24000310
 8000a40:	58021000 	.word	0x58021000
 8000a44:	0800f440 	.word	0x0800f440
 8000a48:	240025f0 	.word	0x240025f0
 8000a4c:	24000608 	.word	0x24000608
 8000a50:	0800f454 	.word	0x0800f454
 8000a54:	24002634 	.word	0x24002634
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	0800f464 	.word	0x0800f464
 8000a60:	24002630 	.word	0x24002630
 8000a64:	0800f474 	.word	0x0800f474
 8000a68:	2400035c 	.word	0x2400035c
 8000a6c:	0800f484 	.word	0x0800f484
 8000a70:	0800f498 	.word	0x0800f498
 8000a74:	240003a8 	.word	0x240003a8
 8000a78:	58020400 	.word	0x58020400
 8000a7c:	58020800 	.word	0x58020800
 8000a80:	0800f4a8 	.word	0x0800f4a8
 8000a84:	0800f4bc 	.word	0x0800f4bc
 8000a88:	240003f4 	.word	0x240003f4
 8000a8c:	0800f4cc 	.word	0x0800f4cc
 8000a90:	0800f4e0 	.word	0x0800f4e0
 8000a94:	24000440 	.word	0x24000440
 8000a98:	0800f4f0 	.word	0x0800f4f0
 8000a9c:	2400048c 	.word	0x2400048c
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4869      	ldr	r0, [pc, #420]	@ (8000c48 <main+0x568>)
 8000aa4:	f008 f9e4 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aae:	4867      	ldr	r0, [pc, #412]	@ (8000c4c <main+0x56c>)
 8000ab0:	f003 fca2 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 12 Init. Message Over UART
         	  sprintf(message, "Tim12 Init: %d \n\r", read_TIM1());
 8000ab4:	f7ff fdfc 	bl	80006b0 <read_TIM1>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	460b      	mov	r3, r1
 8000abc:	4964      	ldr	r1, [pc, #400]	@ (8000c50 <main+0x570>)
 8000abe:	4865      	ldr	r0, [pc, #404]	@ (8000c54 <main+0x574>)
 8000ac0:	f00b fe24 	bl	800c70c <siprintf>
         	  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000ac4:	2364      	movs	r3, #100	@ 0x64
 8000ac6:	2240      	movs	r2, #64	@ 0x40
 8000ac8:	4962      	ldr	r1, [pc, #392]	@ (8000c54 <main+0x574>)
 8000aca:	4863      	ldr	r0, [pc, #396]	@ (8000c58 <main+0x578>)
 8000acc:	f009 fbd4 	bl	800a278 <HAL_UART_Transmit>

  //End Timer 12


  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 8000ad0:	4862      	ldr	r0, [pc, #392]	@ (8000c5c <main+0x57c>)
 8000ad2:	f008 f8fd 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4860      	ldr	r0, [pc, #384]	@ (8000c5c <main+0x57c>)
 8000ada:	f008 f9c9 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae4:	4859      	ldr	r0, [pc, #356]	@ (8000c4c <main+0x56c>)
 8000ae6:	f003 fc87 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 13 Init. Message Over UART

           	  sprintf(message, "Tim13 Init: %d \n\r", read_TIM1());
 8000aea:	f7ff fde1 	bl	80006b0 <read_TIM1>
 8000aee:	4602      	mov	r2, r0
 8000af0:	460b      	mov	r3, r1
 8000af2:	495b      	ldr	r1, [pc, #364]	@ (8000c60 <main+0x580>)
 8000af4:	4857      	ldr	r0, [pc, #348]	@ (8000c54 <main+0x574>)
 8000af6:	f00b fe09 	bl	800c70c <siprintf>
           	  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000afa:	2364      	movs	r3, #100	@ 0x64
 8000afc:	2240      	movs	r2, #64	@ 0x40
 8000afe:	4955      	ldr	r1, [pc, #340]	@ (8000c54 <main+0x574>)
 8000b00:	4855      	ldr	r0, [pc, #340]	@ (8000c58 <main+0x578>)
 8000b02:	f009 fbb9 	bl	800a278 <HAL_UART_Transmit>

  //End Timer 13


  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 8000b06:	4857      	ldr	r0, [pc, #348]	@ (8000c64 <main+0x584>)
 8000b08:	f008 f8e2 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4855      	ldr	r0, [pc, #340]	@ (8000c64 <main+0x584>)
 8000b10:	f008 f9ae 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1a:	484c      	ldr	r0, [pc, #304]	@ (8000c4c <main+0x56c>)
 8000b1c:	f003 fc6c 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 14 Init. Message Over UART
           	  sprintf(message, "Tim14 Init: %d \n\r", read_TIM1());
 8000b20:	f7ff fdc6 	bl	80006b0 <read_TIM1>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	494f      	ldr	r1, [pc, #316]	@ (8000c68 <main+0x588>)
 8000b2a:	484a      	ldr	r0, [pc, #296]	@ (8000c54 <main+0x574>)
 8000b2c:	f00b fdee 	bl	800c70c <siprintf>
           	  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000b30:	2364      	movs	r3, #100	@ 0x64
 8000b32:	2240      	movs	r2, #64	@ 0x40
 8000b34:	4947      	ldr	r1, [pc, #284]	@ (8000c54 <main+0x574>)
 8000b36:	4848      	ldr	r0, [pc, #288]	@ (8000c58 <main+0x578>)
 8000b38:	f009 fb9e 	bl	800a278 <HAL_UART_Transmit>

  //End Timer 14


  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 8000b3c:	484b      	ldr	r0, [pc, #300]	@ (8000c6c <main+0x58c>)
 8000b3e:	f008 f8c7 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000b42:	2100      	movs	r1, #0
 8000b44:	4849      	ldr	r0, [pc, #292]	@ (8000c6c <main+0x58c>)
 8000b46:	f008 f993 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4847      	ldr	r0, [pc, #284]	@ (8000c6c <main+0x58c>)
 8000b4e:	f008 f98f 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <main+0x56c>)
 8000b5a:	f003 fc4d 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2101      	movs	r1, #1
 8000b62:	4843      	ldr	r0, [pc, #268]	@ (8000c70 <main+0x590>)
 8000b64:	f003 fc48 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 15 Init. Message Over UART
           	  sprintf(message, "Tim15 Init: %d \n\r", read_TIM1());
 8000b68:	f7ff fda2 	bl	80006b0 <read_TIM1>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4940      	ldr	r1, [pc, #256]	@ (8000c74 <main+0x594>)
 8000b72:	4838      	ldr	r0, [pc, #224]	@ (8000c54 <main+0x574>)
 8000b74:	f00b fdca 	bl	800c70c <siprintf>
           	  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	2240      	movs	r2, #64	@ 0x40
 8000b7c:	4935      	ldr	r1, [pc, #212]	@ (8000c54 <main+0x574>)
 8000b7e:	4836      	ldr	r0, [pc, #216]	@ (8000c58 <main+0x578>)
 8000b80:	f009 fb7a 	bl	800a278 <HAL_UART_Transmit>
           	  //End UART Transmit
  //End Timer 15


  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000b84:	483c      	ldr	r0, [pc, #240]	@ (8000c78 <main+0x598>)
 8000b86:	f008 f8a3 	bl	8008cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	483a      	ldr	r0, [pc, #232]	@ (8000c78 <main+0x598>)
 8000b8e:	f008 f96f 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4836      	ldr	r0, [pc, #216]	@ (8000c70 <main+0x590>)
 8000b98:	f003 fc2e 	bl	80043f8 <HAL_GPIO_WritePin>

  	  	  	  //Timer 16 Init. Message Over UART
              sprintf(message, "Tim16 Init: %d \n\r", read_TIM1());
 8000b9c:	f7ff fd88 	bl	80006b0 <read_TIM1>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	4935      	ldr	r1, [pc, #212]	@ (8000c7c <main+0x59c>)
 8000ba6:	482b      	ldr	r0, [pc, #172]	@ (8000c54 <main+0x574>)
 8000ba8:	f00b fdb0 	bl	800c70c <siprintf>
              HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000bac:	2364      	movs	r3, #100	@ 0x64
 8000bae:	2240      	movs	r2, #64	@ 0x40
 8000bb0:	4928      	ldr	r1, [pc, #160]	@ (8000c54 <main+0x574>)
 8000bb2:	4829      	ldr	r0, [pc, #164]	@ (8000c58 <main+0x578>)
 8000bb4:	f009 fb60 	bl	800a278 <HAL_UART_Transmit>
  //HRTIM CODE GOES HERE ********

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 8000bb8:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <main+0x5a0>)
 8000bba:	22ff      	movs	r2, #255	@ 0xff
 8000bbc:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <main+0x5a0>)
 8000bc2:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 8000bc6:	601a      	str	r2, [r3, #0]

     //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);

     	 	 //HRTIM Init. Message Over UART
             sprintf(message, "HRTIM Init: %d \n\r", read_TIM1());
 8000bc8:	f7ff fd72 	bl	80006b0 <read_TIM1>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	492c      	ldr	r1, [pc, #176]	@ (8000c84 <main+0x5a4>)
 8000bd2:	4820      	ldr	r0, [pc, #128]	@ (8000c54 <main+0x574>)
 8000bd4:	f00b fd9a 	bl	800c70c <siprintf>
             HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000bd8:	2364      	movs	r3, #100	@ 0x64
 8000bda:	2240      	movs	r2, #64	@ 0x40
 8000bdc:	491d      	ldr	r1, [pc, #116]	@ (8000c54 <main+0x574>)
 8000bde:	481e      	ldr	r0, [pc, #120]	@ (8000c58 <main+0x578>)
 8000be0:	f009 fb4a 	bl	800a278 <HAL_UART_Transmit>
             //End UART Transmit
  //END HRTIM CODE


  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 8000be4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000be8:	4827      	ldr	r0, [pc, #156]	@ (8000c88 <main+0x5a8>)
 8000bea:	f004 fe04 	bl	80057f6 <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000bf6:	4824      	ldr	r0, [pc, #144]	@ (8000c88 <main+0x5a8>)
 8000bf8:	f004 fdb0 	bl	800575c <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2104      	movs	r1, #4
 8000c00:	481b      	ldr	r0, [pc, #108]	@ (8000c70 <main+0x590>)
 8000c02:	f003 fbf9 	bl	80043f8 <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <main+0x5ac>)
 8000c08:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000c0c:	619a      	str	r2, [r3, #24]

       		//LPTIM Init. Message Over UART
       	    sprintf(message, "LPTIM Init: %d \n\r", read_TIM1());
 8000c0e:	f7ff fd4f 	bl	80006b0 <read_TIM1>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	491e      	ldr	r1, [pc, #120]	@ (8000c90 <main+0x5b0>)
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <main+0x574>)
 8000c1a:	f00b fd77 	bl	800c70c <siprintf>
       	    HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
 8000c1e:	2364      	movs	r3, #100	@ 0x64
 8000c20:	2240      	movs	r2, #64	@ 0x40
 8000c22:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <main+0x574>)
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <main+0x578>)
 8000c26:	f009 fb27 	bl	800a278 <HAL_UART_Transmit>
       	    //End UART Transmit
  //End Low Power Timer

   gen_sine();
 8000c2a:	f001 fb69 	bl	8002300 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <main+0x5b4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d1fb      	bne.n	8000c2e <main+0x54e>
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <main+0x5b8>)
 8000c38:	ed93 7b00 	vldr	d7, [r3]
 8000c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c40:	f001 f96a 	bl	8001f18 <control_update>
 8000c44:	e7f3      	b.n	8000c2e <main+0x54e>
 8000c46:	bf00      	nop
 8000c48:	2400048c 	.word	0x2400048c
 8000c4c:	58021000 	.word	0x58021000
 8000c50:	0800f504 	.word	0x0800f504
 8000c54:	240025f0 	.word	0x240025f0
 8000c58:	24000608 	.word	0x24000608
 8000c5c:	240004d8 	.word	0x240004d8
 8000c60:	0800f518 	.word	0x0800f518
 8000c64:	24000524 	.word	0x24000524
 8000c68:	0800f52c 	.word	0x0800f52c
 8000c6c:	24000570 	.word	0x24000570
 8000c70:	58020c00 	.word	0x58020c00
 8000c74:	0800f540 	.word	0x0800f540
 8000c78:	240005bc 	.word	0x240005bc
 8000c7c:	0800f554 	.word	0x0800f554
 8000c80:	40017400 	.word	0x40017400
 8000c84:	0800f568 	.word	0x0800f568
 8000c88:	240002d8 	.word	0x240002d8
 8000c8c:	40002400 	.word	0x40002400
 8000c90:	0800f57c 	.word	0x0800f57c
 8000c94:	2400069c 	.word	0x2400069c
 8000c98:	240006a0 	.word	0x240006a0

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09e      	sub	sp, #120	@ 0x78
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca6:	224c      	movs	r2, #76	@ 0x4c
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00b fd91 	bl	800c7d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f00b fd8a 	bl	800c7d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f005 f8f2 	bl	8005ea8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b48      	ldr	r3, [pc, #288]	@ (8000dec <SystemClock_Config+0x150>)
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	4a47      	ldr	r2, [pc, #284]	@ (8000dec <SystemClock_Config+0x150>)
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cd4:	4b45      	ldr	r3, [pc, #276]	@ (8000dec <SystemClock_Config+0x150>)
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b44      	ldr	r3, [pc, #272]	@ (8000df0 <SystemClock_Config+0x154>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a43      	ldr	r2, [pc, #268]	@ (8000df0 <SystemClock_Config+0x154>)
 8000ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b41      	ldr	r3, [pc, #260]	@ (8000df0 <SystemClock_Config+0x154>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf6:	bf00      	nop
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <SystemClock_Config+0x154>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d04:	d1f8      	bne.n	8000cf8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <SystemClock_Config+0x158>)
 8000d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d0c:	4a39      	ldr	r2, [pc, #228]	@ (8000df4 <SystemClock_Config+0x158>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d16:	4b37      	ldr	r3, [pc, #220]	@ (8000df4 <SystemClock_Config+0x158>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <SystemClock_Config+0x154>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <SystemClock_Config+0x154>)
 8000d2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <SystemClock_Config+0x154>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <SystemClock_Config+0x150>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d42:	4a2a      	ldr	r2, [pc, #168]	@ (8000dec <SystemClock_Config+0x150>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d4a:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <SystemClock_Config+0x150>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d56:	bf00      	nop
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <SystemClock_Config+0x154>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d64:	d1f8      	bne.n	8000d58 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d74:	2302      	movs	r3, #2
 8000d76:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000d7c:	2350      	movs	r3, #80	@ 0x50
 8000d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 f8bd 	bl	8005f1c <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000da8:	f001 fb0c 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	233f      	movs	r3, #63	@ 0x3f
 8000dae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2303      	movs	r3, #3
 8000db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000db8:	2308      	movs	r3, #8
 8000dba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dbc:	2340      	movs	r3, #64	@ 0x40
 8000dbe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc0:	2340      	movs	r3, #64	@ 0x40
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fcfb 	bl	80067d0 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000de0:	f001 faf0 	bl	80023c4 <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3778      	adds	r7, #120	@ 0x78
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58000400 	.word	0x58000400
 8000df0:	58024800 	.word	0x58024800
 8000df4:	58024400 	.word	0x58024400

08000df8 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0aa      	sub	sp, #168	@ 0xa8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000dfe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000e0e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000e1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e20:	2254      	movs	r2, #84	@ 0x54
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00b fcd4 	bl	800c7d2 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f00b fcc8 	bl	800c7d2 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000e42:	4bc4      	ldr	r3, [pc, #784]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000e44:	4ac4      	ldr	r2, [pc, #784]	@ (8001158 <MX_HRTIM_Init+0x360>)
 8000e46:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000e48:	4bc2      	ldr	r3, [pc, #776]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000e4e:	4bc1      	ldr	r3, [pc, #772]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000e54:	48bf      	ldr	r0, [pc, #764]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000e56:	f003 fae9 	bl	800442c <HAL_HRTIM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000e60:	f001 fab0 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	48bb      	ldr	r0, [pc, #748]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000e68:	f003 fc07 	bl	800467a <HAL_HRTIM_EventPrescalerConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000e72:	f001 faa7 	bl	80023c4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000e82:	2308      	movs	r3, #8
 8000e84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000e8e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e92:	461a      	mov	r2, r3
 8000e94:	2101      	movs	r1, #1
 8000e96:	48af      	ldr	r0, [pc, #700]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000e98:	f003 fbc0 	bl	800461c <HAL_HRTIM_EventConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000ea2:	f001 fa8f 	bl	80023c4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000ea6:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000ec0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	48a2      	ldr	r0, [pc, #648]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000eca:	f003 fb7f 	bl	80045cc <HAL_HRTIM_TimeBaseConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000ed4:	f001 fa76 	bl	80023c4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000efc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f00:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000f2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000f34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4885      	ldr	r0, [pc, #532]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000f3e:	f003 fbd5 	bl	80046ec <HAL_HRTIM_WaveformTimerConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000f48:	f001 fa3c 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000f4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f50:	461a      	mov	r2, r3
 8000f52:	2101      	movs	r1, #1
 8000f54:	487f      	ldr	r0, [pc, #508]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000f56:	f003 fbc9 	bl	80046ec <HAL_HRTIM_WaveformTimerConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000f60:	f001 fa30 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4879      	ldr	r0, [pc, #484]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000f6e:	f003 fbbd 	bl	80046ec <HAL_HRTIM_WaveformTimerConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000f78:	f001 fa24 	bl	80023c4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000f80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f84:	461a      	mov	r2, r3
 8000f86:	2103      	movs	r1, #3
 8000f88:	4872      	ldr	r0, [pc, #456]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000f8a:	f003 fbaf 	bl	80046ec <HAL_HRTIM_WaveformTimerConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000f94:	f001 fa16 	bl	80023c4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000f98:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	486b      	ldr	r0, [pc, #428]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000fa8:	f003 fc12 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000fb2:	f001 fa07 	bl	80023c4 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4863      	ldr	r0, [pc, #396]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000fc8:	f003 fc02 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000fd2:	f001 f9f7 	bl	80023c4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	2202      	movs	r2, #2
 8000fdc:	2101      	movs	r1, #1
 8000fde:	485d      	ldr	r0, [pc, #372]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000fe0:	f003 fbf6 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000fea:	f001 f9eb 	bl	80023c4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4857      	ldr	r0, [pc, #348]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8000ff8:	f003 fbea 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8001002:	f001 f9df 	bl	80023c4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	2202      	movs	r2, #2
 800100c:	2103      	movs	r1, #3
 800100e:	4851      	ldr	r0, [pc, #324]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8001010:	f003 fbde 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 800101a:	f001 f9d3 	bl	80023c4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8001022:	4b4e      	ldr	r3, [pc, #312]	@ (800115c <MX_HRTIM_Init+0x364>)
 8001024:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001026:	2308      	movs	r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2201      	movs	r2, #1
 8001042:	2100      	movs	r1, #0
 8001044:	4843      	ldr	r0, [pc, #268]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8001046:	f003 fd31 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8001050:	f001 f9b8 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2204      	movs	r2, #4
 8001058:	2101      	movs	r1, #1
 800105a:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 800105c:	f003 fd26 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8001066:	f001 f9ad 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2210      	movs	r2, #16
 800106e:	2102      	movs	r1, #2
 8001070:	4838      	ldr	r0, [pc, #224]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8001072:	f003 fd1b 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 800107c:	f001 f9a2 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2240      	movs	r2, #64	@ 0x40
 8001084:	2103      	movs	r1, #3
 8001086:	4833      	ldr	r0, [pc, #204]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8001088:	f003 fd10 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8001092:	f001 f997 	bl	80023c4 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001096:	2310      	movs	r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2202      	movs	r2, #2
 800109e:	2100      	movs	r1, #0
 80010a0:	482c      	ldr	r0, [pc, #176]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 80010a2:	f003 fd03 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 80010ac:	f001 f98a 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2208      	movs	r2, #8
 80010b4:	2101      	movs	r1, #1
 80010b6:	4827      	ldr	r0, [pc, #156]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 80010b8:	f003 fcf8 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 80010c2:	f001 f97f 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2220      	movs	r2, #32
 80010ca:	2102      	movs	r1, #2
 80010cc:	4821      	ldr	r0, [pc, #132]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 80010ce:	f003 fced 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 80010d8:	f001 f974 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	2103      	movs	r1, #3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 80010e4:	f003 fce2 	bl	8004aac <HAL_HRTIM_WaveformOutputConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 80010ee:	f001 f969 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80010f2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010f6:	461a      	mov	r2, r3
 80010f8:	2101      	movs	r1, #1
 80010fa:	4816      	ldr	r0, [pc, #88]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 80010fc:	f003 fa66 	bl	80045cc <HAL_HRTIM_TimeBaseConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8001106:	f001 f95d 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800110a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110e:	2201      	movs	r2, #1
 8001110:	2101      	movs	r1, #1
 8001112:	4810      	ldr	r0, [pc, #64]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8001114:	f003 fb5c 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 800111e:	f001 f951 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8001122:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001126:	461a      	mov	r2, r3
 8001128:	2102      	movs	r1, #2
 800112a:	480a      	ldr	r0, [pc, #40]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 800112c:	f003 fa4e 	bl	80045cc <HAL_HRTIM_TimeBaseConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8001136:	f001 f945 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113e:	2201      	movs	r2, #1
 8001140:	2102      	movs	r1, #2
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_HRTIM_Init+0x35c>)
 8001144:	f003 fb44 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 800114e:	f001 f939 	bl	80023c4 <Error_Handler>
 8001152:	e005      	b.n	8001160 <MX_HRTIM_Init+0x368>
 8001154:	240001fc 	.word	0x240001fc
 8001158:	40017400 	.word	0x40017400
 800115c:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8001160:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001164:	461a      	mov	r2, r3
 8001166:	2103      	movs	r1, #3
 8001168:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <MX_HRTIM_Init+0x3a8>)
 800116a:	f003 fa2f 	bl	80045cc <HAL_HRTIM_TimeBaseConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8001174:	f001 f926 	bl	80023c4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	2201      	movs	r2, #1
 800117e:	2103      	movs	r1, #3
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <MX_HRTIM_Init+0x3a8>)
 8001182:	f003 fb25 	bl	80047d0 <HAL_HRTIM_WaveformCompareConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 800118c:	f001 f91a 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <MX_HRTIM_Init+0x3a8>)
 8001192:	f001 f971 	bl	8002478 <HAL_HRTIM_MspPostInit>

}
 8001196:	bf00      	nop
 8001198:	37a8      	adds	r7, #168	@ 0xa8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	240001fc 	.word	0x240001fc

080011a4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <MX_LPTIM1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c0:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_LPTIM1_Init+0x50>)
 80011e2:	f004 fa0b 	bl	80055fc <HAL_LPTIM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f001 f8ea 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	240002d8 	.word	0x240002d8
 80011f8:	40002400 	.word	0x40002400

080011fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09a      	sub	sp, #104	@ 0x68
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	615a      	str	r2, [r3, #20]
 800122e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	222c      	movs	r2, #44	@ 0x2c
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00b facb 	bl	800c7d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123c:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <MX_TIM1_Init+0x198>)
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <MX_TIM1_Init+0x19c>)
 8001240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001242:	4b54      	ldr	r3, [pc, #336]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b52      	ldr	r3, [pc, #328]	@ (8001394 <MX_TIM1_Init+0x198>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 800124e:	4b51      	ldr	r3, [pc, #324]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001250:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b4f      	ldr	r3, [pc, #316]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <MX_TIM1_Init+0x198>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001262:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	484a      	ldr	r0, [pc, #296]	@ (8001394 <MX_TIM1_Init+0x198>)
 800126a:	f007 fc69 	bl	8008b40 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001274:	f001 f8a6 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001282:	4619      	mov	r1, r3
 8001284:	4843      	ldr	r0, [pc, #268]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001286:	f008 f91d 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001290:	f001 f898 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001294:	483f      	ldr	r0, [pc, #252]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001296:	f007 fd93 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012a0:	f001 f890 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a4:	2320      	movs	r3, #32
 80012a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4837      	ldr	r0, [pc, #220]	@ (8001394 <MX_TIM1_Init+0x198>)
 80012b8:	f008 fe64 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012c2:	f001 f87f 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	@ 0x60
 80012c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	482a      	ldr	r0, [pc, #168]	@ (8001394 <MX_TIM1_Init+0x198>)
 80012ec:	f007 ffd6 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012f6:	f001 f865 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4824      	ldr	r0, [pc, #144]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001304:	f007 ffca 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800130e:	f001 f859 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001312:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001316:	2208      	movs	r2, #8
 8001318:	4619      	mov	r1, r3
 800131a:	481e      	ldr	r0, [pc, #120]	@ (8001394 <MX_TIM1_Init+0x198>)
 800131c:	f007 ffbe 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001326:	f001 f84d 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800132a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800132e:	220c      	movs	r2, #12
 8001330:	4619      	mov	r1, r3
 8001332:	4818      	ldr	r0, [pc, #96]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001334:	f007 ffb2 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800133e:	f001 f841 	bl	80023c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001364:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001378:	f008 fe92 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001382:	f001 f81f 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001386:	4803      	ldr	r0, [pc, #12]	@ (8001394 <MX_TIM1_Init+0x198>)
 8001388:	f001 fa9e 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 800138c:	bf00      	nop
 800138e:	3768      	adds	r7, #104	@ 0x68
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	24000310 	.word	0x24000310
 8001398:	40010000 	.word	0x40010000

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c0:	4b22      	ldr	r3, [pc, #136]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c8:	4b20      	ldr	r3, [pc, #128]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013d6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80013da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013e4:	2280      	movs	r2, #128	@ 0x80
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e8:	4818      	ldr	r0, [pc, #96]	@ (800144c <MX_TIM2_Init+0xb0>)
 80013ea:	f007 fce9 	bl	8008dc0 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013f4:	f000 ffe6 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <MX_TIM2_Init+0xb0>)
 8001408:	f008 fdbc 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001412:	f000 ffd7 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	@ 0x60
 8001418:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <MX_TIM2_Init+0xb0>)
 800142e:	f007 ff35 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001438:	f000 ffc4 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800143c:	4803      	ldr	r0, [pc, #12]	@ (800144c <MX_TIM2_Init+0xb0>)
 800143e:	f001 fa43 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2400035c 	.word	0x2400035c

08001450 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	@ 0x38
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001482:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <MX_TIM4_Init+0x128>)
 8001484:	4a3d      	ldr	r2, [pc, #244]	@ (800157c <MX_TIM4_Init+0x12c>)
 8001486:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001488:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <MX_TIM4_Init+0x128>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <MX_TIM4_Init+0x128>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8001494:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <MX_TIM4_Init+0x128>)
 8001496:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800149a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <MX_TIM4_Init+0x128>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <MX_TIM4_Init+0x128>)
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014a8:	4833      	ldr	r0, [pc, #204]	@ (8001578 <MX_TIM4_Init+0x128>)
 80014aa:	f007 fb49 	bl	8008b40 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014b4:	f000 ff86 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	4619      	mov	r1, r3
 80014c4:	482c      	ldr	r0, [pc, #176]	@ (8001578 <MX_TIM4_Init+0x128>)
 80014c6:	f007 fffd 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014d0:	f000 ff78 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014d4:	4828      	ldr	r0, [pc, #160]	@ (8001578 <MX_TIM4_Init+0x128>)
 80014d6:	f007 fc73 	bl	8008dc0 <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014e0:	f000 ff70 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4821      	ldr	r0, [pc, #132]	@ (8001578 <MX_TIM4_Init+0x128>)
 80014f4:	f008 fd46 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014fe:	f000 ff61 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	@ 0x60
 8001504:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	4817      	ldr	r0, [pc, #92]	@ (8001578 <MX_TIM4_Init+0x128>)
 800151a:	f007 febf 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001524:	f000 ff4e 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	2204      	movs	r2, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4812      	ldr	r0, [pc, #72]	@ (8001578 <MX_TIM4_Init+0x128>)
 8001530:	f007 feb4 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800153a:	f000 ff43 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	2208      	movs	r2, #8
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_TIM4_Init+0x128>)
 8001546:	f007 fea9 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001550:	f000 ff38 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	220c      	movs	r2, #12
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	@ (8001578 <MX_TIM4_Init+0x128>)
 800155c:	f007 fe9e 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001566:	f000 ff2d 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800156a:	4803      	ldr	r0, [pc, #12]	@ (8001578 <MX_TIM4_Init+0x128>)
 800156c:	f001 f9ac 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001570:	bf00      	nop
 8001572:	3738      	adds	r7, #56	@ 0x38
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	240003a8 	.word	0x240003a8
 800157c:	40000800 	.word	0x40000800

08001580 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	@ 0x38
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015b2:	4b32      	ldr	r3, [pc, #200]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015b4:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <MX_TIM5_Init+0x100>)
 80015b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015c6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80015ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015d4:	2280      	movs	r2, #128	@ 0x80
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015d8:	4828      	ldr	r0, [pc, #160]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015da:	f007 fab1 	bl	8008b40 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80015e4:	f000 feee 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4821      	ldr	r0, [pc, #132]	@ (800167c <MX_TIM5_Init+0xfc>)
 80015f6:	f007 ff65 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001600:	f000 fee0 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001604:	481d      	ldr	r0, [pc, #116]	@ (800167c <MX_TIM5_Init+0xfc>)
 8001606:	f007 fbdb 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001610:	f000 fed8 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4816      	ldr	r0, [pc, #88]	@ (800167c <MX_TIM5_Init+0xfc>)
 8001624:	f008 fcae 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800162e:	f000 fec9 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001632:	2360      	movs	r3, #96	@ 0x60
 8001634:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	2204      	movs	r2, #4
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <MX_TIM5_Init+0xfc>)
 800164a:	f007 fe27 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001654:	f000 feb6 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	2208      	movs	r2, #8
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	@ (800167c <MX_TIM5_Init+0xfc>)
 8001660:	f007 fe1c 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800166a:	f000 feab 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800166e:	4803      	ldr	r0, [pc, #12]	@ (800167c <MX_TIM5_Init+0xfc>)
 8001670:	f001 f92a 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3738      	adds	r7, #56	@ 0x38
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	240003f4 	.word	0x240003f4
 8001680:	40000c00 	.word	0x40000c00

08001684 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	@ 0x58
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	222c      	movs	r2, #44	@ 0x2c
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b f88e 	bl	800c7d2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016b8:	4a38      	ldr	r2, [pc, #224]	@ (800179c <MX_TIM8_Init+0x118>)
 80016ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016ca:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016d6:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016de:	2280      	movs	r2, #128	@ 0x80
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016e2:	482d      	ldr	r0, [pc, #180]	@ (8001798 <MX_TIM8_Init+0x114>)
 80016e4:	f007 fb6c 	bl	8008dc0 <HAL_TIM_PWM_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80016ee:	f000 fe69 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001702:	4619      	mov	r1, r3
 8001704:	4824      	ldr	r0, [pc, #144]	@ (8001798 <MX_TIM8_Init+0x114>)
 8001706:	f008 fc3d 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001710:	f000 fe58 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001714:	2360      	movs	r3, #96	@ 0x60
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171c:	2300      	movs	r3, #0
 800171e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800172c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001730:	220c      	movs	r2, #12
 8001732:	4619      	mov	r1, r3
 8001734:	4818      	ldr	r0, [pc, #96]	@ (8001798 <MX_TIM8_Init+0x114>)
 8001736:	f007 fdb1 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001740:	f000 fe40 	bl	80023c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM8_Init+0x114>)
 800177a:	f008 fc91 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001784:	f000 fe1e 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM8_Init+0x114>)
 800178a:	f001 f89d 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3758      	adds	r7, #88	@ 0x58
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000440 	.word	0x24000440
 800179c:	40010400 	.word	0x40010400

080017a0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	@ 0x38
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017d4:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <MX_TIM12_Init+0xec>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80017e4:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017e6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80017ea:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f2:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017f4:	2280      	movs	r2, #128	@ 0x80
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80017f8:	4823      	ldr	r0, [pc, #140]	@ (8001888 <MX_TIM12_Init+0xe8>)
 80017fa:	f007 f9a1 	bl	8008b40 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001804:	f000 fdde 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800180e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001812:	4619      	mov	r1, r3
 8001814:	481c      	ldr	r0, [pc, #112]	@ (8001888 <MX_TIM12_Init+0xe8>)
 8001816:	f007 fe55 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001820:	f000 fdd0 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001824:	4818      	ldr	r0, [pc, #96]	@ (8001888 <MX_TIM12_Init+0xe8>)
 8001826:	f007 facb 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001830:	f000 fdc8 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4811      	ldr	r0, [pc, #68]	@ (8001888 <MX_TIM12_Init+0xe8>)
 8001844:	f008 fb9e 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800184e:	f000 fdb9 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2360      	movs	r3, #96	@ 0x60
 8001854:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	2204      	movs	r2, #4
 8001866:	4619      	mov	r1, r3
 8001868:	4807      	ldr	r0, [pc, #28]	@ (8001888 <MX_TIM12_Init+0xe8>)
 800186a:	f007 fd17 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001874:	f000 fda6 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001878:	4803      	ldr	r0, [pc, #12]	@ (8001888 <MX_TIM12_Init+0xe8>)
 800187a:	f001 f825 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	@ 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2400048c 	.word	0x2400048c
 800188c:	40001800 	.word	0x40001800

08001890 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	615a      	str	r2, [r3, #20]
 80018a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <MX_TIM13_Init+0x98>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80018ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018bc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80018ce:	4815      	ldr	r0, [pc, #84]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018d0:	f007 f936 	bl	8008b40 <HAL_TIM_Base_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80018da:	f000 fd73 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80018de:	4811      	ldr	r0, [pc, #68]	@ (8001924 <MX_TIM13_Init+0x94>)
 80018e0:	f007 fa6e 	bl	8008dc0 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80018ea:	f000 fd6b 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ee:	2360      	movs	r3, #96	@ 0x60
 80018f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4807      	ldr	r0, [pc, #28]	@ (8001924 <MX_TIM13_Init+0x94>)
 8001906:	f007 fcc9 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001910:	f000 fd58 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <MX_TIM13_Init+0x94>)
 8001916:	f000 ffd7 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240004d8 	.word	0x240004d8
 8001928:	40001c00 	.word	0x40001c00

0800192c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001944:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <MX_TIM14_Init+0x94>)
 8001946:	4a1f      	ldr	r2, [pc, #124]	@ (80019c4 <MX_TIM14_Init+0x98>)
 8001948:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <MX_TIM14_Init+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <MX_TIM14_Init+0x94>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <MX_TIM14_Init+0x94>)
 8001958:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800195c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <MX_TIM14_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <MX_TIM14_Init+0x94>)
 8001966:	2280      	movs	r2, #128	@ 0x80
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800196a:	4815      	ldr	r0, [pc, #84]	@ (80019c0 <MX_TIM14_Init+0x94>)
 800196c:	f007 f8e8 	bl	8008b40 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001976:	f000 fd25 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800197a:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <MX_TIM14_Init+0x94>)
 800197c:	f007 fa20 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001986:	f000 fd1d 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	@ 0x60
 800198c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <MX_TIM14_Init+0x94>)
 80019a2:	f007 fc7b 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80019ac:	f000 fd0a 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80019b0:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <MX_TIM14_Init+0x94>)
 80019b2:	f000 ff89 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	24000524 	.word	0x24000524
 80019c4:	40002000 	.word	0x40002000

080019c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09a      	sub	sp, #104	@ 0x68
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	222c      	movs	r2, #44	@ 0x2c
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00a fee5 	bl	800c7d2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a08:	4b45      	ldr	r3, [pc, #276]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a0a:	4a46      	ldr	r2, [pc, #280]	@ (8001b24 <MX_TIM15_Init+0x15c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a0e:	4b44      	ldr	r3, [pc, #272]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b42      	ldr	r3, [pc, #264]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 8001a1a:	4b41      	ldr	r3, [pc, #260]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a1c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001a20:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b3f      	ldr	r3, [pc, #252]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a28:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a34:	483a      	ldr	r0, [pc, #232]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a36:	f007 f883 	bl	8008b40 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a40:	f000 fcc0 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a48:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4833      	ldr	r0, [pc, #204]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a52:	f007 fd37 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a5c:	f000 fcb2 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a60:	482f      	ldr	r0, [pc, #188]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a62:	f007 f9ad 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a6c:	f000 fcaa 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4828      	ldr	r0, [pc, #160]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001a80:	f008 fa80 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a8a:	f000 fc9b 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8e:	2360      	movs	r3, #96	@ 0x60
 8001a90:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481b      	ldr	r0, [pc, #108]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001ab4:	f007 fbf2 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001abe:	f000 fc81 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4815      	ldr	r0, [pc, #84]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001acc:	f007 fbe6 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001ad6:	f000 fc75 	bl	80023c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4807      	ldr	r0, [pc, #28]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001b02:	f008 facd 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 8001b0c:	f000 fc5a 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <MX_TIM15_Init+0x158>)
 8001b12:	f000 fed9 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001b16:	bf00      	nop
 8001b18:	3768      	adds	r7, #104	@ 0x68
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	24000570 	.word	0x24000570
 8001b24:	40014000 	.word	0x40014000

08001b28 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b092      	sub	sp, #72	@ 0x48
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	222c      	movs	r2, #44	@ 0x2c
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00a fe42 	bl	800c7d2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b50:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <MX_TIM16_Init+0xf0>)
 8001b52:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b62:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001b66:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b7a:	4826      	ldr	r0, [pc, #152]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b7c:	f006 ffe0 	bl	8008b40 <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b86:	f000 fc1d 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b8a:	4822      	ldr	r0, [pc, #136]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001b8c:	f007 f918 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b96:	f000 fc15 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9a:	2360      	movs	r3, #96	@ 0x60
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4815      	ldr	r0, [pc, #84]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001bc0:	f007 fb6c 	bl	800929c <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001bca:	f000 fbfb 	bl	80023c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4807      	ldr	r0, [pc, #28]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001bf6:	f008 fa53 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001c00:	f000 fbe0 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001c04:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <MX_TIM16_Init+0xec>)
 8001c06:	f000 fe5f 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001c0a:	bf00      	nop
 8001c0c:	3748      	adds	r7, #72	@ 0x48
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240005bc 	.word	0x240005bc
 8001c18:	40014400 	.word	0x40014400

08001c1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c22:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <MX_UART4_Init+0x94>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c64:	4811      	ldr	r0, [pc, #68]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c66:	f008 fab7 	bl	800a1d8 <HAL_UART_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c70:	f000 fba8 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c74:	2100      	movs	r1, #0
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c78:	f009 ff86 	bl	800bb88 <HAL_UARTEx_SetTxFifoThreshold>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c82:	f000 fb9f 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c86:	2100      	movs	r1, #0
 8001c88:	4808      	ldr	r0, [pc, #32]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c8a:	f009 ffbb 	bl	800bc04 <HAL_UARTEx_SetRxFifoThreshold>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c94:	f000 fb96 	bl	80023c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	@ (8001cac <MX_UART4_Init+0x90>)
 8001c9a:	f009 ff3c 	bl	800bb16 <HAL_UARTEx_DisableFifoMode>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ca4:	f000 fb8e 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	24000608 	.word	0x24000608
 8001cb0:	40004c00 	.word	0x40004c00

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cca:	4b59      	ldr	r3, [pc, #356]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd0:	4a57      	ldr	r2, [pc, #348]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cda:	4b55      	ldr	r3, [pc, #340]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	4b51      	ldr	r3, [pc, #324]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cee:	4a50      	ldr	r2, [pc, #320]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d06:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0c:	4a48      	ldr	r2, [pc, #288]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d16:	4b46      	ldr	r3, [pc, #280]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b42      	ldr	r3, [pc, #264]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2a:	4a41      	ldr	r2, [pc, #260]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d48:	4a39      	ldr	r2, [pc, #228]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	4b33      	ldr	r3, [pc, #204]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d66:	4a32      	ldr	r2, [pc, #200]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d70:	4b2f      	ldr	r3, [pc, #188]	@ (8001e30 <MX_GPIO_Init+0x17c>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001d84:	482b      	ldr	r0, [pc, #172]	@ (8001e34 <MX_GPIO_Init+0x180>)
 8001d86:	f002 fb37 	bl	80043f8 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001d90:	4829      	ldr	r0, [pc, #164]	@ (8001e38 <MX_GPIO_Init+0x184>)
 8001d92:	f002 fb31 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 8001d9c:	4827      	ldr	r0, [pc, #156]	@ (8001e3c <MX_GPIO_Init+0x188>)
 8001d9e:	f002 fb2b 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001da2:	2200      	movs	r2, #0
 8001da4:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001da8:	4825      	ldr	r0, [pc, #148]	@ (8001e40 <MX_GPIO_Init+0x18c>)
 8001daa:	f002 fb25 	bl	80043f8 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001dae:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001db2:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481b      	ldr	r0, [pc, #108]	@ (8001e34 <MX_GPIO_Init+0x180>)
 8001dc8:	f002 f966 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001dcc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4814      	ldr	r0, [pc, #80]	@ (8001e38 <MX_GPIO_Init+0x184>)
 8001de6:	f002 f957 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin SPI2_NSS_Pin QUADSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin;
 8001dea:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <MX_GPIO_Init+0x188>)
 8001e04:	f002 f948 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001e08:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001e0c:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	@ (8001e40 <MX_GPIO_Init+0x18c>)
 8001e22:	f002 f939 	bl	8004098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e26:	bf00      	nop
 8001e28:	3730      	adds	r7, #48	@ 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58021000 	.word	0x58021000
 8001e38:	58020800 	.word	0x58020800
 8001e3c:	58020400 	.word	0x58020400
 8001e40:	58020c00 	.word	0x58020c00
 8001e44:	00000000 	.word	0x00000000

08001e48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b4b0      	push	{r4, r5, r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001e50:	230a      	movs	r3, #10
 8001e52:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001e54:	a32e      	add	r3, pc, #184	@ (adr r3, 8001f10 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f645 51c0 	movw	r1, #24000	@ 0x5dc0
 8001e68:	1854      	adds	r4, r2, r1
 8001e6a:	f143 0500 	adc.w	r5, r3, #0
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e70:	e9c3 4500 	strd	r4, r5, [r3]

	//Used to account for period in time-scale for UART Output
		period_ticks ++;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e7c:	6013      	str	r3, [r2, #0]


    if (htim==&htim1){
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12d      	bne.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	t+=1;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e8e:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e9a:	6979      	ldr	r1, [r7, #20]
 8001e9c:	fb01 f202 	mul.w	r2, r1, r2
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d11d      	bne.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eae:	db02      	blt.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	ed93 6b00 	vldr	d6, [r3]
 8001ec4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ec8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ece:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eda:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bcb0      	pop	{r4, r5, r7}
 8001eea:	4770      	bx	lr
 8001eec:	f3af 8000 	nop.w
 8001ef0:	240025e8 	.word	0x240025e8
 8001ef4:	24002630 	.word	0x24002630
 8001ef8:	24000310 	.word	0x24000310
 8001efc:	24002674 	.word	0x24002674
 8001f00:	24002678 	.word	0x24002678
 8001f04:	240006a8 	.word	0x240006a8
 8001f08:	240006a0 	.word	0x240006a0
 8001f0c:	2400069c 	.word	0x2400069c
 8001f10:	33333333 	.word	0x33333333
 8001f14:	3fd33333 	.word	0x3fd33333

08001f18 <control_update>:

static void control_update(double ref)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 8001f2e:	ed97 7b00 	vldr	d7, [r7]
 8001f32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	d505      	bpl.n	8001f48 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 8001f3c:	4b01      	ldr	r3, [pc, #4]	@ (8001f44 <control_update+0x2c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e004      	b.n	8001f4e <control_update+0x36>
 8001f44:	24000000 	.word	0x24000000
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001f48:	4ba3      	ldr	r3, [pc, #652]	@ (80021d8 <control_update+0x2c0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 8001f4e:	4ba2      	ldr	r3, [pc, #648]	@ (80021d8 <control_update+0x2c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	2101      	movs	r1, #1
 8001f58:	48a0      	ldr	r0, [pc, #640]	@ (80021dc <control_update+0x2c4>)
 8001f5a:	f002 fa4d 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8001f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80021d8 <control_update+0x2c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	2102      	movs	r1, #2
 8001f68:	489c      	ldr	r0, [pc, #624]	@ (80021dc <control_update+0x2c4>)
 8001f6a:	f002 fa45 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 8001f6e:	4b9a      	ldr	r3, [pc, #616]	@ (80021d8 <control_update+0x2c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	2104      	movs	r1, #4
 8001f78:	4898      	ldr	r0, [pc, #608]	@ (80021dc <control_update+0x2c4>)
 8001f7a:	f002 fa3d 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8001f7e:	4b96      	ldr	r3, [pc, #600]	@ (80021d8 <control_update+0x2c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	2108      	movs	r1, #8
 8001f88:	4894      	ldr	r0, [pc, #592]	@ (80021dc <control_update+0x2c4>)
 8001f8a:	f002 fa35 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 1


		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 8001f8e:	4b92      	ldr	r3, [pc, #584]	@ (80021d8 <control_update+0x2c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	2110      	movs	r1, #16
 8001f98:	4890      	ldr	r0, [pc, #576]	@ (80021dc <control_update+0x2c4>)
 8001f9a:	f002 fa2d 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	@ (80021d8 <control_update+0x2c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001faa:	488d      	ldr	r0, [pc, #564]	@ (80021e0 <control_update+0x2c8>)
 8001fac:	f002 fa24 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8001fb0:	4b89      	ldr	r3, [pc, #548]	@ (80021d8 <control_update+0x2c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fbc:	4888      	ldr	r0, [pc, #544]	@ (80021e0 <control_update+0x2c8>)
 8001fbe:	f002 fa1b 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 8001fc2:	4b85      	ldr	r3, [pc, #532]	@ (80021d8 <control_update+0x2c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fce:	4885      	ldr	r0, [pc, #532]	@ (80021e4 <control_update+0x2cc>)
 8001fd0:	f002 fa12 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8001fd4:	4b80      	ldr	r3, [pc, #512]	@ (80021d8 <control_update+0x2c0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe0:	4880      	ldr	r0, [pc, #512]	@ (80021e4 <control_update+0x2cc>)
 8001fe2:	f002 fa09 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <control_update+0x2c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ff2:	487c      	ldr	r0, [pc, #496]	@ (80021e4 <control_update+0x2cc>)
 8001ff4:	f002 fa00 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8001ff8:	4b77      	ldr	r3, [pc, #476]	@ (80021d8 <control_update+0x2c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002004:	4877      	ldr	r0, [pc, #476]	@ (80021e4 <control_update+0x2cc>)
 8002006:	f002 f9f7 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 800200a:	4b73      	ldr	r3, [pc, #460]	@ (80021d8 <control_update+0x2c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	4871      	ldr	r0, [pc, #452]	@ (80021dc <control_update+0x2c4>)
 8002016:	f002 f9ef 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 800201a:	4b6f      	ldr	r3, [pc, #444]	@ (80021d8 <control_update+0x2c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002026:	486d      	ldr	r0, [pc, #436]	@ (80021dc <control_update+0x2c4>)
 8002028:	f002 f9e6 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 800202c:	4b6a      	ldr	r3, [pc, #424]	@ (80021d8 <control_update+0x2c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002038:	4868      	ldr	r0, [pc, #416]	@ (80021dc <control_update+0x2c4>)
 800203a:	f002 f9dd 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800203e:	4b66      	ldr	r3, [pc, #408]	@ (80021d8 <control_update+0x2c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800204a:	4864      	ldr	r0, [pc, #400]	@ (80021dc <control_update+0x2c4>)
 800204c:	f002 f9d4 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8002050:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <control_update+0x2c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800205c:	485f      	ldr	r0, [pc, #380]	@ (80021dc <control_update+0x2c4>)
 800205e:	f002 f9cb 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <control_update+0x2c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	2101      	movs	r1, #1
 800206c:	485e      	ldr	r0, [pc, #376]	@ (80021e8 <control_update+0x2d0>)
 800206e:	f002 f9c3 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <control_update+0x2c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	2102      	movs	r1, #2
 800207c:	485a      	ldr	r0, [pc, #360]	@ (80021e8 <control_update+0x2d0>)
 800207e:	f002 f9bb 	bl	80043f8 <HAL_GPIO_WritePin>
		//End Timer 16


		//HRTIM CODE HERE **************
		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8002082:	4b55      	ldr	r3, [pc, #340]	@ (80021d8 <control_update+0x2c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	2110      	movs	r1, #16
 800208c:	4856      	ldr	r0, [pc, #344]	@ (80021e8 <control_update+0x2d0>)
 800208e:	f002 f9b3 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8002092:	4b51      	ldr	r3, [pc, #324]	@ (80021d8 <control_update+0x2c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	2120      	movs	r1, #32
 800209c:	4852      	ldr	r0, [pc, #328]	@ (80021e8 <control_update+0x2d0>)
 800209e:	f002 f9ab 	bl	80043f8 <HAL_GPIO_WritePin>
		//End High HRTIM CHA

		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 80020a2:	4b4d      	ldr	r3, [pc, #308]	@ (80021d8 <control_update+0x2c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	484e      	ldr	r0, [pc, #312]	@ (80021e8 <control_update+0x2d0>)
 80020ae:	f002 f9a3 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <control_update+0x2c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	484a      	ldr	r0, [pc, #296]	@ (80021e8 <control_update+0x2d0>)
 80020be:	f002 f99b 	bl	80043f8 <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 80020c2:	4b45      	ldr	r3, [pc, #276]	@ (80021d8 <control_update+0x2c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ce:	4846      	ldr	r0, [pc, #280]	@ (80021e8 <control_update+0x2d0>)
 80020d0:	f002 f992 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 80020d4:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <control_update+0x2c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020e0:	4841      	ldr	r0, [pc, #260]	@ (80021e8 <control_update+0x2d0>)
 80020e2:	f002 f989 	bl	80043f8 <HAL_GPIO_WritePin>
		//End High HRTIM CHC

		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 80020e6:	4b3c      	ldr	r3, [pc, #240]	@ (80021d8 <control_update+0x2c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020f2:	483d      	ldr	r0, [pc, #244]	@ (80021e8 <control_update+0x2d0>)
 80020f4:	f002 f980 	bl	80043f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 80020f8:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <control_update+0x2c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002104:	4838      	ldr	r0, [pc, #224]	@ (80021e8 <control_update+0x2d0>)
 8002106:	f002 f977 	bl	80043f8 <HAL_GPIO_WritePin>
		//End High HRTIM CHD
		//END HRTIM CODE


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <control_update+0x2c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	2104      	movs	r1, #4
 8002114:	4834      	ldr	r0, [pc, #208]	@ (80021e8 <control_update+0x2d0>)
 8002116:	f002 f96f 	bl	80043f8 <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 800211a:	ed97 7b00 	vldr	d7, [r7]
 800211e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002122:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8002126:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80021d0 <control_update+0x2b8>
 800212a:	eeb0 1b47 	vmov.f64	d1, d7
 800212e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002132:	f000 f8b9 	bl	80022a8 <calc_dutycycle>
 8002136:	4603      	mov	r3, r0
 8002138:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 800213a:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <control_update+0x2d4>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	89fa      	ldrh	r2, [r7, #14]
 8002140:	429a      	cmp	r2, r3
 8002142:	f000 809b 	beq.w	800227c <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 8002146:	4a29      	ldr	r2, [pc, #164]	@ (80021ec <control_update+0x2d4>)
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <control_update+0x2d4>)
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <control_update+0x2d8>)
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = dutycycle;
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <control_update+0x2d4>)
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <control_update+0x2d8>)
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = dutycycle;
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <control_update+0x2d4>)
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <control_update+0x2d8>)
 8002162:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = dutycycle;
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <control_update+0x2d4>)
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <control_update+0x2d8>)
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 1


		//Timer 2
		TIM2->CCR1 = dutycycle;
 800216c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <control_update+0x2d4>)
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <control_update+0x2d4>)
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <control_update+0x2dc>)
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = dutycycle;
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <control_update+0x2d4>)
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <control_update+0x2dc>)
 8002184:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR3 = dutycycle;
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <control_update+0x2d4>)
 8002188:	881a      	ldrh	r2, [r3, #0]
 800218a:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <control_update+0x2dc>)
 800218c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = dutycycle;
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <control_update+0x2d4>)
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <control_update+0x2dc>)
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 4


		//Timer 5
		TIM5->CCR2 = dutycycle;
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <control_update+0x2d4>)
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <control_update+0x2e0>)
 800219c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = dutycycle;
 800219e:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <control_update+0x2d4>)
 80021a0:	881a      	ldrh	r2, [r3, #0]
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <control_update+0x2e0>)
 80021a4:	63da      	str	r2, [r3, #60]	@ 0x3c
		//End Timer 5


		//Timer 8
		TIM8->CCR4 = dutycycle;
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <control_update+0x2d4>)
 80021a8:	881a      	ldrh	r2, [r3, #0]
 80021aa:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <control_update+0x2e4>)
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 8


		//Timer 12
		TIM12->CCR2 = dutycycle;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <control_update+0x2d4>)
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <control_update+0x2e8>)
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 12


		//Timer 13
		TIM13->CCR1 = dutycycle;
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <control_update+0x2d4>)
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <control_update+0x2ec>)
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 13


		//Timer 14
		TIM14->CCR1 = dutycycle;
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <control_update+0x2d4>)
 80021c0:	881a      	ldrh	r2, [r3, #0]
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <control_update+0x2f0>)
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 14


		//Timer 15
		TIM15->CCR1 = dutycycle;
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <control_update+0x2d4>)
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	e01f      	b.n	800220c <control_update+0x2f4>
 80021cc:	f3af 8000 	nop.w
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	3ffccccc 	.word	0x3ffccccc
 80021d8:	24000000 	.word	0x24000000
 80021dc:	58021000 	.word	0x58021000
 80021e0:	58020400 	.word	0x58020400
 80021e4:	58020800 	.word	0x58020800
 80021e8:	58020c00 	.word	0x58020c00
 80021ec:	2400267c 	.word	0x2400267c
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40010400 	.word	0x40010400
 8002200:	40001800 	.word	0x40001800
 8002204:	40001c00 	.word	0x40001c00
 8002208:	40002000 	.word	0x40002000
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <control_update+0x374>)
 800220e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM15->CCR2 = dutycycle;
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <control_update+0x378>)
 8002212:	881a      	ldrh	r2, [r3, #0]
 8002214:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <control_update+0x374>)
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 15


		//Timer 16
		TIM16->CCR1 = dutycycle;
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <control_update+0x378>)
 800221a:	881a      	ldrh	r2, [r3, #0]
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <control_update+0x37c>)
 800221e:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 16


		//HRTIM CODE GOES HERE ********
		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8002220:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <control_update+0x378>)
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <control_update+0x380>)
 8002226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <control_update+0x378>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <control_update+0x380>)
 8002230:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8002234:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <control_update+0x378>)
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <control_update+0x380>)
 800223a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <control_update+0x378>)
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <control_update+0x380>)
 8002244:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <control_update+0x378>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <control_update+0x380>)
 800224e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8002252:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <control_update+0x378>)
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <control_update+0x380>)
 8002258:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <control_update+0x378>)
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <control_update+0x380>)
 8002262:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <control_update+0x378>)
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <control_update+0x380>)
 800226c:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		//End HRTIM CHD
		//END HRTIM CODE HERE


		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <control_update+0x378>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <control_update+0x384>)
 800227a:	615a      	str	r2, [r3, #20]


	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <control_update+0x388>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40014000 	.word	0x40014000
 8002290:	2400267c 	.word	0x2400267c
 8002294:	40014400 	.word	0x40014400
 8002298:	40017400 	.word	0x40017400
 800229c:	40002400 	.word	0x40002400
 80022a0:	2400069c 	.word	0x2400069c
 80022a4:	00000000 	.word	0x00000000

080022a8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80022b2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 80022b6:	2300      	movs	r3, #0
 80022b8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 80022ba:	ed97 5b02 	vldr	d5, [r7, #8]
 80022be:	ed97 6b00 	vldr	d6, [r7]
 80022c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022c6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80022f8 <calc_dutycycle+0x50>
 80022ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022d2:	ee17 3a90 	vmov	r3, s15
 80022d6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 80022d8:	8afb      	ldrh	r3, [r7, #22]
 80022da:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80022de:	4293      	cmp	r3, r2
 80022e0:	d902      	bls.n	80022e8 <calc_dutycycle+0x40>
 80022e2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 80022e6:	82fb      	strh	r3, [r7, #22]

	return dc;
 80022e8:	8afb      	ldrh	r3, [r7, #22]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40d76fc0 	.word	0x40d76fc0

08002300 <gen_sine>:

static void gen_sine(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
	int i = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 800230a:	a316      	add	r3, pc, #88	@ (adr r3, 8002364 <gen_sine+0x64>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e017      	b.n	800234a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002324:	ed97 7b00 	vldr	d7, [r7]
 8002328:	ee26 7b07 	vmul.f64	d7, d6, d7
 800232c:	eeb0 0b47 	vmov.f64	d0, d7
 8002330:	f00c faae 	bl	800e890 <sin>
 8002334:	eeb0 7b40 	vmov.f64	d7, d0
 8002338:	4a09      	ldr	r2, [pc, #36]	@ (8002360 <gen_sine+0x60>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002350:	dbe3      	blt.n	800231a <gen_sine+0x1a>
	}
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	f3af 8000 	nop.w
 8002360:	240006a8 	.word	0x240006a8
 8002364:	b68b71c3 	.word	0xb68b71c3
 8002368:	3f79bc65 	.word	0x3f79bc65

0800236c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002372:	463b      	mov	r3, r7
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800237e:	f001 f8af 	bl	80034e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002382:	2301      	movs	r3, #1
 8002384:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002386:	2300      	movs	r3, #0
 8002388:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800238e:	231f      	movs	r3, #31
 8002390:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002392:	2387      	movs	r3, #135	@ 0x87
 8002394:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002396:	2300      	movs	r3, #0
 8002398:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800239a:	2300      	movs	r3, #0
 800239c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023ae:	463b      	mov	r3, r7
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 f8cd 	bl	8003550 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023b6:	2004      	movs	r0, #4
 80023b8:	f001 f8aa 	bl	8003510 <HAL_MPU_Enable>

}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <Error_Handler+0x8>

080023d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_MspInit+0x30>)
 80023d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023dc:	4a08      	ldr	r2, [pc, #32]	@ (8002400 <HAL_MspInit+0x30>)
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_MspInit+0x30>)
 80023e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	58024400 	.word	0x58024400

08002404 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0b4      	sub	sp, #208	@ 0xd0
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	22c0      	movs	r2, #192	@ 0xc0
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f00a f9dc 	bl	800c7d2 <memset>
  if(hhrtim->Instance==HRTIM1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <HAL_HRTIM_MspInit+0x6c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d121      	bne.n	8002468 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	4618      	mov	r0, r3
 800243c:	f004 fd54 	bl	8006ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002446:	f7ff ffbd 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_HRTIM_MspInit+0x70>)
 800244c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002450:	4a08      	ldr	r2, [pc, #32]	@ (8002474 <HAL_HRTIM_MspInit+0x70>)
 8002452:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002456:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_HRTIM_MspInit+0x70>)
 800245c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	37d0      	adds	r7, #208	@ 0xd0
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40017400 	.word	0x40017400
 8002474:	58024400 	.word	0x58024400

08002478 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <HAL_HRTIM_MspPostInit+0xac>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d13f      	bne.n	800251a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_HRTIM_MspPostInit+0xb0>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <HAL_HRTIM_MspPostInit+0xb0>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_HRTIM_MspPostInit+0xb0>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_HRTIM_MspPostInit+0xb0>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024be:	4a1a      	ldr	r2, [pc, #104]	@ (8002528 <HAL_HRTIM_MspPostInit+0xb0>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c8:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_HRTIM_MspPostInit+0xb0>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80024d6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	480e      	ldr	r0, [pc, #56]	@ (800252c <HAL_HRTIM_MspPostInit+0xb4>)
 80024f4:	f001 fdd0 	bl	8004098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024f8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80024fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800250a:	2302      	movs	r3, #2
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	4806      	ldr	r0, [pc, #24]	@ (8002530 <HAL_HRTIM_MspPostInit+0xb8>)
 8002516:	f001 fdbf 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40017400 	.word	0x40017400
 8002528:	58024400 	.word	0x58024400
 800252c:	58020800 	.word	0x58020800
 8002530:	58020000 	.word	0x58020000

08002534 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b0ba      	sub	sp, #232	@ 0xe8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	22c0      	movs	r2, #192	@ 0xc0
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f00a f93c 	bl	800c7d2 <memset>
  if(hlptim->Instance==LPTIM1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <HAL_LPTIM_MspInit+0xd8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d14e      	bne.n	8002602 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002564:	f04f 0220 	mov.w	r2, #32
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4618      	mov	r0, r3
 800257c:	f004 fcb4 	bl	8006ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8002586:	f7ff ff1d 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800258a:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <HAL_LPTIM_MspInit+0xdc>)
 800258c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002590:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_LPTIM_MspInit+0xdc>)
 8002592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002596:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_LPTIM_MspInit+0xdc>)
 800259c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a8:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <HAL_LPTIM_MspInit+0xdc>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ae:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <HAL_LPTIM_MspInit+0xdc>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_LPTIM_MspInit+0xdc>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025ea:	4619      	mov	r1, r3
 80025ec:	4809      	ldr	r0, [pc, #36]	@ (8002614 <HAL_LPTIM_MspInit+0xe0>)
 80025ee:	f001 fd53 	bl	8004098 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	205d      	movs	r0, #93	@ 0x5d
 80025f8:	f000 ff3d 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80025fc:	205d      	movs	r0, #93	@ 0x5d
 80025fe:	f000 ff54 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	37e8      	adds	r7, #232	@ 0xe8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40002400 	.word	0x40002400
 8002610:	58024400 	.word	0x58024400
 8002614:	58020c00 	.word	0x58020c00

08002618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a74      	ldr	r2, [pc, #464]	@ (80027f8 <HAL_TIM_Base_MspInit+0x1e0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d117      	bne.n	800265a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800262a:	4b74      	ldr	r3, [pc, #464]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800262c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002630:	4a72      	ldr	r2, [pc, #456]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800263a:	4b70      	ldr	r3, [pc, #448]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800263c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	2019      	movs	r0, #25
 800264e:	f000 ff12 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002652:	2019      	movs	r0, #25
 8002654:	f000 ff29 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002658:	e0c9      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM4)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a68      	ldr	r2, [pc, #416]	@ (8002800 <HAL_TIM_Base_MspInit+0x1e8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d117      	bne.n	8002694 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002664:	4b65      	ldr	r3, [pc, #404]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	4a64      	ldr	r2, [pc, #400]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002674:	4b61      	ldr	r3, [pc, #388]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	201e      	movs	r0, #30
 8002688:	f000 fef5 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800268c:	201e      	movs	r0, #30
 800268e:	f000 ff0c 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 8002692:	e0ac      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM5)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5a      	ldr	r2, [pc, #360]	@ (8002804 <HAL_TIM_Base_MspInit+0x1ec>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d117      	bne.n	80026ce <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800269e:	4b57      	ldr	r3, [pc, #348]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80026a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026a4:	4a55      	ldr	r2, [pc, #340]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ae:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80026b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2032      	movs	r0, #50	@ 0x32
 80026c2:	f000 fed8 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026c6:	2032      	movs	r0, #50	@ 0x32
 80026c8:	f000 feef 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 80026cc:	e08f      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002808 <HAL_TIM_Base_MspInit+0x1f0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d117      	bne.n	8002708 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026d8:	4b48      	ldr	r3, [pc, #288]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80026da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026de:	4a47      	ldr	r2, [pc, #284]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80026e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026e8:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80026ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	202b      	movs	r0, #43	@ 0x2b
 80026fc:	f000 febb 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002700:	202b      	movs	r0, #43	@ 0x2b
 8002702:	f000 fed2 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 8002706:	e072      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3f      	ldr	r2, [pc, #252]	@ (800280c <HAL_TIM_Base_MspInit+0x1f4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d117      	bne.n	8002742 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002712:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002718:	4a38      	ldr	r2, [pc, #224]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800271a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002722:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	202c      	movs	r0, #44	@ 0x2c
 8002736:	f000 fe9e 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800273a:	202c      	movs	r0, #44	@ 0x2c
 800273c:	f000 feb5 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 8002740:	e055      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a32      	ldr	r2, [pc, #200]	@ (8002810 <HAL_TIM_Base_MspInit+0x1f8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d117      	bne.n	800277c <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800274c:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800274e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002752:	4a2a      	ldr	r2, [pc, #168]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800275c:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800275e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	202d      	movs	r0, #45	@ 0x2d
 8002770:	f000 fe81 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002774:	202d      	movs	r0, #45	@ 0x2d
 8002776:	f000 fe98 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 800277a:	e038      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM15)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_TIM_Base_MspInit+0x1fc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d117      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800278c:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002796:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 8002798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	2074      	movs	r0, #116	@ 0x74
 80027aa:	f000 fe64 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80027ae:	2074      	movs	r0, #116	@ 0x74
 80027b0:	f000 fe7b 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 80027b4:	e01b      	b.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM16)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a17      	ldr	r2, [pc, #92]	@ (8002818 <HAL_TIM_Base_MspInit+0x200>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d116      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80027c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c6:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <HAL_TIM_Base_MspInit+0x1e4>)
 80027d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2075      	movs	r0, #117	@ 0x75
 80027e4:	f000 fe47 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80027e8:	2075      	movs	r0, #117	@ 0x75
 80027ea:	f000 fe5e 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3728      	adds	r7, #40	@ 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	58024400 	.word	0x58024400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40001800 	.word	0x40001800
 800280c:	40001c00 	.word	0x40001c00
 8002810:	40002000 	.word	0x40002000
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400

0800281c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282c:	d117      	bne.n	800285e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002834:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	201c      	movs	r0, #28
 8002852:	f000 fe10 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002856:	201c      	movs	r0, #28
 8002858:	f000 fe27 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800285c:	e02b      	b.n	80028b6 <HAL_TIM_PWM_MspInit+0x9a>
  else if(htim_pwm->Instance==TIM8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d126      	bne.n	80028b6 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_TIM_PWM_MspInit+0xa4>)
 800286a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286e:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_TIM_PWM_MspInit+0xa4>)
 800287a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	202b      	movs	r0, #43	@ 0x2b
 800288c:	f000 fdf3 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002890:	202b      	movs	r0, #43	@ 0x2b
 8002892:	f000 fe0a 	bl	80034aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	202c      	movs	r0, #44	@ 0x2c
 800289c:	f000 fdeb 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80028a0:	202c      	movs	r0, #44	@ 0x2c
 80028a2:	f000 fe02 	bl	80034aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	202d      	movs	r0, #45	@ 0x2d
 80028ac:	f000 fde3 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80028b0:	202d      	movs	r0, #45	@ 0x2d
 80028b2:	f000 fdfa 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b092      	sub	sp, #72	@ 0x48
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4aa4      	ldr	r2, [pc, #656]	@ (8002b78 <HAL_TIM_MspPostInit+0x2b0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d120      	bne.n	800292c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ea:	4ba4      	ldr	r3, [pc, #656]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 80028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f0:	4aa2      	ldr	r2, [pc, #648]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 80028f2:	f043 0310 	orr.w	r3, r3, #16
 80028f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028fa:	4ba0      	ldr	r3, [pc, #640]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 80028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	633b      	str	r3, [r7, #48]	@ 0x30
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002908:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800291a:	2301      	movs	r3, #1
 800291c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800291e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002922:	4619      	mov	r1, r3
 8002924:	4896      	ldr	r0, [pc, #600]	@ (8002b80 <HAL_TIM_MspPostInit+0x2b8>)
 8002926:	f001 fbb7 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800292a:	e189      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002934:	d11f      	bne.n	8002976 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b91      	ldr	r3, [pc, #580]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800293c:	4a8f      	ldr	r2, [pc, #572]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002946:	4b8d      	ldr	r3, [pc, #564]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002954:	2301      	movs	r3, #1
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002964:	2301      	movs	r3, #1
 8002966:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800296c:	4619      	mov	r1, r3
 800296e:	4885      	ldr	r0, [pc, #532]	@ (8002b84 <HAL_TIM_MspPostInit+0x2bc>)
 8002970:	f001 fb92 	bl	8004098 <HAL_GPIO_Init>
}
 8002974:	e164      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a83      	ldr	r2, [pc, #524]	@ (8002b88 <HAL_TIM_MspPostInit+0x2c0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d13f      	bne.n	8002a00 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002980:	4b7e      	ldr	r3, [pc, #504]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002986:	4a7d      	ldr	r2, [pc, #500]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002990:	4b7a      	ldr	r3, [pc, #488]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b77      	ldr	r3, [pc, #476]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 80029a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029a4:	4a75      	ldr	r2, [pc, #468]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ae:	4b73      	ldr	r3, [pc, #460]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80029bc:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029ce:	2302      	movs	r3, #2
 80029d0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029d6:	4619      	mov	r1, r3
 80029d8:	486c      	ldr	r0, [pc, #432]	@ (8002b8c <HAL_TIM_MspPostInit+0x2c4>)
 80029da:	f001 fb5d 	bl	8004098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029ee:	2302      	movs	r3, #2
 80029f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029f6:	4619      	mov	r1, r3
 80029f8:	4865      	ldr	r0, [pc, #404]	@ (8002b90 <HAL_TIM_MspPostInit+0x2c8>)
 80029fa:	f001 fb4d 	bl	8004098 <HAL_GPIO_Init>
}
 80029fe:	e11f      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a63      	ldr	r2, [pc, #396]	@ (8002b94 <HAL_TIM_MspPostInit+0x2cc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d11f      	bne.n	8002a4a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a10:	4a5a      	ldr	r2, [pc, #360]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a1a:	4b58      	ldr	r3, [pc, #352]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	623b      	str	r3, [r7, #32]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002a28:	2306      	movs	r3, #6
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2300      	movs	r3, #0
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a40:	4619      	mov	r1, r3
 8002a42:	4850      	ldr	r0, [pc, #320]	@ (8002b84 <HAL_TIM_MspPostInit+0x2bc>)
 8002a44:	f001 fb28 	bl	8004098 <HAL_GPIO_Init>
}
 8002a48:	e0fa      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a52      	ldr	r2, [pc, #328]	@ (8002b98 <HAL_TIM_MspPostInit+0x2d0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d120      	bne.n	8002a96 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a54:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a5a:	4a48      	ldr	r2, [pc, #288]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a64:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a84:	2303      	movs	r3, #3
 8002a86:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4843      	ldr	r0, [pc, #268]	@ (8002b9c <HAL_TIM_MspPostInit+0x2d4>)
 8002a90:	f001 fb02 	bl	8004098 <HAL_GPIO_Init>
}
 8002a94:	e0d4      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ba0 <HAL_TIM_MspPostInit+0x2d8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d120      	bne.n	8002ae2 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa6:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ab0:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ad8:	4619      	mov	r1, r3
 8002ada:	482d      	ldr	r0, [pc, #180]	@ (8002b90 <HAL_TIM_MspPostInit+0x2c8>)
 8002adc:	f001 fadc 	bl	8004098 <HAL_GPIO_Init>
}
 8002ae0:	e0ae      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba4 <HAL_TIM_MspPostInit+0x2dc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d11f      	bne.n	8002b2c <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af2:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002afc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b0a:	2340      	movs	r3, #64	@ 0x40
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002b1a:	2309      	movs	r3, #9
 8002b1c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b22:	4619      	mov	r1, r3
 8002b24:	4817      	ldr	r0, [pc, #92]	@ (8002b84 <HAL_TIM_MspPostInit+0x2bc>)
 8002b26:	f001 fab7 	bl	8004098 <HAL_GPIO_Init>
}
 8002b2a:	e089      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_TIM_MspPostInit+0x2e0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d13a      	bne.n	8002bac <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_TIM_MspPostInit+0x2b4>)
 8002b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b54:	2380      	movs	r3, #128	@ 0x80
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002b64:	2309      	movs	r3, #9
 8002b66:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4805      	ldr	r0, [pc, #20]	@ (8002b84 <HAL_TIM_MspPostInit+0x2bc>)
 8002b70:	f001 fa92 	bl	8004098 <HAL_GPIO_Init>
}
 8002b74:	e064      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	58021000 	.word	0x58021000
 8002b84:	58020000 	.word	0x58020000
 8002b88:	40000800 	.word	0x40000800
 8002b8c:	58020c00 	.word	0x58020c00
 8002b90:	58020400 	.word	0x58020400
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	40010400 	.word	0x40010400
 8002b9c:	58020800 	.word	0x58020800
 8002ba0:	40001800 	.word	0x40001800
 8002ba4:	40001c00 	.word	0x40001c00
 8002ba8:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a25      	ldr	r2, [pc, #148]	@ (8002c48 <HAL_TIM_MspPostInit+0x380>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11f      	bne.n	8002bf6 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bb6:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_TIM_MspPostInit+0x384>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbc:	4a23      	ldr	r2, [pc, #140]	@ (8002c4c <HAL_TIM_MspPostInit+0x384>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <HAL_TIM_MspPostInit+0x384>)
 8002bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bd4:	2360      	movs	r3, #96	@ 0x60
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002be4:	2304      	movs	r3, #4
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bec:	4619      	mov	r1, r3
 8002bee:	4818      	ldr	r0, [pc, #96]	@ (8002c50 <HAL_TIM_MspPostInit+0x388>)
 8002bf0:	f001 fa52 	bl	8004098 <HAL_GPIO_Init>
}
 8002bf4:	e024      	b.n	8002c40 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a16      	ldr	r2, [pc, #88]	@ (8002c54 <HAL_TIM_MspPostInit+0x38c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d11f      	bne.n	8002c40 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_TIM_MspPostInit+0x384>)
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c06:	4a11      	ldr	r2, [pc, #68]	@ (8002c4c <HAL_TIM_MspPostInit+0x384>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_TIM_MspPostInit+0x384>)
 8002c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002c30:	2301      	movs	r3, #1
 8002c32:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	@ (8002c58 <HAL_TIM_MspPostInit+0x390>)
 8002c3c:	f001 fa2c 	bl	8004098 <HAL_GPIO_Init>
}
 8002c40:	bf00      	nop
 8002c42:	3748      	adds	r7, #72	@ 0x48
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40014000 	.word	0x40014000
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	58021000 	.word	0x58021000
 8002c54:	40014400 	.word	0x40014400
 8002c58:	58020400 	.word	0x58020400

08002c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b0ba      	sub	sp, #232	@ 0xe8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	22c0      	movs	r2, #192	@ 0xc0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f009 fda8 	bl	800c7d2 <memset>
  if(huart->Instance==UART4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2b      	ldr	r2, [pc, #172]	@ (8002d34 <HAL_UART_MspInit+0xd8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d14e      	bne.n	8002d2a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c8c:	f04f 0202 	mov.w	r2, #2
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 f920 	bl	8006ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cae:	f7ff fb89 	bl	80023c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <HAL_UART_MspInit+0xdc>)
 8002cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d38 <HAL_UART_MspInit+0xdc>)
 8002cba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <HAL_UART_MspInit+0xdc>)
 8002cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_UART_MspInit+0xdc>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd6:	4a18      	ldr	r2, [pc, #96]	@ (8002d38 <HAL_UART_MspInit+0xdc>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ce0:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <HAL_UART_MspInit+0xdc>)
 8002ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4809      	ldr	r0, [pc, #36]	@ (8002d3c <HAL_UART_MspInit+0xe0>)
 8002d16:	f001 f9bf 	bl	8004098 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2034      	movs	r0, #52	@ 0x34
 8002d20:	f000 fba9 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d24:	2034      	movs	r0, #52	@ 0x34
 8002d26:	f000 fbc0 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	37e8      	adds	r7, #232	@ 0xe8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40004c00 	.word	0x40004c00
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	58020800 	.word	0x58020800

08002d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <NMI_Handler+0x4>

08002d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <HardFault_Handler+0x4>

08002d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <MemManage_Handler+0x4>

08002d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d96:	f000 fa67 	bl	8003268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <TIM1_UP_IRQHandler+0x10>)
 8002da6:	f006 f971 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	24000310 	.word	0x24000310

08002db4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002db8:	4802      	ldr	r0, [pc, #8]	@ (8002dc4 <TIM2_IRQHandler+0x10>)
 8002dba:	f006 f967 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2400035c 	.word	0x2400035c

08002dc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dcc:	4802      	ldr	r0, [pc, #8]	@ (8002dd8 <TIM4_IRQHandler+0x10>)
 8002dce:	f006 f95d 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	240003a8 	.word	0x240003a8

08002ddc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002de0:	4803      	ldr	r0, [pc, #12]	@ (8002df0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002de2:	f006 f953 	bl	800908c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002de6:	4803      	ldr	r0, [pc, #12]	@ (8002df4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002de8:	f006 f950 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	24000440 	.word	0x24000440
 8002df4:	2400048c 	.word	0x2400048c

08002df8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002dfc:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002dfe:	f006 f945 	bl	800908c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8002e02:	4803      	ldr	r0, [pc, #12]	@ (8002e10 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002e04:	f006 f942 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	24000440 	.word	0x24000440
 8002e10:	240004d8 	.word	0x240004d8

08002e14 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002e1a:	f006 f937 	bl	800908c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002e1e:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002e20:	f006 f934 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	24000440 	.word	0x24000440
 8002e2c:	24000524 	.word	0x24000524

08002e30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e34:	4802      	ldr	r0, [pc, #8]	@ (8002e40 <TIM5_IRQHandler+0x10>)
 8002e36:	f006 f929 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	240003f4 	.word	0x240003f4

08002e44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e48:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <UART4_IRQHandler+0x10>)
 8002e4a:	f007 faa3 	bl	800a394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	24000608 	.word	0x24000608

08002e58 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <LPTIM1_IRQHandler+0x10>)
 8002e5e:	f002 fd31 	bl	80058c4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	240002d8 	.word	0x240002d8

08002e6c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002e70:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <TIM15_IRQHandler+0x10>)
 8002e72:	f006 f90b 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	24000570 	.word	0x24000570

08002e80 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002e84:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <TIM16_IRQHandler+0x10>)
 8002e86:	f006 f901 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	240005bc 	.word	0x240005bc

08002e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return 1;
 8002e98:	2301      	movs	r3, #1
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_kill>:

int _kill(int pid, int sig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eae:	f009 fce3 	bl	800c878 <__errno>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2216      	movs	r2, #22
 8002eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_exit>:

void _exit (int status)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffe7 	bl	8002ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ed6:	bf00      	nop
 8002ed8:	e7fd      	b.n	8002ed6 <_exit+0x12>

08002eda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e00a      	b.n	8002f02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eec:	f3af 8000 	nop.w
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	60ba      	str	r2, [r7, #8]
 8002ef8:	b2ca      	uxtb	r2, r1
 8002efa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	dbf0      	blt.n	8002eec <_read+0x12>
  }

  return len;
 8002f0a:	687b      	ldr	r3, [r7, #4]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e009      	b.n	8002f3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	60ba      	str	r2, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	dbf1      	blt.n	8002f26 <_write+0x12>
  }
  return len;
 8002f42:	687b      	ldr	r3, [r7, #4]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_close>:

int _close(int file)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f74:	605a      	str	r2, [r3, #4]
  return 0;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_isatty>:

int _isatty(int file)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f8c:	2301      	movs	r3, #1
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	@ (8003010 <_sbrk+0x5c>)
 8002fbe:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <_sbrk+0x60>)
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc8:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	@ (8003018 <_sbrk+0x64>)
 8002fd2:	4a12      	ldr	r2, [pc, #72]	@ (800301c <_sbrk+0x68>)
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd6:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d207      	bcs.n	8002ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe4:	f009 fc48 	bl	800c878 <__errno>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	220c      	movs	r2, #12
 8002fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e009      	b.n	8003008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	4a05      	ldr	r2, [pc, #20]	@ (8003018 <_sbrk+0x64>)
 8003004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	24080000 	.word	0x24080000
 8003014:	00000400 	.word	0x00000400
 8003018:	24002680 	.word	0x24002680
 800301c:	240027d8 	.word	0x240027d8

08003020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003024:	4b37      	ldr	r3, [pc, #220]	@ (8003104 <SystemInit+0xe4>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	4a36      	ldr	r2, [pc, #216]	@ (8003104 <SystemInit+0xe4>)
 800302c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003034:	4b34      	ldr	r3, [pc, #208]	@ (8003108 <SystemInit+0xe8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	2b06      	cmp	r3, #6
 800303e:	d807      	bhi.n	8003050 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003040:	4b31      	ldr	r3, [pc, #196]	@ (8003108 <SystemInit+0xe8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 030f 	bic.w	r3, r3, #15
 8003048:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <SystemInit+0xe8>)
 800304a:	f043 0307 	orr.w	r3, r3, #7
 800304e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003050:	4b2e      	ldr	r3, [pc, #184]	@ (800310c <SystemInit+0xec>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2d      	ldr	r2, [pc, #180]	@ (800310c <SystemInit+0xec>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800305c:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <SystemInit+0xec>)
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003062:	4b2a      	ldr	r3, [pc, #168]	@ (800310c <SystemInit+0xec>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4929      	ldr	r1, [pc, #164]	@ (800310c <SystemInit+0xec>)
 8003068:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <SystemInit+0xf0>)
 800306a:	4013      	ands	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <SystemInit+0xe8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800307a:	4b23      	ldr	r3, [pc, #140]	@ (8003108 <SystemInit+0xe8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 030f 	bic.w	r3, r3, #15
 8003082:	4a21      	ldr	r2, [pc, #132]	@ (8003108 <SystemInit+0xe8>)
 8003084:	f043 0307 	orr.w	r3, r3, #7
 8003088:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <SystemInit+0xec>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003090:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <SystemInit+0xec>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003096:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <SystemInit+0xec>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <SystemInit+0xec>)
 800309e:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <SystemInit+0xf4>)
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <SystemInit+0xec>)
 80030a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003118 <SystemInit+0xf8>)
 80030a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030a8:	4b18      	ldr	r3, [pc, #96]	@ (800310c <SystemInit+0xec>)
 80030aa:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <SystemInit+0xfc>)
 80030ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030ae:	4b17      	ldr	r3, [pc, #92]	@ (800310c <SystemInit+0xec>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80030b4:	4b15      	ldr	r3, [pc, #84]	@ (800310c <SystemInit+0xec>)
 80030b6:	4a19      	ldr	r2, [pc, #100]	@ (800311c <SystemInit+0xfc>)
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <SystemInit+0xec>)
 80030bc:	2200      	movs	r2, #0
 80030be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030c0:	4b12      	ldr	r3, [pc, #72]	@ (800310c <SystemInit+0xec>)
 80030c2:	4a16      	ldr	r2, [pc, #88]	@ (800311c <SystemInit+0xfc>)
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <SystemInit+0xec>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030cc:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <SystemInit+0xec>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0e      	ldr	r2, [pc, #56]	@ (800310c <SystemInit+0xec>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <SystemInit+0xec>)
 80030da:	2200      	movs	r2, #0
 80030dc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <SystemInit+0x100>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <SystemInit+0x104>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ea:	d202      	bcs.n	80030f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <SystemInit+0x108>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <SystemInit+0x10c>)
 80030f4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80030f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00
 8003108:	52002000 	.word	0x52002000
 800310c:	58024400 	.word	0x58024400
 8003110:	eaf6ed7f 	.word	0xeaf6ed7f
 8003114:	02020200 	.word	0x02020200
 8003118:	01ff0000 	.word	0x01ff0000
 800311c:	01010280 	.word	0x01010280
 8003120:	5c001000 	.word	0x5c001000
 8003124:	ffff0000 	.word	0xffff0000
 8003128:	51008108 	.word	0x51008108
 800312c:	52004000 	.word	0x52004000

08003130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003168 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003134:	f7ff ff74 	bl	8003020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800313a:	490d      	ldr	r1, [pc, #52]	@ (8003170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003140:	e002      	b.n	8003148 <LoopCopyDataInit>

08003142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003146:	3304      	adds	r3, #4

08003148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800314c:	d3f9      	bcc.n	8003142 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003150:	4c0a      	ldr	r4, [pc, #40]	@ (800317c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003154:	e001      	b.n	800315a <LoopFillZerobss>

08003156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003158:	3204      	adds	r2, #4

0800315a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800315c:	d3fb      	bcc.n	8003156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800315e:	f009 fb91 	bl	800c884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003162:	f7fd fabd 	bl	80006e0 <main>
  bx  lr
 8003166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003168:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800316c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003170:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8003174:	0800fb20 	.word	0x0800fb20
  ldr r2, =_sbss
 8003178:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 800317c:	240027d4 	.word	0x240027d4

08003180 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC3_IRQHandler>
	...

08003184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800318a:	2003      	movs	r0, #3
 800318c:	f000 f968 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003190:	f003 fcd4 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <HAL_Init+0x68>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	4913      	ldr	r1, [pc, #76]	@ (80031f0 <HAL_Init+0x6c>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ae:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <HAL_Init+0x68>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a0e      	ldr	r2, [pc, #56]	@ (80031f0 <HAL_Init+0x6c>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	4a0b      	ldr	r2, [pc, #44]	@ (80031f4 <HAL_Init+0x70>)
 80031c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c8:	4a0b      	ldr	r2, [pc, #44]	@ (80031f8 <HAL_Init+0x74>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ce:	200f      	movs	r0, #15
 80031d0:	f000 f814 	bl	80031fc <HAL_InitTick>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e002      	b.n	80031e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031de:	f7ff f8f7 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	58024400 	.word	0x58024400
 80031f0:	0800f590 	.word	0x0800f590
 80031f4:	24000008 	.word	0x24000008
 80031f8:	24000004 	.word	0x24000004

080031fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_InitTick+0x60>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e021      	b.n	8003254 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <HAL_InitTick+0x64>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <HAL_InitTick+0x60>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800321e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f94d 	bl	80034c6 <HAL_SYSTICK_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00e      	b.n	8003254 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d80a      	bhi.n	8003252 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800323c:	2200      	movs	r2, #0
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f000 f917 	bl	8003476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003248:	4a06      	ldr	r2, [pc, #24]	@ (8003264 <HAL_InitTick+0x68>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	24000010 	.word	0x24000010
 8003260:	24000004 	.word	0x24000004
 8003264:	2400000c 	.word	0x2400000c

08003268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_IncTick+0x20>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_IncTick+0x24>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_IncTick+0x24>)
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	24000010 	.word	0x24000010
 800328c:	24002684 	.word	0x24002684

08003290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return uwTick;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <HAL_GetTick+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	24002684 	.word	0x24002684

080032a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032ac:	4b03      	ldr	r3, [pc, #12]	@ (80032bc <HAL_GetREVID+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0c1b      	lsrs	r3, r3, #16
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	5c001000 	.word	0x5c001000

080032c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <__NVIC_SetPriorityGrouping+0x40>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <__NVIC_SetPriorityGrouping+0x40>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00
 8003304:	05fa0000 	.word	0x05fa0000

08003308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800332e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db0b      	blt.n	800334e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	4907      	ldr	r1, [pc, #28]	@ (800335c <__NVIC_EnableIRQ+0x38>)
 800333e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2001      	movs	r0, #1
 8003346:	fa00 f202 	lsl.w	r2, r0, r2
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	@ (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	@ (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf28      	it	cs
 80033d2:	2304      	movcs	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3304      	adds	r3, #4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d902      	bls.n	80033e4 <NVIC_EncodePriority+0x30>
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3b03      	subs	r3, #3
 80033e2:	e000      	b.n	80033e6 <NVIC_EncodePriority+0x32>
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	401a      	ands	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43d9      	mvns	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4313      	orrs	r3, r2
         );
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	@ 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	@ (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f7ff ff8e 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	@ (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff29 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003484:	f7ff ff40 	bl	8003308 <__NVIC_GetPriorityGrouping>
 8003488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff ff90 	bl	80033b4 <NVIC_EncodePriority>
 8003494:	4602      	mov	r2, r0
 8003496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff5f 	bl	8003360 <__NVIC_SetPriority>
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff33 	bl	8003324 <__NVIC_EnableIRQ>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ffa4 	bl	800341c <SysTick_Config>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034e4:	f3bf 8f5f 	dmb	sy
}
 80034e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034ea:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <HAL_MPU_Disable+0x28>)
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	4a06      	ldr	r2, [pc, #24]	@ (8003508 <HAL_MPU_Disable+0x28>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034f6:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_MPU_Disable+0x2c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	605a      	str	r2, [r3, #4]
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000ed00 	.word	0xe000ed00
 800350c:	e000ed90 	.word	0xe000ed90

08003510 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003518:	4a0b      	ldr	r2, [pc, #44]	@ (8003548 <HAL_MPU_Enable+0x38>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <HAL_MPU_Enable+0x3c>)
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	4a09      	ldr	r2, [pc, #36]	@ (800354c <HAL_MPU_Enable+0x3c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800352e:	f3bf 8f4f 	dsb	sy
}
 8003532:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003534:	f3bf 8f6f 	isb	sy
}
 8003538:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed90 	.word	0xe000ed90
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	785a      	ldrb	r2, [r3, #1]
 800355c:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_MPU_ConfigRegion+0x7c>)
 800355e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003560:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <HAL_MPU_ConfigRegion+0x7c>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <HAL_MPU_ConfigRegion+0x7c>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800356c:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <HAL_MPU_ConfigRegion+0x7c>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7b1b      	ldrb	r3, [r3, #12]
 8003578:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7adb      	ldrb	r3, [r3, #11]
 800357e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7a9b      	ldrb	r3, [r3, #10]
 8003586:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7b5b      	ldrb	r3, [r3, #13]
 800358e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7b9b      	ldrb	r3, [r3, #14]
 8003596:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7bdb      	ldrb	r3, [r3, #15]
 800359e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7a5b      	ldrb	r3, [r3, #9]
 80035a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7a1b      	ldrb	r3, [r3, #8]
 80035ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035bc:	6113      	str	r3, [r2, #16]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed90 	.word	0xe000ed90

080035d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff fe5a 	bl	8003290 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e2dc      	b.n	8003ba2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d008      	beq.n	8003606 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	@ 0x80
 80035f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e2cd      	b.n	8003ba2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a76      	ldr	r2, [pc, #472]	@ (80037e4 <HAL_DMA_Abort+0x214>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d04a      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a74      	ldr	r2, [pc, #464]	@ (80037e8 <HAL_DMA_Abort+0x218>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d045      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	@ (80037ec <HAL_DMA_Abort+0x21c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d040      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a71      	ldr	r2, [pc, #452]	@ (80037f0 <HAL_DMA_Abort+0x220>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d03b      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a70      	ldr	r2, [pc, #448]	@ (80037f4 <HAL_DMA_Abort+0x224>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d036      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6e      	ldr	r2, [pc, #440]	@ (80037f8 <HAL_DMA_Abort+0x228>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d031      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6d      	ldr	r2, [pc, #436]	@ (80037fc <HAL_DMA_Abort+0x22c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d02c      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6b      	ldr	r2, [pc, #428]	@ (8003800 <HAL_DMA_Abort+0x230>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d027      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6a      	ldr	r2, [pc, #424]	@ (8003804 <HAL_DMA_Abort+0x234>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a68      	ldr	r2, [pc, #416]	@ (8003808 <HAL_DMA_Abort+0x238>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a67      	ldr	r2, [pc, #412]	@ (800380c <HAL_DMA_Abort+0x23c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_DMA_Abort+0x240>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a64      	ldr	r2, [pc, #400]	@ (8003814 <HAL_DMA_Abort+0x244>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a62      	ldr	r2, [pc, #392]	@ (8003818 <HAL_DMA_Abort+0x248>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a61      	ldr	r2, [pc, #388]	@ (800381c <HAL_DMA_Abort+0x24c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_DMA_Abort+0xd6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5f      	ldr	r2, [pc, #380]	@ (8003820 <HAL_DMA_Abort+0x250>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Abort+0xda>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_DMA_Abort+0xdc>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 021e 	bic.w	r2, r2, #30
 80036be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e00a      	b.n	80036ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 020e 	bic.w	r2, r2, #14
 80036e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <HAL_DMA_Abort+0x214>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d072      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3a      	ldr	r2, [pc, #232]	@ (80037e8 <HAL_DMA_Abort+0x218>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d06d      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a39      	ldr	r2, [pc, #228]	@ (80037ec <HAL_DMA_Abort+0x21c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d068      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a37      	ldr	r2, [pc, #220]	@ (80037f0 <HAL_DMA_Abort+0x220>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d063      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a36      	ldr	r2, [pc, #216]	@ (80037f4 <HAL_DMA_Abort+0x224>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d05e      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a34      	ldr	r2, [pc, #208]	@ (80037f8 <HAL_DMA_Abort+0x228>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d059      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a33      	ldr	r2, [pc, #204]	@ (80037fc <HAL_DMA_Abort+0x22c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d054      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a31      	ldr	r2, [pc, #196]	@ (8003800 <HAL_DMA_Abort+0x230>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04f      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a30      	ldr	r2, [pc, #192]	@ (8003804 <HAL_DMA_Abort+0x234>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d04a      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2e      	ldr	r2, [pc, #184]	@ (8003808 <HAL_DMA_Abort+0x238>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d045      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <HAL_DMA_Abort+0x23c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d040      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <HAL_DMA_Abort+0x240>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d03b      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <HAL_DMA_Abort+0x244>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d036      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <HAL_DMA_Abort+0x248>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d031      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a27      	ldr	r2, [pc, #156]	@ (800381c <HAL_DMA_Abort+0x24c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d02c      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a25      	ldr	r2, [pc, #148]	@ (8003820 <HAL_DMA_Abort+0x250>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d027      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a24      	ldr	r2, [pc, #144]	@ (8003824 <HAL_DMA_Abort+0x254>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a22      	ldr	r2, [pc, #136]	@ (8003828 <HAL_DMA_Abort+0x258>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01d      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a21      	ldr	r2, [pc, #132]	@ (800382c <HAL_DMA_Abort+0x25c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003830 <HAL_DMA_Abort+0x260>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003834 <HAL_DMA_Abort+0x264>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_DMA_Abort+0x268>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <HAL_DMA_Abort+0x26c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_DMA_Abort+0x20e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a19      	ldr	r2, [pc, #100]	@ (8003840 <HAL_DMA_Abort+0x270>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d132      	bne.n	8003844 <HAL_DMA_Abort+0x274>
 80037de:	2301      	movs	r3, #1
 80037e0:	e031      	b.n	8003846 <HAL_DMA_Abort+0x276>
 80037e2:	bf00      	nop
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	58025408 	.word	0x58025408
 8003828:	5802541c 	.word	0x5802541c
 800382c:	58025430 	.word	0x58025430
 8003830:	58025444 	.word	0x58025444
 8003834:	58025458 	.word	0x58025458
 8003838:	5802546c 	.word	0x5802546c
 800383c:	58025480 	.word	0x58025480
 8003840:	58025494 	.word	0x58025494
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003858:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6d      	ldr	r2, [pc, #436]	@ (8003a14 <HAL_DMA_Abort+0x444>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d04a      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6b      	ldr	r2, [pc, #428]	@ (8003a18 <HAL_DMA_Abort+0x448>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d045      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6a      	ldr	r2, [pc, #424]	@ (8003a1c <HAL_DMA_Abort+0x44c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d040      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a68      	ldr	r2, [pc, #416]	@ (8003a20 <HAL_DMA_Abort+0x450>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d03b      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a67      	ldr	r2, [pc, #412]	@ (8003a24 <HAL_DMA_Abort+0x454>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d036      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a65      	ldr	r2, [pc, #404]	@ (8003a28 <HAL_DMA_Abort+0x458>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d031      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a64      	ldr	r2, [pc, #400]	@ (8003a2c <HAL_DMA_Abort+0x45c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d02c      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a62      	ldr	r2, [pc, #392]	@ (8003a30 <HAL_DMA_Abort+0x460>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d027      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a61      	ldr	r2, [pc, #388]	@ (8003a34 <HAL_DMA_Abort+0x464>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003a38 <HAL_DMA_Abort+0x468>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01d      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a3c <HAL_DMA_Abort+0x46c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003a40 <HAL_DMA_Abort+0x470>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a44 <HAL_DMA_Abort+0x474>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a59      	ldr	r2, [pc, #356]	@ (8003a48 <HAL_DMA_Abort+0x478>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a58      	ldr	r2, [pc, #352]	@ (8003a4c <HAL_DMA_Abort+0x47c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_Abort+0x32a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a56      	ldr	r2, [pc, #344]	@ (8003a50 <HAL_DMA_Abort+0x480>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <HAL_DMA_Abort+0x33c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e007      	b.n	800391c <HAL_DMA_Abort+0x34c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800391c:	e013      	b.n	8003946 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800391e:	f7ff fcb7 	bl	8003290 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b05      	cmp	r3, #5
 800392a:	d90c      	bls.n	8003946 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2203      	movs	r2, #3
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e12d      	b.n	8003ba2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2f      	ldr	r2, [pc, #188]	@ (8003a14 <HAL_DMA_Abort+0x444>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d04a      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <HAL_DMA_Abort+0x448>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d045      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2c      	ldr	r2, [pc, #176]	@ (8003a1c <HAL_DMA_Abort+0x44c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d040      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <HAL_DMA_Abort+0x450>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d03b      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a29      	ldr	r2, [pc, #164]	@ (8003a24 <HAL_DMA_Abort+0x454>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d036      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <HAL_DMA_Abort+0x458>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d031      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a26      	ldr	r2, [pc, #152]	@ (8003a2c <HAL_DMA_Abort+0x45c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d02c      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a24      	ldr	r2, [pc, #144]	@ (8003a30 <HAL_DMA_Abort+0x460>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d027      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <HAL_DMA_Abort+0x464>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a21      	ldr	r2, [pc, #132]	@ (8003a38 <HAL_DMA_Abort+0x468>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a20      	ldr	r2, [pc, #128]	@ (8003a3c <HAL_DMA_Abort+0x46c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_DMA_Abort+0x470>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_DMA_Abort+0x474>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <HAL_DMA_Abort+0x478>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_DMA_Abort+0x47c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_Abort+0x422>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_DMA_Abort+0x480>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_DMA_Abort+0x426>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_DMA_Abort+0x428>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02b      	beq.n	8003a54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	223f      	movs	r2, #63	@ 0x3f
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e02a      	b.n	8003a6a <HAL_DMA_Abort+0x49a>
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2201      	movs	r2, #1
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4f      	ldr	r2, [pc, #316]	@ (8003bac <HAL_DMA_Abort+0x5dc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d072      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb0 <HAL_DMA_Abort+0x5e0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d06d      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb4 <HAL_DMA_Abort+0x5e4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d068      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb8 <HAL_DMA_Abort+0x5e8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d063      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a49      	ldr	r2, [pc, #292]	@ (8003bbc <HAL_DMA_Abort+0x5ec>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d05e      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a47      	ldr	r2, [pc, #284]	@ (8003bc0 <HAL_DMA_Abort+0x5f0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d059      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a46      	ldr	r2, [pc, #280]	@ (8003bc4 <HAL_DMA_Abort+0x5f4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d054      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a44      	ldr	r2, [pc, #272]	@ (8003bc8 <HAL_DMA_Abort+0x5f8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04f      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a43      	ldr	r2, [pc, #268]	@ (8003bcc <HAL_DMA_Abort+0x5fc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d04a      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a41      	ldr	r2, [pc, #260]	@ (8003bd0 <HAL_DMA_Abort+0x600>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d045      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a40      	ldr	r2, [pc, #256]	@ (8003bd4 <HAL_DMA_Abort+0x604>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d040      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd8 <HAL_DMA_Abort+0x608>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d03b      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3d      	ldr	r2, [pc, #244]	@ (8003bdc <HAL_DMA_Abort+0x60c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d036      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3b      	ldr	r2, [pc, #236]	@ (8003be0 <HAL_DMA_Abort+0x610>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a3a      	ldr	r2, [pc, #232]	@ (8003be4 <HAL_DMA_Abort+0x614>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d02c      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a38      	ldr	r2, [pc, #224]	@ (8003be8 <HAL_DMA_Abort+0x618>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d027      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a37      	ldr	r2, [pc, #220]	@ (8003bec <HAL_DMA_Abort+0x61c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a35      	ldr	r2, [pc, #212]	@ (8003bf0 <HAL_DMA_Abort+0x620>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a34      	ldr	r2, [pc, #208]	@ (8003bf4 <HAL_DMA_Abort+0x624>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a32      	ldr	r2, [pc, #200]	@ (8003bf8 <HAL_DMA_Abort+0x628>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a31      	ldr	r2, [pc, #196]	@ (8003bfc <HAL_DMA_Abort+0x62c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2f      	ldr	r2, [pc, #188]	@ (8003c00 <HAL_DMA_Abort+0x630>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c04 <HAL_DMA_Abort+0x634>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_DMA_Abort+0x58a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <HAL_DMA_Abort+0x638>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_DMA_Abort+0x58e>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_DMA_Abort+0x590>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	58025408 	.word	0x58025408
 8003bf0:	5802541c 	.word	0x5802541c
 8003bf4:	58025430 	.word	0x58025430
 8003bf8:	58025444 	.word	0x58025444
 8003bfc:	58025458 	.word	0x58025458
 8003c00:	5802546c 	.word	0x5802546c
 8003c04:	58025480 	.word	0x58025480
 8003c08:	58025494 	.word	0x58025494

08003c0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e237      	b.n	800408e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e22c      	b.n	800408e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a5c      	ldr	r2, [pc, #368]	@ (8003dac <HAL_DMA_Abort_IT+0x1a0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d04a      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5b      	ldr	r2, [pc, #364]	@ (8003db0 <HAL_DMA_Abort_IT+0x1a4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d045      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a59      	ldr	r2, [pc, #356]	@ (8003db4 <HAL_DMA_Abort_IT+0x1a8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d040      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a58      	ldr	r2, [pc, #352]	@ (8003db8 <HAL_DMA_Abort_IT+0x1ac>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d03b      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a56      	ldr	r2, [pc, #344]	@ (8003dbc <HAL_DMA_Abort_IT+0x1b0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d036      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a55      	ldr	r2, [pc, #340]	@ (8003dc0 <HAL_DMA_Abort_IT+0x1b4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d031      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a53      	ldr	r2, [pc, #332]	@ (8003dc4 <HAL_DMA_Abort_IT+0x1b8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d02c      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a52      	ldr	r2, [pc, #328]	@ (8003dc8 <HAL_DMA_Abort_IT+0x1bc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d027      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_DMA_Abort_IT+0x1c0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d022      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd0 <HAL_DMA_Abort_IT+0x1c4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d01d      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd4 <HAL_DMA_Abort_IT+0x1c8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d018      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8003dd8 <HAL_DMA_Abort_IT+0x1cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ddc <HAL_DMA_Abort_IT+0x1d0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a49      	ldr	r2, [pc, #292]	@ (8003de0 <HAL_DMA_Abort_IT+0x1d4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a47      	ldr	r2, [pc, #284]	@ (8003de4 <HAL_DMA_Abort_IT+0x1d8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xc8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a46      	ldr	r2, [pc, #280]	@ (8003de8 <HAL_DMA_Abort_IT+0x1dc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DMA_Abort_IT+0xcc>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_DMA_Abort_IT+0xce>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8086 	beq.w	8003dec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2f      	ldr	r2, [pc, #188]	@ (8003dac <HAL_DMA_Abort_IT+0x1a0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d04a      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8003db0 <HAL_DMA_Abort_IT+0x1a4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d045      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <HAL_DMA_Abort_IT+0x1a8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d040      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <HAL_DMA_Abort_IT+0x1ac>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d03b      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a29      	ldr	r2, [pc, #164]	@ (8003dbc <HAL_DMA_Abort_IT+0x1b0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d036      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a28      	ldr	r2, [pc, #160]	@ (8003dc0 <HAL_DMA_Abort_IT+0x1b4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d031      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a26      	ldr	r2, [pc, #152]	@ (8003dc4 <HAL_DMA_Abort_IT+0x1b8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02c      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a25      	ldr	r2, [pc, #148]	@ (8003dc8 <HAL_DMA_Abort_IT+0x1bc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d027      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	@ (8003dcc <HAL_DMA_Abort_IT+0x1c0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a22      	ldr	r2, [pc, #136]	@ (8003dd0 <HAL_DMA_Abort_IT+0x1c4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01d      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a20      	ldr	r2, [pc, #128]	@ (8003dd4 <HAL_DMA_Abort_IT+0x1c8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd8 <HAL_DMA_Abort_IT+0x1cc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <HAL_DMA_Abort_IT+0x1d0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <HAL_DMA_Abort_IT+0x1d4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <HAL_DMA_Abort_IT+0x1d8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x17c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <HAL_DMA_Abort_IT+0x1dc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <HAL_DMA_Abort_IT+0x18e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e178      	b.n	800408c <HAL_DMA_Abort_IT+0x480>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e16f      	b.n	800408c <HAL_DMA_Abort_IT+0x480>
 8003dac:	40020010 	.word	0x40020010
 8003db0:	40020028 	.word	0x40020028
 8003db4:	40020040 	.word	0x40020040
 8003db8:	40020058 	.word	0x40020058
 8003dbc:	40020070 	.word	0x40020070
 8003dc0:	40020088 	.word	0x40020088
 8003dc4:	400200a0 	.word	0x400200a0
 8003dc8:	400200b8 	.word	0x400200b8
 8003dcc:	40020410 	.word	0x40020410
 8003dd0:	40020428 	.word	0x40020428
 8003dd4:	40020440 	.word	0x40020440
 8003dd8:	40020458 	.word	0x40020458
 8003ddc:	40020470 	.word	0x40020470
 8003de0:	40020488 	.word	0x40020488
 8003de4:	400204a0 	.word	0x400204a0
 8003de8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 020e 	bic.w	r2, r2, #14
 8003dfa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6c      	ldr	r2, [pc, #432]	@ (8003fb4 <HAL_DMA_Abort_IT+0x3a8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d04a      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8003fb8 <HAL_DMA_Abort_IT+0x3ac>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d045      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a69      	ldr	r2, [pc, #420]	@ (8003fbc <HAL_DMA_Abort_IT+0x3b0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d040      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a68      	ldr	r2, [pc, #416]	@ (8003fc0 <HAL_DMA_Abort_IT+0x3b4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d03b      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a66      	ldr	r2, [pc, #408]	@ (8003fc4 <HAL_DMA_Abort_IT+0x3b8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a65      	ldr	r2, [pc, #404]	@ (8003fc8 <HAL_DMA_Abort_IT+0x3bc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d031      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a63      	ldr	r2, [pc, #396]	@ (8003fcc <HAL_DMA_Abort_IT+0x3c0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02c      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a62      	ldr	r2, [pc, #392]	@ (8003fd0 <HAL_DMA_Abort_IT+0x3c4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d027      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a60      	ldr	r2, [pc, #384]	@ (8003fd4 <HAL_DMA_Abort_IT+0x3c8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd8 <HAL_DMA_Abort_IT+0x3cc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01d      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a5d      	ldr	r2, [pc, #372]	@ (8003fdc <HAL_DMA_Abort_IT+0x3d0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe0 <HAL_DMA_Abort_IT+0x3d4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe4 <HAL_DMA_Abort_IT+0x3d8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a59      	ldr	r2, [pc, #356]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3dc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a57      	ldr	r2, [pc, #348]	@ (8003fec <HAL_DMA_Abort_IT+0x3e0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x290>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a56      	ldr	r2, [pc, #344]	@ (8003ff0 <HAL_DMA_Abort_IT+0x3e4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <HAL_DMA_Abort_IT+0x2a2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e007      	b.n	8003ebe <HAL_DMA_Abort_IT+0x2b2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3c      	ldr	r2, [pc, #240]	@ (8003fb4 <HAL_DMA_Abort_IT+0x3a8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d072      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8003fb8 <HAL_DMA_Abort_IT+0x3ac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d06d      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a39      	ldr	r2, [pc, #228]	@ (8003fbc <HAL_DMA_Abort_IT+0x3b0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d068      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a37      	ldr	r2, [pc, #220]	@ (8003fc0 <HAL_DMA_Abort_IT+0x3b4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d063      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a36      	ldr	r2, [pc, #216]	@ (8003fc4 <HAL_DMA_Abort_IT+0x3b8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d05e      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a34      	ldr	r2, [pc, #208]	@ (8003fc8 <HAL_DMA_Abort_IT+0x3bc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d059      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a33      	ldr	r2, [pc, #204]	@ (8003fcc <HAL_DMA_Abort_IT+0x3c0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d054      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a31      	ldr	r2, [pc, #196]	@ (8003fd0 <HAL_DMA_Abort_IT+0x3c4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d04f      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a30      	ldr	r2, [pc, #192]	@ (8003fd4 <HAL_DMA_Abort_IT+0x3c8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d04a      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <HAL_DMA_Abort_IT+0x3cc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d045      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2d      	ldr	r2, [pc, #180]	@ (8003fdc <HAL_DMA_Abort_IT+0x3d0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d040      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe0 <HAL_DMA_Abort_IT+0x3d4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d03b      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <HAL_DMA_Abort_IT+0x3d8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d036      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a28      	ldr	r2, [pc, #160]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3dc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d031      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a27      	ldr	r2, [pc, #156]	@ (8003fec <HAL_DMA_Abort_IT+0x3e0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d02c      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a25      	ldr	r2, [pc, #148]	@ (8003ff0 <HAL_DMA_Abort_IT+0x3e4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d027      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a24      	ldr	r2, [pc, #144]	@ (8003ff4 <HAL_DMA_Abort_IT+0x3e8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <HAL_DMA_Abort_IT+0x3ec>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a21      	ldr	r2, [pc, #132]	@ (8003ffc <HAL_DMA_Abort_IT+0x3f0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1f      	ldr	r2, [pc, #124]	@ (8004000 <HAL_DMA_Abort_IT+0x3f4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <HAL_DMA_Abort_IT+0x3f8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1c      	ldr	r2, [pc, #112]	@ (8004008 <HAL_DMA_Abort_IT+0x3fc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800400c <HAL_DMA_Abort_IT+0x400>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_DMA_Abort_IT+0x3a2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a19      	ldr	r2, [pc, #100]	@ (8004010 <HAL_DMA_Abort_IT+0x404>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d132      	bne.n	8004014 <HAL_DMA_Abort_IT+0x408>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e031      	b.n	8004016 <HAL_DMA_Abort_IT+0x40a>
 8003fb2:	bf00      	nop
 8003fb4:	40020010 	.word	0x40020010
 8003fb8:	40020028 	.word	0x40020028
 8003fbc:	40020040 	.word	0x40020040
 8003fc0:	40020058 	.word	0x40020058
 8003fc4:	40020070 	.word	0x40020070
 8003fc8:	40020088 	.word	0x40020088
 8003fcc:	400200a0 	.word	0x400200a0
 8003fd0:	400200b8 	.word	0x400200b8
 8003fd4:	40020410 	.word	0x40020410
 8003fd8:	40020428 	.word	0x40020428
 8003fdc:	40020440 	.word	0x40020440
 8003fe0:	40020458 	.word	0x40020458
 8003fe4:	40020470 	.word	0x40020470
 8003fe8:	40020488 	.word	0x40020488
 8003fec:	400204a0 	.word	0x400204a0
 8003ff0:	400204b8 	.word	0x400204b8
 8003ff4:	58025408 	.word	0x58025408
 8003ff8:	5802541c 	.word	0x5802541c
 8003ffc:	58025430 	.word	0x58025430
 8004000:	58025444 	.word	0x58025444
 8004004:	58025458 	.word	0x58025458
 8004008:	5802546c 	.word	0x5802546c
 800400c:	58025480 	.word	0x58025480
 8004010:	58025494 	.word	0x58025494
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d028      	beq.n	800406c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004024:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004028:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004048:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800405c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004060:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800406a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop

08004098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	@ 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040a6:	4b89      	ldr	r3, [pc, #548]	@ (80042cc <HAL_GPIO_Init+0x234>)
 80040a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040aa:	e194      	b.n	80043d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8186 	beq.w	80043d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d005      	beq.n	80040dc <HAL_GPIO_Init+0x44>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d130      	bne.n	800413e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2203      	movs	r2, #3
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004112:	2201      	movs	r2, #1
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 0201 	and.w	r2, r3, #1
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d017      	beq.n	800417a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d123      	bne.n	80041ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	08da      	lsrs	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3208      	adds	r2, #8
 800418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0203 	and.w	r2, r3, #3
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80e0 	beq.w	80043d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004210:	4b2f      	ldr	r3, [pc, #188]	@ (80042d0 <HAL_GPIO_Init+0x238>)
 8004212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004216:	4a2e      	ldr	r2, [pc, #184]	@ (80042d0 <HAL_GPIO_Init+0x238>)
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004220:	4b2b      	ldr	r3, [pc, #172]	@ (80042d0 <HAL_GPIO_Init+0x238>)
 8004222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800422e:	4a29      	ldr	r2, [pc, #164]	@ (80042d4 <HAL_GPIO_Init+0x23c>)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	3302      	adds	r3, #2
 8004236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	220f      	movs	r2, #15
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a20      	ldr	r2, [pc, #128]	@ (80042d8 <HAL_GPIO_Init+0x240>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d052      	beq.n	8004300 <HAL_GPIO_Init+0x268>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_GPIO_Init+0x244>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_GPIO_Init+0x22e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_GPIO_Init+0x248>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02b      	beq.n	80042c2 <HAL_GPIO_Init+0x22a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <HAL_GPIO_Init+0x24c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d025      	beq.n	80042be <HAL_GPIO_Init+0x226>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <HAL_GPIO_Init+0x250>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01f      	beq.n	80042ba <HAL_GPIO_Init+0x222>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_GPIO_Init+0x254>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d019      	beq.n	80042b6 <HAL_GPIO_Init+0x21e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <HAL_GPIO_Init+0x258>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0x21a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a19      	ldr	r2, [pc, #100]	@ (80042f4 <HAL_GPIO_Init+0x25c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00d      	beq.n	80042ae <HAL_GPIO_Init+0x216>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a18      	ldr	r2, [pc, #96]	@ (80042f8 <HAL_GPIO_Init+0x260>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_Init+0x212>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <HAL_GPIO_Init+0x264>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_GPIO_Init+0x20e>
 80042a2:	2309      	movs	r3, #9
 80042a4:	e02d      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042a6:	230a      	movs	r3, #10
 80042a8:	e02b      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042aa:	2308      	movs	r3, #8
 80042ac:	e029      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042ae:	2307      	movs	r3, #7
 80042b0:	e027      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042b2:	2306      	movs	r3, #6
 80042b4:	e025      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042b6:	2305      	movs	r3, #5
 80042b8:	e023      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042ba:	2304      	movs	r3, #4
 80042bc:	e021      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042be:	2303      	movs	r3, #3
 80042c0:	e01f      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e01d      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e01b      	b.n	8004302 <HAL_GPIO_Init+0x26a>
 80042ca:	bf00      	nop
 80042cc:	58000080 	.word	0x58000080
 80042d0:	58024400 	.word	0x58024400
 80042d4:	58000400 	.word	0x58000400
 80042d8:	58020000 	.word	0x58020000
 80042dc:	58020400 	.word	0x58020400
 80042e0:	58020800 	.word	0x58020800
 80042e4:	58020c00 	.word	0x58020c00
 80042e8:	58021000 	.word	0x58021000
 80042ec:	58021400 	.word	0x58021400
 80042f0:	58021800 	.word	0x58021800
 80042f4:	58021c00 	.word	0x58021c00
 80042f8:	58022000 	.word	0x58022000
 80042fc:	58022400 	.word	0x58022400
 8004300:	2300      	movs	r3, #0
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	f002 0203 	and.w	r2, r2, #3
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	4093      	lsls	r3, r2
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004312:	4938      	ldr	r1, [pc, #224]	@ (80043f4 <HAL_GPIO_Init+0x35c>)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	3302      	adds	r3, #2
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f ae63 	bne.w	80040ac <HAL_GPIO_Init+0x14>
  }
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	3724      	adds	r7, #36	@ 0x24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	58000400 	.word	0x58000400

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004414:	e003      	b.n	800441e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	041a      	lsls	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	619a      	str	r2, [r3, #24]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0bd      	b.n	80045ba <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d031      	beq.n	80044e6 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4f      	ldr	r2, [pc, #316]	@ (80045c4 <HAL_HRTIM_Init+0x198>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10e      	bne.n	80044aa <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800448c:	4b4e      	ldr	r3, [pc, #312]	@ (80045c8 <HAL_HRTIM_Init+0x19c>)
 800448e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004492:	4a4d      	ldr	r2, [pc, #308]	@ (80045c8 <HAL_HRTIM_Init+0x19c>)
 8004494:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004498:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800449c:	4b4a      	ldr	r3, [pc, #296]	@ (80045c8 <HAL_HRTIM_Init+0x19c>)
 800449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80044b8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044ce:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd ff8c 	bl	8002404 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d012      	beq.n	800451e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004506:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]
 8004532:	e03e      	b.n	80045b2 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004534:	7dfa      	ldrb	r2, [r7, #23]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	3318      	adds	r3, #24
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004548:	7dfa      	ldrb	r2, [r7, #23]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	331c      	adds	r3, #28
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800455c:	7dfa      	ldrb	r2, [r7, #23]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3320      	adds	r3, #32
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004570:	7dfa      	ldrb	r2, [r7, #23]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3324      	adds	r3, #36	@ 0x24
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004584:	7dfa      	ldrb	r2, [r7, #23]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	3328      	adds	r3, #40	@ 0x28
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004598:	7dfa      	ldrb	r2, [r7, #23]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3330      	adds	r3, #48	@ 0x30
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	3301      	adds	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d9bd      	bls.n	8004534 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40017400 	.word	0x40017400
 80045c8:	58024400 	.word	0x58024400

080045cc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d101      	bne.n	80045e8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	e015      	b.n	8004614 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d104      	bne.n	8004600 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fa88 	bl	8004b0e <HRTIM_MasterBase_Config>
 80045fe:	e004      	b.n	800460a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fab1 	bl	8004b6c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d101      	bne.n	8004638 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	e01c      	b.n	8004672 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_HRTIM_EventConfig+0x2a>
 8004642:	2302      	movs	r3, #2
 8004644:	e015      	b.n	8004672 <HAL_HRTIM_EventConfig+0x56>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fd44 	bl	80050e8 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d101      	bne.n	8004694 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
 8004692:	e025      	b.n	80046e0 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_HRTIM_EventPrescalerConfig+0x28>
 800469e:	2302      	movs	r3, #2
 80046a0:	e01e      	b.n	80046e0 <HAL_HRTIM_EventPrescalerConfig+0x66>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 80046ba:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d101      	bne.n	8004708 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
 8004706:	e05f      	b.n	80047c8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004712:	2302      	movs	r3, #2
 8004714:	e058      	b.n	80047c8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b05      	cmp	r3, #5
 800472a:	d104      	bne.n	8004736 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fa5c 	bl	8004bec <HRTIM_MasterWaveform_Config>
 8004734:	e004      	b.n	8004740 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fabc 	bl	8004cb8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4403      	add	r3, r0
 8004752:	3320      	adds	r3, #32
 8004754:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4403      	add	r3, r0
 8004768:	3324      	adds	r3, #36	@ 0x24
 800476a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6899      	ldr	r1, [r3, #8]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4403      	add	r3, r0
 800477e:	3328      	adds	r3, #40	@ 0x28
 8004780:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4403      	add	r3, r0
 8004794:	332c      	adds	r3, #44	@ 0x2c
 8004796:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6919      	ldr	r1, [r3, #16]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4403      	add	r3, r0
 80047aa:	3330      	adds	r3, #48	@ 0x30
 80047ac:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fec1 	bl	8005538 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d101      	bne.n	80047ee <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	e157      	b.n	8004a9e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e150      	b.n	8004a9e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d140      	bne.n	8004894 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3b01      	subs	r3, #1
 8004816:	2b07      	cmp	r3, #7
 8004818:	d82a      	bhi.n	8004870 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800481a:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004841 	.word	0x08004841
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004871 	.word	0x08004871
 800482c:	08004859 	.word	0x08004859
 8004830:	08004871 	.word	0x08004871
 8004834:	08004871 	.word	0x08004871
 8004838:	08004871 	.word	0x08004871
 800483c:	08004865 	.word	0x08004865
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	61da      	str	r2, [r3, #28]
        break;
 800484a:	e01a      	b.n	8004882 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8004856:	e014      	b.n	8004882 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8004862:	e00e      	b.n	8004882 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800486e:	e008      	b.n	8004882 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2207      	movs	r2, #7
 8004874:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8004880:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b07      	cmp	r3, #7
 800488c:	f040 80fe 	bne.w	8004a8c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e104      	b.n	8004a9e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	2b07      	cmp	r3, #7
 800489a:	f200 80e3 	bhi.w	8004a64 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800489e:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	080048d9 	.word	0x080048d9
 80048ac:	08004a65 	.word	0x08004a65
 80048b0:	08004995 	.word	0x08004995
 80048b4:	08004a65 	.word	0x08004a65
 80048b8:	08004a65 	.word	0x08004a65
 80048bc:	08004a65 	.word	0x08004a65
 80048c0:	080049a9 	.word	0x080049a9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	01db      	lsls	r3, r3, #7
 80048d0:	440b      	add	r3, r1
 80048d2:	339c      	adds	r3, #156	@ 0x9c
 80048d4:	601a      	str	r2, [r3, #0]
        break;
 80048d6:	e0d1      	b.n	8004a7c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	01db      	lsls	r3, r3, #7
 80048e4:	440b      	add	r3, r1
 80048e6:	33a4      	adds	r3, #164	@ 0xa4
 80048e8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03f      	beq.n	8004972 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3301      	adds	r3, #1
 80048fa:	01db      	lsls	r3, r3, #7
 80048fc:	4413      	add	r3, r2
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	6811      	ldr	r1, [r2, #0]
 8004904:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3301      	adds	r3, #1
 800490c:	01db      	lsls	r3, r3, #7
 800490e:	440b      	add	r3, r1
 8004910:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3301      	adds	r3, #1
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	4413      	add	r3, r2
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	68f9      	ldr	r1, [r7, #12]
 8004926:	6809      	ldr	r1, [r1, #0]
 8004928:	431a      	orrs	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	440b      	add	r3, r1
 8004932:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493c:	d109      	bne.n	8004952 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	01db      	lsls	r3, r3, #7
 800494a:	440b      	add	r3, r1
 800494c:	339c      	adds	r3, #156	@ 0x9c
 800494e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8004950:	e091      	b.n	8004a76 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800495a:	f040 808c 	bne.w	8004a76 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	01db      	lsls	r3, r3, #7
 800496a:	440b      	add	r3, r1
 800496c:	33a8      	adds	r3, #168	@ 0xa8
 800496e:	601a      	str	r2, [r3, #0]
         break;
 8004970:	e081      	b.n	8004a76 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3301      	adds	r3, #1
 800497a:	01db      	lsls	r3, r3, #7
 800497c:	4413      	add	r3, r2
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	6811      	ldr	r1, [r2, #0]
 8004984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	3301      	adds	r3, #1
 800498c:	01db      	lsls	r3, r3, #7
 800498e:	440b      	add	r3, r1
 8004990:	601a      	str	r2, [r3, #0]
         break;
 8004992:	e070      	b.n	8004a76 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6819      	ldr	r1, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	01db      	lsls	r3, r3, #7
 80049a0:	440b      	add	r3, r1
 80049a2:	33a8      	adds	r3, #168	@ 0xa8
 80049a4:	601a      	str	r2, [r3, #0]
        break;
 80049a6:	e069      	b.n	8004a7c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	440b      	add	r3, r1
 80049b6:	33ac      	adds	r3, #172	@ 0xac
 80049b8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03f      	beq.n	8004a42 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3301      	adds	r3, #1
 80049ca:	01db      	lsls	r3, r3, #7
 80049cc:	4413      	add	r3, r2
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	6811      	ldr	r1, [r2, #0]
 80049d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3301      	adds	r3, #1
 80049dc:	01db      	lsls	r3, r3, #7
 80049de:	440b      	add	r3, r1
 80049e0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	4413      	add	r3, r2
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6809      	ldr	r1, [r1, #0]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	3301      	adds	r3, #1
 8004a00:	01db      	lsls	r3, r3, #7
 8004a02:	440b      	add	r3, r1
 8004a04:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0e:	d109      	bne.n	8004a24 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	01db      	lsls	r3, r3, #7
 8004a1c:	440b      	add	r3, r1
 8004a1e:	339c      	adds	r3, #156	@ 0x9c
 8004a20:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8004a22:	e02a      	b.n	8004a7a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a2c:	d125      	bne.n	8004a7a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	01db      	lsls	r3, r3, #7
 8004a3a:	440b      	add	r3, r1
 8004a3c:	33a8      	adds	r3, #168	@ 0xa8
 8004a3e:	601a      	str	r2, [r3, #0]
         break;
 8004a40:	e01b      	b.n	8004a7a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4413      	add	r3, r2
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	6811      	ldr	r1, [r2, #0]
 8004a54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	01db      	lsls	r3, r3, #7
 8004a5e:	440b      	add	r3, r1
 8004a60:	601a      	str	r2, [r3, #0]
         break;
 8004a62:	e00a      	b.n	8004a7a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2207      	movs	r2, #7
 8004a68:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8004a74:	e002      	b.n	8004a7c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004a7a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	d101      	bne.n	8004a8c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e008      	b.n	8004a9e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop

08004aac <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d101      	bne.n	8004aca <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e01d      	b.n	8004b06 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e016      	b.n	8004b06 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fa22 	bl	8004f38 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f023 0318 	bic.w	r3, r3, #24
 8004b38:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	6852      	ldr	r2, [r2, #4]
 8004b5e:	619a      	str	r2, [r3, #24]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	01db      	lsls	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 0318 	bic.w	r3, r3, #24
 8004ba0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	01db      	lsls	r3, r3, #7
 8004bb6:	4413      	add	r3, r2
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	01db      	lsls	r3, r3, #7
 8004bc8:	440b      	add	r3, r1
 8004bca:	3394      	adds	r3, #148	@ 0x94
 8004bcc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	01db      	lsls	r3, r3, #7
 8004bda:	440b      	add	r3, r1
 8004bdc:	3398      	adds	r3, #152	@ 0x98
 8004bde:	601a      	str	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0320 	bic.w	r3, r3, #32
 8004c0e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c20:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c32:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004c56:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004c68:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004c7c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b08b      	sub	sp, #44	@ 0x2c
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	01db      	lsls	r3, r3, #7
 8004cce:	4413      	add	r3, r2
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	440b      	add	r3, r1
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3301      	adds	r3, #1
 8004cec:	01db      	lsls	r3, r3, #7
 8004cee:	4413      	add	r3, r2
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	01db      	lsls	r3, r3, #7
 8004cfc:	4413      	add	r3, r2
 8004cfe:	33e8      	adds	r3, #232	@ 0xe8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	01db      	lsls	r3, r3, #7
 8004d0c:	4413      	add	r3, r2
 8004d0e:	33e4      	adds	r3, #228	@ 0xe4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004d1c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	f023 0320 	bic.w	r3, r3, #32
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d50:	4313      	orrs	r3, r2
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d62:	4313      	orrs	r3, r2
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d74:	4313      	orrs	r3, r2
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d86:	4313      	orrs	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d9a:	d103      	bne.n	8004da4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db2:	4313      	orrs	r3, r2
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f023 031f 	bic.w	r3, r3, #31
 8004de0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004df6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d108      	bne.n	8004e1c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e10:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e20:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004e24:	d004      	beq.n	8004e30 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004e2e:	d103      	bne.n	8004e38 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	2b40      	cmp	r3, #64	@ 0x40
 8004e36:	d108      	bne.n	8004e4a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004e3e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d843      	bhi.n	8004ede <HRTIM_TimingUnitWaveform_Config+0x226>
 8004e56:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e71 	.word	0x08004e71
 8004e60:	08004e87 	.word	0x08004e87
 8004e64:	08004e9d 	.word	0x08004e9d
 8004e68:	08004eb3 	.word	0x08004eb3
 8004e6c:	08004ec9 	.word	0x08004ec9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e76:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
      break;
 8004e84:	e02c      	b.n	8004ee0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e8c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61fb      	str	r3, [r7, #28]
      break;
 8004e9a:	e021      	b.n	8004ee0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004ea2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61fb      	str	r3, [r7, #28]
      break;
 8004eb0:	e016      	b.n	8004ee0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]
      break;
 8004ec6:	e00b      	b.n	8004ee0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ece:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	015b      	lsls	r3, r3, #5
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
      break;
 8004edc:	e000      	b.n	8004ee0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004ede:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	01db      	lsls	r3, r3, #7
 8004eea:	4413      	add	r3, r2
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	01db      	lsls	r3, r3, #7
 8004ef8:	4413      	add	r3, r2
 8004efa:	33e8      	adds	r3, #232	@ 0xe8
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	01db      	lsls	r3, r3, #7
 8004f08:	4413      	add	r3, r2
 8004f0a:	33e4      	adds	r3, #228	@ 0xe4
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	01db      	lsls	r3, r3, #7
 8004f18:	4413      	add	r3, r2
 8004f1a:	33d4      	adds	r3, #212	@ 0xd4
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004f2a:	bf00      	nop
 8004f2c:	372c      	adds	r7, #44	@ 0x2c
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b089      	sub	sp, #36	@ 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	33e4      	adds	r3, #228	@ 0xe4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	01db      	lsls	r3, r3, #7
 8004f62:	4413      	add	r3, r2
 8004f64:	33b8      	adds	r3, #184	@ 0xb8
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f70:	d04d      	beq.n	800500e <HRTIM_OutputConfig+0xd6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f78:	d85e      	bhi.n	8005038 <HRTIM_OutputConfig+0x100>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f80:	d032      	beq.n	8004fe8 <HRTIM_OutputConfig+0xb0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f88:	d856      	bhi.n	8005038 <HRTIM_OutputConfig+0x100>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b80      	cmp	r3, #128	@ 0x80
 8004f8e:	d03e      	beq.n	800500e <HRTIM_OutputConfig+0xd6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d850      	bhi.n	8005038 <HRTIM_OutputConfig+0x100>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b40      	cmp	r3, #64	@ 0x40
 8004f9a:	d025      	beq.n	8004fe8 <HRTIM_OutputConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b40      	cmp	r3, #64	@ 0x40
 8004fa0:	d84a      	bhi.n	8005038 <HRTIM_OutputConfig+0x100>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d01f      	beq.n	8004fe8 <HRTIM_OutputConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d044      	beq.n	8005038 <HRTIM_OutputConfig+0x100>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d841      	bhi.n	8005038 <HRTIM_OutputConfig+0x100>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d33e      	bcc.n	8005038 <HRTIM_OutputConfig+0x100>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3b02      	subs	r3, #2
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	4b48      	ldr	r3, [pc, #288]	@ (80050e4 <HRTIM_OutputConfig+0x1ac>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11c      	bne.n	800500e <HRTIM_OutputConfig+0xd6>
 8004fd4:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf14      	ite	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d027      	beq.n	8005038 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	01db      	lsls	r3, r3, #7
 8004ff4:	440b      	add	r3, r1
 8004ff6:	33bc      	adds	r3, #188	@ 0xbc
 8004ff8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	01db      	lsls	r3, r3, #7
 8005006:	440b      	add	r3, r1
 8005008:	33c0      	adds	r3, #192	@ 0xc0
 800500a:	601a      	str	r2, [r3, #0]
      break;
 800500c:	e015      	b.n	800503a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	01db      	lsls	r3, r3, #7
 800501a:	440b      	add	r3, r1
 800501c:	33c4      	adds	r3, #196	@ 0xc4
 800501e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	01db      	lsls	r3, r3, #7
 800502c:	440b      	add	r3, r1
 800502e:	33c8      	adds	r3, #200	@ 0xc8
 8005030:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005032:	2310      	movs	r3, #16
 8005034:	61bb      	str	r3, [r7, #24]
      break;
 8005036:	e000      	b.n	800503a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8005038:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800503a:	22fe      	movs	r2, #254	@ 0xfe
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005042:	43db      	mvns	r3, r3
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	4013      	ands	r3, r2
 8005048:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	4313      	orrs	r3, r2
 8005058:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	4313      	orrs	r3, r2
 8005068:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	4313      	orrs	r3, r2
 8005078:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	4313      	orrs	r3, r2
 8005098:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d111      	bne.n	80050c6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	01db      	lsls	r3, r3, #7
 80050ce:	4413      	add	r3, r2
 80050d0:	33e4      	adds	r3, #228	@ 0xe4
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3724      	adds	r7, #36	@ 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40000041 	.word	0x40000041

080050e8 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	@ 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80050fc:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8005106:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8005110:	617b      	str	r3, [r7, #20]

  switch (Event)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b0a      	cmp	r3, #10
 8005116:	f200 8208 	bhi.w	800552a <HRTIM_EventConfig+0x442>
 800511a:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <HRTIM_EventConfig+0x38>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	0800514d 	.word	0x0800514d
 8005124:	0800516d 	.word	0x0800516d
 8005128:	080051c3 	.word	0x080051c3
 800512c:	0800521f 	.word	0x0800521f
 8005130:	0800527d 	.word	0x0800527d
 8005134:	080052db 	.word	0x080052db
 8005138:	08005339 	.word	0x08005339
 800513c:	08005397 	.word	0x08005397
 8005140:	080053fb 	.word	0x080053fb
 8005144:	0800545f 	.word	0x0800545f
 8005148:	080054c5 	.word	0x080054c5
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800516a:	e1df      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005172:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	4313      	orrs	r3, r2
 8005180:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0318 	and.w	r3, r3, #24
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	4313      	orrs	r3, r2
 800519c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80051c0:	e1b4      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 80051c8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	019b      	lsls	r3, r3, #6
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	019b      	lsls	r3, r3, #6
 8005208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	4313      	orrs	r3, r2
 8005210:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800521c:	e186      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005224:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	031b      	lsls	r3, r3, #12
 800522c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	4313      	orrs	r3, r2
 8005234:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	031b      	lsls	r3, r3, #12
 800523c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4313      	orrs	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	4313      	orrs	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	031b      	lsls	r3, r3, #12
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	4313      	orrs	r3, r2
 800526e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800527a:	e157      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8005282:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	049b      	lsls	r3, r3, #18
 800528a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	4313      	orrs	r3, r2
 8005292:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	049b      	lsls	r3, r3, #18
 800529a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	049b      	lsls	r3, r3, #18
 80052aa:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	049b      	lsls	r3, r3, #18
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80052d8:	e128      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80052e0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	061b      	lsls	r3, r3, #24
 80052f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	061b      	lsls	r3, r3, #24
 8005308:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	4313      	orrs	r3, r2
 8005310:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	4313      	orrs	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005336:	e0f9      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f023 031f 	bic.w	r3, r3, #31
 800533e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4313      	orrs	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0318 	and.w	r3, r3, #24
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 030f 	bic.w	r3, r3, #15
 8005370:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005394:	e0ca      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 800539c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	019b      	lsls	r3, r3, #6
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	019b      	lsls	r3, r3, #6
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 80053d2:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80053f8:	e098      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8005400:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	031b      	lsls	r3, r3, #12
 8005408:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	031b      	lsls	r3, r3, #12
 8005418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4313      	orrs	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005438:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	031b      	lsls	r3, r3, #12
 8005440:	b29b      	uxth	r3, r3
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800545c:	e066      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005464:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	049b      	lsls	r3, r3, #18
 800546c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	049b      	lsls	r3, r3, #18
 800547c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	049b      	lsls	r3, r3, #18
 800548c:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4313      	orrs	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800549c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	049b      	lsls	r3, r3, #18
 80054a4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80054c2:	e033      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80054ca:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005502:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005528:	e000      	b.n	800552c <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 800552a:	bf00      	nop
  }
}
 800552c:	bf00      	nop
 800552e:	3724      	adds	r7, #36	@ 0x24
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b05      	cmp	r3, #5
 8005546:	d851      	bhi.n	80055ec <HRTIM_ForceRegistersUpdate+0xb4>
 8005548:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <HRTIM_ForceRegistersUpdate+0x18>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	0800557f 	.word	0x0800557f
 8005554:	08005595 	.word	0x08005595
 8005558:	080055ab 	.word	0x080055ab
 800555c:	080055c1 	.word	0x080055c1
 8005560:	080055d7 	.word	0x080055d7
 8005564:	08005569 	.word	0x08005569
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800557c:	e037      	b.n	80055ee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0202 	orr.w	r2, r2, #2
 800558e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005592:	e02c      	b.n	80055ee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0204 	orr.w	r2, r2, #4
 80055a4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055a8:	e021      	b.n	80055ee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0208 	orr.w	r2, r2, #8
 80055ba:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055be:	e016      	b.n	80055ee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0210 	orr.w	r2, r2, #16
 80055d0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055d4:	e00b      	b.n	80055ee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0220 	orr.w	r2, r2, #32
 80055e6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055ea:	e000      	b.n	80055ee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80055ec:	bf00      	nop
  }
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop

080055fc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e097      	b.n	800573e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7fc ff83 	bl	8002534 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d004      	beq.n	8005650 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800564e:	d103      	bne.n	8005658 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 031e 	bic.w	r3, r3, #30
 8005656:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4b38      	ldr	r3, [pc, #224]	@ (8005748 <HAL_LPTIM_Init+0x14c>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4b37      	ldr	r3, [pc, #220]	@ (800574c <HAL_LPTIM_Init+0x150>)
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800567c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005682:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005688:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800568e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80056a6:	4313      	orrs	r3, r2
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d004      	beq.n	80056c0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056be:	d107      	bne.n	80056d0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80056c8:	4313      	orrs	r3, r2
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00a      	beq.n	80056f2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80056e4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80056ea:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a14      	ldr	r2, [pc, #80]	@ (8005750 <HAL_LPTIM_Init+0x154>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_LPTIM_Init+0x112>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <HAL_LPTIM_Init+0x158>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24
 800571e:	e009      	b.n	8005734 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0c      	ldr	r2, [pc, #48]	@ (8005758 <HAL_LPTIM_Init+0x15c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d104      	bne.n	8005734 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005732:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	ffff1f3f 	.word	0xffff1f3f
 800574c:	ff19f1fe 	.word	0xff19f1fe
 8005750:	40002400 	.word	0x40002400
 8005754:	58002400 	.word	0x58002400
 8005758:	58002800 	.word	0x58002800

0800575c <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800577e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2210      	movs	r2, #16
 8005796:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80057a0:	2110      	movs	r1, #16
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f97e 	bl	8005aa4 <LPTIM_WaitForFlag>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d101      	bne.n	80057b2 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e01d      	b.n	80057ee <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2208      	movs	r2, #8
 80057b8:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80057c2:	2108      	movs	r1, #8
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f96d 	bl	8005aa4 <LPTIM_WaitForFlag>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d101      	bne.n	80057d4 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e00c      	b.n	80057ee <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0204 	orr.w	r2, r2, #4
 80057e2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d00c      	beq.n	800582a <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005818:	d107      	bne.n	800582a <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005828:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0201 	orr.w	r2, r2, #1
 8005838:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800584a:	2110      	movs	r1, #16
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f929 	bl	8005aa4 <LPTIM_WaitForFlag>
 8005852:	4603      	mov	r3, r0
 8005854:	2b03      	cmp	r3, #3
 8005856:	d101      	bne.n	800585c <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e02f      	b.n	80058bc <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f951 	bl	8005b04 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f90f 	bl	8005a86 <HAL_LPTIM_GetState>
 8005868:	4603      	mov	r3, r0
 800586a:	2b03      	cmp	r3, #3
 800586c:	d101      	bne.n	8005872 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e024      	b.n	80058bc <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0210 	orr.w	r2, r2, #16
 8005880:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0202 	orr.w	r2, r2, #2
 8005890:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0204 	orr.w	r2, r2, #4
 80058b0:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10d      	bne.n	80058f6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2201      	movs	r2, #1
 80058ee:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f882 	bl	80059fa <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d10d      	bne.n	8005920 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d106      	bne.n	8005920 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2202      	movs	r2, #2
 8005918:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f877 	bl	8005a0e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d10d      	bne.n	800594a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d106      	bne.n	800594a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2204      	movs	r2, #4
 8005942:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f86c 	bl	8005a22 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d10d      	bne.n	8005974 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b08      	cmp	r3, #8
 8005964:	d106      	bne.n	8005974 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2208      	movs	r2, #8
 800596c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f861 	bl	8005a36 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b10      	cmp	r3, #16
 8005980:	d10d      	bne.n	800599e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b10      	cmp	r3, #16
 800598e:	d106      	bne.n	800599e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2210      	movs	r2, #16
 8005996:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f856 	bl	8005a4a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d10d      	bne.n	80059c8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d106      	bne.n	80059c8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2220      	movs	r2, #32
 80059c0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f84b 	bl	8005a5e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d2:	2b40      	cmp	r3, #64	@ 0x40
 80059d4:	d10d      	bne.n	80059f2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	d106      	bne.n	80059f2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2240      	movs	r2, #64	@ 0x40
 80059ea:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f840 	bl	8005a72 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005a94:	b2db      	uxtb	r3, r3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005ab2:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <LPTIM_WaitForFlag+0x58>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a12      	ldr	r2, [pc, #72]	@ (8005b00 <LPTIM_WaitForFlag+0x5c>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	0b9b      	lsrs	r3, r3, #14
 8005abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d002      	beq.n	8005aee <LPTIM_WaitForFlag+0x4a>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ec      	bne.n	8005ac8 <LPTIM_WaitForFlag+0x24>

  return result;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	24000004 	.word	0x24000004
 8005b00:	d1b71759 	.word	0xd1b71759

08005b04 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	@ 0x30
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b10:	f3ef 8310 	mrs	r3, PRIMASK
 8005b14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b16:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f383 8810 	msr	PRIMASK, r3
}
 8005b24:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a81      	ldr	r2, [pc, #516]	@ (8005d30 <LPTIM_Disable+0x22c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d02d      	beq.n	8005b8c <LPTIM_Disable+0x88>
 8005b30:	4a7f      	ldr	r2, [pc, #508]	@ (8005d30 <LPTIM_Disable+0x22c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d830      	bhi.n	8005b98 <LPTIM_Disable+0x94>
 8005b36:	4a7f      	ldr	r2, [pc, #508]	@ (8005d34 <LPTIM_Disable+0x230>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d021      	beq.n	8005b80 <LPTIM_Disable+0x7c>
 8005b3c:	4a7d      	ldr	r2, [pc, #500]	@ (8005d34 <LPTIM_Disable+0x230>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d82a      	bhi.n	8005b98 <LPTIM_Disable+0x94>
 8005b42:	4a7d      	ldr	r2, [pc, #500]	@ (8005d38 <LPTIM_Disable+0x234>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d015      	beq.n	8005b74 <LPTIM_Disable+0x70>
 8005b48:	4a7b      	ldr	r2, [pc, #492]	@ (8005d38 <LPTIM_Disable+0x234>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d824      	bhi.n	8005b98 <LPTIM_Disable+0x94>
 8005b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8005d3c <LPTIM_Disable+0x238>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <LPTIM_Disable+0x58>
 8005b54:	4a7a      	ldr	r2, [pc, #488]	@ (8005d40 <LPTIM_Disable+0x23c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d006      	beq.n	8005b68 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005b5a:	e01d      	b.n	8005b98 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005b5c:	4b79      	ldr	r3, [pc, #484]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b60:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005b66:	e018      	b.n	8005b9a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005b68:	4b76      	ldr	r3, [pc, #472]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005b72:	e012      	b.n	8005b9a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005b74:	4b73      	ldr	r3, [pc, #460]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b78:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005b7e:	e00c      	b.n	8005b9a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8005b80:	4b70      	ldr	r3, [pc, #448]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005b8a:	e006      	b.n	8005b9a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8005b8c:	4b6d      	ldr	r3, [pc, #436]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005b96:	e000      	b.n	8005b9a <LPTIM_Disable+0x96>
      break;
 8005b98:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5a      	ldr	r2, [pc, #360]	@ (8005d30 <LPTIM_Disable+0x22c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d059      	beq.n	8005c80 <LPTIM_Disable+0x17c>
 8005bcc:	4a58      	ldr	r2, [pc, #352]	@ (8005d30 <LPTIM_Disable+0x22c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d867      	bhi.n	8005ca2 <LPTIM_Disable+0x19e>
 8005bd2:	4a58      	ldr	r2, [pc, #352]	@ (8005d34 <LPTIM_Disable+0x230>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d042      	beq.n	8005c5e <LPTIM_Disable+0x15a>
 8005bd8:	4a56      	ldr	r2, [pc, #344]	@ (8005d34 <LPTIM_Disable+0x230>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d861      	bhi.n	8005ca2 <LPTIM_Disable+0x19e>
 8005bde:	4a56      	ldr	r2, [pc, #344]	@ (8005d38 <LPTIM_Disable+0x234>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d02b      	beq.n	8005c3c <LPTIM_Disable+0x138>
 8005be4:	4a54      	ldr	r2, [pc, #336]	@ (8005d38 <LPTIM_Disable+0x234>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d85b      	bhi.n	8005ca2 <LPTIM_Disable+0x19e>
 8005bea:	4a54      	ldr	r2, [pc, #336]	@ (8005d3c <LPTIM_Disable+0x238>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <LPTIM_Disable+0xf4>
 8005bf0:	4a53      	ldr	r2, [pc, #332]	@ (8005d40 <LPTIM_Disable+0x23c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d011      	beq.n	8005c1a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005bf6:	e054      	b.n	8005ca2 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005bf8:	4b52      	ldr	r3, [pc, #328]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bfe:	4a51      	ldr	r2, [pc, #324]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005c08:	4b4e      	ldr	r3, [pc, #312]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8005c18:	e044      	b.n	8005ca4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c20:	4a48      	ldr	r2, [pc, #288]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c26:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005c2a:	4b46      	ldr	r3, [pc, #280]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c30:	4a44      	ldr	r2, [pc, #272]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c32:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005c3a:	e033      	b.n	8005ca4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8005c3c:	4b41      	ldr	r3, [pc, #260]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c42:	4a40      	ldr	r2, [pc, #256]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c52:	4a3c      	ldr	r2, [pc, #240]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c58:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005c5c:	e022      	b.n	8005ca4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8005c5e:	4b39      	ldr	r3, [pc, #228]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c64:	4a37      	ldr	r2, [pc, #220]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c6a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8005c6e:	4b35      	ldr	r3, [pc, #212]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c74:	4a33      	ldr	r2, [pc, #204]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c7a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005c7e:	e011      	b.n	8005ca4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8005c80:	4b30      	ldr	r3, [pc, #192]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c86:	4a2f      	ldr	r2, [pc, #188]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c8c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8005c90:	4b2c      	ldr	r3, [pc, #176]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c96:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005ca0:	e000      	b.n	8005ca4 <LPTIM_Disable+0x1a0>
      break;
 8005ca2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <LPTIM_Disable+0x1ae>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80d1 	beq.w	8005e54 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d30 <LPTIM_Disable+0x22c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d031      	beq.n	8005d20 <LPTIM_Disable+0x21c>
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d30 <LPTIM_Disable+0x22c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d842      	bhi.n	8005d48 <LPTIM_Disable+0x244>
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d34 <LPTIM_Disable+0x230>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d024      	beq.n	8005d12 <LPTIM_Disable+0x20e>
 8005cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d34 <LPTIM_Disable+0x230>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d83c      	bhi.n	8005d48 <LPTIM_Disable+0x244>
 8005cce:	4a1a      	ldr	r2, [pc, #104]	@ (8005d38 <LPTIM_Disable+0x234>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d017      	beq.n	8005d04 <LPTIM_Disable+0x200>
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <LPTIM_Disable+0x234>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d836      	bhi.n	8005d48 <LPTIM_Disable+0x244>
 8005cda:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <LPTIM_Disable+0x238>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <LPTIM_Disable+0x1e4>
 8005ce0:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <LPTIM_Disable+0x23c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005ce6:	e02f      	b.n	8005d48 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005ce8:	4b16      	ldr	r3, [pc, #88]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cec:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005cee:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005cf2:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005cf4:	e029      	b.n	8005d4a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005cf6:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	4a12      	ldr	r2, [pc, #72]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005cfc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005d00:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d02:	e022      	b.n	8005d4a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005d04:	4b0f      	ldr	r3, [pc, #60]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d08:	4a0e      	ldr	r2, [pc, #56]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005d0a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d0e:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d10:	e01b      	b.n	8005d4a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005d12:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d16:	4a0b      	ldr	r2, [pc, #44]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005d18:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d1c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d1e:	e014      	b.n	8005d4a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005d20:	4b08      	ldr	r3, [pc, #32]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d24:	4a07      	ldr	r2, [pc, #28]	@ (8005d44 <LPTIM_Disable+0x240>)
 8005d26:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d2a:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d2c:	e00d      	b.n	8005d4a <LPTIM_Disable+0x246>
 8005d2e:	bf00      	nop
 8005d30:	58003000 	.word	0x58003000
 8005d34:	58002c00 	.word	0x58002c00
 8005d38:	58002800 	.word	0x58002800
 8005d3c:	40002400 	.word	0x40002400
 8005d40:	58002400 	.word	0x58002400
 8005d44:	58024400 	.word	0x58024400
        break;
 8005d48:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005d68:	2108      	movs	r1, #8
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fe9a 	bl	8005aa4 <LPTIM_WaitForFlag>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d103      	bne.n	8005d7e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2208      	movs	r2, #8
 8005d84:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01a      	beq.n	8005dc2 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005da4:	2110      	movs	r1, #16
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fe7c 	bl	8005aa4 <LPTIM_WaitForFlag>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d103      	bne.n	8005dba <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2203      	movs	r2, #3
 8005db6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2210      	movs	r2, #16
 8005dc0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a32      	ldr	r2, [pc, #200]	@ (8005e90 <LPTIM_Disable+0x38c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d039      	beq.n	8005e40 <LPTIM_Disable+0x33c>
 8005dcc:	4a30      	ldr	r2, [pc, #192]	@ (8005e90 <LPTIM_Disable+0x38c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d83f      	bhi.n	8005e52 <LPTIM_Disable+0x34e>
 8005dd2:	4a30      	ldr	r2, [pc, #192]	@ (8005e94 <LPTIM_Disable+0x390>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d02a      	beq.n	8005e2e <LPTIM_Disable+0x32a>
 8005dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e94 <LPTIM_Disable+0x390>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d839      	bhi.n	8005e52 <LPTIM_Disable+0x34e>
 8005dde:	4a2e      	ldr	r2, [pc, #184]	@ (8005e98 <LPTIM_Disable+0x394>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01b      	beq.n	8005e1c <LPTIM_Disable+0x318>
 8005de4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e98 <LPTIM_Disable+0x394>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d833      	bhi.n	8005e52 <LPTIM_Disable+0x34e>
 8005dea:	4a2c      	ldr	r2, [pc, #176]	@ (8005e9c <LPTIM_Disable+0x398>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <LPTIM_Disable+0x2f4>
 8005df0:	4a2b      	ldr	r2, [pc, #172]	@ (8005ea0 <LPTIM_Disable+0x39c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005df6:	e02c      	b.n	8005e52 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005df8:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfc:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005e00:	4928      	ldr	r1, [pc, #160]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e04:	4313      	orrs	r3, r2
 8005e06:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8005e08:	e024      	b.n	8005e54 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005e0a:	4b26      	ldr	r3, [pc, #152]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e12:	4924      	ldr	r1, [pc, #144]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e16:	4313      	orrs	r3, r2
 8005e18:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e1a:	e01b      	b.n	8005e54 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005e1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e24:	491f      	ldr	r1, [pc, #124]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e2c:	e012      	b.n	8005e54 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e36:	491b      	ldr	r1, [pc, #108]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e3e:	e009      	b.n	8005e54 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8005e40:	4b18      	ldr	r3, [pc, #96]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e48:	4916      	ldr	r1, [pc, #88]	@ (8005ea4 <LPTIM_Disable+0x3a0>)
 8005e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e50:	e000      	b.n	8005e54 <LPTIM_Disable+0x350>
        break;
 8005e52:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f383 8810 	msr	PRIMASK, r3
}
 8005e86:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005e88:	bf00      	nop
 8005e8a:	3730      	adds	r7, #48	@ 0x30
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	58003000 	.word	0x58003000
 8005e94:	58002c00 	.word	0x58002c00
 8005e98:	58002800 	.word	0x58002800
 8005e9c:	40002400 	.word	0x40002400
 8005ea0:	58002400 	.word	0x58002400
 8005ea4:	58024400 	.word	0x58024400

08005ea8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005eb0:	4b19      	ldr	r3, [pc, #100]	@ (8005f18 <HAL_PWREx_ConfigSupply+0x70>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d00a      	beq.n	8005ed2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ebc:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <HAL_PWREx_ConfigSupply+0x70>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d001      	beq.n	8005ece <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e01f      	b.n	8005f0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e01d      	b.n	8005f0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ed2:	4b11      	ldr	r3, [pc, #68]	@ (8005f18 <HAL_PWREx_ConfigSupply+0x70>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f023 0207 	bic.w	r2, r3, #7
 8005eda:	490f      	ldr	r1, [pc, #60]	@ (8005f18 <HAL_PWREx_ConfigSupply+0x70>)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ee2:	f7fd f9d5 	bl	8003290 <HAL_GetTick>
 8005ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee8:	e009      	b.n	8005efe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005eea:	f7fd f9d1 	bl	8003290 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef8:	d901      	bls.n	8005efe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e007      	b.n	8005f0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <HAL_PWREx_ConfigSupply+0x70>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0a:	d1ee      	bne.n	8005eea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	58024800 	.word	0x58024800

08005f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08c      	sub	sp, #48	@ 0x30
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f000 bc48 	b.w	80067c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8088 	beq.w	800604e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3e:	4b99      	ldr	r3, [pc, #612]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f48:	4b96      	ldr	r3, [pc, #600]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d007      	beq.n	8005f64 <HAL_RCC_OscConfig+0x48>
 8005f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f56:	2b18      	cmp	r3, #24
 8005f58:	d111      	bne.n	8005f7e <HAL_RCC_OscConfig+0x62>
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	4b8f      	ldr	r3, [pc, #572]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d06d      	beq.n	800604c <HAL_RCC_OscConfig+0x130>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d169      	bne.n	800604c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f000 bc21 	b.w	80067c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f86:	d106      	bne.n	8005f96 <HAL_RCC_OscConfig+0x7a>
 8005f88:	4b86      	ldr	r3, [pc, #536]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a85      	ldr	r2, [pc, #532]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e02e      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x9c>
 8005f9e:	4b81      	ldr	r3, [pc, #516]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a80      	ldr	r2, [pc, #512]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b7e      	ldr	r3, [pc, #504]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a7d      	ldr	r2, [pc, #500]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e01d      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0xc0>
 8005fc2:	4b78      	ldr	r3, [pc, #480]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a77      	ldr	r2, [pc, #476]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b75      	ldr	r3, [pc, #468]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a74      	ldr	r2, [pc, #464]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd8>
 8005fdc:	4b71      	ldr	r3, [pc, #452]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a70      	ldr	r2, [pc, #448]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a6d      	ldr	r2, [pc, #436]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8005fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fd f948 	bl	8003290 <HAL_GetTick>
 8006000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7fd f944 	bl	8003290 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	@ 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e3d4      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006016:	4b63      	ldr	r3, [pc, #396]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0xe8>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fd f934 	bl	8003290 <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800602c:	f7fd f930 	bl	8003290 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	@ 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e3c0      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800603e:	4b59      	ldr	r3, [pc, #356]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x110>
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80ca 	beq.w	80061f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605c:	4b51      	ldr	r3, [pc, #324]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006064:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006066:	4b4f      	ldr	r3, [pc, #316]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_RCC_OscConfig+0x166>
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2b18      	cmp	r3, #24
 8006076:	d156      	bne.n	8006126 <HAL_RCC_OscConfig+0x20a>
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d151      	bne.n	8006126 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006082:	4b48      	ldr	r3, [pc, #288]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_RCC_OscConfig+0x17e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e392      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800609a:	4b42      	ldr	r3, [pc, #264]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 0219 	bic.w	r2, r3, #25
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	493f      	ldr	r1, [pc, #252]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fd f8f0 	bl	8003290 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b4:	f7fd f8ec 	bl	8003290 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e37c      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060c6:	4b37      	ldr	r3, [pc, #220]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d2:	f7fd f8e9 	bl	80032a8 <HAL_GetREVID>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060dc:	4293      	cmp	r3, r2
 80060de:	d817      	bhi.n	8006110 <HAL_RCC_OscConfig+0x1f4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d108      	bne.n	80060fa <HAL_RCC_OscConfig+0x1de>
 80060e8:	4b2e      	ldr	r3, [pc, #184]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80060f0:	4a2c      	ldr	r2, [pc, #176]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 80060f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060f8:	e07a      	b.n	80061f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fa:	4b2a      	ldr	r3, [pc, #168]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	031b      	lsls	r3, r3, #12
 8006108:	4926      	ldr	r1, [pc, #152]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800610a:	4313      	orrs	r3, r2
 800610c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610e:	e06f      	b.n	80061f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006110:	4b24      	ldr	r3, [pc, #144]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	061b      	lsls	r3, r3, #24
 800611e:	4921      	ldr	r1, [pc, #132]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006120:	4313      	orrs	r3, r2
 8006122:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006124:	e064      	b.n	80061f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d047      	beq.n	80061be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800612e:	4b1d      	ldr	r3, [pc, #116]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 0219 	bic.w	r2, r3, #25
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	491a      	ldr	r1, [pc, #104]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fd f8a6 	bl	8003290 <HAL_GetTick>
 8006144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006148:	f7fd f8a2 	bl	8003290 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e332      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800615a:	4b12      	ldr	r3, [pc, #72]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006166:	f7fd f89f 	bl	80032a8 <HAL_GetREVID>
 800616a:	4603      	mov	r3, r0
 800616c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006170:	4293      	cmp	r3, r2
 8006172:	d819      	bhi.n	80061a8 <HAL_RCC_OscConfig+0x28c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d108      	bne.n	800618e <HAL_RCC_OscConfig+0x272>
 800617c:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006184:	4a07      	ldr	r2, [pc, #28]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618a:	6053      	str	r3, [r2, #4]
 800618c:	e030      	b.n	80061f0 <HAL_RCC_OscConfig+0x2d4>
 800618e:	4b05      	ldr	r3, [pc, #20]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	031b      	lsls	r3, r3, #12
 800619c:	4901      	ldr	r1, [pc, #4]	@ (80061a4 <HAL_RCC_OscConfig+0x288>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	604b      	str	r3, [r1, #4]
 80061a2:	e025      	b.n	80061f0 <HAL_RCC_OscConfig+0x2d4>
 80061a4:	58024400 	.word	0x58024400
 80061a8:	4b9a      	ldr	r3, [pc, #616]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	4997      	ldr	r1, [pc, #604]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	604b      	str	r3, [r1, #4]
 80061bc:	e018      	b.n	80061f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061be:	4b95      	ldr	r3, [pc, #596]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a94      	ldr	r2, [pc, #592]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fd f861 	bl	8003290 <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d2:	f7fd f85d 	bl	8003290 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e2ed      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e4:	4b8b      	ldr	r3, [pc, #556]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80a9 	beq.w	8006350 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061fe:	4b85      	ldr	r3, [pc, #532]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006206:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006208:	4b82      	ldr	r3, [pc, #520]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d007      	beq.n	8006224 <HAL_RCC_OscConfig+0x308>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b18      	cmp	r3, #24
 8006218:	d13a      	bne.n	8006290 <HAL_RCC_OscConfig+0x374>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d135      	bne.n	8006290 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006224:	4b7b      	ldr	r3, [pc, #492]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_RCC_OscConfig+0x320>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	2b80      	cmp	r3, #128	@ 0x80
 8006236:	d001      	beq.n	800623c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e2c1      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800623c:	f7fd f834 	bl	80032a8 <HAL_GetREVID>
 8006240:	4603      	mov	r3, r0
 8006242:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006246:	4293      	cmp	r3, r2
 8006248:	d817      	bhi.n	800627a <HAL_RCC_OscConfig+0x35e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	2b20      	cmp	r3, #32
 8006250:	d108      	bne.n	8006264 <HAL_RCC_OscConfig+0x348>
 8006252:	4b70      	ldr	r3, [pc, #448]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800625a:	4a6e      	ldr	r2, [pc, #440]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800625c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006260:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006262:	e075      	b.n	8006350 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006264:	4b6b      	ldr	r3, [pc, #428]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	069b      	lsls	r3, r3, #26
 8006272:	4968      	ldr	r1, [pc, #416]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006274:	4313      	orrs	r3, r2
 8006276:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006278:	e06a      	b.n	8006350 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800627a:	4b66      	ldr	r3, [pc, #408]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	061b      	lsls	r3, r3, #24
 8006288:	4962      	ldr	r1, [pc, #392]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800628a:	4313      	orrs	r3, r2
 800628c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800628e:	e05f      	b.n	8006350 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d042      	beq.n	800631e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006298:	4b5e      	ldr	r3, [pc, #376]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a5d      	ldr	r2, [pc, #372]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800629e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fc fff4 	bl	8003290 <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062ac:	f7fc fff0 	bl	8003290 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e280      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062be:	4b55      	ldr	r3, [pc, #340]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ca:	f7fc ffed 	bl	80032a8 <HAL_GetREVID>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d817      	bhi.n	8006308 <HAL_RCC_OscConfig+0x3ec>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d108      	bne.n	80062f2 <HAL_RCC_OscConfig+0x3d6>
 80062e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80062e8:	4a4a      	ldr	r2, [pc, #296]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80062ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e02e      	b.n	8006350 <HAL_RCC_OscConfig+0x434>
 80062f2:	4b48      	ldr	r3, [pc, #288]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	069b      	lsls	r3, r3, #26
 8006300:	4944      	ldr	r1, [pc, #272]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006302:	4313      	orrs	r3, r2
 8006304:	604b      	str	r3, [r1, #4]
 8006306:	e023      	b.n	8006350 <HAL_RCC_OscConfig+0x434>
 8006308:	4b42      	ldr	r3, [pc, #264]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	061b      	lsls	r3, r3, #24
 8006316:	493f      	ldr	r1, [pc, #252]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006318:	4313      	orrs	r3, r2
 800631a:	60cb      	str	r3, [r1, #12]
 800631c:	e018      	b.n	8006350 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800631e:	4b3d      	ldr	r3, [pc, #244]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3c      	ldr	r2, [pc, #240]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006324:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fc ffb1 	bl	8003290 <HAL_GetTick>
 800632e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006332:	f7fc ffad 	bl	8003290 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e23d      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006344:	4b33      	ldr	r3, [pc, #204]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d036      	beq.n	80063ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d019      	beq.n	8006398 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006364:	4b2b      	ldr	r3, [pc, #172]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006368:	4a2a      	ldr	r2, [pc, #168]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006370:	f7fc ff8e 	bl	8003290 <HAL_GetTick>
 8006374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006378:	f7fc ff8a 	bl	8003290 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e21a      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800638a:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800638c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x45c>
 8006396:	e018      	b.n	80063ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006398:	4b1e      	ldr	r3, [pc, #120]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639c:	4a1d      	ldr	r2, [pc, #116]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fc ff74 	bl	8003290 <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fc ff70 	bl	8003290 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e200      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d039      	beq.n	800644a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01c      	beq.n	8006418 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063de:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 80063e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063ea:	f7fc ff51 	bl	8003290 <HAL_GetTick>
 80063ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063f2:	f7fc ff4d 	bl	8003290 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e1dd      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006404:	4b03      	ldr	r3, [pc, #12]	@ (8006414 <HAL_RCC_OscConfig+0x4f8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x4d6>
 8006410:	e01b      	b.n	800644a <HAL_RCC_OscConfig+0x52e>
 8006412:	bf00      	nop
 8006414:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006418:	4b9b      	ldr	r3, [pc, #620]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a9a      	ldr	r2, [pc, #616]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800641e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006422:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006424:	f7fc ff34 	bl	8003290 <HAL_GetTick>
 8006428:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800642c:	f7fc ff30 	bl	8003290 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1c0      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800643e:	4b92      	ldr	r3, [pc, #584]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8081 	beq.w	800655a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006458:	4b8c      	ldr	r3, [pc, #560]	@ (800668c <HAL_RCC_OscConfig+0x770>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a8b      	ldr	r2, [pc, #556]	@ (800668c <HAL_RCC_OscConfig+0x770>)
 800645e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006464:	f7fc ff14 	bl	8003290 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800646c:	f7fc ff10 	bl	8003290 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b64      	cmp	r3, #100	@ 0x64
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e1a0      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800647e:	4b83      	ldr	r3, [pc, #524]	@ (800668c <HAL_RCC_OscConfig+0x770>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d106      	bne.n	80064a0 <HAL_RCC_OscConfig+0x584>
 8006492:	4b7d      	ldr	r3, [pc, #500]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006496:	4a7c      	ldr	r2, [pc, #496]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6713      	str	r3, [r2, #112]	@ 0x70
 800649e:	e02d      	b.n	80064fc <HAL_RCC_OscConfig+0x5e0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCC_OscConfig+0x5a6>
 80064a8:	4b77      	ldr	r3, [pc, #476]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ac:	4a76      	ldr	r2, [pc, #472]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b4:	4b74      	ldr	r3, [pc, #464]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b8:	4a73      	ldr	r2, [pc, #460]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064ba:	f023 0304 	bic.w	r3, r3, #4
 80064be:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c0:	e01c      	b.n	80064fc <HAL_RCC_OscConfig+0x5e0>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCC_OscConfig+0x5c8>
 80064ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064d0:	f043 0304 	orr.w	r3, r3, #4
 80064d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064da:	4a6b      	ldr	r2, [pc, #428]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e2:	e00b      	b.n	80064fc <HAL_RCC_OscConfig+0x5e0>
 80064e4:	4b68      	ldr	r3, [pc, #416]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e8:	4a67      	ldr	r2, [pc, #412]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f0:	4b65      	ldr	r3, [pc, #404]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f4:	4a64      	ldr	r2, [pc, #400]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80064f6:	f023 0304 	bic.w	r3, r3, #4
 80064fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fc fec4 	bl	8003290 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800650a:	e00a      	b.n	8006522 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fc fec0 	bl	8003290 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e14e      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006522:	4b59      	ldr	r3, [pc, #356]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0ee      	beq.n	800650c <HAL_RCC_OscConfig+0x5f0>
 800652e:	e014      	b.n	800655a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fc feae 	bl	8003290 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006536:	e00a      	b.n	800654e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fc feaa 	bl	8003290 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e138      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800654e:	4b4e      	ldr	r3, [pc, #312]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1ee      	bne.n	8006538 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 812d 	beq.w	80067be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006564:	4b48      	ldr	r3, [pc, #288]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800656c:	2b18      	cmp	r3, #24
 800656e:	f000 80bd 	beq.w	80066ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006576:	2b02      	cmp	r3, #2
 8006578:	f040 809e 	bne.w	80066b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657c:	4b42      	ldr	r3, [pc, #264]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a41      	ldr	r2, [pc, #260]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fc fe82 	bl	8003290 <HAL_GetTick>
 800658c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006590:	f7fc fe7e 	bl	8003290 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e10e      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065a2:	4b39      	ldr	r3, [pc, #228]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ae:	4b36      	ldr	r3, [pc, #216]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80065b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065b2:	4b37      	ldr	r3, [pc, #220]	@ (8006690 <HAL_RCC_OscConfig+0x774>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065be:	0112      	lsls	r2, r2, #4
 80065c0:	430a      	orrs	r2, r1
 80065c2:	4931      	ldr	r1, [pc, #196]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d6:	3b01      	subs	r3, #1
 80065d8:	025b      	lsls	r3, r3, #9
 80065da:	b29b      	uxth	r3, r3
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e2:	3b01      	subs	r3, #1
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f0:	3b01      	subs	r3, #1
 80065f2:	061b      	lsls	r3, r3, #24
 80065f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065f8:	4923      	ldr	r1, [pc, #140]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80065fe:	4b22      	ldr	r3, [pc, #136]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	4a21      	ldr	r2, [pc, #132]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800660a:	4b1f      	ldr	r3, [pc, #124]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800660c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800660e:	4b21      	ldr	r3, [pc, #132]	@ (8006694 <HAL_RCC_OscConfig+0x778>)
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006616:	00d2      	lsls	r2, r2, #3
 8006618:	491b      	ldr	r1, [pc, #108]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800661a:	4313      	orrs	r3, r2
 800661c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800661e:	4b1a      	ldr	r3, [pc, #104]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006622:	f023 020c 	bic.w	r2, r3, #12
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	4917      	ldr	r1, [pc, #92]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006630:	4b15      	ldr	r3, [pc, #84]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	f023 0202 	bic.w	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663c:	4912      	ldr	r1, [pc, #72]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800663e:	4313      	orrs	r3, r2
 8006640:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006642:	4b11      	ldr	r3, [pc, #68]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	4a10      	ldr	r2, [pc, #64]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800664e:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	4a0d      	ldr	r2, [pc, #52]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006658:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800665a:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	4a0a      	ldr	r2, [pc, #40]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006664:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006666:	4b08      	ldr	r3, [pc, #32]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666a:	4a07      	ldr	r2, [pc, #28]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a04      	ldr	r2, [pc, #16]	@ (8006688 <HAL_RCC_OscConfig+0x76c>)
 8006678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800667c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7fc fe07 	bl	8003290 <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006684:	e011      	b.n	80066aa <HAL_RCC_OscConfig+0x78e>
 8006686:	bf00      	nop
 8006688:	58024400 	.word	0x58024400
 800668c:	58024800 	.word	0x58024800
 8006690:	fffffc0c 	.word	0xfffffc0c
 8006694:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fc fdfa 	bl	8003290 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e08a      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066aa:	4b47      	ldr	r3, [pc, #284]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x77c>
 80066b6:	e082      	b.n	80067be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b8:	4b43      	ldr	r3, [pc, #268]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a42      	ldr	r2, [pc, #264]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80066be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fc fde4 	bl	8003290 <HAL_GetTick>
 80066c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fc fde0 	bl	8003290 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e070      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066de:	4b3a      	ldr	r3, [pc, #232]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x7b0>
 80066ea:	e068      	b.n	80067be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066ec:	4b36      	ldr	r3, [pc, #216]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066f2:	4b35      	ldr	r3, [pc, #212]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d031      	beq.n	8006764 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f003 0203 	and.w	r2, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670a:	429a      	cmp	r2, r3
 800670c:	d12a      	bne.n	8006764 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d122      	bne.n	8006764 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006728:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d11a      	bne.n	8006764 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	0a5b      	lsrs	r3, r3, #9
 8006732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800673c:	429a      	cmp	r2, r3
 800673e:	d111      	bne.n	8006764 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d108      	bne.n	8006764 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	0e1b      	lsrs	r3, r3, #24
 8006756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d001      	beq.n	8006768 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e02b      	b.n	80067c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006768:	4b17      	ldr	r3, [pc, #92]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 800676a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006772:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d01f      	beq.n	80067be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800677e:	4b12      	ldr	r3, [pc, #72]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	4a11      	ldr	r2, [pc, #68]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800678a:	f7fc fd81 	bl	8003290 <HAL_GetTick>
 800678e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006790:	bf00      	nop
 8006792:	f7fc fd7d 	bl	8003290 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	4293      	cmp	r3, r2
 800679c:	d0f9      	beq.n	8006792 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800679e:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80067a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a2:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <HAL_RCC_OscConfig+0x8b0>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067aa:	00d2      	lsls	r2, r2, #3
 80067ac:	4906      	ldr	r1, [pc, #24]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80067b2:	4b05      	ldr	r3, [pc, #20]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	4a04      	ldr	r2, [pc, #16]	@ (80067c8 <HAL_RCC_OscConfig+0x8ac>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3730      	adds	r7, #48	@ 0x30
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	58024400 	.word	0x58024400
 80067cc:	ffff0007 	.word	0xffff0007

080067d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e19c      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d910      	bls.n	8006814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b87      	ldr	r3, [pc, #540]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 020f 	bic.w	r2, r3, #15
 80067fa:	4985      	ldr	r1, [pc, #532]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	4313      	orrs	r3, r2
 8006800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b83      	ldr	r3, [pc, #524]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e184      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	4b7b      	ldr	r3, [pc, #492]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800682c:	429a      	cmp	r2, r3
 800682e:	d908      	bls.n	8006842 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006830:	4b78      	ldr	r3, [pc, #480]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	4975      	ldr	r1, [pc, #468]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800683e:	4313      	orrs	r3, r2
 8006840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d010      	beq.n	8006870 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	4b70      	ldr	r3, [pc, #448]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800685a:	429a      	cmp	r2, r3
 800685c:	d908      	bls.n	8006870 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800685e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	496a      	ldr	r1, [pc, #424]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800686c:	4313      	orrs	r3, r2
 800686e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d010      	beq.n	800689e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b64      	ldr	r3, [pc, #400]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006888:	429a      	cmp	r2, r3
 800688a:	d908      	bls.n	800689e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800688c:	4b61      	ldr	r3, [pc, #388]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	495e      	ldr	r1, [pc, #376]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800689a:	4313      	orrs	r3, r2
 800689c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	4b59      	ldr	r3, [pc, #356]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d908      	bls.n	80068cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068ba:	4b56      	ldr	r3, [pc, #344]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4953      	ldr	r1, [pc, #332]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d010      	beq.n	80068fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d908      	bls.n	80068fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f023 020f 	bic.w	r2, r3, #15
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4947      	ldr	r1, [pc, #284]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d055      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006906:	4b43      	ldr	r3, [pc, #268]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	4940      	ldr	r1, [pc, #256]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006914:	4313      	orrs	r3, r2
 8006916:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d107      	bne.n	8006930 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006920:	4b3c      	ldr	r3, [pc, #240]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d121      	bne.n	8006970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0f6      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d107      	bne.n	8006948 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006938:	4b36      	ldr	r3, [pc, #216]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d115      	bne.n	8006970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0ea      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d107      	bne.n	8006960 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006950:	4b30      	ldr	r3, [pc, #192]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0de      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006960:	4b2c      	ldr	r3, [pc, #176]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0d6      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006970:	4b28      	ldr	r3, [pc, #160]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f023 0207 	bic.w	r2, r3, #7
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4925      	ldr	r1, [pc, #148]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800697e:	4313      	orrs	r3, r2
 8006980:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006982:	f7fc fc85 	bl	8003290 <HAL_GetTick>
 8006986:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006988:	e00a      	b.n	80069a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698a:	f7fc fc81 	bl	8003290 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006998:	4293      	cmp	r3, r2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e0be      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d1eb      	bne.n	800698a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d208      	bcs.n	80069e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ce:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f023 020f 	bic.w	r2, r3, #15
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	490e      	ldr	r1, [pc, #56]	@ (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d214      	bcs.n	8006a18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ee:	4b08      	ldr	r3, [pc, #32]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 020f 	bic.w	r2, r3, #15
 80069f6:	4906      	ldr	r1, [pc, #24]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b04      	ldr	r3, [pc, #16]	@ (8006a10 <HAL_RCC_ClockConfig+0x240>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e086      	b.n	8006b1e <HAL_RCC_ClockConfig+0x34e>
 8006a10:	52002000 	.word	0x52002000
 8006a14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d010      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	4b3f      	ldr	r3, [pc, #252]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d208      	bcs.n	8006a46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a34:	4b3c      	ldr	r3, [pc, #240]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	4939      	ldr	r1, [pc, #228]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	4b34      	ldr	r3, [pc, #208]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d208      	bcs.n	8006a74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a62:	4b31      	ldr	r3, [pc, #196]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	492e      	ldr	r1, [pc, #184]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	4b28      	ldr	r3, [pc, #160]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d208      	bcs.n	8006aa2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a90:	4b25      	ldr	r3, [pc, #148]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	4922      	ldr	r1, [pc, #136]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d010      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69da      	ldr	r2, [r3, #28]
 8006ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d208      	bcs.n	8006ad0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006abe:	4b1a      	ldr	r3, [pc, #104]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	4917      	ldr	r1, [pc, #92]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ad0:	f000 f834 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b14      	ldr	r3, [pc, #80]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	4912      	ldr	r1, [pc, #72]	@ (8006b2c <HAL_RCC_ClockConfig+0x35c>)
 8006ae2:	5ccb      	ldrb	r3, [r1, r3]
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aee:	4b0e      	ldr	r3, [pc, #56]	@ (8006b28 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	4a0d      	ldr	r2, [pc, #52]	@ (8006b2c <HAL_RCC_ClockConfig+0x35c>)
 8006af8:	5cd3      	ldrb	r3, [r2, r3]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
 8006b04:	4a0a      	ldr	r2, [pc, #40]	@ (8006b30 <HAL_RCC_ClockConfig+0x360>)
 8006b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b08:	4a0a      	ldr	r2, [pc, #40]	@ (8006b34 <HAL_RCC_ClockConfig+0x364>)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <HAL_RCC_ClockConfig+0x368>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fc fb72 	bl	80031fc <HAL_InitTick>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	0800f590 	.word	0x0800f590
 8006b30:	24000008 	.word	0x24000008
 8006b34:	24000004 	.word	0x24000004
 8006b38:	2400000c 	.word	0x2400000c

08006b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b089      	sub	sp, #36	@ 0x24
 8006b40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b42:	4bb3      	ldr	r3, [pc, #716]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b4a:	2b18      	cmp	r3, #24
 8006b4c:	f200 8155 	bhi.w	8006dfa <HAL_RCC_GetSysClockFreq+0x2be>
 8006b50:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006bbd 	.word	0x08006bbd
 8006b5c:	08006dfb 	.word	0x08006dfb
 8006b60:	08006dfb 	.word	0x08006dfb
 8006b64:	08006dfb 	.word	0x08006dfb
 8006b68:	08006dfb 	.word	0x08006dfb
 8006b6c:	08006dfb 	.word	0x08006dfb
 8006b70:	08006dfb 	.word	0x08006dfb
 8006b74:	08006dfb 	.word	0x08006dfb
 8006b78:	08006be3 	.word	0x08006be3
 8006b7c:	08006dfb 	.word	0x08006dfb
 8006b80:	08006dfb 	.word	0x08006dfb
 8006b84:	08006dfb 	.word	0x08006dfb
 8006b88:	08006dfb 	.word	0x08006dfb
 8006b8c:	08006dfb 	.word	0x08006dfb
 8006b90:	08006dfb 	.word	0x08006dfb
 8006b94:	08006dfb 	.word	0x08006dfb
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006dfb 	.word	0x08006dfb
 8006ba0:	08006dfb 	.word	0x08006dfb
 8006ba4:	08006dfb 	.word	0x08006dfb
 8006ba8:	08006dfb 	.word	0x08006dfb
 8006bac:	08006dfb 	.word	0x08006dfb
 8006bb0:	08006dfb 	.word	0x08006dfb
 8006bb4:	08006dfb 	.word	0x08006dfb
 8006bb8:	08006bef 	.word	0x08006bef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bbc:	4b94      	ldr	r3, [pc, #592]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bc8:	4b91      	ldr	r3, [pc, #580]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	4a90      	ldr	r2, [pc, #576]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006bda:	e111      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bdc:	4b8d      	ldr	r3, [pc, #564]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bde:	61bb      	str	r3, [r7, #24]
      break;
 8006be0:	e10e      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006be2:	4b8d      	ldr	r3, [pc, #564]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006be4:	61bb      	str	r3, [r7, #24]
      break;
 8006be6:	e10b      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006be8:	4b8c      	ldr	r3, [pc, #560]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bea:	61bb      	str	r3, [r7, #24]
      break;
 8006bec:	e108      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bee:	4b88      	ldr	r3, [pc, #544]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006bf8:	4b85      	ldr	r3, [pc, #532]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c04:	4b82      	ldr	r3, [pc, #520]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c0e:	4b80      	ldr	r3, [pc, #512]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80e1 	beq.w	8006df4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCC_GetSysClockFreq+0x204>
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f200 80a1 	bhi.w	8006d84 <HAL_RCC_GetSysClockFreq+0x248>
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCC_GetSysClockFreq+0x114>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c4e:	e099      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	4b6f      	ldr	r3, [pc, #444]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d02d      	beq.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a6b      	ldr	r2, [pc, #428]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b62      	ldr	r3, [pc, #392]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006cb6:	e087      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b51      	ldr	r3, [pc, #324]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cfa:	e065      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b40      	ldr	r3, [pc, #256]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d3e:	e043      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b2f      	ldr	r3, [pc, #188]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d82:	e021      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b1e      	ldr	r3, [pc, #120]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006daa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006dc8:	4b11      	ldr	r3, [pc, #68]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dec:	ee17 3a90 	vmov	r3, s15
 8006df0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006df2:	e005      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61bb      	str	r3, [r7, #24]
      break;
 8006df8:	e002      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006dfa:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dfc:	61bb      	str	r3, [r7, #24]
      break;
 8006dfe:	bf00      	nop
  }

  return sysclockfreq;
 8006e00:	69bb      	ldr	r3, [r7, #24]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3724      	adds	r7, #36	@ 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
 8006e14:	03d09000 	.word	0x03d09000
 8006e18:	003d0900 	.word	0x003d0900
 8006e1c:	016e3600 	.word	0x016e3600
 8006e20:	46000000 	.word	0x46000000
 8006e24:	4c742400 	.word	0x4c742400
 8006e28:	4a742400 	.word	0x4a742400
 8006e2c:	4bb71b00 	.word	0x4bb71b00

08006e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e36:	f7ff fe81 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b10      	ldr	r3, [pc, #64]	@ (8006e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	490f      	ldr	r1, [pc, #60]	@ (8006e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e48:	5ccb      	ldrb	r3, [r1, r3]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e54:	4b0a      	ldr	r3, [pc, #40]	@ (8006e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	4a09      	ldr	r2, [pc, #36]	@ (8006e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e5e:	5cd3      	ldrb	r3, [r2, r3]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	4a07      	ldr	r2, [pc, #28]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e6e:	4a07      	ldr	r2, [pc, #28]	@ (8006e8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e74:	4b04      	ldr	r3, [pc, #16]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e76:	681b      	ldr	r3, [r3, #0]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	58024400 	.word	0x58024400
 8006e84:	0800f590 	.word	0x0800f590
 8006e88:	24000008 	.word	0x24000008
 8006e8c:	24000004 	.word	0x24000004

08006e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e94:	f7ff ffcc 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	4904      	ldr	r1, [pc, #16]	@ (8006eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ea6:	5ccb      	ldrb	r3, [r1, r3]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	0800f590 	.word	0x0800f590

08006ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ec0:	f7ff ffb6 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	4904      	ldr	r1, [pc, #16]	@ (8006ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ed2:	5ccb      	ldrb	r3, [r1, r3]
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	0800f590 	.word	0x0800f590

08006ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eec:	b0ca      	sub	sp, #296	@ 0x128
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006efa:	2300      	movs	r3, #0
 8006efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f0c:	2500      	movs	r5, #0
 8006f0e:	ea54 0305 	orrs.w	r3, r4, r5
 8006f12:	d049      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f1e:	d02f      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006f20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f24:	d828      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f2a:	d01a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f30:	d822      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3a:	d007      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f3c:	e01c      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3e:	4bb8      	ldr	r3, [pc, #736]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f42:	4ab7      	ldr	r2, [pc, #732]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f4a:	e01a      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f50:	3308      	adds	r3, #8
 8006f52:	2102      	movs	r1, #2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fc8f 	bl	8008878 <RCCEx_PLL2_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f60:	e00f      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3328      	adds	r3, #40	@ 0x28
 8006f68:	2102      	movs	r1, #2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fd36 	bl	80089dc <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f76:	e004      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f7e:	e000      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f8a:	4ba5      	ldr	r3, [pc, #660]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f98:	4aa1      	ldr	r2, [pc, #644]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f9e:	e003      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006fb4:	f04f 0900 	mov.w	r9, #0
 8006fb8:	ea58 0309 	orrs.w	r3, r8, r9
 8006fbc:	d047      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d82a      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006fe5 	.word	0x08006fe5
 8006fd4:	08006ff3 	.word	0x08006ff3
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	08007027 	.word	0x08007027
 8006fe0:	08007027 	.word	0x08007027
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe4:	4b8e      	ldr	r3, [pc, #568]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	4a8d      	ldr	r2, [pc, #564]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ff0:	e01a      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fc3c 	bl	8008878 <RCCEx_PLL2_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007006:	e00f      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700c:	3328      	adds	r3, #40	@ 0x28
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fce3 	bl	80089dc <RCCEx_PLL3_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800701c:	e004      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007024:	e000      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007030:	4b7b      	ldr	r3, [pc, #492]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007034:	f023 0107 	bic.w	r1, r3, #7
 8007038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703e:	4a78      	ldr	r2, [pc, #480]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007040:	430b      	orrs	r3, r1
 8007042:	6513      	str	r3, [r2, #80]	@ 0x50
 8007044:	e003      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800704e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800705a:	f04f 0b00 	mov.w	fp, #0
 800705e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007062:	d04c      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800706a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706e:	d030      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007074:	d829      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007076:	2bc0      	cmp	r3, #192	@ 0xc0
 8007078:	d02d      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800707a:	2bc0      	cmp	r3, #192	@ 0xc0
 800707c:	d825      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800707e:	2b80      	cmp	r3, #128	@ 0x80
 8007080:	d018      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007082:	2b80      	cmp	r3, #128	@ 0x80
 8007084:	d821      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800708a:	2b40      	cmp	r3, #64	@ 0x40
 800708c:	d007      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800708e:	e01c      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007090:	4b63      	ldr	r3, [pc, #396]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007094:	4a62      	ldr	r2, [pc, #392]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800709a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800709c:	e01c      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800709e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a2:	3308      	adds	r3, #8
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 fbe6 	bl	8008878 <RCCEx_PLL2_Config>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070b2:	e011      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b8:	3328      	adds	r3, #40	@ 0x28
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 fc8d 	bl	80089dc <RCCEx_PLL3_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070c8:	e006      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070d0:	e002      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070d2:	bf00      	nop
 80070d4:	e000      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070e0:	4b4f      	ldr	r3, [pc, #316]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ee:	4a4c      	ldr	r2, [pc, #304]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070f0:	430b      	orrs	r3, r1
 80070f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80070f4:	e003      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800710a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800710e:	2300      	movs	r3, #0
 8007110:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007114:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007118:	460b      	mov	r3, r1
 800711a:	4313      	orrs	r3, r2
 800711c:	d053      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007126:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800712a:	d035      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800712c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007130:	d82e      	bhi.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007132:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007136:	d031      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007138:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800713c:	d828      	bhi.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800713e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007142:	d01a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007148:	d822      	bhi.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800714e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007152:	d007      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007154:	e01c      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007156:	4b32      	ldr	r3, [pc, #200]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715a:	4a31      	ldr	r2, [pc, #196]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800715c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007162:	e01c      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007168:	3308      	adds	r3, #8
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fb83 	bl	8008878 <RCCEx_PLL2_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007178:	e011      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	3328      	adds	r3, #40	@ 0x28
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fc2a 	bl	80089dc <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800718e:	e006      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007196:	e002      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007198:	bf00      	nop
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80071d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80071e0:	460b      	mov	r3, r1
 80071e2:	4313      	orrs	r3, r2
 80071e4:	d056      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f2:	d038      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f8:	d831      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071fe:	d034      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007200:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007204:	d82b      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800720a:	d01d      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800720c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007210:	d825      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d006      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007216:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800721a:	d00a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800721c:	e01f      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800721e:	bf00      	nop
 8007220:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007224:	4ba2      	ldr	r3, [pc, #648]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007228:	4aa1      	ldr	r2, [pc, #644]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800722a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800722e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007230:	e01c      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	3308      	adds	r3, #8
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f001 fb1c 	bl	8008878 <RCCEx_PLL2_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007246:	e011      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724c:	3328      	adds	r3, #40	@ 0x28
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f001 fbc3 	bl	80089dc <RCCEx_PLL3_Config>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800725c:	e006      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800726a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10b      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007274:	4b8e      	ldr	r3, [pc, #568]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007278:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007284:	4a8a      	ldr	r2, [pc, #552]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6593      	str	r3, [r2, #88]	@ 0x58
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072a4:	2300      	movs	r3, #0
 80072a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d03a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ba:	2b30      	cmp	r3, #48	@ 0x30
 80072bc:	d01f      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80072be:	2b30      	cmp	r3, #48	@ 0x30
 80072c0:	d819      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d00c      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d815      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d111      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d2:	4b77      	ldr	r3, [pc, #476]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	4a76      	ldr	r2, [pc, #472]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072de:	e011      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e4:	3308      	adds	r3, #8
 80072e6:	2102      	movs	r1, #2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 fac5 	bl	8008878 <RCCEx_PLL2_Config>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072f4:	e006      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072fc:	e002      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800730c:	4b68      	ldr	r3, [pc, #416]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800730e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007310:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800731a:	4a65      	ldr	r2, [pc, #404]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800731c:	430b      	orrs	r3, r1
 800731e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007320:	e003      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007336:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800733a:	2300      	movs	r3, #0
 800733c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007340:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	d051      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007354:	d035      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800735a:	d82e      	bhi.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800735c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007360:	d031      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007362:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007366:	d828      	bhi.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736c:	d01a      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800736e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007372:	d822      	bhi.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737c:	d007      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800737e:	e01c      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007380:	4b4b      	ldr	r3, [pc, #300]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	4a4a      	ldr	r2, [pc, #296]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800738a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800738c:	e01c      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007392:	3308      	adds	r3, #8
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f001 fa6e 	bl	8008878 <RCCEx_PLL2_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073a2:	e011      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	3328      	adds	r3, #40	@ 0x28
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fb15 	bl	80089dc <RCCEx_PLL3_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073b8:	e006      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073c0:	e002      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073c2:	bf00      	nop
 80073c4:	e000      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80073d0:	4b37      	ldr	r3, [pc, #220]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073de:	4a34      	ldr	r2, [pc, #208]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80073fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073fe:	2300      	movs	r3, #0
 8007400:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007404:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007408:	460b      	mov	r3, r1
 800740a:	4313      	orrs	r3, r2
 800740c:	d056      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007418:	d033      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800741a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800741e:	d82c      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007420:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007424:	d02f      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007426:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800742a:	d826      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800742c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007430:	d02b      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007432:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007436:	d820      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800743c:	d012      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800743e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007442:	d81a      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d022      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800744c:	d115      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	3308      	adds	r3, #8
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fa0e 	bl	8008878 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007462:	e015      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007468:	3328      	adds	r3, #40	@ 0x28
 800746a:	2101      	movs	r1, #1
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fab5 	bl	80089dc <RCCEx_PLL3_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007478:	e00a      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007480:	e006      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007482:	bf00      	nop
 8007484:	e004      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800748e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800749a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074a6:	4a02      	ldr	r2, [pc, #8]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80074ac:	e006      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4313      	orrs	r3, r2
 80074da:	d055      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074e8:	d033      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80074ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074ee:	d82c      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f4:	d02f      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fa:	d826      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007500:	d02b      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007502:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007506:	d820      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800750c:	d012      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800750e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007512:	d81a      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d022      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800751c:	d115      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007522:	3308      	adds	r3, #8
 8007524:	2101      	movs	r1, #1
 8007526:	4618      	mov	r0, r3
 8007528:	f001 f9a6 	bl	8008878 <RCCEx_PLL2_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007532:	e015      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	3328      	adds	r3, #40	@ 0x28
 800753a:	2101      	movs	r1, #1
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fa4d 	bl	80089dc <RCCEx_PLL3_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007548:	e00a      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007550:	e006      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007552:	bf00      	nop
 8007554:	e004      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007556:	bf00      	nop
 8007558:	e002      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800755e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007568:	4ba3      	ldr	r3, [pc, #652]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007578:	4a9f      	ldr	r2, [pc, #636]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800757a:	430b      	orrs	r3, r1
 800757c:	6593      	str	r3, [r2, #88]	@ 0x58
 800757e:	e003      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007598:	2300      	movs	r3, #0
 800759a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800759e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075a2:	460b      	mov	r3, r1
 80075a4:	4313      	orrs	r3, r2
 80075a6:	d037      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80075a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b2:	d00e      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80075b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b8:	d816      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d018      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80075be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075c2:	d111      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c4:	4b8c      	ldr	r3, [pc, #560]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	4a8b      	ldr	r2, [pc, #556]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075d0:	e00f      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	3308      	adds	r3, #8
 80075d8:	2101      	movs	r1, #1
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f94c 	bl	8008878 <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075e6:	e004      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ee:	e000      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80075f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075fa:	4b7f      	ldr	r3, [pc, #508]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007608:	4a7b      	ldr	r2, [pc, #492]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760a:	430b      	orrs	r3, r1
 800760c:	6513      	str	r3, [r2, #80]	@ 0x50
 800760e:	e003      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800762e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007632:	460b      	mov	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	d039      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800763e:	2b03      	cmp	r3, #3
 8007640:	d81c      	bhi.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007685 	.word	0x08007685
 800764c:	08007659 	.word	0x08007659
 8007650:	08007667 	.word	0x08007667
 8007654:	08007685 	.word	0x08007685
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007658:	4b67      	ldr	r3, [pc, #412]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a66      	ldr	r2, [pc, #408]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007664:	e00f      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766a:	3308      	adds	r3, #8
 800766c:	2102      	movs	r1, #2
 800766e:	4618      	mov	r0, r3
 8007670:	f001 f902 	bl	8008878 <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800767a:	e004      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007682:	e000      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800768e:	4b5a      	ldr	r3, [pc, #360]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007692:	f023 0103 	bic.w	r1, r3, #3
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769c:	4a56      	ldr	r2, [pc, #344]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769e:	430b      	orrs	r3, r1
 80076a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076a2:	e003      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80076b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076bc:	2300      	movs	r3, #0
 80076be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076c6:	460b      	mov	r3, r1
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f000 809f 	beq.w	800780c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076ce:	4b4b      	ldr	r3, [pc, #300]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a4a      	ldr	r2, [pc, #296]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076da:	f7fb fdd9 	bl	8003290 <HAL_GetTick>
 80076de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e2:	e00b      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e4:	f7fb fdd4 	bl	8003290 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b64      	cmp	r3, #100	@ 0x64
 80076f2:	d903      	bls.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fa:	e005      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076fc:	4b3f      	ldr	r3, [pc, #252]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0ed      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770c:	2b00      	cmp	r3, #0
 800770e:	d179      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007712:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800771c:	4053      	eors	r3, r2
 800771e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007722:	2b00      	cmp	r3, #0
 8007724:	d015      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007726:	4b34      	ldr	r3, [pc, #208]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800772e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007732:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007736:	4a30      	ldr	r2, [pc, #192]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800773c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800773e:	4b2e      	ldr	r3, [pc, #184]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007742:	4a2d      	ldr	r2, [pc, #180]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007748:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800774a:	4a2b      	ldr	r2, [pc, #172]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007750:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800775a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800775e:	d118      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fb fd96 	bl	8003290 <HAL_GetTick>
 8007764:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007768:	e00d      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800776a:	f7fb fd91 	bl	8003290 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	f241 3388 	movw	r3, #5000	@ 0x1388
 800777a:	429a      	cmp	r2, r3
 800777c:	d903      	bls.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007784:	e005      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007786:	4b1c      	ldr	r3, [pc, #112]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0eb      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007796:	2b00      	cmp	r3, #0
 8007798:	d129      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077aa:	d10e      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077bc:	091a      	lsrs	r2, r3, #4
 80077be:	4b10      	ldr	r3, [pc, #64]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	4a0d      	ldr	r2, [pc, #52]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6113      	str	r3, [r2, #16]
 80077c8:	e005      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80077ca:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	4a0a      	ldr	r2, [pc, #40]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077d4:	6113      	str	r3, [r2, #16]
 80077d6:	4b08      	ldr	r3, [pc, #32]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e6:	4a04      	ldr	r2, [pc, #16]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e8:	430b      	orrs	r3, r1
 80077ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80077ec:	e00e      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80077f6:	e009      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80077f8:	58024400 	.word	0x58024400
 80077fc:	58024800 	.word	0x58024800
 8007800:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f002 0301 	and.w	r3, r2, #1
 8007818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007822:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007826:	460b      	mov	r3, r1
 8007828:	4313      	orrs	r3, r2
 800782a:	f000 8089 	beq.w	8007940 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007834:	2b28      	cmp	r3, #40	@ 0x28
 8007836:	d86b      	bhi.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007838:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007919 	.word	0x08007919
 8007844:	08007911 	.word	0x08007911
 8007848:	08007911 	.word	0x08007911
 800784c:	08007911 	.word	0x08007911
 8007850:	08007911 	.word	0x08007911
 8007854:	08007911 	.word	0x08007911
 8007858:	08007911 	.word	0x08007911
 800785c:	08007911 	.word	0x08007911
 8007860:	080078e5 	.word	0x080078e5
 8007864:	08007911 	.word	0x08007911
 8007868:	08007911 	.word	0x08007911
 800786c:	08007911 	.word	0x08007911
 8007870:	08007911 	.word	0x08007911
 8007874:	08007911 	.word	0x08007911
 8007878:	08007911 	.word	0x08007911
 800787c:	08007911 	.word	0x08007911
 8007880:	080078fb 	.word	0x080078fb
 8007884:	08007911 	.word	0x08007911
 8007888:	08007911 	.word	0x08007911
 800788c:	08007911 	.word	0x08007911
 8007890:	08007911 	.word	0x08007911
 8007894:	08007911 	.word	0x08007911
 8007898:	08007911 	.word	0x08007911
 800789c:	08007911 	.word	0x08007911
 80078a0:	08007919 	.word	0x08007919
 80078a4:	08007911 	.word	0x08007911
 80078a8:	08007911 	.word	0x08007911
 80078ac:	08007911 	.word	0x08007911
 80078b0:	08007911 	.word	0x08007911
 80078b4:	08007911 	.word	0x08007911
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007911 	.word	0x08007911
 80078c0:	08007919 	.word	0x08007919
 80078c4:	08007911 	.word	0x08007911
 80078c8:	08007911 	.word	0x08007911
 80078cc:	08007911 	.word	0x08007911
 80078d0:	08007911 	.word	0x08007911
 80078d4:	08007911 	.word	0x08007911
 80078d8:	08007911 	.word	0x08007911
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007919 	.word	0x08007919
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	3308      	adds	r3, #8
 80078ea:	2101      	movs	r1, #1
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 ffc3 	bl	8008878 <RCCEx_PLL2_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80078f8:	e00f      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fe:	3328      	adds	r3, #40	@ 0x28
 8007900:	2101      	movs	r1, #1
 8007902:	4618      	mov	r0, r3
 8007904:	f001 f86a 	bl	80089dc <RCCEx_PLL3_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800790e:	e004      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007922:	4bbf      	ldr	r3, [pc, #764]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007926:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007930:	4abb      	ldr	r2, [pc, #748]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007932:	430b      	orrs	r3, r1
 8007934:	6553      	str	r3, [r2, #84]	@ 0x54
 8007936:	e003      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f002 0302 	and.w	r3, r2, #2
 800794c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007950:	2300      	movs	r3, #0
 8007952:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007956:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d041      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007966:	2b05      	cmp	r3, #5
 8007968:	d824      	bhi.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079bd 	.word	0x080079bd
 8007974:	08007989 	.word	0x08007989
 8007978:	0800799f 	.word	0x0800799f
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079bd 	.word	0x080079bd
 8007984:	080079bd 	.word	0x080079bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	3308      	adds	r3, #8
 800798e:	2101      	movs	r1, #1
 8007990:	4618      	mov	r0, r3
 8007992:	f000 ff71 	bl	8008878 <RCCEx_PLL2_Config>
 8007996:	4603      	mov	r3, r0
 8007998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800799c:	e00f      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	3328      	adds	r3, #40	@ 0x28
 80079a4:	2101      	movs	r1, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 f818 	bl	80089dc <RCCEx_PLL3_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079b2:	e004      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ba:	e000      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80079bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079c6:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ca:	f023 0107 	bic.w	r1, r3, #7
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079d4:	4a92      	ldr	r2, [pc, #584]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079d6:	430b      	orrs	r3, r1
 80079d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80079da:	e003      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f002 0304 	and.w	r3, r2, #4
 80079f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079f4:	2300      	movs	r3, #0
 80079f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4313      	orrs	r3, r2
 8007a02:	d044      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	d825      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a10:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a65 	.word	0x08007a65
 8007a1c:	08007a31 	.word	0x08007a31
 8007a20:	08007a47 	.word	0x08007a47
 8007a24:	08007a65 	.word	0x08007a65
 8007a28:	08007a65 	.word	0x08007a65
 8007a2c:	08007a65 	.word	0x08007a65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	3308      	adds	r3, #8
 8007a36:	2101      	movs	r1, #1
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 ff1d 	bl	8008878 <RCCEx_PLL2_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a44:	e00f      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4a:	3328      	adds	r3, #40	@ 0x28
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 ffc4 	bl	80089dc <RCCEx_PLL3_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a5a:	e004      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a62:	e000      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a72:	f023 0107 	bic.w	r1, r3, #7
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a7e:	4a68      	ldr	r2, [pc, #416]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a80:	430b      	orrs	r3, r1
 8007a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a84:	e003      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f002 0320 	and.w	r3, r2, #32
 8007a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	d055      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007aba:	d033      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ac0:	d82c      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac6:	d02f      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007acc:	d826      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ace:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ad2:	d02b      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ad4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ad8:	d820      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ade:	d012      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae4:	d81a      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d022      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aee:	d115      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af4:	3308      	adds	r3, #8
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 febd 	bl	8008878 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b04:	e015      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0a:	3328      	adds	r3, #40	@ 0x28
 8007b0c:	2102      	movs	r1, #2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 ff64 	bl	80089dc <RCCEx_PLL3_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b1a:	e00a      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b22:	e006      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b24:	bf00      	nop
 8007b26:	e004      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b28:	bf00      	nop
 8007b2a:	e002      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b3a:	4b39      	ldr	r3, [pc, #228]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4a:	4a35      	ldr	r2, [pc, #212]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b50:	e003      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4313      	orrs	r3, r2
 8007b78:	d058      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b82:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b86:	d033      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007b88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b8c:	d82c      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b92:	d02f      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b98:	d826      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b9e:	d02b      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ba4:	d820      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007baa:	d012      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bb0:	d81a      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d022      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bba:	d115      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fe57 	bl	8008878 <RCCEx_PLL2_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007bd0:	e015      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	3328      	adds	r3, #40	@ 0x28
 8007bd8:	2102      	movs	r1, #2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fefe 	bl	80089dc <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007be6:	e00a      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bee:	e006      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bf0:	bf00      	nop
 8007bf2:	e004      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bf4:	bf00      	nop
 8007bf6:	e002      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bf8:	bf00      	nop
 8007bfa:	e000      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10e      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c06:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c16:	4a02      	ldr	r2, [pc, #8]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c1c:	e006      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c46:	460b      	mov	r3, r1
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	d055      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c58:	d033      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007c5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c5e:	d82c      	bhi.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c64:	d02f      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c6a:	d826      	bhi.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c70:	d02b      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007c72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c76:	d820      	bhi.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c7c:	d012      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007c7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c82:	d81a      	bhi.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d022      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8c:	d115      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	3308      	adds	r3, #8
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fdee 	bl	8008878 <RCCEx_PLL2_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ca2:	e015      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	3328      	adds	r3, #40	@ 0x28
 8007caa:	2102      	movs	r1, #2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fe95 	bl	80089dc <RCCEx_PLL3_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cb8:	e00a      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cc0:	e006      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cc2:	bf00      	nop
 8007cc4:	e004      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cc6:	bf00      	nop
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cca:	bf00      	nop
 8007ccc:	e000      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10b      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cd8:	4ba1      	ldr	r3, [pc, #644]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cdc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ce8:	4a9d      	ldr	r2, [pc, #628]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cea:	430b      	orrs	r3, r1
 8007cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cee:	e003      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f002 0308 	and.w	r3, r2, #8
 8007d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d12:	460b      	mov	r3, r1
 8007d14:	4313      	orrs	r3, r2
 8007d16:	d01e      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	3328      	adds	r3, #40	@ 0x28
 8007d2c:	2102      	movs	r1, #2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fe54 	bl	80089dc <RCCEx_PLL3_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d40:	4b87      	ldr	r3, [pc, #540]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d50:	4a83      	ldr	r2, [pc, #524]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f002 0310 	and.w	r3, r2, #16
 8007d62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d66:	2300      	movs	r3, #0
 8007d68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d01e      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d82:	d10c      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	3328      	adds	r3, #40	@ 0x28
 8007d8a:	2102      	movs	r1, #2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fe25 	bl	80089dc <RCCEx_PLL3_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d9e:	4b70      	ldr	r3, [pc, #448]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dae:	4a6c      	ldr	r2, [pc, #432]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db0:	430b      	orrs	r3, r1
 8007db2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	d03e      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de0:	d022      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de6:	d81b      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df0:	d00b      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007df2:	e015      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	3308      	adds	r3, #8
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fd3b 	bl	8008878 <RCCEx_PLL2_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e08:	e00f      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0e:	3328      	adds	r3, #40	@ 0x28
 8007e10:	2102      	movs	r1, #2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fde2 	bl	80089dc <RCCEx_PLL3_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e1e:	e004      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e26:	e000      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e32:	4b4b      	ldr	r3, [pc, #300]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e42:	4a47      	ldr	r2, [pc, #284]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e48:	e003      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e60:	2300      	movs	r3, #0
 8007e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	d03b      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e7a:	d01f      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007e7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e80:	d818      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e86:	d003      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8c:	d007      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007e8e:	e011      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e90:	4b33      	ldr	r3, [pc, #204]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4a32      	ldr	r2, [pc, #200]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e9c:	e00f      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	3328      	adds	r3, #40	@ 0x28
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fd98 	bl	80089dc <RCCEx_PLL3_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007eb2:	e004      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eba:	e000      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ec6:	4b26      	ldr	r3, [pc, #152]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed6:	4a22      	ldr	r2, [pc, #136]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6553      	str	r3, [r2, #84]	@ 0x54
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007ef2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ef8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d034      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f10:	d007      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f12:	e011      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f14:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f18:	4a11      	ldr	r2, [pc, #68]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f20:	e00e      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	3308      	adds	r3, #8
 8007f28:	2102      	movs	r1, #2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fca4 	bl	8008878 <RCCEx_PLL2_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10d      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f56:	4a02      	ldr	r2, [pc, #8]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f5c:	e006      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d00c      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	3328      	adds	r3, #40	@ 0x28
 8007f8e:	2102      	movs	r1, #2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fd23 	bl	80089dc <RCCEx_PLL3_Config>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007fae:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d038      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fca:	d018      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fd0:	d811      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd6:	d014      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fdc:	d80b      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d011      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fe6:	d106      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe8:	4bc3      	ldr	r3, [pc, #780]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	4ac2      	ldr	r2, [pc, #776]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ff4:	e008      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ffc:	e004      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ffe:	bf00      	nop
 8008000:	e002      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008002:	bf00      	nop
 8008004:	e000      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008010:	4bb9      	ldr	r3, [pc, #740]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008014:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008020:	4ab5      	ldr	r2, [pc, #724]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008022:	430b      	orrs	r3, r1
 8008024:	6553      	str	r3, [r2, #84]	@ 0x54
 8008026:	e003      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800803c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800803e:	2300      	movs	r3, #0
 8008040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008042:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008046:	460b      	mov	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	d009      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800804c:	4baa      	ldr	r3, [pc, #680]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800804e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008050:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800805a:	4aa7      	ldr	r2, [pc, #668]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805c:	430b      	orrs	r3, r1
 800805e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800806c:	653b      	str	r3, [r7, #80]	@ 0x50
 800806e:	2300      	movs	r3, #0
 8008070:	657b      	str	r3, [r7, #84]	@ 0x54
 8008072:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008076:	460b      	mov	r3, r1
 8008078:	4313      	orrs	r3, r2
 800807a:	d00a      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800807c:	4b9e      	ldr	r3, [pc, #632]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800808c:	4a9a      	ldr	r2, [pc, #616]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800808e:	430b      	orrs	r3, r1
 8008090:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800809e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080a0:	2300      	movs	r3, #0
 80080a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080a8:	460b      	mov	r3, r1
 80080aa:	4313      	orrs	r3, r2
 80080ac:	d009      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080ae:	4b92      	ldr	r3, [pc, #584]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080bc:	4a8e      	ldr	r2, [pc, #568]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080be:	430b      	orrs	r3, r1
 80080c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80080ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80080d0:	2300      	movs	r3, #0
 80080d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080d8:	460b      	mov	r3, r1
 80080da:	4313      	orrs	r3, r2
 80080dc:	d00e      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080de:	4b86      	ldr	r3, [pc, #536]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	4a85      	ldr	r2, [pc, #532]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080e8:	6113      	str	r3, [r2, #16]
 80080ea:	4b83      	ldr	r3, [pc, #524]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ec:	6919      	ldr	r1, [r3, #16]
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80080f6:	4a80      	ldr	r2, [pc, #512]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008108:	63bb      	str	r3, [r7, #56]	@ 0x38
 800810a:	2300      	movs	r3, #0
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800810e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d009      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008118:	4b77      	ldr	r3, [pc, #476]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800811a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800811c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008126:	4a74      	ldr	r2, [pc, #464]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008128:	430b      	orrs	r3, r1
 800812a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30
 800813a:	2300      	movs	r3, #0
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
 800813e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008142:	460b      	mov	r3, r1
 8008144:	4313      	orrs	r3, r2
 8008146:	d00a      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008148:	4b6b      	ldr	r3, [pc, #428]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800814a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008158:	4a67      	ldr	r2, [pc, #412]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800815a:	430b      	orrs	r3, r1
 800815c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	2100      	movs	r1, #0
 8008168:	62b9      	str	r1, [r7, #40]	@ 0x28
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008170:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008174:	460b      	mov	r3, r1
 8008176:	4313      	orrs	r3, r2
 8008178:	d011      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	3308      	adds	r3, #8
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fb78 	bl	8008878 <RCCEx_PLL2_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800818e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	2100      	movs	r1, #0
 80081a8:	6239      	str	r1, [r7, #32]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081b4:	460b      	mov	r3, r1
 80081b6:	4313      	orrs	r3, r2
 80081b8:	d011      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	3308      	adds	r3, #8
 80081c0:	2101      	movs	r1, #1
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fb58 	bl	8008878 <RCCEx_PLL2_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	2100      	movs	r1, #0
 80081e8:	61b9      	str	r1, [r7, #24]
 80081ea:	f003 0304 	and.w	r3, r3, #4
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081f4:	460b      	mov	r3, r1
 80081f6:	4313      	orrs	r3, r2
 80081f8:	d011      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	3308      	adds	r3, #8
 8008200:	2102      	movs	r1, #2
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fb38 	bl	8008878 <RCCEx_PLL2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800820e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	2100      	movs	r1, #0
 8008228:	6139      	str	r1, [r7, #16]
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d011      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	3328      	adds	r3, #40	@ 0x28
 8008240:	2100      	movs	r1, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fbca 	bl	80089dc <RCCEx_PLL3_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800824e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	2100      	movs	r1, #0
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008274:	460b      	mov	r3, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	d011      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	3328      	adds	r3, #40	@ 0x28
 8008280:	2101      	movs	r1, #1
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fbaa 	bl	80089dc <RCCEx_PLL3_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800828e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800829a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	2100      	movs	r1, #0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082b4:	460b      	mov	r3, r1
 80082b6:	4313      	orrs	r3, r2
 80082b8:	d011      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082be:	3328      	adds	r3, #40	@ 0x28
 80082c0:	2102      	movs	r1, #2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fb8a 	bl	80089dc <RCCEx_PLL3_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80082de:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	e000      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80082f2:	46bd      	mov	sp, r7
 80082f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082f8:	58024400 	.word	0x58024400

080082fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008300:	f7fe fd96 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8008304:	4602      	mov	r2, r0
 8008306:	4b06      	ldr	r3, [pc, #24]	@ (8008320 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	091b      	lsrs	r3, r3, #4
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	4904      	ldr	r1, [pc, #16]	@ (8008324 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008312:	5ccb      	ldrb	r3, [r1, r3]
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800831c:	4618      	mov	r0, r3
 800831e:	bd80      	pop	{r7, pc}
 8008320:	58024400 	.word	0x58024400
 8008324:	0800f590 	.word	0x0800f590

08008328 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008328:	b480      	push	{r7}
 800832a:	b089      	sub	sp, #36	@ 0x24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008330:	4ba1      	ldr	r3, [pc, #644]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800833a:	4b9f      	ldr	r3, [pc, #636]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833e:	0b1b      	lsrs	r3, r3, #12
 8008340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008344:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008346:	4b9c      	ldr	r3, [pc, #624]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	091b      	lsrs	r3, r3, #4
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008352:	4b99      	ldr	r3, [pc, #612]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008356:	08db      	lsrs	r3, r3, #3
 8008358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	fb02 f303 	mul.w	r3, r2, r3
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8111 	beq.w	8008598 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2b02      	cmp	r3, #2
 800837a:	f000 8083 	beq.w	8008484 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b02      	cmp	r3, #2
 8008382:	f200 80a1 	bhi.w	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d056      	beq.n	8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008392:	e099      	b.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008394:	4b88      	ldr	r3, [pc, #544]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	d02d      	beq.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083a0:	4b85      	ldr	r3, [pc, #532]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	08db      	lsrs	r3, r3, #3
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	4a84      	ldr	r2, [pc, #528]	@ (80085bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b7b      	ldr	r3, [pc, #492]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083fa:	e087      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b6a      	ldr	r3, [pc, #424]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008422:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843e:	e065      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b59      	ldr	r3, [pc, #356]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a03 	vldr	s12, [r7, #12]
 8008466:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008482:	e043      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b48      	ldr	r3, [pc, #288]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c6:	e021      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084da:	4b37      	ldr	r3, [pc, #220]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800850a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800850c:	4b2a      	ldr	r3, [pc, #168]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	0a5b      	lsrs	r3, r3, #9
 8008512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008526:	edd7 6a07 	vldr	s13, [r7, #28]
 800852a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800852e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008532:	ee17 2a90 	vmov	r2, s15
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800853a:	4b1f      	ldr	r3, [pc, #124]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800853c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853e:	0c1b      	lsrs	r3, r3, #16
 8008540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008544:	ee07 3a90 	vmov	s15, r3
 8008548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008554:	edd7 6a07 	vldr	s13, [r7, #28]
 8008558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800855c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008560:	ee17 2a90 	vmov	r2, s15
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008568:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800856a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856c:	0e1b      	lsrs	r3, r3, #24
 800856e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800857e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008582:	edd7 6a07 	vldr	s13, [r7, #28]
 8008586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800858a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800858e:	ee17 2a90 	vmov	r2, s15
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008596:	e008      	b.n	80085aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	609a      	str	r2, [r3, #8]
}
 80085aa:	bf00      	nop
 80085ac:	3724      	adds	r7, #36	@ 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	58024400 	.word	0x58024400
 80085bc:	03d09000 	.word	0x03d09000
 80085c0:	46000000 	.word	0x46000000
 80085c4:	4c742400 	.word	0x4c742400
 80085c8:	4a742400 	.word	0x4a742400
 80085cc:	4bb71b00 	.word	0x4bb71b00

080085d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	@ 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80085e2:	4b9f      	ldr	r3, [pc, #636]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e6:	0d1b      	lsrs	r3, r3, #20
 80085e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80085fa:	4b99      	ldr	r3, [pc, #612]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8111 	beq.w	8008840 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b02      	cmp	r3, #2
 8008622:	f000 8083 	beq.w	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b02      	cmp	r3, #2
 800862a:	f200 80a1 	bhi.w	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d056      	beq.n	80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800863a:	e099      	b.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800863c:	4b88      	ldr	r3, [pc, #544]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02d      	beq.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008648:	4b85      	ldr	r3, [pc, #532]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	4a84      	ldr	r2, [pc, #528]	@ (8008864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
 8008658:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b7b      	ldr	r3, [pc, #492]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a03 	vldr	s12, [r7, #12]
 8008686:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086a2:	e087      	b.n	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800886c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e6:	e065      	b.n	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b59      	ldr	r3, [pc, #356]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872a:	e043      	b.n	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b48      	ldr	r3, [pc, #288]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876e:	e021      	b.n	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b37      	ldr	r3, [pc, #220]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b8:	0a5b      	lsrs	r3, r3, #9
 80087ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087da:	ee17 2a90 	vmov	r2, s15
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80087e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008808:	ee17 2a90 	vmov	r2, s15
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008810:	4b13      	ldr	r3, [pc, #76]	@ (8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008814:	0e1b      	lsrs	r3, r3, #24
 8008816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800882a:	edd7 6a07 	vldr	s13, [r7, #28]
 800882e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008836:	ee17 2a90 	vmov	r2, s15
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800883e:	e008      	b.n	8008852 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	609a      	str	r2, [r3, #8]
}
 8008852:	bf00      	nop
 8008854:	3724      	adds	r7, #36	@ 0x24
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	03d09000 	.word	0x03d09000
 8008868:	46000000 	.word	0x46000000
 800886c:	4c742400 	.word	0x4c742400
 8008870:	4a742400 	.word	0x4a742400
 8008874:	4bb71b00 	.word	0x4bb71b00

08008878 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008886:	4b53      	ldr	r3, [pc, #332]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d101      	bne.n	8008896 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e099      	b.n	80089ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008896:	4b4f      	ldr	r3, [pc, #316]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a4e      	ldr	r2, [pc, #312]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800889c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a2:	f7fa fcf5 	bl	8003290 <HAL_GetTick>
 80088a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088a8:	e008      	b.n	80088bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088aa:	f7fa fcf1 	bl	8003290 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d901      	bls.n	80088bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e086      	b.n	80089ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088bc:	4b45      	ldr	r3, [pc, #276]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f0      	bne.n	80088aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088c8:	4b42      	ldr	r3, [pc, #264]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	031b      	lsls	r3, r3, #12
 80088d6:	493f      	ldr	r1, [pc, #252]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	628b      	str	r3, [r1, #40]	@ 0x28
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	025b      	lsls	r3, r3, #9
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	431a      	orrs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	3b01      	subs	r3, #1
 8008906:	061b      	lsls	r3, r3, #24
 8008908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800890c:	4931      	ldr	r1, [pc, #196]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800890e:	4313      	orrs	r3, r2
 8008910:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008912:	4b30      	ldr	r3, [pc, #192]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	492d      	ldr	r1, [pc, #180]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008924:	4b2b      	ldr	r3, [pc, #172]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	f023 0220 	bic.w	r2, r3, #32
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	4928      	ldr	r1, [pc, #160]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008936:	4b27      	ldr	r3, [pc, #156]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893a:	4a26      	ldr	r2, [pc, #152]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800893c:	f023 0310 	bic.w	r3, r3, #16
 8008940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008942:	4b24      	ldr	r3, [pc, #144]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008946:	4b24      	ldr	r3, [pc, #144]	@ (80089d8 <RCCEx_PLL2_Config+0x160>)
 8008948:	4013      	ands	r3, r2
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	69d2      	ldr	r2, [r2, #28]
 800894e:	00d2      	lsls	r2, r2, #3
 8008950:	4920      	ldr	r1, [pc, #128]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008956:	4b1f      	ldr	r3, [pc, #124]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	4a1e      	ldr	r2, [pc, #120]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800895c:	f043 0310 	orr.w	r3, r3, #16
 8008960:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008968:	4b1a      	ldr	r3, [pc, #104]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a19      	ldr	r2, [pc, #100]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800896e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008974:	e00f      	b.n	8008996 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d106      	bne.n	800898a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800897c:	4b15      	ldr	r3, [pc, #84]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	4a14      	ldr	r2, [pc, #80]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008988:	e005      	b.n	8008996 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800898a:	4b12      	ldr	r3, [pc, #72]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	4a11      	ldr	r2, [pc, #68]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008994:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008996:	4b0f      	ldr	r3, [pc, #60]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a0e      	ldr	r2, [pc, #56]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800899c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7fa fc75 	bl	8003290 <HAL_GetTick>
 80089a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089a8:	e008      	b.n	80089bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089aa:	f7fa fc71 	bl	8003290 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e006      	b.n	80089ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089bc:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0f0      	beq.n	80089aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	ffff0007 	.word	0xffff0007

080089dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089ea:	4b53      	ldr	r3, [pc, #332]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d101      	bne.n	80089fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e099      	b.n	8008b2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a06:	f7fa fc43 	bl	8003290 <HAL_GetTick>
 8008a0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a0c:	e008      	b.n	8008a20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a0e:	f7fa fc3f 	bl	8003290 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e086      	b.n	8008b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a20:	4b45      	ldr	r3, [pc, #276]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f0      	bne.n	8008a0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a2c:	4b42      	ldr	r3, [pc, #264]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	051b      	lsls	r3, r3, #20
 8008a3a:	493f      	ldr	r1, [pc, #252]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	025b      	lsls	r3, r3, #9
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	061b      	lsls	r3, r3, #24
 8008a6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a70:	4931      	ldr	r1, [pc, #196]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a76:	4b30      	ldr	r3, [pc, #192]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	492d      	ldr	r1, [pc, #180]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a88:	4b2b      	ldr	r3, [pc, #172]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	4928      	ldr	r1, [pc, #160]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a9a:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	4a26      	ldr	r2, [pc, #152]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008aa6:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aaa:	4b24      	ldr	r3, [pc, #144]	@ (8008b3c <RCCEx_PLL3_Config+0x160>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	69d2      	ldr	r2, [r2, #28]
 8008ab2:	00d2      	lsls	r2, r2, #3
 8008ab4:	4920      	ldr	r1, [pc, #128]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008aba:	4b1f      	ldr	r3, [pc, #124]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	4a1e      	ldr	r2, [pc, #120]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008acc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	4a19      	ldr	r2, [pc, #100]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ad2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ad8:	e00f      	b.n	8008afa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d106      	bne.n	8008aee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ae0:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae4:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008aec:	e005      	b.n	8008afa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008aee:	4b12      	ldr	r3, [pc, #72]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	4a11      	ldr	r2, [pc, #68]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008af4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008afa:	4b0f      	ldr	r3, [pc, #60]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a0e      	ldr	r2, [pc, #56]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b06:	f7fa fbc3 	bl	8003290 <HAL_GetTick>
 8008b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b0c:	e008      	b.n	8008b20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b0e:	f7fa fbbf 	bl	8003290 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e006      	b.n	8008b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b20:	4b05      	ldr	r3, [pc, #20]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	ffff0007 	.word	0xffff0007

08008b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e049      	b.n	8008be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d106      	bne.n	8008b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7f9 fd56 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f000 fdc0 	bl	8009704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d001      	beq.n	8008c08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e04c      	b.n	8008ca2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a26      	ldr	r2, [pc, #152]	@ (8008cb0 <HAL_TIM_Base_Start+0xc0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d022      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c22:	d01d      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a22      	ldr	r2, [pc, #136]	@ (8008cb4 <HAL_TIM_Base_Start+0xc4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d018      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a21      	ldr	r2, [pc, #132]	@ (8008cb8 <HAL_TIM_Base_Start+0xc8>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d013      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008cbc <HAL_TIM_Base_Start+0xcc>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d00e      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc0 <HAL_TIM_Base_Start+0xd0>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d009      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc4 <HAL_TIM_Base_Start+0xd4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d004      	beq.n	8008c60 <HAL_TIM_Base_Start+0x70>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc8 <HAL_TIM_Base_Start+0xd8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d115      	bne.n	8008c8c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	4b19      	ldr	r3, [pc, #100]	@ (8008ccc <HAL_TIM_Base_Start+0xdc>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b06      	cmp	r3, #6
 8008c70:	d015      	beq.n	8008c9e <HAL_TIM_Base_Start+0xae>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c78:	d011      	beq.n	8008c9e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0201 	orr.w	r2, r2, #1
 8008c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8a:	e008      	b.n	8008c9e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0201 	orr.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	e000      	b.n	8008ca0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40000400 	.word	0x40000400
 8008cb8:	40000800 	.word	0x40000800
 8008cbc:	40000c00 	.word	0x40000c00
 8008cc0:	40010400 	.word	0x40010400
 8008cc4:	40001800 	.word	0x40001800
 8008cc8:	40014000 	.word	0x40014000
 8008ccc:	00010007 	.word	0x00010007

08008cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d001      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e054      	b.n	8008d92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a26      	ldr	r2, [pc, #152]	@ (8008da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d022      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d12:	d01d      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a22      	ldr	r2, [pc, #136]	@ (8008da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d018      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a21      	ldr	r2, [pc, #132]	@ (8008da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008dac <HAL_TIM_Base_Start_IT+0xdc>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00e      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1e      	ldr	r2, [pc, #120]	@ (8008db0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d009      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1c      	ldr	r2, [pc, #112]	@ (8008db4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <HAL_TIM_Base_Start_IT+0x80>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008db8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d115      	bne.n	8008d7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	4b19      	ldr	r3, [pc, #100]	@ (8008dbc <HAL_TIM_Base_Start_IT+0xec>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b06      	cmp	r3, #6
 8008d60:	d015      	beq.n	8008d8e <HAL_TIM_Base_Start_IT+0xbe>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d68:	d011      	beq.n	8008d8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0201 	orr.w	r2, r2, #1
 8008d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d7a:	e008      	b.n	8008d8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e000      	b.n	8008d90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	40010000 	.word	0x40010000
 8008da4:	40000400 	.word	0x40000400
 8008da8:	40000800 	.word	0x40000800
 8008dac:	40000c00 	.word	0x40000c00
 8008db0:	40010400 	.word	0x40010400
 8008db4:	40001800 	.word	0x40001800
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	00010007 	.word	0x00010007

08008dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e049      	b.n	8008e66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7f9 fd18 	bl	800281c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f000 fc80 	bl	8009704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <HAL_TIM_PWM_Start+0x24>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	bf14      	ite	ne
 8008e8c:	2301      	movne	r3, #1
 8008e8e:	2300      	moveq	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	e03c      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d109      	bne.n	8008eae <HAL_TIM_PWM_Start+0x3e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	bf14      	ite	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	2300      	moveq	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	e02f      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d109      	bne.n	8008ec8 <HAL_TIM_PWM_Start+0x58>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	e022      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b0c      	cmp	r3, #12
 8008ecc:	d109      	bne.n	8008ee2 <HAL_TIM_PWM_Start+0x72>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	bf14      	ite	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	2300      	moveq	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	e015      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d109      	bne.n	8008efc <HAL_TIM_PWM_Start+0x8c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bf14      	ite	ne
 8008ef4:	2301      	movne	r3, #1
 8008ef6:	2300      	moveq	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	e008      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e0a1      	b.n	800905a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <HAL_TIM_PWM_Start+0xb6>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f24:	e023      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d104      	bne.n	8008f36 <HAL_TIM_PWM_Start+0xc6>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f34:	e01b      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d104      	bne.n	8008f46 <HAL_TIM_PWM_Start+0xd6>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f44:	e013      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIM_PWM_Start+0xe6>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f54:	e00b      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIM_PWM_Start+0xf6>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f64:	e003      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2201      	movs	r2, #1
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 ffde 	bl	8009f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a38      	ldr	r2, [pc, #224]	@ (8009064 <HAL_TIM_PWM_Start+0x1f4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a37      	ldr	r2, [pc, #220]	@ (8009068 <HAL_TIM_PWM_Start+0x1f8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a35      	ldr	r2, [pc, #212]	@ (800906c <HAL_TIM_PWM_Start+0x1fc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a34      	ldr	r2, [pc, #208]	@ (8009070 <HAL_TIM_PWM_Start+0x200>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a32      	ldr	r2, [pc, #200]	@ (8009074 <HAL_TIM_PWM_Start+0x204>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d101      	bne.n	8008fb2 <HAL_TIM_PWM_Start+0x142>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <HAL_TIM_PWM_Start+0x144>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a25      	ldr	r2, [pc, #148]	@ (8009064 <HAL_TIM_PWM_Start+0x1f4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d022      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fda:	d01d      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a25      	ldr	r2, [pc, #148]	@ (8009078 <HAL_TIM_PWM_Start+0x208>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d018      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a24      	ldr	r2, [pc, #144]	@ (800907c <HAL_TIM_PWM_Start+0x20c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d013      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a22      	ldr	r2, [pc, #136]	@ (8009080 <HAL_TIM_PWM_Start+0x210>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00e      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8009068 <HAL_TIM_PWM_Start+0x1f8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d009      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1e      	ldr	r2, [pc, #120]	@ (8009084 <HAL_TIM_PWM_Start+0x214>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d004      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a16      	ldr	r2, [pc, #88]	@ (800906c <HAL_TIM_PWM_Start+0x1fc>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d115      	bne.n	8009044 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	4b1a      	ldr	r3, [pc, #104]	@ (8009088 <HAL_TIM_PWM_Start+0x218>)
 8009020:	4013      	ands	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b06      	cmp	r3, #6
 8009028:	d015      	beq.n	8009056 <HAL_TIM_PWM_Start+0x1e6>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009030:	d011      	beq.n	8009056 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	e008      	b.n	8009056 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e000      	b.n	8009058 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	40010400 	.word	0x40010400
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800
 8009078:	40000400 	.word	0x40000400
 800907c:	40000800 	.word	0x40000800
 8009080:	40000c00 	.word	0x40000c00
 8009084:	40001800 	.word	0x40001800
 8009088:	00010007 	.word	0x00010007

0800908c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d020      	beq.n	80090f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0202 	mvn.w	r2, #2
 80090c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 faf6 	bl	80096c8 <HAL_TIM_IC_CaptureCallback>
 80090dc:	e005      	b.n	80090ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fae8 	bl	80096b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 faf9 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0204 	mvn.w	r2, #4
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fad0 	bl	80096c8 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fac2 	bl	80096b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fad3 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0308 	and.w	r3, r3, #8
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01b      	beq.n	8009188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0208 	mvn.w	r2, #8
 8009158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2204      	movs	r2, #4
 800915e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 faaa 	bl	80096c8 <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa9c 	bl	80096b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 faad 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0310 	and.w	r3, r3, #16
 800918e:	2b00      	cmp	r3, #0
 8009190:	d020      	beq.n	80091d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f003 0310 	and.w	r3, r3, #16
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01b      	beq.n	80091d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0210 	mvn.w	r2, #16
 80091a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2208      	movs	r2, #8
 80091aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa84 	bl	80096c8 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa76 	bl	80096b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fa87 	bl	80096dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00c      	beq.n	80091f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0201 	mvn.w	r2, #1
 80091f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7f8 fe28 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00c      	beq.n	8009226 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009212:	2b00      	cmp	r3, #0
 8009214:	d007      	beq.n	8009226 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800921e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 ffc5 	bl	800a1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00c      	beq.n	800924a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 ffbd 	bl	800a1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00c      	beq.n	800926e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fa41 	bl	80096f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00c      	beq.n	8009292 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f06f 0220 	mvn.w	r2, #32
 800928a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 ff85 	bl	800a19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e0ff      	b.n	80094ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b14      	cmp	r3, #20
 80092c6:	f200 80f0 	bhi.w	80094aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	08009325 	.word	0x08009325
 80092d4:	080094ab 	.word	0x080094ab
 80092d8:	080094ab 	.word	0x080094ab
 80092dc:	080094ab 	.word	0x080094ab
 80092e0:	08009365 	.word	0x08009365
 80092e4:	080094ab 	.word	0x080094ab
 80092e8:	080094ab 	.word	0x080094ab
 80092ec:	080094ab 	.word	0x080094ab
 80092f0:	080093a7 	.word	0x080093a7
 80092f4:	080094ab 	.word	0x080094ab
 80092f8:	080094ab 	.word	0x080094ab
 80092fc:	080094ab 	.word	0x080094ab
 8009300:	080093e7 	.word	0x080093e7
 8009304:	080094ab 	.word	0x080094ab
 8009308:	080094ab 	.word	0x080094ab
 800930c:	080094ab 	.word	0x080094ab
 8009310:	08009429 	.word	0x08009429
 8009314:	080094ab 	.word	0x080094ab
 8009318:	080094ab 	.word	0x080094ab
 800931c:	080094ab 	.word	0x080094ab
 8009320:	08009469 	.word	0x08009469
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fa90 	bl	8009850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0208 	orr.w	r2, r2, #8
 800933e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0204 	bic.w	r2, r2, #4
 800934e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6999      	ldr	r1, [r3, #24]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	691a      	ldr	r2, [r3, #16]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	619a      	str	r2, [r3, #24]
      break;
 8009362:	e0a5      	b.n	80094b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68b9      	ldr	r1, [r7, #8]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fb00 	bl	8009970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699a      	ldr	r2, [r3, #24]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800937e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	699a      	ldr	r2, [r3, #24]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800938e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6999      	ldr	r1, [r3, #24]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	021a      	lsls	r2, r3, #8
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	619a      	str	r2, [r3, #24]
      break;
 80093a4:	e084      	b.n	80094b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 fb69 	bl	8009a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69da      	ldr	r2, [r3, #28]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f042 0208 	orr.w	r2, r2, #8
 80093c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69da      	ldr	r2, [r3, #28]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 0204 	bic.w	r2, r2, #4
 80093d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69d9      	ldr	r1, [r3, #28]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	61da      	str	r2, [r3, #28]
      break;
 80093e4:	e064      	b.n	80094b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fbd1 	bl	8009b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69da      	ldr	r2, [r3, #28]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69da      	ldr	r2, [r3, #28]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69d9      	ldr	r1, [r3, #28]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	021a      	lsls	r2, r3, #8
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	61da      	str	r2, [r3, #28]
      break;
 8009426:	e043      	b.n	80094b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 fc1a 	bl	8009c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0208 	orr.w	r2, r2, #8
 8009442:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0204 	bic.w	r2, r2, #4
 8009452:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009466:	e023      	b.n	80094b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fc5e 	bl	8009d30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009482:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009492:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	021a      	lsls	r2, r3, #8
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094a8:	e002      	b.n	80094b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	75fb      	strb	r3, [r7, #23]
      break;
 80094ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop

080094c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_TIM_ConfigClockSource+0x1c>
 80094dc:	2302      	movs	r3, #2
 80094de:	e0dc      	b.n	800969a <HAL_TIM_ConfigClockSource+0x1d6>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	4b6a      	ldr	r3, [pc, #424]	@ (80096a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a64      	ldr	r2, [pc, #400]	@ (80096a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	f000 80a9 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 800951c:	4a62      	ldr	r2, [pc, #392]	@ (80096a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	f200 80ae 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009524:	4a61      	ldr	r2, [pc, #388]	@ (80096ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8009526:	4293      	cmp	r3, r2
 8009528:	f000 80a1 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 800952c:	4a5f      	ldr	r2, [pc, #380]	@ (80096ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	f200 80a6 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009534:	4a5e      	ldr	r2, [pc, #376]	@ (80096b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009536:	4293      	cmp	r3, r2
 8009538:	f000 8099 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 800953c:	4a5c      	ldr	r2, [pc, #368]	@ (80096b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f200 809e 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009544:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009548:	f000 8091 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 800954c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009550:	f200 8096 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009558:	f000 8089 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 800955c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009560:	f200 808e 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009568:	d03e      	beq.n	80095e8 <HAL_TIM_ConfigClockSource+0x124>
 800956a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800956e:	f200 8087 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009576:	f000 8086 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1c2>
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957e:	d87f      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009580:	2b70      	cmp	r3, #112	@ 0x70
 8009582:	d01a      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0xf6>
 8009584:	2b70      	cmp	r3, #112	@ 0x70
 8009586:	d87b      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009588:	2b60      	cmp	r3, #96	@ 0x60
 800958a:	d050      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x16a>
 800958c:	2b60      	cmp	r3, #96	@ 0x60
 800958e:	d877      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009590:	2b50      	cmp	r3, #80	@ 0x50
 8009592:	d03c      	beq.n	800960e <HAL_TIM_ConfigClockSource+0x14a>
 8009594:	2b50      	cmp	r3, #80	@ 0x50
 8009596:	d873      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 8009598:	2b40      	cmp	r3, #64	@ 0x40
 800959a:	d058      	beq.n	800964e <HAL_TIM_ConfigClockSource+0x18a>
 800959c:	2b40      	cmp	r3, #64	@ 0x40
 800959e:	d86f      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a0:	2b30      	cmp	r3, #48	@ 0x30
 80095a2:	d064      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 80095a4:	2b30      	cmp	r3, #48	@ 0x30
 80095a6:	d86b      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d060      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d867      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d05c      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d05a      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x1aa>
 80095b8:	e062      	b.n	8009680 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095ca:	f000 fc95 	bl	8009ef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	609a      	str	r2, [r3, #8]
      break;
 80095e6:	e04f      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095f8:	f000 fc7e 	bl	8009ef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800960a:	609a      	str	r2, [r3, #8]
      break;
 800960c:	e03c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800961a:	461a      	mov	r2, r3
 800961c:	f000 fbee 	bl	8009dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2150      	movs	r1, #80	@ 0x50
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fc48 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 800962c:	e02c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800963a:	461a      	mov	r2, r3
 800963c:	f000 fc0d 	bl	8009e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2160      	movs	r1, #96	@ 0x60
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fc38 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 800964c:	e01c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800965a:	461a      	mov	r2, r3
 800965c:	f000 fbce 	bl	8009dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2140      	movs	r1, #64	@ 0x40
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fc28 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 800966c:	e00c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f000 fc1f 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 800967e:	e003      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
      break;
 8009684:	e000      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	ffceff88 	.word	0xffceff88
 80096a8:	00100040 	.word	0x00100040
 80096ac:	00100030 	.word	0x00100030
 80096b0:	00100020 	.word	0x00100020

080096b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a46      	ldr	r2, [pc, #280]	@ (8009830 <TIM_Base_SetConfig+0x12c>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d013      	beq.n	8009744 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009722:	d00f      	beq.n	8009744 <TIM_Base_SetConfig+0x40>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a43      	ldr	r2, [pc, #268]	@ (8009834 <TIM_Base_SetConfig+0x130>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d00b      	beq.n	8009744 <TIM_Base_SetConfig+0x40>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a42      	ldr	r2, [pc, #264]	@ (8009838 <TIM_Base_SetConfig+0x134>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d007      	beq.n	8009744 <TIM_Base_SetConfig+0x40>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a41      	ldr	r2, [pc, #260]	@ (800983c <TIM_Base_SetConfig+0x138>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_Base_SetConfig+0x40>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a40      	ldr	r2, [pc, #256]	@ (8009840 <TIM_Base_SetConfig+0x13c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d108      	bne.n	8009756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a35      	ldr	r2, [pc, #212]	@ (8009830 <TIM_Base_SetConfig+0x12c>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d01f      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009764:	d01b      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a32      	ldr	r2, [pc, #200]	@ (8009834 <TIM_Base_SetConfig+0x130>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d017      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a31      	ldr	r2, [pc, #196]	@ (8009838 <TIM_Base_SetConfig+0x134>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d013      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a30      	ldr	r2, [pc, #192]	@ (800983c <TIM_Base_SetConfig+0x138>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d00f      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a2f      	ldr	r2, [pc, #188]	@ (8009840 <TIM_Base_SetConfig+0x13c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00b      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a2e      	ldr	r2, [pc, #184]	@ (8009844 <TIM_Base_SetConfig+0x140>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d007      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a2d      	ldr	r2, [pc, #180]	@ (8009848 <TIM_Base_SetConfig+0x144>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d003      	beq.n	800979e <TIM_Base_SetConfig+0x9a>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a2c      	ldr	r2, [pc, #176]	@ (800984c <TIM_Base_SetConfig+0x148>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d108      	bne.n	80097b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a16      	ldr	r2, [pc, #88]	@ (8009830 <TIM_Base_SetConfig+0x12c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d00f      	beq.n	80097fc <TIM_Base_SetConfig+0xf8>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a18      	ldr	r2, [pc, #96]	@ (8009840 <TIM_Base_SetConfig+0x13c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00b      	beq.n	80097fc <TIM_Base_SetConfig+0xf8>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a17      	ldr	r2, [pc, #92]	@ (8009844 <TIM_Base_SetConfig+0x140>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d007      	beq.n	80097fc <TIM_Base_SetConfig+0xf8>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a16      	ldr	r2, [pc, #88]	@ (8009848 <TIM_Base_SetConfig+0x144>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_Base_SetConfig+0xf8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a15      	ldr	r2, [pc, #84]	@ (800984c <TIM_Base_SetConfig+0x148>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d103      	bne.n	8009804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	691a      	ldr	r2, [r3, #16]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b01      	cmp	r3, #1
 8009814:	d105      	bne.n	8009822 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f023 0201 	bic.w	r2, r3, #1
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	611a      	str	r2, [r3, #16]
  }
}
 8009822:	bf00      	nop
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	40010000 	.word	0x40010000
 8009834:	40000400 	.word	0x40000400
 8009838:	40000800 	.word	0x40000800
 800983c:	40000c00 	.word	0x40000c00
 8009840:	40010400 	.word	0x40010400
 8009844:	40014000 	.word	0x40014000
 8009848:	40014400 	.word	0x40014400
 800984c:	40014800 	.word	0x40014800

08009850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	f023 0201 	bic.w	r2, r3, #1
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4b37      	ldr	r3, [pc, #220]	@ (8009958 <TIM_OC1_SetConfig+0x108>)
 800987c:	4013      	ands	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4313      	orrs	r3, r2
 8009890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 0302 	bic.w	r3, r3, #2
 8009898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a2d      	ldr	r2, [pc, #180]	@ (800995c <TIM_OC1_SetConfig+0x10c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00f      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <TIM_OC1_SetConfig+0x110>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00b      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009964 <TIM_OC1_SetConfig+0x114>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d007      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a2a      	ldr	r2, [pc, #168]	@ (8009968 <TIM_OC1_SetConfig+0x118>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d003      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a29      	ldr	r2, [pc, #164]	@ (800996c <TIM_OC1_SetConfig+0x11c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d10c      	bne.n	80098e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f023 0308 	bic.w	r3, r3, #8
 80098d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f023 0304 	bic.w	r3, r3, #4
 80098e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a1c      	ldr	r2, [pc, #112]	@ (800995c <TIM_OC1_SetConfig+0x10c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00f      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009960 <TIM_OC1_SetConfig+0x110>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00b      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009964 <TIM_OC1_SetConfig+0x114>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d007      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <TIM_OC1_SetConfig+0x118>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a18      	ldr	r2, [pc, #96]	@ (800996c <TIM_OC1_SetConfig+0x11c>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d111      	bne.n	8009932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800991c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4313      	orrs	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	621a      	str	r2, [r3, #32]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	fffeff8f 	.word	0xfffeff8f
 800995c:	40010000 	.word	0x40010000
 8009960:	40010400 	.word	0x40010400
 8009964:	40014000 	.word	0x40014000
 8009968:	40014400 	.word	0x40014400
 800996c:	40014800 	.word	0x40014800

08009970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	f023 0210 	bic.w	r2, r3, #16
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4b34      	ldr	r3, [pc, #208]	@ (8009a6c <TIM_OC2_SetConfig+0xfc>)
 800999c:	4013      	ands	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f023 0320 	bic.w	r3, r3, #32
 80099ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a29      	ldr	r2, [pc, #164]	@ (8009a70 <TIM_OC2_SetConfig+0x100>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_OC2_SetConfig+0x68>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a28      	ldr	r2, [pc, #160]	@ (8009a74 <TIM_OC2_SetConfig+0x104>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d10d      	bne.n	80099f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a70 <TIM_OC2_SetConfig+0x100>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00f      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009a74 <TIM_OC2_SetConfig+0x104>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00b      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1c      	ldr	r2, [pc, #112]	@ (8009a78 <TIM_OC2_SetConfig+0x108>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d007      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a7c <TIM_OC2_SetConfig+0x10c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d003      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a1a      	ldr	r2, [pc, #104]	@ (8009a80 <TIM_OC2_SetConfig+0x110>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d113      	bne.n	8009a44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	621a      	str	r2, [r3, #32]
}
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	feff8fff 	.word	0xfeff8fff
 8009a70:	40010000 	.word	0x40010000
 8009a74:	40010400 	.word	0x40010400
 8009a78:	40014000 	.word	0x40014000
 8009a7c:	40014400 	.word	0x40014400
 8009a80:	40014800 	.word	0x40014800

08009a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4b33      	ldr	r3, [pc, #204]	@ (8009b7c <TIM_OC3_SetConfig+0xf8>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a28      	ldr	r2, [pc, #160]	@ (8009b80 <TIM_OC3_SetConfig+0xfc>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_OC3_SetConfig+0x66>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a27      	ldr	r2, [pc, #156]	@ (8009b84 <TIM_OC3_SetConfig+0x100>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d10d      	bne.n	8009b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	@ (8009b80 <TIM_OC3_SetConfig+0xfc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00f      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a1c      	ldr	r2, [pc, #112]	@ (8009b84 <TIM_OC3_SetConfig+0x100>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1b      	ldr	r2, [pc, #108]	@ (8009b88 <TIM_OC3_SetConfig+0x104>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a1a      	ldr	r2, [pc, #104]	@ (8009b8c <TIM_OC3_SetConfig+0x108>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a19      	ldr	r2, [pc, #100]	@ (8009b90 <TIM_OC3_SetConfig+0x10c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d113      	bne.n	8009b56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	621a      	str	r2, [r3, #32]
}
 8009b70:	bf00      	nop
 8009b72:	371c      	adds	r7, #28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	fffeff8f 	.word	0xfffeff8f
 8009b80:	40010000 	.word	0x40010000
 8009b84:	40010400 	.word	0x40010400
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40014400 	.word	0x40014400
 8009b90:	40014800 	.word	0x40014800

08009b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4b24      	ldr	r3, [pc, #144]	@ (8009c50 <TIM_OC4_SetConfig+0xbc>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	021b      	lsls	r3, r3, #8
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	031b      	lsls	r3, r3, #12
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a19      	ldr	r2, [pc, #100]	@ (8009c54 <TIM_OC4_SetConfig+0xc0>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00f      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	@ (8009c58 <TIM_OC4_SetConfig+0xc4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a17      	ldr	r2, [pc, #92]	@ (8009c5c <TIM_OC4_SetConfig+0xc8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d007      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a16      	ldr	r2, [pc, #88]	@ (8009c60 <TIM_OC4_SetConfig+0xcc>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <TIM_OC4_SetConfig+0xd0>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d109      	bne.n	8009c28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	019b      	lsls	r3, r3, #6
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	621a      	str	r2, [r3, #32]
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	feff8fff 	.word	0xfeff8fff
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40010400 	.word	0x40010400
 8009c5c:	40014000 	.word	0x40014000
 8009c60:	40014400 	.word	0x40014400
 8009c64:	40014800 	.word	0x40014800

08009c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4b21      	ldr	r3, [pc, #132]	@ (8009d18 <TIM_OC5_SetConfig+0xb0>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a18      	ldr	r2, [pc, #96]	@ (8009d1c <TIM_OC5_SetConfig+0xb4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00f      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a17      	ldr	r2, [pc, #92]	@ (8009d20 <TIM_OC5_SetConfig+0xb8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a16      	ldr	r2, [pc, #88]	@ (8009d24 <TIM_OC5_SetConfig+0xbc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a15      	ldr	r2, [pc, #84]	@ (8009d28 <TIM_OC5_SetConfig+0xc0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a14      	ldr	r2, [pc, #80]	@ (8009d2c <TIM_OC5_SetConfig+0xc4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d109      	bne.n	8009cf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	621a      	str	r2, [r3, #32]
}
 8009d0c:	bf00      	nop
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	fffeff8f 	.word	0xfffeff8f
 8009d1c:	40010000 	.word	0x40010000
 8009d20:	40010400 	.word	0x40010400
 8009d24:	40014000 	.word	0x40014000
 8009d28:	40014400 	.word	0x40014400
 8009d2c:	40014800 	.word	0x40014800

08009d30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4b22      	ldr	r3, [pc, #136]	@ (8009de4 <TIM_OC6_SetConfig+0xb4>)
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	051b      	lsls	r3, r3, #20
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a19      	ldr	r2, [pc, #100]	@ (8009de8 <TIM_OC6_SetConfig+0xb8>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00f      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a18      	ldr	r2, [pc, #96]	@ (8009dec <TIM_OC6_SetConfig+0xbc>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d00b      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a17      	ldr	r2, [pc, #92]	@ (8009df0 <TIM_OC6_SetConfig+0xc0>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d007      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a16      	ldr	r2, [pc, #88]	@ (8009df4 <TIM_OC6_SetConfig+0xc4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d003      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a15      	ldr	r2, [pc, #84]	@ (8009df8 <TIM_OC6_SetConfig+0xc8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d109      	bne.n	8009dbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	029b      	lsls	r3, r3, #10
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	feff8fff 	.word	0xfeff8fff
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400
 8009df0:	40014000 	.word	0x40014000
 8009df4:	40014400 	.word	0x40014400
 8009df8:	40014800 	.word	0x40014800

08009dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f023 0201 	bic.w	r2, r3, #1
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f023 030a 	bic.w	r3, r3, #10
 8009e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	621a      	str	r2, [r3, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	f023 0210 	bic.w	r2, r3, #16
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	031b      	lsls	r3, r3, #12
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	621a      	str	r2, [r3, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4b09      	ldr	r3, [pc, #36]	@ (8009ef4 <TIM_ITRx_SetConfig+0x38>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f043 0307 	orr.w	r3, r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	609a      	str	r2, [r3, #8]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	ffcfff8f 	.word	0xffcfff8f

08009ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	609a      	str	r2, [r3, #8]
}
 8009f2c:	bf00      	nop
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	401a      	ands	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a1a      	ldr	r2, [r3, #32]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f003 031f 	and.w	r3, r3, #31
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f70:	431a      	orrs	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	621a      	str	r2, [r3, #32]
}
 8009f76:	bf00      	nop
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e06d      	b.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a30      	ldr	r2, [pc, #192]	@ (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d004      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a2f      	ldr	r2, [pc, #188]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d108      	bne.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a20      	ldr	r2, [pc, #128]	@ (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d022      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a00e:	d01d      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d018      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a1c      	ldr	r2, [pc, #112]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d013      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1a      	ldr	r2, [pc, #104]	@ (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00e      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a15      	ldr	r2, [pc, #84]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d009      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a16      	ldr	r2, [pc, #88]	@ (800a098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d004      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a15      	ldr	r2, [pc, #84]	@ (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d10c      	bne.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	40010000 	.word	0x40010000
 800a088:	40010400 	.word	0x40010400
 800a08c:	40000400 	.word	0x40000400
 800a090:	40000800 	.word	0x40000800
 800a094:	40000c00 	.word	0x40000c00
 800a098:	40001800 	.word	0x40001800
 800a09c:	40014000 	.word	0x40014000

0800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e065      	b.n	800a188 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a16      	ldr	r2, [pc, #88]	@ (800a194 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d004      	beq.n	800a14a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a14      	ldr	r2, [pc, #80]	@ (800a198 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d115      	bne.n	800a176 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	051b      	lsls	r3, r3, #20
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	40010000 	.word	0x40010000
 800a198:	40010400 	.word	0x40010400

0800a19c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e042      	b.n	800a270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7f8 fd2d 	bl	8002c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2224      	movs	r2, #36	@ 0x24
 800a206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 f9f8 	bl	800b618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fc8d 	bl	800ab48 <UART_SetConfig>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e01b      	b.n	800a270 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0201 	orr.w	r2, r2, #1
 800a266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 fa77 	bl	800b75c <UART_CheckIdleState>
 800a26e:	4603      	mov	r3, r0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	@ 0x28
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d17b      	bne.n	800a38a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <HAL_UART_Transmit+0x26>
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e074      	b.n	800a38c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2221      	movs	r2, #33	@ 0x21
 800a2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2b2:	f7f8 ffed 	bl	8003290 <HAL_GetTick>
 800a2b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	88fa      	ldrh	r2, [r7, #6]
 800a2bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d0:	d108      	bne.n	800a2e4 <HAL_UART_Transmit+0x6c>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d104      	bne.n	800a2e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	61bb      	str	r3, [r7, #24]
 800a2e2:	e003      	b.n	800a2ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2ec:	e030      	b.n	800a350 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2180      	movs	r1, #128	@ 0x80
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f001 fad9 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e03d      	b.n	800a38c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10b      	bne.n	800a32e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a324:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	3302      	adds	r3, #2
 800a32a:	61bb      	str	r3, [r7, #24]
 800a32c:	e007      	b.n	800a33e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	3301      	adds	r3, #1
 800a33c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a344:	b29b      	uxth	r3, r3
 800a346:	3b01      	subs	r3, #1
 800a348:	b29a      	uxth	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a356:	b29b      	uxth	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1c8      	bne.n	800a2ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2200      	movs	r2, #0
 800a364:	2140      	movs	r1, #64	@ 0x40
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f001 faa2 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d005      	beq.n	800a37e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2220      	movs	r2, #32
 800a376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e006      	b.n	800a38c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2220      	movs	r2, #32
 800a382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	e000      	b.n	800a38c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a38a:	2302      	movs	r3, #2
  }
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b0ba      	sub	sp, #232	@ 0xe8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a3be:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d11b      	bne.n	800a408 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d4:	f003 0320 	and.w	r3, r3, #32
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d015      	beq.n	800a408 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3e0:	f003 0320 	and.w	r3, r3, #32
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d105      	bne.n	800a3f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d009      	beq.n	800a408 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8377 	beq.w	800aaec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	4798      	blx	r3
      }
      return;
 800a406:	e371      	b.n	800aaec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8123 	beq.w	800a658 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a412:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a416:	4b8d      	ldr	r3, [pc, #564]	@ (800a64c <HAL_UART_IRQHandler+0x2b8>)
 800a418:	4013      	ands	r3, r2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d106      	bne.n	800a42c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a41e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a422:	4b8b      	ldr	r3, [pc, #556]	@ (800a650 <HAL_UART_IRQHandler+0x2bc>)
 800a424:	4013      	ands	r3, r2
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8116 	beq.w	800a658 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d011      	beq.n	800a45c <HAL_UART_IRQHandler+0xc8>
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00b      	beq.n	800a45c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2201      	movs	r2, #1
 800a44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a452:	f043 0201 	orr.w	r2, r3, #1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d011      	beq.n	800a48c <HAL_UART_IRQHandler+0xf8>
 800a468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2202      	movs	r2, #2
 800a47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a482:	f043 0204 	orr.w	r2, r3, #4
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d011      	beq.n	800a4bc <HAL_UART_IRQHandler+0x128>
 800a498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b2:	f043 0202 	orr.w	r2, r3, #2
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d017      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a4d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a4d8:	4b5c      	ldr	r3, [pc, #368]	@ (800a64c <HAL_UART_IRQHandler+0x2b8>)
 800a4da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ee:	f043 0208 	orr.w	r2, r3, #8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a500:	2b00      	cmp	r3, #0
 800a502:	d012      	beq.n	800a52a <HAL_UART_IRQHandler+0x196>
 800a504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a508:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00c      	beq.n	800a52a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 82dd 	beq.w	800aaf0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d013      	beq.n	800a56a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57e:	2b40      	cmp	r3, #64	@ 0x40
 800a580:	d005      	beq.n	800a58e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d054      	beq.n	800a638 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 f9fc 	bl	800b98c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a59e:	2b40      	cmp	r3, #64	@ 0x40
 800a5a0:	d146      	bne.n	800a630 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1d9      	bne.n	800a5a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d017      	beq.n	800a628 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <HAL_UART_IRQHandler+0x2c0>)
 800a600:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f9 faff 	bl	8003c0c <HAL_DMA_Abort_IT>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d019      	beq.n	800a648 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a622:	4610      	mov	r0, r2
 800a624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a626:	e00f      	b.n	800a648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa77 	bl	800ab1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62e:	e00b      	b.n	800a648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fa73 	bl	800ab1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a636:	e007      	b.n	800a648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fa6f 	bl	800ab1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a646:	e253      	b.n	800aaf0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a648:	bf00      	nop
    return;
 800a64a:	e251      	b.n	800aaf0 <HAL_UART_IRQHandler+0x75c>
 800a64c:	10000001 	.word	0x10000001
 800a650:	04000120 	.word	0x04000120
 800a654:	0800ba59 	.word	0x0800ba59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	f040 81e7 	bne.w	800aa30 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a666:	f003 0310 	and.w	r3, r3, #16
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 81e0 	beq.w	800aa30 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a674:	f003 0310 	and.w	r3, r3, #16
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 81d9 	beq.w	800aa30 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2210      	movs	r2, #16
 800a684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a690:	2b40      	cmp	r3, #64	@ 0x40
 800a692:	f040 8151 	bne.w	800a938 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a96      	ldr	r2, [pc, #600]	@ (800a8f8 <HAL_UART_IRQHandler+0x564>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d068      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a93      	ldr	r2, [pc, #588]	@ (800a8fc <HAL_UART_IRQHandler+0x568>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d061      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a91      	ldr	r2, [pc, #580]	@ (800a900 <HAL_UART_IRQHandler+0x56c>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d05a      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a8e      	ldr	r2, [pc, #568]	@ (800a904 <HAL_UART_IRQHandler+0x570>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d053      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a8c      	ldr	r2, [pc, #560]	@ (800a908 <HAL_UART_IRQHandler+0x574>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d04c      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a89      	ldr	r2, [pc, #548]	@ (800a90c <HAL_UART_IRQHandler+0x578>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d045      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a87      	ldr	r2, [pc, #540]	@ (800a910 <HAL_UART_IRQHandler+0x57c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d03e      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a84      	ldr	r2, [pc, #528]	@ (800a914 <HAL_UART_IRQHandler+0x580>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d037      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a82      	ldr	r2, [pc, #520]	@ (800a918 <HAL_UART_IRQHandler+0x584>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d030      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a7f      	ldr	r2, [pc, #508]	@ (800a91c <HAL_UART_IRQHandler+0x588>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d029      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a7d      	ldr	r2, [pc, #500]	@ (800a920 <HAL_UART_IRQHandler+0x58c>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d022      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a7a      	ldr	r2, [pc, #488]	@ (800a924 <HAL_UART_IRQHandler+0x590>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d01b      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a78      	ldr	r2, [pc, #480]	@ (800a928 <HAL_UART_IRQHandler+0x594>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d014      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a75      	ldr	r2, [pc, #468]	@ (800a92c <HAL_UART_IRQHandler+0x598>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00d      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a73      	ldr	r2, [pc, #460]	@ (800a930 <HAL_UART_IRQHandler+0x59c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d006      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a70      	ldr	r2, [pc, #448]	@ (800a934 <HAL_UART_IRQHandler+0x5a0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d106      	bne.n	800a784 <HAL_UART_IRQHandler+0x3f0>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	b29b      	uxth	r3, r3
 800a782:	e005      	b.n	800a790 <HAL_UART_IRQHandler+0x3fc>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 81ab 	beq.w	800aaf4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	f080 81a3 	bcs.w	800aaf4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c4:	f000 8087 	beq.w	800a8d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a7dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a7f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1da      	bne.n	800a7c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a824:	f023 0301 	bic.w	r3, r3, #1
 800a828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a83e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e1      	bne.n	800a812 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e3      	bne.n	800a84e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8a4:	f023 0310 	bic.w	r3, r3, #16
 800a8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e4      	bne.n	800a894 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7f8 fe7d 	bl	80035d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f91d 	bl	800ab30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8f6:	e0fd      	b.n	800aaf4 <HAL_UART_IRQHandler+0x760>
 800a8f8:	40020010 	.word	0x40020010
 800a8fc:	40020028 	.word	0x40020028
 800a900:	40020040 	.word	0x40020040
 800a904:	40020058 	.word	0x40020058
 800a908:	40020070 	.word	0x40020070
 800a90c:	40020088 	.word	0x40020088
 800a910:	400200a0 	.word	0x400200a0
 800a914:	400200b8 	.word	0x400200b8
 800a918:	40020410 	.word	0x40020410
 800a91c:	40020428 	.word	0x40020428
 800a920:	40020440 	.word	0x40020440
 800a924:	40020458 	.word	0x40020458
 800a928:	40020470 	.word	0x40020470
 800a92c:	40020488 	.word	0x40020488
 800a930:	400204a0 	.word	0x400204a0
 800a934:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a944:	b29b      	uxth	r3, r3
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 80cf 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a95a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80ca 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a986:	647b      	str	r3, [r7, #68]	@ 0x44
 800a988:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a98c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1e4      	bne.n	800a964 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	e853 3f00 	ldrex	r3, [r3]
 800a9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9aa:	6a3a      	ldr	r2, [r7, #32]
 800a9ac:	4b55      	ldr	r3, [pc, #340]	@ (800ab04 <HAL_UART_IRQHandler+0x770>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a9be:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e3      	bne.n	800a99a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0310 	bic.w	r3, r3, #16
 800a9fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	69b9      	ldr	r1, [r7, #24]
 800aa0e:	69fa      	ldr	r2, [r7, #28]
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	617b      	str	r3, [r7, #20]
   return(result);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e4      	bne.n	800a9e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f881 	bl	800ab30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa2e:	e063      	b.n	800aaf8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00e      	beq.n	800aa5a <HAL_UART_IRQHandler+0x6c6>
 800aa3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d008      	beq.n	800aa5a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aa50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 f841 	bl	800bada <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa58:	e051      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d014      	beq.n	800aa90 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d008      	beq.n	800aa90 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d03a      	beq.n	800aafc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
    }
    return;
 800aa8e:	e035      	b.n	800aafc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d009      	beq.n	800aab0 <HAL_UART_IRQHandler+0x71c>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 ffeb 	bl	800ba84 <UART_EndTransmit_IT>
    return;
 800aaae:	e026      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d009      	beq.n	800aad0 <HAL_UART_IRQHandler+0x73c>
 800aabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aac0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 f81a 	bl	800bb02 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aace:	e016      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d010      	beq.n	800aafe <HAL_UART_IRQHandler+0x76a>
 800aadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da0c      	bge.n	800aafe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f802 	bl	800baee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aaea:	e008      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
      return;
 800aaec:	bf00      	nop
 800aaee:	e006      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
    return;
 800aaf0:	bf00      	nop
 800aaf2:	e004      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
      return;
 800aaf4:	bf00      	nop
 800aaf6:	e002      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
      return;
 800aaf8:	bf00      	nop
 800aafa:	e000      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
    return;
 800aafc:	bf00      	nop
  }
}
 800aafe:	37e8      	adds	r7, #232	@ 0xe8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	effffffe 	.word	0xeffffffe

0800ab08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab4c:	b092      	sub	sp, #72	@ 0x48
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	431a      	orrs	r2, r3
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4bbe      	ldr	r3, [pc, #760]	@ (800ae70 <UART_SetConfig+0x328>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab80:	430b      	orrs	r3, r1
 800ab82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4ab3      	ldr	r2, [pc, #716]	@ (800ae74 <UART_SetConfig+0x32c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d004      	beq.n	800abb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abb0:	4313      	orrs	r3, r2
 800abb2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	4baf      	ldr	r3, [pc, #700]	@ (800ae78 <UART_SetConfig+0x330>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	6812      	ldr	r2, [r2, #0]
 800abc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abc4:	430b      	orrs	r3, r1
 800abc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abce:	f023 010f 	bic.w	r1, r3, #15
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4aa6      	ldr	r2, [pc, #664]	@ (800ae7c <UART_SetConfig+0x334>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d177      	bne.n	800acd8 <UART_SetConfig+0x190>
 800abe8:	4ba5      	ldr	r3, [pc, #660]	@ (800ae80 <UART_SetConfig+0x338>)
 800abea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abf0:	2b28      	cmp	r3, #40	@ 0x28
 800abf2:	d86d      	bhi.n	800acd0 <UART_SetConfig+0x188>
 800abf4:	a201      	add	r2, pc, #4	@ (adr r2, 800abfc <UART_SetConfig+0xb4>)
 800abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfa:	bf00      	nop
 800abfc:	0800aca1 	.word	0x0800aca1
 800ac00:	0800acd1 	.word	0x0800acd1
 800ac04:	0800acd1 	.word	0x0800acd1
 800ac08:	0800acd1 	.word	0x0800acd1
 800ac0c:	0800acd1 	.word	0x0800acd1
 800ac10:	0800acd1 	.word	0x0800acd1
 800ac14:	0800acd1 	.word	0x0800acd1
 800ac18:	0800acd1 	.word	0x0800acd1
 800ac1c:	0800aca9 	.word	0x0800aca9
 800ac20:	0800acd1 	.word	0x0800acd1
 800ac24:	0800acd1 	.word	0x0800acd1
 800ac28:	0800acd1 	.word	0x0800acd1
 800ac2c:	0800acd1 	.word	0x0800acd1
 800ac30:	0800acd1 	.word	0x0800acd1
 800ac34:	0800acd1 	.word	0x0800acd1
 800ac38:	0800acd1 	.word	0x0800acd1
 800ac3c:	0800acb1 	.word	0x0800acb1
 800ac40:	0800acd1 	.word	0x0800acd1
 800ac44:	0800acd1 	.word	0x0800acd1
 800ac48:	0800acd1 	.word	0x0800acd1
 800ac4c:	0800acd1 	.word	0x0800acd1
 800ac50:	0800acd1 	.word	0x0800acd1
 800ac54:	0800acd1 	.word	0x0800acd1
 800ac58:	0800acd1 	.word	0x0800acd1
 800ac5c:	0800acb9 	.word	0x0800acb9
 800ac60:	0800acd1 	.word	0x0800acd1
 800ac64:	0800acd1 	.word	0x0800acd1
 800ac68:	0800acd1 	.word	0x0800acd1
 800ac6c:	0800acd1 	.word	0x0800acd1
 800ac70:	0800acd1 	.word	0x0800acd1
 800ac74:	0800acd1 	.word	0x0800acd1
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800acc1 	.word	0x0800acc1
 800ac80:	0800acd1 	.word	0x0800acd1
 800ac84:	0800acd1 	.word	0x0800acd1
 800ac88:	0800acd1 	.word	0x0800acd1
 800ac8c:	0800acd1 	.word	0x0800acd1
 800ac90:	0800acd1 	.word	0x0800acd1
 800ac94:	0800acd1 	.word	0x0800acd1
 800ac98:	0800acd1 	.word	0x0800acd1
 800ac9c:	0800acc9 	.word	0x0800acc9
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e222      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e21e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e21a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e216      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acc0:	2320      	movs	r3, #32
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e212      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acc8:	2340      	movs	r3, #64	@ 0x40
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e20e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acd0:	2380      	movs	r3, #128	@ 0x80
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e20a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a69      	ldr	r2, [pc, #420]	@ (800ae84 <UART_SetConfig+0x33c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d130      	bne.n	800ad44 <UART_SetConfig+0x1fc>
 800ace2:	4b67      	ldr	r3, [pc, #412]	@ (800ae80 <UART_SetConfig+0x338>)
 800ace4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	2b05      	cmp	r3, #5
 800acec:	d826      	bhi.n	800ad3c <UART_SetConfig+0x1f4>
 800acee:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <UART_SetConfig+0x1ac>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad0d 	.word	0x0800ad0d
 800acf8:	0800ad15 	.word	0x0800ad15
 800acfc:	0800ad1d 	.word	0x0800ad1d
 800ad00:	0800ad25 	.word	0x0800ad25
 800ad04:	0800ad2d 	.word	0x0800ad2d
 800ad08:	0800ad35 	.word	0x0800ad35
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e1ec      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad14:	2304      	movs	r3, #4
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e1e8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e1e4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad24:	2310      	movs	r3, #16
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e1e0      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad2c:	2320      	movs	r3, #32
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e1dc      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad34:	2340      	movs	r3, #64	@ 0x40
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e1d8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad3c:	2380      	movs	r3, #128	@ 0x80
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e1d4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a4f      	ldr	r2, [pc, #316]	@ (800ae88 <UART_SetConfig+0x340>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d130      	bne.n	800adb0 <UART_SetConfig+0x268>
 800ad4e:	4b4c      	ldr	r3, [pc, #304]	@ (800ae80 <UART_SetConfig+0x338>)
 800ad50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad52:	f003 0307 	and.w	r3, r3, #7
 800ad56:	2b05      	cmp	r3, #5
 800ad58:	d826      	bhi.n	800ada8 <UART_SetConfig+0x260>
 800ad5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad60 <UART_SetConfig+0x218>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad79 	.word	0x0800ad79
 800ad64:	0800ad81 	.word	0x0800ad81
 800ad68:	0800ad89 	.word	0x0800ad89
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800ad99 	.word	0x0800ad99
 800ad74:	0800ada1 	.word	0x0800ada1
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e1b6      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad80:	2304      	movs	r3, #4
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e1b2      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad88:	2308      	movs	r3, #8
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e1ae      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad90:	2310      	movs	r3, #16
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e1aa      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e1a6      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ada0:	2340      	movs	r3, #64	@ 0x40
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e1a2      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ada8:	2380      	movs	r3, #128	@ 0x80
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e19e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a35      	ldr	r2, [pc, #212]	@ (800ae8c <UART_SetConfig+0x344>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d130      	bne.n	800ae1c <UART_SetConfig+0x2d4>
 800adba:	4b31      	ldr	r3, [pc, #196]	@ (800ae80 <UART_SetConfig+0x338>)
 800adbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	2b05      	cmp	r3, #5
 800adc4:	d826      	bhi.n	800ae14 <UART_SetConfig+0x2cc>
 800adc6:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <UART_SetConfig+0x284>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800ade5 	.word	0x0800ade5
 800add0:	0800aded 	.word	0x0800aded
 800add4:	0800adf5 	.word	0x0800adf5
 800add8:	0800adfd 	.word	0x0800adfd
 800addc:	0800ae05 	.word	0x0800ae05
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adea:	e180      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e17c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e178      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e174      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae04:	2320      	movs	r3, #32
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e170      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae0c:	2340      	movs	r3, #64	@ 0x40
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e16c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae14:	2380      	movs	r3, #128	@ 0x80
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e168      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a1b      	ldr	r2, [pc, #108]	@ (800ae90 <UART_SetConfig+0x348>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d142      	bne.n	800aeac <UART_SetConfig+0x364>
 800ae26:	4b16      	ldr	r3, [pc, #88]	@ (800ae80 <UART_SetConfig+0x338>)
 800ae28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d838      	bhi.n	800aea4 <UART_SetConfig+0x35c>
 800ae32:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0x2f0>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae59 	.word	0x0800ae59
 800ae40:	0800ae61 	.word	0x0800ae61
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae95 	.word	0x0800ae95
 800ae4c:	0800ae9d 	.word	0x0800ae9d
 800ae50:	2300      	movs	r3, #0
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e14a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae58:	2304      	movs	r3, #4
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e146      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae60:	2308      	movs	r3, #8
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e142      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e13e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae70:	cfff69f3 	.word	0xcfff69f3
 800ae74:	58000c00 	.word	0x58000c00
 800ae78:	11fff4ff 	.word	0x11fff4ff
 800ae7c:	40011000 	.word	0x40011000
 800ae80:	58024400 	.word	0x58024400
 800ae84:	40004400 	.word	0x40004400
 800ae88:	40004800 	.word	0x40004800
 800ae8c:	40004c00 	.word	0x40004c00
 800ae90:	40005000 	.word	0x40005000
 800ae94:	2320      	movs	r3, #32
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9a:	e128      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae9c:	2340      	movs	r3, #64	@ 0x40
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea2:	e124      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aea4:	2380      	movs	r3, #128	@ 0x80
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e120      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4acb      	ldr	r2, [pc, #812]	@ (800b1e0 <UART_SetConfig+0x698>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d176      	bne.n	800afa4 <UART_SetConfig+0x45c>
 800aeb6:	4bcb      	ldr	r3, [pc, #812]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aebe:	2b28      	cmp	r3, #40	@ 0x28
 800aec0:	d86c      	bhi.n	800af9c <UART_SetConfig+0x454>
 800aec2:	a201      	add	r2, pc, #4	@ (adr r2, 800aec8 <UART_SetConfig+0x380>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800af6d 	.word	0x0800af6d
 800aecc:	0800af9d 	.word	0x0800af9d
 800aed0:	0800af9d 	.word	0x0800af9d
 800aed4:	0800af9d 	.word	0x0800af9d
 800aed8:	0800af9d 	.word	0x0800af9d
 800aedc:	0800af9d 	.word	0x0800af9d
 800aee0:	0800af9d 	.word	0x0800af9d
 800aee4:	0800af9d 	.word	0x0800af9d
 800aee8:	0800af75 	.word	0x0800af75
 800aeec:	0800af9d 	.word	0x0800af9d
 800aef0:	0800af9d 	.word	0x0800af9d
 800aef4:	0800af9d 	.word	0x0800af9d
 800aef8:	0800af9d 	.word	0x0800af9d
 800aefc:	0800af9d 	.word	0x0800af9d
 800af00:	0800af9d 	.word	0x0800af9d
 800af04:	0800af9d 	.word	0x0800af9d
 800af08:	0800af7d 	.word	0x0800af7d
 800af0c:	0800af9d 	.word	0x0800af9d
 800af10:	0800af9d 	.word	0x0800af9d
 800af14:	0800af9d 	.word	0x0800af9d
 800af18:	0800af9d 	.word	0x0800af9d
 800af1c:	0800af9d 	.word	0x0800af9d
 800af20:	0800af9d 	.word	0x0800af9d
 800af24:	0800af9d 	.word	0x0800af9d
 800af28:	0800af85 	.word	0x0800af85
 800af2c:	0800af9d 	.word	0x0800af9d
 800af30:	0800af9d 	.word	0x0800af9d
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af9d 	.word	0x0800af9d
 800af3c:	0800af9d 	.word	0x0800af9d
 800af40:	0800af9d 	.word	0x0800af9d
 800af44:	0800af9d 	.word	0x0800af9d
 800af48:	0800af8d 	.word	0x0800af8d
 800af4c:	0800af9d 	.word	0x0800af9d
 800af50:	0800af9d 	.word	0x0800af9d
 800af54:	0800af9d 	.word	0x0800af9d
 800af58:	0800af9d 	.word	0x0800af9d
 800af5c:	0800af9d 	.word	0x0800af9d
 800af60:	0800af9d 	.word	0x0800af9d
 800af64:	0800af9d 	.word	0x0800af9d
 800af68:	0800af95 	.word	0x0800af95
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af72:	e0bc      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af74:	2304      	movs	r3, #4
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7a:	e0b8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af7c:	2308      	movs	r3, #8
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af82:	e0b4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af84:	2310      	movs	r3, #16
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e0b0      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af8c:	2320      	movs	r3, #32
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af92:	e0ac      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af94:	2340      	movs	r3, #64	@ 0x40
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e0a8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af9c:	2380      	movs	r3, #128	@ 0x80
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e0a4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a8f      	ldr	r2, [pc, #572]	@ (800b1e8 <UART_SetConfig+0x6a0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d130      	bne.n	800b010 <UART_SetConfig+0x4c8>
 800afae:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800afb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	d826      	bhi.n	800b008 <UART_SetConfig+0x4c0>
 800afba:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <UART_SetConfig+0x478>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd9 	.word	0x0800afd9
 800afc4:	0800afe1 	.word	0x0800afe1
 800afc8:	0800afe9 	.word	0x0800afe9
 800afcc:	0800aff1 	.word	0x0800aff1
 800afd0:	0800aff9 	.word	0x0800aff9
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afde:	e086      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800afe0:	2304      	movs	r3, #4
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e082      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800afe8:	2308      	movs	r3, #8
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e07e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aff0:	2310      	movs	r3, #16
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e07a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aff8:	2320      	movs	r3, #32
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e076      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b000:	2340      	movs	r3, #64	@ 0x40
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e072      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b008:	2380      	movs	r3, #128	@ 0x80
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e06e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a75      	ldr	r2, [pc, #468]	@ (800b1ec <UART_SetConfig+0x6a4>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d130      	bne.n	800b07c <UART_SetConfig+0x534>
 800b01a:	4b72      	ldr	r3, [pc, #456]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	2b05      	cmp	r3, #5
 800b024:	d826      	bhi.n	800b074 <UART_SetConfig+0x52c>
 800b026:	a201      	add	r2, pc, #4	@ (adr r2, 800b02c <UART_SetConfig+0x4e4>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b04d 	.word	0x0800b04d
 800b034:	0800b055 	.word	0x0800b055
 800b038:	0800b05d 	.word	0x0800b05d
 800b03c:	0800b065 	.word	0x0800b065
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	2300      	movs	r3, #0
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04a:	e050      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b052:	e04c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05a:	e048      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b062:	e044      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b064:	2320      	movs	r3, #32
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e040      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b06c:	2340      	movs	r3, #64	@ 0x40
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e03c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b074:	2380      	movs	r3, #128	@ 0x80
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07a:	e038      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a5b      	ldr	r2, [pc, #364]	@ (800b1f0 <UART_SetConfig+0x6a8>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d130      	bne.n	800b0e8 <UART_SetConfig+0x5a0>
 800b086:	4b57      	ldr	r3, [pc, #348]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d826      	bhi.n	800b0e0 <UART_SetConfig+0x598>
 800b092:	a201      	add	r2, pc, #4	@ (adr r2, 800b098 <UART_SetConfig+0x550>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b9 	.word	0x0800b0b9
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0d1 	.word	0x0800b0d1
 800b0ac:	0800b0d9 	.word	0x0800b0d9
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b6:	e01a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e016      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e012      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e00e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e00a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0d8:	2340      	movs	r3, #64	@ 0x40
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e006      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0e0:	2380      	movs	r3, #128	@ 0x80
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e002      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0e8:	2380      	movs	r3, #128	@ 0x80
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1f0 <UART_SetConfig+0x6a8>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	f040 80f8 	bne.w	800b2ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	dc46      	bgt.n	800b190 <UART_SetConfig+0x648>
 800b102:	2b02      	cmp	r3, #2
 800b104:	f2c0 8082 	blt.w	800b20c <UART_SetConfig+0x6c4>
 800b108:	3b02      	subs	r3, #2
 800b10a:	2b1e      	cmp	r3, #30
 800b10c:	d87e      	bhi.n	800b20c <UART_SetConfig+0x6c4>
 800b10e:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <UART_SetConfig+0x5cc>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b197 	.word	0x0800b197
 800b118:	0800b20d 	.word	0x0800b20d
 800b11c:	0800b19f 	.word	0x0800b19f
 800b120:	0800b20d 	.word	0x0800b20d
 800b124:	0800b20d 	.word	0x0800b20d
 800b128:	0800b20d 	.word	0x0800b20d
 800b12c:	0800b1af 	.word	0x0800b1af
 800b130:	0800b20d 	.word	0x0800b20d
 800b134:	0800b20d 	.word	0x0800b20d
 800b138:	0800b20d 	.word	0x0800b20d
 800b13c:	0800b20d 	.word	0x0800b20d
 800b140:	0800b20d 	.word	0x0800b20d
 800b144:	0800b20d 	.word	0x0800b20d
 800b148:	0800b20d 	.word	0x0800b20d
 800b14c:	0800b1bf 	.word	0x0800b1bf
 800b150:	0800b20d 	.word	0x0800b20d
 800b154:	0800b20d 	.word	0x0800b20d
 800b158:	0800b20d 	.word	0x0800b20d
 800b15c:	0800b20d 	.word	0x0800b20d
 800b160:	0800b20d 	.word	0x0800b20d
 800b164:	0800b20d 	.word	0x0800b20d
 800b168:	0800b20d 	.word	0x0800b20d
 800b16c:	0800b20d 	.word	0x0800b20d
 800b170:	0800b20d 	.word	0x0800b20d
 800b174:	0800b20d 	.word	0x0800b20d
 800b178:	0800b20d 	.word	0x0800b20d
 800b17c:	0800b20d 	.word	0x0800b20d
 800b180:	0800b20d 	.word	0x0800b20d
 800b184:	0800b20d 	.word	0x0800b20d
 800b188:	0800b20d 	.word	0x0800b20d
 800b18c:	0800b1ff 	.word	0x0800b1ff
 800b190:	2b40      	cmp	r3, #64	@ 0x40
 800b192:	d037      	beq.n	800b204 <UART_SetConfig+0x6bc>
 800b194:	e03a      	b.n	800b20c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b196:	f7fd f8b1 	bl	80082fc <HAL_RCCEx_GetD3PCLK1Freq>
 800b19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b19c:	e03c      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fd f8c0 	bl	8008328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ac:	e034      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ae:	f107 0318 	add.w	r3, r7, #24
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fd fa0c 	bl	80085d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1bc:	e02c      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1be:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d016      	beq.n	800b1f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1ca:	4b06      	ldr	r3, [pc, #24]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	08db      	lsrs	r3, r3, #3
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	4a07      	ldr	r2, [pc, #28]	@ (800b1f4 <UART_SetConfig+0x6ac>)
 800b1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1dc:	e01c      	b.n	800b218 <UART_SetConfig+0x6d0>
 800b1de:	bf00      	nop
 800b1e0:	40011400 	.word	0x40011400
 800b1e4:	58024400 	.word	0x58024400
 800b1e8:	40007800 	.word	0x40007800
 800b1ec:	40007c00 	.word	0x40007c00
 800b1f0:	58000c00 	.word	0x58000c00
 800b1f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b1f8:	4b9d      	ldr	r3, [pc, #628]	@ (800b470 <UART_SetConfig+0x928>)
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fc:	e00c      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1fe:	4b9d      	ldr	r3, [pc, #628]	@ (800b474 <UART_SetConfig+0x92c>)
 800b200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b202:	e009      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20a:	e005      	b.n	800b218 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b216:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 81de 	beq.w	800b5dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b224:	4a94      	ldr	r2, [pc, #592]	@ (800b478 <UART_SetConfig+0x930>)
 800b226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b232:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	4613      	mov	r3, r2
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	4413      	add	r3, r2
 800b23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b240:	429a      	cmp	r2, r3
 800b242:	d305      	bcc.n	800b250 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b24a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b256:	e1c1      	b.n	800b5dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2200      	movs	r2, #0
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	60fa      	str	r2, [r7, #12]
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b264:	4a84      	ldr	r2, [pc, #528]	@ (800b478 <UART_SetConfig+0x930>)
 800b266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	2200      	movs	r2, #0
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b27a:	f7f5 f889 	bl	8000390 <__aeabi_uldivmod>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4610      	mov	r0, r2
 800b284:	4619      	mov	r1, r3
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	f04f 0300 	mov.w	r3, #0
 800b28e:	020b      	lsls	r3, r1, #8
 800b290:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b294:	0202      	lsls	r2, r0, #8
 800b296:	6979      	ldr	r1, [r7, #20]
 800b298:	6849      	ldr	r1, [r1, #4]
 800b29a:	0849      	lsrs	r1, r1, #1
 800b29c:	2000      	movs	r0, #0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	eb12 0804 	adds.w	r8, r2, r4
 800b2a6:	eb43 0905 	adc.w	r9, r3, r5
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	469a      	mov	sl, r3
 800b2b2:	4693      	mov	fp, r2
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	f7f5 f868 	bl	8000390 <__aeabi_uldivmod>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ce:	d308      	bcc.n	800b2e2 <UART_SetConfig+0x79a>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2d6:	d204      	bcs.n	800b2e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2de:	60da      	str	r2, [r3, #12]
 800b2e0:	e17c      	b.n	800b5dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2e8:	e178      	b.n	800b5dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2f2:	f040 80c5 	bne.w	800b480 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b2f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	dc48      	bgt.n	800b390 <UART_SetConfig+0x848>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	db7b      	blt.n	800b3fa <UART_SetConfig+0x8b2>
 800b302:	2b20      	cmp	r3, #32
 800b304:	d879      	bhi.n	800b3fa <UART_SetConfig+0x8b2>
 800b306:	a201      	add	r2, pc, #4	@ (adr r2, 800b30c <UART_SetConfig+0x7c4>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b397 	.word	0x0800b397
 800b310:	0800b39f 	.word	0x0800b39f
 800b314:	0800b3fb 	.word	0x0800b3fb
 800b318:	0800b3fb 	.word	0x0800b3fb
 800b31c:	0800b3a7 	.word	0x0800b3a7
 800b320:	0800b3fb 	.word	0x0800b3fb
 800b324:	0800b3fb 	.word	0x0800b3fb
 800b328:	0800b3fb 	.word	0x0800b3fb
 800b32c:	0800b3b7 	.word	0x0800b3b7
 800b330:	0800b3fb 	.word	0x0800b3fb
 800b334:	0800b3fb 	.word	0x0800b3fb
 800b338:	0800b3fb 	.word	0x0800b3fb
 800b33c:	0800b3fb 	.word	0x0800b3fb
 800b340:	0800b3fb 	.word	0x0800b3fb
 800b344:	0800b3fb 	.word	0x0800b3fb
 800b348:	0800b3fb 	.word	0x0800b3fb
 800b34c:	0800b3c7 	.word	0x0800b3c7
 800b350:	0800b3fb 	.word	0x0800b3fb
 800b354:	0800b3fb 	.word	0x0800b3fb
 800b358:	0800b3fb 	.word	0x0800b3fb
 800b35c:	0800b3fb 	.word	0x0800b3fb
 800b360:	0800b3fb 	.word	0x0800b3fb
 800b364:	0800b3fb 	.word	0x0800b3fb
 800b368:	0800b3fb 	.word	0x0800b3fb
 800b36c:	0800b3fb 	.word	0x0800b3fb
 800b370:	0800b3fb 	.word	0x0800b3fb
 800b374:	0800b3fb 	.word	0x0800b3fb
 800b378:	0800b3fb 	.word	0x0800b3fb
 800b37c:	0800b3fb 	.word	0x0800b3fb
 800b380:	0800b3fb 	.word	0x0800b3fb
 800b384:	0800b3fb 	.word	0x0800b3fb
 800b388:	0800b3fb 	.word	0x0800b3fb
 800b38c:	0800b3ed 	.word	0x0800b3ed
 800b390:	2b40      	cmp	r3, #64	@ 0x40
 800b392:	d02e      	beq.n	800b3f2 <UART_SetConfig+0x8aa>
 800b394:	e031      	b.n	800b3fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b396:	f7fb fd7b 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 800b39a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b39c:	e033      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b39e:	f7fb fd8d 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 800b3a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3a4:	e02f      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fc ffbc 	bl	8008328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b4:	e027      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3b6:	f107 0318 	add.w	r3, r7, #24
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fd f908 	bl	80085d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c4:	e01f      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b47c <UART_SetConfig+0x934>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b47c <UART_SetConfig+0x934>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	08db      	lsrs	r3, r3, #3
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	4a24      	ldr	r2, [pc, #144]	@ (800b470 <UART_SetConfig+0x928>)
 800b3de:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3e4:	e00f      	b.n	800b406 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3e6:	4b22      	ldr	r3, [pc, #136]	@ (800b470 <UART_SetConfig+0x928>)
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ea:	e00c      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3ec:	4b21      	ldr	r3, [pc, #132]	@ (800b474 <UART_SetConfig+0x92c>)
 800b3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f0:	e009      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f8:	e005      	b.n	800b406 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 80e7 	beq.w	800b5dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b412:	4a19      	ldr	r2, [pc, #100]	@ (800b478 <UART_SetConfig+0x930>)
 800b414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b418:	461a      	mov	r2, r3
 800b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b420:	005a      	lsls	r2, r3, #1
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	085b      	lsrs	r3, r3, #1
 800b428:	441a      	add	r2, r3
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b432:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d916      	bls.n	800b468 <UART_SetConfig+0x920>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b440:	d212      	bcs.n	800b468 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	b29b      	uxth	r3, r3
 800b446:	f023 030f 	bic.w	r3, r3, #15
 800b44a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	085b      	lsrs	r3, r3, #1
 800b450:	b29b      	uxth	r3, r3
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	b29a      	uxth	r2, r3
 800b458:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b45a:	4313      	orrs	r3, r2
 800b45c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	e0b9      	b.n	800b5dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b46e:	e0b5      	b.n	800b5dc <UART_SetConfig+0xa94>
 800b470:	03d09000 	.word	0x03d09000
 800b474:	003d0900 	.word	0x003d0900
 800b478:	0800f5a0 	.word	0x0800f5a0
 800b47c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b480:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b484:	2b20      	cmp	r3, #32
 800b486:	dc49      	bgt.n	800b51c <UART_SetConfig+0x9d4>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	db7c      	blt.n	800b586 <UART_SetConfig+0xa3e>
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	d87a      	bhi.n	800b586 <UART_SetConfig+0xa3e>
 800b490:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <UART_SetConfig+0x950>)
 800b492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b496:	bf00      	nop
 800b498:	0800b523 	.word	0x0800b523
 800b49c:	0800b52b 	.word	0x0800b52b
 800b4a0:	0800b587 	.word	0x0800b587
 800b4a4:	0800b587 	.word	0x0800b587
 800b4a8:	0800b533 	.word	0x0800b533
 800b4ac:	0800b587 	.word	0x0800b587
 800b4b0:	0800b587 	.word	0x0800b587
 800b4b4:	0800b587 	.word	0x0800b587
 800b4b8:	0800b543 	.word	0x0800b543
 800b4bc:	0800b587 	.word	0x0800b587
 800b4c0:	0800b587 	.word	0x0800b587
 800b4c4:	0800b587 	.word	0x0800b587
 800b4c8:	0800b587 	.word	0x0800b587
 800b4cc:	0800b587 	.word	0x0800b587
 800b4d0:	0800b587 	.word	0x0800b587
 800b4d4:	0800b587 	.word	0x0800b587
 800b4d8:	0800b553 	.word	0x0800b553
 800b4dc:	0800b587 	.word	0x0800b587
 800b4e0:	0800b587 	.word	0x0800b587
 800b4e4:	0800b587 	.word	0x0800b587
 800b4e8:	0800b587 	.word	0x0800b587
 800b4ec:	0800b587 	.word	0x0800b587
 800b4f0:	0800b587 	.word	0x0800b587
 800b4f4:	0800b587 	.word	0x0800b587
 800b4f8:	0800b587 	.word	0x0800b587
 800b4fc:	0800b587 	.word	0x0800b587
 800b500:	0800b587 	.word	0x0800b587
 800b504:	0800b587 	.word	0x0800b587
 800b508:	0800b587 	.word	0x0800b587
 800b50c:	0800b587 	.word	0x0800b587
 800b510:	0800b587 	.word	0x0800b587
 800b514:	0800b587 	.word	0x0800b587
 800b518:	0800b579 	.word	0x0800b579
 800b51c:	2b40      	cmp	r3, #64	@ 0x40
 800b51e:	d02e      	beq.n	800b57e <UART_SetConfig+0xa36>
 800b520:	e031      	b.n	800b586 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b522:	f7fb fcb5 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 800b526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b528:	e033      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b52a:	f7fb fcc7 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 800b52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b530:	e02f      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b536:	4618      	mov	r0, r3
 800b538:	f7fc fef6 	bl	8008328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b540:	e027      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b542:	f107 0318 	add.w	r3, r7, #24
 800b546:	4618      	mov	r0, r3
 800b548:	f7fd f842 	bl	80085d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b550:	e01f      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b552:	4b2d      	ldr	r3, [pc, #180]	@ (800b608 <UART_SetConfig+0xac0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 0320 	and.w	r3, r3, #32
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d009      	beq.n	800b572 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b55e:	4b2a      	ldr	r3, [pc, #168]	@ (800b608 <UART_SetConfig+0xac0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	08db      	lsrs	r3, r3, #3
 800b564:	f003 0303 	and.w	r3, r3, #3
 800b568:	4a28      	ldr	r2, [pc, #160]	@ (800b60c <UART_SetConfig+0xac4>)
 800b56a:	fa22 f303 	lsr.w	r3, r2, r3
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b570:	e00f      	b.n	800b592 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b572:	4b26      	ldr	r3, [pc, #152]	@ (800b60c <UART_SetConfig+0xac4>)
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b576:	e00c      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b578:	4b25      	ldr	r3, [pc, #148]	@ (800b610 <UART_SetConfig+0xac8>)
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57c:	e009      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b584:	e005      	b.n	800b592 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b590:	bf00      	nop
    }

    if (pclk != 0U)
 800b592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b594:	2b00      	cmp	r3, #0
 800b596:	d021      	beq.n	800b5dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59c:	4a1d      	ldr	r2, [pc, #116]	@ (800b614 <UART_SetConfig+0xacc>)
 800b59e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	085b      	lsrs	r3, r3, #1
 800b5b0:	441a      	add	r2, r3
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	2b0f      	cmp	r3, #15
 800b5c0:	d909      	bls.n	800b5d6 <UART_SetConfig+0xa8e>
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5c8:	d205      	bcs.n	800b5d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	60da      	str	r2, [r3, #12]
 800b5d4:	e002      	b.n	800b5dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3748      	adds	r7, #72	@ 0x48
 800b600:	46bd      	mov	sp, r7
 800b602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b606:	bf00      	nop
 800b608:	58024400 	.word	0x58024400
 800b60c:	03d09000 	.word	0x03d09000
 800b610:	003d0900 	.word	0x003d0900
 800b614:	0800f5a0 	.word	0x0800f5a0

0800b618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b624:	f003 0308 	and.w	r3, r3, #8
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68a:	f003 0304 	and.w	r3, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00a      	beq.n	800b6a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	430a      	orrs	r2, r1
 800b6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ac:	f003 0310 	and.w	r3, r3, #16
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01a      	beq.n	800b72e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b716:	d10a      	bne.n	800b72e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	605a      	str	r2, [r3, #4]
  }
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b098      	sub	sp, #96	@ 0x60
 800b760:	af02      	add	r7, sp, #8
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b76c:	f7f7 fd90 	bl	8003290 <HAL_GetTick>
 800b770:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0308 	and.w	r3, r3, #8
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d12f      	bne.n	800b7e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b788:	2200      	movs	r2, #0
 800b78a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f88e 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d022      	beq.n	800b7e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a2:	e853 3f00 	ldrex	r3, [r3]
 800b7a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7c0:	e841 2300 	strex	r3, r2, [r1]
 800b7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e6      	bne.n	800b79a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e063      	b.n	800b8a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 0304 	and.w	r3, r3, #4
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d149      	bne.n	800b882 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f857 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d03c      	beq.n	800b882 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	623b      	str	r3, [r7, #32]
   return(result);
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b81c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b826:	633b      	str	r3, [r7, #48]	@ 0x30
 800b828:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b82c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e6      	bne.n	800b808 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3308      	adds	r3, #8
 800b840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	e853 3f00 	ldrex	r3, [r3]
 800b848:	60fb      	str	r3, [r7, #12]
   return(result);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b85a:	61fa      	str	r2, [r7, #28]
 800b85c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85e:	69b9      	ldr	r1, [r7, #24]
 800b860:	69fa      	ldr	r2, [r7, #28]
 800b862:	e841 2300 	strex	r3, r2, [r1]
 800b866:	617b      	str	r3, [r7, #20]
   return(result);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1e5      	bne.n	800b83a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2220      	movs	r2, #32
 800b872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e012      	b.n	800b8a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2220      	movs	r2, #32
 800b886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3758      	adds	r7, #88	@ 0x58
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c0:	e04f      	b.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c8:	d04b      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ca:	f7f7 fce1 	bl	8003290 <HAL_GetTick>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d302      	bcc.n	800b8e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e04e      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d037      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b80      	cmp	r3, #128	@ 0x80
 800b8f6:	d034      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b40      	cmp	r3, #64	@ 0x40
 800b8fc:	d031      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	f003 0308 	and.w	r3, r3, #8
 800b908:	2b08      	cmp	r3, #8
 800b90a:	d110      	bne.n	800b92e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2208      	movs	r2, #8
 800b912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f839 	bl	800b98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2208      	movs	r2, #8
 800b91e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e029      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69db      	ldr	r3, [r3, #28]
 800b934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b93c:	d111      	bne.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 f81f 	bl	800b98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2220      	movs	r2, #32
 800b952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b95e:	2303      	movs	r3, #3
 800b960:	e00f      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69da      	ldr	r2, [r3, #28]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4013      	ands	r3, r2
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	429a      	cmp	r2, r3
 800b970:	bf0c      	ite	eq
 800b972:	2301      	moveq	r3, #1
 800b974:	2300      	movne	r3, #0
 800b976:	b2db      	uxtb	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d0a0      	beq.n	800b8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b095      	sub	sp, #84	@ 0x54
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e6      	bne.n	800b994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba54 <UART_EndRxTransfer+0xc8>)
 800b9da:	4013      	ands	r3, r2
 800b9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e5      	bne.n	800b9c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d118      	bne.n	800ba34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f023 0310 	bic.w	r3, r3, #16
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	6979      	ldr	r1, [r7, #20]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e6      	bne.n	800ba02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba48:	bf00      	nop
 800ba4a:	3754      	adds	r7, #84	@ 0x54
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	effffffe 	.word	0xeffffffe

0800ba58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff f850 	bl	800ab1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	61bb      	str	r3, [r7, #24]
 800baac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	6979      	ldr	r1, [r7, #20]
 800bab0:	69ba      	ldr	r2, [r7, #24]
 800bab2:	e841 2300 	strex	r3, r2, [r1]
 800bab6:	613b      	str	r3, [r7, #16]
   return(result);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e6      	bne.n	800ba8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2220      	movs	r2, #32
 800bac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7ff f81b 	bl	800ab08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bad2:	bf00      	nop
 800bad4:	3720      	adds	r7, #32
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800baf6:	bf00      	nop
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb0a:	bf00      	nop
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d101      	bne.n	800bb2c <HAL_UARTEx_DisableFifoMode+0x16>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	e027      	b.n	800bb7c <HAL_UARTEx_DisableFifoMode+0x66>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2224      	movs	r2, #36	@ 0x24
 800bb38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f022 0201 	bic.w	r2, r2, #1
 800bb52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d101      	bne.n	800bba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e02d      	b.n	800bbfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2224      	movs	r2, #36	@ 0x24
 800bbac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f022 0201 	bic.w	r2, r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f84f 	bl	800bc80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e02d      	b.n	800bc78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2224      	movs	r2, #36	@ 0x24
 800bc28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0201 	bic.w	r2, r2, #1
 800bc42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	430a      	orrs	r2, r1
 800bc56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f811 	bl	800bc80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d108      	bne.n	800bca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bca0:	e031      	b.n	800bd06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bca2:	2310      	movs	r3, #16
 800bca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bca6:	2310      	movs	r3, #16
 800bca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	0e5b      	lsrs	r3, r3, #25
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 0307 	and.w	r3, r3, #7
 800bcb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	0f5b      	lsrs	r3, r3, #29
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	7b3a      	ldrb	r2, [r7, #12]
 800bcce:	4911      	ldr	r1, [pc, #68]	@ (800bd14 <UARTEx_SetNbDataToProcess+0x94>)
 800bcd0:	5c8a      	ldrb	r2, [r1, r2]
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcd6:	7b3a      	ldrb	r2, [r7, #12]
 800bcd8:	490f      	ldr	r1, [pc, #60]	@ (800bd18 <UARTEx_SetNbDataToProcess+0x98>)
 800bcda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	7b7a      	ldrb	r2, [r7, #13]
 800bcec:	4909      	ldr	r1, [pc, #36]	@ (800bd14 <UARTEx_SetNbDataToProcess+0x94>)
 800bcee:	5c8a      	ldrb	r2, [r1, r2]
 800bcf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcf4:	7b7a      	ldrb	r2, [r7, #13]
 800bcf6:	4908      	ldr	r1, [pc, #32]	@ (800bd18 <UARTEx_SetNbDataToProcess+0x98>)
 800bcf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd06:	bf00      	nop
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	0800f5b8 	.word	0x0800f5b8
 800bd18:	0800f5c0 	.word	0x0800f5c0

0800bd1c <__cvt>:
 800bd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd1e:	ed2d 8b02 	vpush	{d8}
 800bd22:	eeb0 8b40 	vmov.f64	d8, d0
 800bd26:	b085      	sub	sp, #20
 800bd28:	4617      	mov	r7, r2
 800bd2a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bd2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd2e:	ee18 2a90 	vmov	r2, s17
 800bd32:	f025 0520 	bic.w	r5, r5, #32
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	bfb6      	itet	lt
 800bd3a:	222d      	movlt	r2, #45	@ 0x2d
 800bd3c:	2200      	movge	r2, #0
 800bd3e:	eeb1 8b40 	vneglt.f64	d8, d0
 800bd42:	2d46      	cmp	r5, #70	@ 0x46
 800bd44:	460c      	mov	r4, r1
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	d004      	beq.n	800bd54 <__cvt+0x38>
 800bd4a:	2d45      	cmp	r5, #69	@ 0x45
 800bd4c:	d100      	bne.n	800bd50 <__cvt+0x34>
 800bd4e:	3401      	adds	r4, #1
 800bd50:	2102      	movs	r1, #2
 800bd52:	e000      	b.n	800bd56 <__cvt+0x3a>
 800bd54:	2103      	movs	r1, #3
 800bd56:	ab03      	add	r3, sp, #12
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	ab02      	add	r3, sp, #8
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4622      	mov	r2, r4
 800bd60:	4633      	mov	r3, r6
 800bd62:	eeb0 0b48 	vmov.f64	d0, d8
 800bd66:	f000 fe3f 	bl	800c9e8 <_dtoa_r>
 800bd6a:	2d47      	cmp	r5, #71	@ 0x47
 800bd6c:	d114      	bne.n	800bd98 <__cvt+0x7c>
 800bd6e:	07fb      	lsls	r3, r7, #31
 800bd70:	d50a      	bpl.n	800bd88 <__cvt+0x6c>
 800bd72:	1902      	adds	r2, r0, r4
 800bd74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7c:	bf08      	it	eq
 800bd7e:	9203      	streq	r2, [sp, #12]
 800bd80:	2130      	movs	r1, #48	@ 0x30
 800bd82:	9b03      	ldr	r3, [sp, #12]
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d319      	bcc.n	800bdbc <__cvt+0xa0>
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd8c:	1a1b      	subs	r3, r3, r0
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	b005      	add	sp, #20
 800bd92:	ecbd 8b02 	vpop	{d8}
 800bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd98:	2d46      	cmp	r5, #70	@ 0x46
 800bd9a:	eb00 0204 	add.w	r2, r0, r4
 800bd9e:	d1e9      	bne.n	800bd74 <__cvt+0x58>
 800bda0:	7803      	ldrb	r3, [r0, #0]
 800bda2:	2b30      	cmp	r3, #48	@ 0x30
 800bda4:	d107      	bne.n	800bdb6 <__cvt+0x9a>
 800bda6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdae:	bf1c      	itt	ne
 800bdb0:	f1c4 0401 	rsbne	r4, r4, #1
 800bdb4:	6034      	strne	r4, [r6, #0]
 800bdb6:	6833      	ldr	r3, [r6, #0]
 800bdb8:	441a      	add	r2, r3
 800bdba:	e7db      	b.n	800bd74 <__cvt+0x58>
 800bdbc:	1c5c      	adds	r4, r3, #1
 800bdbe:	9403      	str	r4, [sp, #12]
 800bdc0:	7019      	strb	r1, [r3, #0]
 800bdc2:	e7de      	b.n	800bd82 <__cvt+0x66>

0800bdc4 <__exponent>:
 800bdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdc6:	2900      	cmp	r1, #0
 800bdc8:	bfba      	itte	lt
 800bdca:	4249      	neglt	r1, r1
 800bdcc:	232d      	movlt	r3, #45	@ 0x2d
 800bdce:	232b      	movge	r3, #43	@ 0x2b
 800bdd0:	2909      	cmp	r1, #9
 800bdd2:	7002      	strb	r2, [r0, #0]
 800bdd4:	7043      	strb	r3, [r0, #1]
 800bdd6:	dd29      	ble.n	800be2c <__exponent+0x68>
 800bdd8:	f10d 0307 	add.w	r3, sp, #7
 800bddc:	461d      	mov	r5, r3
 800bdde:	270a      	movs	r7, #10
 800bde0:	461a      	mov	r2, r3
 800bde2:	fbb1 f6f7 	udiv	r6, r1, r7
 800bde6:	fb07 1416 	mls	r4, r7, r6, r1
 800bdea:	3430      	adds	r4, #48	@ 0x30
 800bdec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	2c63      	cmp	r4, #99	@ 0x63
 800bdf4:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	dcf1      	bgt.n	800bde0 <__exponent+0x1c>
 800bdfc:	3130      	adds	r1, #48	@ 0x30
 800bdfe:	1e94      	subs	r4, r2, #2
 800be00:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be04:	1c41      	adds	r1, r0, #1
 800be06:	4623      	mov	r3, r4
 800be08:	42ab      	cmp	r3, r5
 800be0a:	d30a      	bcc.n	800be22 <__exponent+0x5e>
 800be0c:	f10d 0309 	add.w	r3, sp, #9
 800be10:	1a9b      	subs	r3, r3, r2
 800be12:	42ac      	cmp	r4, r5
 800be14:	bf88      	it	hi
 800be16:	2300      	movhi	r3, #0
 800be18:	3302      	adds	r3, #2
 800be1a:	4403      	add	r3, r0
 800be1c:	1a18      	subs	r0, r3, r0
 800be1e:	b003      	add	sp, #12
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be22:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be26:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be2a:	e7ed      	b.n	800be08 <__exponent+0x44>
 800be2c:	2330      	movs	r3, #48	@ 0x30
 800be2e:	3130      	adds	r1, #48	@ 0x30
 800be30:	7083      	strb	r3, [r0, #2]
 800be32:	70c1      	strb	r1, [r0, #3]
 800be34:	1d03      	adds	r3, r0, #4
 800be36:	e7f1      	b.n	800be1c <__exponent+0x58>

0800be38 <_printf_float>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	b08d      	sub	sp, #52	@ 0x34
 800be3e:	460c      	mov	r4, r1
 800be40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be44:	4616      	mov	r6, r2
 800be46:	461f      	mov	r7, r3
 800be48:	4605      	mov	r5, r0
 800be4a:	f000 fccb 	bl	800c7e4 <_localeconv_r>
 800be4e:	f8d0 b000 	ldr.w	fp, [r0]
 800be52:	4658      	mov	r0, fp
 800be54:	f7f4 fa94 	bl	8000380 <strlen>
 800be58:	2300      	movs	r3, #0
 800be5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be5c:	f8d8 3000 	ldr.w	r3, [r8]
 800be60:	f894 9018 	ldrb.w	r9, [r4, #24]
 800be64:	6822      	ldr	r2, [r4, #0]
 800be66:	9005      	str	r0, [sp, #20]
 800be68:	3307      	adds	r3, #7
 800be6a:	f023 0307 	bic.w	r3, r3, #7
 800be6e:	f103 0108 	add.w	r1, r3, #8
 800be72:	f8c8 1000 	str.w	r1, [r8]
 800be76:	ed93 0b00 	vldr	d0, [r3]
 800be7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c0d8 <_printf_float+0x2a0>
 800be7e:	eeb0 7bc0 	vabs.f64	d7, d0
 800be82:	eeb4 7b46 	vcmp.f64	d7, d6
 800be86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800be8e:	dd24      	ble.n	800beda <_printf_float+0xa2>
 800be90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be98:	d502      	bpl.n	800bea0 <_printf_float+0x68>
 800be9a:	232d      	movs	r3, #45	@ 0x2d
 800be9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bea0:	498f      	ldr	r1, [pc, #572]	@ (800c0e0 <_printf_float+0x2a8>)
 800bea2:	4b90      	ldr	r3, [pc, #576]	@ (800c0e4 <_printf_float+0x2ac>)
 800bea4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bea8:	bf94      	ite	ls
 800beaa:	4688      	movls	r8, r1
 800beac:	4698      	movhi	r8, r3
 800beae:	f022 0204 	bic.w	r2, r2, #4
 800beb2:	2303      	movs	r3, #3
 800beb4:	6123      	str	r3, [r4, #16]
 800beb6:	6022      	str	r2, [r4, #0]
 800beb8:	f04f 0a00 	mov.w	sl, #0
 800bebc:	9700      	str	r7, [sp, #0]
 800bebe:	4633      	mov	r3, r6
 800bec0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bec2:	4621      	mov	r1, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	f000 f9d1 	bl	800c26c <_printf_common>
 800beca:	3001      	adds	r0, #1
 800becc:	f040 8089 	bne.w	800bfe2 <_printf_float+0x1aa>
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295
 800bed4:	b00d      	add	sp, #52	@ 0x34
 800bed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beda:	eeb4 0b40 	vcmp.f64	d0, d0
 800bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee2:	d709      	bvc.n	800bef8 <_printf_float+0xc0>
 800bee4:	ee10 3a90 	vmov	r3, s1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbc      	itt	lt
 800beec:	232d      	movlt	r3, #45	@ 0x2d
 800beee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bef2:	497d      	ldr	r1, [pc, #500]	@ (800c0e8 <_printf_float+0x2b0>)
 800bef4:	4b7d      	ldr	r3, [pc, #500]	@ (800c0ec <_printf_float+0x2b4>)
 800bef6:	e7d5      	b.n	800bea4 <_printf_float+0x6c>
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	1c59      	adds	r1, r3, #1
 800befc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bf00:	d139      	bne.n	800bf76 <_printf_float+0x13e>
 800bf02:	2306      	movs	r3, #6
 800bf04:	6063      	str	r3, [r4, #4]
 800bf06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6022      	str	r2, [r4, #0]
 800bf0e:	9303      	str	r3, [sp, #12]
 800bf10:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bf16:	ab09      	add	r3, sp, #36	@ 0x24
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	6861      	ldr	r1, [r4, #4]
 800bf1c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf20:	4628      	mov	r0, r5
 800bf22:	f7ff fefb 	bl	800bd1c <__cvt>
 800bf26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	d129      	bne.n	800bf84 <_printf_float+0x14c>
 800bf30:	1cc8      	adds	r0, r1, #3
 800bf32:	db02      	blt.n	800bf3a <_printf_float+0x102>
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	4299      	cmp	r1, r3
 800bf38:	dd41      	ble.n	800bfbe <_printf_float+0x186>
 800bf3a:	f1a9 0902 	sub.w	r9, r9, #2
 800bf3e:	fa5f f989 	uxtb.w	r9, r9
 800bf42:	3901      	subs	r1, #1
 800bf44:	464a      	mov	r2, r9
 800bf46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf4c:	f7ff ff3a 	bl	800bdc4 <__exponent>
 800bf50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf52:	1813      	adds	r3, r2, r0
 800bf54:	2a01      	cmp	r2, #1
 800bf56:	4682      	mov	sl, r0
 800bf58:	6123      	str	r3, [r4, #16]
 800bf5a:	dc02      	bgt.n	800bf62 <_printf_float+0x12a>
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	07d2      	lsls	r2, r2, #31
 800bf60:	d501      	bpl.n	800bf66 <_printf_float+0x12e>
 800bf62:	3301      	adds	r3, #1
 800bf64:	6123      	str	r3, [r4, #16]
 800bf66:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d0a6      	beq.n	800bebc <_printf_float+0x84>
 800bf6e:	232d      	movs	r3, #45	@ 0x2d
 800bf70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf74:	e7a2      	b.n	800bebc <_printf_float+0x84>
 800bf76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf7a:	d1c4      	bne.n	800bf06 <_printf_float+0xce>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1c2      	bne.n	800bf06 <_printf_float+0xce>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e7bf      	b.n	800bf04 <_printf_float+0xcc>
 800bf84:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bf88:	d9db      	bls.n	800bf42 <_printf_float+0x10a>
 800bf8a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bf8e:	d118      	bne.n	800bfc2 <_printf_float+0x18a>
 800bf90:	2900      	cmp	r1, #0
 800bf92:	6863      	ldr	r3, [r4, #4]
 800bf94:	dd0b      	ble.n	800bfae <_printf_float+0x176>
 800bf96:	6121      	str	r1, [r4, #16]
 800bf98:	b913      	cbnz	r3, 800bfa0 <_printf_float+0x168>
 800bf9a:	6822      	ldr	r2, [r4, #0]
 800bf9c:	07d0      	lsls	r0, r2, #31
 800bf9e:	d502      	bpl.n	800bfa6 <_printf_float+0x16e>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	440b      	add	r3, r1
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfa8:	f04f 0a00 	mov.w	sl, #0
 800bfac:	e7db      	b.n	800bf66 <_printf_float+0x12e>
 800bfae:	b913      	cbnz	r3, 800bfb6 <_printf_float+0x17e>
 800bfb0:	6822      	ldr	r2, [r4, #0]
 800bfb2:	07d2      	lsls	r2, r2, #31
 800bfb4:	d501      	bpl.n	800bfba <_printf_float+0x182>
 800bfb6:	3302      	adds	r3, #2
 800bfb8:	e7f4      	b.n	800bfa4 <_printf_float+0x16c>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e7f2      	b.n	800bfa4 <_printf_float+0x16c>
 800bfbe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bfc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfc4:	4299      	cmp	r1, r3
 800bfc6:	db05      	blt.n	800bfd4 <_printf_float+0x19c>
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	6121      	str	r1, [r4, #16]
 800bfcc:	07d8      	lsls	r0, r3, #31
 800bfce:	d5ea      	bpl.n	800bfa6 <_printf_float+0x16e>
 800bfd0:	1c4b      	adds	r3, r1, #1
 800bfd2:	e7e7      	b.n	800bfa4 <_printf_float+0x16c>
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	bfd4      	ite	le
 800bfd8:	f1c1 0202 	rsble	r2, r1, #2
 800bfdc:	2201      	movgt	r2, #1
 800bfde:	4413      	add	r3, r2
 800bfe0:	e7e0      	b.n	800bfa4 <_printf_float+0x16c>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	055a      	lsls	r2, r3, #21
 800bfe6:	d407      	bmi.n	800bff8 <_printf_float+0x1c0>
 800bfe8:	6923      	ldr	r3, [r4, #16]
 800bfea:	4642      	mov	r2, r8
 800bfec:	4631      	mov	r1, r6
 800bfee:	4628      	mov	r0, r5
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	d12a      	bne.n	800c04c <_printf_float+0x214>
 800bff6:	e76b      	b.n	800bed0 <_printf_float+0x98>
 800bff8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bffc:	f240 80e0 	bls.w	800c1c0 <_printf_float+0x388>
 800c000:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c004:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00c:	d133      	bne.n	800c076 <_printf_float+0x23e>
 800c00e:	4a38      	ldr	r2, [pc, #224]	@ (800c0f0 <_printf_float+0x2b8>)
 800c010:	2301      	movs	r3, #1
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	f43f af59 	beq.w	800bed0 <_printf_float+0x98>
 800c01e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c022:	4543      	cmp	r3, r8
 800c024:	db02      	blt.n	800c02c <_printf_float+0x1f4>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	07d8      	lsls	r0, r3, #31
 800c02a:	d50f      	bpl.n	800c04c <_printf_float+0x214>
 800c02c:	9b05      	ldr	r3, [sp, #20]
 800c02e:	465a      	mov	r2, fp
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f af4a 	beq.w	800bed0 <_printf_float+0x98>
 800c03c:	f04f 0900 	mov.w	r9, #0
 800c040:	f108 38ff 	add.w	r8, r8, #4294967295
 800c044:	f104 0a1a 	add.w	sl, r4, #26
 800c048:	45c8      	cmp	r8, r9
 800c04a:	dc09      	bgt.n	800c060 <_printf_float+0x228>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	079b      	lsls	r3, r3, #30
 800c050:	f100 8107 	bmi.w	800c262 <_printf_float+0x42a>
 800c054:	68e0      	ldr	r0, [r4, #12]
 800c056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c058:	4298      	cmp	r0, r3
 800c05a:	bfb8      	it	lt
 800c05c:	4618      	movlt	r0, r3
 800c05e:	e739      	b.n	800bed4 <_printf_float+0x9c>
 800c060:	2301      	movs	r3, #1
 800c062:	4652      	mov	r2, sl
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	47b8      	blx	r7
 800c06a:	3001      	adds	r0, #1
 800c06c:	f43f af30 	beq.w	800bed0 <_printf_float+0x98>
 800c070:	f109 0901 	add.w	r9, r9, #1
 800c074:	e7e8      	b.n	800c048 <_printf_float+0x210>
 800c076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc3b      	bgt.n	800c0f4 <_printf_float+0x2bc>
 800c07c:	4a1c      	ldr	r2, [pc, #112]	@ (800c0f0 <_printf_float+0x2b8>)
 800c07e:	2301      	movs	r3, #1
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af22 	beq.w	800bed0 <_printf_float+0x98>
 800c08c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c090:	ea59 0303 	orrs.w	r3, r9, r3
 800c094:	d102      	bne.n	800c09c <_printf_float+0x264>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	07d9      	lsls	r1, r3, #31
 800c09a:	d5d7      	bpl.n	800c04c <_printf_float+0x214>
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	465a      	mov	r2, fp
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af12 	beq.w	800bed0 <_printf_float+0x98>
 800c0ac:	f04f 0a00 	mov.w	sl, #0
 800c0b0:	f104 0b1a 	add.w	fp, r4, #26
 800c0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b6:	425b      	negs	r3, r3
 800c0b8:	4553      	cmp	r3, sl
 800c0ba:	dc01      	bgt.n	800c0c0 <_printf_float+0x288>
 800c0bc:	464b      	mov	r3, r9
 800c0be:	e794      	b.n	800bfea <_printf_float+0x1b2>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	465a      	mov	r2, fp
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	f43f af00 	beq.w	800bed0 <_printf_float+0x98>
 800c0d0:	f10a 0a01 	add.w	sl, sl, #1
 800c0d4:	e7ee      	b.n	800c0b4 <_printf_float+0x27c>
 800c0d6:	bf00      	nop
 800c0d8:	ffffffff 	.word	0xffffffff
 800c0dc:	7fefffff 	.word	0x7fefffff
 800c0e0:	0800f5c8 	.word	0x0800f5c8
 800c0e4:	0800f5cc 	.word	0x0800f5cc
 800c0e8:	0800f5d0 	.word	0x0800f5d0
 800c0ec:	0800f5d4 	.word	0x0800f5d4
 800c0f0:	0800f5d8 	.word	0x0800f5d8
 800c0f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0fa:	4553      	cmp	r3, sl
 800c0fc:	bfa8      	it	ge
 800c0fe:	4653      	movge	r3, sl
 800c100:	2b00      	cmp	r3, #0
 800c102:	4699      	mov	r9, r3
 800c104:	dc37      	bgt.n	800c176 <_printf_float+0x33e>
 800c106:	2300      	movs	r3, #0
 800c108:	9307      	str	r3, [sp, #28]
 800c10a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c10e:	f104 021a 	add.w	r2, r4, #26
 800c112:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c114:	9907      	ldr	r1, [sp, #28]
 800c116:	9306      	str	r3, [sp, #24]
 800c118:	eba3 0309 	sub.w	r3, r3, r9
 800c11c:	428b      	cmp	r3, r1
 800c11e:	dc31      	bgt.n	800c184 <_printf_float+0x34c>
 800c120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c122:	459a      	cmp	sl, r3
 800c124:	dc3b      	bgt.n	800c19e <_printf_float+0x366>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	07da      	lsls	r2, r3, #31
 800c12a:	d438      	bmi.n	800c19e <_printf_float+0x366>
 800c12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12e:	ebaa 0903 	sub.w	r9, sl, r3
 800c132:	9b06      	ldr	r3, [sp, #24]
 800c134:	ebaa 0303 	sub.w	r3, sl, r3
 800c138:	4599      	cmp	r9, r3
 800c13a:	bfa8      	it	ge
 800c13c:	4699      	movge	r9, r3
 800c13e:	f1b9 0f00 	cmp.w	r9, #0
 800c142:	dc34      	bgt.n	800c1ae <_printf_float+0x376>
 800c144:	f04f 0800 	mov.w	r8, #0
 800c148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c14c:	f104 0b1a 	add.w	fp, r4, #26
 800c150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c152:	ebaa 0303 	sub.w	r3, sl, r3
 800c156:	eba3 0309 	sub.w	r3, r3, r9
 800c15a:	4543      	cmp	r3, r8
 800c15c:	f77f af76 	ble.w	800c04c <_printf_float+0x214>
 800c160:	2301      	movs	r3, #1
 800c162:	465a      	mov	r2, fp
 800c164:	4631      	mov	r1, r6
 800c166:	4628      	mov	r0, r5
 800c168:	47b8      	blx	r7
 800c16a:	3001      	adds	r0, #1
 800c16c:	f43f aeb0 	beq.w	800bed0 <_printf_float+0x98>
 800c170:	f108 0801 	add.w	r8, r8, #1
 800c174:	e7ec      	b.n	800c150 <_printf_float+0x318>
 800c176:	4642      	mov	r2, r8
 800c178:	4631      	mov	r1, r6
 800c17a:	4628      	mov	r0, r5
 800c17c:	47b8      	blx	r7
 800c17e:	3001      	adds	r0, #1
 800c180:	d1c1      	bne.n	800c106 <_printf_float+0x2ce>
 800c182:	e6a5      	b.n	800bed0 <_printf_float+0x98>
 800c184:	2301      	movs	r3, #1
 800c186:	4631      	mov	r1, r6
 800c188:	4628      	mov	r0, r5
 800c18a:	9206      	str	r2, [sp, #24]
 800c18c:	47b8      	blx	r7
 800c18e:	3001      	adds	r0, #1
 800c190:	f43f ae9e 	beq.w	800bed0 <_printf_float+0x98>
 800c194:	9b07      	ldr	r3, [sp, #28]
 800c196:	9a06      	ldr	r2, [sp, #24]
 800c198:	3301      	adds	r3, #1
 800c19a:	9307      	str	r3, [sp, #28]
 800c19c:	e7b9      	b.n	800c112 <_printf_float+0x2da>
 800c19e:	9b05      	ldr	r3, [sp, #20]
 800c1a0:	465a      	mov	r2, fp
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b8      	blx	r7
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d1bf      	bne.n	800c12c <_printf_float+0x2f4>
 800c1ac:	e690      	b.n	800bed0 <_printf_float+0x98>
 800c1ae:	9a06      	ldr	r2, [sp, #24]
 800c1b0:	464b      	mov	r3, r9
 800c1b2:	4442      	add	r2, r8
 800c1b4:	4631      	mov	r1, r6
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	47b8      	blx	r7
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	d1c2      	bne.n	800c144 <_printf_float+0x30c>
 800c1be:	e687      	b.n	800bed0 <_printf_float+0x98>
 800c1c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c1c4:	f1b9 0f01 	cmp.w	r9, #1
 800c1c8:	dc01      	bgt.n	800c1ce <_printf_float+0x396>
 800c1ca:	07db      	lsls	r3, r3, #31
 800c1cc:	d536      	bpl.n	800c23c <_printf_float+0x404>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b8      	blx	r7
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f43f ae79 	beq.w	800bed0 <_printf_float+0x98>
 800c1de:	9b05      	ldr	r3, [sp, #20]
 800c1e0:	465a      	mov	r2, fp
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b8      	blx	r7
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	f43f ae71 	beq.w	800bed0 <_printf_float+0x98>
 800c1ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c1f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800c1fe:	d018      	beq.n	800c232 <_printf_float+0x3fa>
 800c200:	464b      	mov	r3, r9
 800c202:	f108 0201 	add.w	r2, r8, #1
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	d10c      	bne.n	800c22a <_printf_float+0x3f2>
 800c210:	e65e      	b.n	800bed0 <_printf_float+0x98>
 800c212:	2301      	movs	r3, #1
 800c214:	465a      	mov	r2, fp
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	f43f ae57 	beq.w	800bed0 <_printf_float+0x98>
 800c222:	f108 0801 	add.w	r8, r8, #1
 800c226:	45c8      	cmp	r8, r9
 800c228:	dbf3      	blt.n	800c212 <_printf_float+0x3da>
 800c22a:	4653      	mov	r3, sl
 800c22c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c230:	e6dc      	b.n	800bfec <_printf_float+0x1b4>
 800c232:	f04f 0800 	mov.w	r8, #0
 800c236:	f104 0b1a 	add.w	fp, r4, #26
 800c23a:	e7f4      	b.n	800c226 <_printf_float+0x3ee>
 800c23c:	2301      	movs	r3, #1
 800c23e:	4642      	mov	r2, r8
 800c240:	e7e1      	b.n	800c206 <_printf_float+0x3ce>
 800c242:	2301      	movs	r3, #1
 800c244:	464a      	mov	r2, r9
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	f43f ae3f 	beq.w	800bed0 <_printf_float+0x98>
 800c252:	f108 0801 	add.w	r8, r8, #1
 800c256:	68e3      	ldr	r3, [r4, #12]
 800c258:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c25a:	1a5b      	subs	r3, r3, r1
 800c25c:	4543      	cmp	r3, r8
 800c25e:	dcf0      	bgt.n	800c242 <_printf_float+0x40a>
 800c260:	e6f8      	b.n	800c054 <_printf_float+0x21c>
 800c262:	f04f 0800 	mov.w	r8, #0
 800c266:	f104 0919 	add.w	r9, r4, #25
 800c26a:	e7f4      	b.n	800c256 <_printf_float+0x41e>

0800c26c <_printf_common>:
 800c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	4616      	mov	r6, r2
 800c272:	4698      	mov	r8, r3
 800c274:	688a      	ldr	r2, [r1, #8]
 800c276:	690b      	ldr	r3, [r1, #16]
 800c278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c27c:	4293      	cmp	r3, r2
 800c27e:	bfb8      	it	lt
 800c280:	4613      	movlt	r3, r2
 800c282:	6033      	str	r3, [r6, #0]
 800c284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c288:	4607      	mov	r7, r0
 800c28a:	460c      	mov	r4, r1
 800c28c:	b10a      	cbz	r2, 800c292 <_printf_common+0x26>
 800c28e:	3301      	adds	r3, #1
 800c290:	6033      	str	r3, [r6, #0]
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	0699      	lsls	r1, r3, #26
 800c296:	bf42      	ittt	mi
 800c298:	6833      	ldrmi	r3, [r6, #0]
 800c29a:	3302      	addmi	r3, #2
 800c29c:	6033      	strmi	r3, [r6, #0]
 800c29e:	6825      	ldr	r5, [r4, #0]
 800c2a0:	f015 0506 	ands.w	r5, r5, #6
 800c2a4:	d106      	bne.n	800c2b4 <_printf_common+0x48>
 800c2a6:	f104 0a19 	add.w	sl, r4, #25
 800c2aa:	68e3      	ldr	r3, [r4, #12]
 800c2ac:	6832      	ldr	r2, [r6, #0]
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	42ab      	cmp	r3, r5
 800c2b2:	dc26      	bgt.n	800c302 <_printf_common+0x96>
 800c2b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2b8:	6822      	ldr	r2, [r4, #0]
 800c2ba:	3b00      	subs	r3, #0
 800c2bc:	bf18      	it	ne
 800c2be:	2301      	movne	r3, #1
 800c2c0:	0692      	lsls	r2, r2, #26
 800c2c2:	d42b      	bmi.n	800c31c <_printf_common+0xb0>
 800c2c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2c8:	4641      	mov	r1, r8
 800c2ca:	4638      	mov	r0, r7
 800c2cc:	47c8      	blx	r9
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	d01e      	beq.n	800c310 <_printf_common+0xa4>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	6922      	ldr	r2, [r4, #16]
 800c2d6:	f003 0306 	and.w	r3, r3, #6
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	bf02      	ittt	eq
 800c2de:	68e5      	ldreq	r5, [r4, #12]
 800c2e0:	6833      	ldreq	r3, [r6, #0]
 800c2e2:	1aed      	subeq	r5, r5, r3
 800c2e4:	68a3      	ldr	r3, [r4, #8]
 800c2e6:	bf0c      	ite	eq
 800c2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2ec:	2500      	movne	r5, #0
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	bfc4      	itt	gt
 800c2f2:	1a9b      	subgt	r3, r3, r2
 800c2f4:	18ed      	addgt	r5, r5, r3
 800c2f6:	2600      	movs	r6, #0
 800c2f8:	341a      	adds	r4, #26
 800c2fa:	42b5      	cmp	r5, r6
 800c2fc:	d11a      	bne.n	800c334 <_printf_common+0xc8>
 800c2fe:	2000      	movs	r0, #0
 800c300:	e008      	b.n	800c314 <_printf_common+0xa8>
 800c302:	2301      	movs	r3, #1
 800c304:	4652      	mov	r2, sl
 800c306:	4641      	mov	r1, r8
 800c308:	4638      	mov	r0, r7
 800c30a:	47c8      	blx	r9
 800c30c:	3001      	adds	r0, #1
 800c30e:	d103      	bne.n	800c318 <_printf_common+0xac>
 800c310:	f04f 30ff 	mov.w	r0, #4294967295
 800c314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c318:	3501      	adds	r5, #1
 800c31a:	e7c6      	b.n	800c2aa <_printf_common+0x3e>
 800c31c:	18e1      	adds	r1, r4, r3
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	2030      	movs	r0, #48	@ 0x30
 800c322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c326:	4422      	add	r2, r4
 800c328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c32c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c330:	3302      	adds	r3, #2
 800c332:	e7c7      	b.n	800c2c4 <_printf_common+0x58>
 800c334:	2301      	movs	r3, #1
 800c336:	4622      	mov	r2, r4
 800c338:	4641      	mov	r1, r8
 800c33a:	4638      	mov	r0, r7
 800c33c:	47c8      	blx	r9
 800c33e:	3001      	adds	r0, #1
 800c340:	d0e6      	beq.n	800c310 <_printf_common+0xa4>
 800c342:	3601      	adds	r6, #1
 800c344:	e7d9      	b.n	800c2fa <_printf_common+0x8e>
	...

0800c348 <_printf_i>:
 800c348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	7e0f      	ldrb	r7, [r1, #24]
 800c34e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c350:	2f78      	cmp	r7, #120	@ 0x78
 800c352:	4691      	mov	r9, r2
 800c354:	4680      	mov	r8, r0
 800c356:	460c      	mov	r4, r1
 800c358:	469a      	mov	sl, r3
 800c35a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c35e:	d807      	bhi.n	800c370 <_printf_i+0x28>
 800c360:	2f62      	cmp	r7, #98	@ 0x62
 800c362:	d80a      	bhi.n	800c37a <_printf_i+0x32>
 800c364:	2f00      	cmp	r7, #0
 800c366:	f000 80d2 	beq.w	800c50e <_printf_i+0x1c6>
 800c36a:	2f58      	cmp	r7, #88	@ 0x58
 800c36c:	f000 80b9 	beq.w	800c4e2 <_printf_i+0x19a>
 800c370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c378:	e03a      	b.n	800c3f0 <_printf_i+0xa8>
 800c37a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c37e:	2b15      	cmp	r3, #21
 800c380:	d8f6      	bhi.n	800c370 <_printf_i+0x28>
 800c382:	a101      	add	r1, pc, #4	@ (adr r1, 800c388 <_printf_i+0x40>)
 800c384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c388:	0800c3e1 	.word	0x0800c3e1
 800c38c:	0800c3f5 	.word	0x0800c3f5
 800c390:	0800c371 	.word	0x0800c371
 800c394:	0800c371 	.word	0x0800c371
 800c398:	0800c371 	.word	0x0800c371
 800c39c:	0800c371 	.word	0x0800c371
 800c3a0:	0800c3f5 	.word	0x0800c3f5
 800c3a4:	0800c371 	.word	0x0800c371
 800c3a8:	0800c371 	.word	0x0800c371
 800c3ac:	0800c371 	.word	0x0800c371
 800c3b0:	0800c371 	.word	0x0800c371
 800c3b4:	0800c4f5 	.word	0x0800c4f5
 800c3b8:	0800c41f 	.word	0x0800c41f
 800c3bc:	0800c4af 	.word	0x0800c4af
 800c3c0:	0800c371 	.word	0x0800c371
 800c3c4:	0800c371 	.word	0x0800c371
 800c3c8:	0800c517 	.word	0x0800c517
 800c3cc:	0800c371 	.word	0x0800c371
 800c3d0:	0800c41f 	.word	0x0800c41f
 800c3d4:	0800c371 	.word	0x0800c371
 800c3d8:	0800c371 	.word	0x0800c371
 800c3dc:	0800c4b7 	.word	0x0800c4b7
 800c3e0:	6833      	ldr	r3, [r6, #0]
 800c3e2:	1d1a      	adds	r2, r3, #4
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6032      	str	r2, [r6, #0]
 800c3e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e09d      	b.n	800c530 <_printf_i+0x1e8>
 800c3f4:	6833      	ldr	r3, [r6, #0]
 800c3f6:	6820      	ldr	r0, [r4, #0]
 800c3f8:	1d19      	adds	r1, r3, #4
 800c3fa:	6031      	str	r1, [r6, #0]
 800c3fc:	0606      	lsls	r6, r0, #24
 800c3fe:	d501      	bpl.n	800c404 <_printf_i+0xbc>
 800c400:	681d      	ldr	r5, [r3, #0]
 800c402:	e003      	b.n	800c40c <_printf_i+0xc4>
 800c404:	0645      	lsls	r5, r0, #25
 800c406:	d5fb      	bpl.n	800c400 <_printf_i+0xb8>
 800c408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c40c:	2d00      	cmp	r5, #0
 800c40e:	da03      	bge.n	800c418 <_printf_i+0xd0>
 800c410:	232d      	movs	r3, #45	@ 0x2d
 800c412:	426d      	negs	r5, r5
 800c414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c418:	4859      	ldr	r0, [pc, #356]	@ (800c580 <_printf_i+0x238>)
 800c41a:	230a      	movs	r3, #10
 800c41c:	e011      	b.n	800c442 <_printf_i+0xfa>
 800c41e:	6821      	ldr	r1, [r4, #0]
 800c420:	6833      	ldr	r3, [r6, #0]
 800c422:	0608      	lsls	r0, r1, #24
 800c424:	f853 5b04 	ldr.w	r5, [r3], #4
 800c428:	d402      	bmi.n	800c430 <_printf_i+0xe8>
 800c42a:	0649      	lsls	r1, r1, #25
 800c42c:	bf48      	it	mi
 800c42e:	b2ad      	uxthmi	r5, r5
 800c430:	2f6f      	cmp	r7, #111	@ 0x6f
 800c432:	4853      	ldr	r0, [pc, #332]	@ (800c580 <_printf_i+0x238>)
 800c434:	6033      	str	r3, [r6, #0]
 800c436:	bf14      	ite	ne
 800c438:	230a      	movne	r3, #10
 800c43a:	2308      	moveq	r3, #8
 800c43c:	2100      	movs	r1, #0
 800c43e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c442:	6866      	ldr	r6, [r4, #4]
 800c444:	60a6      	str	r6, [r4, #8]
 800c446:	2e00      	cmp	r6, #0
 800c448:	bfa2      	ittt	ge
 800c44a:	6821      	ldrge	r1, [r4, #0]
 800c44c:	f021 0104 	bicge.w	r1, r1, #4
 800c450:	6021      	strge	r1, [r4, #0]
 800c452:	b90d      	cbnz	r5, 800c458 <_printf_i+0x110>
 800c454:	2e00      	cmp	r6, #0
 800c456:	d04b      	beq.n	800c4f0 <_printf_i+0x1a8>
 800c458:	4616      	mov	r6, r2
 800c45a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c45e:	fb03 5711 	mls	r7, r3, r1, r5
 800c462:	5dc7      	ldrb	r7, [r0, r7]
 800c464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c468:	462f      	mov	r7, r5
 800c46a:	42bb      	cmp	r3, r7
 800c46c:	460d      	mov	r5, r1
 800c46e:	d9f4      	bls.n	800c45a <_printf_i+0x112>
 800c470:	2b08      	cmp	r3, #8
 800c472:	d10b      	bne.n	800c48c <_printf_i+0x144>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	07df      	lsls	r7, r3, #31
 800c478:	d508      	bpl.n	800c48c <_printf_i+0x144>
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	6861      	ldr	r1, [r4, #4]
 800c47e:	4299      	cmp	r1, r3
 800c480:	bfde      	ittt	le
 800c482:	2330      	movle	r3, #48	@ 0x30
 800c484:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c48c:	1b92      	subs	r2, r2, r6
 800c48e:	6122      	str	r2, [r4, #16]
 800c490:	f8cd a000 	str.w	sl, [sp]
 800c494:	464b      	mov	r3, r9
 800c496:	aa03      	add	r2, sp, #12
 800c498:	4621      	mov	r1, r4
 800c49a:	4640      	mov	r0, r8
 800c49c:	f7ff fee6 	bl	800c26c <_printf_common>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d14a      	bne.n	800c53a <_printf_i+0x1f2>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	b004      	add	sp, #16
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	f043 0320 	orr.w	r3, r3, #32
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	4833      	ldr	r0, [pc, #204]	@ (800c584 <_printf_i+0x23c>)
 800c4b8:	2778      	movs	r7, #120	@ 0x78
 800c4ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	6831      	ldr	r1, [r6, #0]
 800c4c2:	061f      	lsls	r7, r3, #24
 800c4c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4c8:	d402      	bmi.n	800c4d0 <_printf_i+0x188>
 800c4ca:	065f      	lsls	r7, r3, #25
 800c4cc:	bf48      	it	mi
 800c4ce:	b2ad      	uxthmi	r5, r5
 800c4d0:	6031      	str	r1, [r6, #0]
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	bf44      	itt	mi
 800c4d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c4da:	6023      	strmi	r3, [r4, #0]
 800c4dc:	b11d      	cbz	r5, 800c4e6 <_printf_i+0x19e>
 800c4de:	2310      	movs	r3, #16
 800c4e0:	e7ac      	b.n	800c43c <_printf_i+0xf4>
 800c4e2:	4827      	ldr	r0, [pc, #156]	@ (800c580 <_printf_i+0x238>)
 800c4e4:	e7e9      	b.n	800c4ba <_printf_i+0x172>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f023 0320 	bic.w	r3, r3, #32
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	e7f6      	b.n	800c4de <_printf_i+0x196>
 800c4f0:	4616      	mov	r6, r2
 800c4f2:	e7bd      	b.n	800c470 <_printf_i+0x128>
 800c4f4:	6833      	ldr	r3, [r6, #0]
 800c4f6:	6825      	ldr	r5, [r4, #0]
 800c4f8:	6961      	ldr	r1, [r4, #20]
 800c4fa:	1d18      	adds	r0, r3, #4
 800c4fc:	6030      	str	r0, [r6, #0]
 800c4fe:	062e      	lsls	r6, r5, #24
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	d501      	bpl.n	800c508 <_printf_i+0x1c0>
 800c504:	6019      	str	r1, [r3, #0]
 800c506:	e002      	b.n	800c50e <_printf_i+0x1c6>
 800c508:	0668      	lsls	r0, r5, #25
 800c50a:	d5fb      	bpl.n	800c504 <_printf_i+0x1bc>
 800c50c:	8019      	strh	r1, [r3, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	6123      	str	r3, [r4, #16]
 800c512:	4616      	mov	r6, r2
 800c514:	e7bc      	b.n	800c490 <_printf_i+0x148>
 800c516:	6833      	ldr	r3, [r6, #0]
 800c518:	1d1a      	adds	r2, r3, #4
 800c51a:	6032      	str	r2, [r6, #0]
 800c51c:	681e      	ldr	r6, [r3, #0]
 800c51e:	6862      	ldr	r2, [r4, #4]
 800c520:	2100      	movs	r1, #0
 800c522:	4630      	mov	r0, r6
 800c524:	f7f3 fedc 	bl	80002e0 <memchr>
 800c528:	b108      	cbz	r0, 800c52e <_printf_i+0x1e6>
 800c52a:	1b80      	subs	r0, r0, r6
 800c52c:	6060      	str	r0, [r4, #4]
 800c52e:	6863      	ldr	r3, [r4, #4]
 800c530:	6123      	str	r3, [r4, #16]
 800c532:	2300      	movs	r3, #0
 800c534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c538:	e7aa      	b.n	800c490 <_printf_i+0x148>
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	4632      	mov	r2, r6
 800c53e:	4649      	mov	r1, r9
 800c540:	4640      	mov	r0, r8
 800c542:	47d0      	blx	sl
 800c544:	3001      	adds	r0, #1
 800c546:	d0ad      	beq.n	800c4a4 <_printf_i+0x15c>
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	079b      	lsls	r3, r3, #30
 800c54c:	d413      	bmi.n	800c576 <_printf_i+0x22e>
 800c54e:	68e0      	ldr	r0, [r4, #12]
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	4298      	cmp	r0, r3
 800c554:	bfb8      	it	lt
 800c556:	4618      	movlt	r0, r3
 800c558:	e7a6      	b.n	800c4a8 <_printf_i+0x160>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4632      	mov	r2, r6
 800c55e:	4649      	mov	r1, r9
 800c560:	4640      	mov	r0, r8
 800c562:	47d0      	blx	sl
 800c564:	3001      	adds	r0, #1
 800c566:	d09d      	beq.n	800c4a4 <_printf_i+0x15c>
 800c568:	3501      	adds	r5, #1
 800c56a:	68e3      	ldr	r3, [r4, #12]
 800c56c:	9903      	ldr	r1, [sp, #12]
 800c56e:	1a5b      	subs	r3, r3, r1
 800c570:	42ab      	cmp	r3, r5
 800c572:	dcf2      	bgt.n	800c55a <_printf_i+0x212>
 800c574:	e7eb      	b.n	800c54e <_printf_i+0x206>
 800c576:	2500      	movs	r5, #0
 800c578:	f104 0619 	add.w	r6, r4, #25
 800c57c:	e7f5      	b.n	800c56a <_printf_i+0x222>
 800c57e:	bf00      	nop
 800c580:	0800f5da 	.word	0x0800f5da
 800c584:	0800f5eb 	.word	0x0800f5eb

0800c588 <std>:
 800c588:	2300      	movs	r3, #0
 800c58a:	b510      	push	{r4, lr}
 800c58c:	4604      	mov	r4, r0
 800c58e:	e9c0 3300 	strd	r3, r3, [r0]
 800c592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c596:	6083      	str	r3, [r0, #8]
 800c598:	8181      	strh	r1, [r0, #12]
 800c59a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c59c:	81c2      	strh	r2, [r0, #14]
 800c59e:	6183      	str	r3, [r0, #24]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	305c      	adds	r0, #92	@ 0x5c
 800c5a6:	f000 f914 	bl	800c7d2 <memset>
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <std+0x58>)
 800c5ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <std+0x5c>)
 800c5b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <std+0x60>)
 800c5b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ec <std+0x64>)
 800c5b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <std+0x68>)
 800c5bc:	6224      	str	r4, [r4, #32]
 800c5be:	429c      	cmp	r4, r3
 800c5c0:	d006      	beq.n	800c5d0 <std+0x48>
 800c5c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5c6:	4294      	cmp	r4, r2
 800c5c8:	d002      	beq.n	800c5d0 <std+0x48>
 800c5ca:	33d0      	adds	r3, #208	@ 0xd0
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	d105      	bne.n	800c5dc <std+0x54>
 800c5d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d8:	f000 b978 	b.w	800c8cc <__retarget_lock_init_recursive>
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	bf00      	nop
 800c5e0:	0800c74d 	.word	0x0800c74d
 800c5e4:	0800c76f 	.word	0x0800c76f
 800c5e8:	0800c7a7 	.word	0x0800c7a7
 800c5ec:	0800c7cb 	.word	0x0800c7cb
 800c5f0:	24002688 	.word	0x24002688

0800c5f4 <stdio_exit_handler>:
 800c5f4:	4a02      	ldr	r2, [pc, #8]	@ (800c600 <stdio_exit_handler+0xc>)
 800c5f6:	4903      	ldr	r1, [pc, #12]	@ (800c604 <stdio_exit_handler+0x10>)
 800c5f8:	4803      	ldr	r0, [pc, #12]	@ (800c608 <stdio_exit_handler+0x14>)
 800c5fa:	f000 b869 	b.w	800c6d0 <_fwalk_sglue>
 800c5fe:	bf00      	nop
 800c600:	24000014 	.word	0x24000014
 800c604:	0800e151 	.word	0x0800e151
 800c608:	24000024 	.word	0x24000024

0800c60c <cleanup_stdio>:
 800c60c:	6841      	ldr	r1, [r0, #4]
 800c60e:	4b0c      	ldr	r3, [pc, #48]	@ (800c640 <cleanup_stdio+0x34>)
 800c610:	4299      	cmp	r1, r3
 800c612:	b510      	push	{r4, lr}
 800c614:	4604      	mov	r4, r0
 800c616:	d001      	beq.n	800c61c <cleanup_stdio+0x10>
 800c618:	f001 fd9a 	bl	800e150 <_fflush_r>
 800c61c:	68a1      	ldr	r1, [r4, #8]
 800c61e:	4b09      	ldr	r3, [pc, #36]	@ (800c644 <cleanup_stdio+0x38>)
 800c620:	4299      	cmp	r1, r3
 800c622:	d002      	beq.n	800c62a <cleanup_stdio+0x1e>
 800c624:	4620      	mov	r0, r4
 800c626:	f001 fd93 	bl	800e150 <_fflush_r>
 800c62a:	68e1      	ldr	r1, [r4, #12]
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <cleanup_stdio+0x3c>)
 800c62e:	4299      	cmp	r1, r3
 800c630:	d004      	beq.n	800c63c <cleanup_stdio+0x30>
 800c632:	4620      	mov	r0, r4
 800c634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c638:	f001 bd8a 	b.w	800e150 <_fflush_r>
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	bf00      	nop
 800c640:	24002688 	.word	0x24002688
 800c644:	240026f0 	.word	0x240026f0
 800c648:	24002758 	.word	0x24002758

0800c64c <global_stdio_init.part.0>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4b0b      	ldr	r3, [pc, #44]	@ (800c67c <global_stdio_init.part.0+0x30>)
 800c650:	4c0b      	ldr	r4, [pc, #44]	@ (800c680 <global_stdio_init.part.0+0x34>)
 800c652:	4a0c      	ldr	r2, [pc, #48]	@ (800c684 <global_stdio_init.part.0+0x38>)
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	4620      	mov	r0, r4
 800c658:	2200      	movs	r2, #0
 800c65a:	2104      	movs	r1, #4
 800c65c:	f7ff ff94 	bl	800c588 <std>
 800c660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c664:	2201      	movs	r2, #1
 800c666:	2109      	movs	r1, #9
 800c668:	f7ff ff8e 	bl	800c588 <std>
 800c66c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c670:	2202      	movs	r2, #2
 800c672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c676:	2112      	movs	r1, #18
 800c678:	f7ff bf86 	b.w	800c588 <std>
 800c67c:	240027c0 	.word	0x240027c0
 800c680:	24002688 	.word	0x24002688
 800c684:	0800c5f5 	.word	0x0800c5f5

0800c688 <__sfp_lock_acquire>:
 800c688:	4801      	ldr	r0, [pc, #4]	@ (800c690 <__sfp_lock_acquire+0x8>)
 800c68a:	f000 b920 	b.w	800c8ce <__retarget_lock_acquire_recursive>
 800c68e:	bf00      	nop
 800c690:	240027c9 	.word	0x240027c9

0800c694 <__sfp_lock_release>:
 800c694:	4801      	ldr	r0, [pc, #4]	@ (800c69c <__sfp_lock_release+0x8>)
 800c696:	f000 b91b 	b.w	800c8d0 <__retarget_lock_release_recursive>
 800c69a:	bf00      	nop
 800c69c:	240027c9 	.word	0x240027c9

0800c6a0 <__sinit>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	f7ff fff0 	bl	800c688 <__sfp_lock_acquire>
 800c6a8:	6a23      	ldr	r3, [r4, #32]
 800c6aa:	b11b      	cbz	r3, 800c6b4 <__sinit+0x14>
 800c6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b0:	f7ff bff0 	b.w	800c694 <__sfp_lock_release>
 800c6b4:	4b04      	ldr	r3, [pc, #16]	@ (800c6c8 <__sinit+0x28>)
 800c6b6:	6223      	str	r3, [r4, #32]
 800c6b8:	4b04      	ldr	r3, [pc, #16]	@ (800c6cc <__sinit+0x2c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1f5      	bne.n	800c6ac <__sinit+0xc>
 800c6c0:	f7ff ffc4 	bl	800c64c <global_stdio_init.part.0>
 800c6c4:	e7f2      	b.n	800c6ac <__sinit+0xc>
 800c6c6:	bf00      	nop
 800c6c8:	0800c60d 	.word	0x0800c60d
 800c6cc:	240027c0 	.word	0x240027c0

0800c6d0 <_fwalk_sglue>:
 800c6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	4688      	mov	r8, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	2600      	movs	r6, #0
 800c6dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6e0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6e4:	d505      	bpl.n	800c6f2 <_fwalk_sglue+0x22>
 800c6e6:	6824      	ldr	r4, [r4, #0]
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	d1f7      	bne.n	800c6dc <_fwalk_sglue+0xc>
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	89ab      	ldrh	r3, [r5, #12]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d907      	bls.n	800c708 <_fwalk_sglue+0x38>
 800c6f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	d003      	beq.n	800c708 <_fwalk_sglue+0x38>
 800c700:	4629      	mov	r1, r5
 800c702:	4638      	mov	r0, r7
 800c704:	47c0      	blx	r8
 800c706:	4306      	orrs	r6, r0
 800c708:	3568      	adds	r5, #104	@ 0x68
 800c70a:	e7e9      	b.n	800c6e0 <_fwalk_sglue+0x10>

0800c70c <siprintf>:
 800c70c:	b40e      	push	{r1, r2, r3}
 800c70e:	b500      	push	{lr}
 800c710:	b09c      	sub	sp, #112	@ 0x70
 800c712:	ab1d      	add	r3, sp, #116	@ 0x74
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	9006      	str	r0, [sp, #24]
 800c718:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c71c:	4809      	ldr	r0, [pc, #36]	@ (800c744 <siprintf+0x38>)
 800c71e:	9107      	str	r1, [sp, #28]
 800c720:	9104      	str	r1, [sp, #16]
 800c722:	4909      	ldr	r1, [pc, #36]	@ (800c748 <siprintf+0x3c>)
 800c724:	f853 2b04 	ldr.w	r2, [r3], #4
 800c728:	9105      	str	r1, [sp, #20]
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	a902      	add	r1, sp, #8
 800c730:	f001 fb8e 	bl	800de50 <_svfiprintf_r>
 800c734:	9b02      	ldr	r3, [sp, #8]
 800c736:	2200      	movs	r2, #0
 800c738:	701a      	strb	r2, [r3, #0]
 800c73a:	b01c      	add	sp, #112	@ 0x70
 800c73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c740:	b003      	add	sp, #12
 800c742:	4770      	bx	lr
 800c744:	24000020 	.word	0x24000020
 800c748:	ffff0208 	.word	0xffff0208

0800c74c <__sread>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	460c      	mov	r4, r1
 800c750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c754:	f000 f86c 	bl	800c830 <_read_r>
 800c758:	2800      	cmp	r0, #0
 800c75a:	bfab      	itete	ge
 800c75c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c75e:	89a3      	ldrhlt	r3, [r4, #12]
 800c760:	181b      	addge	r3, r3, r0
 800c762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c766:	bfac      	ite	ge
 800c768:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c76a:	81a3      	strhlt	r3, [r4, #12]
 800c76c:	bd10      	pop	{r4, pc}

0800c76e <__swrite>:
 800c76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c772:	461f      	mov	r7, r3
 800c774:	898b      	ldrh	r3, [r1, #12]
 800c776:	05db      	lsls	r3, r3, #23
 800c778:	4605      	mov	r5, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	4616      	mov	r6, r2
 800c77e:	d505      	bpl.n	800c78c <__swrite+0x1e>
 800c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c784:	2302      	movs	r3, #2
 800c786:	2200      	movs	r2, #0
 800c788:	f000 f840 	bl	800c80c <_lseek_r>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	4632      	mov	r2, r6
 800c79a:	463b      	mov	r3, r7
 800c79c:	4628      	mov	r0, r5
 800c79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	f000 b857 	b.w	800c854 <_write_r>

0800c7a6 <__sseek>:
 800c7a6:	b510      	push	{r4, lr}
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ae:	f000 f82d 	bl	800c80c <_lseek_r>
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	bf15      	itete	ne
 800c7b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7c2:	81a3      	strheq	r3, [r4, #12]
 800c7c4:	bf18      	it	ne
 800c7c6:	81a3      	strhne	r3, [r4, #12]
 800c7c8:	bd10      	pop	{r4, pc}

0800c7ca <__sclose>:
 800c7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ce:	f000 b80d 	b.w	800c7ec <_close_r>

0800c7d2 <memset>:
 800c7d2:	4402      	add	r2, r0
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d100      	bne.n	800c7dc <memset+0xa>
 800c7da:	4770      	bx	lr
 800c7dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c7e0:	e7f9      	b.n	800c7d6 <memset+0x4>
	...

0800c7e4 <_localeconv_r>:
 800c7e4:	4800      	ldr	r0, [pc, #0]	@ (800c7e8 <_localeconv_r+0x4>)
 800c7e6:	4770      	bx	lr
 800c7e8:	24000160 	.word	0x24000160

0800c7ec <_close_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d06      	ldr	r5, [pc, #24]	@ (800c808 <_close_r+0x1c>)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	602b      	str	r3, [r5, #0]
 800c7f8:	f7f6 fba8 	bl	8002f4c <_close>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_close_r+0x1a>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_close_r+0x1a>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	240027c4 	.word	0x240027c4

0800c80c <_lseek_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	@ (800c82c <_lseek_r+0x20>)
 800c810:	4604      	mov	r4, r0
 800c812:	4608      	mov	r0, r1
 800c814:	4611      	mov	r1, r2
 800c816:	2200      	movs	r2, #0
 800c818:	602a      	str	r2, [r5, #0]
 800c81a:	461a      	mov	r2, r3
 800c81c:	f7f6 fbbd 	bl	8002f9a <_lseek>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_lseek_r+0x1e>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_lseek_r+0x1e>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	240027c4 	.word	0x240027c4

0800c830 <_read_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d07      	ldr	r5, [pc, #28]	@ (800c850 <_read_r+0x20>)
 800c834:	4604      	mov	r4, r0
 800c836:	4608      	mov	r0, r1
 800c838:	4611      	mov	r1, r2
 800c83a:	2200      	movs	r2, #0
 800c83c:	602a      	str	r2, [r5, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	f7f6 fb4b 	bl	8002eda <_read>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d102      	bne.n	800c84e <_read_r+0x1e>
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	b103      	cbz	r3, 800c84e <_read_r+0x1e>
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	240027c4 	.word	0x240027c4

0800c854 <_write_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d07      	ldr	r5, [pc, #28]	@ (800c874 <_write_r+0x20>)
 800c858:	4604      	mov	r4, r0
 800c85a:	4608      	mov	r0, r1
 800c85c:	4611      	mov	r1, r2
 800c85e:	2200      	movs	r2, #0
 800c860:	602a      	str	r2, [r5, #0]
 800c862:	461a      	mov	r2, r3
 800c864:	f7f6 fb56 	bl	8002f14 <_write>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_write_r+0x1e>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_write_r+0x1e>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	240027c4 	.word	0x240027c4

0800c878 <__errno>:
 800c878:	4b01      	ldr	r3, [pc, #4]	@ (800c880 <__errno+0x8>)
 800c87a:	6818      	ldr	r0, [r3, #0]
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	24000020 	.word	0x24000020

0800c884 <__libc_init_array>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	4d0d      	ldr	r5, [pc, #52]	@ (800c8bc <__libc_init_array+0x38>)
 800c888:	4c0d      	ldr	r4, [pc, #52]	@ (800c8c0 <__libc_init_array+0x3c>)
 800c88a:	1b64      	subs	r4, r4, r5
 800c88c:	10a4      	asrs	r4, r4, #2
 800c88e:	2600      	movs	r6, #0
 800c890:	42a6      	cmp	r6, r4
 800c892:	d109      	bne.n	800c8a8 <__libc_init_array+0x24>
 800c894:	4d0b      	ldr	r5, [pc, #44]	@ (800c8c4 <__libc_init_array+0x40>)
 800c896:	4c0c      	ldr	r4, [pc, #48]	@ (800c8c8 <__libc_init_array+0x44>)
 800c898:	f002 fdc6 	bl	800f428 <_init>
 800c89c:	1b64      	subs	r4, r4, r5
 800c89e:	10a4      	asrs	r4, r4, #2
 800c8a0:	2600      	movs	r6, #0
 800c8a2:	42a6      	cmp	r6, r4
 800c8a4:	d105      	bne.n	800c8b2 <__libc_init_array+0x2e>
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ac:	4798      	blx	r3
 800c8ae:	3601      	adds	r6, #1
 800c8b0:	e7ee      	b.n	800c890 <__libc_init_array+0xc>
 800c8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b6:	4798      	blx	r3
 800c8b8:	3601      	adds	r6, #1
 800c8ba:	e7f2      	b.n	800c8a2 <__libc_init_array+0x1e>
 800c8bc:	0800fb18 	.word	0x0800fb18
 800c8c0:	0800fb18 	.word	0x0800fb18
 800c8c4:	0800fb18 	.word	0x0800fb18
 800c8c8:	0800fb1c 	.word	0x0800fb1c

0800c8cc <__retarget_lock_init_recursive>:
 800c8cc:	4770      	bx	lr

0800c8ce <__retarget_lock_acquire_recursive>:
 800c8ce:	4770      	bx	lr

0800c8d0 <__retarget_lock_release_recursive>:
 800c8d0:	4770      	bx	lr

0800c8d2 <quorem>:
 800c8d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d6:	6903      	ldr	r3, [r0, #16]
 800c8d8:	690c      	ldr	r4, [r1, #16]
 800c8da:	42a3      	cmp	r3, r4
 800c8dc:	4607      	mov	r7, r0
 800c8de:	db7e      	blt.n	800c9de <quorem+0x10c>
 800c8e0:	3c01      	subs	r4, #1
 800c8e2:	f101 0814 	add.w	r8, r1, #20
 800c8e6:	00a3      	lsls	r3, r4, #2
 800c8e8:	f100 0514 	add.w	r5, r0, #20
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	429a      	cmp	r2, r3
 800c900:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c904:	fbb2 f6f3 	udiv	r6, r2, r3
 800c908:	d32e      	bcc.n	800c968 <quorem+0x96>
 800c90a:	f04f 0a00 	mov.w	sl, #0
 800c90e:	46c4      	mov	ip, r8
 800c910:	46ae      	mov	lr, r5
 800c912:	46d3      	mov	fp, sl
 800c914:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c918:	b298      	uxth	r0, r3
 800c91a:	fb06 a000 	mla	r0, r6, r0, sl
 800c91e:	0c02      	lsrs	r2, r0, #16
 800c920:	0c1b      	lsrs	r3, r3, #16
 800c922:	fb06 2303 	mla	r3, r6, r3, r2
 800c926:	f8de 2000 	ldr.w	r2, [lr]
 800c92a:	b280      	uxth	r0, r0
 800c92c:	b292      	uxth	r2, r2
 800c92e:	1a12      	subs	r2, r2, r0
 800c930:	445a      	add	r2, fp
 800c932:	f8de 0000 	ldr.w	r0, [lr]
 800c936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c940:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c944:	b292      	uxth	r2, r2
 800c946:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c94a:	45e1      	cmp	r9, ip
 800c94c:	f84e 2b04 	str.w	r2, [lr], #4
 800c950:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c954:	d2de      	bcs.n	800c914 <quorem+0x42>
 800c956:	9b00      	ldr	r3, [sp, #0]
 800c958:	58eb      	ldr	r3, [r5, r3]
 800c95a:	b92b      	cbnz	r3, 800c968 <quorem+0x96>
 800c95c:	9b01      	ldr	r3, [sp, #4]
 800c95e:	3b04      	subs	r3, #4
 800c960:	429d      	cmp	r5, r3
 800c962:	461a      	mov	r2, r3
 800c964:	d32f      	bcc.n	800c9c6 <quorem+0xf4>
 800c966:	613c      	str	r4, [r7, #16]
 800c968:	4638      	mov	r0, r7
 800c96a:	f001 f90d 	bl	800db88 <__mcmp>
 800c96e:	2800      	cmp	r0, #0
 800c970:	db25      	blt.n	800c9be <quorem+0xec>
 800c972:	4629      	mov	r1, r5
 800c974:	2000      	movs	r0, #0
 800c976:	f858 2b04 	ldr.w	r2, [r8], #4
 800c97a:	f8d1 c000 	ldr.w	ip, [r1]
 800c97e:	fa1f fe82 	uxth.w	lr, r2
 800c982:	fa1f f38c 	uxth.w	r3, ip
 800c986:	eba3 030e 	sub.w	r3, r3, lr
 800c98a:	4403      	add	r3, r0
 800c98c:	0c12      	lsrs	r2, r2, #16
 800c98e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c992:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c996:	b29b      	uxth	r3, r3
 800c998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c99c:	45c1      	cmp	r9, r8
 800c99e:	f841 3b04 	str.w	r3, [r1], #4
 800c9a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c9a6:	d2e6      	bcs.n	800c976 <quorem+0xa4>
 800c9a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9b0:	b922      	cbnz	r2, 800c9bc <quorem+0xea>
 800c9b2:	3b04      	subs	r3, #4
 800c9b4:	429d      	cmp	r5, r3
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	d30b      	bcc.n	800c9d2 <quorem+0x100>
 800c9ba:	613c      	str	r4, [r7, #16]
 800c9bc:	3601      	adds	r6, #1
 800c9be:	4630      	mov	r0, r6
 800c9c0:	b003      	add	sp, #12
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c6:	6812      	ldr	r2, [r2, #0]
 800c9c8:	3b04      	subs	r3, #4
 800c9ca:	2a00      	cmp	r2, #0
 800c9cc:	d1cb      	bne.n	800c966 <quorem+0x94>
 800c9ce:	3c01      	subs	r4, #1
 800c9d0:	e7c6      	b.n	800c960 <quorem+0x8e>
 800c9d2:	6812      	ldr	r2, [r2, #0]
 800c9d4:	3b04      	subs	r3, #4
 800c9d6:	2a00      	cmp	r2, #0
 800c9d8:	d1ef      	bne.n	800c9ba <quorem+0xe8>
 800c9da:	3c01      	subs	r4, #1
 800c9dc:	e7ea      	b.n	800c9b4 <quorem+0xe2>
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e7ee      	b.n	800c9c0 <quorem+0xee>
 800c9e2:	0000      	movs	r0, r0
 800c9e4:	0000      	movs	r0, r0
	...

0800c9e8 <_dtoa_r>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	ed2d 8b02 	vpush	{d8}
 800c9f0:	69c7      	ldr	r7, [r0, #28]
 800c9f2:	b091      	sub	sp, #68	@ 0x44
 800c9f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c9f8:	ec55 4b10 	vmov	r4, r5, d0
 800c9fc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c9fe:	9107      	str	r1, [sp, #28]
 800ca00:	4681      	mov	r9, r0
 800ca02:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca04:	930d      	str	r3, [sp, #52]	@ 0x34
 800ca06:	b97f      	cbnz	r7, 800ca28 <_dtoa_r+0x40>
 800ca08:	2010      	movs	r0, #16
 800ca0a:	f000 fd8d 	bl	800d528 <malloc>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	f8c9 001c 	str.w	r0, [r9, #28]
 800ca14:	b920      	cbnz	r0, 800ca20 <_dtoa_r+0x38>
 800ca16:	4ba0      	ldr	r3, [pc, #640]	@ (800cc98 <_dtoa_r+0x2b0>)
 800ca18:	21ef      	movs	r1, #239	@ 0xef
 800ca1a:	48a0      	ldr	r0, [pc, #640]	@ (800cc9c <_dtoa_r+0x2b4>)
 800ca1c:	f001 fbf8 	bl	800e210 <__assert_func>
 800ca20:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ca24:	6007      	str	r7, [r0, #0]
 800ca26:	60c7      	str	r7, [r0, #12]
 800ca28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca2c:	6819      	ldr	r1, [r3, #0]
 800ca2e:	b159      	cbz	r1, 800ca48 <_dtoa_r+0x60>
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	604a      	str	r2, [r1, #4]
 800ca34:	2301      	movs	r3, #1
 800ca36:	4093      	lsls	r3, r2
 800ca38:	608b      	str	r3, [r1, #8]
 800ca3a:	4648      	mov	r0, r9
 800ca3c:	f000 fe6a 	bl	800d714 <_Bfree>
 800ca40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca44:	2200      	movs	r2, #0
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	1e2b      	subs	r3, r5, #0
 800ca4a:	bfbb      	ittet	lt
 800ca4c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca50:	9303      	strlt	r3, [sp, #12]
 800ca52:	2300      	movge	r3, #0
 800ca54:	2201      	movlt	r2, #1
 800ca56:	bfac      	ite	ge
 800ca58:	6033      	strge	r3, [r6, #0]
 800ca5a:	6032      	strlt	r2, [r6, #0]
 800ca5c:	4b90      	ldr	r3, [pc, #576]	@ (800cca0 <_dtoa_r+0x2b8>)
 800ca5e:	9e03      	ldr	r6, [sp, #12]
 800ca60:	43b3      	bics	r3, r6
 800ca62:	d110      	bne.n	800ca86 <_dtoa_r+0x9e>
 800ca64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca66:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ca6a:	6013      	str	r3, [r2, #0]
 800ca6c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ca70:	4323      	orrs	r3, r4
 800ca72:	f000 84de 	beq.w	800d432 <_dtoa_r+0xa4a>
 800ca76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca78:	4f8a      	ldr	r7, [pc, #552]	@ (800cca4 <_dtoa_r+0x2bc>)
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 84e0 	beq.w	800d440 <_dtoa_r+0xa58>
 800ca80:	1cfb      	adds	r3, r7, #3
 800ca82:	f000 bcdb 	b.w	800d43c <_dtoa_r+0xa54>
 800ca86:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ca8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca92:	d10a      	bne.n	800caaa <_dtoa_r+0xc2>
 800ca94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca96:	2301      	movs	r3, #1
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca9c:	b113      	cbz	r3, 800caa4 <_dtoa_r+0xbc>
 800ca9e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800caa0:	4b81      	ldr	r3, [pc, #516]	@ (800cca8 <_dtoa_r+0x2c0>)
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	4f81      	ldr	r7, [pc, #516]	@ (800ccac <_dtoa_r+0x2c4>)
 800caa6:	f000 bccb 	b.w	800d440 <_dtoa_r+0xa58>
 800caaa:	aa0e      	add	r2, sp, #56	@ 0x38
 800caac:	a90f      	add	r1, sp, #60	@ 0x3c
 800caae:	4648      	mov	r0, r9
 800cab0:	eeb0 0b48 	vmov.f64	d0, d8
 800cab4:	f001 f918 	bl	800dce8 <__d2b>
 800cab8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cabc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cabe:	9001      	str	r0, [sp, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d045      	beq.n	800cb50 <_dtoa_r+0x168>
 800cac4:	eeb0 7b48 	vmov.f64	d7, d8
 800cac8:	ee18 1a90 	vmov	r1, s17
 800cacc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cad0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cad4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cad8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cadc:	2500      	movs	r5, #0
 800cade:	ee07 1a90 	vmov	s15, r1
 800cae2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cae6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cc80 <_dtoa_r+0x298>
 800caea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800caee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cc88 <_dtoa_r+0x2a0>
 800caf2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800caf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cc90 <_dtoa_r+0x2a8>
 800cafa:	ee07 3a90 	vmov	s15, r3
 800cafe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cb02:	eeb0 7b46 	vmov.f64	d7, d6
 800cb06:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cb0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cb0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb16:	ee16 8a90 	vmov	r8, s13
 800cb1a:	d508      	bpl.n	800cb2e <_dtoa_r+0x146>
 800cb1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cb20:	eeb4 6b47 	vcmp.f64	d6, d7
 800cb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb28:	bf18      	it	ne
 800cb2a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cb2e:	f1b8 0f16 	cmp.w	r8, #22
 800cb32:	d82b      	bhi.n	800cb8c <_dtoa_r+0x1a4>
 800cb34:	495e      	ldr	r1, [pc, #376]	@ (800ccb0 <_dtoa_r+0x2c8>)
 800cb36:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cb3a:	ed91 7b00 	vldr	d7, [r1]
 800cb3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb46:	d501      	bpl.n	800cb4c <_dtoa_r+0x164>
 800cb48:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	e01e      	b.n	800cb8e <_dtoa_r+0x1a6>
 800cb50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb52:	4413      	add	r3, r2
 800cb54:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cb58:	2920      	cmp	r1, #32
 800cb5a:	bfc1      	itttt	gt
 800cb5c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cb60:	408e      	lslgt	r6, r1
 800cb62:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cb66:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cb6a:	bfd6      	itet	le
 800cb6c:	f1c1 0120 	rsble	r1, r1, #32
 800cb70:	4331      	orrgt	r1, r6
 800cb72:	fa04 f101 	lslle.w	r1, r4, r1
 800cb76:	ee07 1a90 	vmov	s15, r1
 800cb7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	ee17 1a90 	vmov	r1, s15
 800cb84:	2501      	movs	r5, #1
 800cb86:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cb8a:	e7a8      	b.n	800cade <_dtoa_r+0xf6>
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	1e53      	subs	r3, r2, #1
 800cb92:	9306      	str	r3, [sp, #24]
 800cb94:	bf45      	ittet	mi
 800cb96:	f1c2 0301 	rsbmi	r3, r2, #1
 800cb9a:	9305      	strmi	r3, [sp, #20]
 800cb9c:	2300      	movpl	r3, #0
 800cb9e:	2300      	movmi	r3, #0
 800cba0:	bf4c      	ite	mi
 800cba2:	9306      	strmi	r3, [sp, #24]
 800cba4:	9305      	strpl	r3, [sp, #20]
 800cba6:	f1b8 0f00 	cmp.w	r8, #0
 800cbaa:	910c      	str	r1, [sp, #48]	@ 0x30
 800cbac:	db18      	blt.n	800cbe0 <_dtoa_r+0x1f8>
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cbb4:	4443      	add	r3, r8
 800cbb6:	9306      	str	r3, [sp, #24]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	9a07      	ldr	r2, [sp, #28]
 800cbbc:	2a09      	cmp	r2, #9
 800cbbe:	d849      	bhi.n	800cc54 <_dtoa_r+0x26c>
 800cbc0:	2a05      	cmp	r2, #5
 800cbc2:	bfc4      	itt	gt
 800cbc4:	3a04      	subgt	r2, #4
 800cbc6:	9207      	strgt	r2, [sp, #28]
 800cbc8:	9a07      	ldr	r2, [sp, #28]
 800cbca:	f1a2 0202 	sub.w	r2, r2, #2
 800cbce:	bfcc      	ite	gt
 800cbd0:	2400      	movgt	r4, #0
 800cbd2:	2401      	movle	r4, #1
 800cbd4:	2a03      	cmp	r2, #3
 800cbd6:	d848      	bhi.n	800cc6a <_dtoa_r+0x282>
 800cbd8:	e8df f002 	tbb	[pc, r2]
 800cbdc:	3a2c2e0b 	.word	0x3a2c2e0b
 800cbe0:	9b05      	ldr	r3, [sp, #20]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	eba3 0308 	sub.w	r3, r3, r8
 800cbe8:	9305      	str	r3, [sp, #20]
 800cbea:	920a      	str	r2, [sp, #40]	@ 0x28
 800cbec:	f1c8 0300 	rsb	r3, r8, #0
 800cbf0:	e7e3      	b.n	800cbba <_dtoa_r+0x1d2>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	9208      	str	r2, [sp, #32]
 800cbf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	dc39      	bgt.n	800cc70 <_dtoa_r+0x288>
 800cbfc:	f04f 0b01 	mov.w	fp, #1
 800cc00:	46da      	mov	sl, fp
 800cc02:	465a      	mov	r2, fp
 800cc04:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cc08:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	2004      	movs	r0, #4
 800cc10:	f100 0614 	add.w	r6, r0, #20
 800cc14:	4296      	cmp	r6, r2
 800cc16:	d930      	bls.n	800cc7a <_dtoa_r+0x292>
 800cc18:	6079      	str	r1, [r7, #4]
 800cc1a:	4648      	mov	r0, r9
 800cc1c:	9304      	str	r3, [sp, #16]
 800cc1e:	f000 fd39 	bl	800d694 <_Balloc>
 800cc22:	9b04      	ldr	r3, [sp, #16]
 800cc24:	4607      	mov	r7, r0
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d146      	bne.n	800ccb8 <_dtoa_r+0x2d0>
 800cc2a:	4b22      	ldr	r3, [pc, #136]	@ (800ccb4 <_dtoa_r+0x2cc>)
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	f240 11af 	movw	r1, #431	@ 0x1af
 800cc32:	e6f2      	b.n	800ca1a <_dtoa_r+0x32>
 800cc34:	2201      	movs	r2, #1
 800cc36:	e7dd      	b.n	800cbf4 <_dtoa_r+0x20c>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	9208      	str	r2, [sp, #32]
 800cc3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc3e:	eb08 0b02 	add.w	fp, r8, r2
 800cc42:	f10b 0a01 	add.w	sl, fp, #1
 800cc46:	4652      	mov	r2, sl
 800cc48:	2a01      	cmp	r2, #1
 800cc4a:	bfb8      	it	lt
 800cc4c:	2201      	movlt	r2, #1
 800cc4e:	e7db      	b.n	800cc08 <_dtoa_r+0x220>
 800cc50:	2201      	movs	r2, #1
 800cc52:	e7f2      	b.n	800cc3a <_dtoa_r+0x252>
 800cc54:	2401      	movs	r4, #1
 800cc56:	2200      	movs	r2, #0
 800cc58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cc5c:	f04f 3bff 	mov.w	fp, #4294967295
 800cc60:	2100      	movs	r1, #0
 800cc62:	46da      	mov	sl, fp
 800cc64:	2212      	movs	r2, #18
 800cc66:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc68:	e7ce      	b.n	800cc08 <_dtoa_r+0x220>
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	9208      	str	r2, [sp, #32]
 800cc6e:	e7f5      	b.n	800cc5c <_dtoa_r+0x274>
 800cc70:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cc74:	46da      	mov	sl, fp
 800cc76:	465a      	mov	r2, fp
 800cc78:	e7c6      	b.n	800cc08 <_dtoa_r+0x220>
 800cc7a:	3101      	adds	r1, #1
 800cc7c:	0040      	lsls	r0, r0, #1
 800cc7e:	e7c7      	b.n	800cc10 <_dtoa_r+0x228>
 800cc80:	636f4361 	.word	0x636f4361
 800cc84:	3fd287a7 	.word	0x3fd287a7
 800cc88:	8b60c8b3 	.word	0x8b60c8b3
 800cc8c:	3fc68a28 	.word	0x3fc68a28
 800cc90:	509f79fb 	.word	0x509f79fb
 800cc94:	3fd34413 	.word	0x3fd34413
 800cc98:	0800f609 	.word	0x0800f609
 800cc9c:	0800f620 	.word	0x0800f620
 800cca0:	7ff00000 	.word	0x7ff00000
 800cca4:	0800f605 	.word	0x0800f605
 800cca8:	0800f5d9 	.word	0x0800f5d9
 800ccac:	0800f5d8 	.word	0x0800f5d8
 800ccb0:	0800f718 	.word	0x0800f718
 800ccb4:	0800f678 	.word	0x0800f678
 800ccb8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ccbc:	f1ba 0f0e 	cmp.w	sl, #14
 800ccc0:	6010      	str	r0, [r2, #0]
 800ccc2:	d86f      	bhi.n	800cda4 <_dtoa_r+0x3bc>
 800ccc4:	2c00      	cmp	r4, #0
 800ccc6:	d06d      	beq.n	800cda4 <_dtoa_r+0x3bc>
 800ccc8:	f1b8 0f00 	cmp.w	r8, #0
 800cccc:	f340 80c2 	ble.w	800ce54 <_dtoa_r+0x46c>
 800ccd0:	4aca      	ldr	r2, [pc, #808]	@ (800cffc <_dtoa_r+0x614>)
 800ccd2:	f008 010f 	and.w	r1, r8, #15
 800ccd6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ccda:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ccde:	ed92 7b00 	vldr	d7, [r2]
 800cce2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cce6:	f000 80a9 	beq.w	800ce3c <_dtoa_r+0x454>
 800ccea:	4ac5      	ldr	r2, [pc, #788]	@ (800d000 <_dtoa_r+0x618>)
 800ccec:	ed92 6b08 	vldr	d6, [r2, #32]
 800ccf0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ccf4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ccf8:	f001 010f 	and.w	r1, r1, #15
 800ccfc:	2203      	movs	r2, #3
 800ccfe:	48c0      	ldr	r0, [pc, #768]	@ (800d000 <_dtoa_r+0x618>)
 800cd00:	2900      	cmp	r1, #0
 800cd02:	f040 809d 	bne.w	800ce40 <_dtoa_r+0x458>
 800cd06:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cd0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	f000 80c1 	beq.w	800cea0 <_dtoa_r+0x4b8>
 800cd1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cd22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2a:	f140 80b9 	bpl.w	800cea0 <_dtoa_r+0x4b8>
 800cd2e:	f1ba 0f00 	cmp.w	sl, #0
 800cd32:	f000 80b5 	beq.w	800cea0 <_dtoa_r+0x4b8>
 800cd36:	f1bb 0f00 	cmp.w	fp, #0
 800cd3a:	dd31      	ble.n	800cda0 <_dtoa_r+0x3b8>
 800cd3c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800cd40:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd48:	f108 31ff 	add.w	r1, r8, #4294967295
 800cd4c:	9104      	str	r1, [sp, #16]
 800cd4e:	3201      	adds	r2, #1
 800cd50:	465c      	mov	r4, fp
 800cd52:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd56:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800cd5a:	ee07 2a90 	vmov	s15, r2
 800cd5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd62:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cd66:	ee15 2a90 	vmov	r2, s11
 800cd6a:	ec51 0b15 	vmov	r0, r1, d5
 800cd6e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800cd72:	2c00      	cmp	r4, #0
 800cd74:	f040 8098 	bne.w	800cea8 <_dtoa_r+0x4c0>
 800cd78:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cd7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cd80:	ec41 0b17 	vmov	d7, r0, r1
 800cd84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8c:	f300 8261 	bgt.w	800d252 <_dtoa_r+0x86a>
 800cd90:	eeb1 7b47 	vneg.f64	d7, d7
 800cd94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9c:	f100 80f5 	bmi.w	800cf8a <_dtoa_r+0x5a2>
 800cda0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cda4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	f2c0 812c 	blt.w	800d004 <_dtoa_r+0x61c>
 800cdac:	f1b8 0f0e 	cmp.w	r8, #14
 800cdb0:	f300 8128 	bgt.w	800d004 <_dtoa_r+0x61c>
 800cdb4:	4b91      	ldr	r3, [pc, #580]	@ (800cffc <_dtoa_r+0x614>)
 800cdb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cdba:	ed93 6b00 	vldr	d6, [r3]
 800cdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	da03      	bge.n	800cdcc <_dtoa_r+0x3e4>
 800cdc4:	f1ba 0f00 	cmp.w	sl, #0
 800cdc8:	f340 80d2 	ble.w	800cf70 <_dtoa_r+0x588>
 800cdcc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cdd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdd4:	463e      	mov	r6, r7
 800cdd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cdda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cdde:	ee15 3a10 	vmov	r3, s10
 800cde2:	3330      	adds	r3, #48	@ 0x30
 800cde4:	f806 3b01 	strb.w	r3, [r6], #1
 800cde8:	1bf3      	subs	r3, r6, r7
 800cdea:	459a      	cmp	sl, r3
 800cdec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cdf0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cdf4:	f040 80f8 	bne.w	800cfe8 <_dtoa_r+0x600>
 800cdf8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cdfc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ce00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce04:	f300 80dd 	bgt.w	800cfc2 <_dtoa_r+0x5da>
 800ce08:	eeb4 7b46 	vcmp.f64	d7, d6
 800ce0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce10:	d104      	bne.n	800ce1c <_dtoa_r+0x434>
 800ce12:	ee15 3a10 	vmov	r3, s10
 800ce16:	07db      	lsls	r3, r3, #31
 800ce18:	f100 80d3 	bmi.w	800cfc2 <_dtoa_r+0x5da>
 800ce1c:	9901      	ldr	r1, [sp, #4]
 800ce1e:	4648      	mov	r0, r9
 800ce20:	f000 fc78 	bl	800d714 <_Bfree>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce28:	7033      	strb	r3, [r6, #0]
 800ce2a:	f108 0301 	add.w	r3, r8, #1
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f000 8304 	beq.w	800d440 <_dtoa_r+0xa58>
 800ce38:	601e      	str	r6, [r3, #0]
 800ce3a:	e301      	b.n	800d440 <_dtoa_r+0xa58>
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	e75e      	b.n	800ccfe <_dtoa_r+0x316>
 800ce40:	07cc      	lsls	r4, r1, #31
 800ce42:	d504      	bpl.n	800ce4e <_dtoa_r+0x466>
 800ce44:	ed90 6b00 	vldr	d6, [r0]
 800ce48:	3201      	adds	r2, #1
 800ce4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce4e:	1049      	asrs	r1, r1, #1
 800ce50:	3008      	adds	r0, #8
 800ce52:	e755      	b.n	800cd00 <_dtoa_r+0x318>
 800ce54:	d022      	beq.n	800ce9c <_dtoa_r+0x4b4>
 800ce56:	f1c8 0100 	rsb	r1, r8, #0
 800ce5a:	4a68      	ldr	r2, [pc, #416]	@ (800cffc <_dtoa_r+0x614>)
 800ce5c:	f001 000f 	and.w	r0, r1, #15
 800ce60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce64:	ed92 7b00 	vldr	d7, [r2]
 800ce68:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ce6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce70:	4863      	ldr	r0, [pc, #396]	@ (800d000 <_dtoa_r+0x618>)
 800ce72:	1109      	asrs	r1, r1, #4
 800ce74:	2400      	movs	r4, #0
 800ce76:	2202      	movs	r2, #2
 800ce78:	b929      	cbnz	r1, 800ce86 <_dtoa_r+0x49e>
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	f43f af49 	beq.w	800cd12 <_dtoa_r+0x32a>
 800ce80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce84:	e745      	b.n	800cd12 <_dtoa_r+0x32a>
 800ce86:	07ce      	lsls	r6, r1, #31
 800ce88:	d505      	bpl.n	800ce96 <_dtoa_r+0x4ae>
 800ce8a:	ed90 6b00 	vldr	d6, [r0]
 800ce8e:	3201      	adds	r2, #1
 800ce90:	2401      	movs	r4, #1
 800ce92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce96:	1049      	asrs	r1, r1, #1
 800ce98:	3008      	adds	r0, #8
 800ce9a:	e7ed      	b.n	800ce78 <_dtoa_r+0x490>
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	e738      	b.n	800cd12 <_dtoa_r+0x32a>
 800cea0:	f8cd 8010 	str.w	r8, [sp, #16]
 800cea4:	4654      	mov	r4, sl
 800cea6:	e754      	b.n	800cd52 <_dtoa_r+0x36a>
 800cea8:	4a54      	ldr	r2, [pc, #336]	@ (800cffc <_dtoa_r+0x614>)
 800ceaa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ceae:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ceb2:	9a08      	ldr	r2, [sp, #32]
 800ceb4:	ec41 0b17 	vmov	d7, r0, r1
 800ceb8:	443c      	add	r4, r7
 800ceba:	b34a      	cbz	r2, 800cf10 <_dtoa_r+0x528>
 800cebc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cec0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cec4:	463e      	mov	r6, r7
 800cec6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ceca:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cece:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ced2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ced6:	ee14 2a90 	vmov	r2, s9
 800ceda:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cede:	3230      	adds	r2, #48	@ 0x30
 800cee0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cee4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceec:	f806 2b01 	strb.w	r2, [r6], #1
 800cef0:	d438      	bmi.n	800cf64 <_dtoa_r+0x57c>
 800cef2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cef6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefe:	d462      	bmi.n	800cfc6 <_dtoa_r+0x5de>
 800cf00:	42a6      	cmp	r6, r4
 800cf02:	f43f af4d 	beq.w	800cda0 <_dtoa_r+0x3b8>
 800cf06:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cf0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf0e:	e7e0      	b.n	800ced2 <_dtoa_r+0x4ea>
 800cf10:	4621      	mov	r1, r4
 800cf12:	463e      	mov	r6, r7
 800cf14:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf18:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cf1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf20:	ee14 2a90 	vmov	r2, s9
 800cf24:	3230      	adds	r2, #48	@ 0x30
 800cf26:	f806 2b01 	strb.w	r2, [r6], #1
 800cf2a:	42a6      	cmp	r6, r4
 800cf2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf30:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf34:	d119      	bne.n	800cf6a <_dtoa_r+0x582>
 800cf36:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cf3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cf3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf46:	dc3e      	bgt.n	800cfc6 <_dtoa_r+0x5de>
 800cf48:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cf4c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf54:	f57f af24 	bpl.w	800cda0 <_dtoa_r+0x3b8>
 800cf58:	460e      	mov	r6, r1
 800cf5a:	3901      	subs	r1, #1
 800cf5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf60:	2b30      	cmp	r3, #48	@ 0x30
 800cf62:	d0f9      	beq.n	800cf58 <_dtoa_r+0x570>
 800cf64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf68:	e758      	b.n	800ce1c <_dtoa_r+0x434>
 800cf6a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf6e:	e7d5      	b.n	800cf1c <_dtoa_r+0x534>
 800cf70:	d10b      	bne.n	800cf8a <_dtoa_r+0x5a2>
 800cf72:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cf76:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cf7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf86:	f2c0 8161 	blt.w	800d24c <_dtoa_r+0x864>
 800cf8a:	2400      	movs	r4, #0
 800cf8c:	4625      	mov	r5, r4
 800cf8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf90:	43db      	mvns	r3, r3
 800cf92:	9304      	str	r3, [sp, #16]
 800cf94:	463e      	mov	r6, r7
 800cf96:	f04f 0800 	mov.w	r8, #0
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4648      	mov	r0, r9
 800cf9e:	f000 fbb9 	bl	800d714 <_Bfree>
 800cfa2:	2d00      	cmp	r5, #0
 800cfa4:	d0de      	beq.n	800cf64 <_dtoa_r+0x57c>
 800cfa6:	f1b8 0f00 	cmp.w	r8, #0
 800cfaa:	d005      	beq.n	800cfb8 <_dtoa_r+0x5d0>
 800cfac:	45a8      	cmp	r8, r5
 800cfae:	d003      	beq.n	800cfb8 <_dtoa_r+0x5d0>
 800cfb0:	4641      	mov	r1, r8
 800cfb2:	4648      	mov	r0, r9
 800cfb4:	f000 fbae 	bl	800d714 <_Bfree>
 800cfb8:	4629      	mov	r1, r5
 800cfba:	4648      	mov	r0, r9
 800cfbc:	f000 fbaa 	bl	800d714 <_Bfree>
 800cfc0:	e7d0      	b.n	800cf64 <_dtoa_r+0x57c>
 800cfc2:	f8cd 8010 	str.w	r8, [sp, #16]
 800cfc6:	4633      	mov	r3, r6
 800cfc8:	461e      	mov	r6, r3
 800cfca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfce:	2a39      	cmp	r2, #57	@ 0x39
 800cfd0:	d106      	bne.n	800cfe0 <_dtoa_r+0x5f8>
 800cfd2:	429f      	cmp	r7, r3
 800cfd4:	d1f8      	bne.n	800cfc8 <_dtoa_r+0x5e0>
 800cfd6:	9a04      	ldr	r2, [sp, #16]
 800cfd8:	3201      	adds	r2, #1
 800cfda:	9204      	str	r2, [sp, #16]
 800cfdc:	2230      	movs	r2, #48	@ 0x30
 800cfde:	703a      	strb	r2, [r7, #0]
 800cfe0:	781a      	ldrb	r2, [r3, #0]
 800cfe2:	3201      	adds	r2, #1
 800cfe4:	701a      	strb	r2, [r3, #0]
 800cfe6:	e7bd      	b.n	800cf64 <_dtoa_r+0x57c>
 800cfe8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	f47f aeef 	bne.w	800cdd6 <_dtoa_r+0x3ee>
 800cff8:	e710      	b.n	800ce1c <_dtoa_r+0x434>
 800cffa:	bf00      	nop
 800cffc:	0800f718 	.word	0x0800f718
 800d000:	0800f6f0 	.word	0x0800f6f0
 800d004:	9908      	ldr	r1, [sp, #32]
 800d006:	2900      	cmp	r1, #0
 800d008:	f000 80e3 	beq.w	800d1d2 <_dtoa_r+0x7ea>
 800d00c:	9907      	ldr	r1, [sp, #28]
 800d00e:	2901      	cmp	r1, #1
 800d010:	f300 80c8 	bgt.w	800d1a4 <_dtoa_r+0x7bc>
 800d014:	2d00      	cmp	r5, #0
 800d016:	f000 80c1 	beq.w	800d19c <_dtoa_r+0x7b4>
 800d01a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d01e:	9e05      	ldr	r6, [sp, #20]
 800d020:	461c      	mov	r4, r3
 800d022:	9304      	str	r3, [sp, #16]
 800d024:	9b05      	ldr	r3, [sp, #20]
 800d026:	4413      	add	r3, r2
 800d028:	9305      	str	r3, [sp, #20]
 800d02a:	9b06      	ldr	r3, [sp, #24]
 800d02c:	2101      	movs	r1, #1
 800d02e:	4413      	add	r3, r2
 800d030:	4648      	mov	r0, r9
 800d032:	9306      	str	r3, [sp, #24]
 800d034:	f000 fc22 	bl	800d87c <__i2b>
 800d038:	9b04      	ldr	r3, [sp, #16]
 800d03a:	4605      	mov	r5, r0
 800d03c:	b166      	cbz	r6, 800d058 <_dtoa_r+0x670>
 800d03e:	9a06      	ldr	r2, [sp, #24]
 800d040:	2a00      	cmp	r2, #0
 800d042:	dd09      	ble.n	800d058 <_dtoa_r+0x670>
 800d044:	42b2      	cmp	r2, r6
 800d046:	9905      	ldr	r1, [sp, #20]
 800d048:	bfa8      	it	ge
 800d04a:	4632      	movge	r2, r6
 800d04c:	1a89      	subs	r1, r1, r2
 800d04e:	9105      	str	r1, [sp, #20]
 800d050:	9906      	ldr	r1, [sp, #24]
 800d052:	1ab6      	subs	r6, r6, r2
 800d054:	1a8a      	subs	r2, r1, r2
 800d056:	9206      	str	r2, [sp, #24]
 800d058:	b1fb      	cbz	r3, 800d09a <_dtoa_r+0x6b2>
 800d05a:	9a08      	ldr	r2, [sp, #32]
 800d05c:	2a00      	cmp	r2, #0
 800d05e:	f000 80bc 	beq.w	800d1da <_dtoa_r+0x7f2>
 800d062:	b19c      	cbz	r4, 800d08c <_dtoa_r+0x6a4>
 800d064:	4629      	mov	r1, r5
 800d066:	4622      	mov	r2, r4
 800d068:	4648      	mov	r0, r9
 800d06a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d06c:	f000 fcc6 	bl	800d9fc <__pow5mult>
 800d070:	9a01      	ldr	r2, [sp, #4]
 800d072:	4601      	mov	r1, r0
 800d074:	4605      	mov	r5, r0
 800d076:	4648      	mov	r0, r9
 800d078:	f000 fc16 	bl	800d8a8 <__multiply>
 800d07c:	9901      	ldr	r1, [sp, #4]
 800d07e:	9004      	str	r0, [sp, #16]
 800d080:	4648      	mov	r0, r9
 800d082:	f000 fb47 	bl	800d714 <_Bfree>
 800d086:	9a04      	ldr	r2, [sp, #16]
 800d088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d08a:	9201      	str	r2, [sp, #4]
 800d08c:	1b1a      	subs	r2, r3, r4
 800d08e:	d004      	beq.n	800d09a <_dtoa_r+0x6b2>
 800d090:	9901      	ldr	r1, [sp, #4]
 800d092:	4648      	mov	r0, r9
 800d094:	f000 fcb2 	bl	800d9fc <__pow5mult>
 800d098:	9001      	str	r0, [sp, #4]
 800d09a:	2101      	movs	r1, #1
 800d09c:	4648      	mov	r0, r9
 800d09e:	f000 fbed 	bl	800d87c <__i2b>
 800d0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0a4:	4604      	mov	r4, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 81d0 	beq.w	800d44c <_dtoa_r+0xa64>
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4601      	mov	r1, r0
 800d0b0:	4648      	mov	r0, r9
 800d0b2:	f000 fca3 	bl	800d9fc <__pow5mult>
 800d0b6:	9b07      	ldr	r3, [sp, #28]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	f300 8095 	bgt.w	800d1ea <_dtoa_r+0x802>
 800d0c0:	9b02      	ldr	r3, [sp, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 808b 	bne.w	800d1de <_dtoa_r+0x7f6>
 800d0c8:	9b03      	ldr	r3, [sp, #12]
 800d0ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	f040 8087 	bne.w	800d1e2 <_dtoa_r+0x7fa>
 800d0d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d0d8:	0d12      	lsrs	r2, r2, #20
 800d0da:	0512      	lsls	r2, r2, #20
 800d0dc:	2a00      	cmp	r2, #0
 800d0de:	f000 8082 	beq.w	800d1e6 <_dtoa_r+0x7fe>
 800d0e2:	9b05      	ldr	r3, [sp, #20]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	9305      	str	r3, [sp, #20]
 800d0e8:	9b06      	ldr	r3, [sp, #24]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	9306      	str	r3, [sp, #24]
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 81af 	beq.w	800d458 <_dtoa_r+0xa70>
 800d0fa:	6922      	ldr	r2, [r4, #16]
 800d0fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d100:	6910      	ldr	r0, [r2, #16]
 800d102:	f000 fb6f 	bl	800d7e4 <__hi0bits>
 800d106:	f1c0 0020 	rsb	r0, r0, #32
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	4418      	add	r0, r3
 800d10e:	f010 001f 	ands.w	r0, r0, #31
 800d112:	d076      	beq.n	800d202 <_dtoa_r+0x81a>
 800d114:	f1c0 0220 	rsb	r2, r0, #32
 800d118:	2a04      	cmp	r2, #4
 800d11a:	dd69      	ble.n	800d1f0 <_dtoa_r+0x808>
 800d11c:	9b05      	ldr	r3, [sp, #20]
 800d11e:	f1c0 001c 	rsb	r0, r0, #28
 800d122:	4403      	add	r3, r0
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	9b06      	ldr	r3, [sp, #24]
 800d128:	4406      	add	r6, r0
 800d12a:	4403      	add	r3, r0
 800d12c:	9306      	str	r3, [sp, #24]
 800d12e:	9b05      	ldr	r3, [sp, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	dd05      	ble.n	800d140 <_dtoa_r+0x758>
 800d134:	9901      	ldr	r1, [sp, #4]
 800d136:	461a      	mov	r2, r3
 800d138:	4648      	mov	r0, r9
 800d13a:	f000 fcb9 	bl	800dab0 <__lshift>
 800d13e:	9001      	str	r0, [sp, #4]
 800d140:	9b06      	ldr	r3, [sp, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	dd05      	ble.n	800d152 <_dtoa_r+0x76a>
 800d146:	4621      	mov	r1, r4
 800d148:	461a      	mov	r2, r3
 800d14a:	4648      	mov	r0, r9
 800d14c:	f000 fcb0 	bl	800dab0 <__lshift>
 800d150:	4604      	mov	r4, r0
 800d152:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d154:	2b00      	cmp	r3, #0
 800d156:	d056      	beq.n	800d206 <_dtoa_r+0x81e>
 800d158:	9801      	ldr	r0, [sp, #4]
 800d15a:	4621      	mov	r1, r4
 800d15c:	f000 fd14 	bl	800db88 <__mcmp>
 800d160:	2800      	cmp	r0, #0
 800d162:	da50      	bge.n	800d206 <_dtoa_r+0x81e>
 800d164:	f108 33ff 	add.w	r3, r8, #4294967295
 800d168:	9304      	str	r3, [sp, #16]
 800d16a:	9901      	ldr	r1, [sp, #4]
 800d16c:	2300      	movs	r3, #0
 800d16e:	220a      	movs	r2, #10
 800d170:	4648      	mov	r0, r9
 800d172:	f000 faf1 	bl	800d758 <__multadd>
 800d176:	9b08      	ldr	r3, [sp, #32]
 800d178:	9001      	str	r0, [sp, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 816e 	beq.w	800d45c <_dtoa_r+0xa74>
 800d180:	4629      	mov	r1, r5
 800d182:	2300      	movs	r3, #0
 800d184:	220a      	movs	r2, #10
 800d186:	4648      	mov	r0, r9
 800d188:	f000 fae6 	bl	800d758 <__multadd>
 800d18c:	f1bb 0f00 	cmp.w	fp, #0
 800d190:	4605      	mov	r5, r0
 800d192:	dc64      	bgt.n	800d25e <_dtoa_r+0x876>
 800d194:	9b07      	ldr	r3, [sp, #28]
 800d196:	2b02      	cmp	r3, #2
 800d198:	dc3e      	bgt.n	800d218 <_dtoa_r+0x830>
 800d19a:	e060      	b.n	800d25e <_dtoa_r+0x876>
 800d19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d19e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d1a2:	e73c      	b.n	800d01e <_dtoa_r+0x636>
 800d1a4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	bfbf      	itttt	lt
 800d1ac:	1ae2      	sublt	r2, r4, r3
 800d1ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d1b0:	189b      	addlt	r3, r3, r2
 800d1b2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d1b4:	bfae      	itee	ge
 800d1b6:	1b1c      	subge	r4, r3, r4
 800d1b8:	4623      	movlt	r3, r4
 800d1ba:	2400      	movlt	r4, #0
 800d1bc:	f1ba 0f00 	cmp.w	sl, #0
 800d1c0:	bfb5      	itete	lt
 800d1c2:	9a05      	ldrlt	r2, [sp, #20]
 800d1c4:	9e05      	ldrge	r6, [sp, #20]
 800d1c6:	eba2 060a 	sublt.w	r6, r2, sl
 800d1ca:	4652      	movge	r2, sl
 800d1cc:	bfb8      	it	lt
 800d1ce:	2200      	movlt	r2, #0
 800d1d0:	e727      	b.n	800d022 <_dtoa_r+0x63a>
 800d1d2:	9e05      	ldr	r6, [sp, #20]
 800d1d4:	9d08      	ldr	r5, [sp, #32]
 800d1d6:	461c      	mov	r4, r3
 800d1d8:	e730      	b.n	800d03c <_dtoa_r+0x654>
 800d1da:	461a      	mov	r2, r3
 800d1dc:	e758      	b.n	800d090 <_dtoa_r+0x6a8>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e786      	b.n	800d0f0 <_dtoa_r+0x708>
 800d1e2:	9b02      	ldr	r3, [sp, #8]
 800d1e4:	e784      	b.n	800d0f0 <_dtoa_r+0x708>
 800d1e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d1e8:	e783      	b.n	800d0f2 <_dtoa_r+0x70a>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1ee:	e784      	b.n	800d0fa <_dtoa_r+0x712>
 800d1f0:	d09d      	beq.n	800d12e <_dtoa_r+0x746>
 800d1f2:	9b05      	ldr	r3, [sp, #20]
 800d1f4:	321c      	adds	r2, #28
 800d1f6:	4413      	add	r3, r2
 800d1f8:	9305      	str	r3, [sp, #20]
 800d1fa:	9b06      	ldr	r3, [sp, #24]
 800d1fc:	4416      	add	r6, r2
 800d1fe:	4413      	add	r3, r2
 800d200:	e794      	b.n	800d12c <_dtoa_r+0x744>
 800d202:	4602      	mov	r2, r0
 800d204:	e7f5      	b.n	800d1f2 <_dtoa_r+0x80a>
 800d206:	f1ba 0f00 	cmp.w	sl, #0
 800d20a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d20e:	46d3      	mov	fp, sl
 800d210:	dc21      	bgt.n	800d256 <_dtoa_r+0x86e>
 800d212:	9b07      	ldr	r3, [sp, #28]
 800d214:	2b02      	cmp	r3, #2
 800d216:	dd1e      	ble.n	800d256 <_dtoa_r+0x86e>
 800d218:	f1bb 0f00 	cmp.w	fp, #0
 800d21c:	f47f aeb7 	bne.w	800cf8e <_dtoa_r+0x5a6>
 800d220:	4621      	mov	r1, r4
 800d222:	465b      	mov	r3, fp
 800d224:	2205      	movs	r2, #5
 800d226:	4648      	mov	r0, r9
 800d228:	f000 fa96 	bl	800d758 <__multadd>
 800d22c:	4601      	mov	r1, r0
 800d22e:	4604      	mov	r4, r0
 800d230:	9801      	ldr	r0, [sp, #4]
 800d232:	f000 fca9 	bl	800db88 <__mcmp>
 800d236:	2800      	cmp	r0, #0
 800d238:	f77f aea9 	ble.w	800cf8e <_dtoa_r+0x5a6>
 800d23c:	463e      	mov	r6, r7
 800d23e:	2331      	movs	r3, #49	@ 0x31
 800d240:	f806 3b01 	strb.w	r3, [r6], #1
 800d244:	9b04      	ldr	r3, [sp, #16]
 800d246:	3301      	adds	r3, #1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	e6a4      	b.n	800cf96 <_dtoa_r+0x5ae>
 800d24c:	f8cd 8010 	str.w	r8, [sp, #16]
 800d250:	4654      	mov	r4, sl
 800d252:	4625      	mov	r5, r4
 800d254:	e7f2      	b.n	800d23c <_dtoa_r+0x854>
 800d256:	9b08      	ldr	r3, [sp, #32]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 8103 	beq.w	800d464 <_dtoa_r+0xa7c>
 800d25e:	2e00      	cmp	r6, #0
 800d260:	dd05      	ble.n	800d26e <_dtoa_r+0x886>
 800d262:	4629      	mov	r1, r5
 800d264:	4632      	mov	r2, r6
 800d266:	4648      	mov	r0, r9
 800d268:	f000 fc22 	bl	800dab0 <__lshift>
 800d26c:	4605      	mov	r5, r0
 800d26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d058      	beq.n	800d326 <_dtoa_r+0x93e>
 800d274:	6869      	ldr	r1, [r5, #4]
 800d276:	4648      	mov	r0, r9
 800d278:	f000 fa0c 	bl	800d694 <_Balloc>
 800d27c:	4606      	mov	r6, r0
 800d27e:	b928      	cbnz	r0, 800d28c <_dtoa_r+0x8a4>
 800d280:	4b82      	ldr	r3, [pc, #520]	@ (800d48c <_dtoa_r+0xaa4>)
 800d282:	4602      	mov	r2, r0
 800d284:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d288:	f7ff bbc7 	b.w	800ca1a <_dtoa_r+0x32>
 800d28c:	692a      	ldr	r2, [r5, #16]
 800d28e:	3202      	adds	r2, #2
 800d290:	0092      	lsls	r2, r2, #2
 800d292:	f105 010c 	add.w	r1, r5, #12
 800d296:	300c      	adds	r0, #12
 800d298:	f000 ffac 	bl	800e1f4 <memcpy>
 800d29c:	2201      	movs	r2, #1
 800d29e:	4631      	mov	r1, r6
 800d2a0:	4648      	mov	r0, r9
 800d2a2:	f000 fc05 	bl	800dab0 <__lshift>
 800d2a6:	1c7b      	adds	r3, r7, #1
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	eb07 030b 	add.w	r3, r7, fp
 800d2ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b0:	9b02      	ldr	r3, [sp, #8]
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	46a8      	mov	r8, r5
 800d2b8:	9308      	str	r3, [sp, #32]
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	9b05      	ldr	r3, [sp, #20]
 800d2be:	9801      	ldr	r0, [sp, #4]
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	f103 3bff 	add.w	fp, r3, #4294967295
 800d2c6:	f7ff fb04 	bl	800c8d2 <quorem>
 800d2ca:	4641      	mov	r1, r8
 800d2cc:	9002      	str	r0, [sp, #8]
 800d2ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d2d2:	9801      	ldr	r0, [sp, #4]
 800d2d4:	f000 fc58 	bl	800db88 <__mcmp>
 800d2d8:	462a      	mov	r2, r5
 800d2da:	9006      	str	r0, [sp, #24]
 800d2dc:	4621      	mov	r1, r4
 800d2de:	4648      	mov	r0, r9
 800d2e0:	f000 fc6e 	bl	800dbc0 <__mdiff>
 800d2e4:	68c2      	ldr	r2, [r0, #12]
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	b9fa      	cbnz	r2, 800d32a <_dtoa_r+0x942>
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	9801      	ldr	r0, [sp, #4]
 800d2ee:	f000 fc4b 	bl	800db88 <__mcmp>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4648      	mov	r0, r9
 800d2f8:	920a      	str	r2, [sp, #40]	@ 0x28
 800d2fa:	f000 fa0b 	bl	800d714 <_Bfree>
 800d2fe:	9b07      	ldr	r3, [sp, #28]
 800d300:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d302:	9e05      	ldr	r6, [sp, #20]
 800d304:	ea43 0102 	orr.w	r1, r3, r2
 800d308:	9b08      	ldr	r3, [sp, #32]
 800d30a:	4319      	orrs	r1, r3
 800d30c:	d10f      	bne.n	800d32e <_dtoa_r+0x946>
 800d30e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d312:	d028      	beq.n	800d366 <_dtoa_r+0x97e>
 800d314:	9b06      	ldr	r3, [sp, #24]
 800d316:	2b00      	cmp	r3, #0
 800d318:	dd02      	ble.n	800d320 <_dtoa_r+0x938>
 800d31a:	9b02      	ldr	r3, [sp, #8]
 800d31c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d320:	f88b a000 	strb.w	sl, [fp]
 800d324:	e639      	b.n	800cf9a <_dtoa_r+0x5b2>
 800d326:	4628      	mov	r0, r5
 800d328:	e7bd      	b.n	800d2a6 <_dtoa_r+0x8be>
 800d32a:	2201      	movs	r2, #1
 800d32c:	e7e2      	b.n	800d2f4 <_dtoa_r+0x90c>
 800d32e:	9b06      	ldr	r3, [sp, #24]
 800d330:	2b00      	cmp	r3, #0
 800d332:	db04      	blt.n	800d33e <_dtoa_r+0x956>
 800d334:	9907      	ldr	r1, [sp, #28]
 800d336:	430b      	orrs	r3, r1
 800d338:	9908      	ldr	r1, [sp, #32]
 800d33a:	430b      	orrs	r3, r1
 800d33c:	d120      	bne.n	800d380 <_dtoa_r+0x998>
 800d33e:	2a00      	cmp	r2, #0
 800d340:	ddee      	ble.n	800d320 <_dtoa_r+0x938>
 800d342:	9901      	ldr	r1, [sp, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	4648      	mov	r0, r9
 800d348:	f000 fbb2 	bl	800dab0 <__lshift>
 800d34c:	4621      	mov	r1, r4
 800d34e:	9001      	str	r0, [sp, #4]
 800d350:	f000 fc1a 	bl	800db88 <__mcmp>
 800d354:	2800      	cmp	r0, #0
 800d356:	dc03      	bgt.n	800d360 <_dtoa_r+0x978>
 800d358:	d1e2      	bne.n	800d320 <_dtoa_r+0x938>
 800d35a:	f01a 0f01 	tst.w	sl, #1
 800d35e:	d0df      	beq.n	800d320 <_dtoa_r+0x938>
 800d360:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d364:	d1d9      	bne.n	800d31a <_dtoa_r+0x932>
 800d366:	2339      	movs	r3, #57	@ 0x39
 800d368:	f88b 3000 	strb.w	r3, [fp]
 800d36c:	4633      	mov	r3, r6
 800d36e:	461e      	mov	r6, r3
 800d370:	3b01      	subs	r3, #1
 800d372:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d376:	2a39      	cmp	r2, #57	@ 0x39
 800d378:	d053      	beq.n	800d422 <_dtoa_r+0xa3a>
 800d37a:	3201      	adds	r2, #1
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	e60c      	b.n	800cf9a <_dtoa_r+0x5b2>
 800d380:	2a00      	cmp	r2, #0
 800d382:	dd07      	ble.n	800d394 <_dtoa_r+0x9ac>
 800d384:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d388:	d0ed      	beq.n	800d366 <_dtoa_r+0x97e>
 800d38a:	f10a 0301 	add.w	r3, sl, #1
 800d38e:	f88b 3000 	strb.w	r3, [fp]
 800d392:	e602      	b.n	800cf9a <_dtoa_r+0x5b2>
 800d394:	9b05      	ldr	r3, [sp, #20]
 800d396:	9a05      	ldr	r2, [sp, #20]
 800d398:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d029      	beq.n	800d3f6 <_dtoa_r+0xa0e>
 800d3a2:	9901      	ldr	r1, [sp, #4]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	220a      	movs	r2, #10
 800d3a8:	4648      	mov	r0, r9
 800d3aa:	f000 f9d5 	bl	800d758 <__multadd>
 800d3ae:	45a8      	cmp	r8, r5
 800d3b0:	9001      	str	r0, [sp, #4]
 800d3b2:	f04f 0300 	mov.w	r3, #0
 800d3b6:	f04f 020a 	mov.w	r2, #10
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	4648      	mov	r0, r9
 800d3be:	d107      	bne.n	800d3d0 <_dtoa_r+0x9e8>
 800d3c0:	f000 f9ca 	bl	800d758 <__multadd>
 800d3c4:	4680      	mov	r8, r0
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	9b05      	ldr	r3, [sp, #20]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	e775      	b.n	800d2bc <_dtoa_r+0x8d4>
 800d3d0:	f000 f9c2 	bl	800d758 <__multadd>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	2300      	movs	r3, #0
 800d3da:	220a      	movs	r2, #10
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f000 f9bb 	bl	800d758 <__multadd>
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	e7f0      	b.n	800d3c8 <_dtoa_r+0x9e0>
 800d3e6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ea:	bfcc      	ite	gt
 800d3ec:	465e      	movgt	r6, fp
 800d3ee:	2601      	movle	r6, #1
 800d3f0:	443e      	add	r6, r7
 800d3f2:	f04f 0800 	mov.w	r8, #0
 800d3f6:	9901      	ldr	r1, [sp, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	4648      	mov	r0, r9
 800d3fc:	f000 fb58 	bl	800dab0 <__lshift>
 800d400:	4621      	mov	r1, r4
 800d402:	9001      	str	r0, [sp, #4]
 800d404:	f000 fbc0 	bl	800db88 <__mcmp>
 800d408:	2800      	cmp	r0, #0
 800d40a:	dcaf      	bgt.n	800d36c <_dtoa_r+0x984>
 800d40c:	d102      	bne.n	800d414 <_dtoa_r+0xa2c>
 800d40e:	f01a 0f01 	tst.w	sl, #1
 800d412:	d1ab      	bne.n	800d36c <_dtoa_r+0x984>
 800d414:	4633      	mov	r3, r6
 800d416:	461e      	mov	r6, r3
 800d418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d41c:	2a30      	cmp	r2, #48	@ 0x30
 800d41e:	d0fa      	beq.n	800d416 <_dtoa_r+0xa2e>
 800d420:	e5bb      	b.n	800cf9a <_dtoa_r+0x5b2>
 800d422:	429f      	cmp	r7, r3
 800d424:	d1a3      	bne.n	800d36e <_dtoa_r+0x986>
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	3301      	adds	r3, #1
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	2331      	movs	r3, #49	@ 0x31
 800d42e:	703b      	strb	r3, [r7, #0]
 800d430:	e5b3      	b.n	800cf9a <_dtoa_r+0x5b2>
 800d432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d434:	4f16      	ldr	r7, [pc, #88]	@ (800d490 <_dtoa_r+0xaa8>)
 800d436:	b11b      	cbz	r3, 800d440 <_dtoa_r+0xa58>
 800d438:	f107 0308 	add.w	r3, r7, #8
 800d43c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	4638      	mov	r0, r7
 800d442:	b011      	add	sp, #68	@ 0x44
 800d444:	ecbd 8b02 	vpop	{d8}
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	9b07      	ldr	r3, [sp, #28]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	f77f ae36 	ble.w	800d0c0 <_dtoa_r+0x6d8>
 800d454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d456:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d458:	2001      	movs	r0, #1
 800d45a:	e656      	b.n	800d10a <_dtoa_r+0x722>
 800d45c:	f1bb 0f00 	cmp.w	fp, #0
 800d460:	f77f aed7 	ble.w	800d212 <_dtoa_r+0x82a>
 800d464:	463e      	mov	r6, r7
 800d466:	9801      	ldr	r0, [sp, #4]
 800d468:	4621      	mov	r1, r4
 800d46a:	f7ff fa32 	bl	800c8d2 <quorem>
 800d46e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d472:	f806 ab01 	strb.w	sl, [r6], #1
 800d476:	1bf2      	subs	r2, r6, r7
 800d478:	4593      	cmp	fp, r2
 800d47a:	ddb4      	ble.n	800d3e6 <_dtoa_r+0x9fe>
 800d47c:	9901      	ldr	r1, [sp, #4]
 800d47e:	2300      	movs	r3, #0
 800d480:	220a      	movs	r2, #10
 800d482:	4648      	mov	r0, r9
 800d484:	f000 f968 	bl	800d758 <__multadd>
 800d488:	9001      	str	r0, [sp, #4]
 800d48a:	e7ec      	b.n	800d466 <_dtoa_r+0xa7e>
 800d48c:	0800f678 	.word	0x0800f678
 800d490:	0800f5fc 	.word	0x0800f5fc

0800d494 <_free_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4605      	mov	r5, r0
 800d498:	2900      	cmp	r1, #0
 800d49a:	d041      	beq.n	800d520 <_free_r+0x8c>
 800d49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a0:	1f0c      	subs	r4, r1, #4
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	bfb8      	it	lt
 800d4a6:	18e4      	addlt	r4, r4, r3
 800d4a8:	f000 f8e8 	bl	800d67c <__malloc_lock>
 800d4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d524 <_free_r+0x90>)
 800d4ae:	6813      	ldr	r3, [r2, #0]
 800d4b0:	b933      	cbnz	r3, 800d4c0 <_free_r+0x2c>
 800d4b2:	6063      	str	r3, [r4, #4]
 800d4b4:	6014      	str	r4, [r2, #0]
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4bc:	f000 b8e4 	b.w	800d688 <__malloc_unlock>
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	d908      	bls.n	800d4d6 <_free_r+0x42>
 800d4c4:	6820      	ldr	r0, [r4, #0]
 800d4c6:	1821      	adds	r1, r4, r0
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf01      	itttt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	1809      	addeq	r1, r1, r0
 800d4d2:	6021      	streq	r1, [r4, #0]
 800d4d4:	e7ed      	b.n	800d4b2 <_free_r+0x1e>
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	b10b      	cbz	r3, 800d4e0 <_free_r+0x4c>
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	d9fa      	bls.n	800d4d6 <_free_r+0x42>
 800d4e0:	6811      	ldr	r1, [r2, #0]
 800d4e2:	1850      	adds	r0, r2, r1
 800d4e4:	42a0      	cmp	r0, r4
 800d4e6:	d10b      	bne.n	800d500 <_free_r+0x6c>
 800d4e8:	6820      	ldr	r0, [r4, #0]
 800d4ea:	4401      	add	r1, r0
 800d4ec:	1850      	adds	r0, r2, r1
 800d4ee:	4283      	cmp	r3, r0
 800d4f0:	6011      	str	r1, [r2, #0]
 800d4f2:	d1e0      	bne.n	800d4b6 <_free_r+0x22>
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	6053      	str	r3, [r2, #4]
 800d4fa:	4408      	add	r0, r1
 800d4fc:	6010      	str	r0, [r2, #0]
 800d4fe:	e7da      	b.n	800d4b6 <_free_r+0x22>
 800d500:	d902      	bls.n	800d508 <_free_r+0x74>
 800d502:	230c      	movs	r3, #12
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	e7d6      	b.n	800d4b6 <_free_r+0x22>
 800d508:	6820      	ldr	r0, [r4, #0]
 800d50a:	1821      	adds	r1, r4, r0
 800d50c:	428b      	cmp	r3, r1
 800d50e:	bf04      	itt	eq
 800d510:	6819      	ldreq	r1, [r3, #0]
 800d512:	685b      	ldreq	r3, [r3, #4]
 800d514:	6063      	str	r3, [r4, #4]
 800d516:	bf04      	itt	eq
 800d518:	1809      	addeq	r1, r1, r0
 800d51a:	6021      	streq	r1, [r4, #0]
 800d51c:	6054      	str	r4, [r2, #4]
 800d51e:	e7ca      	b.n	800d4b6 <_free_r+0x22>
 800d520:	bd38      	pop	{r3, r4, r5, pc}
 800d522:	bf00      	nop
 800d524:	240027d0 	.word	0x240027d0

0800d528 <malloc>:
 800d528:	4b02      	ldr	r3, [pc, #8]	@ (800d534 <malloc+0xc>)
 800d52a:	4601      	mov	r1, r0
 800d52c:	6818      	ldr	r0, [r3, #0]
 800d52e:	f000 b825 	b.w	800d57c <_malloc_r>
 800d532:	bf00      	nop
 800d534:	24000020 	.word	0x24000020

0800d538 <sbrk_aligned>:
 800d538:	b570      	push	{r4, r5, r6, lr}
 800d53a:	4e0f      	ldr	r6, [pc, #60]	@ (800d578 <sbrk_aligned+0x40>)
 800d53c:	460c      	mov	r4, r1
 800d53e:	6831      	ldr	r1, [r6, #0]
 800d540:	4605      	mov	r5, r0
 800d542:	b911      	cbnz	r1, 800d54a <sbrk_aligned+0x12>
 800d544:	f000 fe46 	bl	800e1d4 <_sbrk_r>
 800d548:	6030      	str	r0, [r6, #0]
 800d54a:	4621      	mov	r1, r4
 800d54c:	4628      	mov	r0, r5
 800d54e:	f000 fe41 	bl	800e1d4 <_sbrk_r>
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	d103      	bne.n	800d55e <sbrk_aligned+0x26>
 800d556:	f04f 34ff 	mov.w	r4, #4294967295
 800d55a:	4620      	mov	r0, r4
 800d55c:	bd70      	pop	{r4, r5, r6, pc}
 800d55e:	1cc4      	adds	r4, r0, #3
 800d560:	f024 0403 	bic.w	r4, r4, #3
 800d564:	42a0      	cmp	r0, r4
 800d566:	d0f8      	beq.n	800d55a <sbrk_aligned+0x22>
 800d568:	1a21      	subs	r1, r4, r0
 800d56a:	4628      	mov	r0, r5
 800d56c:	f000 fe32 	bl	800e1d4 <_sbrk_r>
 800d570:	3001      	adds	r0, #1
 800d572:	d1f2      	bne.n	800d55a <sbrk_aligned+0x22>
 800d574:	e7ef      	b.n	800d556 <sbrk_aligned+0x1e>
 800d576:	bf00      	nop
 800d578:	240027cc 	.word	0x240027cc

0800d57c <_malloc_r>:
 800d57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d580:	1ccd      	adds	r5, r1, #3
 800d582:	f025 0503 	bic.w	r5, r5, #3
 800d586:	3508      	adds	r5, #8
 800d588:	2d0c      	cmp	r5, #12
 800d58a:	bf38      	it	cc
 800d58c:	250c      	movcc	r5, #12
 800d58e:	2d00      	cmp	r5, #0
 800d590:	4606      	mov	r6, r0
 800d592:	db01      	blt.n	800d598 <_malloc_r+0x1c>
 800d594:	42a9      	cmp	r1, r5
 800d596:	d904      	bls.n	800d5a2 <_malloc_r+0x26>
 800d598:	230c      	movs	r3, #12
 800d59a:	6033      	str	r3, [r6, #0]
 800d59c:	2000      	movs	r0, #0
 800d59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d678 <_malloc_r+0xfc>
 800d5a6:	f000 f869 	bl	800d67c <__malloc_lock>
 800d5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d5ae:	461c      	mov	r4, r3
 800d5b0:	bb44      	cbnz	r4, 800d604 <_malloc_r+0x88>
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7ff ffbf 	bl	800d538 <sbrk_aligned>
 800d5ba:	1c43      	adds	r3, r0, #1
 800d5bc:	4604      	mov	r4, r0
 800d5be:	d158      	bne.n	800d672 <_malloc_r+0xf6>
 800d5c0:	f8d8 4000 	ldr.w	r4, [r8]
 800d5c4:	4627      	mov	r7, r4
 800d5c6:	2f00      	cmp	r7, #0
 800d5c8:	d143      	bne.n	800d652 <_malloc_r+0xd6>
 800d5ca:	2c00      	cmp	r4, #0
 800d5cc:	d04b      	beq.n	800d666 <_malloc_r+0xea>
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	eb04 0903 	add.w	r9, r4, r3
 800d5d8:	f000 fdfc 	bl	800e1d4 <_sbrk_r>
 800d5dc:	4581      	cmp	r9, r0
 800d5de:	d142      	bne.n	800d666 <_malloc_r+0xea>
 800d5e0:	6821      	ldr	r1, [r4, #0]
 800d5e2:	1a6d      	subs	r5, r5, r1
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f7ff ffa6 	bl	800d538 <sbrk_aligned>
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	d03a      	beq.n	800d666 <_malloc_r+0xea>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	442b      	add	r3, r5
 800d5f4:	6023      	str	r3, [r4, #0]
 800d5f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d5fa:	685a      	ldr	r2, [r3, #4]
 800d5fc:	bb62      	cbnz	r2, 800d658 <_malloc_r+0xdc>
 800d5fe:	f8c8 7000 	str.w	r7, [r8]
 800d602:	e00f      	b.n	800d624 <_malloc_r+0xa8>
 800d604:	6822      	ldr	r2, [r4, #0]
 800d606:	1b52      	subs	r2, r2, r5
 800d608:	d420      	bmi.n	800d64c <_malloc_r+0xd0>
 800d60a:	2a0b      	cmp	r2, #11
 800d60c:	d917      	bls.n	800d63e <_malloc_r+0xc2>
 800d60e:	1961      	adds	r1, r4, r5
 800d610:	42a3      	cmp	r3, r4
 800d612:	6025      	str	r5, [r4, #0]
 800d614:	bf18      	it	ne
 800d616:	6059      	strne	r1, [r3, #4]
 800d618:	6863      	ldr	r3, [r4, #4]
 800d61a:	bf08      	it	eq
 800d61c:	f8c8 1000 	streq.w	r1, [r8]
 800d620:	5162      	str	r2, [r4, r5]
 800d622:	604b      	str	r3, [r1, #4]
 800d624:	4630      	mov	r0, r6
 800d626:	f000 f82f 	bl	800d688 <__malloc_unlock>
 800d62a:	f104 000b 	add.w	r0, r4, #11
 800d62e:	1d23      	adds	r3, r4, #4
 800d630:	f020 0007 	bic.w	r0, r0, #7
 800d634:	1ac2      	subs	r2, r0, r3
 800d636:	bf1c      	itt	ne
 800d638:	1a1b      	subne	r3, r3, r0
 800d63a:	50a3      	strne	r3, [r4, r2]
 800d63c:	e7af      	b.n	800d59e <_malloc_r+0x22>
 800d63e:	6862      	ldr	r2, [r4, #4]
 800d640:	42a3      	cmp	r3, r4
 800d642:	bf0c      	ite	eq
 800d644:	f8c8 2000 	streq.w	r2, [r8]
 800d648:	605a      	strne	r2, [r3, #4]
 800d64a:	e7eb      	b.n	800d624 <_malloc_r+0xa8>
 800d64c:	4623      	mov	r3, r4
 800d64e:	6864      	ldr	r4, [r4, #4]
 800d650:	e7ae      	b.n	800d5b0 <_malloc_r+0x34>
 800d652:	463c      	mov	r4, r7
 800d654:	687f      	ldr	r7, [r7, #4]
 800d656:	e7b6      	b.n	800d5c6 <_malloc_r+0x4a>
 800d658:	461a      	mov	r2, r3
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	d1fb      	bne.n	800d658 <_malloc_r+0xdc>
 800d660:	2300      	movs	r3, #0
 800d662:	6053      	str	r3, [r2, #4]
 800d664:	e7de      	b.n	800d624 <_malloc_r+0xa8>
 800d666:	230c      	movs	r3, #12
 800d668:	6033      	str	r3, [r6, #0]
 800d66a:	4630      	mov	r0, r6
 800d66c:	f000 f80c 	bl	800d688 <__malloc_unlock>
 800d670:	e794      	b.n	800d59c <_malloc_r+0x20>
 800d672:	6005      	str	r5, [r0, #0]
 800d674:	e7d6      	b.n	800d624 <_malloc_r+0xa8>
 800d676:	bf00      	nop
 800d678:	240027d0 	.word	0x240027d0

0800d67c <__malloc_lock>:
 800d67c:	4801      	ldr	r0, [pc, #4]	@ (800d684 <__malloc_lock+0x8>)
 800d67e:	f7ff b926 	b.w	800c8ce <__retarget_lock_acquire_recursive>
 800d682:	bf00      	nop
 800d684:	240027c8 	.word	0x240027c8

0800d688 <__malloc_unlock>:
 800d688:	4801      	ldr	r0, [pc, #4]	@ (800d690 <__malloc_unlock+0x8>)
 800d68a:	f7ff b921 	b.w	800c8d0 <__retarget_lock_release_recursive>
 800d68e:	bf00      	nop
 800d690:	240027c8 	.word	0x240027c8

0800d694 <_Balloc>:
 800d694:	b570      	push	{r4, r5, r6, lr}
 800d696:	69c6      	ldr	r6, [r0, #28]
 800d698:	4604      	mov	r4, r0
 800d69a:	460d      	mov	r5, r1
 800d69c:	b976      	cbnz	r6, 800d6bc <_Balloc+0x28>
 800d69e:	2010      	movs	r0, #16
 800d6a0:	f7ff ff42 	bl	800d528 <malloc>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	61e0      	str	r0, [r4, #28]
 800d6a8:	b920      	cbnz	r0, 800d6b4 <_Balloc+0x20>
 800d6aa:	4b18      	ldr	r3, [pc, #96]	@ (800d70c <_Balloc+0x78>)
 800d6ac:	4818      	ldr	r0, [pc, #96]	@ (800d710 <_Balloc+0x7c>)
 800d6ae:	216b      	movs	r1, #107	@ 0x6b
 800d6b0:	f000 fdae 	bl	800e210 <__assert_func>
 800d6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6b8:	6006      	str	r6, [r0, #0]
 800d6ba:	60c6      	str	r6, [r0, #12]
 800d6bc:	69e6      	ldr	r6, [r4, #28]
 800d6be:	68f3      	ldr	r3, [r6, #12]
 800d6c0:	b183      	cbz	r3, 800d6e4 <_Balloc+0x50>
 800d6c2:	69e3      	ldr	r3, [r4, #28]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6ca:	b9b8      	cbnz	r0, 800d6fc <_Balloc+0x68>
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	fa01 f605 	lsl.w	r6, r1, r5
 800d6d2:	1d72      	adds	r2, r6, #5
 800d6d4:	0092      	lsls	r2, r2, #2
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 fdb8 	bl	800e24c <_calloc_r>
 800d6dc:	b160      	cbz	r0, 800d6f8 <_Balloc+0x64>
 800d6de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6e2:	e00e      	b.n	800d702 <_Balloc+0x6e>
 800d6e4:	2221      	movs	r2, #33	@ 0x21
 800d6e6:	2104      	movs	r1, #4
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f000 fdaf 	bl	800e24c <_calloc_r>
 800d6ee:	69e3      	ldr	r3, [r4, #28]
 800d6f0:	60f0      	str	r0, [r6, #12]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1e4      	bne.n	800d6c2 <_Balloc+0x2e>
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	bd70      	pop	{r4, r5, r6, pc}
 800d6fc:	6802      	ldr	r2, [r0, #0]
 800d6fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d702:	2300      	movs	r3, #0
 800d704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d708:	e7f7      	b.n	800d6fa <_Balloc+0x66>
 800d70a:	bf00      	nop
 800d70c:	0800f609 	.word	0x0800f609
 800d710:	0800f689 	.word	0x0800f689

0800d714 <_Bfree>:
 800d714:	b570      	push	{r4, r5, r6, lr}
 800d716:	69c6      	ldr	r6, [r0, #28]
 800d718:	4605      	mov	r5, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	b976      	cbnz	r6, 800d73c <_Bfree+0x28>
 800d71e:	2010      	movs	r0, #16
 800d720:	f7ff ff02 	bl	800d528 <malloc>
 800d724:	4602      	mov	r2, r0
 800d726:	61e8      	str	r0, [r5, #28]
 800d728:	b920      	cbnz	r0, 800d734 <_Bfree+0x20>
 800d72a:	4b09      	ldr	r3, [pc, #36]	@ (800d750 <_Bfree+0x3c>)
 800d72c:	4809      	ldr	r0, [pc, #36]	@ (800d754 <_Bfree+0x40>)
 800d72e:	218f      	movs	r1, #143	@ 0x8f
 800d730:	f000 fd6e 	bl	800e210 <__assert_func>
 800d734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d738:	6006      	str	r6, [r0, #0]
 800d73a:	60c6      	str	r6, [r0, #12]
 800d73c:	b13c      	cbz	r4, 800d74e <_Bfree+0x3a>
 800d73e:	69eb      	ldr	r3, [r5, #28]
 800d740:	6862      	ldr	r2, [r4, #4]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d748:	6021      	str	r1, [r4, #0]
 800d74a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	0800f609 	.word	0x0800f609
 800d754:	0800f689 	.word	0x0800f689

0800d758 <__multadd>:
 800d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d75c:	690d      	ldr	r5, [r1, #16]
 800d75e:	4607      	mov	r7, r0
 800d760:	460c      	mov	r4, r1
 800d762:	461e      	mov	r6, r3
 800d764:	f101 0c14 	add.w	ip, r1, #20
 800d768:	2000      	movs	r0, #0
 800d76a:	f8dc 3000 	ldr.w	r3, [ip]
 800d76e:	b299      	uxth	r1, r3
 800d770:	fb02 6101 	mla	r1, r2, r1, r6
 800d774:	0c1e      	lsrs	r6, r3, #16
 800d776:	0c0b      	lsrs	r3, r1, #16
 800d778:	fb02 3306 	mla	r3, r2, r6, r3
 800d77c:	b289      	uxth	r1, r1
 800d77e:	3001      	adds	r0, #1
 800d780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d784:	4285      	cmp	r5, r0
 800d786:	f84c 1b04 	str.w	r1, [ip], #4
 800d78a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d78e:	dcec      	bgt.n	800d76a <__multadd+0x12>
 800d790:	b30e      	cbz	r6, 800d7d6 <__multadd+0x7e>
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	42ab      	cmp	r3, r5
 800d796:	dc19      	bgt.n	800d7cc <__multadd+0x74>
 800d798:	6861      	ldr	r1, [r4, #4]
 800d79a:	4638      	mov	r0, r7
 800d79c:	3101      	adds	r1, #1
 800d79e:	f7ff ff79 	bl	800d694 <_Balloc>
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	b928      	cbnz	r0, 800d7b2 <__multadd+0x5a>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800d7dc <__multadd+0x84>)
 800d7aa:	480d      	ldr	r0, [pc, #52]	@ (800d7e0 <__multadd+0x88>)
 800d7ac:	21ba      	movs	r1, #186	@ 0xba
 800d7ae:	f000 fd2f 	bl	800e210 <__assert_func>
 800d7b2:	6922      	ldr	r2, [r4, #16]
 800d7b4:	3202      	adds	r2, #2
 800d7b6:	f104 010c 	add.w	r1, r4, #12
 800d7ba:	0092      	lsls	r2, r2, #2
 800d7bc:	300c      	adds	r0, #12
 800d7be:	f000 fd19 	bl	800e1f4 <memcpy>
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	f7ff ffa5 	bl	800d714 <_Bfree>
 800d7ca:	4644      	mov	r4, r8
 800d7cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7d0:	3501      	adds	r5, #1
 800d7d2:	615e      	str	r6, [r3, #20]
 800d7d4:	6125      	str	r5, [r4, #16]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7dc:	0800f678 	.word	0x0800f678
 800d7e0:	0800f689 	.word	0x0800f689

0800d7e4 <__hi0bits>:
 800d7e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	bf36      	itet	cc
 800d7ec:	0403      	lslcc	r3, r0, #16
 800d7ee:	2000      	movcs	r0, #0
 800d7f0:	2010      	movcc	r0, #16
 800d7f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d7f6:	bf3c      	itt	cc
 800d7f8:	021b      	lslcc	r3, r3, #8
 800d7fa:	3008      	addcc	r0, #8
 800d7fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d800:	bf3c      	itt	cc
 800d802:	011b      	lslcc	r3, r3, #4
 800d804:	3004      	addcc	r0, #4
 800d806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d80a:	bf3c      	itt	cc
 800d80c:	009b      	lslcc	r3, r3, #2
 800d80e:	3002      	addcc	r0, #2
 800d810:	2b00      	cmp	r3, #0
 800d812:	db05      	blt.n	800d820 <__hi0bits+0x3c>
 800d814:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d818:	f100 0001 	add.w	r0, r0, #1
 800d81c:	bf08      	it	eq
 800d81e:	2020      	moveq	r0, #32
 800d820:	4770      	bx	lr

0800d822 <__lo0bits>:
 800d822:	6803      	ldr	r3, [r0, #0]
 800d824:	4602      	mov	r2, r0
 800d826:	f013 0007 	ands.w	r0, r3, #7
 800d82a:	d00b      	beq.n	800d844 <__lo0bits+0x22>
 800d82c:	07d9      	lsls	r1, r3, #31
 800d82e:	d421      	bmi.n	800d874 <__lo0bits+0x52>
 800d830:	0798      	lsls	r0, r3, #30
 800d832:	bf49      	itett	mi
 800d834:	085b      	lsrmi	r3, r3, #1
 800d836:	089b      	lsrpl	r3, r3, #2
 800d838:	2001      	movmi	r0, #1
 800d83a:	6013      	strmi	r3, [r2, #0]
 800d83c:	bf5c      	itt	pl
 800d83e:	6013      	strpl	r3, [r2, #0]
 800d840:	2002      	movpl	r0, #2
 800d842:	4770      	bx	lr
 800d844:	b299      	uxth	r1, r3
 800d846:	b909      	cbnz	r1, 800d84c <__lo0bits+0x2a>
 800d848:	0c1b      	lsrs	r3, r3, #16
 800d84a:	2010      	movs	r0, #16
 800d84c:	b2d9      	uxtb	r1, r3
 800d84e:	b909      	cbnz	r1, 800d854 <__lo0bits+0x32>
 800d850:	3008      	adds	r0, #8
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	0719      	lsls	r1, r3, #28
 800d856:	bf04      	itt	eq
 800d858:	091b      	lsreq	r3, r3, #4
 800d85a:	3004      	addeq	r0, #4
 800d85c:	0799      	lsls	r1, r3, #30
 800d85e:	bf04      	itt	eq
 800d860:	089b      	lsreq	r3, r3, #2
 800d862:	3002      	addeq	r0, #2
 800d864:	07d9      	lsls	r1, r3, #31
 800d866:	d403      	bmi.n	800d870 <__lo0bits+0x4e>
 800d868:	085b      	lsrs	r3, r3, #1
 800d86a:	f100 0001 	add.w	r0, r0, #1
 800d86e:	d003      	beq.n	800d878 <__lo0bits+0x56>
 800d870:	6013      	str	r3, [r2, #0]
 800d872:	4770      	bx	lr
 800d874:	2000      	movs	r0, #0
 800d876:	4770      	bx	lr
 800d878:	2020      	movs	r0, #32
 800d87a:	4770      	bx	lr

0800d87c <__i2b>:
 800d87c:	b510      	push	{r4, lr}
 800d87e:	460c      	mov	r4, r1
 800d880:	2101      	movs	r1, #1
 800d882:	f7ff ff07 	bl	800d694 <_Balloc>
 800d886:	4602      	mov	r2, r0
 800d888:	b928      	cbnz	r0, 800d896 <__i2b+0x1a>
 800d88a:	4b05      	ldr	r3, [pc, #20]	@ (800d8a0 <__i2b+0x24>)
 800d88c:	4805      	ldr	r0, [pc, #20]	@ (800d8a4 <__i2b+0x28>)
 800d88e:	f240 1145 	movw	r1, #325	@ 0x145
 800d892:	f000 fcbd 	bl	800e210 <__assert_func>
 800d896:	2301      	movs	r3, #1
 800d898:	6144      	str	r4, [r0, #20]
 800d89a:	6103      	str	r3, [r0, #16]
 800d89c:	bd10      	pop	{r4, pc}
 800d89e:	bf00      	nop
 800d8a0:	0800f678 	.word	0x0800f678
 800d8a4:	0800f689 	.word	0x0800f689

0800d8a8 <__multiply>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	690a      	ldr	r2, [r1, #16]
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	bfa8      	it	ge
 800d8b6:	4623      	movge	r3, r4
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	bfa4      	itt	ge
 800d8bc:	460c      	movge	r4, r1
 800d8be:	461f      	movge	r7, r3
 800d8c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d8c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	6861      	ldr	r1, [r4, #4]
 800d8cc:	eb0a 0609 	add.w	r6, sl, r9
 800d8d0:	42b3      	cmp	r3, r6
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	bfb8      	it	lt
 800d8d6:	3101      	addlt	r1, #1
 800d8d8:	f7ff fedc 	bl	800d694 <_Balloc>
 800d8dc:	b930      	cbnz	r0, 800d8ec <__multiply+0x44>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	4b44      	ldr	r3, [pc, #272]	@ (800d9f4 <__multiply+0x14c>)
 800d8e2:	4845      	ldr	r0, [pc, #276]	@ (800d9f8 <__multiply+0x150>)
 800d8e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d8e8:	f000 fc92 	bl	800e210 <__assert_func>
 800d8ec:	f100 0514 	add.w	r5, r0, #20
 800d8f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8f4:	462b      	mov	r3, r5
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	4543      	cmp	r3, r8
 800d8fa:	d321      	bcc.n	800d940 <__multiply+0x98>
 800d8fc:	f107 0114 	add.w	r1, r7, #20
 800d900:	f104 0214 	add.w	r2, r4, #20
 800d904:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d908:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d90c:	9302      	str	r3, [sp, #8]
 800d90e:	1b13      	subs	r3, r2, r4
 800d910:	3b15      	subs	r3, #21
 800d912:	f023 0303 	bic.w	r3, r3, #3
 800d916:	3304      	adds	r3, #4
 800d918:	f104 0715 	add.w	r7, r4, #21
 800d91c:	42ba      	cmp	r2, r7
 800d91e:	bf38      	it	cc
 800d920:	2304      	movcc	r3, #4
 800d922:	9301      	str	r3, [sp, #4]
 800d924:	9b02      	ldr	r3, [sp, #8]
 800d926:	9103      	str	r1, [sp, #12]
 800d928:	428b      	cmp	r3, r1
 800d92a:	d80c      	bhi.n	800d946 <__multiply+0x9e>
 800d92c:	2e00      	cmp	r6, #0
 800d92e:	dd03      	ble.n	800d938 <__multiply+0x90>
 800d930:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d934:	2b00      	cmp	r3, #0
 800d936:	d05b      	beq.n	800d9f0 <__multiply+0x148>
 800d938:	6106      	str	r6, [r0, #16]
 800d93a:	b005      	add	sp, #20
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	f843 2b04 	str.w	r2, [r3], #4
 800d944:	e7d8      	b.n	800d8f8 <__multiply+0x50>
 800d946:	f8b1 a000 	ldrh.w	sl, [r1]
 800d94a:	f1ba 0f00 	cmp.w	sl, #0
 800d94e:	d024      	beq.n	800d99a <__multiply+0xf2>
 800d950:	f104 0e14 	add.w	lr, r4, #20
 800d954:	46a9      	mov	r9, r5
 800d956:	f04f 0c00 	mov.w	ip, #0
 800d95a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d95e:	f8d9 3000 	ldr.w	r3, [r9]
 800d962:	fa1f fb87 	uxth.w	fp, r7
 800d966:	b29b      	uxth	r3, r3
 800d968:	fb0a 330b 	mla	r3, sl, fp, r3
 800d96c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d970:	f8d9 7000 	ldr.w	r7, [r9]
 800d974:	4463      	add	r3, ip
 800d976:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d97a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d97e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d982:	b29b      	uxth	r3, r3
 800d984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d988:	4572      	cmp	r2, lr
 800d98a:	f849 3b04 	str.w	r3, [r9], #4
 800d98e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d992:	d8e2      	bhi.n	800d95a <__multiply+0xb2>
 800d994:	9b01      	ldr	r3, [sp, #4]
 800d996:	f845 c003 	str.w	ip, [r5, r3]
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9a0:	3104      	adds	r1, #4
 800d9a2:	f1b9 0f00 	cmp.w	r9, #0
 800d9a6:	d021      	beq.n	800d9ec <__multiply+0x144>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	f104 0c14 	add.w	ip, r4, #20
 800d9ae:	46ae      	mov	lr, r5
 800d9b0:	f04f 0a00 	mov.w	sl, #0
 800d9b4:	f8bc b000 	ldrh.w	fp, [ip]
 800d9b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d9bc:	fb09 770b 	mla	r7, r9, fp, r7
 800d9c0:	4457      	add	r7, sl
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9c8:	f84e 3b04 	str.w	r3, [lr], #4
 800d9cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9d4:	f8be 3000 	ldrh.w	r3, [lr]
 800d9d8:	fb09 330a 	mla	r3, r9, sl, r3
 800d9dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d9e0:	4562      	cmp	r2, ip
 800d9e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9e6:	d8e5      	bhi.n	800d9b4 <__multiply+0x10c>
 800d9e8:	9f01      	ldr	r7, [sp, #4]
 800d9ea:	51eb      	str	r3, [r5, r7]
 800d9ec:	3504      	adds	r5, #4
 800d9ee:	e799      	b.n	800d924 <__multiply+0x7c>
 800d9f0:	3e01      	subs	r6, #1
 800d9f2:	e79b      	b.n	800d92c <__multiply+0x84>
 800d9f4:	0800f678 	.word	0x0800f678
 800d9f8:	0800f689 	.word	0x0800f689

0800d9fc <__pow5mult>:
 800d9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da00:	4615      	mov	r5, r2
 800da02:	f012 0203 	ands.w	r2, r2, #3
 800da06:	4607      	mov	r7, r0
 800da08:	460e      	mov	r6, r1
 800da0a:	d007      	beq.n	800da1c <__pow5mult+0x20>
 800da0c:	4c25      	ldr	r4, [pc, #148]	@ (800daa4 <__pow5mult+0xa8>)
 800da0e:	3a01      	subs	r2, #1
 800da10:	2300      	movs	r3, #0
 800da12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da16:	f7ff fe9f 	bl	800d758 <__multadd>
 800da1a:	4606      	mov	r6, r0
 800da1c:	10ad      	asrs	r5, r5, #2
 800da1e:	d03d      	beq.n	800da9c <__pow5mult+0xa0>
 800da20:	69fc      	ldr	r4, [r7, #28]
 800da22:	b97c      	cbnz	r4, 800da44 <__pow5mult+0x48>
 800da24:	2010      	movs	r0, #16
 800da26:	f7ff fd7f 	bl	800d528 <malloc>
 800da2a:	4602      	mov	r2, r0
 800da2c:	61f8      	str	r0, [r7, #28]
 800da2e:	b928      	cbnz	r0, 800da3c <__pow5mult+0x40>
 800da30:	4b1d      	ldr	r3, [pc, #116]	@ (800daa8 <__pow5mult+0xac>)
 800da32:	481e      	ldr	r0, [pc, #120]	@ (800daac <__pow5mult+0xb0>)
 800da34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da38:	f000 fbea 	bl	800e210 <__assert_func>
 800da3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da40:	6004      	str	r4, [r0, #0]
 800da42:	60c4      	str	r4, [r0, #12]
 800da44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da4c:	b94c      	cbnz	r4, 800da62 <__pow5mult+0x66>
 800da4e:	f240 2171 	movw	r1, #625	@ 0x271
 800da52:	4638      	mov	r0, r7
 800da54:	f7ff ff12 	bl	800d87c <__i2b>
 800da58:	2300      	movs	r3, #0
 800da5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da5e:	4604      	mov	r4, r0
 800da60:	6003      	str	r3, [r0, #0]
 800da62:	f04f 0900 	mov.w	r9, #0
 800da66:	07eb      	lsls	r3, r5, #31
 800da68:	d50a      	bpl.n	800da80 <__pow5mult+0x84>
 800da6a:	4631      	mov	r1, r6
 800da6c:	4622      	mov	r2, r4
 800da6e:	4638      	mov	r0, r7
 800da70:	f7ff ff1a 	bl	800d8a8 <__multiply>
 800da74:	4631      	mov	r1, r6
 800da76:	4680      	mov	r8, r0
 800da78:	4638      	mov	r0, r7
 800da7a:	f7ff fe4b 	bl	800d714 <_Bfree>
 800da7e:	4646      	mov	r6, r8
 800da80:	106d      	asrs	r5, r5, #1
 800da82:	d00b      	beq.n	800da9c <__pow5mult+0xa0>
 800da84:	6820      	ldr	r0, [r4, #0]
 800da86:	b938      	cbnz	r0, 800da98 <__pow5mult+0x9c>
 800da88:	4622      	mov	r2, r4
 800da8a:	4621      	mov	r1, r4
 800da8c:	4638      	mov	r0, r7
 800da8e:	f7ff ff0b 	bl	800d8a8 <__multiply>
 800da92:	6020      	str	r0, [r4, #0]
 800da94:	f8c0 9000 	str.w	r9, [r0]
 800da98:	4604      	mov	r4, r0
 800da9a:	e7e4      	b.n	800da66 <__pow5mult+0x6a>
 800da9c:	4630      	mov	r0, r6
 800da9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa2:	bf00      	nop
 800daa4:	0800f6e4 	.word	0x0800f6e4
 800daa8:	0800f609 	.word	0x0800f609
 800daac:	0800f689 	.word	0x0800f689

0800dab0 <__lshift>:
 800dab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab4:	460c      	mov	r4, r1
 800dab6:	6849      	ldr	r1, [r1, #4]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dabe:	68a3      	ldr	r3, [r4, #8]
 800dac0:	4607      	mov	r7, r0
 800dac2:	4691      	mov	r9, r2
 800dac4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dac8:	f108 0601 	add.w	r6, r8, #1
 800dacc:	42b3      	cmp	r3, r6
 800dace:	db0b      	blt.n	800dae8 <__lshift+0x38>
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff fddf 	bl	800d694 <_Balloc>
 800dad6:	4605      	mov	r5, r0
 800dad8:	b948      	cbnz	r0, 800daee <__lshift+0x3e>
 800dada:	4602      	mov	r2, r0
 800dadc:	4b28      	ldr	r3, [pc, #160]	@ (800db80 <__lshift+0xd0>)
 800dade:	4829      	ldr	r0, [pc, #164]	@ (800db84 <__lshift+0xd4>)
 800dae0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dae4:	f000 fb94 	bl	800e210 <__assert_func>
 800dae8:	3101      	adds	r1, #1
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	e7ee      	b.n	800dacc <__lshift+0x1c>
 800daee:	2300      	movs	r3, #0
 800daf0:	f100 0114 	add.w	r1, r0, #20
 800daf4:	f100 0210 	add.w	r2, r0, #16
 800daf8:	4618      	mov	r0, r3
 800dafa:	4553      	cmp	r3, sl
 800dafc:	db33      	blt.n	800db66 <__lshift+0xb6>
 800dafe:	6920      	ldr	r0, [r4, #16]
 800db00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db04:	f104 0314 	add.w	r3, r4, #20
 800db08:	f019 091f 	ands.w	r9, r9, #31
 800db0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db14:	d02b      	beq.n	800db6e <__lshift+0xbe>
 800db16:	f1c9 0e20 	rsb	lr, r9, #32
 800db1a:	468a      	mov	sl, r1
 800db1c:	2200      	movs	r2, #0
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	fa00 f009 	lsl.w	r0, r0, r9
 800db24:	4310      	orrs	r0, r2
 800db26:	f84a 0b04 	str.w	r0, [sl], #4
 800db2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db2e:	459c      	cmp	ip, r3
 800db30:	fa22 f20e 	lsr.w	r2, r2, lr
 800db34:	d8f3      	bhi.n	800db1e <__lshift+0x6e>
 800db36:	ebac 0304 	sub.w	r3, ip, r4
 800db3a:	3b15      	subs	r3, #21
 800db3c:	f023 0303 	bic.w	r3, r3, #3
 800db40:	3304      	adds	r3, #4
 800db42:	f104 0015 	add.w	r0, r4, #21
 800db46:	4584      	cmp	ip, r0
 800db48:	bf38      	it	cc
 800db4a:	2304      	movcc	r3, #4
 800db4c:	50ca      	str	r2, [r1, r3]
 800db4e:	b10a      	cbz	r2, 800db54 <__lshift+0xa4>
 800db50:	f108 0602 	add.w	r6, r8, #2
 800db54:	3e01      	subs	r6, #1
 800db56:	4638      	mov	r0, r7
 800db58:	612e      	str	r6, [r5, #16]
 800db5a:	4621      	mov	r1, r4
 800db5c:	f7ff fdda 	bl	800d714 <_Bfree>
 800db60:	4628      	mov	r0, r5
 800db62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db66:	f842 0f04 	str.w	r0, [r2, #4]!
 800db6a:	3301      	adds	r3, #1
 800db6c:	e7c5      	b.n	800dafa <__lshift+0x4a>
 800db6e:	3904      	subs	r1, #4
 800db70:	f853 2b04 	ldr.w	r2, [r3], #4
 800db74:	f841 2f04 	str.w	r2, [r1, #4]!
 800db78:	459c      	cmp	ip, r3
 800db7a:	d8f9      	bhi.n	800db70 <__lshift+0xc0>
 800db7c:	e7ea      	b.n	800db54 <__lshift+0xa4>
 800db7e:	bf00      	nop
 800db80:	0800f678 	.word	0x0800f678
 800db84:	0800f689 	.word	0x0800f689

0800db88 <__mcmp>:
 800db88:	690a      	ldr	r2, [r1, #16]
 800db8a:	4603      	mov	r3, r0
 800db8c:	6900      	ldr	r0, [r0, #16]
 800db8e:	1a80      	subs	r0, r0, r2
 800db90:	b530      	push	{r4, r5, lr}
 800db92:	d10e      	bne.n	800dbb2 <__mcmp+0x2a>
 800db94:	3314      	adds	r3, #20
 800db96:	3114      	adds	r1, #20
 800db98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dba0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dba4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dba8:	4295      	cmp	r5, r2
 800dbaa:	d003      	beq.n	800dbb4 <__mcmp+0x2c>
 800dbac:	d205      	bcs.n	800dbba <__mcmp+0x32>
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	bd30      	pop	{r4, r5, pc}
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	d3f3      	bcc.n	800dba0 <__mcmp+0x18>
 800dbb8:	e7fb      	b.n	800dbb2 <__mcmp+0x2a>
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e7f9      	b.n	800dbb2 <__mcmp+0x2a>
	...

0800dbc0 <__mdiff>:
 800dbc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4689      	mov	r9, r1
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4648      	mov	r0, r9
 800dbcc:	4614      	mov	r4, r2
 800dbce:	f7ff ffdb 	bl	800db88 <__mcmp>
 800dbd2:	1e05      	subs	r5, r0, #0
 800dbd4:	d112      	bne.n	800dbfc <__mdiff+0x3c>
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	4630      	mov	r0, r6
 800dbda:	f7ff fd5b 	bl	800d694 <_Balloc>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	b928      	cbnz	r0, 800dbee <__mdiff+0x2e>
 800dbe2:	4b3f      	ldr	r3, [pc, #252]	@ (800dce0 <__mdiff+0x120>)
 800dbe4:	f240 2137 	movw	r1, #567	@ 0x237
 800dbe8:	483e      	ldr	r0, [pc, #248]	@ (800dce4 <__mdiff+0x124>)
 800dbea:	f000 fb11 	bl	800e210 <__assert_func>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	b003      	add	sp, #12
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	bfbc      	itt	lt
 800dbfe:	464b      	movlt	r3, r9
 800dc00:	46a1      	movlt	r9, r4
 800dc02:	4630      	mov	r0, r6
 800dc04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc08:	bfba      	itte	lt
 800dc0a:	461c      	movlt	r4, r3
 800dc0c:	2501      	movlt	r5, #1
 800dc0e:	2500      	movge	r5, #0
 800dc10:	f7ff fd40 	bl	800d694 <_Balloc>
 800dc14:	4602      	mov	r2, r0
 800dc16:	b918      	cbnz	r0, 800dc20 <__mdiff+0x60>
 800dc18:	4b31      	ldr	r3, [pc, #196]	@ (800dce0 <__mdiff+0x120>)
 800dc1a:	f240 2145 	movw	r1, #581	@ 0x245
 800dc1e:	e7e3      	b.n	800dbe8 <__mdiff+0x28>
 800dc20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc24:	6926      	ldr	r6, [r4, #16]
 800dc26:	60c5      	str	r5, [r0, #12]
 800dc28:	f109 0310 	add.w	r3, r9, #16
 800dc2c:	f109 0514 	add.w	r5, r9, #20
 800dc30:	f104 0e14 	add.w	lr, r4, #20
 800dc34:	f100 0b14 	add.w	fp, r0, #20
 800dc38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	46d9      	mov	r9, fp
 800dc44:	f04f 0c00 	mov.w	ip, #0
 800dc48:	9b01      	ldr	r3, [sp, #4]
 800dc4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	fa1f f38a 	uxth.w	r3, sl
 800dc58:	4619      	mov	r1, r3
 800dc5a:	b283      	uxth	r3, r0
 800dc5c:	1acb      	subs	r3, r1, r3
 800dc5e:	0c00      	lsrs	r0, r0, #16
 800dc60:	4463      	add	r3, ip
 800dc62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc70:	4576      	cmp	r6, lr
 800dc72:	f849 3b04 	str.w	r3, [r9], #4
 800dc76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc7a:	d8e5      	bhi.n	800dc48 <__mdiff+0x88>
 800dc7c:	1b33      	subs	r3, r6, r4
 800dc7e:	3b15      	subs	r3, #21
 800dc80:	f023 0303 	bic.w	r3, r3, #3
 800dc84:	3415      	adds	r4, #21
 800dc86:	3304      	adds	r3, #4
 800dc88:	42a6      	cmp	r6, r4
 800dc8a:	bf38      	it	cc
 800dc8c:	2304      	movcc	r3, #4
 800dc8e:	441d      	add	r5, r3
 800dc90:	445b      	add	r3, fp
 800dc92:	461e      	mov	r6, r3
 800dc94:	462c      	mov	r4, r5
 800dc96:	4544      	cmp	r4, r8
 800dc98:	d30e      	bcc.n	800dcb8 <__mdiff+0xf8>
 800dc9a:	f108 0103 	add.w	r1, r8, #3
 800dc9e:	1b49      	subs	r1, r1, r5
 800dca0:	f021 0103 	bic.w	r1, r1, #3
 800dca4:	3d03      	subs	r5, #3
 800dca6:	45a8      	cmp	r8, r5
 800dca8:	bf38      	it	cc
 800dcaa:	2100      	movcc	r1, #0
 800dcac:	440b      	add	r3, r1
 800dcae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcb2:	b191      	cbz	r1, 800dcda <__mdiff+0x11a>
 800dcb4:	6117      	str	r7, [r2, #16]
 800dcb6:	e79d      	b.n	800dbf4 <__mdiff+0x34>
 800dcb8:	f854 1b04 	ldr.w	r1, [r4], #4
 800dcbc:	46e6      	mov	lr, ip
 800dcbe:	0c08      	lsrs	r0, r1, #16
 800dcc0:	fa1c fc81 	uxtah	ip, ip, r1
 800dcc4:	4471      	add	r1, lr
 800dcc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dcca:	b289      	uxth	r1, r1
 800dccc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dcd0:	f846 1b04 	str.w	r1, [r6], #4
 800dcd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcd8:	e7dd      	b.n	800dc96 <__mdiff+0xd6>
 800dcda:	3f01      	subs	r7, #1
 800dcdc:	e7e7      	b.n	800dcae <__mdiff+0xee>
 800dcde:	bf00      	nop
 800dce0:	0800f678 	.word	0x0800f678
 800dce4:	0800f689 	.word	0x0800f689

0800dce8 <__d2b>:
 800dce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcec:	460f      	mov	r7, r1
 800dcee:	2101      	movs	r1, #1
 800dcf0:	ec59 8b10 	vmov	r8, r9, d0
 800dcf4:	4616      	mov	r6, r2
 800dcf6:	f7ff fccd 	bl	800d694 <_Balloc>
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	b930      	cbnz	r0, 800dd0c <__d2b+0x24>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	4b23      	ldr	r3, [pc, #140]	@ (800dd90 <__d2b+0xa8>)
 800dd02:	4824      	ldr	r0, [pc, #144]	@ (800dd94 <__d2b+0xac>)
 800dd04:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd08:	f000 fa82 	bl	800e210 <__assert_func>
 800dd0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd14:	b10d      	cbz	r5, 800dd1a <__d2b+0x32>
 800dd16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd1a:	9301      	str	r3, [sp, #4]
 800dd1c:	f1b8 0300 	subs.w	r3, r8, #0
 800dd20:	d023      	beq.n	800dd6a <__d2b+0x82>
 800dd22:	4668      	mov	r0, sp
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	f7ff fd7c 	bl	800d822 <__lo0bits>
 800dd2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd2e:	b1d0      	cbz	r0, 800dd66 <__d2b+0x7e>
 800dd30:	f1c0 0320 	rsb	r3, r0, #32
 800dd34:	fa02 f303 	lsl.w	r3, r2, r3
 800dd38:	430b      	orrs	r3, r1
 800dd3a:	40c2      	lsrs	r2, r0
 800dd3c:	6163      	str	r3, [r4, #20]
 800dd3e:	9201      	str	r2, [sp, #4]
 800dd40:	9b01      	ldr	r3, [sp, #4]
 800dd42:	61a3      	str	r3, [r4, #24]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	bf0c      	ite	eq
 800dd48:	2201      	moveq	r2, #1
 800dd4a:	2202      	movne	r2, #2
 800dd4c:	6122      	str	r2, [r4, #16]
 800dd4e:	b1a5      	cbz	r5, 800dd7a <__d2b+0x92>
 800dd50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd54:	4405      	add	r5, r0
 800dd56:	603d      	str	r5, [r7, #0]
 800dd58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd5c:	6030      	str	r0, [r6, #0]
 800dd5e:	4620      	mov	r0, r4
 800dd60:	b003      	add	sp, #12
 800dd62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd66:	6161      	str	r1, [r4, #20]
 800dd68:	e7ea      	b.n	800dd40 <__d2b+0x58>
 800dd6a:	a801      	add	r0, sp, #4
 800dd6c:	f7ff fd59 	bl	800d822 <__lo0bits>
 800dd70:	9b01      	ldr	r3, [sp, #4]
 800dd72:	6163      	str	r3, [r4, #20]
 800dd74:	3020      	adds	r0, #32
 800dd76:	2201      	movs	r2, #1
 800dd78:	e7e8      	b.n	800dd4c <__d2b+0x64>
 800dd7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd82:	6038      	str	r0, [r7, #0]
 800dd84:	6918      	ldr	r0, [r3, #16]
 800dd86:	f7ff fd2d 	bl	800d7e4 <__hi0bits>
 800dd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd8e:	e7e5      	b.n	800dd5c <__d2b+0x74>
 800dd90:	0800f678 	.word	0x0800f678
 800dd94:	0800f689 	.word	0x0800f689

0800dd98 <__ssputs_r>:
 800dd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9c:	688e      	ldr	r6, [r1, #8]
 800dd9e:	461f      	mov	r7, r3
 800dda0:	42be      	cmp	r6, r7
 800dda2:	680b      	ldr	r3, [r1, #0]
 800dda4:	4682      	mov	sl, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	4690      	mov	r8, r2
 800ddaa:	d82d      	bhi.n	800de08 <__ssputs_r+0x70>
 800ddac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddb4:	d026      	beq.n	800de04 <__ssputs_r+0x6c>
 800ddb6:	6965      	ldr	r5, [r4, #20]
 800ddb8:	6909      	ldr	r1, [r1, #16]
 800ddba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddbe:	eba3 0901 	sub.w	r9, r3, r1
 800ddc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddc6:	1c7b      	adds	r3, r7, #1
 800ddc8:	444b      	add	r3, r9
 800ddca:	106d      	asrs	r5, r5, #1
 800ddcc:	429d      	cmp	r5, r3
 800ddce:	bf38      	it	cc
 800ddd0:	461d      	movcc	r5, r3
 800ddd2:	0553      	lsls	r3, r2, #21
 800ddd4:	d527      	bpl.n	800de26 <__ssputs_r+0x8e>
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	f7ff fbd0 	bl	800d57c <_malloc_r>
 800dddc:	4606      	mov	r6, r0
 800ddde:	b360      	cbz	r0, 800de3a <__ssputs_r+0xa2>
 800dde0:	6921      	ldr	r1, [r4, #16]
 800dde2:	464a      	mov	r2, r9
 800dde4:	f000 fa06 	bl	800e1f4 <memcpy>
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ddee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddf2:	81a3      	strh	r3, [r4, #12]
 800ddf4:	6126      	str	r6, [r4, #16]
 800ddf6:	6165      	str	r5, [r4, #20]
 800ddf8:	444e      	add	r6, r9
 800ddfa:	eba5 0509 	sub.w	r5, r5, r9
 800ddfe:	6026      	str	r6, [r4, #0]
 800de00:	60a5      	str	r5, [r4, #8]
 800de02:	463e      	mov	r6, r7
 800de04:	42be      	cmp	r6, r7
 800de06:	d900      	bls.n	800de0a <__ssputs_r+0x72>
 800de08:	463e      	mov	r6, r7
 800de0a:	6820      	ldr	r0, [r4, #0]
 800de0c:	4632      	mov	r2, r6
 800de0e:	4641      	mov	r1, r8
 800de10:	f000 f9c6 	bl	800e1a0 <memmove>
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	1b9b      	subs	r3, r3, r6
 800de18:	60a3      	str	r3, [r4, #8]
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	4433      	add	r3, r6
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	2000      	movs	r0, #0
 800de22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de26:	462a      	mov	r2, r5
 800de28:	f000 fa36 	bl	800e298 <_realloc_r>
 800de2c:	4606      	mov	r6, r0
 800de2e:	2800      	cmp	r0, #0
 800de30:	d1e0      	bne.n	800ddf4 <__ssputs_r+0x5c>
 800de32:	6921      	ldr	r1, [r4, #16]
 800de34:	4650      	mov	r0, sl
 800de36:	f7ff fb2d 	bl	800d494 <_free_r>
 800de3a:	230c      	movs	r3, #12
 800de3c:	f8ca 3000 	str.w	r3, [sl]
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de46:	81a3      	strh	r3, [r4, #12]
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	e7e9      	b.n	800de22 <__ssputs_r+0x8a>
	...

0800de50 <_svfiprintf_r>:
 800de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	4698      	mov	r8, r3
 800de56:	898b      	ldrh	r3, [r1, #12]
 800de58:	061b      	lsls	r3, r3, #24
 800de5a:	b09d      	sub	sp, #116	@ 0x74
 800de5c:	4607      	mov	r7, r0
 800de5e:	460d      	mov	r5, r1
 800de60:	4614      	mov	r4, r2
 800de62:	d510      	bpl.n	800de86 <_svfiprintf_r+0x36>
 800de64:	690b      	ldr	r3, [r1, #16]
 800de66:	b973      	cbnz	r3, 800de86 <_svfiprintf_r+0x36>
 800de68:	2140      	movs	r1, #64	@ 0x40
 800de6a:	f7ff fb87 	bl	800d57c <_malloc_r>
 800de6e:	6028      	str	r0, [r5, #0]
 800de70:	6128      	str	r0, [r5, #16]
 800de72:	b930      	cbnz	r0, 800de82 <_svfiprintf_r+0x32>
 800de74:	230c      	movs	r3, #12
 800de76:	603b      	str	r3, [r7, #0]
 800de78:	f04f 30ff 	mov.w	r0, #4294967295
 800de7c:	b01d      	add	sp, #116	@ 0x74
 800de7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de82:	2340      	movs	r3, #64	@ 0x40
 800de84:	616b      	str	r3, [r5, #20]
 800de86:	2300      	movs	r3, #0
 800de88:	9309      	str	r3, [sp, #36]	@ 0x24
 800de8a:	2320      	movs	r3, #32
 800de8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de90:	f8cd 800c 	str.w	r8, [sp, #12]
 800de94:	2330      	movs	r3, #48	@ 0x30
 800de96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e034 <_svfiprintf_r+0x1e4>
 800de9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de9e:	f04f 0901 	mov.w	r9, #1
 800dea2:	4623      	mov	r3, r4
 800dea4:	469a      	mov	sl, r3
 800dea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deaa:	b10a      	cbz	r2, 800deb0 <_svfiprintf_r+0x60>
 800deac:	2a25      	cmp	r2, #37	@ 0x25
 800deae:	d1f9      	bne.n	800dea4 <_svfiprintf_r+0x54>
 800deb0:	ebba 0b04 	subs.w	fp, sl, r4
 800deb4:	d00b      	beq.n	800dece <_svfiprintf_r+0x7e>
 800deb6:	465b      	mov	r3, fp
 800deb8:	4622      	mov	r2, r4
 800deba:	4629      	mov	r1, r5
 800debc:	4638      	mov	r0, r7
 800debe:	f7ff ff6b 	bl	800dd98 <__ssputs_r>
 800dec2:	3001      	adds	r0, #1
 800dec4:	f000 80a7 	beq.w	800e016 <_svfiprintf_r+0x1c6>
 800dec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deca:	445a      	add	r2, fp
 800decc:	9209      	str	r2, [sp, #36]	@ 0x24
 800dece:	f89a 3000 	ldrb.w	r3, [sl]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f000 809f 	beq.w	800e016 <_svfiprintf_r+0x1c6>
 800ded8:	2300      	movs	r3, #0
 800deda:	f04f 32ff 	mov.w	r2, #4294967295
 800dede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dee2:	f10a 0a01 	add.w	sl, sl, #1
 800dee6:	9304      	str	r3, [sp, #16]
 800dee8:	9307      	str	r3, [sp, #28]
 800deea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800deee:	931a      	str	r3, [sp, #104]	@ 0x68
 800def0:	4654      	mov	r4, sl
 800def2:	2205      	movs	r2, #5
 800def4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def8:	484e      	ldr	r0, [pc, #312]	@ (800e034 <_svfiprintf_r+0x1e4>)
 800defa:	f7f2 f9f1 	bl	80002e0 <memchr>
 800defe:	9a04      	ldr	r2, [sp, #16]
 800df00:	b9d8      	cbnz	r0, 800df3a <_svfiprintf_r+0xea>
 800df02:	06d0      	lsls	r0, r2, #27
 800df04:	bf44      	itt	mi
 800df06:	2320      	movmi	r3, #32
 800df08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df0c:	0711      	lsls	r1, r2, #28
 800df0e:	bf44      	itt	mi
 800df10:	232b      	movmi	r3, #43	@ 0x2b
 800df12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df16:	f89a 3000 	ldrb.w	r3, [sl]
 800df1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800df1c:	d015      	beq.n	800df4a <_svfiprintf_r+0xfa>
 800df1e:	9a07      	ldr	r2, [sp, #28]
 800df20:	4654      	mov	r4, sl
 800df22:	2000      	movs	r0, #0
 800df24:	f04f 0c0a 	mov.w	ip, #10
 800df28:	4621      	mov	r1, r4
 800df2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df2e:	3b30      	subs	r3, #48	@ 0x30
 800df30:	2b09      	cmp	r3, #9
 800df32:	d94b      	bls.n	800dfcc <_svfiprintf_r+0x17c>
 800df34:	b1b0      	cbz	r0, 800df64 <_svfiprintf_r+0x114>
 800df36:	9207      	str	r2, [sp, #28]
 800df38:	e014      	b.n	800df64 <_svfiprintf_r+0x114>
 800df3a:	eba0 0308 	sub.w	r3, r0, r8
 800df3e:	fa09 f303 	lsl.w	r3, r9, r3
 800df42:	4313      	orrs	r3, r2
 800df44:	9304      	str	r3, [sp, #16]
 800df46:	46a2      	mov	sl, r4
 800df48:	e7d2      	b.n	800def0 <_svfiprintf_r+0xa0>
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	1d19      	adds	r1, r3, #4
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	9103      	str	r1, [sp, #12]
 800df52:	2b00      	cmp	r3, #0
 800df54:	bfbb      	ittet	lt
 800df56:	425b      	neglt	r3, r3
 800df58:	f042 0202 	orrlt.w	r2, r2, #2
 800df5c:	9307      	strge	r3, [sp, #28]
 800df5e:	9307      	strlt	r3, [sp, #28]
 800df60:	bfb8      	it	lt
 800df62:	9204      	strlt	r2, [sp, #16]
 800df64:	7823      	ldrb	r3, [r4, #0]
 800df66:	2b2e      	cmp	r3, #46	@ 0x2e
 800df68:	d10a      	bne.n	800df80 <_svfiprintf_r+0x130>
 800df6a:	7863      	ldrb	r3, [r4, #1]
 800df6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800df6e:	d132      	bne.n	800dfd6 <_svfiprintf_r+0x186>
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	1d1a      	adds	r2, r3, #4
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	9203      	str	r2, [sp, #12]
 800df78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df7c:	3402      	adds	r4, #2
 800df7e:	9305      	str	r3, [sp, #20]
 800df80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e044 <_svfiprintf_r+0x1f4>
 800df84:	7821      	ldrb	r1, [r4, #0]
 800df86:	2203      	movs	r2, #3
 800df88:	4650      	mov	r0, sl
 800df8a:	f7f2 f9a9 	bl	80002e0 <memchr>
 800df8e:	b138      	cbz	r0, 800dfa0 <_svfiprintf_r+0x150>
 800df90:	9b04      	ldr	r3, [sp, #16]
 800df92:	eba0 000a 	sub.w	r0, r0, sl
 800df96:	2240      	movs	r2, #64	@ 0x40
 800df98:	4082      	lsls	r2, r0
 800df9a:	4313      	orrs	r3, r2
 800df9c:	3401      	adds	r4, #1
 800df9e:	9304      	str	r3, [sp, #16]
 800dfa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfa4:	4824      	ldr	r0, [pc, #144]	@ (800e038 <_svfiprintf_r+0x1e8>)
 800dfa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfaa:	2206      	movs	r2, #6
 800dfac:	f7f2 f998 	bl	80002e0 <memchr>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d036      	beq.n	800e022 <_svfiprintf_r+0x1d2>
 800dfb4:	4b21      	ldr	r3, [pc, #132]	@ (800e03c <_svfiprintf_r+0x1ec>)
 800dfb6:	bb1b      	cbnz	r3, 800e000 <_svfiprintf_r+0x1b0>
 800dfb8:	9b03      	ldr	r3, [sp, #12]
 800dfba:	3307      	adds	r3, #7
 800dfbc:	f023 0307 	bic.w	r3, r3, #7
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	9303      	str	r3, [sp, #12]
 800dfc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfc6:	4433      	add	r3, r6
 800dfc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfca:	e76a      	b.n	800dea2 <_svfiprintf_r+0x52>
 800dfcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	2001      	movs	r0, #1
 800dfd4:	e7a8      	b.n	800df28 <_svfiprintf_r+0xd8>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	3401      	adds	r4, #1
 800dfda:	9305      	str	r3, [sp, #20]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	f04f 0c0a 	mov.w	ip, #10
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfe8:	3a30      	subs	r2, #48	@ 0x30
 800dfea:	2a09      	cmp	r2, #9
 800dfec:	d903      	bls.n	800dff6 <_svfiprintf_r+0x1a6>
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d0c6      	beq.n	800df80 <_svfiprintf_r+0x130>
 800dff2:	9105      	str	r1, [sp, #20]
 800dff4:	e7c4      	b.n	800df80 <_svfiprintf_r+0x130>
 800dff6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dffa:	4604      	mov	r4, r0
 800dffc:	2301      	movs	r3, #1
 800dffe:	e7f0      	b.n	800dfe2 <_svfiprintf_r+0x192>
 800e000:	ab03      	add	r3, sp, #12
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	462a      	mov	r2, r5
 800e006:	4b0e      	ldr	r3, [pc, #56]	@ (800e040 <_svfiprintf_r+0x1f0>)
 800e008:	a904      	add	r1, sp, #16
 800e00a:	4638      	mov	r0, r7
 800e00c:	f7fd ff14 	bl	800be38 <_printf_float>
 800e010:	1c42      	adds	r2, r0, #1
 800e012:	4606      	mov	r6, r0
 800e014:	d1d6      	bne.n	800dfc4 <_svfiprintf_r+0x174>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	065b      	lsls	r3, r3, #25
 800e01a:	f53f af2d 	bmi.w	800de78 <_svfiprintf_r+0x28>
 800e01e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e020:	e72c      	b.n	800de7c <_svfiprintf_r+0x2c>
 800e022:	ab03      	add	r3, sp, #12
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	462a      	mov	r2, r5
 800e028:	4b05      	ldr	r3, [pc, #20]	@ (800e040 <_svfiprintf_r+0x1f0>)
 800e02a:	a904      	add	r1, sp, #16
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7fe f98b 	bl	800c348 <_printf_i>
 800e032:	e7ed      	b.n	800e010 <_svfiprintf_r+0x1c0>
 800e034:	0800f7e0 	.word	0x0800f7e0
 800e038:	0800f7ea 	.word	0x0800f7ea
 800e03c:	0800be39 	.word	0x0800be39
 800e040:	0800dd99 	.word	0x0800dd99
 800e044:	0800f7e6 	.word	0x0800f7e6

0800e048 <__sflush_r>:
 800e048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e050:	0716      	lsls	r6, r2, #28
 800e052:	4605      	mov	r5, r0
 800e054:	460c      	mov	r4, r1
 800e056:	d454      	bmi.n	800e102 <__sflush_r+0xba>
 800e058:	684b      	ldr	r3, [r1, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	dc02      	bgt.n	800e064 <__sflush_r+0x1c>
 800e05e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e060:	2b00      	cmp	r3, #0
 800e062:	dd48      	ble.n	800e0f6 <__sflush_r+0xae>
 800e064:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e066:	2e00      	cmp	r6, #0
 800e068:	d045      	beq.n	800e0f6 <__sflush_r+0xae>
 800e06a:	2300      	movs	r3, #0
 800e06c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e070:	682f      	ldr	r7, [r5, #0]
 800e072:	6a21      	ldr	r1, [r4, #32]
 800e074:	602b      	str	r3, [r5, #0]
 800e076:	d030      	beq.n	800e0da <__sflush_r+0x92>
 800e078:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e07a:	89a3      	ldrh	r3, [r4, #12]
 800e07c:	0759      	lsls	r1, r3, #29
 800e07e:	d505      	bpl.n	800e08c <__sflush_r+0x44>
 800e080:	6863      	ldr	r3, [r4, #4]
 800e082:	1ad2      	subs	r2, r2, r3
 800e084:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e086:	b10b      	cbz	r3, 800e08c <__sflush_r+0x44>
 800e088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e08a:	1ad2      	subs	r2, r2, r3
 800e08c:	2300      	movs	r3, #0
 800e08e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e090:	6a21      	ldr	r1, [r4, #32]
 800e092:	4628      	mov	r0, r5
 800e094:	47b0      	blx	r6
 800e096:	1c43      	adds	r3, r0, #1
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	d106      	bne.n	800e0aa <__sflush_r+0x62>
 800e09c:	6829      	ldr	r1, [r5, #0]
 800e09e:	291d      	cmp	r1, #29
 800e0a0:	d82b      	bhi.n	800e0fa <__sflush_r+0xb2>
 800e0a2:	4a2a      	ldr	r2, [pc, #168]	@ (800e14c <__sflush_r+0x104>)
 800e0a4:	410a      	asrs	r2, r1
 800e0a6:	07d6      	lsls	r6, r2, #31
 800e0a8:	d427      	bmi.n	800e0fa <__sflush_r+0xb2>
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	6062      	str	r2, [r4, #4]
 800e0ae:	04d9      	lsls	r1, r3, #19
 800e0b0:	6922      	ldr	r2, [r4, #16]
 800e0b2:	6022      	str	r2, [r4, #0]
 800e0b4:	d504      	bpl.n	800e0c0 <__sflush_r+0x78>
 800e0b6:	1c42      	adds	r2, r0, #1
 800e0b8:	d101      	bne.n	800e0be <__sflush_r+0x76>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	b903      	cbnz	r3, 800e0c0 <__sflush_r+0x78>
 800e0be:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0c2:	602f      	str	r7, [r5, #0]
 800e0c4:	b1b9      	cbz	r1, 800e0f6 <__sflush_r+0xae>
 800e0c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0ca:	4299      	cmp	r1, r3
 800e0cc:	d002      	beq.n	800e0d4 <__sflush_r+0x8c>
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f7ff f9e0 	bl	800d494 <_free_r>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0d8:	e00d      	b.n	800e0f6 <__sflush_r+0xae>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	4628      	mov	r0, r5
 800e0de:	47b0      	blx	r6
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	1c50      	adds	r0, r2, #1
 800e0e4:	d1c9      	bne.n	800e07a <__sflush_r+0x32>
 800e0e6:	682b      	ldr	r3, [r5, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d0c6      	beq.n	800e07a <__sflush_r+0x32>
 800e0ec:	2b1d      	cmp	r3, #29
 800e0ee:	d001      	beq.n	800e0f4 <__sflush_r+0xac>
 800e0f0:	2b16      	cmp	r3, #22
 800e0f2:	d11e      	bne.n	800e132 <__sflush_r+0xea>
 800e0f4:	602f      	str	r7, [r5, #0]
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	e022      	b.n	800e140 <__sflush_r+0xf8>
 800e0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0fe:	b21b      	sxth	r3, r3
 800e100:	e01b      	b.n	800e13a <__sflush_r+0xf2>
 800e102:	690f      	ldr	r7, [r1, #16]
 800e104:	2f00      	cmp	r7, #0
 800e106:	d0f6      	beq.n	800e0f6 <__sflush_r+0xae>
 800e108:	0793      	lsls	r3, r2, #30
 800e10a:	680e      	ldr	r6, [r1, #0]
 800e10c:	bf08      	it	eq
 800e10e:	694b      	ldreq	r3, [r1, #20]
 800e110:	600f      	str	r7, [r1, #0]
 800e112:	bf18      	it	ne
 800e114:	2300      	movne	r3, #0
 800e116:	eba6 0807 	sub.w	r8, r6, r7
 800e11a:	608b      	str	r3, [r1, #8]
 800e11c:	f1b8 0f00 	cmp.w	r8, #0
 800e120:	dde9      	ble.n	800e0f6 <__sflush_r+0xae>
 800e122:	6a21      	ldr	r1, [r4, #32]
 800e124:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e126:	4643      	mov	r3, r8
 800e128:	463a      	mov	r2, r7
 800e12a:	4628      	mov	r0, r5
 800e12c:	47b0      	blx	r6
 800e12e:	2800      	cmp	r0, #0
 800e130:	dc08      	bgt.n	800e144 <__sflush_r+0xfc>
 800e132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	f04f 30ff 	mov.w	r0, #4294967295
 800e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e144:	4407      	add	r7, r0
 800e146:	eba8 0800 	sub.w	r8, r8, r0
 800e14a:	e7e7      	b.n	800e11c <__sflush_r+0xd4>
 800e14c:	dfbffffe 	.word	0xdfbffffe

0800e150 <_fflush_r>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	690b      	ldr	r3, [r1, #16]
 800e154:	4605      	mov	r5, r0
 800e156:	460c      	mov	r4, r1
 800e158:	b913      	cbnz	r3, 800e160 <_fflush_r+0x10>
 800e15a:	2500      	movs	r5, #0
 800e15c:	4628      	mov	r0, r5
 800e15e:	bd38      	pop	{r3, r4, r5, pc}
 800e160:	b118      	cbz	r0, 800e16a <_fflush_r+0x1a>
 800e162:	6a03      	ldr	r3, [r0, #32]
 800e164:	b90b      	cbnz	r3, 800e16a <_fflush_r+0x1a>
 800e166:	f7fe fa9b 	bl	800c6a0 <__sinit>
 800e16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0f3      	beq.n	800e15a <_fflush_r+0xa>
 800e172:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e174:	07d0      	lsls	r0, r2, #31
 800e176:	d404      	bmi.n	800e182 <_fflush_r+0x32>
 800e178:	0599      	lsls	r1, r3, #22
 800e17a:	d402      	bmi.n	800e182 <_fflush_r+0x32>
 800e17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e17e:	f7fe fba6 	bl	800c8ce <__retarget_lock_acquire_recursive>
 800e182:	4628      	mov	r0, r5
 800e184:	4621      	mov	r1, r4
 800e186:	f7ff ff5f 	bl	800e048 <__sflush_r>
 800e18a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e18c:	07da      	lsls	r2, r3, #31
 800e18e:	4605      	mov	r5, r0
 800e190:	d4e4      	bmi.n	800e15c <_fflush_r+0xc>
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	059b      	lsls	r3, r3, #22
 800e196:	d4e1      	bmi.n	800e15c <_fflush_r+0xc>
 800e198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e19a:	f7fe fb99 	bl	800c8d0 <__retarget_lock_release_recursive>
 800e19e:	e7dd      	b.n	800e15c <_fflush_r+0xc>

0800e1a0 <memmove>:
 800e1a0:	4288      	cmp	r0, r1
 800e1a2:	b510      	push	{r4, lr}
 800e1a4:	eb01 0402 	add.w	r4, r1, r2
 800e1a8:	d902      	bls.n	800e1b0 <memmove+0x10>
 800e1aa:	4284      	cmp	r4, r0
 800e1ac:	4623      	mov	r3, r4
 800e1ae:	d807      	bhi.n	800e1c0 <memmove+0x20>
 800e1b0:	1e43      	subs	r3, r0, #1
 800e1b2:	42a1      	cmp	r1, r4
 800e1b4:	d008      	beq.n	800e1c8 <memmove+0x28>
 800e1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1be:	e7f8      	b.n	800e1b2 <memmove+0x12>
 800e1c0:	4402      	add	r2, r0
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	428a      	cmp	r2, r1
 800e1c6:	d100      	bne.n	800e1ca <memmove+0x2a>
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1d2:	e7f7      	b.n	800e1c4 <memmove+0x24>

0800e1d4 <_sbrk_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	4d06      	ldr	r5, [pc, #24]	@ (800e1f0 <_sbrk_r+0x1c>)
 800e1d8:	2300      	movs	r3, #0
 800e1da:	4604      	mov	r4, r0
 800e1dc:	4608      	mov	r0, r1
 800e1de:	602b      	str	r3, [r5, #0]
 800e1e0:	f7f4 fee8 	bl	8002fb4 <_sbrk>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d102      	bne.n	800e1ee <_sbrk_r+0x1a>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	b103      	cbz	r3, 800e1ee <_sbrk_r+0x1a>
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	240027c4 	.word	0x240027c4

0800e1f4 <memcpy>:
 800e1f4:	440a      	add	r2, r1
 800e1f6:	4291      	cmp	r1, r2
 800e1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1fc:	d100      	bne.n	800e200 <memcpy+0xc>
 800e1fe:	4770      	bx	lr
 800e200:	b510      	push	{r4, lr}
 800e202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e20a:	4291      	cmp	r1, r2
 800e20c:	d1f9      	bne.n	800e202 <memcpy+0xe>
 800e20e:	bd10      	pop	{r4, pc}

0800e210 <__assert_func>:
 800e210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e212:	4614      	mov	r4, r2
 800e214:	461a      	mov	r2, r3
 800e216:	4b09      	ldr	r3, [pc, #36]	@ (800e23c <__assert_func+0x2c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4605      	mov	r5, r0
 800e21c:	68d8      	ldr	r0, [r3, #12]
 800e21e:	b954      	cbnz	r4, 800e236 <__assert_func+0x26>
 800e220:	4b07      	ldr	r3, [pc, #28]	@ (800e240 <__assert_func+0x30>)
 800e222:	461c      	mov	r4, r3
 800e224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e228:	9100      	str	r1, [sp, #0]
 800e22a:	462b      	mov	r3, r5
 800e22c:	4905      	ldr	r1, [pc, #20]	@ (800e244 <__assert_func+0x34>)
 800e22e:	f000 f86f 	bl	800e310 <fiprintf>
 800e232:	f000 f87f 	bl	800e334 <abort>
 800e236:	4b04      	ldr	r3, [pc, #16]	@ (800e248 <__assert_func+0x38>)
 800e238:	e7f4      	b.n	800e224 <__assert_func+0x14>
 800e23a:	bf00      	nop
 800e23c:	24000020 	.word	0x24000020
 800e240:	0800f836 	.word	0x0800f836
 800e244:	0800f808 	.word	0x0800f808
 800e248:	0800f7fb 	.word	0x0800f7fb

0800e24c <_calloc_r>:
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	fba1 5402 	umull	r5, r4, r1, r2
 800e252:	b93c      	cbnz	r4, 800e264 <_calloc_r+0x18>
 800e254:	4629      	mov	r1, r5
 800e256:	f7ff f991 	bl	800d57c <_malloc_r>
 800e25a:	4606      	mov	r6, r0
 800e25c:	b928      	cbnz	r0, 800e26a <_calloc_r+0x1e>
 800e25e:	2600      	movs	r6, #0
 800e260:	4630      	mov	r0, r6
 800e262:	bd70      	pop	{r4, r5, r6, pc}
 800e264:	220c      	movs	r2, #12
 800e266:	6002      	str	r2, [r0, #0]
 800e268:	e7f9      	b.n	800e25e <_calloc_r+0x12>
 800e26a:	462a      	mov	r2, r5
 800e26c:	4621      	mov	r1, r4
 800e26e:	f7fe fab0 	bl	800c7d2 <memset>
 800e272:	e7f5      	b.n	800e260 <_calloc_r+0x14>

0800e274 <__ascii_mbtowc>:
 800e274:	b082      	sub	sp, #8
 800e276:	b901      	cbnz	r1, 800e27a <__ascii_mbtowc+0x6>
 800e278:	a901      	add	r1, sp, #4
 800e27a:	b142      	cbz	r2, 800e28e <__ascii_mbtowc+0x1a>
 800e27c:	b14b      	cbz	r3, 800e292 <__ascii_mbtowc+0x1e>
 800e27e:	7813      	ldrb	r3, [r2, #0]
 800e280:	600b      	str	r3, [r1, #0]
 800e282:	7812      	ldrb	r2, [r2, #0]
 800e284:	1e10      	subs	r0, r2, #0
 800e286:	bf18      	it	ne
 800e288:	2001      	movne	r0, #1
 800e28a:	b002      	add	sp, #8
 800e28c:	4770      	bx	lr
 800e28e:	4610      	mov	r0, r2
 800e290:	e7fb      	b.n	800e28a <__ascii_mbtowc+0x16>
 800e292:	f06f 0001 	mvn.w	r0, #1
 800e296:	e7f8      	b.n	800e28a <__ascii_mbtowc+0x16>

0800e298 <_realloc_r>:
 800e298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29c:	4680      	mov	r8, r0
 800e29e:	4615      	mov	r5, r2
 800e2a0:	460c      	mov	r4, r1
 800e2a2:	b921      	cbnz	r1, 800e2ae <_realloc_r+0x16>
 800e2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	f7ff b967 	b.w	800d57c <_malloc_r>
 800e2ae:	b92a      	cbnz	r2, 800e2bc <_realloc_r+0x24>
 800e2b0:	f7ff f8f0 	bl	800d494 <_free_r>
 800e2b4:	2400      	movs	r4, #0
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2bc:	f000 f841 	bl	800e342 <_malloc_usable_size_r>
 800e2c0:	4285      	cmp	r5, r0
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	d802      	bhi.n	800e2cc <_realloc_r+0x34>
 800e2c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2ca:	d8f4      	bhi.n	800e2b6 <_realloc_r+0x1e>
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	f7ff f954 	bl	800d57c <_malloc_r>
 800e2d4:	4607      	mov	r7, r0
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d0ec      	beq.n	800e2b4 <_realloc_r+0x1c>
 800e2da:	42b5      	cmp	r5, r6
 800e2dc:	462a      	mov	r2, r5
 800e2de:	4621      	mov	r1, r4
 800e2e0:	bf28      	it	cs
 800e2e2:	4632      	movcs	r2, r6
 800e2e4:	f7ff ff86 	bl	800e1f4 <memcpy>
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	f7ff f8d2 	bl	800d494 <_free_r>
 800e2f0:	463c      	mov	r4, r7
 800e2f2:	e7e0      	b.n	800e2b6 <_realloc_r+0x1e>

0800e2f4 <__ascii_wctomb>:
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	4608      	mov	r0, r1
 800e2f8:	b141      	cbz	r1, 800e30c <__ascii_wctomb+0x18>
 800e2fa:	2aff      	cmp	r2, #255	@ 0xff
 800e2fc:	d904      	bls.n	800e308 <__ascii_wctomb+0x14>
 800e2fe:	228a      	movs	r2, #138	@ 0x8a
 800e300:	601a      	str	r2, [r3, #0]
 800e302:	f04f 30ff 	mov.w	r0, #4294967295
 800e306:	4770      	bx	lr
 800e308:	700a      	strb	r2, [r1, #0]
 800e30a:	2001      	movs	r0, #1
 800e30c:	4770      	bx	lr
	...

0800e310 <fiprintf>:
 800e310:	b40e      	push	{r1, r2, r3}
 800e312:	b503      	push	{r0, r1, lr}
 800e314:	4601      	mov	r1, r0
 800e316:	ab03      	add	r3, sp, #12
 800e318:	4805      	ldr	r0, [pc, #20]	@ (800e330 <fiprintf+0x20>)
 800e31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31e:	6800      	ldr	r0, [r0, #0]
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	f000 f83f 	bl	800e3a4 <_vfiprintf_r>
 800e326:	b002      	add	sp, #8
 800e328:	f85d eb04 	ldr.w	lr, [sp], #4
 800e32c:	b003      	add	sp, #12
 800e32e:	4770      	bx	lr
 800e330:	24000020 	.word	0x24000020

0800e334 <abort>:
 800e334:	b508      	push	{r3, lr}
 800e336:	2006      	movs	r0, #6
 800e338:	f000 fa08 	bl	800e74c <raise>
 800e33c:	2001      	movs	r0, #1
 800e33e:	f7f4 fdc1 	bl	8002ec4 <_exit>

0800e342 <_malloc_usable_size_r>:
 800e342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e346:	1f18      	subs	r0, r3, #4
 800e348:	2b00      	cmp	r3, #0
 800e34a:	bfbc      	itt	lt
 800e34c:	580b      	ldrlt	r3, [r1, r0]
 800e34e:	18c0      	addlt	r0, r0, r3
 800e350:	4770      	bx	lr

0800e352 <__sfputc_r>:
 800e352:	6893      	ldr	r3, [r2, #8]
 800e354:	3b01      	subs	r3, #1
 800e356:	2b00      	cmp	r3, #0
 800e358:	b410      	push	{r4}
 800e35a:	6093      	str	r3, [r2, #8]
 800e35c:	da08      	bge.n	800e370 <__sfputc_r+0x1e>
 800e35e:	6994      	ldr	r4, [r2, #24]
 800e360:	42a3      	cmp	r3, r4
 800e362:	db01      	blt.n	800e368 <__sfputc_r+0x16>
 800e364:	290a      	cmp	r1, #10
 800e366:	d103      	bne.n	800e370 <__sfputc_r+0x1e>
 800e368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e36c:	f000 b932 	b.w	800e5d4 <__swbuf_r>
 800e370:	6813      	ldr	r3, [r2, #0]
 800e372:	1c58      	adds	r0, r3, #1
 800e374:	6010      	str	r0, [r2, #0]
 800e376:	7019      	strb	r1, [r3, #0]
 800e378:	4608      	mov	r0, r1
 800e37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <__sfputs_r>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	4606      	mov	r6, r0
 800e384:	460f      	mov	r7, r1
 800e386:	4614      	mov	r4, r2
 800e388:	18d5      	adds	r5, r2, r3
 800e38a:	42ac      	cmp	r4, r5
 800e38c:	d101      	bne.n	800e392 <__sfputs_r+0x12>
 800e38e:	2000      	movs	r0, #0
 800e390:	e007      	b.n	800e3a2 <__sfputs_r+0x22>
 800e392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e396:	463a      	mov	r2, r7
 800e398:	4630      	mov	r0, r6
 800e39a:	f7ff ffda 	bl	800e352 <__sfputc_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d1f3      	bne.n	800e38a <__sfputs_r+0xa>
 800e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3a4 <_vfiprintf_r>:
 800e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	460d      	mov	r5, r1
 800e3aa:	b09d      	sub	sp, #116	@ 0x74
 800e3ac:	4614      	mov	r4, r2
 800e3ae:	4698      	mov	r8, r3
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	b118      	cbz	r0, 800e3bc <_vfiprintf_r+0x18>
 800e3b4:	6a03      	ldr	r3, [r0, #32]
 800e3b6:	b90b      	cbnz	r3, 800e3bc <_vfiprintf_r+0x18>
 800e3b8:	f7fe f972 	bl	800c6a0 <__sinit>
 800e3bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3be:	07d9      	lsls	r1, r3, #31
 800e3c0:	d405      	bmi.n	800e3ce <_vfiprintf_r+0x2a>
 800e3c2:	89ab      	ldrh	r3, [r5, #12]
 800e3c4:	059a      	lsls	r2, r3, #22
 800e3c6:	d402      	bmi.n	800e3ce <_vfiprintf_r+0x2a>
 800e3c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3ca:	f7fe fa80 	bl	800c8ce <__retarget_lock_acquire_recursive>
 800e3ce:	89ab      	ldrh	r3, [r5, #12]
 800e3d0:	071b      	lsls	r3, r3, #28
 800e3d2:	d501      	bpl.n	800e3d8 <_vfiprintf_r+0x34>
 800e3d4:	692b      	ldr	r3, [r5, #16]
 800e3d6:	b99b      	cbnz	r3, 800e400 <_vfiprintf_r+0x5c>
 800e3d8:	4629      	mov	r1, r5
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f000 f938 	bl	800e650 <__swsetup_r>
 800e3e0:	b170      	cbz	r0, 800e400 <_vfiprintf_r+0x5c>
 800e3e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3e4:	07dc      	lsls	r4, r3, #31
 800e3e6:	d504      	bpl.n	800e3f2 <_vfiprintf_r+0x4e>
 800e3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ec:	b01d      	add	sp, #116	@ 0x74
 800e3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	0598      	lsls	r0, r3, #22
 800e3f6:	d4f7      	bmi.n	800e3e8 <_vfiprintf_r+0x44>
 800e3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3fa:	f7fe fa69 	bl	800c8d0 <__retarget_lock_release_recursive>
 800e3fe:	e7f3      	b.n	800e3e8 <_vfiprintf_r+0x44>
 800e400:	2300      	movs	r3, #0
 800e402:	9309      	str	r3, [sp, #36]	@ 0x24
 800e404:	2320      	movs	r3, #32
 800e406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e40a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e40e:	2330      	movs	r3, #48	@ 0x30
 800e410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5c0 <_vfiprintf_r+0x21c>
 800e414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e418:	f04f 0901 	mov.w	r9, #1
 800e41c:	4623      	mov	r3, r4
 800e41e:	469a      	mov	sl, r3
 800e420:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e424:	b10a      	cbz	r2, 800e42a <_vfiprintf_r+0x86>
 800e426:	2a25      	cmp	r2, #37	@ 0x25
 800e428:	d1f9      	bne.n	800e41e <_vfiprintf_r+0x7a>
 800e42a:	ebba 0b04 	subs.w	fp, sl, r4
 800e42e:	d00b      	beq.n	800e448 <_vfiprintf_r+0xa4>
 800e430:	465b      	mov	r3, fp
 800e432:	4622      	mov	r2, r4
 800e434:	4629      	mov	r1, r5
 800e436:	4630      	mov	r0, r6
 800e438:	f7ff ffa2 	bl	800e380 <__sfputs_r>
 800e43c:	3001      	adds	r0, #1
 800e43e:	f000 80a7 	beq.w	800e590 <_vfiprintf_r+0x1ec>
 800e442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e444:	445a      	add	r2, fp
 800e446:	9209      	str	r2, [sp, #36]	@ 0x24
 800e448:	f89a 3000 	ldrb.w	r3, [sl]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f000 809f 	beq.w	800e590 <_vfiprintf_r+0x1ec>
 800e452:	2300      	movs	r3, #0
 800e454:	f04f 32ff 	mov.w	r2, #4294967295
 800e458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e45c:	f10a 0a01 	add.w	sl, sl, #1
 800e460:	9304      	str	r3, [sp, #16]
 800e462:	9307      	str	r3, [sp, #28]
 800e464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e468:	931a      	str	r3, [sp, #104]	@ 0x68
 800e46a:	4654      	mov	r4, sl
 800e46c:	2205      	movs	r2, #5
 800e46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e472:	4853      	ldr	r0, [pc, #332]	@ (800e5c0 <_vfiprintf_r+0x21c>)
 800e474:	f7f1 ff34 	bl	80002e0 <memchr>
 800e478:	9a04      	ldr	r2, [sp, #16]
 800e47a:	b9d8      	cbnz	r0, 800e4b4 <_vfiprintf_r+0x110>
 800e47c:	06d1      	lsls	r1, r2, #27
 800e47e:	bf44      	itt	mi
 800e480:	2320      	movmi	r3, #32
 800e482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e486:	0713      	lsls	r3, r2, #28
 800e488:	bf44      	itt	mi
 800e48a:	232b      	movmi	r3, #43	@ 0x2b
 800e48c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e490:	f89a 3000 	ldrb.w	r3, [sl]
 800e494:	2b2a      	cmp	r3, #42	@ 0x2a
 800e496:	d015      	beq.n	800e4c4 <_vfiprintf_r+0x120>
 800e498:	9a07      	ldr	r2, [sp, #28]
 800e49a:	4654      	mov	r4, sl
 800e49c:	2000      	movs	r0, #0
 800e49e:	f04f 0c0a 	mov.w	ip, #10
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4a8:	3b30      	subs	r3, #48	@ 0x30
 800e4aa:	2b09      	cmp	r3, #9
 800e4ac:	d94b      	bls.n	800e546 <_vfiprintf_r+0x1a2>
 800e4ae:	b1b0      	cbz	r0, 800e4de <_vfiprintf_r+0x13a>
 800e4b0:	9207      	str	r2, [sp, #28]
 800e4b2:	e014      	b.n	800e4de <_vfiprintf_r+0x13a>
 800e4b4:	eba0 0308 	sub.w	r3, r0, r8
 800e4b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	9304      	str	r3, [sp, #16]
 800e4c0:	46a2      	mov	sl, r4
 800e4c2:	e7d2      	b.n	800e46a <_vfiprintf_r+0xc6>
 800e4c4:	9b03      	ldr	r3, [sp, #12]
 800e4c6:	1d19      	adds	r1, r3, #4
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	9103      	str	r1, [sp, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bfbb      	ittet	lt
 800e4d0:	425b      	neglt	r3, r3
 800e4d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e4d6:	9307      	strge	r3, [sp, #28]
 800e4d8:	9307      	strlt	r3, [sp, #28]
 800e4da:	bfb8      	it	lt
 800e4dc:	9204      	strlt	r2, [sp, #16]
 800e4de:	7823      	ldrb	r3, [r4, #0]
 800e4e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4e2:	d10a      	bne.n	800e4fa <_vfiprintf_r+0x156>
 800e4e4:	7863      	ldrb	r3, [r4, #1]
 800e4e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4e8:	d132      	bne.n	800e550 <_vfiprintf_r+0x1ac>
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	1d1a      	adds	r2, r3, #4
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	9203      	str	r2, [sp, #12]
 800e4f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4f6:	3402      	adds	r4, #2
 800e4f8:	9305      	str	r3, [sp, #20]
 800e4fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5d0 <_vfiprintf_r+0x22c>
 800e4fe:	7821      	ldrb	r1, [r4, #0]
 800e500:	2203      	movs	r2, #3
 800e502:	4650      	mov	r0, sl
 800e504:	f7f1 feec 	bl	80002e0 <memchr>
 800e508:	b138      	cbz	r0, 800e51a <_vfiprintf_r+0x176>
 800e50a:	9b04      	ldr	r3, [sp, #16]
 800e50c:	eba0 000a 	sub.w	r0, r0, sl
 800e510:	2240      	movs	r2, #64	@ 0x40
 800e512:	4082      	lsls	r2, r0
 800e514:	4313      	orrs	r3, r2
 800e516:	3401      	adds	r4, #1
 800e518:	9304      	str	r3, [sp, #16]
 800e51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e51e:	4829      	ldr	r0, [pc, #164]	@ (800e5c4 <_vfiprintf_r+0x220>)
 800e520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e524:	2206      	movs	r2, #6
 800e526:	f7f1 fedb 	bl	80002e0 <memchr>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d03f      	beq.n	800e5ae <_vfiprintf_r+0x20a>
 800e52e:	4b26      	ldr	r3, [pc, #152]	@ (800e5c8 <_vfiprintf_r+0x224>)
 800e530:	bb1b      	cbnz	r3, 800e57a <_vfiprintf_r+0x1d6>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	3307      	adds	r3, #7
 800e536:	f023 0307 	bic.w	r3, r3, #7
 800e53a:	3308      	adds	r3, #8
 800e53c:	9303      	str	r3, [sp, #12]
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	443b      	add	r3, r7
 800e542:	9309      	str	r3, [sp, #36]	@ 0x24
 800e544:	e76a      	b.n	800e41c <_vfiprintf_r+0x78>
 800e546:	fb0c 3202 	mla	r2, ip, r2, r3
 800e54a:	460c      	mov	r4, r1
 800e54c:	2001      	movs	r0, #1
 800e54e:	e7a8      	b.n	800e4a2 <_vfiprintf_r+0xfe>
 800e550:	2300      	movs	r3, #0
 800e552:	3401      	adds	r4, #1
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	4619      	mov	r1, r3
 800e558:	f04f 0c0a 	mov.w	ip, #10
 800e55c:	4620      	mov	r0, r4
 800e55e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e562:	3a30      	subs	r2, #48	@ 0x30
 800e564:	2a09      	cmp	r2, #9
 800e566:	d903      	bls.n	800e570 <_vfiprintf_r+0x1cc>
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d0c6      	beq.n	800e4fa <_vfiprintf_r+0x156>
 800e56c:	9105      	str	r1, [sp, #20]
 800e56e:	e7c4      	b.n	800e4fa <_vfiprintf_r+0x156>
 800e570:	fb0c 2101 	mla	r1, ip, r1, r2
 800e574:	4604      	mov	r4, r0
 800e576:	2301      	movs	r3, #1
 800e578:	e7f0      	b.n	800e55c <_vfiprintf_r+0x1b8>
 800e57a:	ab03      	add	r3, sp, #12
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	462a      	mov	r2, r5
 800e580:	4b12      	ldr	r3, [pc, #72]	@ (800e5cc <_vfiprintf_r+0x228>)
 800e582:	a904      	add	r1, sp, #16
 800e584:	4630      	mov	r0, r6
 800e586:	f7fd fc57 	bl	800be38 <_printf_float>
 800e58a:	4607      	mov	r7, r0
 800e58c:	1c78      	adds	r0, r7, #1
 800e58e:	d1d6      	bne.n	800e53e <_vfiprintf_r+0x19a>
 800e590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e592:	07d9      	lsls	r1, r3, #31
 800e594:	d405      	bmi.n	800e5a2 <_vfiprintf_r+0x1fe>
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	059a      	lsls	r2, r3, #22
 800e59a:	d402      	bmi.n	800e5a2 <_vfiprintf_r+0x1fe>
 800e59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e59e:	f7fe f997 	bl	800c8d0 <__retarget_lock_release_recursive>
 800e5a2:	89ab      	ldrh	r3, [r5, #12]
 800e5a4:	065b      	lsls	r3, r3, #25
 800e5a6:	f53f af1f 	bmi.w	800e3e8 <_vfiprintf_r+0x44>
 800e5aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5ac:	e71e      	b.n	800e3ec <_vfiprintf_r+0x48>
 800e5ae:	ab03      	add	r3, sp, #12
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	462a      	mov	r2, r5
 800e5b4:	4b05      	ldr	r3, [pc, #20]	@ (800e5cc <_vfiprintf_r+0x228>)
 800e5b6:	a904      	add	r1, sp, #16
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f7fd fec5 	bl	800c348 <_printf_i>
 800e5be:	e7e4      	b.n	800e58a <_vfiprintf_r+0x1e6>
 800e5c0:	0800f7e0 	.word	0x0800f7e0
 800e5c4:	0800f7ea 	.word	0x0800f7ea
 800e5c8:	0800be39 	.word	0x0800be39
 800e5cc:	0800e381 	.word	0x0800e381
 800e5d0:	0800f7e6 	.word	0x0800f7e6

0800e5d4 <__swbuf_r>:
 800e5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d6:	460e      	mov	r6, r1
 800e5d8:	4614      	mov	r4, r2
 800e5da:	4605      	mov	r5, r0
 800e5dc:	b118      	cbz	r0, 800e5e6 <__swbuf_r+0x12>
 800e5de:	6a03      	ldr	r3, [r0, #32]
 800e5e0:	b90b      	cbnz	r3, 800e5e6 <__swbuf_r+0x12>
 800e5e2:	f7fe f85d 	bl	800c6a0 <__sinit>
 800e5e6:	69a3      	ldr	r3, [r4, #24]
 800e5e8:	60a3      	str	r3, [r4, #8]
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	071a      	lsls	r2, r3, #28
 800e5ee:	d501      	bpl.n	800e5f4 <__swbuf_r+0x20>
 800e5f0:	6923      	ldr	r3, [r4, #16]
 800e5f2:	b943      	cbnz	r3, 800e606 <__swbuf_r+0x32>
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	f000 f82a 	bl	800e650 <__swsetup_r>
 800e5fc:	b118      	cbz	r0, 800e606 <__swbuf_r+0x32>
 800e5fe:	f04f 37ff 	mov.w	r7, #4294967295
 800e602:	4638      	mov	r0, r7
 800e604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	6922      	ldr	r2, [r4, #16]
 800e60a:	1a98      	subs	r0, r3, r2
 800e60c:	6963      	ldr	r3, [r4, #20]
 800e60e:	b2f6      	uxtb	r6, r6
 800e610:	4283      	cmp	r3, r0
 800e612:	4637      	mov	r7, r6
 800e614:	dc05      	bgt.n	800e622 <__swbuf_r+0x4e>
 800e616:	4621      	mov	r1, r4
 800e618:	4628      	mov	r0, r5
 800e61a:	f7ff fd99 	bl	800e150 <_fflush_r>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d1ed      	bne.n	800e5fe <__swbuf_r+0x2a>
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	3b01      	subs	r3, #1
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	6022      	str	r2, [r4, #0]
 800e62e:	701e      	strb	r6, [r3, #0]
 800e630:	6962      	ldr	r2, [r4, #20]
 800e632:	1c43      	adds	r3, r0, #1
 800e634:	429a      	cmp	r2, r3
 800e636:	d004      	beq.n	800e642 <__swbuf_r+0x6e>
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	07db      	lsls	r3, r3, #31
 800e63c:	d5e1      	bpl.n	800e602 <__swbuf_r+0x2e>
 800e63e:	2e0a      	cmp	r6, #10
 800e640:	d1df      	bne.n	800e602 <__swbuf_r+0x2e>
 800e642:	4621      	mov	r1, r4
 800e644:	4628      	mov	r0, r5
 800e646:	f7ff fd83 	bl	800e150 <_fflush_r>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d0d9      	beq.n	800e602 <__swbuf_r+0x2e>
 800e64e:	e7d6      	b.n	800e5fe <__swbuf_r+0x2a>

0800e650 <__swsetup_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4b29      	ldr	r3, [pc, #164]	@ (800e6f8 <__swsetup_r+0xa8>)
 800e654:	4605      	mov	r5, r0
 800e656:	6818      	ldr	r0, [r3, #0]
 800e658:	460c      	mov	r4, r1
 800e65a:	b118      	cbz	r0, 800e664 <__swsetup_r+0x14>
 800e65c:	6a03      	ldr	r3, [r0, #32]
 800e65e:	b90b      	cbnz	r3, 800e664 <__swsetup_r+0x14>
 800e660:	f7fe f81e 	bl	800c6a0 <__sinit>
 800e664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e668:	0719      	lsls	r1, r3, #28
 800e66a:	d422      	bmi.n	800e6b2 <__swsetup_r+0x62>
 800e66c:	06da      	lsls	r2, r3, #27
 800e66e:	d407      	bmi.n	800e680 <__swsetup_r+0x30>
 800e670:	2209      	movs	r2, #9
 800e672:	602a      	str	r2, [r5, #0]
 800e674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	f04f 30ff 	mov.w	r0, #4294967295
 800e67e:	e033      	b.n	800e6e8 <__swsetup_r+0x98>
 800e680:	0758      	lsls	r0, r3, #29
 800e682:	d512      	bpl.n	800e6aa <__swsetup_r+0x5a>
 800e684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e686:	b141      	cbz	r1, 800e69a <__swsetup_r+0x4a>
 800e688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e68c:	4299      	cmp	r1, r3
 800e68e:	d002      	beq.n	800e696 <__swsetup_r+0x46>
 800e690:	4628      	mov	r0, r5
 800e692:	f7fe feff 	bl	800d494 <_free_r>
 800e696:	2300      	movs	r3, #0
 800e698:	6363      	str	r3, [r4, #52]	@ 0x34
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6a0:	81a3      	strh	r3, [r4, #12]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	6063      	str	r3, [r4, #4]
 800e6a6:	6923      	ldr	r3, [r4, #16]
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	f043 0308 	orr.w	r3, r3, #8
 800e6b0:	81a3      	strh	r3, [r4, #12]
 800e6b2:	6923      	ldr	r3, [r4, #16]
 800e6b4:	b94b      	cbnz	r3, 800e6ca <__swsetup_r+0x7a>
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6c0:	d003      	beq.n	800e6ca <__swsetup_r+0x7a>
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f000 f883 	bl	800e7d0 <__smakebuf_r>
 800e6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ce:	f013 0201 	ands.w	r2, r3, #1
 800e6d2:	d00a      	beq.n	800e6ea <__swsetup_r+0x9a>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	60a2      	str	r2, [r4, #8]
 800e6d8:	6962      	ldr	r2, [r4, #20]
 800e6da:	4252      	negs	r2, r2
 800e6dc:	61a2      	str	r2, [r4, #24]
 800e6de:	6922      	ldr	r2, [r4, #16]
 800e6e0:	b942      	cbnz	r2, 800e6f4 <__swsetup_r+0xa4>
 800e6e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6e6:	d1c5      	bne.n	800e674 <__swsetup_r+0x24>
 800e6e8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ea:	0799      	lsls	r1, r3, #30
 800e6ec:	bf58      	it	pl
 800e6ee:	6962      	ldrpl	r2, [r4, #20]
 800e6f0:	60a2      	str	r2, [r4, #8]
 800e6f2:	e7f4      	b.n	800e6de <__swsetup_r+0x8e>
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	e7f7      	b.n	800e6e8 <__swsetup_r+0x98>
 800e6f8:	24000020 	.word	0x24000020

0800e6fc <_raise_r>:
 800e6fc:	291f      	cmp	r1, #31
 800e6fe:	b538      	push	{r3, r4, r5, lr}
 800e700:	4605      	mov	r5, r0
 800e702:	460c      	mov	r4, r1
 800e704:	d904      	bls.n	800e710 <_raise_r+0x14>
 800e706:	2316      	movs	r3, #22
 800e708:	6003      	str	r3, [r0, #0]
 800e70a:	f04f 30ff 	mov.w	r0, #4294967295
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e712:	b112      	cbz	r2, 800e71a <_raise_r+0x1e>
 800e714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e718:	b94b      	cbnz	r3, 800e72e <_raise_r+0x32>
 800e71a:	4628      	mov	r0, r5
 800e71c:	f000 f830 	bl	800e780 <_getpid_r>
 800e720:	4622      	mov	r2, r4
 800e722:	4601      	mov	r1, r0
 800e724:	4628      	mov	r0, r5
 800e726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e72a:	f000 b817 	b.w	800e75c <_kill_r>
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d00a      	beq.n	800e748 <_raise_r+0x4c>
 800e732:	1c59      	adds	r1, r3, #1
 800e734:	d103      	bne.n	800e73e <_raise_r+0x42>
 800e736:	2316      	movs	r3, #22
 800e738:	6003      	str	r3, [r0, #0]
 800e73a:	2001      	movs	r0, #1
 800e73c:	e7e7      	b.n	800e70e <_raise_r+0x12>
 800e73e:	2100      	movs	r1, #0
 800e740:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e744:	4620      	mov	r0, r4
 800e746:	4798      	blx	r3
 800e748:	2000      	movs	r0, #0
 800e74a:	e7e0      	b.n	800e70e <_raise_r+0x12>

0800e74c <raise>:
 800e74c:	4b02      	ldr	r3, [pc, #8]	@ (800e758 <raise+0xc>)
 800e74e:	4601      	mov	r1, r0
 800e750:	6818      	ldr	r0, [r3, #0]
 800e752:	f7ff bfd3 	b.w	800e6fc <_raise_r>
 800e756:	bf00      	nop
 800e758:	24000020 	.word	0x24000020

0800e75c <_kill_r>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	4d07      	ldr	r5, [pc, #28]	@ (800e77c <_kill_r+0x20>)
 800e760:	2300      	movs	r3, #0
 800e762:	4604      	mov	r4, r0
 800e764:	4608      	mov	r0, r1
 800e766:	4611      	mov	r1, r2
 800e768:	602b      	str	r3, [r5, #0]
 800e76a:	f7f4 fb9b 	bl	8002ea4 <_kill>
 800e76e:	1c43      	adds	r3, r0, #1
 800e770:	d102      	bne.n	800e778 <_kill_r+0x1c>
 800e772:	682b      	ldr	r3, [r5, #0]
 800e774:	b103      	cbz	r3, 800e778 <_kill_r+0x1c>
 800e776:	6023      	str	r3, [r4, #0]
 800e778:	bd38      	pop	{r3, r4, r5, pc}
 800e77a:	bf00      	nop
 800e77c:	240027c4 	.word	0x240027c4

0800e780 <_getpid_r>:
 800e780:	f7f4 bb88 	b.w	8002e94 <_getpid>

0800e784 <__swhatbuf_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	460c      	mov	r4, r1
 800e788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78c:	2900      	cmp	r1, #0
 800e78e:	b096      	sub	sp, #88	@ 0x58
 800e790:	4615      	mov	r5, r2
 800e792:	461e      	mov	r6, r3
 800e794:	da0d      	bge.n	800e7b2 <__swhatbuf_r+0x2e>
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e79c:	f04f 0100 	mov.w	r1, #0
 800e7a0:	bf14      	ite	ne
 800e7a2:	2340      	movne	r3, #64	@ 0x40
 800e7a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	6031      	str	r1, [r6, #0]
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	b016      	add	sp, #88	@ 0x58
 800e7b0:	bd70      	pop	{r4, r5, r6, pc}
 800e7b2:	466a      	mov	r2, sp
 800e7b4:	f000 f848 	bl	800e848 <_fstat_r>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	dbec      	blt.n	800e796 <__swhatbuf_r+0x12>
 800e7bc:	9901      	ldr	r1, [sp, #4]
 800e7be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7c6:	4259      	negs	r1, r3
 800e7c8:	4159      	adcs	r1, r3
 800e7ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7ce:	e7eb      	b.n	800e7a8 <__swhatbuf_r+0x24>

0800e7d0 <__smakebuf_r>:
 800e7d0:	898b      	ldrh	r3, [r1, #12]
 800e7d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7d4:	079d      	lsls	r5, r3, #30
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	460c      	mov	r4, r1
 800e7da:	d507      	bpl.n	800e7ec <__smakebuf_r+0x1c>
 800e7dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	6123      	str	r3, [r4, #16]
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	6163      	str	r3, [r4, #20]
 800e7e8:	b003      	add	sp, #12
 800e7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ec:	ab01      	add	r3, sp, #4
 800e7ee:	466a      	mov	r2, sp
 800e7f0:	f7ff ffc8 	bl	800e784 <__swhatbuf_r>
 800e7f4:	9f00      	ldr	r7, [sp, #0]
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	4639      	mov	r1, r7
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7fe febe 	bl	800d57c <_malloc_r>
 800e800:	b948      	cbnz	r0, 800e816 <__smakebuf_r+0x46>
 800e802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e806:	059a      	lsls	r2, r3, #22
 800e808:	d4ee      	bmi.n	800e7e8 <__smakebuf_r+0x18>
 800e80a:	f023 0303 	bic.w	r3, r3, #3
 800e80e:	f043 0302 	orr.w	r3, r3, #2
 800e812:	81a3      	strh	r3, [r4, #12]
 800e814:	e7e2      	b.n	800e7dc <__smakebuf_r+0xc>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	6020      	str	r0, [r4, #0]
 800e81a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e826:	b15b      	cbz	r3, 800e840 <__smakebuf_r+0x70>
 800e828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e82c:	4630      	mov	r0, r6
 800e82e:	f000 f81d 	bl	800e86c <_isatty_r>
 800e832:	b128      	cbz	r0, 800e840 <__smakebuf_r+0x70>
 800e834:	89a3      	ldrh	r3, [r4, #12]
 800e836:	f023 0303 	bic.w	r3, r3, #3
 800e83a:	f043 0301 	orr.w	r3, r3, #1
 800e83e:	81a3      	strh	r3, [r4, #12]
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	431d      	orrs	r5, r3
 800e844:	81a5      	strh	r5, [r4, #12]
 800e846:	e7cf      	b.n	800e7e8 <__smakebuf_r+0x18>

0800e848 <_fstat_r>:
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	4d07      	ldr	r5, [pc, #28]	@ (800e868 <_fstat_r+0x20>)
 800e84c:	2300      	movs	r3, #0
 800e84e:	4604      	mov	r4, r0
 800e850:	4608      	mov	r0, r1
 800e852:	4611      	mov	r1, r2
 800e854:	602b      	str	r3, [r5, #0]
 800e856:	f7f4 fb85 	bl	8002f64 <_fstat>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d102      	bne.n	800e864 <_fstat_r+0x1c>
 800e85e:	682b      	ldr	r3, [r5, #0]
 800e860:	b103      	cbz	r3, 800e864 <_fstat_r+0x1c>
 800e862:	6023      	str	r3, [r4, #0]
 800e864:	bd38      	pop	{r3, r4, r5, pc}
 800e866:	bf00      	nop
 800e868:	240027c4 	.word	0x240027c4

0800e86c <_isatty_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4d06      	ldr	r5, [pc, #24]	@ (800e888 <_isatty_r+0x1c>)
 800e870:	2300      	movs	r3, #0
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	602b      	str	r3, [r5, #0]
 800e878:	f7f4 fb84 	bl	8002f84 <_isatty>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	d102      	bne.n	800e886 <_isatty_r+0x1a>
 800e880:	682b      	ldr	r3, [r5, #0]
 800e882:	b103      	cbz	r3, 800e886 <_isatty_r+0x1a>
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	240027c4 	.word	0x240027c4
 800e88c:	00000000 	.word	0x00000000

0800e890 <sin>:
 800e890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e892:	eeb0 7b40 	vmov.f64	d7, d0
 800e896:	ee17 3a90 	vmov	r3, s15
 800e89a:	4a21      	ldr	r2, [pc, #132]	@ (800e920 <sin+0x90>)
 800e89c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d807      	bhi.n	800e8b4 <sin+0x24>
 800e8a4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800e918 <sin+0x88>
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	b005      	add	sp, #20
 800e8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8b0:	f000 b8a2 	b.w	800e9f8 <__kernel_sin>
 800e8b4:	4a1b      	ldr	r2, [pc, #108]	@ (800e924 <sin+0x94>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d904      	bls.n	800e8c4 <sin+0x34>
 800e8ba:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e8be:	b005      	add	sp, #20
 800e8c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8c4:	4668      	mov	r0, sp
 800e8c6:	f000 f8ef 	bl	800eaa8 <__ieee754_rem_pio2>
 800e8ca:	f000 0003 	and.w	r0, r0, #3
 800e8ce:	2801      	cmp	r0, #1
 800e8d0:	d00a      	beq.n	800e8e8 <sin+0x58>
 800e8d2:	2802      	cmp	r0, #2
 800e8d4:	d00f      	beq.n	800e8f6 <sin+0x66>
 800e8d6:	b9c0      	cbnz	r0, 800e90a <sin+0x7a>
 800e8d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8dc:	ed9d 0b00 	vldr	d0, [sp]
 800e8e0:	2001      	movs	r0, #1
 800e8e2:	f000 f889 	bl	800e9f8 <__kernel_sin>
 800e8e6:	e7ea      	b.n	800e8be <sin+0x2e>
 800e8e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8ec:	ed9d 0b00 	vldr	d0, [sp]
 800e8f0:	f000 f81a 	bl	800e928 <__kernel_cos>
 800e8f4:	e7e3      	b.n	800e8be <sin+0x2e>
 800e8f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8fa:	ed9d 0b00 	vldr	d0, [sp]
 800e8fe:	2001      	movs	r0, #1
 800e900:	f000 f87a 	bl	800e9f8 <__kernel_sin>
 800e904:	eeb1 0b40 	vneg.f64	d0, d0
 800e908:	e7d9      	b.n	800e8be <sin+0x2e>
 800e90a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e90e:	ed9d 0b00 	vldr	d0, [sp]
 800e912:	f000 f809 	bl	800e928 <__kernel_cos>
 800e916:	e7f5      	b.n	800e904 <sin+0x74>
	...
 800e920:	3fe921fb 	.word	0x3fe921fb
 800e924:	7fefffff 	.word	0x7fefffff

0800e928 <__kernel_cos>:
 800e928:	eeb0 5b40 	vmov.f64	d5, d0
 800e92c:	ee15 1a90 	vmov	r1, s11
 800e930:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e934:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e938:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800e93c:	d204      	bcs.n	800e948 <__kernel_cos+0x20>
 800e93e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800e942:	ee17 3a90 	vmov	r3, s15
 800e946:	b343      	cbz	r3, 800e99a <__kernel_cos+0x72>
 800e948:	ee25 6b05 	vmul.f64	d6, d5, d5
 800e94c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800e950:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800e9c0 <__kernel_cos+0x98>
 800e954:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e9c8 <__kernel_cos+0xa0>
 800e958:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e95c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e9d0 <__kernel_cos+0xa8>
 800e960:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e964:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e9d8 <__kernel_cos+0xb0>
 800e968:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e96c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e9e0 <__kernel_cos+0xb8>
 800e970:	4b1f      	ldr	r3, [pc, #124]	@ (800e9f0 <__kernel_cos+0xc8>)
 800e972:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e976:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e9e8 <__kernel_cos+0xc0>
 800e97a:	4299      	cmp	r1, r3
 800e97c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e980:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e984:	ee24 4b06 	vmul.f64	d4, d4, d6
 800e988:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e98c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800e990:	d804      	bhi.n	800e99c <__kernel_cos+0x74>
 800e992:	ee37 7b41 	vsub.f64	d7, d7, d1
 800e996:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e99a:	4770      	bx	lr
 800e99c:	4b15      	ldr	r3, [pc, #84]	@ (800e9f4 <__kernel_cos+0xcc>)
 800e99e:	4299      	cmp	r1, r3
 800e9a0:	d809      	bhi.n	800e9b6 <__kernel_cos+0x8e>
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800e9a8:	ec43 2b16 	vmov	d6, r2, r3
 800e9ac:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e9b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9b4:	e7ed      	b.n	800e992 <__kernel_cos+0x6a>
 800e9b6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800e9ba:	e7f7      	b.n	800e9ac <__kernel_cos+0x84>
 800e9bc:	f3af 8000 	nop.w
 800e9c0:	be8838d4 	.word	0xbe8838d4
 800e9c4:	bda8fae9 	.word	0xbda8fae9
 800e9c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e9cc:	3e21ee9e 	.word	0x3e21ee9e
 800e9d0:	809c52ad 	.word	0x809c52ad
 800e9d4:	be927e4f 	.word	0xbe927e4f
 800e9d8:	19cb1590 	.word	0x19cb1590
 800e9dc:	3efa01a0 	.word	0x3efa01a0
 800e9e0:	16c15177 	.word	0x16c15177
 800e9e4:	bf56c16c 	.word	0xbf56c16c
 800e9e8:	5555554c 	.word	0x5555554c
 800e9ec:	3fa55555 	.word	0x3fa55555
 800e9f0:	3fd33332 	.word	0x3fd33332
 800e9f4:	3fe90000 	.word	0x3fe90000

0800e9f8 <__kernel_sin>:
 800e9f8:	ee10 3a90 	vmov	r3, s1
 800e9fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea00:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ea04:	d204      	bcs.n	800ea10 <__kernel_sin+0x18>
 800ea06:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ea0a:	ee17 3a90 	vmov	r3, s15
 800ea0e:	b35b      	cbz	r3, 800ea68 <__kernel_sin+0x70>
 800ea10:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ea14:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ea18:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800ea70 <__kernel_sin+0x78>
 800ea1c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800ea78 <__kernel_sin+0x80>
 800ea20:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ea24:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800ea80 <__kernel_sin+0x88>
 800ea28:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ea2c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800ea88 <__kernel_sin+0x90>
 800ea30:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ea34:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800ea90 <__kernel_sin+0x98>
 800ea38:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ea3c:	b930      	cbnz	r0, 800ea4c <__kernel_sin+0x54>
 800ea3e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800ea98 <__kernel_sin+0xa0>
 800ea42:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ea46:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ea4a:	4770      	bx	lr
 800ea4c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ea50:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800ea54:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ea58:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ea5c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800eaa0 <__kernel_sin+0xa8>
 800ea60:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ea64:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	f3af 8000 	nop.w
 800ea70:	5acfd57c 	.word	0x5acfd57c
 800ea74:	3de5d93a 	.word	0x3de5d93a
 800ea78:	8a2b9ceb 	.word	0x8a2b9ceb
 800ea7c:	be5ae5e6 	.word	0xbe5ae5e6
 800ea80:	57b1fe7d 	.word	0x57b1fe7d
 800ea84:	3ec71de3 	.word	0x3ec71de3
 800ea88:	19c161d5 	.word	0x19c161d5
 800ea8c:	bf2a01a0 	.word	0xbf2a01a0
 800ea90:	1110f8a6 	.word	0x1110f8a6
 800ea94:	3f811111 	.word	0x3f811111
 800ea98:	55555549 	.word	0x55555549
 800ea9c:	bfc55555 	.word	0xbfc55555
 800eaa0:	55555549 	.word	0x55555549
 800eaa4:	3fc55555 	.word	0x3fc55555

0800eaa8 <__ieee754_rem_pio2>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	eeb0 7b40 	vmov.f64	d7, d0
 800eaae:	ee17 5a90 	vmov	r5, s15
 800eab2:	4b99      	ldr	r3, [pc, #612]	@ (800ed18 <__ieee754_rem_pio2+0x270>)
 800eab4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800eab8:	429e      	cmp	r6, r3
 800eaba:	b088      	sub	sp, #32
 800eabc:	4604      	mov	r4, r0
 800eabe:	d807      	bhi.n	800ead0 <__ieee754_rem_pio2+0x28>
 800eac0:	2200      	movs	r2, #0
 800eac2:	2300      	movs	r3, #0
 800eac4:	ed84 0b00 	vstr	d0, [r4]
 800eac8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eacc:	2000      	movs	r0, #0
 800eace:	e01b      	b.n	800eb08 <__ieee754_rem_pio2+0x60>
 800ead0:	4b92      	ldr	r3, [pc, #584]	@ (800ed1c <__ieee754_rem_pio2+0x274>)
 800ead2:	429e      	cmp	r6, r3
 800ead4:	d83b      	bhi.n	800eb4e <__ieee754_rem_pio2+0xa6>
 800ead6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800eada:	2d00      	cmp	r5, #0
 800eadc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ecd8 <__ieee754_rem_pio2+0x230>
 800eae0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800eae4:	dd19      	ble.n	800eb1a <__ieee754_rem_pio2+0x72>
 800eae6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800eaea:	429e      	cmp	r6, r3
 800eaec:	d00e      	beq.n	800eb0c <__ieee754_rem_pio2+0x64>
 800eaee:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ece0 <__ieee754_rem_pio2+0x238>
 800eaf2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800eaf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eafa:	ed84 6b00 	vstr	d6, [r4]
 800eafe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb02:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb06:	2001      	movs	r0, #1
 800eb08:	b008      	add	sp, #32
 800eb0a:	bd70      	pop	{r4, r5, r6, pc}
 800eb0c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ece8 <__ieee754_rem_pio2+0x240>
 800eb10:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ecf0 <__ieee754_rem_pio2+0x248>
 800eb14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb18:	e7eb      	b.n	800eaf2 <__ieee754_rem_pio2+0x4a>
 800eb1a:	429e      	cmp	r6, r3
 800eb1c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800eb20:	d00e      	beq.n	800eb40 <__ieee754_rem_pio2+0x98>
 800eb22:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ece0 <__ieee754_rem_pio2+0x238>
 800eb26:	ee37 6b05 	vadd.f64	d6, d7, d5
 800eb2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb2e:	ed84 6b00 	vstr	d6, [r4]
 800eb32:	ee37 7b05 	vadd.f64	d7, d7, d5
 800eb36:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3a:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb3e:	e7e3      	b.n	800eb08 <__ieee754_rem_pio2+0x60>
 800eb40:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ece8 <__ieee754_rem_pio2+0x240>
 800eb44:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ecf0 <__ieee754_rem_pio2+0x248>
 800eb48:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eb4c:	e7eb      	b.n	800eb26 <__ieee754_rem_pio2+0x7e>
 800eb4e:	4b74      	ldr	r3, [pc, #464]	@ (800ed20 <__ieee754_rem_pio2+0x278>)
 800eb50:	429e      	cmp	r6, r3
 800eb52:	d870      	bhi.n	800ec36 <__ieee754_rem_pio2+0x18e>
 800eb54:	f000 f8ec 	bl	800ed30 <fabs>
 800eb58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800eb5c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ecf8 <__ieee754_rem_pio2+0x250>
 800eb60:	eea0 7b06 	vfma.f64	d7, d0, d6
 800eb64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eb68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800eb6c:	ee17 0a90 	vmov	r0, s15
 800eb70:	eeb1 4b45 	vneg.f64	d4, d5
 800eb74:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ecd8 <__ieee754_rem_pio2+0x230>
 800eb78:	eea5 0b47 	vfms.f64	d0, d5, d7
 800eb7c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ece0 <__ieee754_rem_pio2+0x238>
 800eb80:	281f      	cmp	r0, #31
 800eb82:	ee25 7b07 	vmul.f64	d7, d5, d7
 800eb86:	ee30 6b47 	vsub.f64	d6, d0, d7
 800eb8a:	dc05      	bgt.n	800eb98 <__ieee754_rem_pio2+0xf0>
 800eb8c:	4b65      	ldr	r3, [pc, #404]	@ (800ed24 <__ieee754_rem_pio2+0x27c>)
 800eb8e:	1e42      	subs	r2, r0, #1
 800eb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb94:	42b3      	cmp	r3, r6
 800eb96:	d109      	bne.n	800ebac <__ieee754_rem_pio2+0x104>
 800eb98:	ee16 3a90 	vmov	r3, s13
 800eb9c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800eba0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800eba4:	2b10      	cmp	r3, #16
 800eba6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ebaa:	dc02      	bgt.n	800ebb2 <__ieee754_rem_pio2+0x10a>
 800ebac:	ed84 6b00 	vstr	d6, [r4]
 800ebb0:	e01a      	b.n	800ebe8 <__ieee754_rem_pio2+0x140>
 800ebb2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ece8 <__ieee754_rem_pio2+0x240>
 800ebb6:	eeb0 6b40 	vmov.f64	d6, d0
 800ebba:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ebbe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ebc2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ebc6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ecf0 <__ieee754_rem_pio2+0x248>
 800ebca:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ebce:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ebd2:	ee13 3a90 	vmov	r3, s7
 800ebd6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	2b31      	cmp	r3, #49	@ 0x31
 800ebde:	dc17      	bgt.n	800ec10 <__ieee754_rem_pio2+0x168>
 800ebe0:	eeb0 0b46 	vmov.f64	d0, d6
 800ebe4:	ed84 3b00 	vstr	d3, [r4]
 800ebe8:	ed94 6b00 	vldr	d6, [r4]
 800ebec:	2d00      	cmp	r5, #0
 800ebee:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ebf2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ebf6:	ed84 0b02 	vstr	d0, [r4, #8]
 800ebfa:	da85      	bge.n	800eb08 <__ieee754_rem_pio2+0x60>
 800ebfc:	eeb1 6b46 	vneg.f64	d6, d6
 800ec00:	eeb1 0b40 	vneg.f64	d0, d0
 800ec04:	ed84 6b00 	vstr	d6, [r4]
 800ec08:	ed84 0b02 	vstr	d0, [r4, #8]
 800ec0c:	4240      	negs	r0, r0
 800ec0e:	e77b      	b.n	800eb08 <__ieee754_rem_pio2+0x60>
 800ec10:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ed00 <__ieee754_rem_pio2+0x258>
 800ec14:	eeb0 0b46 	vmov.f64	d0, d6
 800ec18:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ec1c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800ec20:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ec24:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ed08 <__ieee754_rem_pio2+0x260>
 800ec28:	eeb0 7b46 	vmov.f64	d7, d6
 800ec2c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800ec30:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ec34:	e7ba      	b.n	800ebac <__ieee754_rem_pio2+0x104>
 800ec36:	4b3c      	ldr	r3, [pc, #240]	@ (800ed28 <__ieee754_rem_pio2+0x280>)
 800ec38:	429e      	cmp	r6, r3
 800ec3a:	d906      	bls.n	800ec4a <__ieee754_rem_pio2+0x1a2>
 800ec3c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ec40:	ed80 7b02 	vstr	d7, [r0, #8]
 800ec44:	ed80 7b00 	vstr	d7, [r0]
 800ec48:	e740      	b.n	800eacc <__ieee754_rem_pio2+0x24>
 800ec4a:	ee10 3a10 	vmov	r3, s0
 800ec4e:	1532      	asrs	r2, r6, #20
 800ec50:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800ec54:	4618      	mov	r0, r3
 800ec56:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ec5a:	ec41 0b17 	vmov	d7, r0, r1
 800ec5e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ec62:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ed10 <__ieee754_rem_pio2+0x268>
 800ec66:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ec6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ec72:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec76:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ec7a:	a808      	add	r0, sp, #32
 800ec7c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ec80:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec84:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ec88:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec90:	2103      	movs	r1, #3
 800ec92:	ed30 7b02 	vldmdb	r0!, {d7}
 800ec96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9e:	460b      	mov	r3, r1
 800eca0:	f101 31ff 	add.w	r1, r1, #4294967295
 800eca4:	d0f5      	beq.n	800ec92 <__ieee754_rem_pio2+0x1ea>
 800eca6:	4921      	ldr	r1, [pc, #132]	@ (800ed2c <__ieee754_rem_pio2+0x284>)
 800eca8:	9101      	str	r1, [sp, #4]
 800ecaa:	2102      	movs	r1, #2
 800ecac:	9100      	str	r1, [sp, #0]
 800ecae:	a802      	add	r0, sp, #8
 800ecb0:	4621      	mov	r1, r4
 800ecb2:	f000 f845 	bl	800ed40 <__kernel_rem_pio2>
 800ecb6:	2d00      	cmp	r5, #0
 800ecb8:	f6bf af26 	bge.w	800eb08 <__ieee754_rem_pio2+0x60>
 800ecbc:	ed94 7b00 	vldr	d7, [r4]
 800ecc0:	eeb1 7b47 	vneg.f64	d7, d7
 800ecc4:	ed84 7b00 	vstr	d7, [r4]
 800ecc8:	ed94 7b02 	vldr	d7, [r4, #8]
 800eccc:	eeb1 7b47 	vneg.f64	d7, d7
 800ecd0:	ed84 7b02 	vstr	d7, [r4, #8]
 800ecd4:	e79a      	b.n	800ec0c <__ieee754_rem_pio2+0x164>
 800ecd6:	bf00      	nop
 800ecd8:	54400000 	.word	0x54400000
 800ecdc:	3ff921fb 	.word	0x3ff921fb
 800ece0:	1a626331 	.word	0x1a626331
 800ece4:	3dd0b461 	.word	0x3dd0b461
 800ece8:	1a600000 	.word	0x1a600000
 800ecec:	3dd0b461 	.word	0x3dd0b461
 800ecf0:	2e037073 	.word	0x2e037073
 800ecf4:	3ba3198a 	.word	0x3ba3198a
 800ecf8:	6dc9c883 	.word	0x6dc9c883
 800ecfc:	3fe45f30 	.word	0x3fe45f30
 800ed00:	2e000000 	.word	0x2e000000
 800ed04:	3ba3198a 	.word	0x3ba3198a
 800ed08:	252049c1 	.word	0x252049c1
 800ed0c:	397b839a 	.word	0x397b839a
 800ed10:	00000000 	.word	0x00000000
 800ed14:	41700000 	.word	0x41700000
 800ed18:	3fe921fb 	.word	0x3fe921fb
 800ed1c:	4002d97b 	.word	0x4002d97b
 800ed20:	413921fb 	.word	0x413921fb
 800ed24:	0800f938 	.word	0x0800f938
 800ed28:	7fefffff 	.word	0x7fefffff
 800ed2c:	0800f9b8 	.word	0x0800f9b8

0800ed30 <fabs>:
 800ed30:	ec51 0b10 	vmov	r0, r1, d0
 800ed34:	4602      	mov	r2, r0
 800ed36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ed3a:	ec43 2b10 	vmov	d0, r2, r3
 800ed3e:	4770      	bx	lr

0800ed40 <__kernel_rem_pio2>:
 800ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	ed2d 8b06 	vpush	{d8-d10}
 800ed48:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ed4c:	469b      	mov	fp, r3
 800ed4e:	9001      	str	r0, [sp, #4]
 800ed50:	4bbb      	ldr	r3, [pc, #748]	@ (800f040 <__kernel_rem_pio2+0x300>)
 800ed52:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800ed54:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800ed58:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800ed5c:	f112 0f14 	cmn.w	r2, #20
 800ed60:	bfa8      	it	ge
 800ed62:	1ed3      	subge	r3, r2, #3
 800ed64:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ed68:	bfb8      	it	lt
 800ed6a:	2300      	movlt	r3, #0
 800ed6c:	f06f 0517 	mvn.w	r5, #23
 800ed70:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800f028 <__kernel_rem_pio2+0x2e8>
 800ed74:	bfa4      	itt	ge
 800ed76:	2018      	movge	r0, #24
 800ed78:	fb93 f3f0 	sdivge	r3, r3, r0
 800ed7c:	fb03 5505 	mla	r5, r3, r5, r5
 800ed80:	eba3 040a 	sub.w	r4, r3, sl
 800ed84:	4415      	add	r5, r2
 800ed86:	460f      	mov	r7, r1
 800ed88:	eb09 060a 	add.w	r6, r9, sl
 800ed8c:	a81a      	add	r0, sp, #104	@ 0x68
 800ed8e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800ed92:	2200      	movs	r2, #0
 800ed94:	42b2      	cmp	r2, r6
 800ed96:	dd0e      	ble.n	800edb6 <__kernel_rem_pio2+0x76>
 800ed98:	aa1a      	add	r2, sp, #104	@ 0x68
 800ed9a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ed9e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800eda2:	2600      	movs	r6, #0
 800eda4:	454e      	cmp	r6, r9
 800eda6:	dc25      	bgt.n	800edf4 <__kernel_rem_pio2+0xb4>
 800eda8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800f028 <__kernel_rem_pio2+0x2e8>
 800edac:	f8dd c004 	ldr.w	ip, [sp, #4]
 800edb0:	4614      	mov	r4, r2
 800edb2:	2000      	movs	r0, #0
 800edb4:	e015      	b.n	800ede2 <__kernel_rem_pio2+0xa2>
 800edb6:	42d4      	cmn	r4, r2
 800edb8:	d409      	bmi.n	800edce <__kernel_rem_pio2+0x8e>
 800edba:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800edbe:	ee07 1a90 	vmov	s15, r1
 800edc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800edc6:	eca0 7b02 	vstmia	r0!, {d7}
 800edca:	3201      	adds	r2, #1
 800edcc:	e7e2      	b.n	800ed94 <__kernel_rem_pio2+0x54>
 800edce:	eeb0 7b46 	vmov.f64	d7, d6
 800edd2:	e7f8      	b.n	800edc6 <__kernel_rem_pio2+0x86>
 800edd4:	ecbc 5b02 	vldmia	ip!, {d5}
 800edd8:	ed94 6b00 	vldr	d6, [r4]
 800eddc:	3001      	adds	r0, #1
 800edde:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ede2:	4550      	cmp	r0, sl
 800ede4:	f1a4 0408 	sub.w	r4, r4, #8
 800ede8:	ddf4      	ble.n	800edd4 <__kernel_rem_pio2+0x94>
 800edea:	ecae 7b02 	vstmia	lr!, {d7}
 800edee:	3601      	adds	r6, #1
 800edf0:	3208      	adds	r2, #8
 800edf2:	e7d7      	b.n	800eda4 <__kernel_rem_pio2+0x64>
 800edf4:	aa06      	add	r2, sp, #24
 800edf6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800f030 <__kernel_rem_pio2+0x2f0>
 800edfa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800f038 <__kernel_rem_pio2+0x2f8>
 800edfe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ee02:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ee06:	9203      	str	r2, [sp, #12]
 800ee08:	9302      	str	r3, [sp, #8]
 800ee0a:	464c      	mov	r4, r9
 800ee0c:	00e3      	lsls	r3, r4, #3
 800ee0e:	9304      	str	r3, [sp, #16]
 800ee10:	ab92      	add	r3, sp, #584	@ 0x248
 800ee12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee16:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800ee1a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800ee1c:	ab06      	add	r3, sp, #24
 800ee1e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ee22:	461e      	mov	r6, r3
 800ee24:	4620      	mov	r0, r4
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f1a2 0208 	sub.w	r2, r2, #8
 800ee2c:	dc4a      	bgt.n	800eec4 <__kernel_rem_pio2+0x184>
 800ee2e:	4628      	mov	r0, r5
 800ee30:	9305      	str	r3, [sp, #20]
 800ee32:	f000 fa01 	bl	800f238 <scalbn>
 800ee36:	eeb0 8b40 	vmov.f64	d8, d0
 800ee3a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800ee3e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ee42:	f000 fa79 	bl	800f338 <floor>
 800ee46:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ee4a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ee4e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ee52:	2d00      	cmp	r5, #0
 800ee54:	ee17 8a90 	vmov	r8, s15
 800ee58:	9b05      	ldr	r3, [sp, #20]
 800ee5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ee5e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ee62:	dd41      	ble.n	800eee8 <__kernel_rem_pio2+0x1a8>
 800ee64:	1e60      	subs	r0, r4, #1
 800ee66:	aa06      	add	r2, sp, #24
 800ee68:	f1c5 0c18 	rsb	ip, r5, #24
 800ee6c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ee70:	fa46 f20c 	asr.w	r2, r6, ip
 800ee74:	4490      	add	r8, r2
 800ee76:	fa02 f20c 	lsl.w	r2, r2, ip
 800ee7a:	1ab6      	subs	r6, r6, r2
 800ee7c:	aa06      	add	r2, sp, #24
 800ee7e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800ee82:	f1c5 0217 	rsb	r2, r5, #23
 800ee86:	4116      	asrs	r6, r2
 800ee88:	2e00      	cmp	r6, #0
 800ee8a:	dd3c      	ble.n	800ef06 <__kernel_rem_pio2+0x1c6>
 800ee8c:	f04f 0c00 	mov.w	ip, #0
 800ee90:	f108 0801 	add.w	r8, r8, #1
 800ee94:	4660      	mov	r0, ip
 800ee96:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ee9a:	4564      	cmp	r4, ip
 800ee9c:	dc66      	bgt.n	800ef6c <__kernel_rem_pio2+0x22c>
 800ee9e:	2d00      	cmp	r5, #0
 800eea0:	dd03      	ble.n	800eeaa <__kernel_rem_pio2+0x16a>
 800eea2:	2d01      	cmp	r5, #1
 800eea4:	d072      	beq.n	800ef8c <__kernel_rem_pio2+0x24c>
 800eea6:	2d02      	cmp	r5, #2
 800eea8:	d07a      	beq.n	800efa0 <__kernel_rem_pio2+0x260>
 800eeaa:	2e02      	cmp	r6, #2
 800eeac:	d12b      	bne.n	800ef06 <__kernel_rem_pio2+0x1c6>
 800eeae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800eeb2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eeb6:	b330      	cbz	r0, 800ef06 <__kernel_rem_pio2+0x1c6>
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f000 f9bd 	bl	800f238 <scalbn>
 800eebe:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eec2:	e020      	b.n	800ef06 <__kernel_rem_pio2+0x1c6>
 800eec4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eec8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eecc:	3801      	subs	r0, #1
 800eece:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eed2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eed6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eeda:	eca6 0a01 	vstmia	r6!, {s0}
 800eede:	ed92 0b00 	vldr	d0, [r2]
 800eee2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eee6:	e79e      	b.n	800ee26 <__kernel_rem_pio2+0xe6>
 800eee8:	d105      	bne.n	800eef6 <__kernel_rem_pio2+0x1b6>
 800eeea:	1e62      	subs	r2, r4, #1
 800eeec:	a906      	add	r1, sp, #24
 800eeee:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800eef2:	15f6      	asrs	r6, r6, #23
 800eef4:	e7c8      	b.n	800ee88 <__kernel_rem_pio2+0x148>
 800eef6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800eefa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef02:	da31      	bge.n	800ef68 <__kernel_rem_pio2+0x228>
 800ef04:	2600      	movs	r6, #0
 800ef06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0e:	f040 809b 	bne.w	800f048 <__kernel_rem_pio2+0x308>
 800ef12:	1e62      	subs	r2, r4, #1
 800ef14:	2000      	movs	r0, #0
 800ef16:	454a      	cmp	r2, r9
 800ef18:	da49      	bge.n	800efae <__kernel_rem_pio2+0x26e>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d062      	beq.n	800efe4 <__kernel_rem_pio2+0x2a4>
 800ef1e:	3c01      	subs	r4, #1
 800ef20:	ab06      	add	r3, sp, #24
 800ef22:	3d18      	subs	r5, #24
 800ef24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d0f8      	beq.n	800ef1e <__kernel_rem_pio2+0x1de>
 800ef2c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ef30:	4628      	mov	r0, r5
 800ef32:	f000 f981 	bl	800f238 <scalbn>
 800ef36:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800f030 <__kernel_rem_pio2+0x2f0>
 800ef3a:	1c62      	adds	r2, r4, #1
 800ef3c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ef3e:	00d3      	lsls	r3, r2, #3
 800ef40:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ef44:	4622      	mov	r2, r4
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	f280 80a8 	bge.w	800f09c <__kernel_rem_pio2+0x35c>
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	2a00      	cmp	r2, #0
 800ef50:	f2c0 80c6 	blt.w	800f0e0 <__kernel_rem_pio2+0x3a0>
 800ef54:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ef56:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ef5a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800f028 <__kernel_rem_pio2+0x2e8>
 800ef5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800f044 <__kernel_rem_pio2+0x304>
 800ef62:	2000      	movs	r0, #0
 800ef64:	1aa1      	subs	r1, r4, r2
 800ef66:	e0b0      	b.n	800f0ca <__kernel_rem_pio2+0x38a>
 800ef68:	2602      	movs	r6, #2
 800ef6a:	e78f      	b.n	800ee8c <__kernel_rem_pio2+0x14c>
 800ef6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef70:	b948      	cbnz	r0, 800ef86 <__kernel_rem_pio2+0x246>
 800ef72:	b122      	cbz	r2, 800ef7e <__kernel_rem_pio2+0x23e>
 800ef74:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ef78:	f843 2c04 	str.w	r2, [r3, #-4]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	f10c 0c01 	add.w	ip, ip, #1
 800ef82:	4610      	mov	r0, r2
 800ef84:	e789      	b.n	800ee9a <__kernel_rem_pio2+0x15a>
 800ef86:	ebae 0202 	sub.w	r2, lr, r2
 800ef8a:	e7f5      	b.n	800ef78 <__kernel_rem_pio2+0x238>
 800ef8c:	1e62      	subs	r2, r4, #1
 800ef8e:	ab06      	add	r3, sp, #24
 800ef90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef98:	a906      	add	r1, sp, #24
 800ef9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ef9e:	e784      	b.n	800eeaa <__kernel_rem_pio2+0x16a>
 800efa0:	1e62      	subs	r2, r4, #1
 800efa2:	ab06      	add	r3, sp, #24
 800efa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efa8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800efac:	e7f4      	b.n	800ef98 <__kernel_rem_pio2+0x258>
 800efae:	ab06      	add	r3, sp, #24
 800efb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb4:	3a01      	subs	r2, #1
 800efb6:	4318      	orrs	r0, r3
 800efb8:	e7ad      	b.n	800ef16 <__kernel_rem_pio2+0x1d6>
 800efba:	3301      	adds	r3, #1
 800efbc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d0fa      	beq.n	800efba <__kernel_rem_pio2+0x27a>
 800efc4:	9a04      	ldr	r2, [sp, #16]
 800efc6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800efca:	446a      	add	r2, sp
 800efcc:	eb04 000b 	add.w	r0, r4, fp
 800efd0:	a91a      	add	r1, sp, #104	@ 0x68
 800efd2:	1c66      	adds	r6, r4, #1
 800efd4:	3a98      	subs	r2, #152	@ 0x98
 800efd6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800efda:	4423      	add	r3, r4
 800efdc:	42b3      	cmp	r3, r6
 800efde:	da04      	bge.n	800efea <__kernel_rem_pio2+0x2aa>
 800efe0:	461c      	mov	r4, r3
 800efe2:	e713      	b.n	800ee0c <__kernel_rem_pio2+0xcc>
 800efe4:	9a03      	ldr	r2, [sp, #12]
 800efe6:	2301      	movs	r3, #1
 800efe8:	e7e8      	b.n	800efbc <__kernel_rem_pio2+0x27c>
 800efea:	9902      	ldr	r1, [sp, #8]
 800efec:	f8dd c004 	ldr.w	ip, [sp, #4]
 800eff0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800eff4:	9104      	str	r1, [sp, #16]
 800eff6:	ee07 1a90 	vmov	s15, r1
 800effa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800effe:	2400      	movs	r4, #0
 800f000:	eca0 7b02 	vstmia	r0!, {d7}
 800f004:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800f028 <__kernel_rem_pio2+0x2e8>
 800f008:	4686      	mov	lr, r0
 800f00a:	4554      	cmp	r4, sl
 800f00c:	dd03      	ble.n	800f016 <__kernel_rem_pio2+0x2d6>
 800f00e:	eca2 7b02 	vstmia	r2!, {d7}
 800f012:	3601      	adds	r6, #1
 800f014:	e7e2      	b.n	800efdc <__kernel_rem_pio2+0x29c>
 800f016:	ecbc 5b02 	vldmia	ip!, {d5}
 800f01a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800f01e:	3401      	adds	r4, #1
 800f020:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f024:	e7f1      	b.n	800f00a <__kernel_rem_pio2+0x2ca>
 800f026:	bf00      	nop
	...
 800f034:	3e700000 	.word	0x3e700000
 800f038:	00000000 	.word	0x00000000
 800f03c:	41700000 	.word	0x41700000
 800f040:	0800fb00 	.word	0x0800fb00
 800f044:	0800fac0 	.word	0x0800fac0
 800f048:	4268      	negs	r0, r5
 800f04a:	eeb0 0b48 	vmov.f64	d0, d8
 800f04e:	f000 f8f3 	bl	800f238 <scalbn>
 800f052:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800f220 <__kernel_rem_pio2+0x4e0>
 800f056:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05e:	db17      	blt.n	800f090 <__kernel_rem_pio2+0x350>
 800f060:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800f228 <__kernel_rem_pio2+0x4e8>
 800f064:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f068:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f06c:	aa06      	add	r2, sp, #24
 800f06e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f072:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f076:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f07a:	3518      	adds	r5, #24
 800f07c:	ee10 3a10 	vmov	r3, s0
 800f080:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f084:	ee17 3a10 	vmov	r3, s14
 800f088:	3401      	adds	r4, #1
 800f08a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f08e:	e74d      	b.n	800ef2c <__kernel_rem_pio2+0x1ec>
 800f090:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f094:	aa06      	add	r2, sp, #24
 800f096:	ee10 3a10 	vmov	r3, s0
 800f09a:	e7f6      	b.n	800f08a <__kernel_rem_pio2+0x34a>
 800f09c:	a806      	add	r0, sp, #24
 800f09e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f0a2:	9001      	str	r0, [sp, #4]
 800f0a4:	ee07 0a90 	vmov	s15, r0
 800f0a8:	3a01      	subs	r2, #1
 800f0aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f0ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f0b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f0b6:	ed21 7b02 	vstmdb	r1!, {d7}
 800f0ba:	e744      	b.n	800ef46 <__kernel_rem_pio2+0x206>
 800f0bc:	ecbc 5b02 	vldmia	ip!, {d5}
 800f0c0:	ecb5 6b02 	vldmia	r5!, {d6}
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f0ca:	4548      	cmp	r0, r9
 800f0cc:	dc01      	bgt.n	800f0d2 <__kernel_rem_pio2+0x392>
 800f0ce:	4281      	cmp	r1, r0
 800f0d0:	daf4      	bge.n	800f0bc <__kernel_rem_pio2+0x37c>
 800f0d2:	a842      	add	r0, sp, #264	@ 0x108
 800f0d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f0d8:	ed81 7b00 	vstr	d7, [r1]
 800f0dc:	3a01      	subs	r2, #1
 800f0de:	e736      	b.n	800ef4e <__kernel_rem_pio2+0x20e>
 800f0e0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800f0e2:	2a02      	cmp	r2, #2
 800f0e4:	dc0a      	bgt.n	800f0fc <__kernel_rem_pio2+0x3bc>
 800f0e6:	2a00      	cmp	r2, #0
 800f0e8:	dc2d      	bgt.n	800f146 <__kernel_rem_pio2+0x406>
 800f0ea:	d046      	beq.n	800f17a <__kernel_rem_pio2+0x43a>
 800f0ec:	f008 0007 	and.w	r0, r8, #7
 800f0f0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800f0f4:	ecbd 8b06 	vpop	{d8-d10}
 800f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800f0fe:	2a03      	cmp	r2, #3
 800f100:	d1f4      	bne.n	800f0ec <__kernel_rem_pio2+0x3ac>
 800f102:	a942      	add	r1, sp, #264	@ 0x108
 800f104:	f1a3 0208 	sub.w	r2, r3, #8
 800f108:	440a      	add	r2, r1
 800f10a:	4611      	mov	r1, r2
 800f10c:	4620      	mov	r0, r4
 800f10e:	2800      	cmp	r0, #0
 800f110:	f1a1 0108 	sub.w	r1, r1, #8
 800f114:	dc52      	bgt.n	800f1bc <__kernel_rem_pio2+0x47c>
 800f116:	4621      	mov	r1, r4
 800f118:	2901      	cmp	r1, #1
 800f11a:	f1a2 0208 	sub.w	r2, r2, #8
 800f11e:	dc5d      	bgt.n	800f1dc <__kernel_rem_pio2+0x49c>
 800f120:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800f230 <__kernel_rem_pio2+0x4f0>
 800f124:	aa42      	add	r2, sp, #264	@ 0x108
 800f126:	4413      	add	r3, r2
 800f128:	2c01      	cmp	r4, #1
 800f12a:	dc67      	bgt.n	800f1fc <__kernel_rem_pio2+0x4bc>
 800f12c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800f130:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800f134:	2e00      	cmp	r6, #0
 800f136:	d167      	bne.n	800f208 <__kernel_rem_pio2+0x4c8>
 800f138:	ed87 5b00 	vstr	d5, [r7]
 800f13c:	ed87 6b02 	vstr	d6, [r7, #8]
 800f140:	ed87 7b04 	vstr	d7, [r7, #16]
 800f144:	e7d2      	b.n	800f0ec <__kernel_rem_pio2+0x3ac>
 800f146:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800f230 <__kernel_rem_pio2+0x4f0>
 800f14a:	aa42      	add	r2, sp, #264	@ 0x108
 800f14c:	4413      	add	r3, r2
 800f14e:	4622      	mov	r2, r4
 800f150:	2a00      	cmp	r2, #0
 800f152:	da24      	bge.n	800f19e <__kernel_rem_pio2+0x45e>
 800f154:	b34e      	cbz	r6, 800f1aa <__kernel_rem_pio2+0x46a>
 800f156:	eeb1 7b46 	vneg.f64	d7, d6
 800f15a:	ed87 7b00 	vstr	d7, [r7]
 800f15e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800f162:	aa44      	add	r2, sp, #272	@ 0x110
 800f164:	2301      	movs	r3, #1
 800f166:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f16a:	429c      	cmp	r4, r3
 800f16c:	da20      	bge.n	800f1b0 <__kernel_rem_pio2+0x470>
 800f16e:	b10e      	cbz	r6, 800f174 <__kernel_rem_pio2+0x434>
 800f170:	eeb1 7b47 	vneg.f64	d7, d7
 800f174:	ed87 7b02 	vstr	d7, [r7, #8]
 800f178:	e7b8      	b.n	800f0ec <__kernel_rem_pio2+0x3ac>
 800f17a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800f230 <__kernel_rem_pio2+0x4f0>
 800f17e:	aa42      	add	r2, sp, #264	@ 0x108
 800f180:	4413      	add	r3, r2
 800f182:	2c00      	cmp	r4, #0
 800f184:	da05      	bge.n	800f192 <__kernel_rem_pio2+0x452>
 800f186:	b10e      	cbz	r6, 800f18c <__kernel_rem_pio2+0x44c>
 800f188:	eeb1 7b47 	vneg.f64	d7, d7
 800f18c:	ed87 7b00 	vstr	d7, [r7]
 800f190:	e7ac      	b.n	800f0ec <__kernel_rem_pio2+0x3ac>
 800f192:	ed33 6b02 	vldmdb	r3!, {d6}
 800f196:	3c01      	subs	r4, #1
 800f198:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f19c:	e7f1      	b.n	800f182 <__kernel_rem_pio2+0x442>
 800f19e:	ed33 7b02 	vldmdb	r3!, {d7}
 800f1a2:	3a01      	subs	r2, #1
 800f1a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f1a8:	e7d2      	b.n	800f150 <__kernel_rem_pio2+0x410>
 800f1aa:	eeb0 7b46 	vmov.f64	d7, d6
 800f1ae:	e7d4      	b.n	800f15a <__kernel_rem_pio2+0x41a>
 800f1b0:	ecb2 6b02 	vldmia	r2!, {d6}
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f1ba:	e7d6      	b.n	800f16a <__kernel_rem_pio2+0x42a>
 800f1bc:	ed91 7b00 	vldr	d7, [r1]
 800f1c0:	ed91 5b02 	vldr	d5, [r1, #8]
 800f1c4:	3801      	subs	r0, #1
 800f1c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f1ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f1ce:	ed81 6b00 	vstr	d6, [r1]
 800f1d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f1d6:	ed81 7b02 	vstr	d7, [r1, #8]
 800f1da:	e798      	b.n	800f10e <__kernel_rem_pio2+0x3ce>
 800f1dc:	ed92 7b00 	vldr	d7, [r2]
 800f1e0:	ed92 5b02 	vldr	d5, [r2, #8]
 800f1e4:	3901      	subs	r1, #1
 800f1e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f1ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f1ee:	ed82 6b00 	vstr	d6, [r2]
 800f1f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f1f6:	ed82 7b02 	vstr	d7, [r2, #8]
 800f1fa:	e78d      	b.n	800f118 <__kernel_rem_pio2+0x3d8>
 800f1fc:	ed33 6b02 	vldmdb	r3!, {d6}
 800f200:	3c01      	subs	r4, #1
 800f202:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f206:	e78f      	b.n	800f128 <__kernel_rem_pio2+0x3e8>
 800f208:	eeb1 5b45 	vneg.f64	d5, d5
 800f20c:	eeb1 6b46 	vneg.f64	d6, d6
 800f210:	ed87 5b00 	vstr	d5, [r7]
 800f214:	eeb1 7b47 	vneg.f64	d7, d7
 800f218:	ed87 6b02 	vstr	d6, [r7, #8]
 800f21c:	e790      	b.n	800f140 <__kernel_rem_pio2+0x400>
 800f21e:	bf00      	nop
 800f220:	00000000 	.word	0x00000000
 800f224:	41700000 	.word	0x41700000
 800f228:	00000000 	.word	0x00000000
 800f22c:	3e700000 	.word	0x3e700000
	...

0800f238 <scalbn>:
 800f238:	ee10 1a90 	vmov	r1, s1
 800f23c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f240:	b98b      	cbnz	r3, 800f266 <scalbn+0x2e>
 800f242:	ee10 3a10 	vmov	r3, s0
 800f246:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800f24a:	4319      	orrs	r1, r3
 800f24c:	d00a      	beq.n	800f264 <scalbn+0x2c>
 800f24e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f300 <scalbn+0xc8>
 800f252:	4b37      	ldr	r3, [pc, #220]	@ (800f330 <scalbn+0xf8>)
 800f254:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f258:	4298      	cmp	r0, r3
 800f25a:	da0b      	bge.n	800f274 <scalbn+0x3c>
 800f25c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f308 <scalbn+0xd0>
 800f260:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f264:	4770      	bx	lr
 800f266:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d107      	bne.n	800f27e <scalbn+0x46>
 800f26e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f272:	4770      	bx	lr
 800f274:	ee10 1a90 	vmov	r1, s1
 800f278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f27c:	3b36      	subs	r3, #54	@ 0x36
 800f27e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f282:	4290      	cmp	r0, r2
 800f284:	dd0d      	ble.n	800f2a2 <scalbn+0x6a>
 800f286:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f310 <scalbn+0xd8>
 800f28a:	ee10 3a90 	vmov	r3, s1
 800f28e:	eeb0 6b47 	vmov.f64	d6, d7
 800f292:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800f318 <scalbn+0xe0>
 800f296:	2b00      	cmp	r3, #0
 800f298:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f29c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f2a0:	4770      	bx	lr
 800f2a2:	4418      	add	r0, r3
 800f2a4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800f2a8:	4298      	cmp	r0, r3
 800f2aa:	dcec      	bgt.n	800f286 <scalbn+0x4e>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	dd0a      	ble.n	800f2c6 <scalbn+0x8e>
 800f2b0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f2b4:	ec53 2b10 	vmov	r2, r3, d0
 800f2b8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f2bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800f2c0:	ec43 2b10 	vmov	d0, r2, r3
 800f2c4:	4770      	bx	lr
 800f2c6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800f2ca:	da09      	bge.n	800f2e0 <scalbn+0xa8>
 800f2cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800f308 <scalbn+0xd0>
 800f2d0:	ee10 3a90 	vmov	r3, s1
 800f2d4:	eeb0 6b47 	vmov.f64	d6, d7
 800f2d8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800f320 <scalbn+0xe8>
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	e7db      	b.n	800f298 <scalbn+0x60>
 800f2e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f2e4:	ec53 2b10 	vmov	r2, r3, d0
 800f2e8:	3036      	adds	r0, #54	@ 0x36
 800f2ea:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f2ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800f2f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f328 <scalbn+0xf0>
 800f2f6:	ec43 2b10 	vmov	d0, r2, r3
 800f2fa:	e7b1      	b.n	800f260 <scalbn+0x28>
 800f2fc:	f3af 8000 	nop.w
 800f300:	00000000 	.word	0x00000000
 800f304:	43500000 	.word	0x43500000
 800f308:	c2f8f359 	.word	0xc2f8f359
 800f30c:	01a56e1f 	.word	0x01a56e1f
 800f310:	8800759c 	.word	0x8800759c
 800f314:	7e37e43c 	.word	0x7e37e43c
 800f318:	8800759c 	.word	0x8800759c
 800f31c:	fe37e43c 	.word	0xfe37e43c
 800f320:	c2f8f359 	.word	0xc2f8f359
 800f324:	81a56e1f 	.word	0x81a56e1f
 800f328:	00000000 	.word	0x00000000
 800f32c:	3c900000 	.word	0x3c900000
 800f330:	ffff3cb0 	.word	0xffff3cb0
 800f334:	00000000 	.word	0x00000000

0800f338 <floor>:
 800f338:	ee10 3a90 	vmov	r3, s1
 800f33c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800f340:	ee10 2a10 	vmov	r2, s0
 800f344:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800f348:	2913      	cmp	r1, #19
 800f34a:	b530      	push	{r4, r5, lr}
 800f34c:	4615      	mov	r5, r2
 800f34e:	dc33      	bgt.n	800f3b8 <floor+0x80>
 800f350:	2900      	cmp	r1, #0
 800f352:	da18      	bge.n	800f386 <floor+0x4e>
 800f354:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800f418 <floor+0xe0>
 800f358:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f35c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f364:	dd0a      	ble.n	800f37c <floor+0x44>
 800f366:	2b00      	cmp	r3, #0
 800f368:	da50      	bge.n	800f40c <floor+0xd4>
 800f36a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f36e:	4313      	orrs	r3, r2
 800f370:	2200      	movs	r2, #0
 800f372:	4293      	cmp	r3, r2
 800f374:	4b2a      	ldr	r3, [pc, #168]	@ (800f420 <floor+0xe8>)
 800f376:	bf08      	it	eq
 800f378:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f37c:	4619      	mov	r1, r3
 800f37e:	4610      	mov	r0, r2
 800f380:	ec41 0b10 	vmov	d0, r0, r1
 800f384:	e01f      	b.n	800f3c6 <floor+0x8e>
 800f386:	4827      	ldr	r0, [pc, #156]	@ (800f424 <floor+0xec>)
 800f388:	4108      	asrs	r0, r1
 800f38a:	ea03 0400 	and.w	r4, r3, r0
 800f38e:	4314      	orrs	r4, r2
 800f390:	d019      	beq.n	800f3c6 <floor+0x8e>
 800f392:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f418 <floor+0xe0>
 800f396:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f39a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a2:	ddeb      	ble.n	800f37c <floor+0x44>
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	bfbe      	ittt	lt
 800f3a8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800f3ac:	410a      	asrlt	r2, r1
 800f3ae:	189b      	addlt	r3, r3, r2
 800f3b0:	ea23 0300 	bic.w	r3, r3, r0
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	e7e1      	b.n	800f37c <floor+0x44>
 800f3b8:	2933      	cmp	r1, #51	@ 0x33
 800f3ba:	dd05      	ble.n	800f3c8 <floor+0x90>
 800f3bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f3c0:	d101      	bne.n	800f3c6 <floor+0x8e>
 800f3c2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f3c6:	bd30      	pop	{r4, r5, pc}
 800f3c8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800f3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d0:	40e0      	lsrs	r0, r4
 800f3d2:	4210      	tst	r0, r2
 800f3d4:	d0f7      	beq.n	800f3c6 <floor+0x8e>
 800f3d6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f418 <floor+0xe0>
 800f3da:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f3de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e6:	ddc9      	ble.n	800f37c <floor+0x44>
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	da02      	bge.n	800f3f2 <floor+0xba>
 800f3ec:	2914      	cmp	r1, #20
 800f3ee:	d103      	bne.n	800f3f8 <floor+0xc0>
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	ea22 0200 	bic.w	r2, r2, r0
 800f3f6:	e7c1      	b.n	800f37c <floor+0x44>
 800f3f8:	2401      	movs	r4, #1
 800f3fa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800f3fe:	fa04 f101 	lsl.w	r1, r4, r1
 800f402:	440a      	add	r2, r1
 800f404:	42aa      	cmp	r2, r5
 800f406:	bf38      	it	cc
 800f408:	191b      	addcc	r3, r3, r4
 800f40a:	e7f2      	b.n	800f3f2 <floor+0xba>
 800f40c:	2200      	movs	r2, #0
 800f40e:	4613      	mov	r3, r2
 800f410:	e7b4      	b.n	800f37c <floor+0x44>
 800f412:	bf00      	nop
 800f414:	f3af 8000 	nop.w
 800f418:	8800759c 	.word	0x8800759c
 800f41c:	7e37e43c 	.word	0x7e37e43c
 800f420:	bff00000 	.word	0xbff00000
 800f424:	000fffff 	.word	0x000fffff

0800f428 <_init>:
 800f428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42a:	bf00      	nop
 800f42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f42e:	bc08      	pop	{r3}
 800f430:	469e      	mov	lr, r3
 800f432:	4770      	bx	lr

0800f434 <_fini>:
 800f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f436:	bf00      	nop
 800f438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f43a:	bc08      	pop	{r3}
 800f43c:	469e      	mov	lr, r3
 800f43e:	4770      	bx	lr
